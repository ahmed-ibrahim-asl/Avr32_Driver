
Avr32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00002dfa  00002e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800088  00800088  00002eb6  2**0
                  ALLOC
  3 .stab         00003594  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001f02  00000000  00000000  0000644c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000834e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000848e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000085fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a247  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b132  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ef 08 	jmp	0x11de	; 0x11de <__vector_1>
       8:	0c 94 22 09 	jmp	0x1244	; 0x1244 <__vector_2>
       c:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <main>
      8a:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d0 16 	jmp	0x2da0	; 0x2da0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ec 16 	jmp	0x2dd8	; 0x2dd8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     b50:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 23       	and	r24, r24
     b5a:	4c f0       	brlt	.+18     	; 0xb6e <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
     b5c:	af e5       	ldi	r26, 0x5F	; 95
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e5       	ldi	r30, 0x5F	; 95
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     b70:	0f 90       	pop	r0
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	0f 92       	push	r0
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     b82:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
     b84:	ef e5       	ldi	r30, 0x5F	; 95
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	88 23       	and	r24, r24
     b8c:	4c f4       	brge	.+18     	; 0xba0 <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
     b8e:	af e5       	ldi	r26, 0x5F	; 95
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	ef e5       	ldi	r30, 0x5F	; 95
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8f 77       	andi	r24, 0x7F	; 127
     b9a:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ba2:	0f 90       	pop	r0
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2a 97       	sbiw	r28, 0x0a	; 10
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	9b 83       	std	Y+3, r25	; 0x03
     bc0:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
     bc2:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	9b 81       	ldd	r25, Y+3	; 0x03
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	19 f4       	brne	.+6      	; 0xbd2 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
     bcc:	29 81       	ldd	r18, Y+1	; 0x01
     bce:	2a 87       	std	Y+10, r18	; 0x0a
     bd0:	36 c1       	rjmp	.+620    	; 0xe3e <EXTI_enuInit+0x294>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_ENABLED){
     bd2:	ea 81       	ldd	r30, Y+2	; 0x02
     bd4:	fb 81       	ldd	r31, Y+3	; 0x03
     bd6:	80 81       	ld	r24, Z
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	09 f0       	breq	.+2      	; 0xbde <EXTI_enuInit+0x34>
     bdc:	64 c0       	rjmp	.+200    	; 0xca6 <EXTI_enuInit+0xfc>

			SET_BIT(GICR, INT0_switch);
     bde:	ab e5       	ldi	r26, 0x5B	; 91
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	eb e5       	ldi	r30, 0x5B	; 91
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	80 64       	ori	r24, 0x40	; 64
     bea:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_0].Sence_Level){
     bec:	ea 81       	ldd	r30, Y+2	; 0x02
     bee:	fb 81       	ldd	r31, Y+3	; 0x03
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	39 87       	std	Y+9, r19	; 0x09
     bf8:	28 87       	std	Y+8, r18	; 0x08
     bfa:	88 85       	ldd	r24, Y+8	; 0x08
     bfc:	99 85       	ldd	r25, Y+9	; 0x09
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	91 05       	cpc	r25, r1
     c02:	21 f1       	breq	.+72     	; 0xc4c <EXTI_enuInit+0xa2>
     c04:	28 85       	ldd	r18, Y+8	; 0x08
     c06:	39 85       	ldd	r19, Y+9	; 0x09
     c08:	22 30       	cpi	r18, 0x02	; 2
     c0a:	31 05       	cpc	r19, r1
     c0c:	2c f4       	brge	.+10     	; 0xc18 <EXTI_enuInit+0x6e>
     c0e:	88 85       	ldd	r24, Y+8	; 0x08
     c10:	99 85       	ldd	r25, Y+9	; 0x09
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	61 f0       	breq	.+24     	; 0xc2e <EXTI_enuInit+0x84>
     c16:	53 c0       	rjmp	.+166    	; 0xcbe <EXTI_enuInit+0x114>
     c18:	28 85       	ldd	r18, Y+8	; 0x08
     c1a:	39 85       	ldd	r19, Y+9	; 0x09
     c1c:	22 30       	cpi	r18, 0x02	; 2
     c1e:	31 05       	cpc	r19, r1
     c20:	21 f1       	breq	.+72     	; 0xc6a <EXTI_enuInit+0xc0>
     c22:	88 85       	ldd	r24, Y+8	; 0x08
     c24:	99 85       	ldd	r25, Y+9	; 0x09
     c26:	83 30       	cpi	r24, 0x03	; 3
     c28:	91 05       	cpc	r25, r1
     c2a:	71 f1       	breq	.+92     	; 0xc88 <EXTI_enuInit+0xde>
     c2c:	48 c0       	rjmp	.+144    	; 0xcbe <EXTI_enuInit+0x114>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
     c2e:	a5 e5       	ldi	r26, 0x55	; 85
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e5 e5       	ldi	r30, 0x55	; 85
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8e 7f       	andi	r24, 0xFE	; 254
     c3a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
     c3c:	a5 e5       	ldi	r26, 0x55	; 85
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e5 e5       	ldi	r30, 0x55	; 85
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8d 7f       	andi	r24, 0xFD	; 253
     c48:	8c 93       	st	X, r24
     c4a:	39 c0       	rjmp	.+114    	; 0xcbe <EXTI_enuInit+0x114>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
     c4c:	a5 e5       	ldi	r26, 0x55	; 85
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	e5 e5       	ldi	r30, 0x55	; 85
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	81 60       	ori	r24, 0x01	; 1
     c58:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
     c5a:	a5 e5       	ldi	r26, 0x55	; 85
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e5 e5       	ldi	r30, 0x55	; 85
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8d 7f       	andi	r24, 0xFD	; 253
     c66:	8c 93       	st	X, r24
     c68:	2a c0       	rjmp	.+84     	; 0xcbe <EXTI_enuInit+0x114>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
     c6a:	a5 e5       	ldi	r26, 0x55	; 85
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e5 e5       	ldi	r30, 0x55	; 85
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8e 7f       	andi	r24, 0xFE	; 254
     c76:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
     c78:	a5 e5       	ldi	r26, 0x55	; 85
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e5 e5       	ldi	r30, 0x55	; 85
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	82 60       	ori	r24, 0x02	; 2
     c84:	8c 93       	st	X, r24
     c86:	1b c0       	rjmp	.+54     	; 0xcbe <EXTI_enuInit+0x114>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
     c88:	a5 e5       	ldi	r26, 0x55	; 85
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e5 e5       	ldi	r30, 0x55	; 85
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	81 60       	ori	r24, 0x01	; 1
     c94:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
     c96:	a5 e5       	ldi	r26, 0x55	; 85
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e5 e5       	ldi	r30, 0x55	; 85
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	82 60       	ori	r24, 0x02	; 2
     ca2:	8c 93       	st	X, r24
     ca4:	0c c0       	rjmp	.+24     	; 0xcbe <EXTI_enuInit+0x114>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_DISABLED){
     ca6:	ea 81       	ldd	r30, Y+2	; 0x02
     ca8:	fb 81       	ldd	r31, Y+3	; 0x03
     caa:	80 81       	ld	r24, Z
     cac:	88 23       	and	r24, r24
     cae:	39 f4       	brne	.+14     	; 0xcbe <EXTI_enuInit+0x114>

			CLR_BIT(GICR, INT0_switch);
     cb0:	ab e5       	ldi	r26, 0x5B	; 91
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	eb e5       	ldi	r30, 0x5B	; 91
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8f 7b       	andi	r24, 0xBF	; 191
     cbc:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_ENABLED){
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	9b 81       	ldd	r25, Y+3	; 0x03
     cc2:	fc 01       	movw	r30, r24
     cc4:	32 96       	adiw	r30, 0x02	; 2
     cc6:	80 81       	ld	r24, Z
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	09 f0       	breq	.+2      	; 0xcce <EXTI_enuInit+0x124>
     ccc:	66 c0       	rjmp	.+204    	; 0xd9a <EXTI_enuInit+0x1f0>

			SET_BIT(GICR, INT1_switch);
     cce:	ab e5       	ldi	r26, 0x5B	; 91
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	eb e5       	ldi	r30, 0x5B	; 91
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	80 68       	ori	r24, 0x80	; 128
     cda:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT_NO_1].Sence_Level){
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	9b 81       	ldd	r25, Y+3	; 0x03
     ce0:	fc 01       	movw	r30, r24
     ce2:	32 96       	adiw	r30, 0x02	; 2
     ce4:	81 81       	ldd	r24, Z+1	; 0x01
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	3f 83       	std	Y+7, r19	; 0x07
     cec:	2e 83       	std	Y+6, r18	; 0x06
     cee:	8e 81       	ldd	r24, Y+6	; 0x06
     cf0:	9f 81       	ldd	r25, Y+7	; 0x07
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	91 05       	cpc	r25, r1
     cf6:	21 f1       	breq	.+72     	; 0xd40 <EXTI_enuInit+0x196>
     cf8:	2e 81       	ldd	r18, Y+6	; 0x06
     cfa:	3f 81       	ldd	r19, Y+7	; 0x07
     cfc:	22 30       	cpi	r18, 0x02	; 2
     cfe:	31 05       	cpc	r19, r1
     d00:	2c f4       	brge	.+10     	; 0xd0c <EXTI_enuInit+0x162>
     d02:	8e 81       	ldd	r24, Y+6	; 0x06
     d04:	9f 81       	ldd	r25, Y+7	; 0x07
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	61 f0       	breq	.+24     	; 0xd22 <EXTI_enuInit+0x178>
     d0a:	55 c0       	rjmp	.+170    	; 0xdb6 <EXTI_enuInit+0x20c>
     d0c:	2e 81       	ldd	r18, Y+6	; 0x06
     d0e:	3f 81       	ldd	r19, Y+7	; 0x07
     d10:	22 30       	cpi	r18, 0x02	; 2
     d12:	31 05       	cpc	r19, r1
     d14:	21 f1       	breq	.+72     	; 0xd5e <EXTI_enuInit+0x1b4>
     d16:	8e 81       	ldd	r24, Y+6	; 0x06
     d18:	9f 81       	ldd	r25, Y+7	; 0x07
     d1a:	83 30       	cpi	r24, 0x03	; 3
     d1c:	91 05       	cpc	r25, r1
     d1e:	71 f1       	breq	.+92     	; 0xd7c <EXTI_enuInit+0x1d2>
     d20:	4a c0       	rjmp	.+148    	; 0xdb6 <EXTI_enuInit+0x20c>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
     d22:	a5 e5       	ldi	r26, 0x55	; 85
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e5 e5       	ldi	r30, 0x55	; 85
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	8b 7f       	andi	r24, 0xFB	; 251
     d2e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
     d30:	a5 e5       	ldi	r26, 0x55	; 85
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e5 e5       	ldi	r30, 0x55	; 85
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	87 7f       	andi	r24, 0xF7	; 247
     d3c:	8c 93       	st	X, r24
     d3e:	3b c0       	rjmp	.+118    	; 0xdb6 <EXTI_enuInit+0x20c>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
     d40:	a5 e5       	ldi	r26, 0x55	; 85
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e5 e5       	ldi	r30, 0x55	; 85
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	84 60       	ori	r24, 0x04	; 4
     d4c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
     d4e:	a5 e5       	ldi	r26, 0x55	; 85
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e5 e5       	ldi	r30, 0x55	; 85
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	87 7f       	andi	r24, 0xF7	; 247
     d5a:	8c 93       	st	X, r24
     d5c:	2c c0       	rjmp	.+88     	; 0xdb6 <EXTI_enuInit+0x20c>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
     d5e:	a5 e5       	ldi	r26, 0x55	; 85
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 e5       	ldi	r30, 0x55	; 85
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8b 7f       	andi	r24, 0xFB	; 251
     d6a:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
     d6c:	a5 e5       	ldi	r26, 0x55	; 85
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e5 e5       	ldi	r30, 0x55	; 85
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	88 60       	ori	r24, 0x08	; 8
     d78:	8c 93       	st	X, r24
     d7a:	1d c0       	rjmp	.+58     	; 0xdb6 <EXTI_enuInit+0x20c>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
     d7c:	a5 e5       	ldi	r26, 0x55	; 85
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e5 e5       	ldi	r30, 0x55	; 85
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	84 60       	ori	r24, 0x04	; 4
     d88:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
     d8a:	a5 e5       	ldi	r26, 0x55	; 85
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e5 e5       	ldi	r30, 0x55	; 85
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	88 60       	ori	r24, 0x08	; 8
     d96:	8c 93       	st	X, r24
     d98:	0e c0       	rjmp	.+28     	; 0xdb6 <EXTI_enuInit+0x20c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_DISABLED){
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	9b 81       	ldd	r25, Y+3	; 0x03
     d9e:	fc 01       	movw	r30, r24
     da0:	32 96       	adiw	r30, 0x02	; 2
     da2:	80 81       	ld	r24, Z
     da4:	88 23       	and	r24, r24
     da6:	39 f4       	brne	.+14     	; 0xdb6 <EXTI_enuInit+0x20c>

			CLR_BIT(GICR, INT1_switch);
     da8:	ab e5       	ldi	r26, 0x5B	; 91
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e5       	ldi	r30, 0x5B	; 91
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 77       	andi	r24, 0x7F	; 127
     db4:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_ENABLED){
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	fc 01       	movw	r30, r24
     dbc:	34 96       	adiw	r30, 0x04	; 4
     dbe:	80 81       	ld	r24, Z
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	59 f5       	brne	.+86     	; 0xe1a <EXTI_enuInit+0x270>

			SET_BIT(GICR, INT2_switch);
     dc4:	ab e5       	ldi	r26, 0x5B	; 91
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	eb e5       	ldi	r30, 0x5B	; 91
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	80 62       	ori	r24, 0x20	; 32
     dd0:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_2].Sence_Level){
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	fc 01       	movw	r30, r24
     dd8:	34 96       	adiw	r30, 0x04	; 4
     dda:	81 81       	ldd	r24, Z+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	3d 83       	std	Y+5, r19	; 0x05
     de2:	2c 83       	std	Y+4, r18	; 0x04
     de4:	8c 81       	ldd	r24, Y+4	; 0x04
     de6:	9d 81       	ldd	r25, Y+5	; 0x05
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	91 05       	cpc	r25, r1
     dec:	31 f0       	breq	.+12     	; 0xdfa <EXTI_enuInit+0x250>
     dee:	2c 81       	ldd	r18, Y+4	; 0x04
     df0:	3d 81       	ldd	r19, Y+5	; 0x05
     df2:	23 30       	cpi	r18, 0x03	; 3
     df4:	31 05       	cpc	r19, r1
     df6:	49 f0       	breq	.+18     	; 0xe0a <EXTI_enuInit+0x260>
     df8:	1e c0       	rjmp	.+60     	; 0xe36 <EXTI_enuInit+0x28c>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
     dfa:	a4 e5       	ldi	r26, 0x54	; 84
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e4 e5       	ldi	r30, 0x54	; 84
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 7b       	andi	r24, 0xBF	; 191
     e06:	8c 93       	st	X, r24
     e08:	16 c0       	rjmp	.+44     	; 0xe36 <EXTI_enuInit+0x28c>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
     e0a:	a4 e5       	ldi	r26, 0x54	; 84
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e4 e5       	ldi	r30, 0x54	; 84
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	80 64       	ori	r24, 0x40	; 64
     e16:	8c 93       	st	X, r24
     e18:	0e c0       	rjmp	.+28     	; 0xe36 <EXTI_enuInit+0x28c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_DISABLED){
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	fc 01       	movw	r30, r24
     e20:	34 96       	adiw	r30, 0x04	; 4
     e22:	80 81       	ld	r24, Z
     e24:	88 23       	and	r24, r24
     e26:	39 f4       	brne	.+14     	; 0xe36 <EXTI_enuInit+0x28c>

			CLR_BIT(GICR, INT2_switch);
     e28:	ab e5       	ldi	r26, 0x5B	; 91
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	eb e5       	ldi	r30, 0x5B	; 91
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8f 7d       	andi	r24, 0xDF	; 223
     e34:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
     e3a:	39 81       	ldd	r19, Y+1	; 0x01
     e3c:	3a 87       	std	Y+10, r19	; 0x0a
     e3e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
     e40:	2a 96       	adiw	r28, 0x0a	; 10
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <EXTI_enuEnableInterrupt>:

ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <EXTI_enuEnableInterrupt+0x6>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <EXTI_enuEnableInterrupt+0x8>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
     e60:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	3c 83       	std	Y+4, r19	; 0x04
     e6a:	2b 83       	std	Y+3, r18	; 0x03
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	9c 81       	ldd	r25, Y+4	; 0x04
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	91 05       	cpc	r25, r1
     e74:	89 f0       	breq	.+34     	; 0xe98 <EXTI_enuEnableInterrupt+0x46>
     e76:	2b 81       	ldd	r18, Y+3	; 0x03
     e78:	3c 81       	ldd	r19, Y+4	; 0x04
     e7a:	22 30       	cpi	r18, 0x02	; 2
     e7c:	31 05       	cpc	r19, r1
     e7e:	a1 f0       	breq	.+40     	; 0xea8 <EXTI_enuEnableInterrupt+0x56>
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	b9 f4       	brne	.+46     	; 0xeb6 <EXTI_enuEnableInterrupt+0x64>
			case INT_NO_0:

				SET_BIT(GICR, INT0_switch);
     e88:	ab e5       	ldi	r26, 0x5B	; 91
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	eb e5       	ldi	r30, 0x5B	; 91
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	80 64       	ori	r24, 0x40	; 64
     e94:	8c 93       	st	X, r24
     e96:	0f c0       	rjmp	.+30     	; 0xeb6 <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_1:

				SET_BIT(GICR, INT1_switch);
     e98:	ab e5       	ldi	r26, 0x5B	; 91
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	eb e5       	ldi	r30, 0x5B	; 91
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 68       	ori	r24, 0x80	; 128
     ea4:	8c 93       	st	X, r24
     ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_2:

				SET_BIT(GICR, INT2_switch);
     ea8:	ab e5       	ldi	r26, 0x5B	; 91
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	eb e5       	ldi	r30, 0x5B	; 91
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 62       	ori	r24, 0x20	; 32
     eb4:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <EXTI_enuDisableInterrupt>:

ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <EXTI_enuDisableInterrupt+0x6>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <EXTI_enuDisableInterrupt+0x8>
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
     eda:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT_NO_2){
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	83 30       	cpi	r24, 0x03	; 3
     ee0:	18 f0       	brcs	.+6      	; 0xee8 <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
     ee2:	29 81       	ldd	r18, Y+1	; 0x01
     ee4:	2d 83       	std	Y+5, r18	; 0x05
     ee6:	2e c0       	rjmp	.+92     	; 0xf44 <EXTI_enuDisableInterrupt+0x7a>
	}

	else{

		switch(Copy_u8IntNumber){
     ee8:	8a 81       	ldd	r24, Y+2	; 0x02
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	3c 83       	std	Y+4, r19	; 0x04
     ef0:	2b 83       	std	Y+3, r18	; 0x03
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	91 05       	cpc	r25, r1
     efa:	89 f0       	breq	.+34     	; 0xf1e <EXTI_enuDisableInterrupt+0x54>
     efc:	2b 81       	ldd	r18, Y+3	; 0x03
     efe:	3c 81       	ldd	r19, Y+4	; 0x04
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	a1 f0       	breq	.+40     	; 0xf2e <EXTI_enuDisableInterrupt+0x64>
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	b9 f4       	brne	.+46     	; 0xf3c <EXTI_enuDisableInterrupt+0x72>
		case INT_NO_0:

			
			GICR &= ~(1<<INT0_switch);
     f0e:	ab e5       	ldi	r26, 0x5B	; 91
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	eb e5       	ldi	r30, 0x5B	; 91
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7b       	andi	r24, 0xBF	; 191
     f1a:	8c 93       	st	X, r24
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_1:

			GICR &= ~(1<<INT1_switch);
     f1e:	ab e5       	ldi	r26, 0x5B	; 91
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	eb e5       	ldi	r30, 0x5B	; 91
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	8f 77       	andi	r24, 0x7F	; 127
     f2a:	8c 93       	st	X, r24
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_2:

			GICR &= ~(1<<INT2_switch);
     f2e:	ab e5       	ldi	r26, 0x5B	; 91
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	eb e5       	ldi	r30, 0x5B	; 91
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	8f 7d       	andi	r24, 0xDF	; 223
     f3a:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
     f40:	99 81       	ldd	r25, Y+1	; 0x01
     f42:	9d 83       	std	Y+5, r25	; 0x05
     f44:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
     f5e:	2c 97       	sbiw	r28, 0x0c	; 12
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	8a 83       	std	Y+2, r24	; 0x02
     f6c:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
     f6e:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT_NO_2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	83 30       	cpi	r24, 0x03	; 3
     f74:	18 f4       	brcc	.+6      	; 0xf7c <EXTI_enuSetSenseLevel+0x26>
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	84 30       	cpi	r24, 0x04	; 4
     f7a:	18 f0       	brcs	.+6      	; 0xf82 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
     f7c:	29 81       	ldd	r18, Y+1	; 0x01
     f7e:	2c 87       	std	Y+12, r18	; 0x0c
     f80:	ef c0       	rjmp	.+478    	; 0x1160 <EXTI_enuSetSenseLevel+0x20a>
	}

	else{

		switch(Copy_u8IntNumber){
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	3b 87       	std	Y+11, r19	; 0x0b
     f8a:	2a 87       	std	Y+10, r18	; 0x0a
     f8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f8e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <EXTI_enuSetSenseLevel+0x42>
     f96:	66 c0       	rjmp	.+204    	; 0x1064 <EXTI_enuSetSenseLevel+0x10e>
     f98:	2a 85       	ldd	r18, Y+10	; 0x0a
     f9a:	3b 85       	ldd	r19, Y+11	; 0x0b
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <EXTI_enuSetSenseLevel+0x4e>
     fa2:	bb c0       	rjmp	.+374    	; 0x111a <EXTI_enuSetSenseLevel+0x1c4>
     fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	09 f0       	breq	.+2      	; 0xfae <EXTI_enuSetSenseLevel+0x58>
     fac:	d5 c0       	rjmp	.+426    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>
		case INT_NO_0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	39 87       	std	Y+9, r19	; 0x09
     fb6:	28 87       	std	Y+8, r18	; 0x08
     fb8:	88 85       	ldd	r24, Y+8	; 0x08
     fba:	99 85       	ldd	r25, Y+9	; 0x09
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	91 05       	cpc	r25, r1
     fc0:	a9 f0       	breq	.+42     	; 0xfec <EXTI_enuSetSenseLevel+0x96>
     fc2:	28 85       	ldd	r18, Y+8	; 0x08
     fc4:	39 85       	ldd	r19, Y+9	; 0x09
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	2c f4       	brge	.+10     	; 0xfd6 <EXTI_enuSetSenseLevel+0x80>
     fcc:	88 85       	ldd	r24, Y+8	; 0x08
     fce:	99 85       	ldd	r25, Y+9	; 0x09
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	d9 f0       	breq	.+54     	; 0x100a <EXTI_enuSetSenseLevel+0xb4>
     fd4:	c1 c0       	rjmp	.+386    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>
     fd6:	28 85       	ldd	r18, Y+8	; 0x08
     fd8:	39 85       	ldd	r19, Y+9	; 0x09
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	21 f1       	breq	.+72     	; 0x1028 <EXTI_enuSetSenseLevel+0xd2>
     fe0:	88 85       	ldd	r24, Y+8	; 0x08
     fe2:	99 85       	ldd	r25, Y+9	; 0x09
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	91 05       	cpc	r25, r1
     fe8:	71 f1       	breq	.+92     	; 0x1046 <EXTI_enuSetSenseLevel+0xf0>
     fea:	b6 c0       	rjmp	.+364    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
     fec:	a5 e5       	ldi	r26, 0x55	; 85
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e5       	ldi	r30, 0x55	; 85
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	81 60       	ori	r24, 0x01	; 1
     ff8:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
     ffa:	a5 e5       	ldi	r26, 0x55	; 85
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e5       	ldi	r30, 0x55	; 85
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	8d 7f       	andi	r24, 0xFD	; 253
    1006:	8c 93       	st	X, r24
    1008:	a7 c0       	rjmp	.+334    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    100a:	a5 e5       	ldi	r26, 0x55	; 85
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e5 e5       	ldi	r30, 0x55	; 85
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	8e 7f       	andi	r24, 0xFE	; 254
    1016:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    1018:	a5 e5       	ldi	r26, 0x55	; 85
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e5 e5       	ldi	r30, 0x55	; 85
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8d 7f       	andi	r24, 0xFD	; 253
    1024:	8c 93       	st	X, r24
    1026:	98 c0       	rjmp	.+304    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    1028:	a5 e5       	ldi	r26, 0x55	; 85
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e5 e5       	ldi	r30, 0x55	; 85
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8e 7f       	andi	r24, 0xFE	; 254
    1034:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    1036:	a5 e5       	ldi	r26, 0x55	; 85
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e5       	ldi	r30, 0x55	; 85
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	82 60       	ori	r24, 0x02	; 2
    1042:	8c 93       	st	X, r24
    1044:	89 c0       	rjmp	.+274    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    1046:	a5 e5       	ldi	r26, 0x55	; 85
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e5 e5       	ldi	r30, 0x55	; 85
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	81 60       	ori	r24, 0x01	; 1
    1052:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    1054:	a5 e5       	ldi	r26, 0x55	; 85
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e5 e5       	ldi	r30, 0x55	; 85
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	82 60       	ori	r24, 0x02	; 2
    1060:	8c 93       	st	X, r24
    1062:	7a c0       	rjmp	.+244    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>
			/**************************************************/

		case INT_NO_1:

			/**************** 1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3f 83       	std	Y+7, r19	; 0x07
    106c:	2e 83       	std	Y+6, r18	; 0x06
    106e:	8e 81       	ldd	r24, Y+6	; 0x06
    1070:	9f 81       	ldd	r25, Y+7	; 0x07
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	a9 f0       	breq	.+42     	; 0x10a2 <EXTI_enuSetSenseLevel+0x14c>
    1078:	2e 81       	ldd	r18, Y+6	; 0x06
    107a:	3f 81       	ldd	r19, Y+7	; 0x07
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	2c f4       	brge	.+10     	; 0x108c <EXTI_enuSetSenseLevel+0x136>
    1082:	8e 81       	ldd	r24, Y+6	; 0x06
    1084:	9f 81       	ldd	r25, Y+7	; 0x07
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	d9 f0       	breq	.+54     	; 0x10c0 <EXTI_enuSetSenseLevel+0x16a>
    108a:	66 c0       	rjmp	.+204    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>
    108c:	2e 81       	ldd	r18, Y+6	; 0x06
    108e:	3f 81       	ldd	r19, Y+7	; 0x07
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	21 f1       	breq	.+72     	; 0x10de <EXTI_enuSetSenseLevel+0x188>
    1096:	8e 81       	ldd	r24, Y+6	; 0x06
    1098:	9f 81       	ldd	r25, Y+7	; 0x07
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	71 f1       	breq	.+92     	; 0x10fc <EXTI_enuSetSenseLevel+0x1a6>
    10a0:	5b c0       	rjmp	.+182    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    10a2:	a5 e5       	ldi	r26, 0x55	; 85
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e5 e5       	ldi	r30, 0x55	; 85
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	84 60       	ori	r24, 0x04	; 4
    10ae:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    10b0:	a5 e5       	ldi	r26, 0x55	; 85
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e5 e5       	ldi	r30, 0x55	; 85
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	87 7f       	andi	r24, 0xF7	; 247
    10bc:	8c 93       	st	X, r24
    10be:	4c c0       	rjmp	.+152    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    10c0:	a5 e5       	ldi	r26, 0x55	; 85
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e5       	ldi	r30, 0x55	; 85
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8b 7f       	andi	r24, 0xFB	; 251
    10cc:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    10ce:	a5 e5       	ldi	r26, 0x55	; 85
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e5       	ldi	r30, 0x55	; 85
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	87 7f       	andi	r24, 0xF7	; 247
    10da:	8c 93       	st	X, r24
    10dc:	3d c0       	rjmp	.+122    	; 0x1158 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    10de:	a5 e5       	ldi	r26, 0x55	; 85
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e5       	ldi	r30, 0x55	; 85
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	8b 7f       	andi	r24, 0xFB	; 251
    10ea:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    10ec:	a5 e5       	ldi	r26, 0x55	; 85
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e5       	ldi	r30, 0x55	; 85
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	88 60       	ori	r24, 0x08	; 8
    10f8:	8c 93       	st	X, r24
    10fa:	2e c0       	rjmp	.+92     	; 0x1158 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    10fc:	a5 e5       	ldi	r26, 0x55	; 85
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e5 e5       	ldi	r30, 0x55	; 85
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	84 60       	ori	r24, 0x04	; 4
    1108:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    110a:	a5 e5       	ldi	r26, 0x55	; 85
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e5       	ldi	r30, 0x55	; 85
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	88 60       	ori	r24, 0x08	; 8
    1116:	8c 93       	st	X, r24
    1118:	1f c0       	rjmp	.+62     	; 0x1158 <EXTI_enuSetSenseLevel+0x202>


		case INT_NO_2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3d 83       	std	Y+5, r19	; 0x05
    1122:	2c 83       	std	Y+4, r18	; 0x04
    1124:	8c 81       	ldd	r24, Y+4	; 0x04
    1126:	9d 81       	ldd	r25, Y+5	; 0x05
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	91 05       	cpc	r25, r1
    112c:	31 f0       	breq	.+12     	; 0x113a <EXTI_enuSetSenseLevel+0x1e4>
    112e:	2c 81       	ldd	r18, Y+4	; 0x04
    1130:	3d 81       	ldd	r19, Y+5	; 0x05
    1132:	23 30       	cpi	r18, 0x03	; 3
    1134:	31 05       	cpc	r19, r1
    1136:	49 f0       	breq	.+18     	; 0x114a <EXTI_enuSetSenseLevel+0x1f4>
    1138:	0f c0       	rjmp	.+30     	; 0x1158 <EXTI_enuSetSenseLevel+0x202>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    113a:	a4 e5       	ldi	r26, 0x54	; 84
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e4 e5       	ldi	r30, 0x54	; 84
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8f 7b       	andi	r24, 0xBF	; 191
    1146:	8c 93       	st	X, r24
    1148:	07 c0       	rjmp	.+14     	; 0x1158 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    114a:	a4 e5       	ldi	r26, 0x54	; 84
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e4 e5       	ldi	r30, 0x54	; 84
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	80 64       	ori	r24, 0x40	; 64
    1156:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    115c:	39 81       	ldd	r19, Y+1	; 0x01
    115e:	3c 87       	std	Y+12, r19	; 0x0c
    1160:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1162:	2c 96       	adiw	r28, 0x0c	; 12
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <EXTI_enuSetCallBack+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <EXTI_enuSetCallBack+0x8>
    117c:	0f 92       	push	r0
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	9b 83       	std	Y+3, r25	; 0x03
    1184:	8a 83       	std	Y+2, r24	; 0x02
    1186:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    1188:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	9b 81       	ldd	r25, Y+3	; 0x03
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	29 f4       	brne	.+10     	; 0x119c <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	18 c0       	rjmp	.+48     	; 0x11cc <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT_NO_2){
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	83 30       	cpi	r24, 0x03	; 3
    11a0:	28 f0       	brcs	.+10     	; 0x11ac <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    11a2:	84 e0       	ldi	r24, 0x04	; 4
    11a4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	10 c0       	rjmp	.+32     	; 0x11cc <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	fc 01       	movw	r30, r24
    11b8:	e8 57       	subi	r30, 0x78	; 120
    11ba:	ff 4f       	sbci	r31, 0xFF	; 255
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	91 83       	std	Z+1, r25	; 0x01
    11c2:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	8d 83       	std	Y+5, r24	; 0x05
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	08 95       	ret

000011de <__vector_1>:


ISR(INT0_vect){
    11de:	1f 92       	push	r1
    11e0:	0f 92       	push	r0
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	0f 92       	push	r0
    11e6:	11 24       	eor	r1, r1
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_0] != NULL){
    1208:	80 91 88 00 	lds	r24, 0x0088
    120c:	90 91 89 00 	lds	r25, 0x0089
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	29 f0       	breq	.+10     	; 0x121e <__vector_1+0x40>
			EXTI_pfunISRFun[INT_NO_0]();
    1214:	e0 91 88 00 	lds	r30, 0x0088
    1218:	f0 91 89 00 	lds	r31, 0x0089
    121c:	09 95       	icall
		}
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	ff 91       	pop	r31
    1224:	ef 91       	pop	r30
    1226:	bf 91       	pop	r27
    1228:	af 91       	pop	r26
    122a:	9f 91       	pop	r25
    122c:	8f 91       	pop	r24
    122e:	7f 91       	pop	r23
    1230:	6f 91       	pop	r22
    1232:	5f 91       	pop	r21
    1234:	4f 91       	pop	r20
    1236:	3f 91       	pop	r19
    1238:	2f 91       	pop	r18
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 90       	pop	r0
    1240:	1f 90       	pop	r1
    1242:	18 95       	reti

00001244 <__vector_2>:




ISR(INT1_vect){
    1244:	1f 92       	push	r1
    1246:	0f 92       	push	r0
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	0f 92       	push	r0
    124c:	11 24       	eor	r1, r1
    124e:	2f 93       	push	r18
    1250:	3f 93       	push	r19
    1252:	4f 93       	push	r20
    1254:	5f 93       	push	r21
    1256:	6f 93       	push	r22
    1258:	7f 93       	push	r23
    125a:	8f 93       	push	r24
    125c:	9f 93       	push	r25
    125e:	af 93       	push	r26
    1260:	bf 93       	push	r27
    1262:	ef 93       	push	r30
    1264:	ff 93       	push	r31
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_1] != NULL){
    126e:	80 91 8a 00 	lds	r24, 0x008A
    1272:	90 91 8b 00 	lds	r25, 0x008B
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	29 f0       	breq	.+10     	; 0x1284 <__vector_2+0x40>
			EXTI_pfunISRFun[INT_NO_1]();
    127a:	e0 91 8a 00 	lds	r30, 0x008A
    127e:	f0 91 8b 00 	lds	r31, 0x008B
    1282:	09 95       	icall
		}
}
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	0f 90       	pop	r0
    12a6:	1f 90       	pop	r1
    12a8:	18 95       	reti

000012aa <__vector_3>:



ISR(INT2_vect){
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	2f 93       	push	r18
    12b6:	3f 93       	push	r19
    12b8:	4f 93       	push	r20
    12ba:	5f 93       	push	r21
    12bc:	6f 93       	push	r22
    12be:	7f 93       	push	r23
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	af 93       	push	r26
    12c6:	bf 93       	push	r27
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
    12cc:	df 93       	push	r29
    12ce:	cf 93       	push	r28
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_2] != NULL){
    12d4:	80 91 8c 00 	lds	r24, 0x008C
    12d8:	90 91 8d 00 	lds	r25, 0x008D
    12dc:	00 97       	sbiw	r24, 0x00	; 0
    12de:	29 f0       	breq	.+10     	; 0x12ea <__vector_3+0x40>
			EXTI_pfunISRFun[INT_NO_2]();
    12e0:	e0 91 8c 00 	lds	r30, 0x008C
    12e4:	f0 91 8d 00 	lds	r31, 0x008D
    12e8:	09 95       	icall
		}
}
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	0f 92       	push	r0
    1316:	cd b7       	in	r28, 0x3d	; 61
    1318:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    131a:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    131c:	ea e3       	ldi	r30, 0x3A	; 58
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 ef       	ldi	r24, 0xF0	; 240
    1322:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    1324:	eb e3       	ldi	r30, 0x3B	; 59
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	83 ec       	ldi	r24, 0xC3	; 195
    132a:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    132c:	e7 e3       	ldi	r30, 0x37	; 55
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 ef       	ldi	r24, 0xF0	; 240
    1332:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    1334:	e8 e3       	ldi	r30, 0x38	; 56
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	83 ec       	ldi	r24, 0xC3	; 195
    133a:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    133c:	e4 e3       	ldi	r30, 0x34	; 52
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 ef       	ldi	r24, 0xF0	; 240
    1342:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    1344:	e5 e3       	ldi	r30, 0x35	; 53
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	83 ec       	ldi	r24, 0xC3	; 195
    134a:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    134c:	e1 e3       	ldi	r30, 0x31	; 49
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 ef       	ldi	r24, 0xF0	; 240
    1352:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    1354:	e2 e3       	ldi	r30, 0x32	; 50
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	83 ec       	ldi	r24, 0xC3	; 195
    135a:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    135c:	89 81       	ldd	r24, Y+1	; 0x01
}
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	27 97       	sbiw	r28, 0x07	; 7
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	8a 83       	std	Y+2, r24	; 0x02
    137c:	6b 83       	std	Y+3, r22	; 0x03
    137e:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1380:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	84 30       	cpi	r24, 0x04	; 4
    1386:	08 f0       	brcs	.+2      	; 0x138a <DIO_enuSetPinDirection+0x24>
    1388:	de c0       	rjmp	.+444    	; 0x1546 <DIO_enuSetPinDirection+0x1e0>
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	88 30       	cpi	r24, 0x08	; 8
    138e:	08 f0       	brcs	.+2      	; 0x1392 <DIO_enuSetPinDirection+0x2c>
    1390:	da c0       	rjmp	.+436    	; 0x1546 <DIO_enuSetPinDirection+0x1e0>
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	08 f0       	brcs	.+2      	; 0x139a <DIO_enuSetPinDirection+0x34>
    1398:	d6 c0       	rjmp	.+428    	; 0x1546 <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	28 2f       	mov	r18, r24
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	3f 83       	std	Y+7, r19	; 0x07
    13a2:	2e 83       	std	Y+6, r18	; 0x06
    13a4:	8e 81       	ldd	r24, Y+6	; 0x06
    13a6:	9f 81       	ldd	r25, Y+7	; 0x07
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <DIO_enuSetPinDirection+0x4a>
    13ae:	43 c0       	rjmp	.+134    	; 0x1436 <DIO_enuSetPinDirection+0xd0>
    13b0:	2e 81       	ldd	r18, Y+6	; 0x06
    13b2:	3f 81       	ldd	r19, Y+7	; 0x07
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <DIO_enuSetPinDirection+0x5e>
    13ba:	8e 81       	ldd	r24, Y+6	; 0x06
    13bc:	9f 81       	ldd	r25, Y+7	; 0x07
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	71 f0       	breq	.+28     	; 0x13de <DIO_enuSetPinDirection+0x78>
    13c2:	bc c0       	rjmp	.+376    	; 0x153c <DIO_enuSetPinDirection+0x1d6>
    13c4:	2e 81       	ldd	r18, Y+6	; 0x06
    13c6:	3f 81       	ldd	r19, Y+7	; 0x07
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <DIO_enuSetPinDirection+0x6a>
    13ce:	5f c0       	rjmp	.+190    	; 0x148e <DIO_enuSetPinDirection+0x128>
    13d0:	8e 81       	ldd	r24, Y+6	; 0x06
    13d2:	9f 81       	ldd	r25, Y+7	; 0x07
    13d4:	83 30       	cpi	r24, 0x03	; 3
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_enuSetPinDirection+0x76>
    13da:	85 c0       	rjmp	.+266    	; 0x14e6 <DIO_enuSetPinDirection+0x180>
    13dc:	af c0       	rjmp	.+350    	; 0x153c <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	81 30       	cpi	r24, 0x01	; 1
    13e2:	a1 f4       	brne	.+40     	; 0x140c <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    13e4:	aa e3       	ldi	r26, 0x3A	; 58
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	ea e3       	ldi	r30, 0x3A	; 58
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	02 2e       	mov	r0, r18
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <DIO_enuSetPinDirection+0x9c>
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	0a 94       	dec	r0
    1404:	e2 f7       	brpl	.-8      	; 0x13fe <DIO_enuSetPinDirection+0x98>
    1406:	84 2b       	or	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	98 c0       	rjmp	.+304    	; 0x153c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    140c:	aa e3       	ldi	r26, 0x3A	; 58
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	ea e3       	ldi	r30, 0x3A	; 58
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_enuSetPinDirection+0xc4>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_enuSetPinDirection+0xc0>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	83 c0       	rjmp	.+262    	; 0x153c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	81 30       	cpi	r24, 0x01	; 1
    143a:	a1 f4       	brne	.+40     	; 0x1464 <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    143c:	a7 e3       	ldi	r26, 0x37	; 55
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e7 e3       	ldi	r30, 0x37	; 55
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <DIO_enuSetPinDirection+0xf4>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <DIO_enuSetPinDirection+0xf0>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	6c c0       	rjmp	.+216    	; 0x153c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    1464:	a7 e3       	ldi	r26, 0x37	; 55
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e7 e3       	ldi	r30, 0x37	; 55
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <DIO_enuSetPinDirection+0x11c>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <DIO_enuSetPinDirection+0x118>
    1486:	80 95       	com	r24
    1488:	84 23       	and	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	57 c0       	rjmp	.+174    	; 0x153c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	81 30       	cpi	r24, 0x01	; 1
    1492:	a1 f4       	brne	.+40     	; 0x14bc <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    1494:	a4 e3       	ldi	r26, 0x34	; 52
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e4 e3       	ldi	r30, 0x34	; 52
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	48 2f       	mov	r20, r24
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 2e       	mov	r0, r18
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <DIO_enuSetPinDirection+0x14c>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	0a 94       	dec	r0
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <DIO_enuSetPinDirection+0x148>
    14b6:	84 2b       	or	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	40 c0       	rjmp	.+128    	; 0x153c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    14bc:	a4 e3       	ldi	r26, 0x34	; 52
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e4 e3       	ldi	r30, 0x34	; 52
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <DIO_enuSetPinDirection+0x174>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <DIO_enuSetPinDirection+0x170>
    14de:	80 95       	com	r24
    14e0:	84 23       	and	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	2b c0       	rjmp	.+86     	; 0x153c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	a1 f4       	brne	.+40     	; 0x1514 <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    14ec:	a1 e3       	ldi	r26, 0x31	; 49
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e1 e3       	ldi	r30, 0x31	; 49
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <DIO_enuSetPinDirection+0x1a4>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <DIO_enuSetPinDirection+0x1a0>
    150e:	84 2b       	or	r24, r20
    1510:	8c 93       	st	X, r24
    1512:	14 c0       	rjmp	.+40     	; 0x153c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    1514:	a1 e3       	ldi	r26, 0x31	; 49
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e1 e3       	ldi	r30, 0x31	; 49
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_enuSetPinDirection+0x1cc>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_enuSetPinDirection+0x1c8>
    1536:	80 95       	com	r24
    1538:	84 23       	and	r24, r20
    153a:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    1540:	99 81       	ldd	r25, Y+1	; 0x01
    1542:	9d 83       	std	Y+5, r25	; 0x05
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    1546:	29 81       	ldd	r18, Y+1	; 0x01
    1548:	2d 83       	std	Y+5, r18	; 0x05
    154a:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    154c:	27 96       	adiw	r28, 0x07	; 7
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	27 97       	sbiw	r28, 0x07	; 7
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
    1572:	8a 83       	std	Y+2, r24	; 0x02
    1574:	6b 83       	std	Y+3, r22	; 0x03
    1576:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1578:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	84 30       	cpi	r24, 0x04	; 4
    157e:	08 f0       	brcs	.+2      	; 0x1582 <DIO_enuSetPinValue+0x24>
    1580:	de c0       	rjmp	.+444    	; 0x173e <DIO_enuSetPinValue+0x1e0>
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	88 30       	cpi	r24, 0x08	; 8
    1586:	08 f0       	brcs	.+2      	; 0x158a <DIO_enuSetPinValue+0x2c>
    1588:	da c0       	rjmp	.+436    	; 0x173e <DIO_enuSetPinValue+0x1e0>
    158a:	8c 81       	ldd	r24, Y+4	; 0x04
    158c:	82 30       	cpi	r24, 0x02	; 2
    158e:	08 f0       	brcs	.+2      	; 0x1592 <DIO_enuSetPinValue+0x34>
    1590:	d6 c0       	rjmp	.+428    	; 0x173e <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3f 83       	std	Y+7, r19	; 0x07
    159a:	2e 83       	std	Y+6, r18	; 0x06
    159c:	8e 81       	ldd	r24, Y+6	; 0x06
    159e:	9f 81       	ldd	r25, Y+7	; 0x07
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	91 05       	cpc	r25, r1
    15a4:	09 f4       	brne	.+2      	; 0x15a8 <DIO_enuSetPinValue+0x4a>
    15a6:	43 c0       	rjmp	.+134    	; 0x162e <DIO_enuSetPinValue+0xd0>
    15a8:	2e 81       	ldd	r18, Y+6	; 0x06
    15aa:	3f 81       	ldd	r19, Y+7	; 0x07
    15ac:	22 30       	cpi	r18, 0x02	; 2
    15ae:	31 05       	cpc	r19, r1
    15b0:	2c f4       	brge	.+10     	; 0x15bc <DIO_enuSetPinValue+0x5e>
    15b2:	8e 81       	ldd	r24, Y+6	; 0x06
    15b4:	9f 81       	ldd	r25, Y+7	; 0x07
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	71 f0       	breq	.+28     	; 0x15d6 <DIO_enuSetPinValue+0x78>
    15ba:	bc c0       	rjmp	.+376    	; 0x1734 <DIO_enuSetPinValue+0x1d6>
    15bc:	2e 81       	ldd	r18, Y+6	; 0x06
    15be:	3f 81       	ldd	r19, Y+7	; 0x07
    15c0:	22 30       	cpi	r18, 0x02	; 2
    15c2:	31 05       	cpc	r19, r1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <DIO_enuSetPinValue+0x6a>
    15c6:	5f c0       	rjmp	.+190    	; 0x1686 <DIO_enuSetPinValue+0x128>
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	91 05       	cpc	r25, r1
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <DIO_enuSetPinValue+0x76>
    15d2:	85 c0       	rjmp	.+266    	; 0x16de <DIO_enuSetPinValue+0x180>
    15d4:	af c0       	rjmp	.+350    	; 0x1734 <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	88 23       	and	r24, r24
    15da:	a1 f0       	breq	.+40     	; 0x1604 <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    15dc:	ab e3       	ldi	r26, 0x3B	; 59
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	eb e3       	ldi	r30, 0x3B	; 59
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <DIO_enuSetPinValue+0x9c>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <DIO_enuSetPinValue+0x98>
    15fe:	84 2b       	or	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	98 c0       	rjmp	.+304    	; 0x1734 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    1604:	ab e3       	ldi	r26, 0x3B	; 59
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	eb e3       	ldi	r30, 0x3B	; 59
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	48 2f       	mov	r20, r24
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 2e       	mov	r0, r18
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <DIO_enuSetPinValue+0xc4>
    161e:	88 0f       	add	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	0a 94       	dec	r0
    1624:	e2 f7       	brpl	.-8      	; 0x161e <DIO_enuSetPinValue+0xc0>
    1626:	80 95       	com	r24
    1628:	84 23       	and	r24, r20
    162a:	8c 93       	st	X, r24
    162c:	83 c0       	rjmp	.+262    	; 0x1734 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	88 23       	and	r24, r24
    1632:	a1 f0       	breq	.+40     	; 0x165c <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    1634:	a8 e3       	ldi	r26, 0x38	; 56
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e8 e3       	ldi	r30, 0x38	; 56
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_enuSetPinValue+0xf4>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_enuSetPinValue+0xf0>
    1656:	84 2b       	or	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	6c c0       	rjmp	.+216    	; 0x1734 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    165c:	a8 e3       	ldi	r26, 0x38	; 56
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e8 e3       	ldi	r30, 0x38	; 56
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	02 2e       	mov	r0, r18
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_enuSetPinValue+0x11c>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	0a 94       	dec	r0
    167c:	e2 f7       	brpl	.-8      	; 0x1676 <DIO_enuSetPinValue+0x118>
    167e:	80 95       	com	r24
    1680:	84 23       	and	r24, r20
    1682:	8c 93       	st	X, r24
    1684:	57 c0       	rjmp	.+174    	; 0x1734 <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    1686:	8c 81       	ldd	r24, Y+4	; 0x04
    1688:	88 23       	and	r24, r24
    168a:	a1 f0       	breq	.+40     	; 0x16b4 <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    168c:	a5 e3       	ldi	r26, 0x35	; 53
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e5 e3       	ldi	r30, 0x35	; 53
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	48 2f       	mov	r20, r24
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	02 2e       	mov	r0, r18
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <DIO_enuSetPinValue+0x14c>
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	0a 94       	dec	r0
    16ac:	e2 f7       	brpl	.-8      	; 0x16a6 <DIO_enuSetPinValue+0x148>
    16ae:	84 2b       	or	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	40 c0       	rjmp	.+128    	; 0x1734 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    16b4:	a5 e3       	ldi	r26, 0x35	; 53
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e5 e3       	ldi	r30, 0x35	; 53
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <DIO_enuSetPinValue+0x174>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <DIO_enuSetPinValue+0x170>
    16d6:	80 95       	com	r24
    16d8:	84 23       	and	r24, r20
    16da:	8c 93       	st	X, r24
    16dc:	2b c0       	rjmp	.+86     	; 0x1734 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	88 23       	and	r24, r24
    16e2:	a1 f0       	breq	.+40     	; 0x170c <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    16e4:	a2 e3       	ldi	r26, 0x32	; 50
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e2 e3       	ldi	r30, 0x32	; 50
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_enuSetPinValue+0x1a4>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_enuSetPinValue+0x1a0>
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	14 c0       	rjmp	.+40     	; 0x1734 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    170c:	a2 e3       	ldi	r26, 0x32	; 50
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e2 e3       	ldi	r30, 0x32	; 50
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8b 81       	ldd	r24, Y+3	; 0x03
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_enuSetPinValue+0x1cc>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_enuSetPinValue+0x1c8>
    172e:	80 95       	com	r24
    1730:	84 23       	and	r24, r20
    1732:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    1738:	99 81       	ldd	r25, Y+1	; 0x01
    173a:	9d 83       	std	Y+5, r25	; 0x05
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    173e:	29 81       	ldd	r18, Y+1	; 0x01
    1740:	2d 83       	std	Y+5, r18	; 0x05
    1742:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    1744:	27 96       	adiw	r28, 0x07	; 7
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
    175e:	28 97       	sbiw	r28, 0x08	; 8
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	8a 83       	std	Y+2, r24	; 0x02
    176c:	6b 83       	std	Y+3, r22	; 0x03
    176e:	5d 83       	std	Y+5, r21	; 0x05
    1770:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1772:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	9d 81       	ldd	r25, Y+5	; 0x05
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	29 f4       	brne	.+10     	; 0x1786 <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    177c:	83 e0       	ldi	r24, 0x03	; 3
    177e:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    1780:	29 81       	ldd	r18, Y+1	; 0x01
    1782:	28 87       	std	Y+8, r18	; 0x08
    1784:	7f c0       	rjmp	.+254    	; 0x1884 <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	84 30       	cpi	r24, 0x04	; 4
    178a:	08 f0       	brcs	.+2      	; 0x178e <DIO_enuGetPinValue+0x38>
    178c:	79 c0       	rjmp	.+242    	; 0x1880 <DIO_enuGetPinValue+0x12a>
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	88 30       	cpi	r24, 0x08	; 8
    1792:	08 f0       	brcs	.+2      	; 0x1796 <DIO_enuGetPinValue+0x40>
    1794:	75 c0       	rjmp	.+234    	; 0x1880 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	48 2f       	mov	r20, r24
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	5f 83       	std	Y+7, r21	; 0x07
    179e:	4e 83       	std	Y+6, r20	; 0x06
    17a0:	8e 81       	ldd	r24, Y+6	; 0x06
    17a2:	9f 81       	ldd	r25, Y+7	; 0x07
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	91 05       	cpc	r25, r1
    17a8:	59 f1       	breq	.+86     	; 0x1800 <DIO_enuGetPinValue+0xaa>
    17aa:	2e 81       	ldd	r18, Y+6	; 0x06
    17ac:	3f 81       	ldd	r19, Y+7	; 0x07
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	31 05       	cpc	r19, r1
    17b2:	34 f4       	brge	.+12     	; 0x17c0 <DIO_enuGetPinValue+0x6a>
    17b4:	4e 81       	ldd	r20, Y+6	; 0x06
    17b6:	5f 81       	ldd	r21, Y+7	; 0x07
    17b8:	41 15       	cp	r20, r1
    17ba:	51 05       	cpc	r21, r1
    17bc:	69 f0       	breq	.+26     	; 0x17d8 <DIO_enuGetPinValue+0x82>
    17be:	5b c0       	rjmp	.+182    	; 0x1876 <DIO_enuGetPinValue+0x120>
    17c0:	8e 81       	ldd	r24, Y+6	; 0x06
    17c2:	9f 81       	ldd	r25, Y+7	; 0x07
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	91 05       	cpc	r25, r1
    17c8:	79 f1       	breq	.+94     	; 0x1828 <DIO_enuGetPinValue+0xd2>
    17ca:	2e 81       	ldd	r18, Y+6	; 0x06
    17cc:	3f 81       	ldd	r19, Y+7	; 0x07
    17ce:	23 30       	cpi	r18, 0x03	; 3
    17d0:	31 05       	cpc	r19, r1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <DIO_enuGetPinValue+0x80>
    17d4:	3d c0       	rjmp	.+122    	; 0x1850 <DIO_enuGetPinValue+0xfa>
    17d6:	4f c0       	rjmp	.+158    	; 0x1876 <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    17d8:	e9 e3       	ldi	r30, 0x39	; 57
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	a9 01       	movw	r20, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_enuGetPinValue+0x9a>
    17ec:	55 95       	asr	r21
    17ee:	47 95       	ror	r20
    17f0:	8a 95       	dec	r24
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_enuGetPinValue+0x96>
    17f4:	ca 01       	movw	r24, r20
    17f6:	81 70       	andi	r24, 0x01	; 1
    17f8:	ec 81       	ldd	r30, Y+4	; 0x04
    17fa:	fd 81       	ldd	r31, Y+5	; 0x05
    17fc:	80 83       	st	Z, r24
    17fe:	3b c0       	rjmp	.+118    	; 0x1876 <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    1800:	e6 e3       	ldi	r30, 0x36	; 54
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a9 01       	movw	r20, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_enuGetPinValue+0xc2>
    1814:	55 95       	asr	r21
    1816:	47 95       	ror	r20
    1818:	8a 95       	dec	r24
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_enuGetPinValue+0xbe>
    181c:	ca 01       	movw	r24, r20
    181e:	81 70       	andi	r24, 0x01	; 1
    1820:	ec 81       	ldd	r30, Y+4	; 0x04
    1822:	fd 81       	ldd	r31, Y+5	; 0x05
    1824:	80 83       	st	Z, r24
    1826:	27 c0       	rjmp	.+78     	; 0x1876 <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    1828:	e3 e3       	ldi	r30, 0x33	; 51
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	8b 81       	ldd	r24, Y+3	; 0x03
    1834:	88 2f       	mov	r24, r24
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	a9 01       	movw	r20, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <DIO_enuGetPinValue+0xea>
    183c:	55 95       	asr	r21
    183e:	47 95       	ror	r20
    1840:	8a 95       	dec	r24
    1842:	e2 f7       	brpl	.-8      	; 0x183c <DIO_enuGetPinValue+0xe6>
    1844:	ca 01       	movw	r24, r20
    1846:	81 70       	andi	r24, 0x01	; 1
    1848:	ec 81       	ldd	r30, Y+4	; 0x04
    184a:	fd 81       	ldd	r31, Y+5	; 0x05
    184c:	80 83       	st	Z, r24
    184e:	13 c0       	rjmp	.+38     	; 0x1876 <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    1850:	e0 e3       	ldi	r30, 0x30	; 48
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a9 01       	movw	r20, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <DIO_enuGetPinValue+0x112>
    1864:	55 95       	asr	r21
    1866:	47 95       	ror	r20
    1868:	8a 95       	dec	r24
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <DIO_enuGetPinValue+0x10e>
    186c:	ca 01       	movw	r24, r20
    186e:	81 70       	andi	r24, 0x01	; 1
    1870:	ec 81       	ldd	r30, Y+4	; 0x04
    1872:	fd 81       	ldd	r31, Y+5	; 0x05
    1874:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    187a:	59 81       	ldd	r21, Y+1	; 0x01
    187c:	58 87       	std	Y+8, r21	; 0x08
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	88 87       	std	Y+8, r24	; 0x08
    1884:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    1886:	28 96       	adiw	r28, 0x08	; 8
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <DIO_enuTogglePinValue+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <DIO_enuTogglePinValue+0x8>
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <DIO_enuTogglePinValue+0xa>
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	8a 83       	std	Y+2, r24	; 0x02
    18a8:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    18aa:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	84 30       	cpi	r24, 0x04	; 4
    18b0:	08 f0       	brcs	.+2      	; 0x18b4 <DIO_enuTogglePinValue+0x1c>
    18b2:	77 c0       	rjmp	.+238    	; 0x19a2 <DIO_enuTogglePinValue+0x10a>
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	88 30       	cpi	r24, 0x08	; 8
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <DIO_enuTogglePinValue+0x24>
    18ba:	73 c0       	rjmp	.+230    	; 0x19a2 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	3e 83       	std	Y+6, r19	; 0x06
    18c4:	2d 83       	std	Y+5, r18	; 0x05
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	91 05       	cpc	r25, r1
    18ce:	49 f1       	breq	.+82     	; 0x1922 <DIO_enuTogglePinValue+0x8a>
    18d0:	2d 81       	ldd	r18, Y+5	; 0x05
    18d2:	3e 81       	ldd	r19, Y+6	; 0x06
    18d4:	22 30       	cpi	r18, 0x02	; 2
    18d6:	31 05       	cpc	r19, r1
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <DIO_enuTogglePinValue+0x4c>
    18da:	8d 81       	ldd	r24, Y+5	; 0x05
    18dc:	9e 81       	ldd	r25, Y+6	; 0x06
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	61 f0       	breq	.+24     	; 0x18fa <DIO_enuTogglePinValue+0x62>
    18e2:	5a c0       	rjmp	.+180    	; 0x1998 <DIO_enuTogglePinValue+0x100>
    18e4:	2d 81       	ldd	r18, Y+5	; 0x05
    18e6:	3e 81       	ldd	r19, Y+6	; 0x06
    18e8:	22 30       	cpi	r18, 0x02	; 2
    18ea:	31 05       	cpc	r19, r1
    18ec:	71 f1       	breq	.+92     	; 0x194a <DIO_enuTogglePinValue+0xb2>
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	91 05       	cpc	r25, r1
    18f6:	e9 f1       	breq	.+122    	; 0x1972 <DIO_enuTogglePinValue+0xda>
    18f8:	4f c0       	rjmp	.+158    	; 0x1998 <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    18fa:	ab e3       	ldi	r26, 0x3B	; 59
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	eb e3       	ldi	r30, 0x3B	; 59
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <DIO_enuTogglePinValue+0x80>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <DIO_enuTogglePinValue+0x7c>
    191c:	84 27       	eor	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	3b c0       	rjmp	.+118    	; 0x1998 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    1922:	a8 e3       	ldi	r26, 0x38	; 56
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e8 e3       	ldi	r30, 0x38	; 56
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_enuTogglePinValue+0xa8>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <DIO_enuTogglePinValue+0xa4>
    1944:	84 27       	eor	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	27 c0       	rjmp	.+78     	; 0x1998 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    194a:	a5 e3       	ldi	r26, 0x35	; 53
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e5 e3       	ldi	r30, 0x35	; 53
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <DIO_enuTogglePinValue+0xd0>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <DIO_enuTogglePinValue+0xcc>
    196c:	84 27       	eor	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	13 c0       	rjmp	.+38     	; 0x1998 <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    1972:	a2 e3       	ldi	r26, 0x32	; 50
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e2 e3       	ldi	r30, 0x32	; 50
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <DIO_enuTogglePinValue+0xf8>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <DIO_enuTogglePinValue+0xf4>
    1994:	84 27       	eor	r24, r20
    1996:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    199c:	99 81       	ldd	r25, Y+1	; 0x01
    199e:	9c 83       	std	Y+4, r25	; 0x04
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    19a2:	29 81       	ldd	r18, Y+1	; 0x01
    19a4:	2c 83       	std	Y+4, r18	; 0x04
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    19a8:	26 96       	adiw	r28, 0x06	; 6
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <DIO_enuSetPortDirection+0x6>
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <DIO_enuSetPortDirection+0x8>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <DIO_enuSetPortDirection+0xa>
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	8a 83       	std	Y+2, r24	; 0x02
    19ca:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    19cc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	84 30       	cpi	r24, 0x04	; 4
    19d2:	08 f0       	brcs	.+2      	; 0x19d6 <DIO_enuSetPortDirection+0x1c>
    19d4:	57 c0       	rjmp	.+174    	; 0x1a84 <DIO_enuSetPortDirection+0xca>
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	82 30       	cpi	r24, 0x02	; 2
    19da:	08 f0       	brcs	.+2      	; 0x19de <DIO_enuSetPortDirection+0x24>
    19dc:	53 c0       	rjmp	.+166    	; 0x1a84 <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	3e 83       	std	Y+6, r19	; 0x06
    19e6:	2d 83       	std	Y+5, r18	; 0x05
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	81 30       	cpi	r24, 0x01	; 1
    19ee:	91 05       	cpc	r25, r1
    19f0:	09 f1       	breq	.+66     	; 0x1a34 <DIO_enuSetPortDirection+0x7a>
    19f2:	2d 81       	ldd	r18, Y+5	; 0x05
    19f4:	3e 81       	ldd	r19, Y+6	; 0x06
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <DIO_enuSetPortDirection+0x4c>
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	61 f0       	breq	.+24     	; 0x1a1c <DIO_enuSetPortDirection+0x62>
    1a04:	3a c0       	rjmp	.+116    	; 0x1a7a <DIO_enuSetPortDirection+0xc0>
    1a06:	2d 81       	ldd	r18, Y+5	; 0x05
    1a08:	3e 81       	ldd	r19, Y+6	; 0x06
    1a0a:	22 30       	cpi	r18, 0x02	; 2
    1a0c:	31 05       	cpc	r19, r1
    1a0e:	f1 f0       	breq	.+60     	; 0x1a4c <DIO_enuSetPortDirection+0x92>
    1a10:	8d 81       	ldd	r24, Y+5	; 0x05
    1a12:	9e 81       	ldd	r25, Y+6	; 0x06
    1a14:	83 30       	cpi	r24, 0x03	; 3
    1a16:	91 05       	cpc	r25, r1
    1a18:	29 f1       	breq	.+74     	; 0x1a64 <DIO_enuSetPortDirection+0xaa>
    1a1a:	2f c0       	rjmp	.+94     	; 0x1a7a <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	29 f4       	brne	.+10     	; 0x1a2c <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    1a22:	ea e3       	ldi	r30, 0x3A	; 58
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	80 83       	st	Z, r24
    1a2a:	27 c0       	rjmp	.+78     	; 0x1a7a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    1a2c:	ea e3       	ldi	r30, 0x3A	; 58
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	10 82       	st	Z, r1
    1a32:	23 c0       	rjmp	.+70     	; 0x1a7a <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	29 f4       	brne	.+10     	; 0x1a44 <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    1a3a:	e7 e3       	ldi	r30, 0x37	; 55
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
    1a40:	80 83       	st	Z, r24
    1a42:	1b c0       	rjmp	.+54     	; 0x1a7a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    1a44:	e7 e3       	ldi	r30, 0x37	; 55
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	10 82       	st	Z, r1
    1a4a:	17 c0       	rjmp	.+46     	; 0x1a7a <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	81 30       	cpi	r24, 0x01	; 1
    1a50:	29 f4       	brne	.+10     	; 0x1a5c <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    1a52:	e4 e3       	ldi	r30, 0x34	; 52
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8f ef       	ldi	r24, 0xFF	; 255
    1a58:	80 83       	st	Z, r24
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    1a5c:	e4 e3       	ldi	r30, 0x34	; 52
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	10 82       	st	Z, r1
    1a62:	0b c0       	rjmp	.+22     	; 0x1a7a <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	29 f4       	brne	.+10     	; 0x1a74 <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    1a6a:	e1 e3       	ldi	r30, 0x31	; 49
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	80 83       	st	Z, r24
    1a72:	03 c0       	rjmp	.+6      	; 0x1a7a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    1a74:	e1 e3       	ldi	r30, 0x31	; 49
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1a7e:	99 81       	ldd	r25, Y+1	; 0x01
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    1a84:	29 81       	ldd	r18, Y+1	; 0x01
    1a86:	2c 83       	std	Y+4, r18	; 0x04
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1a8a:	26 96       	adiw	r28, 0x06	; 6
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	f8 94       	cli
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	cd bf       	out	0x3d, r28	; 61
    1a96:	cf 91       	pop	r28
    1a98:	df 91       	pop	r29
    1a9a:	08 95       	ret

00001a9c <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    1a9c:	df 93       	push	r29
    1a9e:	cf 93       	push	r28
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <DIO_enuSetPortValue+0x6>
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <DIO_enuSetPortValue+0x8>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <DIO_enuSetPortValue+0xa>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
    1aac:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1aae:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	84 30       	cpi	r24, 0x04	; 4
    1ab4:	08 f0       	brcs	.+2      	; 0x1ab8 <DIO_enuSetPortValue+0x1c>
    1ab6:	57 c0       	rjmp	.+174    	; 0x1b66 <DIO_enuSetPortValue+0xca>
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	82 30       	cpi	r24, 0x02	; 2
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <DIO_enuSetPortValue+0x24>
    1abe:	53 c0       	rjmp	.+166    	; 0x1b66 <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	3e 83       	std	Y+6, r19	; 0x06
    1ac8:	2d 83       	std	Y+5, r18	; 0x05
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	09 f1       	breq	.+66     	; 0x1b16 <DIO_enuSetPortValue+0x7a>
    1ad4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	31 05       	cpc	r19, r1
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <DIO_enuSetPortValue+0x4c>
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	61 f0       	breq	.+24     	; 0x1afe <DIO_enuSetPortValue+0x62>
    1ae6:	3a c0       	rjmp	.+116    	; 0x1b5c <DIO_enuSetPortValue+0xc0>
    1ae8:	2d 81       	ldd	r18, Y+5	; 0x05
    1aea:	3e 81       	ldd	r19, Y+6	; 0x06
    1aec:	22 30       	cpi	r18, 0x02	; 2
    1aee:	31 05       	cpc	r19, r1
    1af0:	f1 f0       	breq	.+60     	; 0x1b2e <DIO_enuSetPortValue+0x92>
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	91 05       	cpc	r25, r1
    1afa:	29 f1       	breq	.+74     	; 0x1b46 <DIO_enuSetPortValue+0xaa>
    1afc:	2f c0       	rjmp	.+94     	; 0x1b5c <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	88 23       	and	r24, r24
    1b02:	29 f0       	breq	.+10     	; 0x1b0e <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    1b04:	eb e3       	ldi	r30, 0x3B	; 59
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	80 83       	st	Z, r24
    1b0c:	27 c0       	rjmp	.+78     	; 0x1b5c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    1b0e:	eb e3       	ldi	r30, 0x3B	; 59
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	10 82       	st	Z, r1
    1b14:	23 c0       	rjmp	.+70     	; 0x1b5c <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	88 23       	and	r24, r24
    1b1a:	29 f0       	breq	.+10     	; 0x1b26 <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    1b1c:	e8 e3       	ldi	r30, 0x38	; 56
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	80 83       	st	Z, r24
    1b24:	1b c0       	rjmp	.+54     	; 0x1b5c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    1b26:	e8 e3       	ldi	r30, 0x38	; 56
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	10 82       	st	Z, r1
    1b2c:	17 c0       	rjmp	.+46     	; 0x1b5c <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	88 23       	and	r24, r24
    1b32:	29 f0       	breq	.+10     	; 0x1b3e <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    1b34:	e5 e3       	ldi	r30, 0x35	; 53
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	80 83       	st	Z, r24
    1b3c:	0f c0       	rjmp	.+30     	; 0x1b5c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    1b3e:	e5 e3       	ldi	r30, 0x35	; 53
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	10 82       	st	Z, r1
    1b44:	0b c0       	rjmp	.+22     	; 0x1b5c <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	88 23       	and	r24, r24
    1b4a:	29 f0       	breq	.+10     	; 0x1b56 <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    1b4c:	e2 e3       	ldi	r30, 0x32	; 50
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8f ef       	ldi	r24, 0xFF	; 255
    1b52:	80 83       	st	Z, r24
    1b54:	03 c0       	rjmp	.+6      	; 0x1b5c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    1b56:	e2 e3       	ldi	r30, 0x32	; 50
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1b60:	99 81       	ldd	r25, Y+1	; 0x01
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	02 c0       	rjmp	.+4      	; 0x1b6a <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    1b66:	29 81       	ldd	r18, Y+1	; 0x01
    1b68:	2c 83       	std	Y+4, r18	; 0x04
    1b6a:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1b6c:	26 96       	adiw	r28, 0x06	; 6
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <ADC_enuInit>:
/************************************************************************************/




void ADC_enuInit(uint8_t Copy_u8ResolutionBits, uint32_t Copy_u32MaxVoltage_MicroVolts){
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	63 97       	sbiw	r28, 0x13	; 19
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	8f 87       	std	Y+15, r24	; 0x0f
    1b94:	48 8b       	std	Y+16, r20	; 0x10
    1b96:	59 8b       	std	Y+17, r21	; 0x11
    1b98:	6a 8b       	std	Y+18, r22	; 0x12
    1b9a:	7b 8b       	std	Y+19, r23	; 0x13
	 * 6. Setting values for adc parameters
	 * */


	/*************************** Selecting  voltage reference ***************************/
		ADMUX_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    1b9c:	a7 e2       	ldi	r26, 0x27	; 39
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e7 e2       	ldi	r30, 0x27	; 39
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	8f 71       	andi	r24, 0x1F	; 31
    1ba8:	8c 93       	st	X, r24
		ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
    1baa:	a7 e2       	ldi	r26, 0x27	; 39
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e7 e2       	ldi	r30, 0x27	; 39
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 64       	ori	r24, 0x40	; 64
    1bb6:	8c 93       	st	X, r24
			SFIOR_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
			SFIOR_REG |= ADC_AUTO_TRIG_SRCE_SELECTOR;


		#elif ADC_MODE_SELECTOR == ADC_MODE_SINGLE_CONVERSION
			CLR_BIT(ADCSRA_REG, ADCSRA_ADATE);
    1bb8:	a6 e2       	ldi	r26, 0x26	; 38
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e6 e2       	ldi	r30, 0x26	; 38
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	8f 7d       	andi	r24, 0xDF	; 223
    1bc4:	8c 93       	st	X, r24
		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			CLR_BIT(ADMUX_REG, ADMUX_ADLAR);
		#endif

		#if	ADC_ADJUSTMENT_SELECTOR == ADC_LEFT_ADJUSTED
			SET_BIT(ADMUX_REG, ADMUX_ADLAR);
    1bc6:	a7 e2       	ldi	r26, 0x27	; 39
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e7 e2       	ldi	r30, 0x27	; 39
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	80 62       	ori	r24, 0x20	; 32
    1bd2:	8c 93       	st	X, r24
	/***************************** Clearing  Interrupt Flag *****************************/
		//! Notice: that ADIF to be cleared we write logical one (from data sheet)
		//So in initialization of ADC we write 1 to ADIF bit to make sure that the
		//flag is cleared in order to make sure that ADC ready for upcoming conversation
		// clearing interrupt flag
		SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    1bd4:	a6 e2       	ldi	r26, 0x26	; 38
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e6 e2       	ldi	r30, 0x26	; 38
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	80 61       	ori	r24, 0x10	; 16
    1be0:	8c 93       	st	X, r24
	/************************************************************************************/


	/*********************************** Enabling ADC ***********************************/
		SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    1be2:	a6 e2       	ldi	r26, 0x26	; 38
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e6 e2       	ldi	r30, 0x26	; 38
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	80 68       	ori	r24, 0x80	; 128
    1bee:	8c 93       	st	X, r24
	/************************************************************************************/




	Global_u8ResolutionBits = Copy_u8ResolutionBits;
    1bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf2:	80 93 8e 00 	sts	0x008E, r24
	Global_u32MaxVoltage_MicroVolts = Copy_u32MaxVoltage_MicroVolts;
    1bf6:	88 89       	ldd	r24, Y+16	; 0x10
    1bf8:	99 89       	ldd	r25, Y+17	; 0x11
    1bfa:	aa 89       	ldd	r26, Y+18	; 0x12
    1bfc:	bb 89       	ldd	r27, Y+19	; 0x13
    1bfe:	80 93 8f 00 	sts	0x008F, r24
    1c02:	90 93 90 00 	sts	0x0090, r25
    1c06:	a0 93 91 00 	sts	0x0091, r26
    1c0a:	b0 93 92 00 	sts	0x0092, r27
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	a8 e4       	ldi	r26, 0x48	; 72
    1c14:	b3 e4       	ldi	r27, 0x43	; 67
    1c16:	8b 87       	std	Y+11, r24	; 0x0b
    1c18:	9c 87       	std	Y+12, r25	; 0x0c
    1c1a:	ad 87       	std	Y+13, r26	; 0x0d
    1c1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a e7       	ldi	r20, 0x7A	; 122
    1c2c:	55 e4       	ldi	r21, 0x45	; 69
    1c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	8f 83       	std	Y+7, r24	; 0x07
    1c38:	98 87       	std	Y+8, r25	; 0x08
    1c3a:	a9 87       	std	Y+9, r26	; 0x09
    1c3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c40:	78 85       	ldd	r23, Y+8	; 0x08
    1c42:	89 85       	ldd	r24, Y+9	; 0x09
    1c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e8       	ldi	r20, 0x80	; 128
    1c4c:	5f e3       	ldi	r21, 0x3F	; 63
    1c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c52:	88 23       	and	r24, r24
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <ADC_enuInit+0xe2>
		__ticks = 1;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
    1c5e:	3f c0       	rjmp	.+126    	; 0x1cde <ADC_enuInit+0x160>
	else if (__tmp > 65535)
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	3f ef       	ldi	r19, 0xFF	; 255
    1c6c:	4f e7       	ldi	r20, 0x7F	; 127
    1c6e:	57 e4       	ldi	r21, 0x47	; 71
    1c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c74:	18 16       	cp	r1, r24
    1c76:	4c f5       	brge	.+82     	; 0x1cca <ADC_enuInit+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	40 e2       	ldi	r20, 0x20	; 32
    1c86:	51 e4       	ldi	r21, 0x41	; 65
    1c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <ADC_enuInit+0x142>
    1ca2:	80 e9       	ldi	r24, 0x90	; 144
    1ca4:	91 e0       	ldi	r25, 0x01	; 1
    1ca6:	9c 83       	std	Y+4, r25	; 0x04
    1ca8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	9c 81       	ldd	r25, Y+4	; 0x04
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <ADC_enuInit+0x130>
    1cb2:	9c 83       	std	Y+4, r25	; 0x04
    1cb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	9e 83       	std	Y+6, r25	; 0x06
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <ADC_enuInit+0x124>
    1cc8:	14 c0       	rjmp	.+40     	; 0x1cf2 <ADC_enuInit+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ccc:	78 85       	ldd	r23, Y+8	; 0x08
    1cce:	89 85       	ldd	r24, Y+9	; 0x09
    1cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	9a 83       	std	Y+2, r25	; 0x02
    1ce4:	89 83       	std	Y+1, r24	; 0x01
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <ADC_enuInit+0x16c>
    1cee:	9a 83       	std	Y+2, r25	; 0x02
    1cf0:	89 83       	std	Y+1, r24	; 0x01


	// Waiting until ADC is stablized
	_delay_ms(200);

}
    1cf2:	63 96       	adiw	r28, 0x13	; 19
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	de bf       	out	0x3e, r29	; 62
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	cd bf       	out	0x3d, r28	; 61
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <ADC_enuStartConversion>:




ErrorStatus_t ADC_enuStartConversion(ADC_Channel_types ADC_channel_N){
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <ADC_enuStartConversion+0x6>
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1d10:	19 82       	std	Y+1, r1	; 0x01


	/******************************** Select ADC Channel ********************************/
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_clr_msk;
    1d12:	a7 e2       	ldi	r26, 0x27	; 39
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e7 e2       	ldi	r30, 0x27	; 39
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 7e       	andi	r24, 0xE0	; 224
    1d1e:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_channel_N;
    1d20:	a7 e2       	ldi	r26, 0x27	; 39
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e7 e2       	ldi	r30, 0x27	; 39
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	90 81       	ld	r25, Z
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	89 2b       	or	r24, r25
    1d2e:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* ADC Start Conversion *******************************/
	//!!!!!!!!!!!!!!
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    1d30:	a6 e2       	ldi	r26, 0x26	; 38
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e6 e2       	ldi	r30, 0x26	; 38
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	80 64       	ori	r24, 0x40	; 64
    1d3c:	8c 93       	st	X, r24
	/************************************************************************************/

	return Local_enuErrrorState;
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <ADC_GetResult>:



uint16 ADC_GetResult(){
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	00 d0       	rcall	.+0      	; 0x1d50 <ADC_GetResult+0x6>
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
//	uint16 * Copy_pu16ReadValue;

	#if	ADC_ADJUSTMENT_SELECTOR == ADC_LEFT_ADJUSTED
		uint16 Copy_u16ReadValue = 0;
    1d54:	1a 82       	std	Y+2, r1	; 0x02
    1d56:	19 82       	std	Y+1, r1	; 0x01
		while(GET_BIT(ADCSRA_REG, ADCSRA_ADSC) == 1);
    1d58:	e6 e2       	ldi	r30, 0x26	; 38
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	82 95       	swap	r24
    1d60:	86 95       	lsr	r24
    1d62:	86 95       	lsr	r24
    1d64:	83 70       	andi	r24, 0x03	; 3
    1d66:	88 2f       	mov	r24, r24
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	81 70       	andi	r24, 0x01	; 1
    1d6c:	90 70       	andi	r25, 0x00	; 0
    1d6e:	88 23       	and	r24, r24
    1d70:	99 f7       	brne	.-26     	; 0x1d58 <ADC_GetResult+0xe>


		Copy_u16ReadValue = (ADCL_REG >> 6);
    1d72:	e4 e2       	ldi	r30, 0x24	; 36
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	82 95       	swap	r24
    1d7a:	86 95       	lsr	r24
    1d7c:	86 95       	lsr	r24
    1d7e:	83 70       	andi	r24, 0x03	; 3
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01

		Copy_u16ReadValue |= ((uint16)ADCH_REG<<2);
    1d88:	e5 e2       	ldi	r30, 0x25	; 37
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9c 01       	movw	r18, r24
    1d94:	22 0f       	add	r18, r18
    1d96:	33 1f       	adc	r19, r19
    1d98:	22 0f       	add	r18, r18
    1d9a:	33 1f       	adc	r19, r19
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1da0:	82 2b       	or	r24, r18
    1da2:	93 2b       	or	r25, r19
    1da4:	9a 83       	std	Y+2, r25	; 0x02
    1da6:	89 83       	std	Y+1, r24	; 0x01
		return Copy_u16ReadValue;
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
	#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
		while(GET_BIT(ADCSRA_REG, ADCSRA_ADSC) == 1);
	#endif

	return ADCLH_REG;
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	0f 92       	push	r0
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1dc0:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	64 e0       	ldi	r22, 0x04	; 4
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	65 e0       	ldi	r22, 0x05	; 5
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	66 e0       	ldi	r22, 0x06	; 6
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	67 e0       	ldi	r22, 0x07	; 7
    1de4:	41 e0       	ldi	r20, 0x01	; 1
    1de6:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	64 e0       	ldi	r22, 0x04	; 4
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	65 e0       	ldi	r22, 0x05	; 5
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	66 e0       	ldi	r22, 0x06	; 6
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	67 e0       	ldi	r22, 0x07	; 7
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	64 e0       	ldi	r22, 0x04	; 4
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    1e30:	83 e0       	ldi	r24, 0x03	; 3
    1e32:	65 e0       	ldi	r22, 0x05	; 5
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    1e3a:	83 e0       	ldi	r24, 0x03	; 3
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	64 e0       	ldi	r22, 0x04	; 4
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	65 e0       	ldi	r22, 0x05	; 5
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e68:	0f 90       	pop	r0
    1e6a:	cf 91       	pop	r28
    1e6c:	df 91       	pop	r29
    1e6e:	08 95       	ret

00001e70 <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	2a 97       	sbiw	r28, 0x0a	; 10
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    1e86:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	8b 83       	std	Y+3, r24	; 0x03
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	8c 83       	std	Y+4, r24	; 0x04
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    1e98:	84 e0       	ldi	r24, 0x04	; 4
    1e9a:	8e 83       	std	Y+6, r24	; 0x06
    1e9c:	85 e0       	ldi	r24, 0x05	; 5
    1e9e:	8f 83       	std	Y+7, r24	; 0x07
    1ea0:	86 e0       	ldi	r24, 0x06	; 6
    1ea2:	88 87       	std	Y+8, r24	; 0x08
    1ea4:	87 e0       	ldi	r24, 0x07	; 7
    1ea6:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    1ea8:	19 82       	std	Y+1, r1	; 0x01
    1eaa:	36 c0       	rjmp	.+108    	; 0x1f18 <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    1eac:	99 81       	ldd	r25, Y+1	; 0x01
    1eae:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eb0:	98 17       	cp	r25, r24
    1eb2:	c1 f4       	brne	.+48     	; 0x1ee4 <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    1eb4:	89 81       	ldd	r24, Y+1	; 0x01
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	ce 01       	movw	r24, r28
    1ebc:	02 96       	adiw	r24, 0x02	; 2
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	e2 0f       	add	r30, r18
    1ec2:	f3 1f       	adc	r31, r19
    1ec4:	40 81       	ld	r20, Z
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	ce 01       	movw	r24, r28
    1ece:	06 96       	adiw	r24, 0x06	; 6
    1ed0:	fc 01       	movw	r30, r24
    1ed2:	e2 0f       	add	r30, r18
    1ed4:	f3 1f       	adc	r31, r19
    1ed6:	90 81       	ld	r25, Z
    1ed8:	84 2f       	mov	r24, r20
    1eda:	69 2f       	mov	r22, r25
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
    1ee2:	17 c0       	rjmp	.+46     	; 0x1f12 <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	ce 01       	movw	r24, r28
    1eec:	02 96       	adiw	r24, 0x02	; 2
    1eee:	fc 01       	movw	r30, r24
    1ef0:	e2 0f       	add	r30, r18
    1ef2:	f3 1f       	adc	r31, r19
    1ef4:	40 81       	ld	r20, Z
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	ce 01       	movw	r24, r28
    1efe:	06 96       	adiw	r24, 0x06	; 6
    1f00:	fc 01       	movw	r30, r24
    1f02:	e2 0f       	add	r30, r18
    1f04:	f3 1f       	adc	r31, r19
    1f06:	90 81       	ld	r25, Z
    1f08:	84 2f       	mov	r24, r20
    1f0a:	69 2f       	mov	r22, r25
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	84 30       	cpi	r24, 0x04	; 4
    1f1c:	38 f2       	brcs	.-114    	; 0x1eac <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    1f1e:	2a 96       	adiw	r28, 0x0a	; 10
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	2f 97       	sbiw	r28, 0x0f	; 15
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	f8 94       	cli
    1f3e:	de bf       	out	0x3e, r29	; 62
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	cd bf       	out	0x3d, r28	; 61
    1f44:	9e 87       	std	Y+14, r25	; 0x0e
    1f46:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1f48:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    1f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	19 f4       	brne	.+6      	; 0x1f58 <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	8f 87       	std	Y+15, r24	; 0x0f
    1f56:	7e c0       	rjmp	.+252    	; 0x2054 <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    1f5c:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    1f5e:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    1f60:	83 e0       	ldi	r24, 0x03	; 3
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	83 e0       	ldi	r24, 0x03	; 3
    1f66:	8e 83       	std	Y+6, r24	; 0x06
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	8f 83       	std	Y+7, r24	; 0x07
    1f6c:	83 e0       	ldi	r24, 0x03	; 3
    1f6e:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    1f70:	19 86       	std	Y+9, r1	; 0x09
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	8a 87       	std	Y+10, r24	; 0x0a
    1f76:	84 e0       	ldi	r24, 0x04	; 4
    1f78:	8b 87       	std	Y+11, r24	; 0x0b
    1f7a:	85 e0       	ldi	r24, 0x05	; 5
    1f7c:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    1f7e:	1a 82       	std	Y+2, r1	; 0x02
    1f80:	63 c0       	rjmp	.+198    	; 0x2048 <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    1f88:	19 82       	std	Y+1, r1	; 0x01
    1f8a:	57 c0       	rjmp	.+174    	; 0x203a <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	ce 01       	movw	r24, r28
    1f94:	05 96       	adiw	r24, 0x05	; 5
    1f96:	fc 01       	movw	r30, r24
    1f98:	e2 0f       	add	r30, r18
    1f9a:	f3 1f       	adc	r31, r19
    1f9c:	40 81       	ld	r20, Z
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	ce 01       	movw	r24, r28
    1fa6:	09 96       	adiw	r24, 0x09	; 9
    1fa8:	fc 01       	movw	r30, r24
    1faa:	e2 0f       	add	r30, r18
    1fac:	f3 1f       	adc	r31, r19
    1fae:	90 81       	ld	r25, Z
    1fb0:	9e 01       	movw	r18, r28
    1fb2:	2c 5f       	subi	r18, 0xFC	; 252
    1fb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb6:	84 2f       	mov	r24, r20
    1fb8:	69 2f       	mov	r22, r25
    1fba:	a9 01       	movw	r20, r18
    1fbc:	0e 94 ab 0b 	call	0x1756	; 0x1756 <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	88 23       	and	r24, r24
    1fc4:	b9 f5       	brne	.+110    	; 0x2034 <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	88 2f       	mov	r24, r24
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	9c 01       	movw	r18, r24
    1fce:	22 0f       	add	r18, r18
    1fd0:	33 1f       	adc	r19, r19
    1fd2:	22 0f       	add	r18, r18
    1fd4:	33 1f       	adc	r19, r19
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	88 2f       	mov	r24, r24
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	82 0f       	add	r24, r18
    1fde:	93 1f       	adc	r25, r19
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	e8 58       	subi	r30, 0x88	; 136
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	ed 85       	ldd	r30, Y+13	; 0x0d
    1fea:	fe 85       	ldd	r31, Y+14	; 0x0e
    1fec:	80 83       	st	Z, r24
    1fee:	1a c0       	rjmp	.+52     	; 0x2024 <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	ce 01       	movw	r24, r28
    1ff8:	05 96       	adiw	r24, 0x05	; 5
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	e2 0f       	add	r30, r18
    1ffe:	f3 1f       	adc	r31, r19
    2000:	40 81       	ld	r20, Z
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	ce 01       	movw	r24, r28
    200a:	09 96       	adiw	r24, 0x09	; 9
    200c:	fc 01       	movw	r30, r24
    200e:	e2 0f       	add	r30, r18
    2010:	f3 1f       	adc	r31, r19
    2012:	90 81       	ld	r25, Z
    2014:	9e 01       	movw	r18, r28
    2016:	2c 5f       	subi	r18, 0xFC	; 252
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	84 2f       	mov	r24, r20
    201c:	69 2f       	mov	r22, r25
    201e:	a9 01       	movw	r20, r18
    2020:	0e 94 ab 0b 	call	0x1756	; 0x1756 <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    2024:	8c 81       	ldd	r24, Y+4	; 0x04
    2026:	88 23       	and	r24, r24
    2028:	19 f3       	breq	.-58     	; 0x1ff0 <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	8f 87       	std	Y+15, r24	; 0x0f
    2032:	10 c0       	rjmp	.+32     	; 0x2054 <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	8f 5f       	subi	r24, 0xFF	; 255
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	89 81       	ldd	r24, Y+1	; 0x01
    203c:	84 30       	cpi	r24, 0x04	; 4
    203e:	08 f4       	brcc	.+2      	; 0x2042 <keypad_enuGetPressedKey+0x112>
    2040:	a5 cf       	rjmp	.-182    	; 0x1f8c <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	8a 83       	std	Y+2, r24	; 0x02
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	84 30       	cpi	r24, 0x04	; 4
    204c:	08 f4       	brcc	.+2      	; 0x2050 <keypad_enuGetPressedKey+0x120>
    204e:	99 cf       	rjmp	.-206    	; 0x1f82 <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	8f 87       	std	Y+15, r24	; 0x0f
    2054:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2056:	2f 96       	adiw	r28, 0x0f	; 15
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	e9 97       	sbiw	r28, 0x39	; 57
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    207c:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	61 e0       	ldi	r22, 0x01	; 1
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	62 e0       	ldi	r22, 0x02	; 2
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	66 e0       	ldi	r22, 0x06	; 6
    20a0:	41 e0       	ldi	r20, 0x01	; 1
    20a2:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	65 e0       	ldi	r22, 0x05	; 5
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	64 e0       	ldi	r22, 0x04	; 4
    20b4:	41 e0       	ldi	r20, 0x01	; 1
    20b6:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	63 e0       	ldi	r22, 0x03	; 3
    20be:	41 e0       	ldi	r20, 0x01	; 1
    20c0:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	ac e0       	ldi	r26, 0x0C	; 12
    20ca:	b2 e4       	ldi	r27, 0x42	; 66
    20cc:	8d ab       	std	Y+53, r24	; 0x35
    20ce:	9e ab       	std	Y+54, r25	; 0x36
    20d0:	af ab       	std	Y+55, r26	; 0x37
    20d2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d4:	6d a9       	ldd	r22, Y+53	; 0x35
    20d6:	7e a9       	ldd	r23, Y+54	; 0x36
    20d8:	8f a9       	ldd	r24, Y+55	; 0x37
    20da:	98 ad       	ldd	r25, Y+56	; 0x38
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a e7       	ldi	r20, 0x7A	; 122
    20e2:	55 e4       	ldi	r21, 0x45	; 69
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	89 ab       	std	Y+49, r24	; 0x31
    20ee:	9a ab       	std	Y+50, r25	; 0x32
    20f0:	ab ab       	std	Y+51, r26	; 0x33
    20f2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20f4:	69 a9       	ldd	r22, Y+49	; 0x31
    20f6:	7a a9       	ldd	r23, Y+50	; 0x32
    20f8:	8b a9       	ldd	r24, Y+51	; 0x33
    20fa:	9c a9       	ldd	r25, Y+52	; 0x34
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e8       	ldi	r20, 0x80	; 128
    2102:	5f e3       	ldi	r21, 0x3F	; 63
    2104:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2108:	88 23       	and	r24, r24
    210a:	2c f4       	brge	.+10     	; 0x2116 <LCD_enuInit+0xae>
		__ticks = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	98 ab       	std	Y+48, r25	; 0x30
    2112:	8f a7       	std	Y+47, r24	; 0x2f
    2114:	3f c0       	rjmp	.+126    	; 0x2194 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    2116:	69 a9       	ldd	r22, Y+49	; 0x31
    2118:	7a a9       	ldd	r23, Y+50	; 0x32
    211a:	8b a9       	ldd	r24, Y+51	; 0x33
    211c:	9c a9       	ldd	r25, Y+52	; 0x34
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	3f ef       	ldi	r19, 0xFF	; 255
    2122:	4f e7       	ldi	r20, 0x7F	; 127
    2124:	57 e4       	ldi	r21, 0x47	; 71
    2126:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    212a:	18 16       	cp	r1, r24
    212c:	4c f5       	brge	.+82     	; 0x2180 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212e:	6d a9       	ldd	r22, Y+53	; 0x35
    2130:	7e a9       	ldd	r23, Y+54	; 0x36
    2132:	8f a9       	ldd	r24, Y+55	; 0x37
    2134:	98 ad       	ldd	r25, Y+56	; 0x38
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e2       	ldi	r20, 0x20	; 32
    213c:	51 e4       	ldi	r21, 0x41	; 65
    213e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	98 ab       	std	Y+48, r25	; 0x30
    2154:	8f a7       	std	Y+47, r24	; 0x2f
    2156:	0f c0       	rjmp	.+30     	; 0x2176 <LCD_enuInit+0x10e>
    2158:	80 e9       	ldi	r24, 0x90	; 144
    215a:	91 e0       	ldi	r25, 0x01	; 1
    215c:	9e a7       	std	Y+46, r25	; 0x2e
    215e:	8d a7       	std	Y+45, r24	; 0x2d
    2160:	8d a5       	ldd	r24, Y+45	; 0x2d
    2162:	9e a5       	ldd	r25, Y+46	; 0x2e
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <LCD_enuInit+0xfc>
    2168:	9e a7       	std	Y+46, r25	; 0x2e
    216a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216c:	8f a5       	ldd	r24, Y+47	; 0x2f
    216e:	98 a9       	ldd	r25, Y+48	; 0x30
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	98 ab       	std	Y+48, r25	; 0x30
    2174:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	8f a5       	ldd	r24, Y+47	; 0x2f
    2178:	98 a9       	ldd	r25, Y+48	; 0x30
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	69 f7       	brne	.-38     	; 0x2158 <LCD_enuInit+0xf0>
    217e:	14 c0       	rjmp	.+40     	; 0x21a8 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2180:	69 a9       	ldd	r22, Y+49	; 0x31
    2182:	7a a9       	ldd	r23, Y+50	; 0x32
    2184:	8b a9       	ldd	r24, Y+51	; 0x33
    2186:	9c a9       	ldd	r25, Y+52	; 0x34
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	98 ab       	std	Y+48, r25	; 0x30
    2192:	8f a7       	std	Y+47, r24	; 0x2f
    2194:	8f a5       	ldd	r24, Y+47	; 0x2f
    2196:	98 a9       	ldd	r25, Y+48	; 0x30
    2198:	9c a7       	std	Y+44, r25	; 0x2c
    219a:	8b a7       	std	Y+43, r24	; 0x2b
    219c:	8b a5       	ldd	r24, Y+43	; 0x2b
    219e:	9c a5       	ldd	r25, Y+44	; 0x2c
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <LCD_enuInit+0x138>
    21a4:	9c a7       	std	Y+44, r25	; 0x2c
    21a6:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    21a8:	80 e2       	ldi	r24, 0x20	; 32
    21aa:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    21ae:	80 e2       	ldi	r24, 0x20	; 32
    21b0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    21b4:	80 e8       	ldi	r24, 0x80	; 128
    21b6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	a0 e8       	ldi	r26, 0x80	; 128
    21c0:	bf e3       	ldi	r27, 0x3F	; 63
    21c2:	8f a3       	std	Y+39, r24	; 0x27
    21c4:	98 a7       	std	Y+40, r25	; 0x28
    21c6:	a9 a7       	std	Y+41, r26	; 0x29
    21c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ca:	6f a1       	ldd	r22, Y+39	; 0x27
    21cc:	78 a5       	ldd	r23, Y+40	; 0x28
    21ce:	89 a5       	ldd	r24, Y+41	; 0x29
    21d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a e7       	ldi	r20, 0x7A	; 122
    21d8:	55 e4       	ldi	r21, 0x45	; 69
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	8b a3       	std	Y+35, r24	; 0x23
    21e4:	9c a3       	std	Y+36, r25	; 0x24
    21e6:	ad a3       	std	Y+37, r26	; 0x25
    21e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21ea:	6b a1       	ldd	r22, Y+35	; 0x23
    21ec:	7c a1       	ldd	r23, Y+36	; 0x24
    21ee:	8d a1       	ldd	r24, Y+37	; 0x25
    21f0:	9e a1       	ldd	r25, Y+38	; 0x26
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e8       	ldi	r20, 0x80	; 128
    21f8:	5f e3       	ldi	r21, 0x3F	; 63
    21fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fe:	88 23       	and	r24, r24
    2200:	2c f4       	brge	.+10     	; 0x220c <LCD_enuInit+0x1a4>
		__ticks = 1;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9a a3       	std	Y+34, r25	; 0x22
    2208:	89 a3       	std	Y+33, r24	; 0x21
    220a:	3f c0       	rjmp	.+126    	; 0x228a <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    220c:	6b a1       	ldd	r22, Y+35	; 0x23
    220e:	7c a1       	ldd	r23, Y+36	; 0x24
    2210:	8d a1       	ldd	r24, Y+37	; 0x25
    2212:	9e a1       	ldd	r25, Y+38	; 0x26
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	3f ef       	ldi	r19, 0xFF	; 255
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	57 e4       	ldi	r21, 0x47	; 71
    221c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2220:	18 16       	cp	r1, r24
    2222:	4c f5       	brge	.+82     	; 0x2276 <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2224:	6f a1       	ldd	r22, Y+39	; 0x27
    2226:	78 a5       	ldd	r23, Y+40	; 0x28
    2228:	89 a5       	ldd	r24, Y+41	; 0x29
    222a:	9a a5       	ldd	r25, Y+42	; 0x2a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9a a3       	std	Y+34, r25	; 0x22
    224a:	89 a3       	std	Y+33, r24	; 0x21
    224c:	0f c0       	rjmp	.+30     	; 0x226c <LCD_enuInit+0x204>
    224e:	80 e9       	ldi	r24, 0x90	; 144
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	98 a3       	std	Y+32, r25	; 0x20
    2254:	8f 8f       	std	Y+31, r24	; 0x1f
    2256:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2258:	98 a1       	ldd	r25, Y+32	; 0x20
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <LCD_enuInit+0x1f2>
    225e:	98 a3       	std	Y+32, r25	; 0x20
    2260:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2262:	89 a1       	ldd	r24, Y+33	; 0x21
    2264:	9a a1       	ldd	r25, Y+34	; 0x22
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	9a a3       	std	Y+34, r25	; 0x22
    226a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226c:	89 a1       	ldd	r24, Y+33	; 0x21
    226e:	9a a1       	ldd	r25, Y+34	; 0x22
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	69 f7       	brne	.-38     	; 0x224e <LCD_enuInit+0x1e6>
    2274:	14 c0       	rjmp	.+40     	; 0x229e <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2276:	6b a1       	ldd	r22, Y+35	; 0x23
    2278:	7c a1       	ldd	r23, Y+36	; 0x24
    227a:	8d a1       	ldd	r24, Y+37	; 0x25
    227c:	9e a1       	ldd	r25, Y+38	; 0x26
    227e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	9a a3       	std	Y+34, r25	; 0x22
    2288:	89 a3       	std	Y+33, r24	; 0x21
    228a:	89 a1       	ldd	r24, Y+33	; 0x21
    228c:	9a a1       	ldd	r25, Y+34	; 0x22
    228e:	9e 8f       	std	Y+30, r25	; 0x1e
    2290:	8d 8f       	std	Y+29, r24	; 0x1d
    2292:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2294:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	f1 f7       	brne	.-4      	; 0x2296 <LCD_enuInit+0x22e>
    229a:	9e 8f       	std	Y+30, r25	; 0x1e
    229c:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    229e:	80 e0       	ldi	r24, 0x00	; 0
    22a0:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    22a4:	80 ef       	ldi	r24, 0xF0	; 240
    22a6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 e8       	ldi	r26, 0x80	; 128
    22b0:	bf e3       	ldi	r27, 0x3F	; 63
    22b2:	89 8f       	std	Y+25, r24	; 0x19
    22b4:	9a 8f       	std	Y+26, r25	; 0x1a
    22b6:	ab 8f       	std	Y+27, r26	; 0x1b
    22b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ba:	69 8d       	ldd	r22, Y+25	; 0x19
    22bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	4a e7       	ldi	r20, 0x7A	; 122
    22c8:	55 e4       	ldi	r21, 0x45	; 69
    22ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	8d 8b       	std	Y+21, r24	; 0x15
    22d4:	9e 8b       	std	Y+22, r25	; 0x16
    22d6:	af 8b       	std	Y+23, r26	; 0x17
    22d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22da:	6d 89       	ldd	r22, Y+21	; 0x15
    22dc:	7e 89       	ldd	r23, Y+22	; 0x16
    22de:	8f 89       	ldd	r24, Y+23	; 0x17
    22e0:	98 8d       	ldd	r25, Y+24	; 0x18
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e8       	ldi	r20, 0x80	; 128
    22e8:	5f e3       	ldi	r21, 0x3F	; 63
    22ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ee:	88 23       	and	r24, r24
    22f0:	2c f4       	brge	.+10     	; 0x22fc <LCD_enuInit+0x294>
		__ticks = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9c 8b       	std	Y+20, r25	; 0x14
    22f8:	8b 8b       	std	Y+19, r24	; 0x13
    22fa:	3f c0       	rjmp	.+126    	; 0x237a <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    22fc:	6d 89       	ldd	r22, Y+21	; 0x15
    22fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2300:	8f 89       	ldd	r24, Y+23	; 0x17
    2302:	98 8d       	ldd	r25, Y+24	; 0x18
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	3f ef       	ldi	r19, 0xFF	; 255
    2308:	4f e7       	ldi	r20, 0x7F	; 127
    230a:	57 e4       	ldi	r21, 0x47	; 71
    230c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2310:	18 16       	cp	r1, r24
    2312:	4c f5       	brge	.+82     	; 0x2366 <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2314:	69 8d       	ldd	r22, Y+25	; 0x19
    2316:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2318:	8b 8d       	ldd	r24, Y+27	; 0x1b
    231a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	40 e2       	ldi	r20, 0x20	; 32
    2322:	51 e4       	ldi	r21, 0x41	; 65
    2324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	9c 8b       	std	Y+20, r25	; 0x14
    233a:	8b 8b       	std	Y+19, r24	; 0x13
    233c:	0f c0       	rjmp	.+30     	; 0x235c <LCD_enuInit+0x2f4>
    233e:	80 e9       	ldi	r24, 0x90	; 144
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	9a 8b       	std	Y+18, r25	; 0x12
    2344:	89 8b       	std	Y+17, r24	; 0x11
    2346:	89 89       	ldd	r24, Y+17	; 0x11
    2348:	9a 89       	ldd	r25, Y+18	; 0x12
    234a:	01 97       	sbiw	r24, 0x01	; 1
    234c:	f1 f7       	brne	.-4      	; 0x234a <LCD_enuInit+0x2e2>
    234e:	9a 8b       	std	Y+18, r25	; 0x12
    2350:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2352:	8b 89       	ldd	r24, Y+19	; 0x13
    2354:	9c 89       	ldd	r25, Y+20	; 0x14
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	9c 8b       	std	Y+20, r25	; 0x14
    235a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235c:	8b 89       	ldd	r24, Y+19	; 0x13
    235e:	9c 89       	ldd	r25, Y+20	; 0x14
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	69 f7       	brne	.-38     	; 0x233e <LCD_enuInit+0x2d6>
    2364:	14 c0       	rjmp	.+40     	; 0x238e <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2366:	6d 89       	ldd	r22, Y+21	; 0x15
    2368:	7e 89       	ldd	r23, Y+22	; 0x16
    236a:	8f 89       	ldd	r24, Y+23	; 0x17
    236c:	98 8d       	ldd	r25, Y+24	; 0x18
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9c 8b       	std	Y+20, r25	; 0x14
    2378:	8b 8b       	std	Y+19, r24	; 0x13
    237a:	8b 89       	ldd	r24, Y+19	; 0x13
    237c:	9c 89       	ldd	r25, Y+20	; 0x14
    237e:	98 8b       	std	Y+16, r25	; 0x10
    2380:	8f 87       	std	Y+15, r24	; 0x0f
    2382:	8f 85       	ldd	r24, Y+15	; 0x0f
    2384:	98 89       	ldd	r25, Y+16	; 0x10
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <LCD_enuInit+0x31e>
    238a:	98 8b       	std	Y+16, r25	; 0x10
    238c:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	a0 e0       	ldi	r26, 0x00	; 0
    23a0:	b0 e4       	ldi	r27, 0x40	; 64
    23a2:	8b 87       	std	Y+11, r24	; 0x0b
    23a4:	9c 87       	std	Y+12, r25	; 0x0c
    23a6:	ad 87       	std	Y+13, r26	; 0x0d
    23a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    23b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	4a e7       	ldi	r20, 0x7A	; 122
    23b8:	55 e4       	ldi	r21, 0x45	; 69
    23ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	8f 83       	std	Y+7, r24	; 0x07
    23c4:	98 87       	std	Y+8, r25	; 0x08
    23c6:	a9 87       	std	Y+9, r26	; 0x09
    23c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ca:	6f 81       	ldd	r22, Y+7	; 0x07
    23cc:	78 85       	ldd	r23, Y+8	; 0x08
    23ce:	89 85       	ldd	r24, Y+9	; 0x09
    23d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e8       	ldi	r20, 0x80	; 128
    23d8:	5f e3       	ldi	r21, 0x3F	; 63
    23da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23de:	88 23       	and	r24, r24
    23e0:	2c f4       	brge	.+10     	; 0x23ec <LCD_enuInit+0x384>
		__ticks = 1;
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	9e 83       	std	Y+6, r25	; 0x06
    23e8:	8d 83       	std	Y+5, r24	; 0x05
    23ea:	3f c0       	rjmp	.+126    	; 0x246a <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    23ec:	6f 81       	ldd	r22, Y+7	; 0x07
    23ee:	78 85       	ldd	r23, Y+8	; 0x08
    23f0:	89 85       	ldd	r24, Y+9	; 0x09
    23f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	3f ef       	ldi	r19, 0xFF	; 255
    23f8:	4f e7       	ldi	r20, 0x7F	; 127
    23fa:	57 e4       	ldi	r21, 0x47	; 71
    23fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2400:	18 16       	cp	r1, r24
    2402:	4c f5       	brge	.+82     	; 0x2456 <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	7c 85       	ldd	r23, Y+12	; 0x0c
    2408:	8d 85       	ldd	r24, Y+13	; 0x0d
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	0f c0       	rjmp	.+30     	; 0x244c <LCD_enuInit+0x3e4>
    242e:	80 e9       	ldi	r24, 0x90	; 144
    2430:	91 e0       	ldi	r25, 0x01	; 1
    2432:	9c 83       	std	Y+4, r25	; 0x04
    2434:	8b 83       	std	Y+3, r24	; 0x03
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <LCD_enuInit+0x3d2>
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
    2444:	9e 81       	ldd	r25, Y+6	; 0x06
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	9e 83       	std	Y+6, r25	; 0x06
    244a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	69 f7       	brne	.-38     	; 0x242e <LCD_enuInit+0x3c6>
    2454:	14 c0       	rjmp	.+40     	; 0x247e <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	6f 81       	ldd	r22, Y+7	; 0x07
    2458:	78 85       	ldd	r23, Y+8	; 0x08
    245a:	89 85       	ldd	r24, Y+9	; 0x09
    245c:	9a 85       	ldd	r25, Y+10	; 0x0a
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9e 83       	std	Y+6, r25	; 0x06
    2468:	8d 83       	std	Y+5, r24	; 0x05
    246a:	8d 81       	ldd	r24, Y+5	; 0x05
    246c:	9e 81       	ldd	r25, Y+6	; 0x06
    246e:	9a 83       	std	Y+2, r25	; 0x02
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	9a 81       	ldd	r25, Y+2	; 0x02
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	f1 f7       	brne	.-4      	; 0x2476 <LCD_enuInit+0x40e>
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    2484:	86 e0       	ldi	r24, 0x06	; 6
    2486:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	80 93 93 00 	sts	0x0093, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    2494:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2496:	e9 96       	adiw	r28, 0x39	; 57
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	cf 91       	pop	r28
    24a4:	df 91       	pop	r29
    24a6:	08 95       	ret

000024a8 <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	6e 97       	sbiw	r28, 0x1e	; 30
    24b2:	0f b6       	in	r0, 0x3f	; 63
    24b4:	f8 94       	cli
    24b6:	de bf       	out	0x3e, r29	; 62
    24b8:	0f be       	out	0x3f, r0	; 63
    24ba:	cd bf       	out	0x3d, r28	; 61
    24bc:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    24be:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    24c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24c2:	82 95       	swap	r24
    24c4:	8f 70       	andi	r24, 0x0F	; 15
    24c6:	98 2f       	mov	r25, r24
    24c8:	91 70       	andi	r25, 0x01	; 1
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	63 e0       	ldi	r22, 0x03	; 3
    24ce:	49 2f       	mov	r20, r25
    24d0:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    24d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24d6:	82 95       	swap	r24
    24d8:	86 95       	lsr	r24
    24da:	87 70       	andi	r24, 0x07	; 7
    24dc:	98 2f       	mov	r25, r24
    24de:	91 70       	andi	r25, 0x01	; 1
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	64 e0       	ldi	r22, 0x04	; 4
    24e4:	49 2f       	mov	r20, r25
    24e6:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    24ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ec:	82 95       	swap	r24
    24ee:	86 95       	lsr	r24
    24f0:	86 95       	lsr	r24
    24f2:	83 70       	andi	r24, 0x03	; 3
    24f4:	98 2f       	mov	r25, r24
    24f6:	91 70       	andi	r25, 0x01	; 1
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	65 e0       	ldi	r22, 0x05	; 5
    24fc:	49 2f       	mov	r20, r25
    24fe:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    2502:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2504:	98 2f       	mov	r25, r24
    2506:	99 1f       	adc	r25, r25
    2508:	99 27       	eor	r25, r25
    250a:	99 1f       	adc	r25, r25
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	66 e0       	ldi	r22, 0x06	; 6
    2510:	49 2f       	mov	r20, r25
    2512:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	62 e0       	ldi	r22, 0x02	; 2
    251a:	41 e0       	ldi	r20, 0x01	; 1
    251c:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	a0 e0       	ldi	r26, 0x00	; 0
    2526:	b0 e4       	ldi	r27, 0x40	; 64
    2528:	89 8f       	std	Y+25, r24	; 0x19
    252a:	9a 8f       	std	Y+26, r25	; 0x1a
    252c:	ab 8f       	std	Y+27, r26	; 0x1b
    252e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2530:	69 8d       	ldd	r22, Y+25	; 0x19
    2532:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2534:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2536:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	4a e7       	ldi	r20, 0x7A	; 122
    253e:	55 e4       	ldi	r21, 0x45	; 69
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	8d 8b       	std	Y+21, r24	; 0x15
    254a:	9e 8b       	std	Y+22, r25	; 0x16
    254c:	af 8b       	std	Y+23, r26	; 0x17
    254e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2550:	6d 89       	ldd	r22, Y+21	; 0x15
    2552:	7e 89       	ldd	r23, Y+22	; 0x16
    2554:	8f 89       	ldd	r24, Y+23	; 0x17
    2556:	98 8d       	ldd	r25, Y+24	; 0x18
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e8       	ldi	r20, 0x80	; 128
    255e:	5f e3       	ldi	r21, 0x3F	; 63
    2560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2564:	88 23       	and	r24, r24
    2566:	2c f4       	brge	.+10     	; 0x2572 <WriteNLatch+0xca>
		__ticks = 1;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	9c 8b       	std	Y+20, r25	; 0x14
    256e:	8b 8b       	std	Y+19, r24	; 0x13
    2570:	3f c0       	rjmp	.+126    	; 0x25f0 <WriteNLatch+0x148>
	else if (__tmp > 65535)
    2572:	6d 89       	ldd	r22, Y+21	; 0x15
    2574:	7e 89       	ldd	r23, Y+22	; 0x16
    2576:	8f 89       	ldd	r24, Y+23	; 0x17
    2578:	98 8d       	ldd	r25, Y+24	; 0x18
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	3f ef       	ldi	r19, 0xFF	; 255
    257e:	4f e7       	ldi	r20, 0x7F	; 127
    2580:	57 e4       	ldi	r21, 0x47	; 71
    2582:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2586:	18 16       	cp	r1, r24
    2588:	4c f5       	brge	.+82     	; 0x25dc <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258a:	69 8d       	ldd	r22, Y+25	; 0x19
    258c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    258e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e2       	ldi	r20, 0x20	; 32
    2598:	51 e4       	ldi	r21, 0x41	; 65
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	9c 8b       	std	Y+20, r25	; 0x14
    25b0:	8b 8b       	std	Y+19, r24	; 0x13
    25b2:	0f c0       	rjmp	.+30     	; 0x25d2 <WriteNLatch+0x12a>
    25b4:	80 e9       	ldi	r24, 0x90	; 144
    25b6:	91 e0       	ldi	r25, 0x01	; 1
    25b8:	9a 8b       	std	Y+18, r25	; 0x12
    25ba:	89 8b       	std	Y+17, r24	; 0x11
    25bc:	89 89       	ldd	r24, Y+17	; 0x11
    25be:	9a 89       	ldd	r25, Y+18	; 0x12
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <WriteNLatch+0x118>
    25c4:	9a 8b       	std	Y+18, r25	; 0x12
    25c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ca:	9c 89       	ldd	r25, Y+20	; 0x14
    25cc:	01 97       	sbiw	r24, 0x01	; 1
    25ce:	9c 8b       	std	Y+20, r25	; 0x14
    25d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d2:	8b 89       	ldd	r24, Y+19	; 0x13
    25d4:	9c 89       	ldd	r25, Y+20	; 0x14
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	69 f7       	brne	.-38     	; 0x25b4 <WriteNLatch+0x10c>
    25da:	14 c0       	rjmp	.+40     	; 0x2604 <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25dc:	6d 89       	ldd	r22, Y+21	; 0x15
    25de:	7e 89       	ldd	r23, Y+22	; 0x16
    25e0:	8f 89       	ldd	r24, Y+23	; 0x17
    25e2:	98 8d       	ldd	r25, Y+24	; 0x18
    25e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e8:	dc 01       	movw	r26, r24
    25ea:	cb 01       	movw	r24, r22
    25ec:	9c 8b       	std	Y+20, r25	; 0x14
    25ee:	8b 8b       	std	Y+19, r24	; 0x13
    25f0:	8b 89       	ldd	r24, Y+19	; 0x13
    25f2:	9c 89       	ldd	r25, Y+20	; 0x14
    25f4:	98 8b       	std	Y+16, r25	; 0x10
    25f6:	8f 87       	std	Y+15, r24	; 0x0f
    25f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fa:	98 89       	ldd	r25, Y+16	; 0x10
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <WriteNLatch+0x154>
    2600:	98 8b       	std	Y+16, r25	; 0x10
    2602:	8f 87       	std	Y+15, r24	; 0x0f
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	62 e0       	ldi	r22, 0x02	; 2
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    260e:	80 91 93 00 	lds	r24, 0x0093
    2612:	88 23       	and	r24, r24
    2614:	09 f4       	brne	.+2      	; 0x2618 <WriteNLatch+0x170>
    2616:	a2 c0       	rjmp	.+324    	; 0x275c <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    2618:	8e 8d       	ldd	r24, Y+30	; 0x1e
    261a:	98 2f       	mov	r25, r24
    261c:	91 70       	andi	r25, 0x01	; 1
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	63 e0       	ldi	r22, 0x03	; 3
    2622:	49 2f       	mov	r20, r25
    2624:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    2628:	8e 8d       	ldd	r24, Y+30	; 0x1e
    262a:	86 95       	lsr	r24
    262c:	98 2f       	mov	r25, r24
    262e:	91 70       	andi	r25, 0x01	; 1
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	64 e0       	ldi	r22, 0x04	; 4
    2634:	49 2f       	mov	r20, r25
    2636:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    263a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    263c:	86 95       	lsr	r24
    263e:	86 95       	lsr	r24
    2640:	98 2f       	mov	r25, r24
    2642:	91 70       	andi	r25, 0x01	; 1
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	65 e0       	ldi	r22, 0x05	; 5
    2648:	49 2f       	mov	r20, r25
    264a:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    264e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2650:	86 95       	lsr	r24
    2652:	86 95       	lsr	r24
    2654:	86 95       	lsr	r24
    2656:	98 2f       	mov	r25, r24
    2658:	91 70       	andi	r25, 0x01	; 1
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	66 e0       	ldi	r22, 0x06	; 6
    265e:	49 2f       	mov	r20, r25
    2660:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	62 e0       	ldi	r22, 0x02	; 2
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	a0 e0       	ldi	r26, 0x00	; 0
    2674:	b0 e4       	ldi	r27, 0x40	; 64
    2676:	8b 87       	std	Y+11, r24	; 0x0b
    2678:	9c 87       	std	Y+12, r25	; 0x0c
    267a:	ad 87       	std	Y+13, r26	; 0x0d
    267c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2680:	7c 85       	ldd	r23, Y+12	; 0x0c
    2682:	8d 85       	ldd	r24, Y+13	; 0x0d
    2684:	9e 85       	ldd	r25, Y+14	; 0x0e
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a e7       	ldi	r20, 0x7A	; 122
    268c:	55 e4       	ldi	r21, 0x45	; 69
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8f 83       	std	Y+7, r24	; 0x07
    2698:	98 87       	std	Y+8, r25	; 0x08
    269a:	a9 87       	std	Y+9, r26	; 0x09
    269c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269e:	6f 81       	ldd	r22, Y+7	; 0x07
    26a0:	78 85       	ldd	r23, Y+8	; 0x08
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <WriteNLatch+0x218>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	3f c0       	rjmp	.+126    	; 0x273e <WriteNLatch+0x296>
	else if (__tmp > 65535)
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26da:	7c 85       	ldd	r23, Y+12	; 0x0c
    26dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26de:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <WriteNLatch+0x278>
    2702:	80 e9       	ldi	r24, 0x90	; 144
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	9c 83       	std	Y+4, r25	; 0x04
    2708:	8b 83       	std	Y+3, r24	; 0x03
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <WriteNLatch+0x266>
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <WriteNLatch+0x25a>
    2728:	14 c0       	rjmp	.+40     	; 0x2752 <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <WriteNLatch+0x2a2>
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	62 e0       	ldi	r22, 0x02	; 2
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    2760:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2762:	6e 96       	adiw	r28, 0x1e	; 30
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	00 d0       	rcall	.+0      	; 0x277a <LCD_enuSendData+0x6>
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2780:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	61 e0       	ldi	r22, 0x01	; 1
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    278c:	83 e0       	ldi	r24, 0x03	; 3
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	0e 94 54 12 	call	0x24a8	; 0x24a8 <WriteNLatch>



	return Local_enu_ErrorState;
    279c:	89 81       	ldd	r24, Y+1	; 0x01
}
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <LCD_enuSendCommand+0x6>
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62
    27b2:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    27b4:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	61 e0       	ldi	r22, 0x01	; 1
    27ba:	40 e0       	ldi	r20, 0x00	; 0
    27bc:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    27c0:	83 e0       	ldi	r24, 0x03	; 3
    27c2:	60 e0       	ldi	r22, 0x00	; 0
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	0e 94 54 12 	call	0x24a8	; 0x24a8 <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    27d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	cf 91       	pop	r28
    27dc:	df 91       	pop	r29
    27de:	08 95       	ret

000027e0 <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    27e0:	df 93       	push	r29
    27e2:	cf 93       	push	r28
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <LCD_u8SendString+0x6>
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <LCD_u8SendString+0x8>
    27e8:	0f 92       	push	r0
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	9c 83       	std	Y+4, r25	; 0x04
    27f0:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    27f2:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	f9 f0       	breq	.+62     	; 0x283a <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    27fc:	19 82       	std	Y+1, r1	; 0x01
    27fe:	0f c0       	rjmp	.+30     	; 0x281e <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    2800:	89 81       	ldd	r24, Y+1	; 0x01
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	fc 01       	movw	r30, r24
    280c:	e2 0f       	add	r30, r18
    280e:	f3 1f       	adc	r31, r19
    2810:	90 81       	ld	r25, Z
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	8f 5f       	subi	r24, 0xFF	; 255
    2816:	89 83       	std	Y+1, r24	; 0x01
    2818:	89 2f       	mov	r24, r25
    281a:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	fc 01       	movw	r30, r24
    282a:	e2 0f       	add	r30, r18
    282c:	f3 1f       	adc	r31, r19
    282e:	80 81       	ld	r24, Z
    2830:	88 23       	and	r24, r24
    2832:	31 f7       	brne	.-52     	; 0x2800 <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	8d 83       	std	Y+5, r24	; 0x05
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	8d 83       	std	Y+5, r24	; 0x05
    2842:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	a0 97       	sbiw	r28, 0x20	; 32
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	6b 8f       	std	Y+27, r22	; 0x1b
    286a:	7c 8f       	std	Y+28, r23	; 0x1c
    286c:	8d 8f       	std	Y+29, r24	; 0x1d
    286e:	9e 8f       	std	Y+30, r25	; 0x1e
    2870:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2872:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    2874:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    2876:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    2878:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    287a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    287c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    287e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2880:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2882:	be 8d       	ldd	r27, Y+30	; 0x1e
    2884:	bb 23       	and	r27, r27
    2886:	94 f4       	brge	.+36     	; 0x28ac <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    2888:	8d e2       	ldi	r24, 0x2D	; 45
    288a:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_enuSendData>
		Copy_u8data*=-1;
    288e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2892:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2894:	be 8d       	ldd	r27, Y+30	; 0x1e
    2896:	b0 95       	com	r27
    2898:	a0 95       	com	r26
    289a:	90 95       	com	r25
    289c:	81 95       	neg	r24
    289e:	9f 4f       	sbci	r25, 0xFF	; 255
    28a0:	af 4f       	sbci	r26, 0xFF	; 255
    28a2:	bf 4f       	sbci	r27, 0xFF	; 255
    28a4:	8b 8f       	std	Y+27, r24	; 0x1b
    28a6:	9c 8f       	std	Y+28, r25	; 0x1c
    28a8:	ad 8f       	std	Y+29, r26	; 0x1d
    28aa:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    28ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28b0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    28b2:	be 8d       	ldd	r27, Y+30	; 0x1e
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	a1 05       	cpc	r26, r1
    28b8:	b1 05       	cpc	r27, r1
    28ba:	09 f0       	breq	.+2      	; 0x28be <LCD_enuIntegerToString+0x6a>
    28bc:	4b c0       	rjmp	.+150    	; 0x2954 <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	28 2f       	mov	r18, r24
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	ce 01       	movw	r24, r28
    28c6:	07 96       	adiw	r24, 0x07	; 7
    28c8:	fc 01       	movw	r30, r24
    28ca:	e2 0f       	add	r30, r18
    28cc:	f3 1f       	adc	r31, r19
    28ce:	80 e3       	ldi	r24, 0x30	; 48
    28d0:	80 83       	st	Z, r24
    28d2:	8d 81       	ldd	r24, Y+5	; 0x05
    28d4:	8f 5f       	subi	r24, 0xFF	; 255
    28d6:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    28d8:	8d 81       	ldd	r24, Y+5	; 0x05
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	ce 01       	movw	r24, r28
    28e0:	07 96       	adiw	r24, 0x07	; 7
    28e2:	fc 01       	movw	r30, r24
    28e4:	e2 0f       	add	r30, r18
    28e6:	f3 1f       	adc	r31, r19
    28e8:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    28ea:	8e 81       	ldd	r24, Y+6	; 0x06
    28ec:	88 a3       	std	Y+32, r24	; 0x20
    28ee:	7f c0       	rjmp	.+254    	; 0x29ee <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    28f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28f2:	28 2f       	mov	r18, r24
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	50 e0       	ldi	r21, 0x00	; 0
    28fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28fe:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2900:	be 8d       	ldd	r27, Y+30	; 0x1e
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__divmodsi4>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	8c 81       	ldd	r24, Y+4	; 0x04
    2918:	48 2f       	mov	r20, r24
    291a:	40 5d       	subi	r20, 0xD0	; 208
    291c:	ce 01       	movw	r24, r28
    291e:	07 96       	adiw	r24, 0x07	; 7
    2920:	fc 01       	movw	r30, r24
    2922:	e2 0f       	add	r30, r18
    2924:	f3 1f       	adc	r31, r19
    2926:	40 83       	st	Z, r20
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	8f 5f       	subi	r24, 0xFF	; 255
    292c:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    292e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    293a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    293c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    293e:	be 8d       	ldd	r27, Y+30	; 0x1e
    2940:	bc 01       	movw	r22, r24
    2942:	cd 01       	movw	r24, r26
    2944:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__divmodsi4>
    2948:	da 01       	movw	r26, r20
    294a:	c9 01       	movw	r24, r18
    294c:	8b 8f       	std	Y+27, r24	; 0x1b
    294e:	9c 8f       	std	Y+28, r25	; 0x1c
    2950:	ad 8f       	std	Y+29, r26	; 0x1d
    2952:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    2954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2958:	ad 8d       	ldd	r26, Y+29	; 0x1d
    295a:	be 8d       	ldd	r27, Y+30	; 0x1e
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	a1 05       	cpc	r26, r1
    2960:	b1 05       	cpc	r27, r1
    2962:	31 f6       	brne	.-116    	; 0x28f0 <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	ce 01       	movw	r24, r28
    296c:	07 96       	adiw	r24, 0x07	; 7
    296e:	fc 01       	movw	r30, r24
    2970:	e2 0f       	add	r30, r18
    2972:	f3 1f       	adc	r31, r19
    2974:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    2976:	8d 81       	ldd	r24, Y+5	; 0x05
    2978:	81 50       	subi	r24, 0x01	; 1
    297a:	8a 83       	std	Y+2, r24	; 0x02
    297c:	2c c0       	rjmp	.+88     	; 0x29d6 <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	28 2f       	mov	r18, r24
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	ce 01       	movw	r24, r28
    2986:	07 96       	adiw	r24, 0x07	; 7
    2988:	fc 01       	movw	r30, r24
    298a:	e2 0f       	add	r30, r18
    298c:	f3 1f       	adc	r31, r19
    298e:	80 81       	ld	r24, Z
    2990:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	48 2f       	mov	r20, r24
    2996:	50 e0       	ldi	r21, 0x00	; 0
    2998:	8a 81       	ldd	r24, Y+2	; 0x02
    299a:	28 2f       	mov	r18, r24
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	ce 01       	movw	r24, r28
    29a0:	07 96       	adiw	r24, 0x07	; 7
    29a2:	fc 01       	movw	r30, r24
    29a4:	e2 0f       	add	r30, r18
    29a6:	f3 1f       	adc	r31, r19
    29a8:	20 81       	ld	r18, Z
    29aa:	ce 01       	movw	r24, r28
    29ac:	07 96       	adiw	r24, 0x07	; 7
    29ae:	fc 01       	movw	r30, r24
    29b0:	e4 0f       	add	r30, r20
    29b2:	f5 1f       	adc	r31, r21
    29b4:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	ce 01       	movw	r24, r28
    29be:	07 96       	adiw	r24, 0x07	; 7
    29c0:	fc 01       	movw	r30, r24
    29c2:	e2 0f       	add	r30, r18
    29c4:	f3 1f       	adc	r31, r19
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	80 83       	st	Z, r24

        Local_u8Start++;
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	8f 5f       	subi	r24, 0xFF	; 255
    29ce:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	81 50       	subi	r24, 0x01	; 1
    29d4:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    29d6:	9b 81       	ldd	r25, Y+3	; 0x03
    29d8:	8a 81       	ldd	r24, Y+2	; 0x02
    29da:	98 17       	cp	r25, r24
    29dc:	80 f2       	brcs	.-96     	; 0x297e <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    29de:	ce 01       	movw	r24, r28
    29e0:	07 96       	adiw	r24, 0x07	; 7
    29e2:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    29ea:	8e 81       	ldd	r24, Y+6	; 0x06
    29ec:	88 a3       	std	Y+32, r24	; 0x20
    29ee:	88 a1       	ldd	r24, Y+32	; 0x20
}
    29f0:	a0 96       	adiw	r28, 0x20	; 32
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	de bf       	out	0x3e, r29	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	cd bf       	out	0x3d, r28	; 61
    29fc:	cf 91       	pop	r28
    29fe:	df 91       	pop	r29
    2a00:	08 95       	ret

00002a02 <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    2a02:	df 93       	push	r29
    2a04:	cf 93       	push	r28
    2a06:	cd b7       	in	r28, 0x3d	; 61
    2a08:	de b7       	in	r29, 0x3e	; 62
    2a0a:	27 97       	sbiw	r28, 0x07	; 7
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	cd bf       	out	0x3d, r28	; 61
    2a16:	8b 83       	std	Y+3, r24	; 0x03
    2a18:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    2a1a:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	81 31       	cpi	r24, 0x11	; 17
    2a20:	18 f4       	brcc	.+6      	; 0x2a28 <LCD_u8SetPosXY+0x26>
    2a22:	8c 81       	ldd	r24, Y+4	; 0x04
    2a24:	83 30       	cpi	r24, 0x03	; 3
    2a26:	18 f0       	brcs	.+6      	; 0x2a2e <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    2a28:	2a 81       	ldd	r18, Y+2	; 0x02
    2a2a:	2f 83       	std	Y+7, r18	; 0x07
    2a2c:	23 c0       	rjmp	.+70     	; 0x2a74 <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    2a2e:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    2a30:	8c 81       	ldd	r24, Y+4	; 0x04
    2a32:	28 2f       	mov	r18, r24
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	3e 83       	std	Y+6, r19	; 0x06
    2a38:	2d 83       	std	Y+5, r18	; 0x05
    2a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	91 05       	cpc	r25, r1
    2a42:	31 f0       	breq	.+12     	; 0x2a50 <LCD_u8SetPosXY+0x4e>
    2a44:	2d 81       	ldd	r18, Y+5	; 0x05
    2a46:	3e 81       	ldd	r19, Y+6	; 0x06
    2a48:	22 30       	cpi	r18, 0x02	; 2
    2a4a:	31 05       	cpc	r19, r1
    2a4c:	21 f0       	breq	.+8      	; 0x2a56 <LCD_u8SetPosXY+0x54>
    2a4e:	07 c0       	rjmp	.+14     	; 0x2a5e <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	05 c0       	rjmp	.+10     	; 0x2a60 <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    2a56:	8b 81       	ldd	r24, Y+3	; 0x03
    2a58:	80 5c       	subi	r24, 0xC0	; 192
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	01 c0       	rjmp	.+2      	; 0x2a60 <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    2a5e:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	80 68       	ori	r24, 0x80	; 128
    2a64:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    2a70:	3a 81       	ldd	r19, Y+2	; 0x02
    2a72:	3f 83       	std	Y+7, r19	; 0x07
    2a74:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2a76:	27 96       	adiw	r28, 0x07	; 7
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	27 97       	sbiw	r28, 0x07	; 7
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	9d 83       	std	Y+5, r25	; 0x05
    2a9e:	8c 83       	std	Y+4, r24	; 0x04
    2aa0:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2aa2:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    2aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	19 f0       	breq	.+6      	; 0x2ab2 <LCD_u8StoreCustomChar+0x2a>
    2aac:	8e 81       	ldd	r24, Y+6	; 0x06
    2aae:	89 30       	cpi	r24, 0x09	; 9
    2ab0:	18 f0       	brcs	.+6      	; 0x2ab8 <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	8f 83       	std	Y+7, r24	; 0x07
    2ab6:	2a c0       	rjmp	.+84     	; 0x2b0c <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    2ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    2aba:	88 2f       	mov	r24, r24
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	88 0f       	add	r24, r24
    2ac0:	99 1f       	adc	r25, r25
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	88 0f       	add	r24, r24
    2ac8:	99 1f       	adc	r25, r25
    2aca:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	80 64       	ori	r24, 0x40	; 64
    2ad0:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    2ad8:	19 82       	std	Y+1, r1	; 0x01
    2ada:	0e c0       	rjmp	.+28     	; 0x2af8 <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	e2 0f       	add	r30, r18
    2aea:	f3 1f       	adc	r31, r19
    2aec:	80 81       	ld	r24, Z
    2aee:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	8f 5f       	subi	r24, 0xFF	; 255
    2af6:	89 83       	std	Y+1, r24	; 0x01
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	88 30       	cpi	r24, 0x08	; 8
    2afc:	78 f3       	brcs	.-34     	; 0x2adc <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    2afe:	82 e0       	ldi	r24, 0x02	; 2
    2b00:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    2b08:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0a:	8f 83       	std	Y+7, r24	; 0x07
    2b0c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2b0e:	27 96       	adiw	r28, 0x07	; 7
    2b10:	0f b6       	in	r0, 0x3f	; 63
    2b12:	f8 94       	cli
    2b14:	de bf       	out	0x3e, r29	; 62
    2b16:	0f be       	out	0x3f, r0	; 63
    2b18:	cd bf       	out	0x3d, r28	; 61
    2b1a:	cf 91       	pop	r28
    2b1c:	df 91       	pop	r29
    2b1e:	08 95       	ret

00002b20 <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    2b20:	df 93       	push	r29
    2b22:	cf 93       	push	r28
    2b24:	00 d0       	rcall	.+0      	; 0x2b26 <LCD_u8DisplayCustomChar+0x6>
    2b26:	00 d0       	rcall	.+0      	; 0x2b28 <LCD_u8DisplayCustomChar+0x8>
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	8a 83       	std	Y+2, r24	; 0x02
    2b2e:	6b 83       	std	Y+3, r22	; 0x03
    2b30:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2b32:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    2b34:	8c 81       	ldd	r24, Y+4	; 0x04
    2b36:	6b 81       	ldd	r22, Y+3	; 0x03
    2b38:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    2b46:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b48:	0f 90       	pop	r0
    2b4a:	0f 90       	pop	r0
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <main>:





int main(){
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	60 97       	sbiw	r28, 0x10	; 16
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
//	EXTI_enuSetCallBack(warningSequence, 1);
	/**************************************************************/


	/************** Testing LCD Driver **************/
	LCD_enuInit();
    2b6a:	0e 94 34 10 	call	0x2068	; 0x2068 <LCD_enuInit>
	LCD_u8SendString("Ahmed Asl");
    2b6e:	80 e6       	ldi	r24, 0x60	; 96
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <LCD_u8SendString>
	LCD_u8SetPosXY(0, 2);
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	62 e0       	ldi	r22, 0x02	; 2
    2b7a:	0e 94 01 15 	call	0x2a02	; 0x2a02 <LCD_u8SetPosXY>
	/************************************************/


	/************** Testing ADC Driver **************/
	ADC_enuInit(10, 5000000);
    2b7e:	8a e0       	ldi	r24, 0x0A	; 10
    2b80:	40 e4       	ldi	r20, 0x40	; 64
    2b82:	5b e4       	ldi	r21, 0x4B	; 75
    2b84:	6c e4       	ldi	r22, 0x4C	; 76
    2b86:	70 e0       	ldi	r23, 0x00	; 0
    2b88:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <ADC_enuInit>
	DIO_enuSetPinDirection(DIO_u8PortA, DIO_u8PIN0, DIO_u8INPUT);
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_enuSetPinDirection>
	uint16 AnalogReadingValue = 0;
    2b96:	18 8a       	std	Y+16, r1	; 0x10
    2b98:	1f 86       	std	Y+15, r1	; 0x0f
	/************************************************/


	while(1){
		ADC_enuStartConversion(ADC_Channel_0);
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <ADC_enuStartConversion>
		AnalogReadingValue = (ADC_GetResult() * ((uint32_t)5000000/ 1024ul))/10000ul;
    2ba0:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <ADC_GetResult>
    2ba4:	cc 01       	movw	r24, r24
    2ba6:	a0 e0       	ldi	r26, 0x00	; 0
    2ba8:	b0 e0       	ldi	r27, 0x00	; 0
    2baa:	22 e1       	ldi	r18, 0x12	; 18
    2bac:	33 e1       	ldi	r19, 0x13	; 19
    2bae:	40 e0       	ldi	r20, 0x00	; 0
    2bb0:	50 e0       	ldi	r21, 0x00	; 0
    2bb2:	bc 01       	movw	r22, r24
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__mulsi3>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	20 e1       	ldi	r18, 0x10	; 16
    2bc0:	37 e2       	ldi	r19, 0x27	; 39
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	50 e0       	ldi	r21, 0x00	; 0
    2bc6:	bc 01       	movw	r22, r24
    2bc8:	cd 01       	movw	r24, r26
    2bca:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__udivmodsi4>
    2bce:	da 01       	movw	r26, r20
    2bd0:	c9 01       	movw	r24, r18
    2bd2:	98 8b       	std	Y+16, r25	; 0x10
    2bd4:	8f 87       	std	Y+15, r24	; 0x0f


//		AnalogReadingValue= ADC_analogRead(ADC_Channel_0)/10000ul;

		LCD_enuIntegerToString(AnalogReadingValue, 10);
    2bd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd8:	98 89       	ldd	r25, Y+16	; 0x10
    2bda:	cc 01       	movw	r24, r24
    2bdc:	a0 e0       	ldi	r26, 0x00	; 0
    2bde:	b0 e0       	ldi	r27, 0x00	; 0
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	4a e0       	ldi	r20, 0x0A	; 10
    2be6:	0e 94 2a 14 	call	0x2854	; 0x2854 <LCD_enuIntegerToString>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	aa e7       	ldi	r26, 0x7A	; 122
    2bf0:	b4 e4       	ldi	r27, 0x44	; 68
    2bf2:	8b 87       	std	Y+11, r24	; 0x0b
    2bf4:	9c 87       	std	Y+12, r25	; 0x0c
    2bf6:	ad 87       	std	Y+13, r26	; 0x0d
    2bf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a e7       	ldi	r20, 0x7A	; 122
    2c08:	55 e4       	ldi	r21, 0x45	; 69
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	8f 83       	std	Y+7, r24	; 0x07
    2c14:	98 87       	std	Y+8, r25	; 0x08
    2c16:	a9 87       	std	Y+9, r26	; 0x09
    2c18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1c:	78 85       	ldd	r23, Y+8	; 0x08
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <main+0xe6>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <main+0x164>
	else if (__tmp > 65535)
    2c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3e:	78 85       	ldd	r23, Y+8	; 0x08
    2c40:	89 85       	ldd	r24, Y+9	; 0x09
    2c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <main+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <main+0x146>
    2c7e:	80 e9       	ldi	r24, 0x90	; 144
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	9c 83       	std	Y+4, r25	; 0x04
    2c84:	8b 83       	std	Y+3, r24	; 0x03
    2c86:	8b 81       	ldd	r24, Y+3	; 0x03
    2c88:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <main+0x134>
    2c8e:	9c 83       	std	Y+4, r25	; 0x04
    2c90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	8d 81       	ldd	r24, Y+5	; 0x05
    2c94:	9e 81       	ldd	r25, Y+6	; 0x06
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <main+0x128>
    2ca4:	7a cf       	rjmp	.-268    	; 0x2b9a <main+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca8:	78 85       	ldd	r23, Y+8	; 0x08
    2caa:	89 85       	ldd	r24, Y+9	; 0x09
    2cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
    2cba:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbe:	9a 83       	std	Y+2, r25	; 0x02
    2cc0:	89 83       	std	Y+1, r24	; 0x01
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <main+0x170>
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	65 cf       	rjmp	.-310    	; 0x2b9a <main+0x44>

00002cd0 <__mulsi3>:
    2cd0:	62 9f       	mul	r22, r18
    2cd2:	d0 01       	movw	r26, r0
    2cd4:	73 9f       	mul	r23, r19
    2cd6:	f0 01       	movw	r30, r0
    2cd8:	82 9f       	mul	r24, r18
    2cda:	e0 0d       	add	r30, r0
    2cdc:	f1 1d       	adc	r31, r1
    2cde:	64 9f       	mul	r22, r20
    2ce0:	e0 0d       	add	r30, r0
    2ce2:	f1 1d       	adc	r31, r1
    2ce4:	92 9f       	mul	r25, r18
    2ce6:	f0 0d       	add	r31, r0
    2ce8:	83 9f       	mul	r24, r19
    2cea:	f0 0d       	add	r31, r0
    2cec:	74 9f       	mul	r23, r20
    2cee:	f0 0d       	add	r31, r0
    2cf0:	65 9f       	mul	r22, r21
    2cf2:	f0 0d       	add	r31, r0
    2cf4:	99 27       	eor	r25, r25
    2cf6:	72 9f       	mul	r23, r18
    2cf8:	b0 0d       	add	r27, r0
    2cfa:	e1 1d       	adc	r30, r1
    2cfc:	f9 1f       	adc	r31, r25
    2cfe:	63 9f       	mul	r22, r19
    2d00:	b0 0d       	add	r27, r0
    2d02:	e1 1d       	adc	r30, r1
    2d04:	f9 1f       	adc	r31, r25
    2d06:	bd 01       	movw	r22, r26
    2d08:	cf 01       	movw	r24, r30
    2d0a:	11 24       	eor	r1, r1
    2d0c:	08 95       	ret

00002d0e <__udivmodsi4>:
    2d0e:	a1 e2       	ldi	r26, 0x21	; 33
    2d10:	1a 2e       	mov	r1, r26
    2d12:	aa 1b       	sub	r26, r26
    2d14:	bb 1b       	sub	r27, r27
    2d16:	fd 01       	movw	r30, r26
    2d18:	0d c0       	rjmp	.+26     	; 0x2d34 <__udivmodsi4_ep>

00002d1a <__udivmodsi4_loop>:
    2d1a:	aa 1f       	adc	r26, r26
    2d1c:	bb 1f       	adc	r27, r27
    2d1e:	ee 1f       	adc	r30, r30
    2d20:	ff 1f       	adc	r31, r31
    2d22:	a2 17       	cp	r26, r18
    2d24:	b3 07       	cpc	r27, r19
    2d26:	e4 07       	cpc	r30, r20
    2d28:	f5 07       	cpc	r31, r21
    2d2a:	20 f0       	brcs	.+8      	; 0x2d34 <__udivmodsi4_ep>
    2d2c:	a2 1b       	sub	r26, r18
    2d2e:	b3 0b       	sbc	r27, r19
    2d30:	e4 0b       	sbc	r30, r20
    2d32:	f5 0b       	sbc	r31, r21

00002d34 <__udivmodsi4_ep>:
    2d34:	66 1f       	adc	r22, r22
    2d36:	77 1f       	adc	r23, r23
    2d38:	88 1f       	adc	r24, r24
    2d3a:	99 1f       	adc	r25, r25
    2d3c:	1a 94       	dec	r1
    2d3e:	69 f7       	brne	.-38     	; 0x2d1a <__udivmodsi4_loop>
    2d40:	60 95       	com	r22
    2d42:	70 95       	com	r23
    2d44:	80 95       	com	r24
    2d46:	90 95       	com	r25
    2d48:	9b 01       	movw	r18, r22
    2d4a:	ac 01       	movw	r20, r24
    2d4c:	bd 01       	movw	r22, r26
    2d4e:	cf 01       	movw	r24, r30
    2d50:	08 95       	ret

00002d52 <__divmodsi4>:
    2d52:	97 fb       	bst	r25, 7
    2d54:	09 2e       	mov	r0, r25
    2d56:	05 26       	eor	r0, r21
    2d58:	0e d0       	rcall	.+28     	; 0x2d76 <__divmodsi4_neg1>
    2d5a:	57 fd       	sbrc	r21, 7
    2d5c:	04 d0       	rcall	.+8      	; 0x2d66 <__divmodsi4_neg2>
    2d5e:	d7 df       	rcall	.-82     	; 0x2d0e <__udivmodsi4>
    2d60:	0a d0       	rcall	.+20     	; 0x2d76 <__divmodsi4_neg1>
    2d62:	00 1c       	adc	r0, r0
    2d64:	38 f4       	brcc	.+14     	; 0x2d74 <__divmodsi4_exit>

00002d66 <__divmodsi4_neg2>:
    2d66:	50 95       	com	r21
    2d68:	40 95       	com	r20
    2d6a:	30 95       	com	r19
    2d6c:	21 95       	neg	r18
    2d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d70:	4f 4f       	sbci	r20, 0xFF	; 255
    2d72:	5f 4f       	sbci	r21, 0xFF	; 255

00002d74 <__divmodsi4_exit>:
    2d74:	08 95       	ret

00002d76 <__divmodsi4_neg1>:
    2d76:	f6 f7       	brtc	.-4      	; 0x2d74 <__divmodsi4_exit>
    2d78:	90 95       	com	r25
    2d7a:	80 95       	com	r24
    2d7c:	70 95       	com	r23
    2d7e:	61 95       	neg	r22
    2d80:	7f 4f       	sbci	r23, 0xFF	; 255
    2d82:	8f 4f       	sbci	r24, 0xFF	; 255
    2d84:	9f 4f       	sbci	r25, 0xFF	; 255
    2d86:	08 95       	ret

00002d88 <__prologue_saves__>:
    2d88:	2f 92       	push	r2
    2d8a:	3f 92       	push	r3
    2d8c:	4f 92       	push	r4
    2d8e:	5f 92       	push	r5
    2d90:	6f 92       	push	r6
    2d92:	7f 92       	push	r7
    2d94:	8f 92       	push	r8
    2d96:	9f 92       	push	r9
    2d98:	af 92       	push	r10
    2d9a:	bf 92       	push	r11
    2d9c:	cf 92       	push	r12
    2d9e:	df 92       	push	r13
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	ca 1b       	sub	r28, r26
    2db2:	db 0b       	sbc	r29, r27
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	09 94       	ijmp

00002dc0 <__epilogue_restores__>:
    2dc0:	2a 88       	ldd	r2, Y+18	; 0x12
    2dc2:	39 88       	ldd	r3, Y+17	; 0x11
    2dc4:	48 88       	ldd	r4, Y+16	; 0x10
    2dc6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dc8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dca:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dcc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dce:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dd0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dd2:	b9 84       	ldd	r11, Y+9	; 0x09
    2dd4:	c8 84       	ldd	r12, Y+8	; 0x08
    2dd6:	df 80       	ldd	r13, Y+7	; 0x07
    2dd8:	ee 80       	ldd	r14, Y+6	; 0x06
    2dda:	fd 80       	ldd	r15, Y+5	; 0x05
    2ddc:	0c 81       	ldd	r16, Y+4	; 0x04
    2dde:	1b 81       	ldd	r17, Y+3	; 0x03
    2de0:	aa 81       	ldd	r26, Y+2	; 0x02
    2de2:	b9 81       	ldd	r27, Y+1	; 0x01
    2de4:	ce 0f       	add	r28, r30
    2de6:	d1 1d       	adc	r29, r1
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	ed 01       	movw	r28, r26
    2df4:	08 95       	ret

00002df6 <_exit>:
    2df6:	f8 94       	cli

00002df8 <__stop_program>:
    2df8:	ff cf       	rjmp	.-2      	; 0x2df8 <__stop_program>
