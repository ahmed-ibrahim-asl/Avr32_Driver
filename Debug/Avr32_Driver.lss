
Avr32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003410  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00003410  000034a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080007e  0080007e  000034c2  2**0
                  ALLOC
  3 .stab         00004728  00000000  00000000  000034c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002489  00000000  00000000  00007bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a075  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a1b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a325  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bf6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ce59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000dc08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dd68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000dff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e7c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__vector_1>
       8:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__vector_2>
       c:	0c 94 05 0d 	jmp	0x1a0a	; 0x1a0a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 19 	call	0x32fc	; 0x32fc <main>
      8a:	0c 94 06 1a 	jmp	0x340c	; 0x340c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 19 	jmp	0x339e	; 0x339e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_vidInit>:
#include "UART_priv.h"
#include "UART_config.h"
/************************************************************************************/


void UART_vidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)

		CLR_BIT(UCSRC_REG, UCSRB_UMSEL);
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e0 e4       	ldi	r30, 0x40	; 64
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24

		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)
			CLR_BIT(UCSRA_REG, UCSRA_U2X);
     b5c:	ab e2       	ldi	r26, 0x2B	; 43
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	eb e2       	ldi	r30, 0x2B	; 43
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8d 7f       	andi	r24, 0xFD	; 253
     b68:	8c 93       	st	X, r24
			SET_BIT(UCSRC_REG, UCSRB_UMSEL);
	#endif


	#if(UART_MPCM_OPERATION == UART_SINGLE_MODE)
			CLR_BIT(UCSRA_REG, UCSRA_MPCM);
     b6a:	ab e2       	ldi	r26, 0x2B	; 43
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb e2       	ldi	r30, 0x2B	; 43
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	8c 93       	st	X, r24
			SET_BIT(UCSRA_REG, UCSRA_MPCM);
	#endif


	// Receiver Enable
	SET_BIT(UCSRA_REG, UCSRB_RXEN);
     b78:	ab e2       	ldi	r26, 0x2B	; 43
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	eb e2       	ldi	r30, 0x2B	; 43
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	8c 93       	st	X, r24

	// Transmitter Enable
	SET_BIT(UCSRA_REG, UCSRB_TXEN);
     b86:	ab e2       	ldi	r26, 0x2B	; 43
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	eb e2       	ldi	r30, 0x2B	; 43
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 60       	ori	r24, 0x08	; 8
     b92:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
		SET_BIT(UCSRB_REG, UCSRB_UCSZ2);

	#elif(UART_DATA_BIT == UART_DATA_8bit)

		SET_BIT(UCSRC_REG, UCSRC_UCSZ0);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     bb0:	aa e2       	ldi	r26, 0x2A	; 42
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e2       	ldi	r30, 0x2A	; 42
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	8c 93       	st	X, r24


	/********************* Setting No Stop Bits *********************/
	#if(UART_STOP_BIT == UART_STOP_1bit)

		CLR_BIT(UCSRA_REG, UCSRC_USBS);
     bbe:	ab e2       	ldi	r26, 0x2B	; 43
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	87 7f       	andi	r24, 0xF7	; 247
     bca:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSRC_UPM0);
		SET_BIT(UCSRC_REG, UCSRC_UPM1);

	#elif(UART_PARITY_MODE == UART_PARITY_ODD)

		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     bcc:	a0 e4       	ldi	r26, 0x40	; 64
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e0 e4       	ldi	r30, 0x40	; 64
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 61       	ori	r24, 0x10	; 16
     bd8:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 62       	ori	r24, 0x20	; 32
     be6:	8c 93       	st	X, r24

	#endif
	/**************************************************************/

	/********************** Setting  Baud Rate **********************/
	UART_setBaudRate(9600);
     be8:	80 e8       	ldi	r24, 0x80	; 128
     bea:	95 e2       	ldi	r25, 0x25	; 37
     bec:	0e 94 99 06 	call	0xd32	; 0xd32 <UART_setBaudRate>
	/***************************************************************/


}
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <UART_enuSendChar>:


ErrorStatus_t UART_enuSendChar(uint8_t copy_u8Data){
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <UART_enuSendChar+0x6>
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     c02:	19 82       	std	Y+1, r1	; 0x01


	// Wait until transmit buffer is empty
	while(GET_BIT(UCSRA_REG, UCSRA_UDE) == 0);
     c04:	eb e2       	ldi	r30, 0x2B	; 43
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	82 95       	swap	r24
     c0c:	86 95       	lsr	r24
     c0e:	87 70       	andi	r24, 0x07	; 7
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	81 70       	andi	r24, 0x01	; 1
     c16:	90 70       	andi	r25, 0x00	; 0
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	a1 f3       	breq	.-24     	; 0xc04 <UART_enuSendChar+0xe>

	UDR_REG = copy_u8Data;
     c1c:	ec e2       	ldi	r30, 0x2C	; 44
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	80 83       	st	Z, r24


	Local_enuErrrorState = ERROR_STATUS_OK;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <UART_enuSendString>:


ErrorStatus_t UART_enuSendString(uint8_t* copy_pu8Data){
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	00 d0       	rcall	.+0      	; 0xc3a <UART_enuSendString+0x6>
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <UART_enuSendString+0x8>
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	9b 83       	std	Y+3, r25	; 0x03
     c42:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     c44:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	9b 81       	ldd	r25, Y+3	; 0x03
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	69 f4       	brne	.+26     	; 0xc68 <UART_enuSendString+0x34>
		return Local_enuErrrorState;
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	8c 83       	std	Y+4, r24	; 0x04
     c52:	16 c0       	rjmp	.+44     	; 0xc80 <UART_enuSendString+0x4c>
	}

	else{

		while(*copy_pu8Data != '\0'){
			UART_enuSendChar(*copy_pu8Data);
     c54:	ea 81       	ldd	r30, Y+2	; 0x02
     c56:	fb 81       	ldd	r31, Y+3	; 0x03
     c58:	80 81       	ld	r24, Z
     c5a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <UART_enuSendChar>
			copy_pu8Data++;
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	9b 81       	ldd	r25, Y+3	; 0x03
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	9b 83       	std	Y+3, r25	; 0x03
     c66:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
	}

	else{

		while(*copy_pu8Data != '\0'){
     c68:	ea 81       	ldd	r30, Y+2	; 0x02
     c6a:	fb 81       	ldd	r31, Y+3	; 0x03
     c6c:	80 81       	ld	r24, Z
     c6e:	88 23       	and	r24, r24
     c70:	89 f7       	brne	.-30     	; 0xc54 <UART_enuSendString+0x20>
			UART_enuSendChar(*copy_pu8Data);
			copy_pu8Data++;
		}
		UART_enuSendChar('\0');
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <UART_enuSendChar>
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	8c 83       	std	Y+4, r24	; 0x04
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <UART_enuRecieveChar>:

ErrorStatus_t UART_enuRecieveChar(uint8_t* copy_pu8Data){
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <UART_enuRecieveChar+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <UART_enuRecieveChar+0x8>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     ca0:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	9b 81       	ldd	r25, Y+3	; 0x03
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <UART_enuRecieveChar+0x20>
		return Local_enuErrrorState;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	8c 83       	std	Y+4, r24	; 0x04
     cae:	0f c0       	rjmp	.+30     	; 0xcce <UART_enuRecieveChar+0x3e>
	}

	else{

		// Receive Complete
		while(GET_BIT(UCSRA_REG, UCSRA_RXC) == 0);
     cb0:	eb e2       	ldi	r30, 0x2B	; 43
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	88 23       	and	r24, r24
     cb8:	dc f7       	brge	.-10     	; 0xcb0 <UART_enuRecieveChar+0x20>

		*copy_pu8Data = UDR_REG;
     cba:	ec e2       	ldi	r30, 0x2C	; 44
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	ea 81       	ldd	r30, Y+2	; 0x02
     cc2:	fb 81       	ldd	r31, Y+3	; 0x03
     cc4:	80 83       	st	Z, r24
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	8c 83       	std	Y+4, r24	; 0x04
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <UART_enuRecieveString>:



ErrorStatus_t UART_enuRecieveString(uint8_t* copy_pu8Data){
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <UART_enuRecieveString+0x6>
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <UART_enuRecieveString+0x8>
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	9b 83       	std	Y+3, r25	; 0x03
     cec:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     cee:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	61 f4       	brne	.+24     	; 0xd10 <UART_enuRecieveString+0x32>
		return Local_enuErrrorState;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	8c 83       	std	Y+4, r24	; 0x04
     cfc:	12 c0       	rjmp	.+36     	; 0xd22 <UART_enuRecieveString+0x44>
	}

	else{
		while(*copy_pu8Data != '\0'){
			UART_enuRecieveChar(copy_pu8Data);
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_enuRecieveChar>
			copy_pu8Data+=1;
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	9b 81       	ldd	r25, Y+3	; 0x03
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	9b 83       	std	Y+3, r25	; 0x03
     d0e:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_pu8Data == NULL){
		return Local_enuErrrorState;
	}

	else{
		while(*copy_pu8Data != '\0'){
     d10:	ea 81       	ldd	r30, Y+2	; 0x02
     d12:	fb 81       	ldd	r31, Y+3	; 0x03
     d14:	80 81       	ld	r24, Z
     d16:	88 23       	and	r24, r24
     d18:	91 f7       	brne	.-28     	; 0xcfe <UART_enuRecieveString+0x20>
			copy_pu8Data+=1;
		}
	}


	Local_enuErrrorState = ERROR_STATUS_OK;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	8c 83       	std	Y+4, r24	; 0x04
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <UART_setBaudRate>:


//!
static void UART_setBaudRate(uint16 copy_u8UART_BaudRate){
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <UART_setBaudRate+0x6>
     d38:	0f 92       	push	r0
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	9b 83       	std	Y+3, r25	; 0x03
     d40:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t copy_u8Temp = 0;
     d42:	19 82       	std	Y+1, r1	; 0x01

	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)
		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)

		copy_u8Temp = ((UART_MC_OSC_FREQ/(uint8_t)(16*copy_u8UART_BaudRate))-1);
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	82 95       	swap	r24
     d4a:	92 95       	swap	r25
     d4c:	90 7f       	andi	r25, 0xF0	; 240
     d4e:	98 27       	eor	r25, r24
     d50:	80 7f       	andi	r24, 0xF0	; 240
     d52:	98 27       	eor	r25, r24
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	94 e2       	ldi	r25, 0x24	; 36
     d60:	a4 ef       	ldi	r26, 0xF4	; 244
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
     d6c:	da 01       	movw	r26, r20
     d6e:	c9 01       	movw	r24, r18
     d70:	81 50       	subi	r24, 0x01	; 1
     d72:	89 83       	std	Y+1, r24	; 0x01

		UBRRL_REG |= copy_u8Temp;
     d74:	aa e2       	ldi	r26, 0x2A	; 42
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ea e2       	ldi	r30, 0x2A	; 42
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	90 81       	ld	r25, Z
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	89 2b       	or	r24, r25
     d82:	8c 93       	st	X, r24
		UBRRH_REG |= (copy_u8Temp>>8);
     d84:	a0 e4       	ldi	r26, 0x40	; 64
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e0 e4       	ldi	r30, 0x40	; 64
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	28 2f       	mov	r18, r24
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	89 2f       	mov	r24, r25
     d98:	99 0f       	add	r25, r25
     d9a:	99 0b       	sbc	r25, r25
     d9c:	82 2b       	or	r24, r18
     d9e:	8c 93       	st	X, r24
	#elif(UART_SYNC_ASYNC_SELECT == UART_SYNCMODE)
		copy_u8Temp = ((UART_MC_OSC_FREQ/(uint8_t)(2*copy_u8UART_BaudRate))-1);
		UBRRL_REG |= copy_u8Temp;
		UBRRH_REG |= (copy_u8Temp>>8);
	#endif
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <TWI_enuInit>:

#include <util/delay.h>

/**************************************************************************/

void TWI_enuInit(void){
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62


	#if(TWI_MODE_M_or_S == TWI_MASTER_MODE)
		// Set Value for Bit Rate            (should only be when we working with master)
		TWBR_REG = TWBR_VALUE;
     db4:	e0 e2       	ldi	r30, 0x20	; 32
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	8c e0       	ldi	r24, 0x0C	; 12
     dba:	80 83       	st	Z, r24
	#endif


	// Enable TWI Interrupt
	GIE_enuEnable();
     dbc:	0e 94 53 09 	call	0x12a6	; 0x12a6 <GIE_enuEnable>
	SET_BIT(TWCR_REG, TWCR_TWIE);
     dc0:	a6 e5       	ldi	r26, 0x56	; 86
     dc2:	b0 e0       	ldi	r27, 0x00	; 0
     dc4:	e6 e5       	ldi	r30, 0x56	; 86
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	81 60       	ori	r24, 0x01	; 1
     dcc:	8c 93       	st	X, r24


	// Enable TWI Peripheral
	SET_BIT(TWCR_REG, TWCR_TWEN);
     dce:	a6 e5       	ldi	r26, 0x56	; 86
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e6 e5       	ldi	r30, 0x56	; 86
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	84 60       	ori	r24, 0x04	; 4
     dda:	8c 93       	st	X, r24


	#if(TWI_ACK_CONFIG == TWI_ACK_ENABLE)
		SET_BIT(TWCR_REG, TWCR_TWEA);
     ddc:	a6 e5       	ldi	r26, 0x56	; 86
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e6 e5       	ldi	r30, 0x56	; 86
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	80 64       	ori	r24, 0x40	; 64
     de8:	8c 93       	st	X, r24
	#endif



	#if(TWI_GCE_CONFIG == TWI_GCE_ENABLE)
		SET_BIT(TWAR_REG, TWAR_TWGCE);
     dea:	a2 e2       	ldi	r26, 0x22	; 34
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e2 e2       	ldi	r30, 0x22	; 34
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	81 60       	ori	r24, 0x01	; 1
     df6:	8c 93       	st	X, r24

	#endif


   // Set Address for MC
   TWAR_REG = (TWAR_REG&0x01)  | TWI_SET_ADDR;
     df8:	a2 e2       	ldi	r26, 0x22	; 34
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e2 e2       	ldi	r30, 0x22	; 34
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	81 70       	andi	r24, 0x01	; 1
     e04:	88 60       	ori	r24, 0x08	; 8
     e06:	8c 93       	st	X, r24
}
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <TWI_enuStartCondition>:



TWIStatus_t TWI_enuStartCondition(void){
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	0f 92       	push	r0
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
     e18:	19 82       	std	Y+1, r1	; 0x01

	// Start condition
	SET_BIT(TWCR_REG, TWCR_TWSTA);
     e1a:	a6 e5       	ldi	r26, 0x56	; 86
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e6 e5       	ldi	r30, 0x56	; 86
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 62       	ori	r24, 0x20	; 32
     e26:	8c 93       	st	X, r24


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
     e28:	a6 e5       	ldi	r26, 0x56	; 86
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e6 e5       	ldi	r30, 0x56	; 86
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	80 68       	ori	r24, 0x80	; 128
     e34:	8c 93       	st	X, r24


	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
     e36:	e6 e5       	ldi	r30, 0x56	; 86
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	88 23       	and	r24, r24
     e3e:	dc f7       	brge	.-10     	; 0xe36 <TWI_enuStartCondition+0x28>
	 * 1  1  1  1  {1 0 0   0}
	 *
	 * 0xF8
	 * */

	if( (TWSR_REG &0xF8) == 0x08){
     e40:	e1 e2       	ldi	r30, 0x21	; 33
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	88 7f       	andi	r24, 0xF8	; 248
     e4c:	90 70       	andi	r25, 0x00	; 0
     e4e:	88 30       	cpi	r24, 0x08	; 8
     e50:	91 05       	cpc	r25, r1
     e52:	11 f4       	brne	.+4      	; 0xe58 <TWI_enuStartCondition+0x4a>
		Local_enu_ErrorState = TWI_STATUS_OK;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
     e58:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <TWI_enuRepeatStartCondition>:

TWIStatus_t TWI_enuRepeatStartCondition(void){
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
     e6c:	19 82       	std	Y+1, r1	; 0x01

	// Start condition
	SET_BIT(TWCR_REG, TWCR_TWSTA);
     e6e:	a6 e5       	ldi	r26, 0x56	; 86
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e5       	ldi	r30, 0x56	; 86
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	80 62       	ori	r24, 0x20	; 32
     e7a:	8c 93       	st	X, r24


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
     e7c:	a6 e5       	ldi	r26, 0x56	; 86
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e5       	ldi	r30, 0x56	; 86
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 68       	ori	r24, 0x80	; 128
     e88:	8c 93       	st	X, r24


	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
     e8a:	e6 e5       	ldi	r30, 0x56	; 86
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	88 23       	and	r24, r24
     e92:	dc f7       	brge	.-10     	; 0xe8a <TWI_enuRepeatStartCondition+0x28>
	 *
	 * 0xF8
	 * */


	if( (TWSR_REG &0xF8) == TWI_RSTART_SUCCESS_CODE){
     e94:	e1 e2       	ldi	r30, 0x21	; 33
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	88 7f       	andi	r24, 0xF8	; 248
     ea0:	90 70       	andi	r25, 0x00	; 0
     ea2:	80 31       	cpi	r24, 0x10	; 16
     ea4:	91 05       	cpc	r25, r1
     ea6:	11 f4       	brne	.+4      	; 0xeac <TWI_enuRepeatStartCondition+0x4a>
		Local_enu_ErrorState = TWI_STATUS_OK;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enu_ErrorState;
     eac:	89 81       	ldd	r24, Y+1	; 0x01
}
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <TWI_enuStopCondition>:


//! since there no status code why not doing macro like function
// IDEAS for feature development
TWIStatus_t TWI_enuStopCondition(void){
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
     ec0:	19 82       	std	Y+1, r1	; 0x01


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
     ec2:	a6 e5       	ldi	r26, 0x56	; 86
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e6 e5       	ldi	r30, 0x56	; 86
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	80 68       	ori	r24, 0x80	; 128
     ece:	8c 93       	st	X, r24

	// Stop Condition
	SET_BIT(TWCR_REG, TWCR_TWSTO);
     ed0:	a6 e5       	ldi	r26, 0x56	; 86
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e6 e5       	ldi	r30, 0x56	; 86
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 61       	ori	r24, 0x10	; 16
     edc:	8c 93       	st	X, r24



	Local_enu_ErrorState = TWI_STATUS_OK;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <TWI_enuSetSlaveOperation>:


TWIStatus_t TWI_enuSetSlaveOperation(
		uint8_t copy_u8SlaveAddress, uint8_t copy_u8Operation){
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <TWI_enuSetSlaveOperation+0x6>
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	8a 83       	std	Y+2, r24	; 0x02
     efa:	6b 83       	std	Y+3, r22	; 0x03

	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
     efc:	19 82       	std	Y+1, r1	; 0x01


	TWDR_REG = (copy_u8SlaveAddress<<1) | (copy_u8Operation);
     efe:	e3 e2       	ldi	r30, 0x23	; 35
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	98 2f       	mov	r25, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	89 2b       	or	r24, r25
     f12:	80 83       	st	Z, r24

	// Since we should have already send START condition
	// we have to clear TWSTA
	CLR_BIT(TWCR_REG, TWCR_TWSTA);
     f14:	a6 e5       	ldi	r26, 0x56	; 86
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e6 e5       	ldi	r30, 0x56	; 86
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8f 7d       	andi	r24, 0xDF	; 223
     f20:	8c 93       	st	X, r24


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
     f22:	a6 e5       	ldi	r26, 0x56	; 86
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e6 e5       	ldi	r30, 0x56	; 86
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	80 68       	ori	r24, 0x80	; 128
     f2e:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
     f30:	e6 e5       	ldi	r30, 0x56	; 86
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	88 23       	and	r24, r24
     f38:	dc f7       	brge	.-10     	; 0xf30 <TWI_enuSetSlaveOperation+0x44>


    // Check for operation success based on requested operation
    if(copy_u8Operation == TWI_SLA_WR_ACK_TSUCCESS_CODE ){
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	88 31       	cpi	r24, 0x18	; 24
     f3e:	19 f4       	brne	.+6      	; 0xf46 <TWI_enuSetSlaveOperation+0x5a>
        Local_enu_ErrorState = TWI_STATUS_OK;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	05 c0       	rjmp	.+10     	; 0xf50 <TWI_enuSetSlaveOperation+0x64>


    } else if(copy_u8Operation == TWI_SLA_RD_ACK_TSUCCESS_CODE ){
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	80 34       	cpi	r24, 0x40	; 64
     f4a:	11 f4       	brne	.+4      	; 0xf50 <TWI_enuSetSlaveOperation+0x64>
        Local_enu_ErrorState = TWI_STATUS_OK;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	89 83       	std	Y+1, r24	; 0x01

    }


	return Local_enu_ErrorState;
     f50:	89 81       	ldd	r24, Y+1	; 0x01
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	cf 91       	pop	r28
     f5a:	df 91       	pop	r29
     f5c:	08 95       	ret

00000f5e <TWI_enuWriteData>:


TWIStatus_t	TWI_enuWriteData(uint8_t copy_u8Data){
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	00 d0       	rcall	.+0      	; 0xf64 <TWI_enuWriteData+0x6>
     f64:	0f 92       	push	r0
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
     f6c:	19 82       	std	Y+1, r1	; 0x01

	TWDR_REG = copy_u8Data;
     f6e:	e3 e2       	ldi	r30, 0x23	; 35
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	80 83       	st	Z, r24

	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
     f76:	a6 e5       	ldi	r26, 0x56	; 86
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e6 e5       	ldi	r30, 0x56	; 86
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 68       	ori	r24, 0x80	; 128
     f82:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
     f84:	e6 e5       	ldi	r30, 0x56	; 86
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	88 23       	and	r24, r24
     f8c:	dc f7       	brge	.-10     	; 0xf84 <TWI_enuWriteData+0x26>



	// 0x28 -(master) data byte has been transmitted ack has been received
	// 0xB8	- (slave) data byte has been transmitted ack has been received
	if( ((TWSR_REG & 0xF8) != TWI_M_TSUCCESS_CODE_withACK) || ((TWSR_REG & 0xF8) != TWI_S_TSUCCESS_CODE_withACK) ){
     f8e:	e1 e2       	ldi	r30, 0x21	; 33
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	88 7f       	andi	r24, 0xF8	; 248
     f9a:	90 70       	andi	r25, 0x00	; 0
     f9c:	88 32       	cpi	r24, 0x28	; 40
     f9e:	91 05       	cpc	r25, r1
     fa0:	51 f4       	brne	.+20     	; 0xfb6 <TWI_enuWriteData+0x58>
     fa2:	e1 e2       	ldi	r30, 0x21	; 33
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	80 81       	ld	r24, Z
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	88 7f       	andi	r24, 0xF8	; 248
     fae:	90 70       	andi	r25, 0x00	; 0
     fb0:	88 3b       	cpi	r24, 0xB8	; 184
     fb2:	91 05       	cpc	r25, r1
     fb4:	19 f0       	breq	.+6      	; 0xfbc <TWI_enuWriteData+0x5e>
		return Local_enu_ErrorState;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	8b 83       	std	Y+3, r24	; 0x03
     fba:	1b c0       	rjmp	.+54     	; 0xff2 <TWI_enuWriteData+0x94>
	}


	if( (TWSR_REG & 0xF8) == TWI_M_TSUCCESS_CODE_withACK ){
     fbc:	e1 e2       	ldi	r30, 0x21	; 33
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	88 7f       	andi	r24, 0xF8	; 248
     fc8:	90 70       	andi	r25, 0x00	; 0
     fca:	88 32       	cpi	r24, 0x28	; 40
     fcc:	91 05       	cpc	r25, r1
     fce:	19 f4       	brne	.+6      	; 0xfd6 <TWI_enuWriteData+0x78>
		Local_enu_ErrorState = TWI_STATUS_OK;
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	0c c0       	rjmp	.+24     	; 0xfee <TWI_enuWriteData+0x90>
	}

	else if((TWSR_REG & 0xF8) == TWI_S_TSUCCESS_CODE_withACK){
     fd6:	e1 e2       	ldi	r30, 0x21	; 33
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	88 7f       	andi	r24, 0xF8	; 248
     fe2:	90 70       	andi	r25, 0x00	; 0
     fe4:	88 3b       	cpi	r24, 0xB8	; 184
     fe6:	91 05       	cpc	r25, r1
     fe8:	11 f4       	brne	.+4      	; 0xfee <TWI_enuWriteData+0x90>
		Local_enu_ErrorState = TWI_STATUS_OK;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <TWI_enuReadData>:



TWIStatus_t	TWI_enuReadData(uint8_t  *copy_pu8Data){
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	00 d0       	rcall	.+0      	; 0x1006 <TWI_enuReadData+0x6>
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	9b 83       	std	Y+3, r25	; 0x03
    100e:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1010:	19 82       	std	Y+1, r1	; 0x01

	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    1012:	a6 e5       	ldi	r26, 0x56	; 86
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e6 e5       	ldi	r30, 0x56	; 86
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	80 68       	ori	r24, 0x80	; 128
    101e:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    1020:	e6 e5       	ldi	r30, 0x56	; 86
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	88 23       	and	r24, r24
    1028:	dc f7       	brge	.-10     	; 0x1020 <TWI_enuReadData+0x20>
	// 0x88 - (slave)  data has been received not ack has been returned

	#if(TWI_ACK_CONFIG == TWI_ACK_ENABLE)

		// Master Receive
		if( ((TWSR_REG & 0xF8) == TWI_M_RSUCCESS_CODE_withAck) ){
    102a:	e1 e2       	ldi	r30, 0x21	; 33
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	88 7f       	andi	r24, 0xF8	; 248
    1036:	90 70       	andi	r25, 0x00	; 0
    1038:	80 35       	cpi	r24, 0x50	; 80
    103a:	91 05       	cpc	r25, r1
    103c:	19 f4       	brne	.+6      	; 0x1044 <TWI_enuReadData+0x44>
			Local_enu_ErrorState = TWI_STATUS_OK;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	0c c0       	rjmp	.+24     	; 0x105c <TWI_enuReadData+0x5c>

		}

		// Slave Receive
		else if(((TWSR_REG & 0xF8) == TWI_S_RSUCCESS_CODE_withACK)){
    1044:	e1 e2       	ldi	r30, 0x21	; 33
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	88 7f       	andi	r24, 0xF8	; 248
    1050:	90 70       	andi	r25, 0x00	; 0
    1052:	80 38       	cpi	r24, 0x80	; 128
    1054:	91 05       	cpc	r25, r1
    1056:	11 f4       	brne	.+4      	; 0x105c <TWI_enuReadData+0x5c>
			Local_enu_ErrorState = TWI_STATUS_OK;
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	89 83       	std	Y+1, r24	; 0x01
			Local_enu_ErrorState = TWI_STATUS_OK;
		}
	#endif

	// Read data from TWDR Register
	*copy_pu8Data = TWDR_REG;
    105c:	e3 e2       	ldi	r30, 0x23	; 35
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	ea 81       	ldd	r30, Y+2	; 0x02
    1064:	fb 81       	ldd	r31, Y+3	; 0x03
    1066:	80 83       	st	Z, r24

	return Local_enu_ErrorState;
    1068:	89 81       	ldd	r24, Y+1	; 0x01
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <TWI_enuCheckMyAddress>:


ErrorStatus_t TWI_enuCheckMyAddress(void){
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	0f 92       	push	r0
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1080:	19 82       	std	Y+1, r1	; 0x01


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    1082:	a6 e5       	ldi	r26, 0x56	; 86
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e6 e5       	ldi	r30, 0x56	; 86
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 68       	ori	r24, 0x80	; 128
    108e:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    1090:	e6 e5       	ldi	r30, 0x56	; 86
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	88 23       	and	r24, r24
    1098:	dc f7       	brge	.-10     	; 0x1090 <TWI_enuCheckMyAddress+0x1a>


	// 0x60 - SLA+W has been received, ACK has been returned
	// 0xA8 - SLA+R has been received, ACK has been returned

	if((TWSR_REG & 0xF8) == TWI_SLA_WR_ACK_RSUCCESS_CODE){
    109a:	e1 e2       	ldi	r30, 0x21	; 33
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	88 7f       	andi	r24, 0xF8	; 248
    10a6:	90 70       	andi	r25, 0x00	; 0
    10a8:	80 36       	cpi	r24, 0x60	; 96
    10aa:	91 05       	cpc	r25, r1
    10ac:	19 f4       	brne	.+6      	; 0x10b4 <TWI_enuCheckMyAddress+0x3e>
		Local_enu_ErrorState = TWI_STATUS_OK;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	0c c0       	rjmp	.+24     	; 0x10cc <TWI_enuCheckMyAddress+0x56>
	}


	else if((TWSR_REG & 0xF8) == TWI_SLA_RD_ACK_RSUCCESS_CODE){
    10b4:	e1 e2       	ldi	r30, 0x21	; 33
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	88 7f       	andi	r24, 0xF8	; 248
    10c0:	90 70       	andi	r25, 0x00	; 0
    10c2:	88 3a       	cpi	r24, 0xA8	; 168
    10c4:	91 05       	cpc	r25, r1
    10c6:	11 f4       	brne	.+4      	; 0x10cc <TWI_enuCheckMyAddress+0x56>
		Local_enu_ErrorState = TWI_STATUS_OK;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10ce:	0f 90       	pop	r0
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <SPI_vidInit>:
#include "SPI_priv.h"
/************************************************************************************/



void SPI_vidInit(void){
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62

		SET_BIT(SPCR_REG, SPCR_MSTR);

	#elif(SPI_MODE == SPI_SLAVE_MODE)

		DIO_enuSetPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, DIO_u8OUTPUT);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	66 e0       	ldi	r22, 0x06	; 6
    10e2:	41 e0       	ldi	r20, 0x01	; 1
    10e4:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, DIO_u8INPUT);
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	65 e0       	ldi	r22, 0x05	; 5
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>

		DIO_enuSetPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, DIO_u8INPUT);
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	67 e0       	ldi	r22, 0x07	; 7
    10f6:	40 e0       	ldi	r20, 0x00	; 0
    10f8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_SS_PORT, SPI_SS_PIN, DIO_u8INPUT);
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	64 e0       	ldi	r22, 0x04	; 4
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>

		CLR_BIT(SPCR_REG, SPCR_MSTR);
    1106:	ad e2       	ldi	r26, 0x2D	; 45
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ed e2       	ldi	r30, 0x2D	; 45
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 7e       	andi	r24, 0xEF	; 239
    1112:	8c 93       	st	X, r24

	//! Data order
	#if(SPI_DORD == SPI_DORD_MSB)
		SET_BIT(SPCR_REG, SPCR_DORD);
	#elif(SPI_DORD == SPI_DORD_LSB)
		CLR_BIT(SPCR_REG, SPCR_DORD);
    1114:	ad e2       	ldi	r26, 0x2D	; 45
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ed e2       	ldi	r30, 0x2D	; 45
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	8f 7d       	andi	r24, 0xDF	; 223
    1120:	8c 93       	st	X, r24


	//! Clock Polarity
	#if(SPI_CPOL == SPI_LRising_TFalling)
		// SCK is high when idle
		CLR_BIT(SPCR_REG, SPCR_CPOL);
    1122:	ad e2       	ldi	r26, 0x2D	; 45
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ed e2       	ldi	r30, 0x2D	; 45
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	87 7f       	andi	r24, 0xF7	; 247
    112e:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR0 );
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
		CLR_BIT(SPSR_REG, SPSR_SPI2x);

	#elif(SPI_PRES_SELECT == SPI_PRES_16)
		SET_BIT(SPCR_REG, SPCR_SPR0 );
    1130:	ad e2       	ldi	r26, 0x2D	; 45
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ed e2       	ldi	r30, 0x2D	; 45
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	81 60       	ori	r24, 0x01	; 1
    113c:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
    113e:	ad e2       	ldi	r26, 0x2D	; 45
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ed e2       	ldi	r30, 0x2D	; 45
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8d 7f       	andi	r24, 0xFD	; 253
    114a:	8c 93       	st	X, r24
		CLR_BIT(SPSR_REG, SPSR_SPI2x);
    114c:	ae e2       	ldi	r26, 0x2E	; 46
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ee e2       	ldi	r30, 0x2E	; 46
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8e 7f       	andi	r24, 0xFE	; 254
    1158:	8c 93       	st	X, r24

	#endif


	/*	Enable SPI	*/
	SET_BIT(SPCR_REG, SPCR_SPE);
    115a:	ad e2       	ldi	r26, 0x2D	; 45
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	ed e2       	ldi	r30, 0x2D	; 45
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	80 64       	ori	r24, 0x40	; 64
    1166:	8c 93       	st	X, r24
}
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <SPI_enuMasterTransmit_Char>:



ErrorStatus_t SPI_enuMasterTransmit_Char(uint8_t copy_u8Data){
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <SPI_enuMasterTransmit_Char+0x6>
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    117a:	19 82       	std	Y+1, r1	; 0x01


	SPDR_REG = copy_u8Data;
    117c:	ef e2       	ldi	r30, 0x2F	; 47
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 83       	st	Z, r24

	/*! Wait for transmission complete */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    1184:	ee e2       	ldi	r30, 0x2E	; 46
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	88 23       	and	r24, r24
    118c:	dc f7       	brge	.-10     	; 0x1184 <SPI_enuMasterTransmit_Char+0x16>


	Local_enu_ErrorState = ERROR_STATUS_OK;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    1192:	89 81       	ldd	r24, Y+1	; 0x01
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	08 95       	ret

0000119e <SPI_enuMasterTransmit_String>:



ErrorStatus_t SPI_enuMasterTransmit_String(uint8_t* copy_pu8Data){
    119e:	df 93       	push	r29
    11a0:	cf 93       	push	r28
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <SPI_enuMasterTransmit_String+0x6>
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <SPI_enuMasterTransmit_String+0x8>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	9b 83       	std	Y+3, r25	; 0x03
    11ac:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    11ae:	19 82       	std	Y+1, r1	; 0x01


	if(copy_pu8Data == NULL){
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	9b 81       	ldd	r25, Y+3	; 0x03
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	19 f4       	brne	.+6      	; 0x11be <SPI_enuMasterTransmit_String+0x20>
		return Local_enu_ErrorState;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	8c 83       	std	Y+4, r24	; 0x04
    11bc:	13 c0       	rjmp	.+38     	; 0x11e4 <SPI_enuMasterTransmit_String+0x46>

	}else{

		do{
			SPI_enuMasterTransmit_Char(*copy_pu8Data);
    11be:	ea 81       	ldd	r30, Y+2	; 0x02
    11c0:	fb 81       	ldd	r31, Y+3	; 0x03
    11c2:	80 81       	ld	r24, Z
    11c4:	0e 94 b7 08 	call	0x116e	; 0x116e <SPI_enuMasterTransmit_Char>
			copy_pu8Data++;
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	9b 81       	ldd	r25, Y+3	; 0x03
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	9b 83       	std	Y+3, r25	; 0x03
    11d0:	8a 83       	std	Y+2, r24	; 0x02
		}while(*copy_pu8Data != '\0');
    11d2:	ea 81       	ldd	r30, Y+2	; 0x02
    11d4:	fb 81       	ldd	r31, Y+3	; 0x03
    11d6:	80 81       	ld	r24, Z
    11d8:	88 23       	and	r24, r24
    11da:	89 f7       	brne	.-30     	; 0x11be <SPI_enuMasterTransmit_String+0x20>
	}

	Local_enu_ErrorState = ERROR_STATUS_OK;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	8c 83       	std	Y+4, r24	; 0x04
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <SPI_enuSlaveReceive_Char>:



ErrorStatus_t SPI_enuSlaveReceive_Char(uint8_t* copy_pu8Data){
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <SPI_enuSlaveReceive_Char+0x6>
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	9b 83       	std	Y+3, r25	; 0x03
    1202:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1204:	19 82       	std	Y+1, r1	; 0x01


	/* Wait for successful reception of data from master */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    1206:	ee e2       	ldi	r30, 0x2E	; 46
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	88 23       	and	r24, r24
    120e:	dc f7       	brge	.-10     	; 0x1206 <SPI_enuSlaveReceive_Char+0x12>

	*copy_pu8Data = SPDR_REG;
    1210:	ef e2       	ldi	r30, 0x2F	; 47
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	ea 81       	ldd	r30, Y+2	; 0x02
    1218:	fb 81       	ldd	r31, Y+3	; 0x03
    121a:	80 83       	st	Z, r24


	Local_enu_ErrorState = ERROR_STATUS_OK;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
}
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <SPI_enuSlaveReceive_String>:



ErrorStatus_t SPI_enuSlaveReceive_String(uint8_t* copy_pu8Data){
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	27 97       	sbiw	r28, 0x07	; 7
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	9d 83       	std	Y+5, r25	; 0x05
    1244:	8c 83       	std	Y+4, r24	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1246:	1b 82       	std	Y+3, r1	; 0x03


	if(copy_pu8Data == NULL){
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	9d 81       	ldd	r25, Y+5	; 0x05
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	19 f4       	brne	.+6      	; 0x1256 <SPI_enuSlaveReceive_String+0x28>
		return Local_enu_ErrorState;
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	8e 83       	std	Y+6, r24	; 0x06
    1254:	1e c0       	rjmp	.+60     	; 0x1292 <SPI_enuSlaveReceive_String+0x64>
	}else{

		// Intiate head of buffer similar to linked-list idea
		uint8_t *Local_u8Temp = copy_pu8Data;
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	9d 81       	ldd	r25, Y+5	; 0x05
    125a:	9a 83       	std	Y+2, r25	; 0x02
    125c:	89 83       	std	Y+1, r24	; 0x01

		do{
			SPI_enuSlaveReceive_Char(Local_u8Temp);
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	9a 81       	ldd	r25, Y+2	; 0x02
    1262:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <SPI_enuSlaveReceive_Char>


		}while(*(Local_u8Temp++) != '\0');
    1266:	e9 81       	ldd	r30, Y+1	; 0x01
    1268:	fa 81       	ldd	r31, Y+2	; 0x02
    126a:	80 81       	ld	r24, Z
    126c:	8f 83       	std	Y+7, r24	; 0x07
    126e:	8f 81       	ldd	r24, Y+7	; 0x07
    1270:	88 23       	and	r24, r24
    1272:	11 f0       	breq	.+4      	; 0x1278 <SPI_enuSlaveReceive_String+0x4a>
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	8f 83       	std	Y+7, r24	; 0x07
    1278:	8f 81       	ldd	r24, Y+7	; 0x07
    127a:	29 81       	ldd	r18, Y+1	; 0x01
    127c:	3a 81       	ldd	r19, Y+2	; 0x02
    127e:	2f 5f       	subi	r18, 0xFF	; 255
    1280:	3f 4f       	sbci	r19, 0xFF	; 255
    1282:	3a 83       	std	Y+2, r19	; 0x02
    1284:	29 83       	std	Y+1, r18	; 0x01
    1286:	88 23       	and	r24, r24
    1288:	51 f7       	brne	.-44     	; 0x125e <SPI_enuSlaveReceive_String+0x30>
	}


	Local_enu_ErrorState = ERROR_STATUS_OK;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enu_ErrorState;
    128e:	8b 81       	ldd	r24, Y+3	; 0x03
    1290:	8e 83       	std	Y+6, r24	; 0x06
    1292:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1294:	27 96       	adiw	r28, 0x07	; 7
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	f8 94       	cli
    129a:	de bf       	out	0x3e, r29	; 62
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	0f 92       	push	r0
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    12b0:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
    12b2:	ef e5       	ldi	r30, 0x5F	; 95
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	88 23       	and	r24, r24
    12ba:	4c f0       	brlt	.+18     	; 0x12ce <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
    12bc:	af e5       	ldi	r26, 0x5F	; 95
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ef e5       	ldi	r30, 0x5F	; 95
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	80 68       	ori	r24, 0x80	; 128
    12c8:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d0:	0f 90       	pop	r0
    12d2:	cf 91       	pop	r28
    12d4:	df 91       	pop	r29
    12d6:	08 95       	ret

000012d8 <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
    12d8:	df 93       	push	r29
    12da:	cf 93       	push	r28
    12dc:	0f 92       	push	r0
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    12e2:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
    12e4:	ef e5       	ldi	r30, 0x5F	; 95
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	88 23       	and	r24, r24
    12ec:	4c f4       	brge	.+18     	; 0x1300 <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
    12ee:	af e5       	ldi	r26, 0x5F	; 95
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	ef e5       	ldi	r30, 0x5F	; 95
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	8f 77       	andi	r24, 0x7F	; 127
    12fa:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    1300:	89 81       	ldd	r24, Y+1	; 0x01
}
    1302:	0f 90       	pop	r0
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	2a 97       	sbiw	r28, 0x0a	; 10
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	9b 83       	std	Y+3, r25	; 0x03
    1320:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    1322:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	9b 81       	ldd	r25, Y+3	; 0x03
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	19 f4       	brne	.+6      	; 0x1332 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
    132c:	29 81       	ldd	r18, Y+1	; 0x01
    132e:	2a 87       	std	Y+10, r18	; 0x0a
    1330:	36 c1       	rjmp	.+620    	; 0x159e <EXTI_enuInit+0x294>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_ENABLED){
    1332:	ea 81       	ldd	r30, Y+2	; 0x02
    1334:	fb 81       	ldd	r31, Y+3	; 0x03
    1336:	80 81       	ld	r24, Z
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	09 f0       	breq	.+2      	; 0x133e <EXTI_enuInit+0x34>
    133c:	64 c0       	rjmp	.+200    	; 0x1406 <EXTI_enuInit+0xfc>

			SET_BIT(GICR, INT0_switch);
    133e:	ab e5       	ldi	r26, 0x5B	; 91
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	eb e5       	ldi	r30, 0x5B	; 91
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	80 64       	ori	r24, 0x40	; 64
    134a:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_0].Sence_Level){
    134c:	ea 81       	ldd	r30, Y+2	; 0x02
    134e:	fb 81       	ldd	r31, Y+3	; 0x03
    1350:	81 81       	ldd	r24, Z+1	; 0x01
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	39 87       	std	Y+9, r19	; 0x09
    1358:	28 87       	std	Y+8, r18	; 0x08
    135a:	88 85       	ldd	r24, Y+8	; 0x08
    135c:	99 85       	ldd	r25, Y+9	; 0x09
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	21 f1       	breq	.+72     	; 0x13ac <EXTI_enuInit+0xa2>
    1364:	28 85       	ldd	r18, Y+8	; 0x08
    1366:	39 85       	ldd	r19, Y+9	; 0x09
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	2c f4       	brge	.+10     	; 0x1378 <EXTI_enuInit+0x6e>
    136e:	88 85       	ldd	r24, Y+8	; 0x08
    1370:	99 85       	ldd	r25, Y+9	; 0x09
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	61 f0       	breq	.+24     	; 0x138e <EXTI_enuInit+0x84>
    1376:	53 c0       	rjmp	.+166    	; 0x141e <EXTI_enuInit+0x114>
    1378:	28 85       	ldd	r18, Y+8	; 0x08
    137a:	39 85       	ldd	r19, Y+9	; 0x09
    137c:	22 30       	cpi	r18, 0x02	; 2
    137e:	31 05       	cpc	r19, r1
    1380:	21 f1       	breq	.+72     	; 0x13ca <EXTI_enuInit+0xc0>
    1382:	88 85       	ldd	r24, Y+8	; 0x08
    1384:	99 85       	ldd	r25, Y+9	; 0x09
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	91 05       	cpc	r25, r1
    138a:	71 f1       	breq	.+92     	; 0x13e8 <EXTI_enuInit+0xde>
    138c:	48 c0       	rjmp	.+144    	; 0x141e <EXTI_enuInit+0x114>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
    138e:	a5 e5       	ldi	r26, 0x55	; 85
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e5       	ldi	r30, 0x55	; 85
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8e 7f       	andi	r24, 0xFE	; 254
    139a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    139c:	a5 e5       	ldi	r26, 0x55	; 85
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e5       	ldi	r30, 0x55	; 85
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8d 7f       	andi	r24, 0xFD	; 253
    13a8:	8c 93       	st	X, r24
    13aa:	39 c0       	rjmp	.+114    	; 0x141e <EXTI_enuInit+0x114>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
    13ac:	a5 e5       	ldi	r26, 0x55	; 85
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e5       	ldi	r30, 0x55	; 85
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	81 60       	ori	r24, 0x01	; 1
    13b8:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    13ba:	a5 e5       	ldi	r26, 0x55	; 85
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e5       	ldi	r30, 0x55	; 85
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	8d 7f       	andi	r24, 0xFD	; 253
    13c6:	8c 93       	st	X, r24
    13c8:	2a c0       	rjmp	.+84     	; 0x141e <EXTI_enuInit+0x114>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
    13ca:	a5 e5       	ldi	r26, 0x55	; 85
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e5       	ldi	r30, 0x55	; 85
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8e 7f       	andi	r24, 0xFE	; 254
    13d6:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    13d8:	a5 e5       	ldi	r26, 0x55	; 85
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e5 e5       	ldi	r30, 0x55	; 85
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	82 60       	ori	r24, 0x02	; 2
    13e4:	8c 93       	st	X, r24
    13e6:	1b c0       	rjmp	.+54     	; 0x141e <EXTI_enuInit+0x114>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
    13e8:	a5 e5       	ldi	r26, 0x55	; 85
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e5 e5       	ldi	r30, 0x55	; 85
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	81 60       	ori	r24, 0x01	; 1
    13f4:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    13f6:	a5 e5       	ldi	r26, 0x55	; 85
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e5 e5       	ldi	r30, 0x55	; 85
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	82 60       	ori	r24, 0x02	; 2
    1402:	8c 93       	st	X, r24
    1404:	0c c0       	rjmp	.+24     	; 0x141e <EXTI_enuInit+0x114>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_DISABLED){
    1406:	ea 81       	ldd	r30, Y+2	; 0x02
    1408:	fb 81       	ldd	r31, Y+3	; 0x03
    140a:	80 81       	ld	r24, Z
    140c:	88 23       	and	r24, r24
    140e:	39 f4       	brne	.+14     	; 0x141e <EXTI_enuInit+0x114>

			CLR_BIT(GICR, INT0_switch);
    1410:	ab e5       	ldi	r26, 0x5B	; 91
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	eb e5       	ldi	r30, 0x5B	; 91
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	8f 7b       	andi	r24, 0xBF	; 191
    141c:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_ENABLED){
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	9b 81       	ldd	r25, Y+3	; 0x03
    1422:	fc 01       	movw	r30, r24
    1424:	32 96       	adiw	r30, 0x02	; 2
    1426:	80 81       	ld	r24, Z
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	09 f0       	breq	.+2      	; 0x142e <EXTI_enuInit+0x124>
    142c:	66 c0       	rjmp	.+204    	; 0x14fa <EXTI_enuInit+0x1f0>

			SET_BIT(GICR, INT1_switch);
    142e:	ab e5       	ldi	r26, 0x5B	; 91
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	eb e5       	ldi	r30, 0x5B	; 91
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	80 68       	ori	r24, 0x80	; 128
    143a:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT_NO_1].Sence_Level){
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	9b 81       	ldd	r25, Y+3	; 0x03
    1440:	fc 01       	movw	r30, r24
    1442:	32 96       	adiw	r30, 0x02	; 2
    1444:	81 81       	ldd	r24, Z+1	; 0x01
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3f 83       	std	Y+7, r19	; 0x07
    144c:	2e 83       	std	Y+6, r18	; 0x06
    144e:	8e 81       	ldd	r24, Y+6	; 0x06
    1450:	9f 81       	ldd	r25, Y+7	; 0x07
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	91 05       	cpc	r25, r1
    1456:	21 f1       	breq	.+72     	; 0x14a0 <EXTI_enuInit+0x196>
    1458:	2e 81       	ldd	r18, Y+6	; 0x06
    145a:	3f 81       	ldd	r19, Y+7	; 0x07
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	2c f4       	brge	.+10     	; 0x146c <EXTI_enuInit+0x162>
    1462:	8e 81       	ldd	r24, Y+6	; 0x06
    1464:	9f 81       	ldd	r25, Y+7	; 0x07
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	61 f0       	breq	.+24     	; 0x1482 <EXTI_enuInit+0x178>
    146a:	55 c0       	rjmp	.+170    	; 0x1516 <EXTI_enuInit+0x20c>
    146c:	2e 81       	ldd	r18, Y+6	; 0x06
    146e:	3f 81       	ldd	r19, Y+7	; 0x07
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	21 f1       	breq	.+72     	; 0x14be <EXTI_enuInit+0x1b4>
    1476:	8e 81       	ldd	r24, Y+6	; 0x06
    1478:	9f 81       	ldd	r25, Y+7	; 0x07
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	91 05       	cpc	r25, r1
    147e:	71 f1       	breq	.+92     	; 0x14dc <EXTI_enuInit+0x1d2>
    1480:	4a c0       	rjmp	.+148    	; 0x1516 <EXTI_enuInit+0x20c>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
    1482:	a5 e5       	ldi	r26, 0x55	; 85
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e5 e5       	ldi	r30, 0x55	; 85
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	8b 7f       	andi	r24, 0xFB	; 251
    148e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    1490:	a5 e5       	ldi	r26, 0x55	; 85
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e5 e5       	ldi	r30, 0x55	; 85
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	87 7f       	andi	r24, 0xF7	; 247
    149c:	8c 93       	st	X, r24
    149e:	3b c0       	rjmp	.+118    	; 0x1516 <EXTI_enuInit+0x20c>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
    14a0:	a5 e5       	ldi	r26, 0x55	; 85
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e5 e5       	ldi	r30, 0x55	; 85
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	84 60       	ori	r24, 0x04	; 4
    14ac:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    14ae:	a5 e5       	ldi	r26, 0x55	; 85
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e5 e5       	ldi	r30, 0x55	; 85
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	87 7f       	andi	r24, 0xF7	; 247
    14ba:	8c 93       	st	X, r24
    14bc:	2c c0       	rjmp	.+88     	; 0x1516 <EXTI_enuInit+0x20c>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
    14be:	a5 e5       	ldi	r26, 0x55	; 85
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e5 e5       	ldi	r30, 0x55	; 85
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8b 7f       	andi	r24, 0xFB	; 251
    14ca:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    14cc:	a5 e5       	ldi	r26, 0x55	; 85
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e5 e5       	ldi	r30, 0x55	; 85
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	88 60       	ori	r24, 0x08	; 8
    14d8:	8c 93       	st	X, r24
    14da:	1d c0       	rjmp	.+58     	; 0x1516 <EXTI_enuInit+0x20c>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
    14dc:	a5 e5       	ldi	r26, 0x55	; 85
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e5 e5       	ldi	r30, 0x55	; 85
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	84 60       	ori	r24, 0x04	; 4
    14e8:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    14ea:	a5 e5       	ldi	r26, 0x55	; 85
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e5       	ldi	r30, 0x55	; 85
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	88 60       	ori	r24, 0x08	; 8
    14f6:	8c 93       	st	X, r24
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <EXTI_enuInit+0x20c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_DISABLED){
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	9b 81       	ldd	r25, Y+3	; 0x03
    14fe:	fc 01       	movw	r30, r24
    1500:	32 96       	adiw	r30, 0x02	; 2
    1502:	80 81       	ld	r24, Z
    1504:	88 23       	and	r24, r24
    1506:	39 f4       	brne	.+14     	; 0x1516 <EXTI_enuInit+0x20c>

			CLR_BIT(GICR, INT1_switch);
    1508:	ab e5       	ldi	r26, 0x5B	; 91
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	eb e5       	ldi	r30, 0x5B	; 91
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	80 81       	ld	r24, Z
    1512:	8f 77       	andi	r24, 0x7F	; 127
    1514:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_ENABLED){
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	9b 81       	ldd	r25, Y+3	; 0x03
    151a:	fc 01       	movw	r30, r24
    151c:	34 96       	adiw	r30, 0x04	; 4
    151e:	80 81       	ld	r24, Z
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	59 f5       	brne	.+86     	; 0x157a <EXTI_enuInit+0x270>

			SET_BIT(GICR, INT2_switch);
    1524:	ab e5       	ldi	r26, 0x5B	; 91
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	eb e5       	ldi	r30, 0x5B	; 91
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	80 62       	ori	r24, 0x20	; 32
    1530:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_2].Sence_Level){
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	9b 81       	ldd	r25, Y+3	; 0x03
    1536:	fc 01       	movw	r30, r24
    1538:	34 96       	adiw	r30, 0x04	; 4
    153a:	81 81       	ldd	r24, Z+1	; 0x01
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	3d 83       	std	Y+5, r19	; 0x05
    1542:	2c 83       	std	Y+4, r18	; 0x04
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	82 30       	cpi	r24, 0x02	; 2
    154a:	91 05       	cpc	r25, r1
    154c:	31 f0       	breq	.+12     	; 0x155a <EXTI_enuInit+0x250>
    154e:	2c 81       	ldd	r18, Y+4	; 0x04
    1550:	3d 81       	ldd	r19, Y+5	; 0x05
    1552:	23 30       	cpi	r18, 0x03	; 3
    1554:	31 05       	cpc	r19, r1
    1556:	49 f0       	breq	.+18     	; 0x156a <EXTI_enuInit+0x260>
    1558:	1e c0       	rjmp	.+60     	; 0x1596 <EXTI_enuInit+0x28c>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
    155a:	a4 e5       	ldi	r26, 0x54	; 84
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e4 e5       	ldi	r30, 0x54	; 84
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	8f 7b       	andi	r24, 0xBF	; 191
    1566:	8c 93       	st	X, r24
    1568:	16 c0       	rjmp	.+44     	; 0x1596 <EXTI_enuInit+0x28c>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
    156a:	a4 e5       	ldi	r26, 0x54	; 84
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e4 e5       	ldi	r30, 0x54	; 84
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	80 64       	ori	r24, 0x40	; 64
    1576:	8c 93       	st	X, r24
    1578:	0e c0       	rjmp	.+28     	; 0x1596 <EXTI_enuInit+0x28c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_DISABLED){
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	9b 81       	ldd	r25, Y+3	; 0x03
    157e:	fc 01       	movw	r30, r24
    1580:	34 96       	adiw	r30, 0x04	; 4
    1582:	80 81       	ld	r24, Z
    1584:	88 23       	and	r24, r24
    1586:	39 f4       	brne	.+14     	; 0x1596 <EXTI_enuInit+0x28c>

			CLR_BIT(GICR, INT2_switch);
    1588:	ab e5       	ldi	r26, 0x5B	; 91
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	eb e5       	ldi	r30, 0x5B	; 91
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8f 7d       	andi	r24, 0xDF	; 223
    1594:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    159a:	39 81       	ldd	r19, Y+1	; 0x01
    159c:	3a 87       	std	Y+10, r19	; 0x0a
    159e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    15a0:	2a 96       	adiw	r28, 0x0a	; 10
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	f8 94       	cli
    15a6:	de bf       	out	0x3e, r29	; 62
    15a8:	0f be       	out	0x3f, r0	; 63
    15aa:	cd bf       	out	0x3d, r28	; 61
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <EXTI_enuEnableInterrupt>:

ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	00 d0       	rcall	.+0      	; 0x15b8 <EXTI_enuEnableInterrupt+0x6>
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <EXTI_enuEnableInterrupt+0x8>
    15ba:	cd b7       	in	r28, 0x3d	; 61
    15bc:	de b7       	in	r29, 0x3e	; 62
    15be:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    15c0:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	3c 83       	std	Y+4, r19	; 0x04
    15ca:	2b 83       	std	Y+3, r18	; 0x03
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	81 30       	cpi	r24, 0x01	; 1
    15d2:	91 05       	cpc	r25, r1
    15d4:	89 f0       	breq	.+34     	; 0x15f8 <EXTI_enuEnableInterrupt+0x46>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	a1 f0       	breq	.+40     	; 0x1608 <EXTI_enuEnableInterrupt+0x56>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	b9 f4       	brne	.+46     	; 0x1616 <EXTI_enuEnableInterrupt+0x64>
			case INT_NO_0:

				SET_BIT(GICR, INT0_switch);
    15e8:	ab e5       	ldi	r26, 0x5B	; 91
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	eb e5       	ldi	r30, 0x5B	; 91
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	80 64       	ori	r24, 0x40	; 64
    15f4:	8c 93       	st	X, r24
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_1:

				SET_BIT(GICR, INT1_switch);
    15f8:	ab e5       	ldi	r26, 0x5B	; 91
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	eb e5       	ldi	r30, 0x5B	; 91
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	80 68       	ori	r24, 0x80	; 128
    1604:	8c 93       	st	X, r24
    1606:	07 c0       	rjmp	.+14     	; 0x1616 <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_2:

				SET_BIT(GICR, INT2_switch);
    1608:	ab e5       	ldi	r26, 0x5B	; 91
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	eb e5       	ldi	r30, 0x5B	; 91
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	80 62       	ori	r24, 0x20	; 32
    1614:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
}
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	08 95       	ret

0000162a <EXTI_enuDisableInterrupt>:

ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
    162a:	df 93       	push	r29
    162c:	cf 93       	push	r28
    162e:	00 d0       	rcall	.+0      	; 0x1630 <EXTI_enuDisableInterrupt+0x6>
    1630:	00 d0       	rcall	.+0      	; 0x1632 <EXTI_enuDisableInterrupt+0x8>
    1632:	0f 92       	push	r0
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    163a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT_NO_2){
    163c:	8a 81       	ldd	r24, Y+2	; 0x02
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	18 f0       	brcs	.+6      	; 0x1648 <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
    1642:	29 81       	ldd	r18, Y+1	; 0x01
    1644:	2d 83       	std	Y+5, r18	; 0x05
    1646:	2e c0       	rjmp	.+92     	; 0x16a4 <EXTI_enuDisableInterrupt+0x7a>
	}

	else{

		switch(Copy_u8IntNumber){
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3c 83       	std	Y+4, r19	; 0x04
    1650:	2b 83       	std	Y+3, r18	; 0x03
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	91 05       	cpc	r25, r1
    165a:	89 f0       	breq	.+34     	; 0x167e <EXTI_enuDisableInterrupt+0x54>
    165c:	2b 81       	ldd	r18, Y+3	; 0x03
    165e:	3c 81       	ldd	r19, Y+4	; 0x04
    1660:	22 30       	cpi	r18, 0x02	; 2
    1662:	31 05       	cpc	r19, r1
    1664:	a1 f0       	breq	.+40     	; 0x168e <EXTI_enuDisableInterrupt+0x64>
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	b9 f4       	brne	.+46     	; 0x169c <EXTI_enuDisableInterrupt+0x72>
		case INT_NO_0:

			
			GICR &= ~(1<<INT0_switch);
    166e:	ab e5       	ldi	r26, 0x5B	; 91
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	eb e5       	ldi	r30, 0x5B	; 91
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 7b       	andi	r24, 0xBF	; 191
    167a:	8c 93       	st	X, r24
    167c:	0f c0       	rjmp	.+30     	; 0x169c <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_1:

			GICR &= ~(1<<INT1_switch);
    167e:	ab e5       	ldi	r26, 0x5B	; 91
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	eb e5       	ldi	r30, 0x5B	; 91
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 77       	andi	r24, 0x7F	; 127
    168a:	8c 93       	st	X, r24
    168c:	07 c0       	rjmp	.+14     	; 0x169c <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_2:

			GICR &= ~(1<<INT2_switch);
    168e:	ab e5       	ldi	r26, 0x5B	; 91
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	eb e5       	ldi	r30, 0x5B	; 91
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	8f 7d       	andi	r24, 0xDF	; 223
    169a:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    16a0:	99 81       	ldd	r25, Y+1	; 0x01
    16a2:	9d 83       	std	Y+5, r25	; 0x05
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	2c 97       	sbiw	r28, 0x0c	; 12
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	8a 83       	std	Y+2, r24	; 0x02
    16cc:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    16ce:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT_NO_2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
    16d0:	8a 81       	ldd	r24, Y+2	; 0x02
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	18 f4       	brcc	.+6      	; 0x16dc <EXTI_enuSetSenseLevel+0x26>
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	84 30       	cpi	r24, 0x04	; 4
    16da:	18 f0       	brcs	.+6      	; 0x16e2 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
    16dc:	29 81       	ldd	r18, Y+1	; 0x01
    16de:	2c 87       	std	Y+12, r18	; 0x0c
    16e0:	ef c0       	rjmp	.+478    	; 0x18c0 <EXTI_enuSetSenseLevel+0x20a>
	}

	else{

		switch(Copy_u8IntNumber){
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	3b 87       	std	Y+11, r19	; 0x0b
    16ea:	2a 87       	std	Y+10, r18	; 0x0a
    16ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    16ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	91 05       	cpc	r25, r1
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <EXTI_enuSetSenseLevel+0x42>
    16f6:	66 c0       	rjmp	.+204    	; 0x17c4 <EXTI_enuSetSenseLevel+0x10e>
    16f8:	2a 85       	ldd	r18, Y+10	; 0x0a
    16fa:	3b 85       	ldd	r19, Y+11	; 0x0b
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	31 05       	cpc	r19, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <EXTI_enuSetSenseLevel+0x4e>
    1702:	bb c0       	rjmp	.+374    	; 0x187a <EXTI_enuSetSenseLevel+0x1c4>
    1704:	8a 85       	ldd	r24, Y+10	; 0x0a
    1706:	9b 85       	ldd	r25, Y+11	; 0x0b
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	09 f0       	breq	.+2      	; 0x170e <EXTI_enuSetSenseLevel+0x58>
    170c:	d5 c0       	rjmp	.+426    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>
		case INT_NO_0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	39 87       	std	Y+9, r19	; 0x09
    1716:	28 87       	std	Y+8, r18	; 0x08
    1718:	88 85       	ldd	r24, Y+8	; 0x08
    171a:	99 85       	ldd	r25, Y+9	; 0x09
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	91 05       	cpc	r25, r1
    1720:	a9 f0       	breq	.+42     	; 0x174c <EXTI_enuSetSenseLevel+0x96>
    1722:	28 85       	ldd	r18, Y+8	; 0x08
    1724:	39 85       	ldd	r19, Y+9	; 0x09
    1726:	22 30       	cpi	r18, 0x02	; 2
    1728:	31 05       	cpc	r19, r1
    172a:	2c f4       	brge	.+10     	; 0x1736 <EXTI_enuSetSenseLevel+0x80>
    172c:	88 85       	ldd	r24, Y+8	; 0x08
    172e:	99 85       	ldd	r25, Y+9	; 0x09
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	d9 f0       	breq	.+54     	; 0x176a <EXTI_enuSetSenseLevel+0xb4>
    1734:	c1 c0       	rjmp	.+386    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>
    1736:	28 85       	ldd	r18, Y+8	; 0x08
    1738:	39 85       	ldd	r19, Y+9	; 0x09
    173a:	22 30       	cpi	r18, 0x02	; 2
    173c:	31 05       	cpc	r19, r1
    173e:	21 f1       	breq	.+72     	; 0x1788 <EXTI_enuSetSenseLevel+0xd2>
    1740:	88 85       	ldd	r24, Y+8	; 0x08
    1742:	99 85       	ldd	r25, Y+9	; 0x09
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	91 05       	cpc	r25, r1
    1748:	71 f1       	breq	.+92     	; 0x17a6 <EXTI_enuSetSenseLevel+0xf0>
    174a:	b6 c0       	rjmp	.+364    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
    174c:	a5 e5       	ldi	r26, 0x55	; 85
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e5 e5       	ldi	r30, 0x55	; 85
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    175a:	a5 e5       	ldi	r26, 0x55	; 85
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e5       	ldi	r30, 0x55	; 85
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	8d 7f       	andi	r24, 0xFD	; 253
    1766:	8c 93       	st	X, r24
    1768:	a7 c0       	rjmp	.+334    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    176a:	a5 e5       	ldi	r26, 0x55	; 85
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e5       	ldi	r30, 0x55	; 85
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	8e 7f       	andi	r24, 0xFE	; 254
    1776:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    1778:	a5 e5       	ldi	r26, 0x55	; 85
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e5 e5       	ldi	r30, 0x55	; 85
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	8d 7f       	andi	r24, 0xFD	; 253
    1784:	8c 93       	st	X, r24
    1786:	98 c0       	rjmp	.+304    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    1788:	a5 e5       	ldi	r26, 0x55	; 85
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e5 e5       	ldi	r30, 0x55	; 85
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	8e 7f       	andi	r24, 0xFE	; 254
    1794:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    1796:	a5 e5       	ldi	r26, 0x55	; 85
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e5       	ldi	r30, 0x55	; 85
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	82 60       	ori	r24, 0x02	; 2
    17a2:	8c 93       	st	X, r24
    17a4:	89 c0       	rjmp	.+274    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    17a6:	a5 e5       	ldi	r26, 0x55	; 85
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e5 e5       	ldi	r30, 0x55	; 85
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	81 60       	ori	r24, 0x01	; 1
    17b2:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    17b4:	a5 e5       	ldi	r26, 0x55	; 85
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e5 e5       	ldi	r30, 0x55	; 85
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	82 60       	ori	r24, 0x02	; 2
    17c0:	8c 93       	st	X, r24
    17c2:	7a c0       	rjmp	.+244    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>
			/**************************************************/

		case INT_NO_1:

			/**************** 1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	3f 83       	std	Y+7, r19	; 0x07
    17cc:	2e 83       	std	Y+6, r18	; 0x06
    17ce:	8e 81       	ldd	r24, Y+6	; 0x06
    17d0:	9f 81       	ldd	r25, Y+7	; 0x07
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	91 05       	cpc	r25, r1
    17d6:	a9 f0       	breq	.+42     	; 0x1802 <EXTI_enuSetSenseLevel+0x14c>
    17d8:	2e 81       	ldd	r18, Y+6	; 0x06
    17da:	3f 81       	ldd	r19, Y+7	; 0x07
    17dc:	22 30       	cpi	r18, 0x02	; 2
    17de:	31 05       	cpc	r19, r1
    17e0:	2c f4       	brge	.+10     	; 0x17ec <EXTI_enuSetSenseLevel+0x136>
    17e2:	8e 81       	ldd	r24, Y+6	; 0x06
    17e4:	9f 81       	ldd	r25, Y+7	; 0x07
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	d9 f0       	breq	.+54     	; 0x1820 <EXTI_enuSetSenseLevel+0x16a>
    17ea:	66 c0       	rjmp	.+204    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>
    17ec:	2e 81       	ldd	r18, Y+6	; 0x06
    17ee:	3f 81       	ldd	r19, Y+7	; 0x07
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	21 f1       	breq	.+72     	; 0x183e <EXTI_enuSetSenseLevel+0x188>
    17f6:	8e 81       	ldd	r24, Y+6	; 0x06
    17f8:	9f 81       	ldd	r25, Y+7	; 0x07
    17fa:	83 30       	cpi	r24, 0x03	; 3
    17fc:	91 05       	cpc	r25, r1
    17fe:	71 f1       	breq	.+92     	; 0x185c <EXTI_enuSetSenseLevel+0x1a6>
    1800:	5b c0       	rjmp	.+182    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    1802:	a5 e5       	ldi	r26, 0x55	; 85
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e5 e5       	ldi	r30, 0x55	; 85
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	84 60       	ori	r24, 0x04	; 4
    180e:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    1810:	a5 e5       	ldi	r26, 0x55	; 85
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e5 e5       	ldi	r30, 0x55	; 85
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	87 7f       	andi	r24, 0xF7	; 247
    181c:	8c 93       	st	X, r24
    181e:	4c c0       	rjmp	.+152    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    1820:	a5 e5       	ldi	r26, 0x55	; 85
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	e5 e5       	ldi	r30, 0x55	; 85
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	8b 7f       	andi	r24, 0xFB	; 251
    182c:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    182e:	a5 e5       	ldi	r26, 0x55	; 85
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e5       	ldi	r30, 0x55	; 85
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	87 7f       	andi	r24, 0xF7	; 247
    183a:	8c 93       	st	X, r24
    183c:	3d c0       	rjmp	.+122    	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    183e:	a5 e5       	ldi	r26, 0x55	; 85
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e5 e5       	ldi	r30, 0x55	; 85
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8b 7f       	andi	r24, 0xFB	; 251
    184a:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    184c:	a5 e5       	ldi	r26, 0x55	; 85
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e5 e5       	ldi	r30, 0x55	; 85
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	88 60       	ori	r24, 0x08	; 8
    1858:	8c 93       	st	X, r24
    185a:	2e c0       	rjmp	.+92     	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    185c:	a5 e5       	ldi	r26, 0x55	; 85
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e5 e5       	ldi	r30, 0x55	; 85
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	84 60       	ori	r24, 0x04	; 4
    1868:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    186a:	a5 e5       	ldi	r26, 0x55	; 85
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e5 e5       	ldi	r30, 0x55	; 85
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	88 60       	ori	r24, 0x08	; 8
    1876:	8c 93       	st	X, r24
    1878:	1f c0       	rjmp	.+62     	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>


		case INT_NO_2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	3d 83       	std	Y+5, r19	; 0x05
    1882:	2c 83       	std	Y+4, r18	; 0x04
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	9d 81       	ldd	r25, Y+5	; 0x05
    1888:	82 30       	cpi	r24, 0x02	; 2
    188a:	91 05       	cpc	r25, r1
    188c:	31 f0       	breq	.+12     	; 0x189a <EXTI_enuSetSenseLevel+0x1e4>
    188e:	2c 81       	ldd	r18, Y+4	; 0x04
    1890:	3d 81       	ldd	r19, Y+5	; 0x05
    1892:	23 30       	cpi	r18, 0x03	; 3
    1894:	31 05       	cpc	r19, r1
    1896:	49 f0       	breq	.+18     	; 0x18aa <EXTI_enuSetSenseLevel+0x1f4>
    1898:	0f c0       	rjmp	.+30     	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    189a:	a4 e5       	ldi	r26, 0x54	; 84
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e4 e5       	ldi	r30, 0x54	; 84
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8f 7b       	andi	r24, 0xBF	; 191
    18a6:	8c 93       	st	X, r24
    18a8:	07 c0       	rjmp	.+14     	; 0x18b8 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    18aa:	a4 e5       	ldi	r26, 0x54	; 84
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e4 e5       	ldi	r30, 0x54	; 84
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	80 64       	ori	r24, 0x40	; 64
    18b6:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    18bc:	39 81       	ldd	r19, Y+1	; 0x01
    18be:	3c 87       	std	Y+12, r19	; 0x0c
    18c0:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    18c2:	2c 96       	adiw	r28, 0x0c	; 12
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	00 d0       	rcall	.+0      	; 0x18da <EXTI_enuSetCallBack+0x6>
    18da:	00 d0       	rcall	.+0      	; 0x18dc <EXTI_enuSetCallBack+0x8>
    18dc:	0f 92       	push	r0
    18de:	cd b7       	in	r28, 0x3d	; 61
    18e0:	de b7       	in	r29, 0x3e	; 62
    18e2:	9b 83       	std	Y+3, r25	; 0x03
    18e4:	8a 83       	std	Y+2, r24	; 0x02
    18e6:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    18e8:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	9b 81       	ldd	r25, Y+3	; 0x03
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	29 f4       	brne	.+10     	; 0x18fc <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	8d 83       	std	Y+5, r24	; 0x05
    18fa:	18 c0       	rjmp	.+48     	; 0x192c <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT_NO_2){
    18fc:	8c 81       	ldd	r24, Y+4	; 0x04
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	28 f0       	brcs	.+10     	; 0x190c <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    1902:	84 e0       	ldi	r24, 0x04	; 4
    1904:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	8d 83       	std	Y+5, r24	; 0x05
    190a:	10 c0       	rjmp	.+32     	; 0x192c <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	fc 01       	movw	r30, r24
    1918:	e2 58       	subi	r30, 0x82	; 130
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	9b 81       	ldd	r25, Y+3	; 0x03
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	8d 83       	std	Y+5, r24	; 0x05
    192c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <__vector_1>:


ISR(INT0_vect){
    193e:	1f 92       	push	r1
    1940:	0f 92       	push	r0
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	0f 92       	push	r0
    1946:	11 24       	eor	r1, r1
    1948:	2f 93       	push	r18
    194a:	3f 93       	push	r19
    194c:	4f 93       	push	r20
    194e:	5f 93       	push	r21
    1950:	6f 93       	push	r22
    1952:	7f 93       	push	r23
    1954:	8f 93       	push	r24
    1956:	9f 93       	push	r25
    1958:	af 93       	push	r26
    195a:	bf 93       	push	r27
    195c:	ef 93       	push	r30
    195e:	ff 93       	push	r31
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_0] != NULL){
    1968:	80 91 7e 00 	lds	r24, 0x007E
    196c:	90 91 7f 00 	lds	r25, 0x007F
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	29 f0       	breq	.+10     	; 0x197e <__vector_1+0x40>
			EXTI_pfunISRFun[INT_NO_0]();
    1974:	e0 91 7e 00 	lds	r30, 0x007E
    1978:	f0 91 7f 00 	lds	r31, 0x007F
    197c:	09 95       	icall
		}
}
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	ff 91       	pop	r31
    1984:	ef 91       	pop	r30
    1986:	bf 91       	pop	r27
    1988:	af 91       	pop	r26
    198a:	9f 91       	pop	r25
    198c:	8f 91       	pop	r24
    198e:	7f 91       	pop	r23
    1990:	6f 91       	pop	r22
    1992:	5f 91       	pop	r21
    1994:	4f 91       	pop	r20
    1996:	3f 91       	pop	r19
    1998:	2f 91       	pop	r18
    199a:	0f 90       	pop	r0
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	0f 90       	pop	r0
    19a0:	1f 90       	pop	r1
    19a2:	18 95       	reti

000019a4 <__vector_2>:




ISR(INT1_vect){
    19a4:	1f 92       	push	r1
    19a6:	0f 92       	push	r0
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	0f 92       	push	r0
    19ac:	11 24       	eor	r1, r1
    19ae:	2f 93       	push	r18
    19b0:	3f 93       	push	r19
    19b2:	4f 93       	push	r20
    19b4:	5f 93       	push	r21
    19b6:	6f 93       	push	r22
    19b8:	7f 93       	push	r23
    19ba:	8f 93       	push	r24
    19bc:	9f 93       	push	r25
    19be:	af 93       	push	r26
    19c0:	bf 93       	push	r27
    19c2:	ef 93       	push	r30
    19c4:	ff 93       	push	r31
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_1] != NULL){
    19ce:	80 91 80 00 	lds	r24, 0x0080
    19d2:	90 91 81 00 	lds	r25, 0x0081
    19d6:	00 97       	sbiw	r24, 0x00	; 0
    19d8:	29 f0       	breq	.+10     	; 0x19e4 <__vector_2+0x40>
			EXTI_pfunISRFun[INT_NO_1]();
    19da:	e0 91 80 00 	lds	r30, 0x0080
    19de:	f0 91 81 00 	lds	r31, 0x0081
    19e2:	09 95       	icall
		}
}
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	ff 91       	pop	r31
    19ea:	ef 91       	pop	r30
    19ec:	bf 91       	pop	r27
    19ee:	af 91       	pop	r26
    19f0:	9f 91       	pop	r25
    19f2:	8f 91       	pop	r24
    19f4:	7f 91       	pop	r23
    19f6:	6f 91       	pop	r22
    19f8:	5f 91       	pop	r21
    19fa:	4f 91       	pop	r20
    19fc:	3f 91       	pop	r19
    19fe:	2f 91       	pop	r18
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	0f 90       	pop	r0
    1a06:	1f 90       	pop	r1
    1a08:	18 95       	reti

00001a0a <__vector_3>:



ISR(INT2_vect){
    1a0a:	1f 92       	push	r1
    1a0c:	0f 92       	push	r0
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	0f 92       	push	r0
    1a12:	11 24       	eor	r1, r1
    1a14:	2f 93       	push	r18
    1a16:	3f 93       	push	r19
    1a18:	4f 93       	push	r20
    1a1a:	5f 93       	push	r21
    1a1c:	6f 93       	push	r22
    1a1e:	7f 93       	push	r23
    1a20:	8f 93       	push	r24
    1a22:	9f 93       	push	r25
    1a24:	af 93       	push	r26
    1a26:	bf 93       	push	r27
    1a28:	ef 93       	push	r30
    1a2a:	ff 93       	push	r31
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_2] != NULL){
    1a34:	80 91 82 00 	lds	r24, 0x0082
    1a38:	90 91 83 00 	lds	r25, 0x0083
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	29 f0       	breq	.+10     	; 0x1a4a <__vector_3+0x40>
			EXTI_pfunISRFun[INT_NO_2]();
    1a40:	e0 91 82 00 	lds	r30, 0x0082
    1a44:	f0 91 83 00 	lds	r31, 0x0083
    1a48:	09 95       	icall
		}
}
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	ff 91       	pop	r31
    1a50:	ef 91       	pop	r30
    1a52:	bf 91       	pop	r27
    1a54:	af 91       	pop	r26
    1a56:	9f 91       	pop	r25
    1a58:	8f 91       	pop	r24
    1a5a:	7f 91       	pop	r23
    1a5c:	6f 91       	pop	r22
    1a5e:	5f 91       	pop	r21
    1a60:	4f 91       	pop	r20
    1a62:	3f 91       	pop	r19
    1a64:	2f 91       	pop	r18
    1a66:	0f 90       	pop	r0
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	0f 90       	pop	r0
    1a6c:	1f 90       	pop	r1
    1a6e:	18 95       	reti

00001a70 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	0f 92       	push	r0
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1a7a:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    1a7c:	ea e3       	ldi	r30, 0x3A	; 58
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 ef       	ldi	r24, 0xF0	; 240
    1a82:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    1a84:	eb e3       	ldi	r30, 0x3B	; 59
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	83 ec       	ldi	r24, 0xC3	; 195
    1a8a:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    1a8c:	e7 e3       	ldi	r30, 0x37	; 55
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 ef       	ldi	r24, 0xF0	; 240
    1a92:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    1a94:	e8 e3       	ldi	r30, 0x38	; 56
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	83 ec       	ldi	r24, 0xC3	; 195
    1a9a:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    1a9c:	e4 e3       	ldi	r30, 0x34	; 52
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 ef       	ldi	r24, 0xF0	; 240
    1aa2:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    1aa4:	e5 e3       	ldi	r30, 0x35	; 53
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	83 ec       	ldi	r24, 0xC3	; 195
    1aaa:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    1aac:	e1 e3       	ldi	r30, 0x31	; 49
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 ef       	ldi	r24, 0xF0	; 240
    1ab2:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    1ab4:	e2 e3       	ldi	r30, 0x32	; 50
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	83 ec       	ldi	r24, 0xC3	; 195
    1aba:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abe:	0f 90       	pop	r0
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	27 97       	sbiw	r28, 0x07	; 7
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	8a 83       	std	Y+2, r24	; 0x02
    1adc:	6b 83       	std	Y+3, r22	; 0x03
    1ade:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1ae0:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	84 30       	cpi	r24, 0x04	; 4
    1ae6:	08 f0       	brcs	.+2      	; 0x1aea <DIO_enuSetPinDirection+0x24>
    1ae8:	de c0       	rjmp	.+444    	; 0x1ca6 <DIO_enuSetPinDirection+0x1e0>
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	88 30       	cpi	r24, 0x08	; 8
    1aee:	08 f0       	brcs	.+2      	; 0x1af2 <DIO_enuSetPinDirection+0x2c>
    1af0:	da c0       	rjmp	.+436    	; 0x1ca6 <DIO_enuSetPinDirection+0x1e0>
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	82 30       	cpi	r24, 0x02	; 2
    1af6:	08 f0       	brcs	.+2      	; 0x1afa <DIO_enuSetPinDirection+0x34>
    1af8:	d6 c0       	rjmp	.+428    	; 0x1ca6 <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	3f 83       	std	Y+7, r19	; 0x07
    1b02:	2e 83       	std	Y+6, r18	; 0x06
    1b04:	8e 81       	ldd	r24, Y+6	; 0x06
    1b06:	9f 81       	ldd	r25, Y+7	; 0x07
    1b08:	81 30       	cpi	r24, 0x01	; 1
    1b0a:	91 05       	cpc	r25, r1
    1b0c:	09 f4       	brne	.+2      	; 0x1b10 <DIO_enuSetPinDirection+0x4a>
    1b0e:	43 c0       	rjmp	.+134    	; 0x1b96 <DIO_enuSetPinDirection+0xd0>
    1b10:	2e 81       	ldd	r18, Y+6	; 0x06
    1b12:	3f 81       	ldd	r19, Y+7	; 0x07
    1b14:	22 30       	cpi	r18, 0x02	; 2
    1b16:	31 05       	cpc	r19, r1
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <DIO_enuSetPinDirection+0x5e>
    1b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	71 f0       	breq	.+28     	; 0x1b3e <DIO_enuSetPinDirection+0x78>
    1b22:	bc c0       	rjmp	.+376    	; 0x1c9c <DIO_enuSetPinDirection+0x1d6>
    1b24:	2e 81       	ldd	r18, Y+6	; 0x06
    1b26:	3f 81       	ldd	r19, Y+7	; 0x07
    1b28:	22 30       	cpi	r18, 0x02	; 2
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <DIO_enuSetPinDirection+0x6a>
    1b2e:	5f c0       	rjmp	.+190    	; 0x1bee <DIO_enuSetPinDirection+0x128>
    1b30:	8e 81       	ldd	r24, Y+6	; 0x06
    1b32:	9f 81       	ldd	r25, Y+7	; 0x07
    1b34:	83 30       	cpi	r24, 0x03	; 3
    1b36:	91 05       	cpc	r25, r1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <DIO_enuSetPinDirection+0x76>
    1b3a:	85 c0       	rjmp	.+266    	; 0x1c46 <DIO_enuSetPinDirection+0x180>
    1b3c:	af c0       	rjmp	.+350    	; 0x1c9c <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	a1 f4       	brne	.+40     	; 0x1b6c <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    1b44:	aa e3       	ldi	r26, 0x3A	; 58
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	ea e3       	ldi	r30, 0x3A	; 58
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_enuSetPinDirection+0x9c>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_enuSetPinDirection+0x98>
    1b66:	84 2b       	or	r24, r20
    1b68:	8c 93       	st	X, r24
    1b6a:	98 c0       	rjmp	.+304    	; 0x1c9c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    1b6c:	aa e3       	ldi	r26, 0x3A	; 58
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ea e3       	ldi	r30, 0x3A	; 58
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <DIO_enuSetPinDirection+0xc4>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <DIO_enuSetPinDirection+0xc0>
    1b8e:	80 95       	com	r24
    1b90:	84 23       	and	r24, r20
    1b92:	8c 93       	st	X, r24
    1b94:	83 c0       	rjmp	.+262    	; 0x1c9c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	a1 f4       	brne	.+40     	; 0x1bc4 <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    1b9c:	a7 e3       	ldi	r26, 0x37	; 55
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e7 e3       	ldi	r30, 0x37	; 55
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <DIO_enuSetPinDirection+0xf4>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <DIO_enuSetPinDirection+0xf0>
    1bbe:	84 2b       	or	r24, r20
    1bc0:	8c 93       	st	X, r24
    1bc2:	6c c0       	rjmp	.+216    	; 0x1c9c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    1bc4:	a7 e3       	ldi	r26, 0x37	; 55
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e7 e3       	ldi	r30, 0x37	; 55
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	48 2f       	mov	r20, r24
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	02 2e       	mov	r0, r18
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <DIO_enuSetPinDirection+0x11c>
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	0a 94       	dec	r0
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <DIO_enuSetPinDirection+0x118>
    1be6:	80 95       	com	r24
    1be8:	84 23       	and	r24, r20
    1bea:	8c 93       	st	X, r24
    1bec:	57 c0       	rjmp	.+174    	; 0x1c9c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    1bee:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	a1 f4       	brne	.+40     	; 0x1c1c <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    1bf4:	a4 e3       	ldi	r26, 0x34	; 52
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e4 e3       	ldi	r30, 0x34	; 52
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 2e       	mov	r0, r18
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <DIO_enuSetPinDirection+0x14c>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	0a 94       	dec	r0
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <DIO_enuSetPinDirection+0x148>
    1c16:	84 2b       	or	r24, r20
    1c18:	8c 93       	st	X, r24
    1c1a:	40 c0       	rjmp	.+128    	; 0x1c9c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    1c1c:	a4 e3       	ldi	r26, 0x34	; 52
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e4 e3       	ldi	r30, 0x34	; 52
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <DIO_enuSetPinDirection+0x174>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <DIO_enuSetPinDirection+0x170>
    1c3e:	80 95       	com	r24
    1c40:	84 23       	and	r24, r20
    1c42:	8c 93       	st	X, r24
    1c44:	2b c0       	rjmp	.+86     	; 0x1c9c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1c46:	8c 81       	ldd	r24, Y+4	; 0x04
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	a1 f4       	brne	.+40     	; 0x1c74 <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    1c4c:	a1 e3       	ldi	r26, 0x31	; 49
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e1 e3       	ldi	r30, 0x31	; 49
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <DIO_enuSetPinDirection+0x1a4>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <DIO_enuSetPinDirection+0x1a0>
    1c6e:	84 2b       	or	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	14 c0       	rjmp	.+40     	; 0x1c9c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    1c74:	a1 e3       	ldi	r26, 0x31	; 49
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e1 e3       	ldi	r30, 0x31	; 49
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_enuSetPinDirection+0x1cc>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <DIO_enuSetPinDirection+0x1c8>
    1c96:	80 95       	com	r24
    1c98:	84 23       	and	r24, r20
    1c9a:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    1ca0:	99 81       	ldd	r25, Y+1	; 0x01
    1ca2:	9d 83       	std	Y+5, r25	; 0x05
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    1ca6:	29 81       	ldd	r18, Y+1	; 0x01
    1ca8:	2d 83       	std	Y+5, r18	; 0x05
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    1cac:	27 96       	adiw	r28, 0x07	; 7
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	27 97       	sbiw	r28, 0x07	; 7
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
    1cd4:	6b 83       	std	Y+3, r22	; 0x03
    1cd6:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1cd8:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	84 30       	cpi	r24, 0x04	; 4
    1cde:	08 f0       	brcs	.+2      	; 0x1ce2 <DIO_enuSetPinValue+0x24>
    1ce0:	de c0       	rjmp	.+444    	; 0x1e9e <DIO_enuSetPinValue+0x1e0>
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	88 30       	cpi	r24, 0x08	; 8
    1ce6:	08 f0       	brcs	.+2      	; 0x1cea <DIO_enuSetPinValue+0x2c>
    1ce8:	da c0       	rjmp	.+436    	; 0x1e9e <DIO_enuSetPinValue+0x1e0>
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	82 30       	cpi	r24, 0x02	; 2
    1cee:	08 f0       	brcs	.+2      	; 0x1cf2 <DIO_enuSetPinValue+0x34>
    1cf0:	d6 c0       	rjmp	.+428    	; 0x1e9e <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	3f 83       	std	Y+7, r19	; 0x07
    1cfa:	2e 83       	std	Y+6, r18	; 0x06
    1cfc:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfe:	9f 81       	ldd	r25, Y+7	; 0x07
    1d00:	81 30       	cpi	r24, 0x01	; 1
    1d02:	91 05       	cpc	r25, r1
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <DIO_enuSetPinValue+0x4a>
    1d06:	43 c0       	rjmp	.+134    	; 0x1d8e <DIO_enuSetPinValue+0xd0>
    1d08:	2e 81       	ldd	r18, Y+6	; 0x06
    1d0a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d0c:	22 30       	cpi	r18, 0x02	; 2
    1d0e:	31 05       	cpc	r19, r1
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <DIO_enuSetPinValue+0x5e>
    1d12:	8e 81       	ldd	r24, Y+6	; 0x06
    1d14:	9f 81       	ldd	r25, Y+7	; 0x07
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	71 f0       	breq	.+28     	; 0x1d36 <DIO_enuSetPinValue+0x78>
    1d1a:	bc c0       	rjmp	.+376    	; 0x1e94 <DIO_enuSetPinValue+0x1d6>
    1d1c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d1e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d20:	22 30       	cpi	r18, 0x02	; 2
    1d22:	31 05       	cpc	r19, r1
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <DIO_enuSetPinValue+0x6a>
    1d26:	5f c0       	rjmp	.+190    	; 0x1de6 <DIO_enuSetPinValue+0x128>
    1d28:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d2c:	83 30       	cpi	r24, 0x03	; 3
    1d2e:	91 05       	cpc	r25, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <DIO_enuSetPinValue+0x76>
    1d32:	85 c0       	rjmp	.+266    	; 0x1e3e <DIO_enuSetPinValue+0x180>
    1d34:	af c0       	rjmp	.+350    	; 0x1e94 <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    1d36:	8c 81       	ldd	r24, Y+4	; 0x04
    1d38:	88 23       	and	r24, r24
    1d3a:	a1 f0       	breq	.+40     	; 0x1d64 <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    1d3c:	ab e3       	ldi	r26, 0x3B	; 59
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	eb e3       	ldi	r30, 0x3B	; 59
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	02 2e       	mov	r0, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <DIO_enuSetPinValue+0x9c>
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	0a 94       	dec	r0
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <DIO_enuSetPinValue+0x98>
    1d5e:	84 2b       	or	r24, r20
    1d60:	8c 93       	st	X, r24
    1d62:	98 c0       	rjmp	.+304    	; 0x1e94 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    1d64:	ab e3       	ldi	r26, 0x3B	; 59
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	eb e3       	ldi	r30, 0x3B	; 59
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	48 2f       	mov	r20, r24
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	02 2e       	mov	r0, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <DIO_enuSetPinValue+0xc4>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	0a 94       	dec	r0
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <DIO_enuSetPinValue+0xc0>
    1d86:	80 95       	com	r24
    1d88:	84 23       	and	r24, r20
    1d8a:	8c 93       	st	X, r24
    1d8c:	83 c0       	rjmp	.+262    	; 0x1e94 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    1d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d90:	88 23       	and	r24, r24
    1d92:	a1 f0       	breq	.+40     	; 0x1dbc <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    1d94:	a8 e3       	ldi	r26, 0x38	; 56
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e8 e3       	ldi	r30, 0x38	; 56
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 2e       	mov	r0, r18
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <DIO_enuSetPinValue+0xf4>
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	0a 94       	dec	r0
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <DIO_enuSetPinValue+0xf0>
    1db6:	84 2b       	or	r24, r20
    1db8:	8c 93       	st	X, r24
    1dba:	6c c0       	rjmp	.+216    	; 0x1e94 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    1dbc:	a8 e3       	ldi	r26, 0x38	; 56
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e8 e3       	ldi	r30, 0x38	; 56
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	48 2f       	mov	r20, r24
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	28 2f       	mov	r18, r24
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	02 2e       	mov	r0, r18
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <DIO_enuSetPinValue+0x11c>
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	0a 94       	dec	r0
    1ddc:	e2 f7       	brpl	.-8      	; 0x1dd6 <DIO_enuSetPinValue+0x118>
    1dde:	80 95       	com	r24
    1de0:	84 23       	and	r24, r20
    1de2:	8c 93       	st	X, r24
    1de4:	57 c0       	rjmp	.+174    	; 0x1e94 <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    1de6:	8c 81       	ldd	r24, Y+4	; 0x04
    1de8:	88 23       	and	r24, r24
    1dea:	a1 f0       	breq	.+40     	; 0x1e14 <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    1dec:	a5 e3       	ldi	r26, 0x35	; 53
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e3       	ldi	r30, 0x35	; 53
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <DIO_enuSetPinValue+0x14c>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <DIO_enuSetPinValue+0x148>
    1e0e:	84 2b       	or	r24, r20
    1e10:	8c 93       	st	X, r24
    1e12:	40 c0       	rjmp	.+128    	; 0x1e94 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    1e14:	a5 e3       	ldi	r26, 0x35	; 53
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e5 e3       	ldi	r30, 0x35	; 53
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	48 2f       	mov	r20, r24
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 2e       	mov	r0, r18
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <DIO_enuSetPinValue+0x174>
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	0a 94       	dec	r0
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <DIO_enuSetPinValue+0x170>
    1e36:	80 95       	com	r24
    1e38:	84 23       	and	r24, r20
    1e3a:	8c 93       	st	X, r24
    1e3c:	2b c0       	rjmp	.+86     	; 0x1e94 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	88 23       	and	r24, r24
    1e42:	a1 f0       	breq	.+40     	; 0x1e6c <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    1e44:	a2 e3       	ldi	r26, 0x32	; 50
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e2 e3       	ldi	r30, 0x32	; 50
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	48 2f       	mov	r20, r24
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	28 2f       	mov	r18, r24
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	02 2e       	mov	r0, r18
    1e5c:	02 c0       	rjmp	.+4      	; 0x1e62 <DIO_enuSetPinValue+0x1a4>
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	0a 94       	dec	r0
    1e64:	e2 f7       	brpl	.-8      	; 0x1e5e <DIO_enuSetPinValue+0x1a0>
    1e66:	84 2b       	or	r24, r20
    1e68:	8c 93       	st	X, r24
    1e6a:	14 c0       	rjmp	.+40     	; 0x1e94 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    1e6c:	a2 e3       	ldi	r26, 0x32	; 50
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e2 e3       	ldi	r30, 0x32	; 50
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	48 2f       	mov	r20, r24
    1e78:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 2e       	mov	r0, r18
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <DIO_enuSetPinValue+0x1cc>
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	0a 94       	dec	r0
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <DIO_enuSetPinValue+0x1c8>
    1e8e:	80 95       	com	r24
    1e90:	84 23       	and	r24, r20
    1e92:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    1e98:	99 81       	ldd	r25, Y+1	; 0x01
    1e9a:	9d 83       	std	Y+5, r25	; 0x05
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    1e9e:	29 81       	ldd	r18, Y+1	; 0x01
    1ea0:	2d 83       	std	Y+5, r18	; 0x05
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    1ea4:	27 96       	adiw	r28, 0x07	; 7
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
    1ebe:	28 97       	sbiw	r28, 0x08	; 8
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	8a 83       	std	Y+2, r24	; 0x02
    1ecc:	6b 83       	std	Y+3, r22	; 0x03
    1ece:	5d 83       	std	Y+5, r21	; 0x05
    1ed0:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1ed2:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    1ed4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ed6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	29 f4       	brne	.+10     	; 0x1ee6 <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    1ee0:	29 81       	ldd	r18, Y+1	; 0x01
    1ee2:	28 87       	std	Y+8, r18	; 0x08
    1ee4:	7f c0       	rjmp	.+254    	; 0x1fe4 <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	08 f0       	brcs	.+2      	; 0x1eee <DIO_enuGetPinValue+0x38>
    1eec:	79 c0       	rjmp	.+242    	; 0x1fe0 <DIO_enuGetPinValue+0x12a>
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	88 30       	cpi	r24, 0x08	; 8
    1ef2:	08 f0       	brcs	.+2      	; 0x1ef6 <DIO_enuGetPinValue+0x40>
    1ef4:	75 c0       	rjmp	.+234    	; 0x1fe0 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	48 2f       	mov	r20, r24
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	5f 83       	std	Y+7, r21	; 0x07
    1efe:	4e 83       	std	Y+6, r20	; 0x06
    1f00:	8e 81       	ldd	r24, Y+6	; 0x06
    1f02:	9f 81       	ldd	r25, Y+7	; 0x07
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	91 05       	cpc	r25, r1
    1f08:	59 f1       	breq	.+86     	; 0x1f60 <DIO_enuGetPinValue+0xaa>
    1f0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f0c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f0e:	22 30       	cpi	r18, 0x02	; 2
    1f10:	31 05       	cpc	r19, r1
    1f12:	34 f4       	brge	.+12     	; 0x1f20 <DIO_enuGetPinValue+0x6a>
    1f14:	4e 81       	ldd	r20, Y+6	; 0x06
    1f16:	5f 81       	ldd	r21, Y+7	; 0x07
    1f18:	41 15       	cp	r20, r1
    1f1a:	51 05       	cpc	r21, r1
    1f1c:	69 f0       	breq	.+26     	; 0x1f38 <DIO_enuGetPinValue+0x82>
    1f1e:	5b c0       	rjmp	.+182    	; 0x1fd6 <DIO_enuGetPinValue+0x120>
    1f20:	8e 81       	ldd	r24, Y+6	; 0x06
    1f22:	9f 81       	ldd	r25, Y+7	; 0x07
    1f24:	82 30       	cpi	r24, 0x02	; 2
    1f26:	91 05       	cpc	r25, r1
    1f28:	79 f1       	breq	.+94     	; 0x1f88 <DIO_enuGetPinValue+0xd2>
    1f2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1f2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1f2e:	23 30       	cpi	r18, 0x03	; 3
    1f30:	31 05       	cpc	r19, r1
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <DIO_enuGetPinValue+0x80>
    1f34:	3d c0       	rjmp	.+122    	; 0x1fb0 <DIO_enuGetPinValue+0xfa>
    1f36:	4f c0       	rjmp	.+158    	; 0x1fd6 <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    1f38:	e9 e3       	ldi	r30, 0x39	; 57
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	88 2f       	mov	r24, r24
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a9 01       	movw	r20, r18
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <DIO_enuGetPinValue+0x9a>
    1f4c:	55 95       	asr	r21
    1f4e:	47 95       	ror	r20
    1f50:	8a 95       	dec	r24
    1f52:	e2 f7       	brpl	.-8      	; 0x1f4c <DIO_enuGetPinValue+0x96>
    1f54:	ca 01       	movw	r24, r20
    1f56:	81 70       	andi	r24, 0x01	; 1
    1f58:	ec 81       	ldd	r30, Y+4	; 0x04
    1f5a:	fd 81       	ldd	r31, Y+5	; 0x05
    1f5c:	80 83       	st	Z, r24
    1f5e:	3b c0       	rjmp	.+118    	; 0x1fd6 <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    1f60:	e6 e3       	ldi	r30, 0x36	; 54
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	a9 01       	movw	r20, r18
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <DIO_enuGetPinValue+0xc2>
    1f74:	55 95       	asr	r21
    1f76:	47 95       	ror	r20
    1f78:	8a 95       	dec	r24
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <DIO_enuGetPinValue+0xbe>
    1f7c:	ca 01       	movw	r24, r20
    1f7e:	81 70       	andi	r24, 0x01	; 1
    1f80:	ec 81       	ldd	r30, Y+4	; 0x04
    1f82:	fd 81       	ldd	r31, Y+5	; 0x05
    1f84:	80 83       	st	Z, r24
    1f86:	27 c0       	rjmp	.+78     	; 0x1fd6 <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    1f88:	e3 e3       	ldi	r30, 0x33	; 51
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	88 2f       	mov	r24, r24
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a9 01       	movw	r20, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <DIO_enuGetPinValue+0xea>
    1f9c:	55 95       	asr	r21
    1f9e:	47 95       	ror	r20
    1fa0:	8a 95       	dec	r24
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <DIO_enuGetPinValue+0xe6>
    1fa4:	ca 01       	movw	r24, r20
    1fa6:	81 70       	andi	r24, 0x01	; 1
    1fa8:	ec 81       	ldd	r30, Y+4	; 0x04
    1faa:	fd 81       	ldd	r31, Y+5	; 0x05
    1fac:	80 83       	st	Z, r24
    1fae:	13 c0       	rjmp	.+38     	; 0x1fd6 <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    1fb0:	e0 e3       	ldi	r30, 0x30	; 48
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	80 81       	ld	r24, Z
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	88 2f       	mov	r24, r24
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	a9 01       	movw	r20, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <DIO_enuGetPinValue+0x112>
    1fc4:	55 95       	asr	r21
    1fc6:	47 95       	ror	r20
    1fc8:	8a 95       	dec	r24
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <DIO_enuGetPinValue+0x10e>
    1fcc:	ca 01       	movw	r24, r20
    1fce:	81 70       	andi	r24, 0x01	; 1
    1fd0:	ec 81       	ldd	r30, Y+4	; 0x04
    1fd2:	fd 81       	ldd	r31, Y+5	; 0x05
    1fd4:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    1fda:	59 81       	ldd	r21, Y+1	; 0x01
    1fdc:	58 87       	std	Y+8, r21	; 0x08
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	88 87       	std	Y+8, r24	; 0x08
    1fe4:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    1fe6:	28 96       	adiw	r28, 0x08	; 8
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <DIO_enuTogglePinValue+0x6>
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <DIO_enuTogglePinValue+0x8>
    2000:	00 d0       	rcall	.+0      	; 0x2002 <DIO_enuTogglePinValue+0xa>
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	8a 83       	std	Y+2, r24	; 0x02
    2008:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    200a:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	84 30       	cpi	r24, 0x04	; 4
    2010:	08 f0       	brcs	.+2      	; 0x2014 <DIO_enuTogglePinValue+0x1c>
    2012:	77 c0       	rjmp	.+238    	; 0x2102 <DIO_enuTogglePinValue+0x10a>
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	88 30       	cpi	r24, 0x08	; 8
    2018:	08 f0       	brcs	.+2      	; 0x201c <DIO_enuTogglePinValue+0x24>
    201a:	73 c0       	rjmp	.+230    	; 0x2102 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	3e 83       	std	Y+6, r19	; 0x06
    2024:	2d 83       	std	Y+5, r18	; 0x05
    2026:	8d 81       	ldd	r24, Y+5	; 0x05
    2028:	9e 81       	ldd	r25, Y+6	; 0x06
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	91 05       	cpc	r25, r1
    202e:	49 f1       	breq	.+82     	; 0x2082 <DIO_enuTogglePinValue+0x8a>
    2030:	2d 81       	ldd	r18, Y+5	; 0x05
    2032:	3e 81       	ldd	r19, Y+6	; 0x06
    2034:	22 30       	cpi	r18, 0x02	; 2
    2036:	31 05       	cpc	r19, r1
    2038:	2c f4       	brge	.+10     	; 0x2044 <DIO_enuTogglePinValue+0x4c>
    203a:	8d 81       	ldd	r24, Y+5	; 0x05
    203c:	9e 81       	ldd	r25, Y+6	; 0x06
    203e:	00 97       	sbiw	r24, 0x00	; 0
    2040:	61 f0       	breq	.+24     	; 0x205a <DIO_enuTogglePinValue+0x62>
    2042:	5a c0       	rjmp	.+180    	; 0x20f8 <DIO_enuTogglePinValue+0x100>
    2044:	2d 81       	ldd	r18, Y+5	; 0x05
    2046:	3e 81       	ldd	r19, Y+6	; 0x06
    2048:	22 30       	cpi	r18, 0x02	; 2
    204a:	31 05       	cpc	r19, r1
    204c:	71 f1       	breq	.+92     	; 0x20aa <DIO_enuTogglePinValue+0xb2>
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	83 30       	cpi	r24, 0x03	; 3
    2054:	91 05       	cpc	r25, r1
    2056:	e9 f1       	breq	.+122    	; 0x20d2 <DIO_enuTogglePinValue+0xda>
    2058:	4f c0       	rjmp	.+158    	; 0x20f8 <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    205a:	ab e3       	ldi	r26, 0x3B	; 59
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	eb e3       	ldi	r30, 0x3B	; 59
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	02 2e       	mov	r0, r18
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <DIO_enuTogglePinValue+0x80>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <DIO_enuTogglePinValue+0x7c>
    207c:	84 27       	eor	r24, r20
    207e:	8c 93       	st	X, r24
    2080:	3b c0       	rjmp	.+118    	; 0x20f8 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    2082:	a8 e3       	ldi	r26, 0x38	; 56
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e8 e3       	ldi	r30, 0x38	; 56
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <DIO_enuTogglePinValue+0xa8>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <DIO_enuTogglePinValue+0xa4>
    20a4:	84 27       	eor	r24, r20
    20a6:	8c 93       	st	X, r24
    20a8:	27 c0       	rjmp	.+78     	; 0x20f8 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    20aa:	a5 e3       	ldi	r26, 0x35	; 53
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e5 e3       	ldi	r30, 0x35	; 53
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	48 2f       	mov	r20, r24
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	02 2e       	mov	r0, r18
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <DIO_enuTogglePinValue+0xd0>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	0a 94       	dec	r0
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <DIO_enuTogglePinValue+0xcc>
    20cc:	84 27       	eor	r24, r20
    20ce:	8c 93       	st	X, r24
    20d0:	13 c0       	rjmp	.+38     	; 0x20f8 <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    20d2:	a2 e3       	ldi	r26, 0x32	; 50
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e2 e3       	ldi	r30, 0x32	; 50
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	48 2f       	mov	r20, r24
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	28 2f       	mov	r18, r24
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	02 2e       	mov	r0, r18
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <DIO_enuTogglePinValue+0xf8>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	0a 94       	dec	r0
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <DIO_enuTogglePinValue+0xf4>
    20f4:	84 27       	eor	r24, r20
    20f6:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    20fc:	99 81       	ldd	r25, Y+1	; 0x01
    20fe:	9c 83       	std	Y+4, r25	; 0x04
    2100:	02 c0       	rjmp	.+4      	; 0x2106 <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    2102:	29 81       	ldd	r18, Y+1	; 0x01
    2104:	2c 83       	std	Y+4, r18	; 0x04
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    2108:	26 96       	adiw	r28, 0x06	; 6
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <DIO_enuSetPortDirection+0x6>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <DIO_enuSetPortDirection+0x8>
    2122:	00 d0       	rcall	.+0      	; 0x2124 <DIO_enuSetPortDirection+0xa>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	8a 83       	std	Y+2, r24	; 0x02
    212a:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    212c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	84 30       	cpi	r24, 0x04	; 4
    2132:	08 f0       	brcs	.+2      	; 0x2136 <DIO_enuSetPortDirection+0x1c>
    2134:	57 c0       	rjmp	.+174    	; 0x21e4 <DIO_enuSetPortDirection+0xca>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	82 30       	cpi	r24, 0x02	; 2
    213a:	08 f0       	brcs	.+2      	; 0x213e <DIO_enuSetPortDirection+0x24>
    213c:	53 c0       	rjmp	.+166    	; 0x21e4 <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3e 83       	std	Y+6, r19	; 0x06
    2146:	2d 83       	std	Y+5, r18	; 0x05
    2148:	8d 81       	ldd	r24, Y+5	; 0x05
    214a:	9e 81       	ldd	r25, Y+6	; 0x06
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	91 05       	cpc	r25, r1
    2150:	09 f1       	breq	.+66     	; 0x2194 <DIO_enuSetPortDirection+0x7a>
    2152:	2d 81       	ldd	r18, Y+5	; 0x05
    2154:	3e 81       	ldd	r19, Y+6	; 0x06
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	2c f4       	brge	.+10     	; 0x2166 <DIO_enuSetPortDirection+0x4c>
    215c:	8d 81       	ldd	r24, Y+5	; 0x05
    215e:	9e 81       	ldd	r25, Y+6	; 0x06
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	61 f0       	breq	.+24     	; 0x217c <DIO_enuSetPortDirection+0x62>
    2164:	3a c0       	rjmp	.+116    	; 0x21da <DIO_enuSetPortDirection+0xc0>
    2166:	2d 81       	ldd	r18, Y+5	; 0x05
    2168:	3e 81       	ldd	r19, Y+6	; 0x06
    216a:	22 30       	cpi	r18, 0x02	; 2
    216c:	31 05       	cpc	r19, r1
    216e:	f1 f0       	breq	.+60     	; 0x21ac <DIO_enuSetPortDirection+0x92>
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	83 30       	cpi	r24, 0x03	; 3
    2176:	91 05       	cpc	r25, r1
    2178:	29 f1       	breq	.+74     	; 0x21c4 <DIO_enuSetPortDirection+0xaa>
    217a:	2f c0       	rjmp	.+94     	; 0x21da <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	29 f4       	brne	.+10     	; 0x218c <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    2182:	ea e3       	ldi	r30, 0x3A	; 58
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	8f ef       	ldi	r24, 0xFF	; 255
    2188:	80 83       	st	Z, r24
    218a:	27 c0       	rjmp	.+78     	; 0x21da <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    218c:	ea e3       	ldi	r30, 0x3A	; 58
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	10 82       	st	Z, r1
    2192:	23 c0       	rjmp	.+70     	; 0x21da <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	29 f4       	brne	.+10     	; 0x21a4 <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    219a:	e7 e3       	ldi	r30, 0x37	; 55
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	8f ef       	ldi	r24, 0xFF	; 255
    21a0:	80 83       	st	Z, r24
    21a2:	1b c0       	rjmp	.+54     	; 0x21da <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    21a4:	e7 e3       	ldi	r30, 0x37	; 55
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	10 82       	st	Z, r1
    21aa:	17 c0       	rjmp	.+46     	; 0x21da <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	81 30       	cpi	r24, 0x01	; 1
    21b0:	29 f4       	brne	.+10     	; 0x21bc <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    21b2:	e4 e3       	ldi	r30, 0x34	; 52
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	80 83       	st	Z, r24
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    21bc:	e4 e3       	ldi	r30, 0x34	; 52
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	10 82       	st	Z, r1
    21c2:	0b c0       	rjmp	.+22     	; 0x21da <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	29 f4       	brne	.+10     	; 0x21d4 <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    21ca:	e1 e3       	ldi	r30, 0x31	; 49
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	80 83       	st	Z, r24
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    21d4:	e1 e3       	ldi	r30, 0x31	; 49
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    21de:	99 81       	ldd	r25, Y+1	; 0x01
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	02 c0       	rjmp	.+4      	; 0x21e8 <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    21e4:	29 81       	ldd	r18, Y+1	; 0x01
    21e6:	2c 83       	std	Y+4, r18	; 0x04
    21e8:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    21ea:	26 96       	adiw	r28, 0x06	; 6
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	de bf       	out	0x3e, r29	; 62
    21f2:	0f be       	out	0x3f, r0	; 63
    21f4:	cd bf       	out	0x3d, r28	; 61
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <DIO_enuSetPortValue+0x6>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <DIO_enuSetPortValue+0x8>
    2204:	00 d0       	rcall	.+0      	; 0x2206 <DIO_enuSetPortValue+0xa>
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	8a 83       	std	Y+2, r24	; 0x02
    220c:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    220e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	84 30       	cpi	r24, 0x04	; 4
    2214:	08 f0       	brcs	.+2      	; 0x2218 <DIO_enuSetPortValue+0x1c>
    2216:	57 c0       	rjmp	.+174    	; 0x22c6 <DIO_enuSetPortValue+0xca>
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	82 30       	cpi	r24, 0x02	; 2
    221c:	08 f0       	brcs	.+2      	; 0x2220 <DIO_enuSetPortValue+0x24>
    221e:	53 c0       	rjmp	.+166    	; 0x22c6 <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	3e 83       	std	Y+6, r19	; 0x06
    2228:	2d 83       	std	Y+5, r18	; 0x05
    222a:	8d 81       	ldd	r24, Y+5	; 0x05
    222c:	9e 81       	ldd	r25, Y+6	; 0x06
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	91 05       	cpc	r25, r1
    2232:	09 f1       	breq	.+66     	; 0x2276 <DIO_enuSetPortValue+0x7a>
    2234:	2d 81       	ldd	r18, Y+5	; 0x05
    2236:	3e 81       	ldd	r19, Y+6	; 0x06
    2238:	22 30       	cpi	r18, 0x02	; 2
    223a:	31 05       	cpc	r19, r1
    223c:	2c f4       	brge	.+10     	; 0x2248 <DIO_enuSetPortValue+0x4c>
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	61 f0       	breq	.+24     	; 0x225e <DIO_enuSetPortValue+0x62>
    2246:	3a c0       	rjmp	.+116    	; 0x22bc <DIO_enuSetPortValue+0xc0>
    2248:	2d 81       	ldd	r18, Y+5	; 0x05
    224a:	3e 81       	ldd	r19, Y+6	; 0x06
    224c:	22 30       	cpi	r18, 0x02	; 2
    224e:	31 05       	cpc	r19, r1
    2250:	f1 f0       	breq	.+60     	; 0x228e <DIO_enuSetPortValue+0x92>
    2252:	8d 81       	ldd	r24, Y+5	; 0x05
    2254:	9e 81       	ldd	r25, Y+6	; 0x06
    2256:	83 30       	cpi	r24, 0x03	; 3
    2258:	91 05       	cpc	r25, r1
    225a:	29 f1       	breq	.+74     	; 0x22a6 <DIO_enuSetPortValue+0xaa>
    225c:	2f c0       	rjmp	.+94     	; 0x22bc <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	88 23       	and	r24, r24
    2262:	29 f0       	breq	.+10     	; 0x226e <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    2264:	eb e3       	ldi	r30, 0x3B	; 59
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	8f ef       	ldi	r24, 0xFF	; 255
    226a:	80 83       	st	Z, r24
    226c:	27 c0       	rjmp	.+78     	; 0x22bc <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    226e:	eb e3       	ldi	r30, 0x3B	; 59
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	10 82       	st	Z, r1
    2274:	23 c0       	rjmp	.+70     	; 0x22bc <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	88 23       	and	r24, r24
    227a:	29 f0       	breq	.+10     	; 0x2286 <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    227c:	e8 e3       	ldi	r30, 0x38	; 56
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	8f ef       	ldi	r24, 0xFF	; 255
    2282:	80 83       	st	Z, r24
    2284:	1b c0       	rjmp	.+54     	; 0x22bc <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    2286:	e8 e3       	ldi	r30, 0x38	; 56
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	10 82       	st	Z, r1
    228c:	17 c0       	rjmp	.+46     	; 0x22bc <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	88 23       	and	r24, r24
    2292:	29 f0       	breq	.+10     	; 0x229e <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    2294:	e5 e3       	ldi	r30, 0x35	; 53
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	8f ef       	ldi	r24, 0xFF	; 255
    229a:	80 83       	st	Z, r24
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    229e:	e5 e3       	ldi	r30, 0x35	; 53
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	10 82       	st	Z, r1
    22a4:	0b c0       	rjmp	.+22     	; 0x22bc <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	88 23       	and	r24, r24
    22aa:	29 f0       	breq	.+10     	; 0x22b6 <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    22ac:	e2 e3       	ldi	r30, 0x32	; 50
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	8f ef       	ldi	r24, 0xFF	; 255
    22b2:	80 83       	st	Z, r24
    22b4:	03 c0       	rjmp	.+6      	; 0x22bc <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    22b6:	e2 e3       	ldi	r30, 0x32	; 50
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    22c0:	99 81       	ldd	r25, Y+1	; 0x01
    22c2:	9c 83       	std	Y+4, r25	; 0x04
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    22c6:	29 81       	ldd	r18, Y+1	; 0x01
    22c8:	2c 83       	std	Y+4, r18	; 0x04
    22ca:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    22cc:	26 96       	adiw	r28, 0x06	; 6
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <ADC_enuInit>:


static void (*ADC_CallBackFunction)(void) = NULL;


void ADC_enuInit(){
    22de:	df 93       	push	r29
    22e0:	cf 93       	push	r28
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	2e 97       	sbiw	r28, 0x0e	; 14
    22e8:	0f b6       	in	r0, 0x3f	; 63
    22ea:	f8 94       	cli
    22ec:	de bf       	out	0x3e, r29	; 62
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	cd bf       	out	0x3d, r28	; 61
	 * 5. Enabling ADC
	 * */


	/*************************** Selecting  voltage reference ***************************/
		ADMUX_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    22f2:	a7 e2       	ldi	r26, 0x27	; 39
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e7 e2       	ldi	r30, 0x27	; 39
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	80 81       	ld	r24, Z
    22fc:	8f 71       	andi	r24, 0x1F	; 31
    22fe:	8c 93       	st	X, r24
		ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
    2300:	a7 e2       	ldi	r26, 0x27	; 39
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e7 e2       	ldi	r30, 0x27	; 39
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	80 64       	ori	r24, 0x40	; 64
    230c:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************** Selecting ADC MODE ********************************/
		#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
			SET_BIT(ADCSRA_REG, ADCSRA_ADATE);
    230e:	a6 e2       	ldi	r26, 0x26	; 38
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	e6 e2       	ldi	r30, 0x26	; 38
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	80 62       	ori	r24, 0x20	; 32
    231a:	8c 93       	st	X, r24

			SFIOR_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    231c:	a0 e5       	ldi	r26, 0x50	; 80
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e0 e5       	ldi	r30, 0x50	; 80
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	8f 71       	andi	r24, 0x1F	; 31
    2328:	8c 93       	st	X, r24
			SFIOR_REG |= ADC_AUTO_TRIG_SRCE_SELECTOR;
    232a:	a0 e5       	ldi	r26, 0x50	; 80
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e0 e5       	ldi	r30, 0x50	; 80
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* Selecting Adjustment *******************************/
		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			CLR_BIT(ADMUX_REG, ADMUX_ADLAR);
    2336:	a7 e2       	ldi	r26, 0x27	; 39
    2338:	b0 e0       	ldi	r27, 0x00	; 0
    233a:	e7 e2       	ldi	r30, 0x27	; 39
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	8f 7d       	andi	r24, 0xDF	; 223
    2342:	8c 93       	st	X, r24
	/***************************** Clearing  Interrupt Flag *****************************/
		//! Notice: that ADIF to be cleared we write logical one (from data sheet)
		//So in initialization of ADC we write 1 to ADIF bit to make sure that the
		//flag is cleared in order to make sure that ADC ready for upcoming conversation
		// clearing interrupt flag
		SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    2344:	a6 e2       	ldi	r26, 0x26	; 38
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e6 e2       	ldi	r30, 0x26	; 38
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	80 61       	ori	r24, 0x10	; 16
    2350:	8c 93       	st	X, r24
	/************************************************************************************/


	/*********************************** Enabling ADC ***********************************/
		SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    2352:	a6 e2       	ldi	r26, 0x26	; 38
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e6 e2       	ldi	r30, 0x26	; 38
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	80 68       	ori	r24, 0x80	; 128
    235e:	8c 93       	st	X, r24
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a8 e4       	ldi	r26, 0x48	; 72
    2366:	b3 e4       	ldi	r27, 0x43	; 67
    2368:	8b 87       	std	Y+11, r24	; 0x0b
    236a:	9c 87       	std	Y+12, r25	; 0x0c
    236c:	ad 87       	std	Y+13, r26	; 0x0d
    236e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	6b 85       	ldd	r22, Y+11	; 0x0b
    2372:	7c 85       	ldd	r23, Y+12	; 0x0c
    2374:	8d 85       	ldd	r24, Y+13	; 0x0d
    2376:	9e 85       	ldd	r25, Y+14	; 0x0e
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a e7       	ldi	r20, 0x7A	; 122
    237e:	55 e4       	ldi	r21, 0x45	; 69
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	8f 83       	std	Y+7, r24	; 0x07
    238a:	98 87       	std	Y+8, r25	; 0x08
    238c:	a9 87       	std	Y+9, r26	; 0x09
    238e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2390:	6f 81       	ldd	r22, Y+7	; 0x07
    2392:	78 85       	ldd	r23, Y+8	; 0x08
    2394:	89 85       	ldd	r24, Y+9	; 0x09
    2396:	9a 85       	ldd	r25, Y+10	; 0x0a
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	2c f4       	brge	.+10     	; 0x23b2 <ADC_enuInit+0xd4>
		__ticks = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	9e 83       	std	Y+6, r25	; 0x06
    23ae:	8d 83       	std	Y+5, r24	; 0x05
    23b0:	3f c0       	rjmp	.+126    	; 0x2430 <ADC_enuInit+0x152>
	else if (__tmp > 65535)
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	57 e4       	ldi	r21, 0x47	; 71
    23c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	4c f5       	brge	.+82     	; 0x241c <ADC_enuInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    23cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	51 e4       	ldi	r21, 0x41	; 65
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	9e 83       	std	Y+6, r25	; 0x06
    23f0:	8d 83       	std	Y+5, r24	; 0x05
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <ADC_enuInit+0x134>
    23f4:	80 e9       	ldi	r24, 0x90	; 144
    23f6:	91 e0       	ldi	r25, 0x01	; 1
    23f8:	9c 83       	std	Y+4, r25	; 0x04
    23fa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23fc:	8b 81       	ldd	r24, Y+3	; 0x03
    23fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <ADC_enuInit+0x122>
    2404:	9c 83       	std	Y+4, r25	; 0x04
    2406:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2408:	8d 81       	ldd	r24, Y+5	; 0x05
    240a:	9e 81       	ldd	r25, Y+6	; 0x06
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2412:	8d 81       	ldd	r24, Y+5	; 0x05
    2414:	9e 81       	ldd	r25, Y+6	; 0x06
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	69 f7       	brne	.-38     	; 0x23f4 <ADC_enuInit+0x116>
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <ADC_enuInit+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	9a 83       	std	Y+2, r25	; 0x02
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	9a 81       	ldd	r25, Y+2	; 0x02
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <ADC_enuInit+0x15e>
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01


	// Waiting until ADC is stablized
	_delay_ms(200);

}
    2444:	2e 96       	adiw	r28, 0x0e	; 14
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <ADC_enuStartConversion>:




ErrorStatus_t ADC_enuStartConversion(ADC_Channel_types ADC_channel_N){
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	00 d0       	rcall	.+0      	; 0x245c <ADC_enuStartConversion+0x6>
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
    2460:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2462:	19 82       	std	Y+1, r1	; 0x01


	/******************************** Select ADC Channel ********************************/
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_clr_msk;
    2464:	a7 e2       	ldi	r26, 0x27	; 39
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e7 e2       	ldi	r30, 0x27	; 39
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	80 7e       	andi	r24, 0xE0	; 224
    2470:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_channel_N;
    2472:	a7 e2       	ldi	r26, 0x27	; 39
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e7 e2       	ldi	r30, 0x27	; 39
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	90 81       	ld	r25, Z
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	89 2b       	or	r24, r25
    2480:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* ADC Start Conversion *******************************/
	//!!!!!!!!!!!!!!
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    2482:	a6 e2       	ldi	r26, 0x26	; 38
    2484:	b0 e0       	ldi	r27, 0x00	; 0
    2486:	e6 e2       	ldi	r30, 0x26	; 38
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	80 64       	ori	r24, 0x40	; 64
    248e:	8c 93       	st	X, r24
	/************************************************************************************/

	return Local_enuErrrorState;
    2490:	89 81       	ldd	r24, Y+1	; 0x01
}
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <ADC_GetResult>:



uint16 ADC_GetResult(){
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
			Copy_u16ReadValue |= ((uint16)ADCH_REG<<2);
			return Copy_u16ReadValue;
		#endif

		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			return ADCLH_REG;
    24a4:	e4 e2       	ldi	r30, 0x24	; 36
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01





}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <ADC_enuSetCallBack>:




ErrorStatus_t ADC_enuSetCallBack(void(*Copy_pfunAppFun)(void)){
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <ADC_enuSetCallBack+0x6>
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <ADC_enuSetCallBack+0x8>
    24ba:	cd b7       	in	r28, 0x3d	; 61
    24bc:	de b7       	in	r29, 0x3e	; 62
    24be:	9b 83       	std	Y+3, r25	; 0x03
    24c0:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    24c2:	19 82       	std	Y+1, r1	; 0x01

//	if(Copy_pfunAppFun == NULL ||  Copy_u8IntNumber> IN)

	if(Copy_pfunAppFun == NULL){
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	9b 81       	ldd	r25, Y+3	; 0x03
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	19 f4       	brne	.+6      	; 0x24d2 <ADC_enuSetCallBack+0x20>

		return Local_enuErrrorState;
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	8c 83       	std	Y+4, r24	; 0x04
    24d0:	0a c0       	rjmp	.+20     	; 0x24e6 <ADC_enuSetCallBack+0x34>
	}

	else{
		Local_enuErrrorState = ERROR_STATUS_OK;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	89 83       	std	Y+1, r24	; 0x01

		ADC_CallBackFunction = Copy_pfunAppFun;
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	9b 81       	ldd	r25, Y+3	; 0x03
    24da:	90 93 85 00 	sts	0x0085, r25
    24de:	80 93 84 00 	sts	0x0084, r24

	}



	return Local_enuErrrorState;
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	8c 83       	std	Y+4, r24	; 0x04
    24e6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <__vector_16>:

ISR(__vector_16){
    24f6:	1f 92       	push	r1
    24f8:	0f 92       	push	r0
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	0f 92       	push	r0
    24fe:	11 24       	eor	r1, r1
    2500:	2f 93       	push	r18
    2502:	3f 93       	push	r19
    2504:	4f 93       	push	r20
    2506:	5f 93       	push	r21
    2508:	6f 93       	push	r22
    250a:	7f 93       	push	r23
    250c:	8f 93       	push	r24
    250e:	9f 93       	push	r25
    2510:	af 93       	push	r26
    2512:	bf 93       	push	r27
    2514:	ef 93       	push	r30
    2516:	ff 93       	push	r31
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CallBackFunction != NULL){
    2520:	80 91 84 00 	lds	r24, 0x0084
    2524:	90 91 85 00 	lds	r25, 0x0085
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	29 f0       	breq	.+10     	; 0x2536 <__vector_16+0x40>
		ADC_CallBackFunction();
    252c:	e0 91 84 00 	lds	r30, 0x0084
    2530:	f0 91 85 00 	lds	r31, 0x0085
    2534:	09 95       	icall
	}

}
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	ff 91       	pop	r31
    253c:	ef 91       	pop	r30
    253e:	bf 91       	pop	r27
    2540:	af 91       	pop	r26
    2542:	9f 91       	pop	r25
    2544:	8f 91       	pop	r24
    2546:	7f 91       	pop	r23
    2548:	6f 91       	pop	r22
    254a:	5f 91       	pop	r21
    254c:	4f 91       	pop	r20
    254e:	3f 91       	pop	r19
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	0f 90       	pop	r0
    2558:	1f 90       	pop	r1
    255a:	18 95       	reti

0000255c <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	0f 92       	push	r0
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2566:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	64 e0       	ldi	r22, 0x04	; 4
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	65 e0       	ldi	r22, 0x05	; 5
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	66 e0       	ldi	r22, 0x06	; 6
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	67 e0       	ldi	r22, 0x07	; 7
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	64 e0       	ldi	r22, 0x04	; 4
    2594:	41 e0       	ldi	r20, 0x01	; 1
    2596:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	65 e0       	ldi	r22, 0x05	; 5
    259e:	41 e0       	ldi	r20, 0x01	; 1
    25a0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	66 e0       	ldi	r22, 0x06	; 6
    25a8:	41 e0       	ldi	r20, 0x01	; 1
    25aa:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	67 e0       	ldi	r22, 0x07	; 7
    25b2:	41 e0       	ldi	r20, 0x01	; 1
    25b4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    25b8:	83 e0       	ldi	r24, 0x03	; 3
    25ba:	60 e0       	ldi	r22, 0x00	; 0
    25bc:	40 e0       	ldi	r20, 0x00	; 0
    25be:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    25c2:	83 e0       	ldi	r24, 0x03	; 3
    25c4:	61 e0       	ldi	r22, 0x01	; 1
    25c6:	40 e0       	ldi	r20, 0x00	; 0
    25c8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	64 e0       	ldi	r22, 0x04	; 4
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    25d6:	83 e0       	ldi	r24, 0x03	; 3
    25d8:	65 e0       	ldi	r22, 0x05	; 5
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    25e0:	83 e0       	ldi	r24, 0x03	; 3
    25e2:	60 e0       	ldi	r22, 0x00	; 0
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    25ea:	83 e0       	ldi	r24, 0x03	; 3
    25ec:	61 e0       	ldi	r22, 0x01	; 1
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	64 e0       	ldi	r22, 0x04	; 4
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    25fe:	83 e0       	ldi	r24, 0x03	; 3
    2600:	65 e0       	ldi	r22, 0x05	; 5
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    260c:	89 81       	ldd	r24, Y+1	; 0x01
}
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	2a 97       	sbiw	r28, 0x0a	; 10
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	de bf       	out	0x3e, r29	; 62
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    262c:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	8a 83       	std	Y+2, r24	; 0x02
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	8b 83       	std	Y+3, r24	; 0x03
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	8c 83       	std	Y+4, r24	; 0x04
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    263e:	84 e0       	ldi	r24, 0x04	; 4
    2640:	8e 83       	std	Y+6, r24	; 0x06
    2642:	85 e0       	ldi	r24, 0x05	; 5
    2644:	8f 83       	std	Y+7, r24	; 0x07
    2646:	86 e0       	ldi	r24, 0x06	; 6
    2648:	88 87       	std	Y+8, r24	; 0x08
    264a:	87 e0       	ldi	r24, 0x07	; 7
    264c:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    264e:	19 82       	std	Y+1, r1	; 0x01
    2650:	36 c0       	rjmp	.+108    	; 0x26be <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    2652:	99 81       	ldd	r25, Y+1	; 0x01
    2654:	8a 85       	ldd	r24, Y+10	; 0x0a
    2656:	98 17       	cp	r25, r24
    2658:	c1 f4       	brne	.+48     	; 0x268a <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	28 2f       	mov	r18, r24
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	ce 01       	movw	r24, r28
    2662:	02 96       	adiw	r24, 0x02	; 2
    2664:	fc 01       	movw	r30, r24
    2666:	e2 0f       	add	r30, r18
    2668:	f3 1f       	adc	r31, r19
    266a:	40 81       	ld	r20, Z
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	28 2f       	mov	r18, r24
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	ce 01       	movw	r24, r28
    2674:	06 96       	adiw	r24, 0x06	; 6
    2676:	fc 01       	movw	r30, r24
    2678:	e2 0f       	add	r30, r18
    267a:	f3 1f       	adc	r31, r19
    267c:	90 81       	ld	r25, Z
    267e:	84 2f       	mov	r24, r20
    2680:	69 2f       	mov	r22, r25
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
    2688:	17 c0       	rjmp	.+46     	; 0x26b8 <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	28 2f       	mov	r18, r24
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	ce 01       	movw	r24, r28
    2692:	02 96       	adiw	r24, 0x02	; 2
    2694:	fc 01       	movw	r30, r24
    2696:	e2 0f       	add	r30, r18
    2698:	f3 1f       	adc	r31, r19
    269a:	40 81       	ld	r20, Z
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	ce 01       	movw	r24, r28
    26a4:	06 96       	adiw	r24, 0x06	; 6
    26a6:	fc 01       	movw	r30, r24
    26a8:	e2 0f       	add	r30, r18
    26aa:	f3 1f       	adc	r31, r19
    26ac:	90 81       	ld	r25, Z
    26ae:	84 2f       	mov	r24, r20
    26b0:	69 2f       	mov	r22, r25
    26b2:	41 e0       	ldi	r20, 0x01	; 1
    26b4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	8f 5f       	subi	r24, 0xFF	; 255
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	84 30       	cpi	r24, 0x04	; 4
    26c2:	38 f2       	brcs	.-114    	; 0x2652 <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    26c4:	2a 96       	adiw	r28, 0x0a	; 10
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	2f 97       	sbiw	r28, 0x0f	; 15
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	9e 87       	std	Y+14, r25	; 0x0e
    26ec:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    26ee:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    26f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f4:	00 97       	sbiw	r24, 0x00	; 0
    26f6:	19 f4       	brne	.+6      	; 0x26fe <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	8f 87       	std	Y+15, r24	; 0x0f
    26fc:	7e c0       	rjmp	.+252    	; 0x27fa <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    2702:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    2704:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	8d 83       	std	Y+5, r24	; 0x05
    270a:	83 e0       	ldi	r24, 0x03	; 3
    270c:	8e 83       	std	Y+6, r24	; 0x06
    270e:	83 e0       	ldi	r24, 0x03	; 3
    2710:	8f 83       	std	Y+7, r24	; 0x07
    2712:	83 e0       	ldi	r24, 0x03	; 3
    2714:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    2716:	19 86       	std	Y+9, r1	; 0x09
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	8a 87       	std	Y+10, r24	; 0x0a
    271c:	84 e0       	ldi	r24, 0x04	; 4
    271e:	8b 87       	std	Y+11, r24	; 0x0b
    2720:	85 e0       	ldi	r24, 0x05	; 5
    2722:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    2724:	1a 82       	std	Y+2, r1	; 0x02
    2726:	63 c0       	rjmp	.+198    	; 0x27ee <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	0e 94 0b 13 	call	0x2616	; 0x2616 <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    272e:	19 82       	std	Y+1, r1	; 0x01
    2730:	57 c0       	rjmp	.+174    	; 0x27e0 <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	ce 01       	movw	r24, r28
    273a:	05 96       	adiw	r24, 0x05	; 5
    273c:	fc 01       	movw	r30, r24
    273e:	e2 0f       	add	r30, r18
    2740:	f3 1f       	adc	r31, r19
    2742:	40 81       	ld	r20, Z
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	28 2f       	mov	r18, r24
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	ce 01       	movw	r24, r28
    274c:	09 96       	adiw	r24, 0x09	; 9
    274e:	fc 01       	movw	r30, r24
    2750:	e2 0f       	add	r30, r18
    2752:	f3 1f       	adc	r31, r19
    2754:	90 81       	ld	r25, Z
    2756:	9e 01       	movw	r18, r28
    2758:	2c 5f       	subi	r18, 0xFC	; 252
    275a:	3f 4f       	sbci	r19, 0xFF	; 255
    275c:	84 2f       	mov	r24, r20
    275e:	69 2f       	mov	r22, r25
    2760:	a9 01       	movw	r20, r18
    2762:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    2766:	8c 81       	ldd	r24, Y+4	; 0x04
    2768:	88 23       	and	r24, r24
    276a:	b9 f5       	brne	.+110    	; 0x27da <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 01       	movw	r18, r24
    2774:	22 0f       	add	r18, r18
    2776:	33 1f       	adc	r19, r19
    2778:	22 0f       	add	r18, r18
    277a:	33 1f       	adc	r19, r19
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	88 2f       	mov	r24, r24
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	82 0f       	add	r24, r18
    2784:	93 1f       	adc	r25, r19
    2786:	fc 01       	movw	r30, r24
    2788:	e2 59       	subi	r30, 0x92	; 146
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2790:	fe 85       	ldd	r31, Y+14	; 0x0e
    2792:	80 83       	st	Z, r24
    2794:	1a c0       	rjmp	.+52     	; 0x27ca <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	28 2f       	mov	r18, r24
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	ce 01       	movw	r24, r28
    279e:	05 96       	adiw	r24, 0x05	; 5
    27a0:	fc 01       	movw	r30, r24
    27a2:	e2 0f       	add	r30, r18
    27a4:	f3 1f       	adc	r31, r19
    27a6:	40 81       	ld	r20, Z
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	ce 01       	movw	r24, r28
    27b0:	09 96       	adiw	r24, 0x09	; 9
    27b2:	fc 01       	movw	r30, r24
    27b4:	e2 0f       	add	r30, r18
    27b6:	f3 1f       	adc	r31, r19
    27b8:	90 81       	ld	r25, Z
    27ba:	9e 01       	movw	r18, r28
    27bc:	2c 5f       	subi	r18, 0xFC	; 252
    27be:	3f 4f       	sbci	r19, 0xFF	; 255
    27c0:	84 2f       	mov	r24, r20
    27c2:	69 2f       	mov	r22, r25
    27c4:	a9 01       	movw	r20, r18
    27c6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    27ca:	8c 81       	ldd	r24, Y+4	; 0x04
    27cc:	88 23       	and	r24, r24
    27ce:	19 f3       	breq	.-58     	; 0x2796 <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	8f 87       	std	Y+15, r24	; 0x0f
    27d8:	10 c0       	rjmp	.+32     	; 0x27fa <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	84 30       	cpi	r24, 0x04	; 4
    27e4:	08 f4       	brcc	.+2      	; 0x27e8 <keypad_enuGetPressedKey+0x112>
    27e6:	a5 cf       	rjmp	.-182    	; 0x2732 <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	8f 5f       	subi	r24, 0xFF	; 255
    27ec:	8a 83       	std	Y+2, r24	; 0x02
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	84 30       	cpi	r24, 0x04	; 4
    27f2:	08 f4       	brcc	.+2      	; 0x27f6 <keypad_enuGetPressedKey+0x120>
    27f4:	99 cf       	rjmp	.-206    	; 0x2728 <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	8f 87       	std	Y+15, r24	; 0x0f
    27fa:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    27fc:	2f 96       	adiw	r28, 0x0f	; 15
    27fe:	0f b6       	in	r0, 0x3f	; 63
    2800:	f8 94       	cli
    2802:	de bf       	out	0x3e, r29	; 62
    2804:	0f be       	out	0x3f, r0	; 63
    2806:	cd bf       	out	0x3d, r28	; 61
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	08 95       	ret

0000280e <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    280e:	df 93       	push	r29
    2810:	cf 93       	push	r28
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	e9 97       	sbiw	r28, 0x39	; 57
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2822:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	62 e0       	ldi	r22, 0x02	; 2
    2828:	41 e0       	ldi	r20, 0x01	; 1
    282a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	61 e0       	ldi	r22, 0x01	; 1
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	60 e0       	ldi	r22, 0x00	; 0
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    2842:	80 e0       	ldi	r24, 0x00	; 0
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	62 e0       	ldi	r22, 0x02	; 2
    285a:	41 e0       	ldi	r20, 0x01	; 1
    285c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	63 e0       	ldi	r22, 0x03	; 3
    2864:	41 e0       	ldi	r20, 0x01	; 1
    2866:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_enuSetPinDirection>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	ac e0       	ldi	r26, 0x0C	; 12
    2870:	b2 e4       	ldi	r27, 0x42	; 66
    2872:	8d ab       	std	Y+53, r24	; 0x35
    2874:	9e ab       	std	Y+54, r25	; 0x36
    2876:	af ab       	std	Y+55, r26	; 0x37
    2878:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	6d a9       	ldd	r22, Y+53	; 0x35
    287c:	7e a9       	ldd	r23, Y+54	; 0x36
    287e:	8f a9       	ldd	r24, Y+55	; 0x37
    2880:	98 ad       	ldd	r25, Y+56	; 0x38
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	4a e7       	ldi	r20, 0x7A	; 122
    2888:	55 e4       	ldi	r21, 0x45	; 69
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	89 ab       	std	Y+49, r24	; 0x31
    2894:	9a ab       	std	Y+50, r25	; 0x32
    2896:	ab ab       	std	Y+51, r26	; 0x33
    2898:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    289a:	69 a9       	ldd	r22, Y+49	; 0x31
    289c:	7a a9       	ldd	r23, Y+50	; 0x32
    289e:	8b a9       	ldd	r24, Y+51	; 0x33
    28a0:	9c a9       	ldd	r25, Y+52	; 0x34
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	2c f4       	brge	.+10     	; 0x28bc <LCD_enuInit+0xae>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	98 ab       	std	Y+48, r25	; 0x30
    28b8:	8f a7       	std	Y+47, r24	; 0x2f
    28ba:	3f c0       	rjmp	.+126    	; 0x293a <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    28bc:	69 a9       	ldd	r22, Y+49	; 0x31
    28be:	7a a9       	ldd	r23, Y+50	; 0x32
    28c0:	8b a9       	ldd	r24, Y+51	; 0x33
    28c2:	9c a9       	ldd	r25, Y+52	; 0x34
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	4f e7       	ldi	r20, 0x7F	; 127
    28ca:	57 e4       	ldi	r21, 0x47	; 71
    28cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d0:	18 16       	cp	r1, r24
    28d2:	4c f5       	brge	.+82     	; 0x2926 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d4:	6d a9       	ldd	r22, Y+53	; 0x35
    28d6:	7e a9       	ldd	r23, Y+54	; 0x36
    28d8:	8f a9       	ldd	r24, Y+55	; 0x37
    28da:	98 ad       	ldd	r25, Y+56	; 0x38
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e2       	ldi	r20, 0x20	; 32
    28e2:	51 e4       	ldi	r21, 0x41	; 65
    28e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	98 ab       	std	Y+48, r25	; 0x30
    28fa:	8f a7       	std	Y+47, r24	; 0x2f
    28fc:	0f c0       	rjmp	.+30     	; 0x291c <LCD_enuInit+0x10e>
    28fe:	80 e9       	ldi	r24, 0x90	; 144
    2900:	91 e0       	ldi	r25, 0x01	; 1
    2902:	9e a7       	std	Y+46, r25	; 0x2e
    2904:	8d a7       	std	Y+45, r24	; 0x2d
    2906:	8d a5       	ldd	r24, Y+45	; 0x2d
    2908:	9e a5       	ldd	r25, Y+46	; 0x2e
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <LCD_enuInit+0xfc>
    290e:	9e a7       	std	Y+46, r25	; 0x2e
    2910:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2912:	8f a5       	ldd	r24, Y+47	; 0x2f
    2914:	98 a9       	ldd	r25, Y+48	; 0x30
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	98 ab       	std	Y+48, r25	; 0x30
    291a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291c:	8f a5       	ldd	r24, Y+47	; 0x2f
    291e:	98 a9       	ldd	r25, Y+48	; 0x30
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	69 f7       	brne	.-38     	; 0x28fe <LCD_enuInit+0xf0>
    2924:	14 c0       	rjmp	.+40     	; 0x294e <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2926:	69 a9       	ldd	r22, Y+49	; 0x31
    2928:	7a a9       	ldd	r23, Y+50	; 0x32
    292a:	8b a9       	ldd	r24, Y+51	; 0x33
    292c:	9c a9       	ldd	r25, Y+52	; 0x34
    292e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	98 ab       	std	Y+48, r25	; 0x30
    2938:	8f a7       	std	Y+47, r24	; 0x2f
    293a:	8f a5       	ldd	r24, Y+47	; 0x2f
    293c:	98 a9       	ldd	r25, Y+48	; 0x30
    293e:	9c a7       	std	Y+44, r25	; 0x2c
    2940:	8b a7       	std	Y+43, r24	; 0x2b
    2942:	8b a5       	ldd	r24, Y+43	; 0x2b
    2944:	9c a5       	ldd	r25, Y+44	; 0x2c
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <LCD_enuInit+0x138>
    294a:	9c a7       	std	Y+44, r25	; 0x2c
    294c:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    294e:	80 e2       	ldi	r24, 0x20	; 32
    2950:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    2954:	80 e2       	ldi	r24, 0x20	; 32
    2956:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    295a:	80 e8       	ldi	r24, 0x80	; 128
    295c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	a0 e8       	ldi	r26, 0x80	; 128
    2966:	bf e3       	ldi	r27, 0x3F	; 63
    2968:	8f a3       	std	Y+39, r24	; 0x27
    296a:	98 a7       	std	Y+40, r25	; 0x28
    296c:	a9 a7       	std	Y+41, r26	; 0x29
    296e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2970:	6f a1       	ldd	r22, Y+39	; 0x27
    2972:	78 a5       	ldd	r23, Y+40	; 0x28
    2974:	89 a5       	ldd	r24, Y+41	; 0x29
    2976:	9a a5       	ldd	r25, Y+42	; 0x2a
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4a e7       	ldi	r20, 0x7A	; 122
    297e:	55 e4       	ldi	r21, 0x45	; 69
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	8b a3       	std	Y+35, r24	; 0x23
    298a:	9c a3       	std	Y+36, r25	; 0x24
    298c:	ad a3       	std	Y+37, r26	; 0x25
    298e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2990:	6b a1       	ldd	r22, Y+35	; 0x23
    2992:	7c a1       	ldd	r23, Y+36	; 0x24
    2994:	8d a1       	ldd	r24, Y+37	; 0x25
    2996:	9e a1       	ldd	r25, Y+38	; 0x26
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e8       	ldi	r20, 0x80	; 128
    299e:	5f e3       	ldi	r21, 0x3F	; 63
    29a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a4:	88 23       	and	r24, r24
    29a6:	2c f4       	brge	.+10     	; 0x29b2 <LCD_enuInit+0x1a4>
		__ticks = 1;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9a a3       	std	Y+34, r25	; 0x22
    29ae:	89 a3       	std	Y+33, r24	; 0x21
    29b0:	3f c0       	rjmp	.+126    	; 0x2a30 <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    29b2:	6b a1       	ldd	r22, Y+35	; 0x23
    29b4:	7c a1       	ldd	r23, Y+36	; 0x24
    29b6:	8d a1       	ldd	r24, Y+37	; 0x25
    29b8:	9e a1       	ldd	r25, Y+38	; 0x26
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	3f ef       	ldi	r19, 0xFF	; 255
    29be:	4f e7       	ldi	r20, 0x7F	; 127
    29c0:	57 e4       	ldi	r21, 0x47	; 71
    29c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29c6:	18 16       	cp	r1, r24
    29c8:	4c f5       	brge	.+82     	; 0x2a1c <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ca:	6f a1       	ldd	r22, Y+39	; 0x27
    29cc:	78 a5       	ldd	r23, Y+40	; 0x28
    29ce:	89 a5       	ldd	r24, Y+41	; 0x29
    29d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e2       	ldi	r20, 0x20	; 32
    29d8:	51 e4       	ldi	r21, 0x41	; 65
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9a a3       	std	Y+34, r25	; 0x22
    29f0:	89 a3       	std	Y+33, r24	; 0x21
    29f2:	0f c0       	rjmp	.+30     	; 0x2a12 <LCD_enuInit+0x204>
    29f4:	80 e9       	ldi	r24, 0x90	; 144
    29f6:	91 e0       	ldi	r25, 0x01	; 1
    29f8:	98 a3       	std	Y+32, r25	; 0x20
    29fa:	8f 8f       	std	Y+31, r24	; 0x1f
    29fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29fe:	98 a1       	ldd	r25, Y+32	; 0x20
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <LCD_enuInit+0x1f2>
    2a04:	98 a3       	std	Y+32, r25	; 0x20
    2a06:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a08:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	9a a3       	std	Y+34, r25	; 0x22
    2a10:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a12:	89 a1       	ldd	r24, Y+33	; 0x21
    2a14:	9a a1       	ldd	r25, Y+34	; 0x22
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	69 f7       	brne	.-38     	; 0x29f4 <LCD_enuInit+0x1e6>
    2a1a:	14 c0       	rjmp	.+40     	; 0x2a44 <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a20:	8d a1       	ldd	r24, Y+37	; 0x25
    2a22:	9e a1       	ldd	r25, Y+38	; 0x26
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9a a3       	std	Y+34, r25	; 0x22
    2a2e:	89 a3       	std	Y+33, r24	; 0x21
    2a30:	89 a1       	ldd	r24, Y+33	; 0x21
    2a32:	9a a1       	ldd	r25, Y+34	; 0x22
    2a34:	9e 8f       	std	Y+30, r25	; 0x1e
    2a36:	8d 8f       	std	Y+29, r24	; 0x1d
    2a38:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a3a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <LCD_enuInit+0x22e>
    2a40:	9e 8f       	std	Y+30, r25	; 0x1e
    2a42:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    2a4a:	80 ef       	ldi	r24, 0xF0	; 240
    2a4c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
    2a50:	80 e0       	ldi	r24, 0x00	; 0
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	a0 e8       	ldi	r26, 0x80	; 128
    2a56:	bf e3       	ldi	r27, 0x3F	; 63
    2a58:	89 8f       	std	Y+25, r24	; 0x19
    2a5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2a5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2a5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a60:	69 8d       	ldd	r22, Y+25	; 0x19
    2a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	4a e7       	ldi	r20, 0x7A	; 122
    2a6e:	55 e4       	ldi	r21, 0x45	; 69
    2a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	8d 8b       	std	Y+21, r24	; 0x15
    2a7a:	9e 8b       	std	Y+22, r25	; 0x16
    2a7c:	af 8b       	std	Y+23, r26	; 0x17
    2a7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a80:	6d 89       	ldd	r22, Y+21	; 0x15
    2a82:	7e 89       	ldd	r23, Y+22	; 0x16
    2a84:	8f 89       	ldd	r24, Y+23	; 0x17
    2a86:	98 8d       	ldd	r25, Y+24	; 0x18
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e8       	ldi	r20, 0x80	; 128
    2a8e:	5f e3       	ldi	r21, 0x3F	; 63
    2a90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a94:	88 23       	and	r24, r24
    2a96:	2c f4       	brge	.+10     	; 0x2aa2 <LCD_enuInit+0x294>
		__ticks = 1;
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	9c 8b       	std	Y+20, r25	; 0x14
    2a9e:	8b 8b       	std	Y+19, r24	; 0x13
    2aa0:	3f c0       	rjmp	.+126    	; 0x2b20 <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    2aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	57 e4       	ldi	r21, 0x47	; 71
    2ab2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	4c f5       	brge	.+82     	; 0x2b0c <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aba:	69 8d       	ldd	r22, Y+25	; 0x19
    2abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e2       	ldi	r20, 0x20	; 32
    2ac8:	51 e4       	ldi	r21, 0x41	; 65
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	9c 8b       	std	Y+20, r25	; 0x14
    2ae0:	8b 8b       	std	Y+19, r24	; 0x13
    2ae2:	0f c0       	rjmp	.+30     	; 0x2b02 <LCD_enuInit+0x2f4>
    2ae4:	80 e9       	ldi	r24, 0x90	; 144
    2ae6:	91 e0       	ldi	r25, 0x01	; 1
    2ae8:	9a 8b       	std	Y+18, r25	; 0x12
    2aea:	89 8b       	std	Y+17, r24	; 0x11
    2aec:	89 89       	ldd	r24, Y+17	; 0x11
    2aee:	9a 89       	ldd	r25, Y+18	; 0x12
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <LCD_enuInit+0x2e2>
    2af4:	9a 8b       	std	Y+18, r25	; 0x12
    2af6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af8:	8b 89       	ldd	r24, Y+19	; 0x13
    2afa:	9c 89       	ldd	r25, Y+20	; 0x14
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	9c 8b       	std	Y+20, r25	; 0x14
    2b00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b02:	8b 89       	ldd	r24, Y+19	; 0x13
    2b04:	9c 89       	ldd	r25, Y+20	; 0x14
    2b06:	00 97       	sbiw	r24, 0x00	; 0
    2b08:	69 f7       	brne	.-38     	; 0x2ae4 <LCD_enuInit+0x2d6>
    2b0a:	14 c0       	rjmp	.+40     	; 0x2b34 <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b10:	8f 89       	ldd	r24, Y+23	; 0x17
    2b12:	98 8d       	ldd	r25, Y+24	; 0x18
    2b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	9c 8b       	std	Y+20, r25	; 0x14
    2b1e:	8b 8b       	std	Y+19, r24	; 0x13
    2b20:	8b 89       	ldd	r24, Y+19	; 0x13
    2b22:	9c 89       	ldd	r25, Y+20	; 0x14
    2b24:	98 8b       	std	Y+16, r25	; 0x10
    2b26:	8f 87       	std	Y+15, r24	; 0x0f
    2b28:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b2a:	98 89       	ldd	r25, Y+16	; 0x10
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <LCD_enuInit+0x31e>
    2b30:	98 8b       	std	Y+16, r25	; 0x10
    2b32:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	a0 e0       	ldi	r26, 0x00	; 0
    2b46:	b0 e4       	ldi	r27, 0x40	; 64
    2b48:	8b 87       	std	Y+11, r24	; 0x0b
    2b4a:	9c 87       	std	Y+12, r25	; 0x0c
    2b4c:	ad 87       	std	Y+13, r26	; 0x0d
    2b4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b50:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b52:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	4a e7       	ldi	r20, 0x7A	; 122
    2b5e:	55 e4       	ldi	r21, 0x45	; 69
    2b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	8f 83       	std	Y+7, r24	; 0x07
    2b6a:	98 87       	std	Y+8, r25	; 0x08
    2b6c:	a9 87       	std	Y+9, r26	; 0x09
    2b6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b70:	6f 81       	ldd	r22, Y+7	; 0x07
    2b72:	78 85       	ldd	r23, Y+8	; 0x08
    2b74:	89 85       	ldd	r24, Y+9	; 0x09
    2b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e8       	ldi	r20, 0x80	; 128
    2b7e:	5f e3       	ldi	r21, 0x3F	; 63
    2b80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b84:	88 23       	and	r24, r24
    2b86:	2c f4       	brge	.+10     	; 0x2b92 <LCD_enuInit+0x384>
		__ticks = 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	9e 83       	std	Y+6, r25	; 0x06
    2b8e:	8d 83       	std	Y+5, r24	; 0x05
    2b90:	3f c0       	rjmp	.+126    	; 0x2c10 <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    2b92:	6f 81       	ldd	r22, Y+7	; 0x07
    2b94:	78 85       	ldd	r23, Y+8	; 0x08
    2b96:	89 85       	ldd	r24, Y+9	; 0x09
    2b98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	3f ef       	ldi	r19, 0xFF	; 255
    2b9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ba0:	57 e4       	ldi	r21, 0x47	; 71
    2ba2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba6:	18 16       	cp	r1, r24
    2ba8:	4c f5       	brge	.+82     	; 0x2bfc <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2baa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e2       	ldi	r20, 0x20	; 32
    2bb8:	51 e4       	ldi	r21, 0x41	; 65
    2bba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	bc 01       	movw	r22, r24
    2bc4:	cd 01       	movw	r24, r26
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
    2bd2:	0f c0       	rjmp	.+30     	; 0x2bf2 <LCD_enuInit+0x3e4>
    2bd4:	80 e9       	ldi	r24, 0x90	; 144
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	9c 83       	std	Y+4, r25	; 0x04
    2bda:	8b 83       	std	Y+3, r24	; 0x03
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	9c 81       	ldd	r25, Y+4	; 0x04
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <LCD_enuInit+0x3d2>
    2be4:	9c 83       	std	Y+4, r25	; 0x04
    2be6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bea:	9e 81       	ldd	r25, Y+6	; 0x06
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	9e 83       	std	Y+6, r25	; 0x06
    2bf0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	69 f7       	brne	.-38     	; 0x2bd4 <LCD_enuInit+0x3c6>
    2bfa:	14 c0       	rjmp	.+40     	; 0x2c24 <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfe:	78 85       	ldd	r23, Y+8	; 0x08
    2c00:	89 85       	ldd	r24, Y+9	; 0x09
    2c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	9e 83       	std	Y+6, r25	; 0x06
    2c0e:	8d 83       	std	Y+5, r24	; 0x05
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	9e 81       	ldd	r25, Y+6	; 0x06
    2c14:	9a 83       	std	Y+2, r25	; 0x02
    2c16:	89 83       	std	Y+1, r24	; 0x01
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
    2c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <LCD_enuInit+0x40e>
    2c20:	9a 83       	std	Y+2, r25	; 0x02
    2c22:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    2c2a:	86 e0       	ldi	r24, 0x06	; 6
    2c2c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	80 93 86 00 	sts	0x0086, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    2c3a:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2c3c:	e9 96       	adiw	r28, 0x39	; 57
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	cd b7       	in	r28, 0x3d	; 61
    2c54:	de b7       	in	r29, 0x3e	; 62
    2c56:	6e 97       	sbiw	r28, 0x1e	; 30
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2c64:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    2c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c68:	82 95       	swap	r24
    2c6a:	8f 70       	andi	r24, 0x0F	; 15
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	91 70       	andi	r25, 0x01	; 1
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	63 e0       	ldi	r22, 0x03	; 3
    2c74:	49 2f       	mov	r20, r25
    2c76:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    2c7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c7c:	82 95       	swap	r24
    2c7e:	86 95       	lsr	r24
    2c80:	87 70       	andi	r24, 0x07	; 7
    2c82:	98 2f       	mov	r25, r24
    2c84:	91 70       	andi	r25, 0x01	; 1
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	62 e0       	ldi	r22, 0x02	; 2
    2c8a:	49 2f       	mov	r20, r25
    2c8c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    2c90:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c92:	82 95       	swap	r24
    2c94:	86 95       	lsr	r24
    2c96:	86 95       	lsr	r24
    2c98:	83 70       	andi	r24, 0x03	; 3
    2c9a:	98 2f       	mov	r25, r24
    2c9c:	91 70       	andi	r25, 0x01	; 1
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	61 e0       	ldi	r22, 0x01	; 1
    2ca2:	49 2f       	mov	r20, r25
    2ca4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    2ca8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2caa:	98 2f       	mov	r25, r24
    2cac:	99 1f       	adc	r25, r25
    2cae:	99 27       	eor	r25, r25
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	60 e0       	ldi	r22, 0x00	; 0
    2cb6:	49 2f       	mov	r20, r25
    2cb8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	60 e0       	ldi	r22, 0x00	; 0
    2cc0:	41 e0       	ldi	r20, 0x01	; 1
    2cc2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	a0 e0       	ldi	r26, 0x00	; 0
    2ccc:	b0 e4       	ldi	r27, 0x40	; 64
    2cce:	89 8f       	std	Y+25, r24	; 0x19
    2cd0:	9a 8f       	std	Y+26, r25	; 0x1a
    2cd2:	ab 8f       	std	Y+27, r26	; 0x1b
    2cd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd6:	69 8d       	ldd	r22, Y+25	; 0x19
    2cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	4a e7       	ldi	r20, 0x7A	; 122
    2ce4:	55 e4       	ldi	r21, 0x45	; 69
    2ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	8d 8b       	std	Y+21, r24	; 0x15
    2cf0:	9e 8b       	std	Y+22, r25	; 0x16
    2cf2:	af 8b       	std	Y+23, r26	; 0x17
    2cf4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	40 e8       	ldi	r20, 0x80	; 128
    2d04:	5f e3       	ldi	r21, 0x3F	; 63
    2d06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d0a:	88 23       	and	r24, r24
    2d0c:	2c f4       	brge	.+10     	; 0x2d18 <WriteNLatch+0xca>
		__ticks = 1;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	9c 8b       	std	Y+20, r25	; 0x14
    2d14:	8b 8b       	std	Y+19, r24	; 0x13
    2d16:	3f c0       	rjmp	.+126    	; 0x2d96 <WriteNLatch+0x148>
	else if (__tmp > 65535)
    2d18:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	3f ef       	ldi	r19, 0xFF	; 255
    2d24:	4f e7       	ldi	r20, 0x7F	; 127
    2d26:	57 e4       	ldi	r21, 0x47	; 71
    2d28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d2c:	18 16       	cp	r1, r24
    2d2e:	4c f5       	brge	.+82     	; 0x2d82 <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d30:	69 8d       	ldd	r22, Y+25	; 0x19
    2d32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	40 e2       	ldi	r20, 0x20	; 32
    2d3e:	51 e4       	ldi	r21, 0x41	; 65
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	9c 8b       	std	Y+20, r25	; 0x14
    2d56:	8b 8b       	std	Y+19, r24	; 0x13
    2d58:	0f c0       	rjmp	.+30     	; 0x2d78 <WriteNLatch+0x12a>
    2d5a:	80 e9       	ldi	r24, 0x90	; 144
    2d5c:	91 e0       	ldi	r25, 0x01	; 1
    2d5e:	9a 8b       	std	Y+18, r25	; 0x12
    2d60:	89 8b       	std	Y+17, r24	; 0x11
    2d62:	89 89       	ldd	r24, Y+17	; 0x11
    2d64:	9a 89       	ldd	r25, Y+18	; 0x12
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <WriteNLatch+0x118>
    2d6a:	9a 8b       	std	Y+18, r25	; 0x12
    2d6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d70:	9c 89       	ldd	r25, Y+20	; 0x14
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	9c 8b       	std	Y+20, r25	; 0x14
    2d76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d78:	8b 89       	ldd	r24, Y+19	; 0x13
    2d7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	69 f7       	brne	.-38     	; 0x2d5a <WriteNLatch+0x10c>
    2d80:	14 c0       	rjmp	.+40     	; 0x2daa <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d82:	6d 89       	ldd	r22, Y+21	; 0x15
    2d84:	7e 89       	ldd	r23, Y+22	; 0x16
    2d86:	8f 89       	ldd	r24, Y+23	; 0x17
    2d88:	98 8d       	ldd	r25, Y+24	; 0x18
    2d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8e:	dc 01       	movw	r26, r24
    2d90:	cb 01       	movw	r24, r22
    2d92:	9c 8b       	std	Y+20, r25	; 0x14
    2d94:	8b 8b       	std	Y+19, r24	; 0x13
    2d96:	8b 89       	ldd	r24, Y+19	; 0x13
    2d98:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9a:	98 8b       	std	Y+16, r25	; 0x10
    2d9c:	8f 87       	std	Y+15, r24	; 0x0f
    2d9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da0:	98 89       	ldd	r25, Y+16	; 0x10
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	f1 f7       	brne	.-4      	; 0x2da2 <WriteNLatch+0x154>
    2da6:	98 8b       	std	Y+16, r25	; 0x10
    2da8:	8f 87       	std	Y+15, r24	; 0x0f
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	60 e0       	ldi	r22, 0x00	; 0
    2dae:	40 e0       	ldi	r20, 0x00	; 0
    2db0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    2db4:	80 91 86 00 	lds	r24, 0x0086
    2db8:	88 23       	and	r24, r24
    2dba:	09 f4       	brne	.+2      	; 0x2dbe <WriteNLatch+0x170>
    2dbc:	a2 c0       	rjmp	.+324    	; 0x2f02 <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    2dbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dc0:	98 2f       	mov	r25, r24
    2dc2:	91 70       	andi	r25, 0x01	; 1
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	63 e0       	ldi	r22, 0x03	; 3
    2dc8:	49 2f       	mov	r20, r25
    2dca:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    2dce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dd0:	86 95       	lsr	r24
    2dd2:	98 2f       	mov	r25, r24
    2dd4:	91 70       	andi	r25, 0x01	; 1
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	62 e0       	ldi	r22, 0x02	; 2
    2dda:	49 2f       	mov	r20, r25
    2ddc:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    2de0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2de2:	86 95       	lsr	r24
    2de4:	86 95       	lsr	r24
    2de6:	98 2f       	mov	r25, r24
    2de8:	91 70       	andi	r25, 0x01	; 1
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	61 e0       	ldi	r22, 0x01	; 1
    2dee:	49 2f       	mov	r20, r25
    2df0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    2df4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2df6:	86 95       	lsr	r24
    2df8:	86 95       	lsr	r24
    2dfa:	86 95       	lsr	r24
    2dfc:	98 2f       	mov	r25, r24
    2dfe:	91 70       	andi	r25, 0x01	; 1
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	60 e0       	ldi	r22, 0x00	; 0
    2e04:	49 2f       	mov	r20, r25
    2e06:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	60 e0       	ldi	r22, 0x00	; 0
    2e0e:	41 e0       	ldi	r20, 0x01	; 1
    2e10:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	a0 e0       	ldi	r26, 0x00	; 0
    2e1a:	b0 e4       	ldi	r27, 0x40	; 64
    2e1c:	8b 87       	std	Y+11, r24	; 0x0b
    2e1e:	9c 87       	std	Y+12, r25	; 0x0c
    2e20:	ad 87       	std	Y+13, r26	; 0x0d
    2e22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	4a e7       	ldi	r20, 0x7A	; 122
    2e32:	55 e4       	ldi	r21, 0x45	; 69
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	8f 83       	std	Y+7, r24	; 0x07
    2e3e:	98 87       	std	Y+8, r25	; 0x08
    2e40:	a9 87       	std	Y+9, r26	; 0x09
    2e42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e44:	6f 81       	ldd	r22, Y+7	; 0x07
    2e46:	78 85       	ldd	r23, Y+8	; 0x08
    2e48:	89 85       	ldd	r24, Y+9	; 0x09
    2e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e8       	ldi	r20, 0x80	; 128
    2e52:	5f e3       	ldi	r21, 0x3F	; 63
    2e54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e58:	88 23       	and	r24, r24
    2e5a:	2c f4       	brge	.+10     	; 0x2e66 <WriteNLatch+0x218>
		__ticks = 1;
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	9e 83       	std	Y+6, r25	; 0x06
    2e62:	8d 83       	std	Y+5, r24	; 0x05
    2e64:	3f c0       	rjmp	.+126    	; 0x2ee4 <WriteNLatch+0x296>
	else if (__tmp > 65535)
    2e66:	6f 81       	ldd	r22, Y+7	; 0x07
    2e68:	78 85       	ldd	r23, Y+8	; 0x08
    2e6a:	89 85       	ldd	r24, Y+9	; 0x09
    2e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e6e:	20 e0       	ldi	r18, 0x00	; 0
    2e70:	3f ef       	ldi	r19, 0xFF	; 255
    2e72:	4f e7       	ldi	r20, 0x7F	; 127
    2e74:	57 e4       	ldi	r21, 0x47	; 71
    2e76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e7a:	18 16       	cp	r1, r24
    2e7c:	4c f5       	brge	.+82     	; 0x2ed0 <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e2       	ldi	r20, 0x20	; 32
    2e8c:	51 e4       	ldi	r21, 0x41	; 65
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	bc 01       	movw	r22, r24
    2e98:	cd 01       	movw	r24, r26
    2e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	9e 83       	std	Y+6, r25	; 0x06
    2ea4:	8d 83       	std	Y+5, r24	; 0x05
    2ea6:	0f c0       	rjmp	.+30     	; 0x2ec6 <WriteNLatch+0x278>
    2ea8:	80 e9       	ldi	r24, 0x90	; 144
    2eaa:	91 e0       	ldi	r25, 0x01	; 1
    2eac:	9c 83       	std	Y+4, r25	; 0x04
    2eae:	8b 83       	std	Y+3, r24	; 0x03
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <WriteNLatch+0x266>
    2eb8:	9c 83       	std	Y+4, r25	; 0x04
    2eba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	9e 83       	std	Y+6, r25	; 0x06
    2ec4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	69 f7       	brne	.-38     	; 0x2ea8 <WriteNLatch+0x25a>
    2ece:	14 c0       	rjmp	.+40     	; 0x2ef8 <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed2:	78 85       	ldd	r23, Y+8	; 0x08
    2ed4:	89 85       	ldd	r24, Y+9	; 0x09
    2ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	9e 83       	std	Y+6, r25	; 0x06
    2ee2:	8d 83       	std	Y+5, r24	; 0x05
    2ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee8:	9a 83       	std	Y+2, r25	; 0x02
    2eea:	89 83       	std	Y+1, r24	; 0x01
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <WriteNLatch+0x2a2>
    2ef4:	9a 83       	std	Y+2, r25	; 0x02
    2ef6:	89 83       	std	Y+1, r24	; 0x01
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	60 e0       	ldi	r22, 0x00	; 0
    2efc:	40 e0       	ldi	r20, 0x00	; 0
    2efe:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    2f06:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2f08:	6e 96       	adiw	r28, 0x1e	; 30
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <LCD_enuSendData+0x6>
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2f26:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	62 e0       	ldi	r22, 0x02	; 2
    2f2c:	41 e0       	ldi	r20, 0x01	; 1
    2f2e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	61 e0       	ldi	r22, 0x01	; 1
    2f36:	40 e0       	ldi	r20, 0x00	; 0
    2f38:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <WriteNLatch>



	return Local_enu_ErrorState;
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f44:	0f 90       	pop	r0
    2f46:	0f 90       	pop	r0
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	08 95       	ret

00002f4e <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    2f4e:	df 93       	push	r29
    2f50:	cf 93       	push	r28
    2f52:	00 d0       	rcall	.+0      	; 0x2f54 <LCD_enuSendCommand+0x6>
    2f54:	cd b7       	in	r28, 0x3d	; 61
    2f56:	de b7       	in	r29, 0x3e	; 62
    2f58:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2f5a:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	62 e0       	ldi	r22, 0x02	; 2
    2f60:	40 e0       	ldi	r20, 0x00	; 0
    2f62:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	61 e0       	ldi	r22, 0x01	; 1
    2f6a:	40 e0       	ldi	r20, 0x00	; 0
    2f6c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    2f70:	8a 81       	ldd	r24, Y+2	; 0x02
    2f72:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <LCD_u8SendString+0x6>
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <LCD_u8SendString+0x8>
    2f8e:	0f 92       	push	r0
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	9c 83       	std	Y+4, r25	; 0x04
    2f96:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2f98:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    2f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	f9 f0       	breq	.+62     	; 0x2fe0 <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    2fa2:	19 82       	std	Y+1, r1	; 0x01
    2fa4:	0f c0       	rjmp	.+30     	; 0x2fc4 <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    2fa6:	89 81       	ldd	r24, Y+1	; 0x01
    2fa8:	28 2f       	mov	r18, r24
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	8b 81       	ldd	r24, Y+3	; 0x03
    2fae:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb0:	fc 01       	movw	r30, r24
    2fb2:	e2 0f       	add	r30, r18
    2fb4:	f3 1f       	adc	r31, r19
    2fb6:	90 81       	ld	r25, Z
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	8f 5f       	subi	r24, 0xFF	; 255
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	89 2f       	mov	r24, r25
    2fc0:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	28 2f       	mov	r18, r24
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	8b 81       	ldd	r24, Y+3	; 0x03
    2fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    2fce:	fc 01       	movw	r30, r24
    2fd0:	e2 0f       	add	r30, r18
    2fd2:	f3 1f       	adc	r31, r19
    2fd4:	80 81       	ld	r24, Z
    2fd6:	88 23       	and	r24, r24
    2fd8:	31 f7       	brne	.-52     	; 0x2fa6 <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
    2fde:	04 c0       	rjmp	.+8      	; 0x2fe8 <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    2fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe6:	8d 83       	std	Y+5, r24	; 0x05
    2fe8:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	0f 90       	pop	r0
    2ff4:	cf 91       	pop	r28
    2ff6:	df 91       	pop	r29
    2ff8:	08 95       	ret

00002ffa <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
    3002:	a0 97       	sbiw	r28, 0x20	; 32
    3004:	0f b6       	in	r0, 0x3f	; 63
    3006:	f8 94       	cli
    3008:	de bf       	out	0x3e, r29	; 62
    300a:	0f be       	out	0x3f, r0	; 63
    300c:	cd bf       	out	0x3d, r28	; 61
    300e:	6b 8f       	std	Y+27, r22	; 0x1b
    3010:	7c 8f       	std	Y+28, r23	; 0x1c
    3012:	8d 8f       	std	Y+29, r24	; 0x1d
    3014:	9e 8f       	std	Y+30, r25	; 0x1e
    3016:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3018:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    301a:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    301c:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    301e:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    3020:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    3022:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3024:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3026:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3028:	be 8d       	ldd	r27, Y+30	; 0x1e
    302a:	bb 23       	and	r27, r27
    302c:	94 f4       	brge	.+36     	; 0x3052 <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    302e:	8d e2       	ldi	r24, 0x2D	; 45
    3030:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <LCD_enuSendData>
		Copy_u8data*=-1;
    3034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3038:	ad 8d       	ldd	r26, Y+29	; 0x1d
    303a:	be 8d       	ldd	r27, Y+30	; 0x1e
    303c:	b0 95       	com	r27
    303e:	a0 95       	com	r26
    3040:	90 95       	com	r25
    3042:	81 95       	neg	r24
    3044:	9f 4f       	sbci	r25, 0xFF	; 255
    3046:	af 4f       	sbci	r26, 0xFF	; 255
    3048:	bf 4f       	sbci	r27, 0xFF	; 255
    304a:	8b 8f       	std	Y+27, r24	; 0x1b
    304c:	9c 8f       	std	Y+28, r25	; 0x1c
    304e:	ad 8f       	std	Y+29, r26	; 0x1d
    3050:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    3052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3056:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3058:	be 8d       	ldd	r27, Y+30	; 0x1e
    305a:	00 97       	sbiw	r24, 0x00	; 0
    305c:	a1 05       	cpc	r26, r1
    305e:	b1 05       	cpc	r27, r1
    3060:	09 f0       	breq	.+2      	; 0x3064 <LCD_enuIntegerToString+0x6a>
    3062:	4b c0       	rjmp	.+150    	; 0x30fa <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    3064:	8d 81       	ldd	r24, Y+5	; 0x05
    3066:	28 2f       	mov	r18, r24
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	ce 01       	movw	r24, r28
    306c:	07 96       	adiw	r24, 0x07	; 7
    306e:	fc 01       	movw	r30, r24
    3070:	e2 0f       	add	r30, r18
    3072:	f3 1f       	adc	r31, r19
    3074:	80 e3       	ldi	r24, 0x30	; 48
    3076:	80 83       	st	Z, r24
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	8f 5f       	subi	r24, 0xFF	; 255
    307c:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    307e:	8d 81       	ldd	r24, Y+5	; 0x05
    3080:	28 2f       	mov	r18, r24
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	ce 01       	movw	r24, r28
    3086:	07 96       	adiw	r24, 0x07	; 7
    3088:	fc 01       	movw	r30, r24
    308a:	e2 0f       	add	r30, r18
    308c:	f3 1f       	adc	r31, r19
    308e:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    3090:	8e 81       	ldd	r24, Y+6	; 0x06
    3092:	88 a3       	std	Y+32, r24	; 0x20
    3094:	7f c0       	rjmp	.+254    	; 0x3194 <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    3096:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3098:	28 2f       	mov	r18, r24
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e0       	ldi	r20, 0x00	; 0
    309e:	50 e0       	ldi	r21, 0x00	; 0
    30a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30a4:	ad 8d       	ldd	r26, Y+29	; 0x1d
    30a6:	be 8d       	ldd	r27, Y+30	; 0x1e
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    30b6:	8d 81       	ldd	r24, Y+5	; 0x05
    30b8:	28 2f       	mov	r18, r24
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	8c 81       	ldd	r24, Y+4	; 0x04
    30be:	48 2f       	mov	r20, r24
    30c0:	40 5d       	subi	r20, 0xD0	; 208
    30c2:	ce 01       	movw	r24, r28
    30c4:	07 96       	adiw	r24, 0x07	; 7
    30c6:	fc 01       	movw	r30, r24
    30c8:	e2 0f       	add	r30, r18
    30ca:	f3 1f       	adc	r31, r19
    30cc:	40 83       	st	Z, r20
    30ce:	8d 81       	ldd	r24, Y+5	; 0x05
    30d0:	8f 5f       	subi	r24, 0xFF	; 255
    30d2:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    30d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30d6:	28 2f       	mov	r18, r24
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e0       	ldi	r20, 0x00	; 0
    30dc:	50 e0       	ldi	r21, 0x00	; 0
    30de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30e2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    30e4:	be 8d       	ldd	r27, Y+30	; 0x1e
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	0e 94 92 19 	call	0x3324	; 0x3324 <__divmodsi4>
    30ee:	da 01       	movw	r26, r20
    30f0:	c9 01       	movw	r24, r18
    30f2:	8b 8f       	std	Y+27, r24	; 0x1b
    30f4:	9c 8f       	std	Y+28, r25	; 0x1c
    30f6:	ad 8f       	std	Y+29, r26	; 0x1d
    30f8:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    30fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30fe:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3100:	be 8d       	ldd	r27, Y+30	; 0x1e
    3102:	00 97       	sbiw	r24, 0x00	; 0
    3104:	a1 05       	cpc	r26, r1
    3106:	b1 05       	cpc	r27, r1
    3108:	31 f6       	brne	.-116    	; 0x3096 <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    310a:	8d 81       	ldd	r24, Y+5	; 0x05
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	ce 01       	movw	r24, r28
    3112:	07 96       	adiw	r24, 0x07	; 7
    3114:	fc 01       	movw	r30, r24
    3116:	e2 0f       	add	r30, r18
    3118:	f3 1f       	adc	r31, r19
    311a:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    311c:	8d 81       	ldd	r24, Y+5	; 0x05
    311e:	81 50       	subi	r24, 0x01	; 1
    3120:	8a 83       	std	Y+2, r24	; 0x02
    3122:	2c c0       	rjmp	.+88     	; 0x317c <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    3124:	8b 81       	ldd	r24, Y+3	; 0x03
    3126:	28 2f       	mov	r18, r24
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	ce 01       	movw	r24, r28
    312c:	07 96       	adiw	r24, 0x07	; 7
    312e:	fc 01       	movw	r30, r24
    3130:	e2 0f       	add	r30, r18
    3132:	f3 1f       	adc	r31, r19
    3134:	80 81       	ld	r24, Z
    3136:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	48 2f       	mov	r20, r24
    313c:	50 e0       	ldi	r21, 0x00	; 0
    313e:	8a 81       	ldd	r24, Y+2	; 0x02
    3140:	28 2f       	mov	r18, r24
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	ce 01       	movw	r24, r28
    3146:	07 96       	adiw	r24, 0x07	; 7
    3148:	fc 01       	movw	r30, r24
    314a:	e2 0f       	add	r30, r18
    314c:	f3 1f       	adc	r31, r19
    314e:	20 81       	ld	r18, Z
    3150:	ce 01       	movw	r24, r28
    3152:	07 96       	adiw	r24, 0x07	; 7
    3154:	fc 01       	movw	r30, r24
    3156:	e4 0f       	add	r30, r20
    3158:	f5 1f       	adc	r31, r21
    315a:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    315c:	8a 81       	ldd	r24, Y+2	; 0x02
    315e:	28 2f       	mov	r18, r24
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	ce 01       	movw	r24, r28
    3164:	07 96       	adiw	r24, 0x07	; 7
    3166:	fc 01       	movw	r30, r24
    3168:	e2 0f       	add	r30, r18
    316a:	f3 1f       	adc	r31, r19
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	80 83       	st	Z, r24

        Local_u8Start++;
    3170:	8b 81       	ldd	r24, Y+3	; 0x03
    3172:	8f 5f       	subi	r24, 0xFF	; 255
    3174:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    3176:	8a 81       	ldd	r24, Y+2	; 0x02
    3178:	81 50       	subi	r24, 0x01	; 1
    317a:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    317c:	9b 81       	ldd	r25, Y+3	; 0x03
    317e:	8a 81       	ldd	r24, Y+2	; 0x02
    3180:	98 17       	cp	r25, r24
    3182:	80 f2       	brcs	.-96     	; 0x3124 <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    3184:	ce 01       	movw	r24, r28
    3186:	07 96       	adiw	r24, 0x07	; 7
    3188:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    3190:	8e 81       	ldd	r24, Y+6	; 0x06
    3192:	88 a3       	std	Y+32, r24	; 0x20
    3194:	88 a1       	ldd	r24, Y+32	; 0x20
}
    3196:	a0 96       	adiw	r28, 0x20	; 32
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	08 95       	ret

000031a8 <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	27 97       	sbiw	r28, 0x07	; 7
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
    31bc:	8b 83       	std	Y+3, r24	; 0x03
    31be:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    31c0:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    31c2:	8b 81       	ldd	r24, Y+3	; 0x03
    31c4:	81 31       	cpi	r24, 0x11	; 17
    31c6:	18 f4       	brcc	.+6      	; 0x31ce <LCD_u8SetPosXY+0x26>
    31c8:	8c 81       	ldd	r24, Y+4	; 0x04
    31ca:	83 30       	cpi	r24, 0x03	; 3
    31cc:	18 f0       	brcs	.+6      	; 0x31d4 <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    31ce:	2a 81       	ldd	r18, Y+2	; 0x02
    31d0:	2f 83       	std	Y+7, r18	; 0x07
    31d2:	23 c0       	rjmp	.+70     	; 0x321a <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    31d4:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    31d6:	8c 81       	ldd	r24, Y+4	; 0x04
    31d8:	28 2f       	mov	r18, r24
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	3e 83       	std	Y+6, r19	; 0x06
    31de:	2d 83       	std	Y+5, r18	; 0x05
    31e0:	8d 81       	ldd	r24, Y+5	; 0x05
    31e2:	9e 81       	ldd	r25, Y+6	; 0x06
    31e4:	81 30       	cpi	r24, 0x01	; 1
    31e6:	91 05       	cpc	r25, r1
    31e8:	31 f0       	breq	.+12     	; 0x31f6 <LCD_u8SetPosXY+0x4e>
    31ea:	2d 81       	ldd	r18, Y+5	; 0x05
    31ec:	3e 81       	ldd	r19, Y+6	; 0x06
    31ee:	22 30       	cpi	r18, 0x02	; 2
    31f0:	31 05       	cpc	r19, r1
    31f2:	21 f0       	breq	.+8      	; 0x31fc <LCD_u8SetPosXY+0x54>
    31f4:	07 c0       	rjmp	.+14     	; 0x3204 <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	89 83       	std	Y+1, r24	; 0x01
    31fa:	05 c0       	rjmp	.+10     	; 0x3206 <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    31fc:	8b 81       	ldd	r24, Y+3	; 0x03
    31fe:	80 5c       	subi	r24, 0xC0	; 192
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	01 c0       	rjmp	.+2      	; 0x3206 <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    3204:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	80 68       	ori	r24, 0x80	; 128
    320a:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    3216:	3a 81       	ldd	r19, Y+2	; 0x02
    3218:	3f 83       	std	Y+7, r19	; 0x07
    321a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    321c:	27 96       	adiw	r28, 0x07	; 7
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	cf 91       	pop	r28
    322a:	df 91       	pop	r29
    322c:	08 95       	ret

0000322e <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    322e:	df 93       	push	r29
    3230:	cf 93       	push	r28
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	27 97       	sbiw	r28, 0x07	; 7
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	9d 83       	std	Y+5, r25	; 0x05
    3244:	8c 83       	std	Y+4, r24	; 0x04
    3246:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3248:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    324a:	8c 81       	ldd	r24, Y+4	; 0x04
    324c:	9d 81       	ldd	r25, Y+5	; 0x05
    324e:	00 97       	sbiw	r24, 0x00	; 0
    3250:	19 f0       	breq	.+6      	; 0x3258 <LCD_u8StoreCustomChar+0x2a>
    3252:	8e 81       	ldd	r24, Y+6	; 0x06
    3254:	89 30       	cpi	r24, 0x09	; 9
    3256:	18 f0       	brcs	.+6      	; 0x325e <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    3258:	8b 81       	ldd	r24, Y+3	; 0x03
    325a:	8f 83       	std	Y+7, r24	; 0x07
    325c:	2a c0       	rjmp	.+84     	; 0x32b2 <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    325e:	8e 81       	ldd	r24, Y+6	; 0x06
    3260:	88 2f       	mov	r24, r24
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	88 0f       	add	r24, r24
    3266:	99 1f       	adc	r25, r25
    3268:	88 0f       	add	r24, r24
    326a:	99 1f       	adc	r25, r25
    326c:	88 0f       	add	r24, r24
    326e:	99 1f       	adc	r25, r25
    3270:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	80 64       	ori	r24, 0x40	; 64
    3276:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    327e:	19 82       	std	Y+1, r1	; 0x01
    3280:	0e c0       	rjmp	.+28     	; 0x329e <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	28 2f       	mov	r18, r24
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	8c 81       	ldd	r24, Y+4	; 0x04
    328a:	9d 81       	ldd	r25, Y+5	; 0x05
    328c:	fc 01       	movw	r30, r24
    328e:	e2 0f       	add	r30, r18
    3290:	f3 1f       	adc	r31, r19
    3292:	80 81       	ld	r24, Z
    3294:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    3298:	89 81       	ldd	r24, Y+1	; 0x01
    329a:	8f 5f       	subi	r24, 0xFF	; 255
    329c:	89 83       	std	Y+1, r24	; 0x01
    329e:	89 81       	ldd	r24, Y+1	; 0x01
    32a0:	88 30       	cpi	r24, 0x08	; 8
    32a2:	78 f3       	brcs	.-34     	; 0x3282 <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    32a4:	82 e0       	ldi	r24, 0x02	; 2
    32a6:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	8f 83       	std	Y+7, r24	; 0x07
    32b2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    32b4:	27 96       	adiw	r28, 0x07	; 7
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <LCD_u8DisplayCustomChar+0x6>
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <LCD_u8DisplayCustomChar+0x8>
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	8a 83       	std	Y+2, r24	; 0x02
    32d4:	6b 83       	std	Y+3, r22	; 0x03
    32d6:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    32d8:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    32da:	8c 81       	ldd	r24, Y+4	; 0x04
    32dc:	6b 81       	ldd	r22, Y+3	; 0x03
    32de:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    32ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    32ee:	0f 90       	pop	r0
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	cf 91       	pop	r28
    32f8:	df 91       	pop	r29
    32fa:	08 95       	ret

000032fc <main>:





int main(){
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62

	TWI_enuInit();
    3304:	0e 94 d6 06 	call	0xdac	; 0xdac <TWI_enuInit>
	while(1){
//		#if(TWI_MODE_M_or_S == TWI_MASTER_MODE)



		if(TWI_enuStartCondition() == TWI_STATUS_OK ){
    3308:	0e 94 07 07 	call	0xe0e	; 0xe0e <TWI_enuStartCondition>
    330c:	81 30       	cpi	r24, 0x01	; 1
    330e:	e1 f7       	brne	.-8      	; 0x3308 <main+0xc>

			TWI_enuSetSlaveOperation(5, TWI_WriteOperation);
    3310:	85 e0       	ldi	r24, 0x05	; 5
    3312:	60 e0       	ldi	r22, 0x00	; 0
    3314:	0e 94 76 07 	call	0xeec	; 0xeec <TWI_enuSetSlaveOperation>
			TWI_enuWriteData('@');
    3318:	80 e4       	ldi	r24, 0x40	; 64
    331a:	0e 94 af 07 	call	0xf5e	; 0xf5e <TWI_enuWriteData>
			TWI_enuStopCondition();
    331e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <TWI_enuStopCondition>
    3322:	f2 cf       	rjmp	.-28     	; 0x3308 <main+0xc>

00003324 <__divmodsi4>:
    3324:	97 fb       	bst	r25, 7
    3326:	09 2e       	mov	r0, r25
    3328:	05 26       	eor	r0, r21
    332a:	0e d0       	rcall	.+28     	; 0x3348 <__divmodsi4_neg1>
    332c:	57 fd       	sbrc	r21, 7
    332e:	04 d0       	rcall	.+8      	; 0x3338 <__divmodsi4_neg2>
    3330:	14 d0       	rcall	.+40     	; 0x335a <__udivmodsi4>
    3332:	0a d0       	rcall	.+20     	; 0x3348 <__divmodsi4_neg1>
    3334:	00 1c       	adc	r0, r0
    3336:	38 f4       	brcc	.+14     	; 0x3346 <__divmodsi4_exit>

00003338 <__divmodsi4_neg2>:
    3338:	50 95       	com	r21
    333a:	40 95       	com	r20
    333c:	30 95       	com	r19
    333e:	21 95       	neg	r18
    3340:	3f 4f       	sbci	r19, 0xFF	; 255
    3342:	4f 4f       	sbci	r20, 0xFF	; 255
    3344:	5f 4f       	sbci	r21, 0xFF	; 255

00003346 <__divmodsi4_exit>:
    3346:	08 95       	ret

00003348 <__divmodsi4_neg1>:
    3348:	f6 f7       	brtc	.-4      	; 0x3346 <__divmodsi4_exit>
    334a:	90 95       	com	r25
    334c:	80 95       	com	r24
    334e:	70 95       	com	r23
    3350:	61 95       	neg	r22
    3352:	7f 4f       	sbci	r23, 0xFF	; 255
    3354:	8f 4f       	sbci	r24, 0xFF	; 255
    3356:	9f 4f       	sbci	r25, 0xFF	; 255
    3358:	08 95       	ret

0000335a <__udivmodsi4>:
    335a:	a1 e2       	ldi	r26, 0x21	; 33
    335c:	1a 2e       	mov	r1, r26
    335e:	aa 1b       	sub	r26, r26
    3360:	bb 1b       	sub	r27, r27
    3362:	fd 01       	movw	r30, r26
    3364:	0d c0       	rjmp	.+26     	; 0x3380 <__udivmodsi4_ep>

00003366 <__udivmodsi4_loop>:
    3366:	aa 1f       	adc	r26, r26
    3368:	bb 1f       	adc	r27, r27
    336a:	ee 1f       	adc	r30, r30
    336c:	ff 1f       	adc	r31, r31
    336e:	a2 17       	cp	r26, r18
    3370:	b3 07       	cpc	r27, r19
    3372:	e4 07       	cpc	r30, r20
    3374:	f5 07       	cpc	r31, r21
    3376:	20 f0       	brcs	.+8      	; 0x3380 <__udivmodsi4_ep>
    3378:	a2 1b       	sub	r26, r18
    337a:	b3 0b       	sbc	r27, r19
    337c:	e4 0b       	sbc	r30, r20
    337e:	f5 0b       	sbc	r31, r21

00003380 <__udivmodsi4_ep>:
    3380:	66 1f       	adc	r22, r22
    3382:	77 1f       	adc	r23, r23
    3384:	88 1f       	adc	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	1a 94       	dec	r1
    338a:	69 f7       	brne	.-38     	; 0x3366 <__udivmodsi4_loop>
    338c:	60 95       	com	r22
    338e:	70 95       	com	r23
    3390:	80 95       	com	r24
    3392:	90 95       	com	r25
    3394:	9b 01       	movw	r18, r22
    3396:	ac 01       	movw	r20, r24
    3398:	bd 01       	movw	r22, r26
    339a:	cf 01       	movw	r24, r30
    339c:	08 95       	ret

0000339e <__prologue_saves__>:
    339e:	2f 92       	push	r2
    33a0:	3f 92       	push	r3
    33a2:	4f 92       	push	r4
    33a4:	5f 92       	push	r5
    33a6:	6f 92       	push	r6
    33a8:	7f 92       	push	r7
    33aa:	8f 92       	push	r8
    33ac:	9f 92       	push	r9
    33ae:	af 92       	push	r10
    33b0:	bf 92       	push	r11
    33b2:	cf 92       	push	r12
    33b4:	df 92       	push	r13
    33b6:	ef 92       	push	r14
    33b8:	ff 92       	push	r15
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	cf 93       	push	r28
    33c0:	df 93       	push	r29
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	ca 1b       	sub	r28, r26
    33c8:	db 0b       	sbc	r29, r27
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	09 94       	ijmp

000033d6 <__epilogue_restores__>:
    33d6:	2a 88       	ldd	r2, Y+18	; 0x12
    33d8:	39 88       	ldd	r3, Y+17	; 0x11
    33da:	48 88       	ldd	r4, Y+16	; 0x10
    33dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    33de:	6e 84       	ldd	r6, Y+14	; 0x0e
    33e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    33e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    33e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    33e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    33e8:	b9 84       	ldd	r11, Y+9	; 0x09
    33ea:	c8 84       	ldd	r12, Y+8	; 0x08
    33ec:	df 80       	ldd	r13, Y+7	; 0x07
    33ee:	ee 80       	ldd	r14, Y+6	; 0x06
    33f0:	fd 80       	ldd	r15, Y+5	; 0x05
    33f2:	0c 81       	ldd	r16, Y+4	; 0x04
    33f4:	1b 81       	ldd	r17, Y+3	; 0x03
    33f6:	aa 81       	ldd	r26, Y+2	; 0x02
    33f8:	b9 81       	ldd	r27, Y+1	; 0x01
    33fa:	ce 0f       	add	r28, r30
    33fc:	d1 1d       	adc	r29, r1
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	f8 94       	cli
    3402:	de bf       	out	0x3e, r29	; 62
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	cd bf       	out	0x3d, r28	; 61
    3408:	ed 01       	movw	r28, r26
    340a:	08 95       	ret

0000340c <_exit>:
    340c:	f8 94       	cli

0000340e <__stop_program>:
    340e:	ff cf       	rjmp	.-2      	; 0x340e <__stop_program>
