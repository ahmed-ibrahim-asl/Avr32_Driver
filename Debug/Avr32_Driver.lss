
Avr32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00002f2c  00002fc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800090  00800090  00002ff0  2**0
                  ALLOC
  3 .stab         00003ad4  00000000  00000000  00002ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020af  00000000  00000000  00006ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008e23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000aa6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b957  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c704  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000caf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__vector_1>
       8:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_2>
       c:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 17 	call	0x2e02	; 0x2e02 <main>
      8a:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 85 17 	jmp	0x2f0a	; 0x2f0a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_vidInit>:
#include "UART_priv.h"
#include "UART_config.h"
/************************************************************************************/


void UART_vidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)

		CLR_BIT(UCSRC_REG, UCSRB_UMSEL);
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e0 e4       	ldi	r30, 0x40	; 64
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24

		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)
			CLR_BIT(UCSRA_REG, UCSRA_U2X);
     b5c:	ab e2       	ldi	r26, 0x2B	; 43
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	eb e2       	ldi	r30, 0x2B	; 43
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8d 7f       	andi	r24, 0xFD	; 253
     b68:	8c 93       	st	X, r24
			SET_BIT(UCSRC_REG, UCSRB_UMSEL);
	#endif


	#if(UART_MPCM_OPERATION == UART_SINGLE_MODE)
			CLR_BIT(UCSRA_REG, UCSRA_MPCM);
     b6a:	ab e2       	ldi	r26, 0x2B	; 43
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb e2       	ldi	r30, 0x2B	; 43
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	8c 93       	st	X, r24
			SET_BIT(UCSRA_REG, UCSRA_MPCM);
	#endif


	// Receiver Enable
	SET_BIT(UCSRA_REG, UCSRB_RXEN);
     b78:	ab e2       	ldi	r26, 0x2B	; 43
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	eb e2       	ldi	r30, 0x2B	; 43
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	8c 93       	st	X, r24

	// Transmitter Enable
	SET_BIT(UCSRA_REG, UCSRB_TXEN);
     b86:	ab e2       	ldi	r26, 0x2B	; 43
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	eb e2       	ldi	r30, 0x2B	; 43
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 60       	ori	r24, 0x08	; 8
     b92:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
		SET_BIT(UCSRB_REG, UCSRB_UCSZ2);

	#elif(UART_DATA_BIT == UART_DATA_8bit)

		SET_BIT(UCSRC_REG, UCSRC_UCSZ0);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     bb0:	aa e2       	ldi	r26, 0x2A	; 42
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e2       	ldi	r30, 0x2A	; 42
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	8c 93       	st	X, r24


	/********************* Setting No Stop Bits *********************/
	#if(UART_STOP_BIT == UART_STOP_1bit)

		CLR_BIT(UCSRA_REG, UCSRC_USBS);
     bbe:	ab e2       	ldi	r26, 0x2B	; 43
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	87 7f       	andi	r24, 0xF7	; 247
     bca:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSRC_UPM0);
		SET_BIT(UCSRC_REG, UCSRC_UPM1);

	#elif(UART_PARITY_MODE == UART_PARITY_ODD)

		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     bcc:	a0 e4       	ldi	r26, 0x40	; 64
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e0 e4       	ldi	r30, 0x40	; 64
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 61       	ori	r24, 0x10	; 16
     bd8:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 62       	ori	r24, 0x20	; 32
     be6:	8c 93       	st	X, r24

	#endif
	/**************************************************************/

	/********************** Setting  Baud Rate **********************/
	UART_setBaudRate(9600);
     be8:	80 e8       	ldi	r24, 0x80	; 128
     bea:	95 e2       	ldi	r25, 0x25	; 37
     bec:	0e 94 99 06 	call	0xd32	; 0xd32 <UART_setBaudRate>
	/***************************************************************/


}
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <UART_enuSendChar>:


ErrorStatus_t UART_enuSendChar(uint8_t copy_u8Data){
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <UART_enuSendChar+0x6>
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     c02:	19 82       	std	Y+1, r1	; 0x01


	// Wait until transmit buffer is empty
	while(GET_BIT(UCSRA_REG, UCSRA_UDE) == 0);
     c04:	eb e2       	ldi	r30, 0x2B	; 43
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	82 95       	swap	r24
     c0c:	86 95       	lsr	r24
     c0e:	87 70       	andi	r24, 0x07	; 7
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	81 70       	andi	r24, 0x01	; 1
     c16:	90 70       	andi	r25, 0x00	; 0
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	a1 f3       	breq	.-24     	; 0xc04 <UART_enuSendChar+0xe>

	UDR_REG = copy_u8Data;
     c1c:	ec e2       	ldi	r30, 0x2C	; 44
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	80 83       	st	Z, r24


	Local_enuErrrorState = ERROR_STATUS_OK;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <UART_enuSendString>:


ErrorStatus_t UART_enuSendString(uint8_t* copy_pu8Data){
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	00 d0       	rcall	.+0      	; 0xc3a <UART_enuSendString+0x6>
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <UART_enuSendString+0x8>
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	9b 83       	std	Y+3, r25	; 0x03
     c42:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     c44:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	9b 81       	ldd	r25, Y+3	; 0x03
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	69 f4       	brne	.+26     	; 0xc68 <UART_enuSendString+0x34>
		return Local_enuErrrorState;
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	8c 83       	std	Y+4, r24	; 0x04
     c52:	16 c0       	rjmp	.+44     	; 0xc80 <UART_enuSendString+0x4c>
	}

	else{

		while(*copy_pu8Data != '\0'){
			UART_enuSendChar(*copy_pu8Data);
     c54:	ea 81       	ldd	r30, Y+2	; 0x02
     c56:	fb 81       	ldd	r31, Y+3	; 0x03
     c58:	80 81       	ld	r24, Z
     c5a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <UART_enuSendChar>
			copy_pu8Data++;
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	9b 81       	ldd	r25, Y+3	; 0x03
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	9b 83       	std	Y+3, r25	; 0x03
     c66:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
	}

	else{

		while(*copy_pu8Data != '\0'){
     c68:	ea 81       	ldd	r30, Y+2	; 0x02
     c6a:	fb 81       	ldd	r31, Y+3	; 0x03
     c6c:	80 81       	ld	r24, Z
     c6e:	88 23       	and	r24, r24
     c70:	89 f7       	brne	.-30     	; 0xc54 <UART_enuSendString+0x20>
			UART_enuSendChar(*copy_pu8Data);
			copy_pu8Data++;
		}
		UART_enuSendChar('\0');
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <UART_enuSendChar>
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	8c 83       	std	Y+4, r24	; 0x04
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <UART_enuRecieveChar>:

ErrorStatus_t UART_enuRecieveChar(uint8_t* copy_pu8Data){
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <UART_enuRecieveChar+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <UART_enuRecieveChar+0x8>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     ca0:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	9b 81       	ldd	r25, Y+3	; 0x03
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <UART_enuRecieveChar+0x20>
		return Local_enuErrrorState;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	8c 83       	std	Y+4, r24	; 0x04
     cae:	0f c0       	rjmp	.+30     	; 0xcce <UART_enuRecieveChar+0x3e>
	}

	else{

		// Receive Complete
		while(GET_BIT(UCSRA_REG, UCSRA_RXC) == 0);
     cb0:	eb e2       	ldi	r30, 0x2B	; 43
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	88 23       	and	r24, r24
     cb8:	dc f7       	brge	.-10     	; 0xcb0 <UART_enuRecieveChar+0x20>

		*copy_pu8Data = UDR_REG;
     cba:	ec e2       	ldi	r30, 0x2C	; 44
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	ea 81       	ldd	r30, Y+2	; 0x02
     cc2:	fb 81       	ldd	r31, Y+3	; 0x03
     cc4:	80 83       	st	Z, r24
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	8c 83       	std	Y+4, r24	; 0x04
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <UART_enuRecieveString>:



ErrorStatus_t UART_enuRecieveString(uint8_t* copy_pu8Data){
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <UART_enuRecieveString+0x6>
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <UART_enuRecieveString+0x8>
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	9b 83       	std	Y+3, r25	; 0x03
     cec:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     cee:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	61 f4       	brne	.+24     	; 0xd10 <UART_enuRecieveString+0x32>
		return Local_enuErrrorState;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	8c 83       	std	Y+4, r24	; 0x04
     cfc:	12 c0       	rjmp	.+36     	; 0xd22 <UART_enuRecieveString+0x44>
	}

	else{
		while(*copy_pu8Data != '\0'){
			UART_enuRecieveChar(copy_pu8Data);
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_enuRecieveChar>
			copy_pu8Data+=1;
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	9b 81       	ldd	r25, Y+3	; 0x03
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	9b 83       	std	Y+3, r25	; 0x03
     d0e:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_pu8Data == NULL){
		return Local_enuErrrorState;
	}

	else{
		while(*copy_pu8Data != '\0'){
     d10:	ea 81       	ldd	r30, Y+2	; 0x02
     d12:	fb 81       	ldd	r31, Y+3	; 0x03
     d14:	80 81       	ld	r24, Z
     d16:	88 23       	and	r24, r24
     d18:	91 f7       	brne	.-28     	; 0xcfe <UART_enuRecieveString+0x20>
			copy_pu8Data+=1;
		}
	}


	Local_enuErrrorState = ERROR_STATUS_OK;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	8c 83       	std	Y+4, r24	; 0x04
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <UART_setBaudRate>:


//!
static void UART_setBaudRate(uint16 copy_u8UART_BaudRate){
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <UART_setBaudRate+0x6>
     d38:	0f 92       	push	r0
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	9b 83       	std	Y+3, r25	; 0x03
     d40:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t copy_u8Temp = 0;
     d42:	19 82       	std	Y+1, r1	; 0x01

	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)
		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)

		copy_u8Temp = ((UART_MC_OSC_FREQ/(uint8_t)(16*copy_u8UART_BaudRate))-1);
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	82 95       	swap	r24
     d4a:	92 95       	swap	r25
     d4c:	90 7f       	andi	r25, 0xF0	; 240
     d4e:	98 27       	eor	r25, r24
     d50:	80 7f       	andi	r24, 0xF0	; 240
     d52:	98 27       	eor	r25, r24
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	94 e2       	ldi	r25, 0x24	; 36
     d60:	a4 ef       	ldi	r26, 0xF4	; 244
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__divmodsi4>
     d6c:	da 01       	movw	r26, r20
     d6e:	c9 01       	movw	r24, r18
     d70:	81 50       	subi	r24, 0x01	; 1
     d72:	89 83       	std	Y+1, r24	; 0x01

		UBRRL_REG |= copy_u8Temp;
     d74:	aa e2       	ldi	r26, 0x2A	; 42
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ea e2       	ldi	r30, 0x2A	; 42
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	90 81       	ld	r25, Z
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	89 2b       	or	r24, r25
     d82:	8c 93       	st	X, r24
		UBRRH_REG |= (copy_u8Temp>>8);
     d84:	a0 e4       	ldi	r26, 0x40	; 64
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e0 e4       	ldi	r30, 0x40	; 64
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	28 2f       	mov	r18, r24
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	89 2f       	mov	r24, r25
     d98:	99 0f       	add	r25, r25
     d9a:	99 0b       	sbc	r25, r25
     d9c:	82 2b       	or	r24, r18
     d9e:	8c 93       	st	X, r24
	#elif(UART_SYNC_ASYNC_SELECT == UART_SYNCMODE)
		copy_u8Temp = ((UART_MC_OSC_FREQ/(uint8_t)(2*copy_u8UART_BaudRate))-1);
		UBRRL_REG |= copy_u8Temp;
		UBRRH_REG |= (copy_u8Temp>>8);
	#endif
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	0f 92       	push	r0
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     db6:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
     db8:	ef e5       	ldi	r30, 0x5F	; 95
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	88 23       	and	r24, r24
     dc0:	4c f0       	brlt	.+18     	; 0xdd4 <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
     dc2:	af e5       	ldi	r26, 0x5F	; 95
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	ef e5       	ldi	r30, 0x5F	; 95
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 68       	ori	r24, 0x80	; 128
     dce:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
}
     dd6:	0f 90       	pop	r0
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	08 95       	ret

00000dde <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
     dde:	df 93       	push	r29
     de0:	cf 93       	push	r28
     de2:	0f 92       	push	r0
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     de8:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
     dea:	ef e5       	ldi	r30, 0x5F	; 95
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	88 23       	and	r24, r24
     df2:	4c f4       	brge	.+18     	; 0xe06 <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
     df4:	af e5       	ldi	r26, 0x5F	; 95
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	ef e5       	ldi	r30, 0x5F	; 95
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	8f 77       	andi	r24, 0x7F	; 127
     e00:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
     e06:	89 81       	ldd	r24, Y+1	; 0x01
}
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	2a 97       	sbiw	r28, 0x0a	; 10
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	9b 83       	std	Y+3, r25	; 0x03
     e26:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
     e28:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	9b 81       	ldd	r25, Y+3	; 0x03
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	19 f4       	brne	.+6      	; 0xe38 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
     e32:	29 81       	ldd	r18, Y+1	; 0x01
     e34:	2a 87       	std	Y+10, r18	; 0x0a
     e36:	36 c1       	rjmp	.+620    	; 0x10a4 <EXTI_enuInit+0x294>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_ENABLED){
     e38:	ea 81       	ldd	r30, Y+2	; 0x02
     e3a:	fb 81       	ldd	r31, Y+3	; 0x03
     e3c:	80 81       	ld	r24, Z
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	09 f0       	breq	.+2      	; 0xe44 <EXTI_enuInit+0x34>
     e42:	64 c0       	rjmp	.+200    	; 0xf0c <EXTI_enuInit+0xfc>

			SET_BIT(GICR, INT0_switch);
     e44:	ab e5       	ldi	r26, 0x5B	; 91
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	eb e5       	ldi	r30, 0x5B	; 91
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 64       	ori	r24, 0x40	; 64
     e50:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_0].Sence_Level){
     e52:	ea 81       	ldd	r30, Y+2	; 0x02
     e54:	fb 81       	ldd	r31, Y+3	; 0x03
     e56:	81 81       	ldd	r24, Z+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	39 87       	std	Y+9, r19	; 0x09
     e5e:	28 87       	std	Y+8, r18	; 0x08
     e60:	88 85       	ldd	r24, Y+8	; 0x08
     e62:	99 85       	ldd	r25, Y+9	; 0x09
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	91 05       	cpc	r25, r1
     e68:	21 f1       	breq	.+72     	; 0xeb2 <EXTI_enuInit+0xa2>
     e6a:	28 85       	ldd	r18, Y+8	; 0x08
     e6c:	39 85       	ldd	r19, Y+9	; 0x09
     e6e:	22 30       	cpi	r18, 0x02	; 2
     e70:	31 05       	cpc	r19, r1
     e72:	2c f4       	brge	.+10     	; 0xe7e <EXTI_enuInit+0x6e>
     e74:	88 85       	ldd	r24, Y+8	; 0x08
     e76:	99 85       	ldd	r25, Y+9	; 0x09
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	61 f0       	breq	.+24     	; 0xe94 <EXTI_enuInit+0x84>
     e7c:	53 c0       	rjmp	.+166    	; 0xf24 <EXTI_enuInit+0x114>
     e7e:	28 85       	ldd	r18, Y+8	; 0x08
     e80:	39 85       	ldd	r19, Y+9	; 0x09
     e82:	22 30       	cpi	r18, 0x02	; 2
     e84:	31 05       	cpc	r19, r1
     e86:	21 f1       	breq	.+72     	; 0xed0 <EXTI_enuInit+0xc0>
     e88:	88 85       	ldd	r24, Y+8	; 0x08
     e8a:	99 85       	ldd	r25, Y+9	; 0x09
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	91 05       	cpc	r25, r1
     e90:	71 f1       	breq	.+92     	; 0xeee <EXTI_enuInit+0xde>
     e92:	48 c0       	rjmp	.+144    	; 0xf24 <EXTI_enuInit+0x114>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
     e94:	a5 e5       	ldi	r26, 0x55	; 85
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e5 e5       	ldi	r30, 0x55	; 85
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	8e 7f       	andi	r24, 0xFE	; 254
     ea0:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
     ea2:	a5 e5       	ldi	r26, 0x55	; 85
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e5 e5       	ldi	r30, 0x55	; 85
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8d 7f       	andi	r24, 0xFD	; 253
     eae:	8c 93       	st	X, r24
     eb0:	39 c0       	rjmp	.+114    	; 0xf24 <EXTI_enuInit+0x114>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
     eb2:	a5 e5       	ldi	r26, 0x55	; 85
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e5 e5       	ldi	r30, 0x55	; 85
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	81 60       	ori	r24, 0x01	; 1
     ebe:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
     ec0:	a5 e5       	ldi	r26, 0x55	; 85
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e5 e5       	ldi	r30, 0x55	; 85
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8d 7f       	andi	r24, 0xFD	; 253
     ecc:	8c 93       	st	X, r24
     ece:	2a c0       	rjmp	.+84     	; 0xf24 <EXTI_enuInit+0x114>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
     ed0:	a5 e5       	ldi	r26, 0x55	; 85
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e5 e5       	ldi	r30, 0x55	; 85
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	8e 7f       	andi	r24, 0xFE	; 254
     edc:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
     ede:	a5 e5       	ldi	r26, 0x55	; 85
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e5 e5       	ldi	r30, 0x55	; 85
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	82 60       	ori	r24, 0x02	; 2
     eea:	8c 93       	st	X, r24
     eec:	1b c0       	rjmp	.+54     	; 0xf24 <EXTI_enuInit+0x114>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
     eee:	a5 e5       	ldi	r26, 0x55	; 85
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e5 e5       	ldi	r30, 0x55	; 85
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	81 60       	ori	r24, 0x01	; 1
     efa:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
     efc:	a5 e5       	ldi	r26, 0x55	; 85
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e5 e5       	ldi	r30, 0x55	; 85
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	82 60       	ori	r24, 0x02	; 2
     f08:	8c 93       	st	X, r24
     f0a:	0c c0       	rjmp	.+24     	; 0xf24 <EXTI_enuInit+0x114>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_DISABLED){
     f0c:	ea 81       	ldd	r30, Y+2	; 0x02
     f0e:	fb 81       	ldd	r31, Y+3	; 0x03
     f10:	80 81       	ld	r24, Z
     f12:	88 23       	and	r24, r24
     f14:	39 f4       	brne	.+14     	; 0xf24 <EXTI_enuInit+0x114>

			CLR_BIT(GICR, INT0_switch);
     f16:	ab e5       	ldi	r26, 0x5B	; 91
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	eb e5       	ldi	r30, 0x5B	; 91
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	8f 7b       	andi	r24, 0xBF	; 191
     f22:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_ENABLED){
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	9b 81       	ldd	r25, Y+3	; 0x03
     f28:	fc 01       	movw	r30, r24
     f2a:	32 96       	adiw	r30, 0x02	; 2
     f2c:	80 81       	ld	r24, Z
     f2e:	81 30       	cpi	r24, 0x01	; 1
     f30:	09 f0       	breq	.+2      	; 0xf34 <EXTI_enuInit+0x124>
     f32:	66 c0       	rjmp	.+204    	; 0x1000 <EXTI_enuInit+0x1f0>

			SET_BIT(GICR, INT1_switch);
     f34:	ab e5       	ldi	r26, 0x5B	; 91
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	eb e5       	ldi	r30, 0x5B	; 91
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 68       	ori	r24, 0x80	; 128
     f40:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT_NO_1].Sence_Level){
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	9b 81       	ldd	r25, Y+3	; 0x03
     f46:	fc 01       	movw	r30, r24
     f48:	32 96       	adiw	r30, 0x02	; 2
     f4a:	81 81       	ldd	r24, Z+1	; 0x01
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	3f 83       	std	Y+7, r19	; 0x07
     f52:	2e 83       	std	Y+6, r18	; 0x06
     f54:	8e 81       	ldd	r24, Y+6	; 0x06
     f56:	9f 81       	ldd	r25, Y+7	; 0x07
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	91 05       	cpc	r25, r1
     f5c:	21 f1       	breq	.+72     	; 0xfa6 <EXTI_enuInit+0x196>
     f5e:	2e 81       	ldd	r18, Y+6	; 0x06
     f60:	3f 81       	ldd	r19, Y+7	; 0x07
     f62:	22 30       	cpi	r18, 0x02	; 2
     f64:	31 05       	cpc	r19, r1
     f66:	2c f4       	brge	.+10     	; 0xf72 <EXTI_enuInit+0x162>
     f68:	8e 81       	ldd	r24, Y+6	; 0x06
     f6a:	9f 81       	ldd	r25, Y+7	; 0x07
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	61 f0       	breq	.+24     	; 0xf88 <EXTI_enuInit+0x178>
     f70:	55 c0       	rjmp	.+170    	; 0x101c <EXTI_enuInit+0x20c>
     f72:	2e 81       	ldd	r18, Y+6	; 0x06
     f74:	3f 81       	ldd	r19, Y+7	; 0x07
     f76:	22 30       	cpi	r18, 0x02	; 2
     f78:	31 05       	cpc	r19, r1
     f7a:	21 f1       	breq	.+72     	; 0xfc4 <EXTI_enuInit+0x1b4>
     f7c:	8e 81       	ldd	r24, Y+6	; 0x06
     f7e:	9f 81       	ldd	r25, Y+7	; 0x07
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	91 05       	cpc	r25, r1
     f84:	71 f1       	breq	.+92     	; 0xfe2 <EXTI_enuInit+0x1d2>
     f86:	4a c0       	rjmp	.+148    	; 0x101c <EXTI_enuInit+0x20c>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
     f88:	a5 e5       	ldi	r26, 0x55	; 85
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e5 e5       	ldi	r30, 0x55	; 85
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8b 7f       	andi	r24, 0xFB	; 251
     f94:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
     f96:	a5 e5       	ldi	r26, 0x55	; 85
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e5 e5       	ldi	r30, 0x55	; 85
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	87 7f       	andi	r24, 0xF7	; 247
     fa2:	8c 93       	st	X, r24
     fa4:	3b c0       	rjmp	.+118    	; 0x101c <EXTI_enuInit+0x20c>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
     fa6:	a5 e5       	ldi	r26, 0x55	; 85
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e5 e5       	ldi	r30, 0x55	; 85
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	84 60       	ori	r24, 0x04	; 4
     fb2:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
     fb4:	a5 e5       	ldi	r26, 0x55	; 85
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e5 e5       	ldi	r30, 0x55	; 85
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	87 7f       	andi	r24, 0xF7	; 247
     fc0:	8c 93       	st	X, r24
     fc2:	2c c0       	rjmp	.+88     	; 0x101c <EXTI_enuInit+0x20c>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
     fc4:	a5 e5       	ldi	r26, 0x55	; 85
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e5       	ldi	r30, 0x55	; 85
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8b 7f       	andi	r24, 0xFB	; 251
     fd0:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
     fd2:	a5 e5       	ldi	r26, 0x55	; 85
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e5 e5       	ldi	r30, 0x55	; 85
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	8c 93       	st	X, r24
     fe0:	1d c0       	rjmp	.+58     	; 0x101c <EXTI_enuInit+0x20c>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
     fe2:	a5 e5       	ldi	r26, 0x55	; 85
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e5 e5       	ldi	r30, 0x55	; 85
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	84 60       	ori	r24, 0x04	; 4
     fee:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
     ff0:	a5 e5       	ldi	r26, 0x55	; 85
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e5 e5       	ldi	r30, 0x55	; 85
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	88 60       	ori	r24, 0x08	; 8
     ffc:	8c 93       	st	X, r24
     ffe:	0e c0       	rjmp	.+28     	; 0x101c <EXTI_enuInit+0x20c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_DISABLED){
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	9b 81       	ldd	r25, Y+3	; 0x03
    1004:	fc 01       	movw	r30, r24
    1006:	32 96       	adiw	r30, 0x02	; 2
    1008:	80 81       	ld	r24, Z
    100a:	88 23       	and	r24, r24
    100c:	39 f4       	brne	.+14     	; 0x101c <EXTI_enuInit+0x20c>

			CLR_BIT(GICR, INT1_switch);
    100e:	ab e5       	ldi	r26, 0x5B	; 91
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	eb e5       	ldi	r30, 0x5B	; 91
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	8f 77       	andi	r24, 0x7F	; 127
    101a:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_ENABLED){
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	9b 81       	ldd	r25, Y+3	; 0x03
    1020:	fc 01       	movw	r30, r24
    1022:	34 96       	adiw	r30, 0x04	; 4
    1024:	80 81       	ld	r24, Z
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	59 f5       	brne	.+86     	; 0x1080 <EXTI_enuInit+0x270>

			SET_BIT(GICR, INT2_switch);
    102a:	ab e5       	ldi	r26, 0x5B	; 91
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	eb e5       	ldi	r30, 0x5B	; 91
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 62       	ori	r24, 0x20	; 32
    1036:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_2].Sence_Level){
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	9b 81       	ldd	r25, Y+3	; 0x03
    103c:	fc 01       	movw	r30, r24
    103e:	34 96       	adiw	r30, 0x04	; 4
    1040:	81 81       	ldd	r24, Z+1	; 0x01
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	3d 83       	std	Y+5, r19	; 0x05
    1048:	2c 83       	std	Y+4, r18	; 0x04
    104a:	8c 81       	ldd	r24, Y+4	; 0x04
    104c:	9d 81       	ldd	r25, Y+5	; 0x05
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	91 05       	cpc	r25, r1
    1052:	31 f0       	breq	.+12     	; 0x1060 <EXTI_enuInit+0x250>
    1054:	2c 81       	ldd	r18, Y+4	; 0x04
    1056:	3d 81       	ldd	r19, Y+5	; 0x05
    1058:	23 30       	cpi	r18, 0x03	; 3
    105a:	31 05       	cpc	r19, r1
    105c:	49 f0       	breq	.+18     	; 0x1070 <EXTI_enuInit+0x260>
    105e:	1e c0       	rjmp	.+60     	; 0x109c <EXTI_enuInit+0x28c>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
    1060:	a4 e5       	ldi	r26, 0x54	; 84
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e4 e5       	ldi	r30, 0x54	; 84
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8f 7b       	andi	r24, 0xBF	; 191
    106c:	8c 93       	st	X, r24
    106e:	16 c0       	rjmp	.+44     	; 0x109c <EXTI_enuInit+0x28c>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
    1070:	a4 e5       	ldi	r26, 0x54	; 84
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e4 e5       	ldi	r30, 0x54	; 84
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	80 64       	ori	r24, 0x40	; 64
    107c:	8c 93       	st	X, r24
    107e:	0e c0       	rjmp	.+28     	; 0x109c <EXTI_enuInit+0x28c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_DISABLED){
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	9b 81       	ldd	r25, Y+3	; 0x03
    1084:	fc 01       	movw	r30, r24
    1086:	34 96       	adiw	r30, 0x04	; 4
    1088:	80 81       	ld	r24, Z
    108a:	88 23       	and	r24, r24
    108c:	39 f4       	brne	.+14     	; 0x109c <EXTI_enuInit+0x28c>

			CLR_BIT(GICR, INT2_switch);
    108e:	ab e5       	ldi	r26, 0x5B	; 91
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	eb e5       	ldi	r30, 0x5B	; 91
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8f 7d       	andi	r24, 0xDF	; 223
    109a:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    10a0:	39 81       	ldd	r19, Y+1	; 0x01
    10a2:	3a 87       	std	Y+10, r19	; 0x0a
    10a4:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    10a6:	2a 96       	adiw	r28, 0x0a	; 10
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <EXTI_enuEnableInterrupt>:

ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <EXTI_enuEnableInterrupt+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <EXTI_enuEnableInterrupt+0x8>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    10c6:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3c 83       	std	Y+4, r19	; 0x04
    10d0:	2b 83       	std	Y+3, r18	; 0x03
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	9c 81       	ldd	r25, Y+4	; 0x04
    10d6:	81 30       	cpi	r24, 0x01	; 1
    10d8:	91 05       	cpc	r25, r1
    10da:	89 f0       	breq	.+34     	; 0x10fe <EXTI_enuEnableInterrupt+0x46>
    10dc:	2b 81       	ldd	r18, Y+3	; 0x03
    10de:	3c 81       	ldd	r19, Y+4	; 0x04
    10e0:	22 30       	cpi	r18, 0x02	; 2
    10e2:	31 05       	cpc	r19, r1
    10e4:	a1 f0       	breq	.+40     	; 0x110e <EXTI_enuEnableInterrupt+0x56>
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	b9 f4       	brne	.+46     	; 0x111c <EXTI_enuEnableInterrupt+0x64>
			case INT_NO_0:

				SET_BIT(GICR, INT0_switch);
    10ee:	ab e5       	ldi	r26, 0x5B	; 91
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	eb e5       	ldi	r30, 0x5B	; 91
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	80 64       	ori	r24, 0x40	; 64
    10fa:	8c 93       	st	X, r24
    10fc:	0f c0       	rjmp	.+30     	; 0x111c <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_1:

				SET_BIT(GICR, INT1_switch);
    10fe:	ab e5       	ldi	r26, 0x5B	; 91
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	eb e5       	ldi	r30, 0x5B	; 91
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	80 68       	ori	r24, 0x80	; 128
    110a:	8c 93       	st	X, r24
    110c:	07 c0       	rjmp	.+14     	; 0x111c <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_2:

				SET_BIT(GICR, INT2_switch);
    110e:	ab e5       	ldi	r26, 0x5B	; 91
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	eb e5       	ldi	r30, 0x5B	; 91
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	80 62       	ori	r24, 0x20	; 32
    111a:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    1120:	89 81       	ldd	r24, Y+1	; 0x01
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <EXTI_enuDisableInterrupt>:

ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <EXTI_enuDisableInterrupt+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <EXTI_enuDisableInterrupt+0x8>
    1138:	0f 92       	push	r0
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    1140:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT_NO_2){
    1142:	8a 81       	ldd	r24, Y+2	; 0x02
    1144:	83 30       	cpi	r24, 0x03	; 3
    1146:	18 f0       	brcs	.+6      	; 0x114e <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
    1148:	29 81       	ldd	r18, Y+1	; 0x01
    114a:	2d 83       	std	Y+5, r18	; 0x05
    114c:	2e c0       	rjmp	.+92     	; 0x11aa <EXTI_enuDisableInterrupt+0x7a>
	}

	else{

		switch(Copy_u8IntNumber){
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	89 f0       	breq	.+34     	; 0x1184 <EXTI_enuDisableInterrupt+0x54>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	a1 f0       	breq	.+40     	; 0x1194 <EXTI_enuDisableInterrupt+0x64>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	b9 f4       	brne	.+46     	; 0x11a2 <EXTI_enuDisableInterrupt+0x72>
		case INT_NO_0:

			
			GICR &= ~(1<<INT0_switch);
    1174:	ab e5       	ldi	r26, 0x5B	; 91
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	eb e5       	ldi	r30, 0x5B	; 91
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	8f 7b       	andi	r24, 0xBF	; 191
    1180:	8c 93       	st	X, r24
    1182:	0f c0       	rjmp	.+30     	; 0x11a2 <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_1:

			GICR &= ~(1<<INT1_switch);
    1184:	ab e5       	ldi	r26, 0x5B	; 91
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	eb e5       	ldi	r30, 0x5B	; 91
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	8f 77       	andi	r24, 0x7F	; 127
    1190:	8c 93       	st	X, r24
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_2:

			GICR &= ~(1<<INT2_switch);
    1194:	ab e5       	ldi	r26, 0x5B	; 91
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	eb e5       	ldi	r30, 0x5B	; 91
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8f 7d       	andi	r24, 0xDF	; 223
    11a0:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    11a6:	99 81       	ldd	r25, Y+1	; 0x01
    11a8:	9d 83       	std	Y+5, r25	; 0x05
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	2c 97       	sbiw	r28, 0x0c	; 12
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	8a 83       	std	Y+2, r24	; 0x02
    11d2:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    11d4:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT_NO_2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	83 30       	cpi	r24, 0x03	; 3
    11da:	18 f4       	brcc	.+6      	; 0x11e2 <EXTI_enuSetSenseLevel+0x26>
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	18 f0       	brcs	.+6      	; 0x11e8 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
    11e2:	29 81       	ldd	r18, Y+1	; 0x01
    11e4:	2c 87       	std	Y+12, r18	; 0x0c
    11e6:	ef c0       	rjmp	.+478    	; 0x13c6 <EXTI_enuSetSenseLevel+0x20a>
	}

	else{

		switch(Copy_u8IntNumber){
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3b 87       	std	Y+11, r19	; 0x0b
    11f0:	2a 87       	std	Y+10, r18	; 0x0a
    11f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    11f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	91 05       	cpc	r25, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <EXTI_enuSetSenseLevel+0x42>
    11fc:	66 c0       	rjmp	.+204    	; 0x12ca <EXTI_enuSetSenseLevel+0x10e>
    11fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1200:	3b 85       	ldd	r19, Y+11	; 0x0b
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <EXTI_enuSetSenseLevel+0x4e>
    1208:	bb c0       	rjmp	.+374    	; 0x1380 <EXTI_enuSetSenseLevel+0x1c4>
    120a:	8a 85       	ldd	r24, Y+10	; 0x0a
    120c:	9b 85       	ldd	r25, Y+11	; 0x0b
    120e:	00 97       	sbiw	r24, 0x00	; 0
    1210:	09 f0       	breq	.+2      	; 0x1214 <EXTI_enuSetSenseLevel+0x58>
    1212:	d5 c0       	rjmp	.+426    	; 0x13be <EXTI_enuSetSenseLevel+0x202>
		case INT_NO_0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	39 87       	std	Y+9, r19	; 0x09
    121c:	28 87       	std	Y+8, r18	; 0x08
    121e:	88 85       	ldd	r24, Y+8	; 0x08
    1220:	99 85       	ldd	r25, Y+9	; 0x09
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	91 05       	cpc	r25, r1
    1226:	a9 f0       	breq	.+42     	; 0x1252 <EXTI_enuSetSenseLevel+0x96>
    1228:	28 85       	ldd	r18, Y+8	; 0x08
    122a:	39 85       	ldd	r19, Y+9	; 0x09
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	2c f4       	brge	.+10     	; 0x123c <EXTI_enuSetSenseLevel+0x80>
    1232:	88 85       	ldd	r24, Y+8	; 0x08
    1234:	99 85       	ldd	r25, Y+9	; 0x09
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	d9 f0       	breq	.+54     	; 0x1270 <EXTI_enuSetSenseLevel+0xb4>
    123a:	c1 c0       	rjmp	.+386    	; 0x13be <EXTI_enuSetSenseLevel+0x202>
    123c:	28 85       	ldd	r18, Y+8	; 0x08
    123e:	39 85       	ldd	r19, Y+9	; 0x09
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	21 f1       	breq	.+72     	; 0x128e <EXTI_enuSetSenseLevel+0xd2>
    1246:	88 85       	ldd	r24, Y+8	; 0x08
    1248:	99 85       	ldd	r25, Y+9	; 0x09
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	91 05       	cpc	r25, r1
    124e:	71 f1       	breq	.+92     	; 0x12ac <EXTI_enuSetSenseLevel+0xf0>
    1250:	b6 c0       	rjmp	.+364    	; 0x13be <EXTI_enuSetSenseLevel+0x202>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
    1252:	a5 e5       	ldi	r26, 0x55	; 85
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	e5 e5       	ldi	r30, 0x55	; 85
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    1260:	a5 e5       	ldi	r26, 0x55	; 85
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e5 e5       	ldi	r30, 0x55	; 85
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	8d 7f       	andi	r24, 0xFD	; 253
    126c:	8c 93       	st	X, r24
    126e:	a7 c0       	rjmp	.+334    	; 0x13be <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    1270:	a5 e5       	ldi	r26, 0x55	; 85
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e5 e5       	ldi	r30, 0x55	; 85
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8e 7f       	andi	r24, 0xFE	; 254
    127c:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    127e:	a5 e5       	ldi	r26, 0x55	; 85
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e5       	ldi	r30, 0x55	; 85
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	8d 7f       	andi	r24, 0xFD	; 253
    128a:	8c 93       	st	X, r24
    128c:	98 c0       	rjmp	.+304    	; 0x13be <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    128e:	a5 e5       	ldi	r26, 0x55	; 85
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e5 e5       	ldi	r30, 0x55	; 85
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	8e 7f       	andi	r24, 0xFE	; 254
    129a:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    129c:	a5 e5       	ldi	r26, 0x55	; 85
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e5 e5       	ldi	r30, 0x55	; 85
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	82 60       	ori	r24, 0x02	; 2
    12a8:	8c 93       	st	X, r24
    12aa:	89 c0       	rjmp	.+274    	; 0x13be <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    12ac:	a5 e5       	ldi	r26, 0x55	; 85
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e5       	ldi	r30, 0x55	; 85
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	81 60       	ori	r24, 0x01	; 1
    12b8:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    12ba:	a5 e5       	ldi	r26, 0x55	; 85
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e5 e5       	ldi	r30, 0x55	; 85
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	82 60       	ori	r24, 0x02	; 2
    12c6:	8c 93       	st	X, r24
    12c8:	7a c0       	rjmp	.+244    	; 0x13be <EXTI_enuSetSenseLevel+0x202>
			/**************************************************/

		case INT_NO_1:

			/**************** 1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3f 83       	std	Y+7, r19	; 0x07
    12d2:	2e 83       	std	Y+6, r18	; 0x06
    12d4:	8e 81       	ldd	r24, Y+6	; 0x06
    12d6:	9f 81       	ldd	r25, Y+7	; 0x07
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	a9 f0       	breq	.+42     	; 0x1308 <EXTI_enuSetSenseLevel+0x14c>
    12de:	2e 81       	ldd	r18, Y+6	; 0x06
    12e0:	3f 81       	ldd	r19, Y+7	; 0x07
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <EXTI_enuSetSenseLevel+0x136>
    12e8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ea:	9f 81       	ldd	r25, Y+7	; 0x07
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	d9 f0       	breq	.+54     	; 0x1326 <EXTI_enuSetSenseLevel+0x16a>
    12f0:	66 c0       	rjmp	.+204    	; 0x13be <EXTI_enuSetSenseLevel+0x202>
    12f2:	2e 81       	ldd	r18, Y+6	; 0x06
    12f4:	3f 81       	ldd	r19, Y+7	; 0x07
    12f6:	22 30       	cpi	r18, 0x02	; 2
    12f8:	31 05       	cpc	r19, r1
    12fa:	21 f1       	breq	.+72     	; 0x1344 <EXTI_enuSetSenseLevel+0x188>
    12fc:	8e 81       	ldd	r24, Y+6	; 0x06
    12fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1300:	83 30       	cpi	r24, 0x03	; 3
    1302:	91 05       	cpc	r25, r1
    1304:	71 f1       	breq	.+92     	; 0x1362 <EXTI_enuSetSenseLevel+0x1a6>
    1306:	5b c0       	rjmp	.+182    	; 0x13be <EXTI_enuSetSenseLevel+0x202>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    1308:	a5 e5       	ldi	r26, 0x55	; 85
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e5 e5       	ldi	r30, 0x55	; 85
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	84 60       	ori	r24, 0x04	; 4
    1314:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    1316:	a5 e5       	ldi	r26, 0x55	; 85
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e5 e5       	ldi	r30, 0x55	; 85
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	87 7f       	andi	r24, 0xF7	; 247
    1322:	8c 93       	st	X, r24
    1324:	4c c0       	rjmp	.+152    	; 0x13be <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    1326:	a5 e5       	ldi	r26, 0x55	; 85
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e5 e5       	ldi	r30, 0x55	; 85
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	8b 7f       	andi	r24, 0xFB	; 251
    1332:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    1334:	a5 e5       	ldi	r26, 0x55	; 85
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e5 e5       	ldi	r30, 0x55	; 85
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	87 7f       	andi	r24, 0xF7	; 247
    1340:	8c 93       	st	X, r24
    1342:	3d c0       	rjmp	.+122    	; 0x13be <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    1344:	a5 e5       	ldi	r26, 0x55	; 85
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e5 e5       	ldi	r30, 0x55	; 85
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8b 7f       	andi	r24, 0xFB	; 251
    1350:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    1352:	a5 e5       	ldi	r26, 0x55	; 85
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e5 e5       	ldi	r30, 0x55	; 85
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	88 60       	ori	r24, 0x08	; 8
    135e:	8c 93       	st	X, r24
    1360:	2e c0       	rjmp	.+92     	; 0x13be <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    1362:	a5 e5       	ldi	r26, 0x55	; 85
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e5 e5       	ldi	r30, 0x55	; 85
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	84 60       	ori	r24, 0x04	; 4
    136e:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    1370:	a5 e5       	ldi	r26, 0x55	; 85
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e5 e5       	ldi	r30, 0x55	; 85
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	88 60       	ori	r24, 0x08	; 8
    137c:	8c 93       	st	X, r24
    137e:	1f c0       	rjmp	.+62     	; 0x13be <EXTI_enuSetSenseLevel+0x202>


		case INT_NO_2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	3d 83       	std	Y+5, r19	; 0x05
    1388:	2c 83       	std	Y+4, r18	; 0x04
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	82 30       	cpi	r24, 0x02	; 2
    1390:	91 05       	cpc	r25, r1
    1392:	31 f0       	breq	.+12     	; 0x13a0 <EXTI_enuSetSenseLevel+0x1e4>
    1394:	2c 81       	ldd	r18, Y+4	; 0x04
    1396:	3d 81       	ldd	r19, Y+5	; 0x05
    1398:	23 30       	cpi	r18, 0x03	; 3
    139a:	31 05       	cpc	r19, r1
    139c:	49 f0       	breq	.+18     	; 0x13b0 <EXTI_enuSetSenseLevel+0x1f4>
    139e:	0f c0       	rjmp	.+30     	; 0x13be <EXTI_enuSetSenseLevel+0x202>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    13a0:	a4 e5       	ldi	r26, 0x54	; 84
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e4 e5       	ldi	r30, 0x54	; 84
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	8f 7b       	andi	r24, 0xBF	; 191
    13ac:	8c 93       	st	X, r24
    13ae:	07 c0       	rjmp	.+14     	; 0x13be <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    13b0:	a4 e5       	ldi	r26, 0x54	; 84
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e4 e5       	ldi	r30, 0x54	; 84
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	80 64       	ori	r24, 0x40	; 64
    13bc:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    13c2:	39 81       	ldd	r19, Y+1	; 0x01
    13c4:	3c 87       	std	Y+12, r19	; 0x0c
    13c6:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    13c8:	2c 96       	adiw	r28, 0x0c	; 12
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	00 d0       	rcall	.+0      	; 0x13e0 <EXTI_enuSetCallBack+0x6>
    13e0:	00 d0       	rcall	.+0      	; 0x13e2 <EXTI_enuSetCallBack+0x8>
    13e2:	0f 92       	push	r0
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	9b 83       	std	Y+3, r25	; 0x03
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    13ee:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	9b 81       	ldd	r25, Y+3	; 0x03
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	29 f4       	brne	.+10     	; 0x1402 <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    13f8:	83 e0       	ldi	r24, 0x03	; 3
    13fa:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	18 c0       	rjmp	.+48     	; 0x1432 <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT_NO_2){
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	83 30       	cpi	r24, 0x03	; 3
    1406:	28 f0       	brcs	.+10     	; 0x1412 <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    1408:	84 e0       	ldi	r24, 0x04	; 4
    140a:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	10 c0       	rjmp	.+32     	; 0x1432 <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	fc 01       	movw	r30, r24
    141e:	e0 57       	subi	r30, 0x70	; 112
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	8a 81       	ldd	r24, Y+2	; 0x02
    1424:	9b 81       	ldd	r25, Y+3	; 0x03
    1426:	91 83       	std	Z+1, r25	; 0x01
    1428:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	8d 83       	std	Y+5, r24	; 0x05
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <__vector_1>:


ISR(INT0_vect){
    1444:	1f 92       	push	r1
    1446:	0f 92       	push	r0
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	0f 92       	push	r0
    144c:	11 24       	eor	r1, r1
    144e:	2f 93       	push	r18
    1450:	3f 93       	push	r19
    1452:	4f 93       	push	r20
    1454:	5f 93       	push	r21
    1456:	6f 93       	push	r22
    1458:	7f 93       	push	r23
    145a:	8f 93       	push	r24
    145c:	9f 93       	push	r25
    145e:	af 93       	push	r26
    1460:	bf 93       	push	r27
    1462:	ef 93       	push	r30
    1464:	ff 93       	push	r31
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_0] != NULL){
    146e:	80 91 90 00 	lds	r24, 0x0090
    1472:	90 91 91 00 	lds	r25, 0x0091
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	29 f0       	breq	.+10     	; 0x1484 <__vector_1+0x40>
			EXTI_pfunISRFun[INT_NO_0]();
    147a:	e0 91 90 00 	lds	r30, 0x0090
    147e:	f0 91 91 00 	lds	r31, 0x0091
    1482:	09 95       	icall
		}
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <__vector_2>:




ISR(INT1_vect){
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_1] != NULL){
    14d4:	80 91 92 00 	lds	r24, 0x0092
    14d8:	90 91 93 00 	lds	r25, 0x0093
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	29 f0       	breq	.+10     	; 0x14ea <__vector_2+0x40>
			EXTI_pfunISRFun[INT_NO_1]();
    14e0:	e0 91 92 00 	lds	r30, 0x0092
    14e4:	f0 91 93 00 	lds	r31, 0x0093
    14e8:	09 95       	icall
		}
}
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	ff 91       	pop	r31
    14f0:	ef 91       	pop	r30
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <__vector_3>:



ISR(INT2_vect){
    1510:	1f 92       	push	r1
    1512:	0f 92       	push	r0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	0f 92       	push	r0
    1518:	11 24       	eor	r1, r1
    151a:	2f 93       	push	r18
    151c:	3f 93       	push	r19
    151e:	4f 93       	push	r20
    1520:	5f 93       	push	r21
    1522:	6f 93       	push	r22
    1524:	7f 93       	push	r23
    1526:	8f 93       	push	r24
    1528:	9f 93       	push	r25
    152a:	af 93       	push	r26
    152c:	bf 93       	push	r27
    152e:	ef 93       	push	r30
    1530:	ff 93       	push	r31
    1532:	df 93       	push	r29
    1534:	cf 93       	push	r28
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_2] != NULL){
    153a:	80 91 94 00 	lds	r24, 0x0094
    153e:	90 91 95 00 	lds	r25, 0x0095
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	29 f0       	breq	.+10     	; 0x1550 <__vector_3+0x40>
			EXTI_pfunISRFun[INT_NO_2]();
    1546:	e0 91 94 00 	lds	r30, 0x0094
    154a:	f0 91 95 00 	lds	r31, 0x0095
    154e:	09 95       	icall
		}
}
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	ff 91       	pop	r31
    1556:	ef 91       	pop	r30
    1558:	bf 91       	pop	r27
    155a:	af 91       	pop	r26
    155c:	9f 91       	pop	r25
    155e:	8f 91       	pop	r24
    1560:	7f 91       	pop	r23
    1562:	6f 91       	pop	r22
    1564:	5f 91       	pop	r21
    1566:	4f 91       	pop	r20
    1568:	3f 91       	pop	r19
    156a:	2f 91       	pop	r18
    156c:	0f 90       	pop	r0
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	0f 90       	pop	r0
    1572:	1f 90       	pop	r1
    1574:	18 95       	reti

00001576 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    1576:	df 93       	push	r29
    1578:	cf 93       	push	r28
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1580:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    1582:	ea e3       	ldi	r30, 0x3A	; 58
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 ef       	ldi	r24, 0xF0	; 240
    1588:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    158a:	eb e3       	ldi	r30, 0x3B	; 59
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	83 ec       	ldi	r24, 0xC3	; 195
    1590:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    1592:	e7 e3       	ldi	r30, 0x37	; 55
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 ef       	ldi	r24, 0xF0	; 240
    1598:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    159a:	e8 e3       	ldi	r30, 0x38	; 56
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	83 ec       	ldi	r24, 0xC3	; 195
    15a0:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    15a2:	e4 e3       	ldi	r30, 0x34	; 52
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 ef       	ldi	r24, 0xF0	; 240
    15a8:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    15aa:	e5 e3       	ldi	r30, 0x35	; 53
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	83 ec       	ldi	r24, 0xC3	; 195
    15b0:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    15b2:	e1 e3       	ldi	r30, 0x31	; 49
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 ef       	ldi	r24, 0xF0	; 240
    15b8:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    15ba:	e2 e3       	ldi	r30, 0x32	; 50
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	83 ec       	ldi	r24, 0xC3	; 195
    15c0:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c4:	0f 90       	pop	r0
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	27 97       	sbiw	r28, 0x07	; 7
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	8a 83       	std	Y+2, r24	; 0x02
    15e2:	6b 83       	std	Y+3, r22	; 0x03
    15e4:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    15e6:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	84 30       	cpi	r24, 0x04	; 4
    15ec:	08 f0       	brcs	.+2      	; 0x15f0 <DIO_enuSetPinDirection+0x24>
    15ee:	de c0       	rjmp	.+444    	; 0x17ac <DIO_enuSetPinDirection+0x1e0>
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	88 30       	cpi	r24, 0x08	; 8
    15f4:	08 f0       	brcs	.+2      	; 0x15f8 <DIO_enuSetPinDirection+0x2c>
    15f6:	da c0       	rjmp	.+436    	; 0x17ac <DIO_enuSetPinDirection+0x1e0>
    15f8:	8c 81       	ldd	r24, Y+4	; 0x04
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	08 f0       	brcs	.+2      	; 0x1600 <DIO_enuSetPinDirection+0x34>
    15fe:	d6 c0       	rjmp	.+428    	; 0x17ac <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	3f 83       	std	Y+7, r19	; 0x07
    1608:	2e 83       	std	Y+6, r18	; 0x06
    160a:	8e 81       	ldd	r24, Y+6	; 0x06
    160c:	9f 81       	ldd	r25, Y+7	; 0x07
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	91 05       	cpc	r25, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <DIO_enuSetPinDirection+0x4a>
    1614:	43 c0       	rjmp	.+134    	; 0x169c <DIO_enuSetPinDirection+0xd0>
    1616:	2e 81       	ldd	r18, Y+6	; 0x06
    1618:	3f 81       	ldd	r19, Y+7	; 0x07
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	2c f4       	brge	.+10     	; 0x162a <DIO_enuSetPinDirection+0x5e>
    1620:	8e 81       	ldd	r24, Y+6	; 0x06
    1622:	9f 81       	ldd	r25, Y+7	; 0x07
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	71 f0       	breq	.+28     	; 0x1644 <DIO_enuSetPinDirection+0x78>
    1628:	bc c0       	rjmp	.+376    	; 0x17a2 <DIO_enuSetPinDirection+0x1d6>
    162a:	2e 81       	ldd	r18, Y+6	; 0x06
    162c:	3f 81       	ldd	r19, Y+7	; 0x07
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	09 f4       	brne	.+2      	; 0x1636 <DIO_enuSetPinDirection+0x6a>
    1634:	5f c0       	rjmp	.+190    	; 0x16f4 <DIO_enuSetPinDirection+0x128>
    1636:	8e 81       	ldd	r24, Y+6	; 0x06
    1638:	9f 81       	ldd	r25, Y+7	; 0x07
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <DIO_enuSetPinDirection+0x76>
    1640:	85 c0       	rjmp	.+266    	; 0x174c <DIO_enuSetPinDirection+0x180>
    1642:	af c0       	rjmp	.+350    	; 0x17a2 <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	a1 f4       	brne	.+40     	; 0x1672 <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    164a:	aa e3       	ldi	r26, 0x3A	; 58
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	ea e3       	ldi	r30, 0x3A	; 58
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_enuSetPinDirection+0x9c>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_enuSetPinDirection+0x98>
    166c:	84 2b       	or	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	98 c0       	rjmp	.+304    	; 0x17a2 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    1672:	aa e3       	ldi	r26, 0x3A	; 58
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	ea e3       	ldi	r30, 0x3A	; 58
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_enuSetPinDirection+0xc4>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_enuSetPinDirection+0xc0>
    1694:	80 95       	com	r24
    1696:	84 23       	and	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	83 c0       	rjmp	.+262    	; 0x17a2 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	a1 f4       	brne	.+40     	; 0x16ca <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    16a2:	a7 e3       	ldi	r26, 0x37	; 55
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e7 e3       	ldi	r30, 0x37	; 55
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_enuSetPinDirection+0xf4>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_enuSetPinDirection+0xf0>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	6c c0       	rjmp	.+216    	; 0x17a2 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    16ca:	a7 e3       	ldi	r26, 0x37	; 55
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e7 e3       	ldi	r30, 0x37	; 55
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_enuSetPinDirection+0x11c>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_enuSetPinDirection+0x118>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	57 c0       	rjmp	.+174    	; 0x17a2 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	a1 f4       	brne	.+40     	; 0x1722 <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    16fa:	a4 e3       	ldi	r26, 0x34	; 52
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e4 e3       	ldi	r30, 0x34	; 52
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_enuSetPinDirection+0x14c>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_enuSetPinDirection+0x148>
    171c:	84 2b       	or	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	40 c0       	rjmp	.+128    	; 0x17a2 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    1722:	a4 e3       	ldi	r26, 0x34	; 52
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e4 e3       	ldi	r30, 0x34	; 52
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_enuSetPinDirection+0x174>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_enuSetPinDirection+0x170>
    1744:	80 95       	com	r24
    1746:	84 23       	and	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	2b c0       	rjmp	.+86     	; 0x17a2 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	a1 f4       	brne	.+40     	; 0x177a <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    1752:	a1 e3       	ldi	r26, 0x31	; 49
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e1 e3       	ldi	r30, 0x31	; 49
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <DIO_enuSetPinDirection+0x1a4>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <DIO_enuSetPinDirection+0x1a0>
    1774:	84 2b       	or	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    177a:	a1 e3       	ldi	r26, 0x31	; 49
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e1 e3       	ldi	r30, 0x31	; 49
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_enuSetPinDirection+0x1cc>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_enuSetPinDirection+0x1c8>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    17a6:	99 81       	ldd	r25, Y+1	; 0x01
    17a8:	9d 83       	std	Y+5, r25	; 0x05
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    17ac:	29 81       	ldd	r18, Y+1	; 0x01
    17ae:	2d 83       	std	Y+5, r18	; 0x05
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    17b2:	27 96       	adiw	r28, 0x07	; 7
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	27 97       	sbiw	r28, 0x07	; 7
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	6b 83       	std	Y+3, r22	; 0x03
    17dc:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    17de:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	84 30       	cpi	r24, 0x04	; 4
    17e4:	08 f0       	brcs	.+2      	; 0x17e8 <DIO_enuSetPinValue+0x24>
    17e6:	de c0       	rjmp	.+444    	; 0x19a4 <DIO_enuSetPinValue+0x1e0>
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	88 30       	cpi	r24, 0x08	; 8
    17ec:	08 f0       	brcs	.+2      	; 0x17f0 <DIO_enuSetPinValue+0x2c>
    17ee:	da c0       	rjmp	.+436    	; 0x19a4 <DIO_enuSetPinValue+0x1e0>
    17f0:	8c 81       	ldd	r24, Y+4	; 0x04
    17f2:	82 30       	cpi	r24, 0x02	; 2
    17f4:	08 f0       	brcs	.+2      	; 0x17f8 <DIO_enuSetPinValue+0x34>
    17f6:	d6 c0       	rjmp	.+428    	; 0x19a4 <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	3f 83       	std	Y+7, r19	; 0x07
    1800:	2e 83       	std	Y+6, r18	; 0x06
    1802:	8e 81       	ldd	r24, Y+6	; 0x06
    1804:	9f 81       	ldd	r25, Y+7	; 0x07
    1806:	81 30       	cpi	r24, 0x01	; 1
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <DIO_enuSetPinValue+0x4a>
    180c:	43 c0       	rjmp	.+134    	; 0x1894 <DIO_enuSetPinValue+0xd0>
    180e:	2e 81       	ldd	r18, Y+6	; 0x06
    1810:	3f 81       	ldd	r19, Y+7	; 0x07
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	31 05       	cpc	r19, r1
    1816:	2c f4       	brge	.+10     	; 0x1822 <DIO_enuSetPinValue+0x5e>
    1818:	8e 81       	ldd	r24, Y+6	; 0x06
    181a:	9f 81       	ldd	r25, Y+7	; 0x07
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	71 f0       	breq	.+28     	; 0x183c <DIO_enuSetPinValue+0x78>
    1820:	bc c0       	rjmp	.+376    	; 0x199a <DIO_enuSetPinValue+0x1d6>
    1822:	2e 81       	ldd	r18, Y+6	; 0x06
    1824:	3f 81       	ldd	r19, Y+7	; 0x07
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	09 f4       	brne	.+2      	; 0x182e <DIO_enuSetPinValue+0x6a>
    182c:	5f c0       	rjmp	.+190    	; 0x18ec <DIO_enuSetPinValue+0x128>
    182e:	8e 81       	ldd	r24, Y+6	; 0x06
    1830:	9f 81       	ldd	r25, Y+7	; 0x07
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	91 05       	cpc	r25, r1
    1836:	09 f4       	brne	.+2      	; 0x183a <DIO_enuSetPinValue+0x76>
    1838:	85 c0       	rjmp	.+266    	; 0x1944 <DIO_enuSetPinValue+0x180>
    183a:	af c0       	rjmp	.+350    	; 0x199a <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    183c:	8c 81       	ldd	r24, Y+4	; 0x04
    183e:	88 23       	and	r24, r24
    1840:	a1 f0       	breq	.+40     	; 0x186a <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    1842:	ab e3       	ldi	r26, 0x3B	; 59
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e3       	ldi	r30, 0x3B	; 59
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_enuSetPinValue+0x9c>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_enuSetPinValue+0x98>
    1864:	84 2b       	or	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	98 c0       	rjmp	.+304    	; 0x199a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    186a:	ab e3       	ldi	r26, 0x3B	; 59
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	eb e3       	ldi	r30, 0x3B	; 59
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	48 2f       	mov	r20, r24
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	28 2f       	mov	r18, r24
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	02 2e       	mov	r0, r18
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <DIO_enuSetPinValue+0xc4>
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	0a 94       	dec	r0
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <DIO_enuSetPinValue+0xc0>
    188c:	80 95       	com	r24
    188e:	84 23       	and	r24, r20
    1890:	8c 93       	st	X, r24
    1892:	83 c0       	rjmp	.+262    	; 0x199a <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	88 23       	and	r24, r24
    1898:	a1 f0       	breq	.+40     	; 0x18c2 <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    189a:	a8 e3       	ldi	r26, 0x38	; 56
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e8 e3       	ldi	r30, 0x38	; 56
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	48 2f       	mov	r20, r24
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 2e       	mov	r0, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_enuSetPinValue+0xf4>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_enuSetPinValue+0xf0>
    18bc:	84 2b       	or	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	6c c0       	rjmp	.+216    	; 0x199a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    18c2:	a8 e3       	ldi	r26, 0x38	; 56
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e8 e3       	ldi	r30, 0x38	; 56
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	02 2e       	mov	r0, r18
    18da:	02 c0       	rjmp	.+4      	; 0x18e0 <DIO_enuSetPinValue+0x11c>
    18dc:	88 0f       	add	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	0a 94       	dec	r0
    18e2:	e2 f7       	brpl	.-8      	; 0x18dc <DIO_enuSetPinValue+0x118>
    18e4:	80 95       	com	r24
    18e6:	84 23       	and	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	57 c0       	rjmp	.+174    	; 0x199a <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	88 23       	and	r24, r24
    18f0:	a1 f0       	breq	.+40     	; 0x191a <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    18f2:	a5 e3       	ldi	r26, 0x35	; 53
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e5 e3       	ldi	r30, 0x35	; 53
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_enuSetPinValue+0x14c>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_enuSetPinValue+0x148>
    1914:	84 2b       	or	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	40 c0       	rjmp	.+128    	; 0x199a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    191a:	a5 e3       	ldi	r26, 0x35	; 53
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e5 e3       	ldi	r30, 0x35	; 53
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	02 2e       	mov	r0, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <DIO_enuSetPinValue+0x174>
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	0a 94       	dec	r0
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <DIO_enuSetPinValue+0x170>
    193c:	80 95       	com	r24
    193e:	84 23       	and	r24, r20
    1940:	8c 93       	st	X, r24
    1942:	2b c0       	rjmp	.+86     	; 0x199a <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	88 23       	and	r24, r24
    1948:	a1 f0       	breq	.+40     	; 0x1972 <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    194a:	a2 e3       	ldi	r26, 0x32	; 50
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e2 e3       	ldi	r30, 0x32	; 50
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <DIO_enuSetPinValue+0x1a4>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <DIO_enuSetPinValue+0x1a0>
    196c:	84 2b       	or	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	14 c0       	rjmp	.+40     	; 0x199a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    1972:	a2 e3       	ldi	r26, 0x32	; 50
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e2 e3       	ldi	r30, 0x32	; 50
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <DIO_enuSetPinValue+0x1cc>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <DIO_enuSetPinValue+0x1c8>
    1994:	80 95       	com	r24
    1996:	84 23       	and	r24, r20
    1998:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    199e:	99 81       	ldd	r25, Y+1	; 0x01
    19a0:	9d 83       	std	Y+5, r25	; 0x05
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    19a4:	29 81       	ldd	r18, Y+1	; 0x01
    19a6:	2d 83       	std	Y+5, r18	; 0x05
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    19aa:	27 96       	adiw	r28, 0x07	; 7
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	28 97       	sbiw	r28, 0x08	; 8
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	8a 83       	std	Y+2, r24	; 0x02
    19d2:	6b 83       	std	Y+3, r22	; 0x03
    19d4:	5d 83       	std	Y+5, r21	; 0x05
    19d6:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    19d8:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	29 f4       	brne	.+10     	; 0x19ec <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    19e2:	83 e0       	ldi	r24, 0x03	; 3
    19e4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    19e6:	29 81       	ldd	r18, Y+1	; 0x01
    19e8:	28 87       	std	Y+8, r18	; 0x08
    19ea:	7f c0       	rjmp	.+254    	; 0x1aea <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	84 30       	cpi	r24, 0x04	; 4
    19f0:	08 f0       	brcs	.+2      	; 0x19f4 <DIO_enuGetPinValue+0x38>
    19f2:	79 c0       	rjmp	.+242    	; 0x1ae6 <DIO_enuGetPinValue+0x12a>
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	88 30       	cpi	r24, 0x08	; 8
    19f8:	08 f0       	brcs	.+2      	; 0x19fc <DIO_enuGetPinValue+0x40>
    19fa:	75 c0       	rjmp	.+234    	; 0x1ae6 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	48 2f       	mov	r20, r24
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	5f 83       	std	Y+7, r21	; 0x07
    1a04:	4e 83       	std	Y+6, r20	; 0x06
    1a06:	8e 81       	ldd	r24, Y+6	; 0x06
    1a08:	9f 81       	ldd	r25, Y+7	; 0x07
    1a0a:	81 30       	cpi	r24, 0x01	; 1
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	59 f1       	breq	.+86     	; 0x1a66 <DIO_enuGetPinValue+0xaa>
    1a10:	2e 81       	ldd	r18, Y+6	; 0x06
    1a12:	3f 81       	ldd	r19, Y+7	; 0x07
    1a14:	22 30       	cpi	r18, 0x02	; 2
    1a16:	31 05       	cpc	r19, r1
    1a18:	34 f4       	brge	.+12     	; 0x1a26 <DIO_enuGetPinValue+0x6a>
    1a1a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a1c:	5f 81       	ldd	r21, Y+7	; 0x07
    1a1e:	41 15       	cp	r20, r1
    1a20:	51 05       	cpc	r21, r1
    1a22:	69 f0       	breq	.+26     	; 0x1a3e <DIO_enuGetPinValue+0x82>
    1a24:	5b c0       	rjmp	.+182    	; 0x1adc <DIO_enuGetPinValue+0x120>
    1a26:	8e 81       	ldd	r24, Y+6	; 0x06
    1a28:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2a:	82 30       	cpi	r24, 0x02	; 2
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	79 f1       	breq	.+94     	; 0x1a8e <DIO_enuGetPinValue+0xd2>
    1a30:	2e 81       	ldd	r18, Y+6	; 0x06
    1a32:	3f 81       	ldd	r19, Y+7	; 0x07
    1a34:	23 30       	cpi	r18, 0x03	; 3
    1a36:	31 05       	cpc	r19, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <DIO_enuGetPinValue+0x80>
    1a3a:	3d c0       	rjmp	.+122    	; 0x1ab6 <DIO_enuGetPinValue+0xfa>
    1a3c:	4f c0       	rjmp	.+158    	; 0x1adc <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    1a3e:	e9 e3       	ldi	r30, 0x39	; 57
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	28 2f       	mov	r18, r24
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a9 01       	movw	r20, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_enuGetPinValue+0x9a>
    1a52:	55 95       	asr	r21
    1a54:	47 95       	ror	r20
    1a56:	8a 95       	dec	r24
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_enuGetPinValue+0x96>
    1a5a:	ca 01       	movw	r24, r20
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a60:	fd 81       	ldd	r31, Y+5	; 0x05
    1a62:	80 83       	st	Z, r24
    1a64:	3b c0       	rjmp	.+118    	; 0x1adc <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    1a66:	e6 e3       	ldi	r30, 0x36	; 54
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	88 2f       	mov	r24, r24
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a9 01       	movw	r20, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <DIO_enuGetPinValue+0xc2>
    1a7a:	55 95       	asr	r21
    1a7c:	47 95       	ror	r20
    1a7e:	8a 95       	dec	r24
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <DIO_enuGetPinValue+0xbe>
    1a82:	ca 01       	movw	r24, r20
    1a84:	81 70       	andi	r24, 0x01	; 1
    1a86:	ec 81       	ldd	r30, Y+4	; 0x04
    1a88:	fd 81       	ldd	r31, Y+5	; 0x05
    1a8a:	80 83       	st	Z, r24
    1a8c:	27 c0       	rjmp	.+78     	; 0x1adc <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    1a8e:	e3 e3       	ldi	r30, 0x33	; 51
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	28 2f       	mov	r18, r24
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a9 01       	movw	r20, r18
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <DIO_enuGetPinValue+0xea>
    1aa2:	55 95       	asr	r21
    1aa4:	47 95       	ror	r20
    1aa6:	8a 95       	dec	r24
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <DIO_enuGetPinValue+0xe6>
    1aaa:	ca 01       	movw	r24, r20
    1aac:	81 70       	andi	r24, 0x01	; 1
    1aae:	ec 81       	ldd	r30, Y+4	; 0x04
    1ab0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ab2:	80 83       	st	Z, r24
    1ab4:	13 c0       	rjmp	.+38     	; 0x1adc <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    1ab6:	e0 e3       	ldi	r30, 0x30	; 48
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	88 2f       	mov	r24, r24
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a9 01       	movw	r20, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <DIO_enuGetPinValue+0x112>
    1aca:	55 95       	asr	r21
    1acc:	47 95       	ror	r20
    1ace:	8a 95       	dec	r24
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <DIO_enuGetPinValue+0x10e>
    1ad2:	ca 01       	movw	r24, r20
    1ad4:	81 70       	andi	r24, 0x01	; 1
    1ad6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ad8:	fd 81       	ldd	r31, Y+5	; 0x05
    1ada:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    1ae0:	59 81       	ldd	r21, Y+1	; 0x01
    1ae2:	58 87       	std	Y+8, r21	; 0x08
    1ae4:	02 c0       	rjmp	.+4      	; 0x1aea <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	88 87       	std	Y+8, r24	; 0x08
    1aea:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    1aec:	28 96       	adiw	r28, 0x08	; 8
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <DIO_enuTogglePinValue+0x6>
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <DIO_enuTogglePinValue+0x8>
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <DIO_enuTogglePinValue+0xa>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
    1b0e:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1b10:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	84 30       	cpi	r24, 0x04	; 4
    1b16:	08 f0       	brcs	.+2      	; 0x1b1a <DIO_enuTogglePinValue+0x1c>
    1b18:	77 c0       	rjmp	.+238    	; 0x1c08 <DIO_enuTogglePinValue+0x10a>
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	88 30       	cpi	r24, 0x08	; 8
    1b1e:	08 f0       	brcs	.+2      	; 0x1b22 <DIO_enuTogglePinValue+0x24>
    1b20:	73 c0       	rjmp	.+230    	; 0x1c08 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	3e 83       	std	Y+6, r19	; 0x06
    1b2a:	2d 83       	std	Y+5, r18	; 0x05
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b30:	81 30       	cpi	r24, 0x01	; 1
    1b32:	91 05       	cpc	r25, r1
    1b34:	49 f1       	breq	.+82     	; 0x1b88 <DIO_enuTogglePinValue+0x8a>
    1b36:	2d 81       	ldd	r18, Y+5	; 0x05
    1b38:	3e 81       	ldd	r19, Y+6	; 0x06
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <DIO_enuTogglePinValue+0x4c>
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	61 f0       	breq	.+24     	; 0x1b60 <DIO_enuTogglePinValue+0x62>
    1b48:	5a c0       	rjmp	.+180    	; 0x1bfe <DIO_enuTogglePinValue+0x100>
    1b4a:	2d 81       	ldd	r18, Y+5	; 0x05
    1b4c:	3e 81       	ldd	r19, Y+6	; 0x06
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	31 05       	cpc	r19, r1
    1b52:	71 f1       	breq	.+92     	; 0x1bb0 <DIO_enuTogglePinValue+0xb2>
    1b54:	8d 81       	ldd	r24, Y+5	; 0x05
    1b56:	9e 81       	ldd	r25, Y+6	; 0x06
    1b58:	83 30       	cpi	r24, 0x03	; 3
    1b5a:	91 05       	cpc	r25, r1
    1b5c:	e9 f1       	breq	.+122    	; 0x1bd8 <DIO_enuTogglePinValue+0xda>
    1b5e:	4f c0       	rjmp	.+158    	; 0x1bfe <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    1b60:	ab e3       	ldi	r26, 0x3B	; 59
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	eb e3       	ldi	r30, 0x3B	; 59
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <DIO_enuTogglePinValue+0x80>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <DIO_enuTogglePinValue+0x7c>
    1b82:	84 27       	eor	r24, r20
    1b84:	8c 93       	st	X, r24
    1b86:	3b c0       	rjmp	.+118    	; 0x1bfe <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    1b88:	a8 e3       	ldi	r26, 0x38	; 56
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e8 e3       	ldi	r30, 0x38	; 56
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	48 2f       	mov	r20, r24
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 2e       	mov	r0, r18
    1ba0:	02 c0       	rjmp	.+4      	; 0x1ba6 <DIO_enuTogglePinValue+0xa8>
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	0a 94       	dec	r0
    1ba8:	e2 f7       	brpl	.-8      	; 0x1ba2 <DIO_enuTogglePinValue+0xa4>
    1baa:	84 27       	eor	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	27 c0       	rjmp	.+78     	; 0x1bfe <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    1bb0:	a5 e3       	ldi	r26, 0x35	; 53
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e5 e3       	ldi	r30, 0x35	; 53
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <DIO_enuTogglePinValue+0xd0>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <DIO_enuTogglePinValue+0xcc>
    1bd2:	84 27       	eor	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	13 c0       	rjmp	.+38     	; 0x1bfe <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    1bd8:	a2 e3       	ldi	r26, 0x32	; 50
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e2 e3       	ldi	r30, 0x32	; 50
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <DIO_enuTogglePinValue+0xf8>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <DIO_enuTogglePinValue+0xf4>
    1bfa:	84 27       	eor	r24, r20
    1bfc:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1c02:	99 81       	ldd	r25, Y+1	; 0x01
    1c04:	9c 83       	std	Y+4, r25	; 0x04
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    1c08:	29 81       	ldd	r18, Y+1	; 0x01
    1c0a:	2c 83       	std	Y+4, r18	; 0x04
    1c0c:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1c0e:	26 96       	adiw	r28, 0x06	; 6
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	00 d0       	rcall	.+0      	; 0x1c26 <DIO_enuSetPortDirection+0x6>
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <DIO_enuSetPortDirection+0x8>
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <DIO_enuSetPortDirection+0xa>
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	8a 83       	std	Y+2, r24	; 0x02
    1c30:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1c32:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	84 30       	cpi	r24, 0x04	; 4
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <DIO_enuSetPortDirection+0x1c>
    1c3a:	57 c0       	rjmp	.+174    	; 0x1cea <DIO_enuSetPortDirection+0xca>
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	82 30       	cpi	r24, 0x02	; 2
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <DIO_enuSetPortDirection+0x24>
    1c42:	53 c0       	rjmp	.+166    	; 0x1cea <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	3e 83       	std	Y+6, r19	; 0x06
    1c4c:	2d 83       	std	Y+5, r18	; 0x05
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	81 30       	cpi	r24, 0x01	; 1
    1c54:	91 05       	cpc	r25, r1
    1c56:	09 f1       	breq	.+66     	; 0x1c9a <DIO_enuSetPortDirection+0x7a>
    1c58:	2d 81       	ldd	r18, Y+5	; 0x05
    1c5a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c5c:	22 30       	cpi	r18, 0x02	; 2
    1c5e:	31 05       	cpc	r19, r1
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <DIO_enuSetPortDirection+0x4c>
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	61 f0       	breq	.+24     	; 0x1c82 <DIO_enuSetPortDirection+0x62>
    1c6a:	3a c0       	rjmp	.+116    	; 0x1ce0 <DIO_enuSetPortDirection+0xc0>
    1c6c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c6e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c70:	22 30       	cpi	r18, 0x02	; 2
    1c72:	31 05       	cpc	r19, r1
    1c74:	f1 f0       	breq	.+60     	; 0x1cb2 <DIO_enuSetPortDirection+0x92>
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7a:	83 30       	cpi	r24, 0x03	; 3
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	29 f1       	breq	.+74     	; 0x1cca <DIO_enuSetPortDirection+0xaa>
    1c80:	2f c0       	rjmp	.+94     	; 0x1ce0 <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	29 f4       	brne	.+10     	; 0x1c92 <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    1c88:	ea e3       	ldi	r30, 0x3A	; 58
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	80 83       	st	Z, r24
    1c90:	27 c0       	rjmp	.+78     	; 0x1ce0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    1c92:	ea e3       	ldi	r30, 0x3A	; 58
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	10 82       	st	Z, r1
    1c98:	23 c0       	rjmp	.+70     	; 0x1ce0 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	81 30       	cpi	r24, 0x01	; 1
    1c9e:	29 f4       	brne	.+10     	; 0x1caa <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    1ca0:	e7 e3       	ldi	r30, 0x37	; 55
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	8f ef       	ldi	r24, 0xFF	; 255
    1ca6:	80 83       	st	Z, r24
    1ca8:	1b c0       	rjmp	.+54     	; 0x1ce0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    1caa:	e7 e3       	ldi	r30, 0x37	; 55
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	10 82       	st	Z, r1
    1cb0:	17 c0       	rjmp	.+46     	; 0x1ce0 <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	29 f4       	brne	.+10     	; 0x1cc2 <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    1cb8:	e4 e3       	ldi	r30, 0x34	; 52
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	8f ef       	ldi	r24, 0xFF	; 255
    1cbe:	80 83       	st	Z, r24
    1cc0:	0f c0       	rjmp	.+30     	; 0x1ce0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    1cc2:	e4 e3       	ldi	r30, 0x34	; 52
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	10 82       	st	Z, r1
    1cc8:	0b c0       	rjmp	.+22     	; 0x1ce0 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	29 f4       	brne	.+10     	; 0x1cda <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    1cd0:	e1 e3       	ldi	r30, 0x31	; 49
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	80 83       	st	Z, r24
    1cd8:	03 c0       	rjmp	.+6      	; 0x1ce0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    1cda:	e1 e3       	ldi	r30, 0x31	; 49
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1ce4:	99 81       	ldd	r25, Y+1	; 0x01
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    1cea:	29 81       	ldd	r18, Y+1	; 0x01
    1cec:	2c 83       	std	Y+4, r18	; 0x04
    1cee:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1cf0:	26 96       	adiw	r28, 0x06	; 6
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <DIO_enuSetPortValue+0x6>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <DIO_enuSetPortValue+0x8>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <DIO_enuSetPortValue+0xa>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	8a 83       	std	Y+2, r24	; 0x02
    1d12:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1d14:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	84 30       	cpi	r24, 0x04	; 4
    1d1a:	08 f0       	brcs	.+2      	; 0x1d1e <DIO_enuSetPortValue+0x1c>
    1d1c:	57 c0       	rjmp	.+174    	; 0x1dcc <DIO_enuSetPortValue+0xca>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	82 30       	cpi	r24, 0x02	; 2
    1d22:	08 f0       	brcs	.+2      	; 0x1d26 <DIO_enuSetPortValue+0x24>
    1d24:	53 c0       	rjmp	.+166    	; 0x1dcc <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	3e 83       	std	Y+6, r19	; 0x06
    1d2e:	2d 83       	std	Y+5, r18	; 0x05
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	91 05       	cpc	r25, r1
    1d38:	09 f1       	breq	.+66     	; 0x1d7c <DIO_enuSetPortValue+0x7a>
    1d3a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d3c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d3e:	22 30       	cpi	r18, 0x02	; 2
    1d40:	31 05       	cpc	r19, r1
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <DIO_enuSetPortValue+0x4c>
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	61 f0       	breq	.+24     	; 0x1d64 <DIO_enuSetPortValue+0x62>
    1d4c:	3a c0       	rjmp	.+116    	; 0x1dc2 <DIO_enuSetPortValue+0xc0>
    1d4e:	2d 81       	ldd	r18, Y+5	; 0x05
    1d50:	3e 81       	ldd	r19, Y+6	; 0x06
    1d52:	22 30       	cpi	r18, 0x02	; 2
    1d54:	31 05       	cpc	r19, r1
    1d56:	f1 f0       	breq	.+60     	; 0x1d94 <DIO_enuSetPortValue+0x92>
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	83 30       	cpi	r24, 0x03	; 3
    1d5e:	91 05       	cpc	r25, r1
    1d60:	29 f1       	breq	.+74     	; 0x1dac <DIO_enuSetPortValue+0xaa>
    1d62:	2f c0       	rjmp	.+94     	; 0x1dc2 <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	88 23       	and	r24, r24
    1d68:	29 f0       	breq	.+10     	; 0x1d74 <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    1d6a:	eb e3       	ldi	r30, 0x3B	; 59
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	8f ef       	ldi	r24, 0xFF	; 255
    1d70:	80 83       	st	Z, r24
    1d72:	27 c0       	rjmp	.+78     	; 0x1dc2 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    1d74:	eb e3       	ldi	r30, 0x3B	; 59
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	10 82       	st	Z, r1
    1d7a:	23 c0       	rjmp	.+70     	; 0x1dc2 <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	88 23       	and	r24, r24
    1d80:	29 f0       	breq	.+10     	; 0x1d8c <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    1d82:	e8 e3       	ldi	r30, 0x38	; 56
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8f ef       	ldi	r24, 0xFF	; 255
    1d88:	80 83       	st	Z, r24
    1d8a:	1b c0       	rjmp	.+54     	; 0x1dc2 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    1d8c:	e8 e3       	ldi	r30, 0x38	; 56
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	10 82       	st	Z, r1
    1d92:	17 c0       	rjmp	.+46     	; 0x1dc2 <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	88 23       	and	r24, r24
    1d98:	29 f0       	breq	.+10     	; 0x1da4 <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    1d9a:	e5 e3       	ldi	r30, 0x35	; 53
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	8f ef       	ldi	r24, 0xFF	; 255
    1da0:	80 83       	st	Z, r24
    1da2:	0f c0       	rjmp	.+30     	; 0x1dc2 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    1da4:	e5 e3       	ldi	r30, 0x35	; 53
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	10 82       	st	Z, r1
    1daa:	0b c0       	rjmp	.+22     	; 0x1dc2 <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	88 23       	and	r24, r24
    1db0:	29 f0       	breq	.+10     	; 0x1dbc <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    1db2:	e2 e3       	ldi	r30, 0x32	; 50
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	8f ef       	ldi	r24, 0xFF	; 255
    1db8:	80 83       	st	Z, r24
    1dba:	03 c0       	rjmp	.+6      	; 0x1dc2 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    1dbc:	e2 e3       	ldi	r30, 0x32	; 50
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1dc6:	99 81       	ldd	r25, Y+1	; 0x01
    1dc8:	9c 83       	std	Y+4, r25	; 0x04
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    1dcc:	29 81       	ldd	r18, Y+1	; 0x01
    1dce:	2c 83       	std	Y+4, r18	; 0x04
    1dd0:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1dd2:	26 96       	adiw	r28, 0x06	; 6
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <ADC_enuInit>:


static void (*ADC_CallBackFunction)(void) = NULL;


void ADC_enuInit(){
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	2e 97       	sbiw	r28, 0x0e	; 14
    1dee:	0f b6       	in	r0, 0x3f	; 63
    1df0:	f8 94       	cli
    1df2:	de bf       	out	0x3e, r29	; 62
    1df4:	0f be       	out	0x3f, r0	; 63
    1df6:	cd bf       	out	0x3d, r28	; 61
	 * 5. Enabling ADC
	 * */


	/*************************** Selecting  voltage reference ***************************/
		ADMUX_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    1df8:	a7 e2       	ldi	r26, 0x27	; 39
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e7 e2       	ldi	r30, 0x27	; 39
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8f 71       	andi	r24, 0x1F	; 31
    1e04:	8c 93       	st	X, r24
		ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
    1e06:	a7 e2       	ldi	r26, 0x27	; 39
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e7 e2       	ldi	r30, 0x27	; 39
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 64       	ori	r24, 0x40	; 64
    1e12:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************** Selecting ADC MODE ********************************/
		#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
			SET_BIT(ADCSRA_REG, ADCSRA_ADATE);
    1e14:	a6 e2       	ldi	r26, 0x26	; 38
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e6 e2       	ldi	r30, 0x26	; 38
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	80 62       	ori	r24, 0x20	; 32
    1e20:	8c 93       	st	X, r24

			SFIOR_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    1e22:	a0 e5       	ldi	r26, 0x50	; 80
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e0 e5       	ldi	r30, 0x50	; 80
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8f 71       	andi	r24, 0x1F	; 31
    1e2e:	8c 93       	st	X, r24
			SFIOR_REG |= ADC_AUTO_TRIG_SRCE_SELECTOR;
    1e30:	a0 e5       	ldi	r26, 0x50	; 80
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e0 e5       	ldi	r30, 0x50	; 80
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* Selecting Adjustment *******************************/
		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			CLR_BIT(ADMUX_REG, ADMUX_ADLAR);
    1e3c:	a7 e2       	ldi	r26, 0x27	; 39
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e7 e2       	ldi	r30, 0x27	; 39
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	8f 7d       	andi	r24, 0xDF	; 223
    1e48:	8c 93       	st	X, r24
	/***************************** Clearing  Interrupt Flag *****************************/
		//! Notice: that ADIF to be cleared we write logical one (from data sheet)
		//So in initialization of ADC we write 1 to ADIF bit to make sure that the
		//flag is cleared in order to make sure that ADC ready for upcoming conversation
		// clearing interrupt flag
		SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    1e4a:	a6 e2       	ldi	r26, 0x26	; 38
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e6 e2       	ldi	r30, 0x26	; 38
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	80 61       	ori	r24, 0x10	; 16
    1e56:	8c 93       	st	X, r24
	/************************************************************************************/


	/*********************************** Enabling ADC ***********************************/
		SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    1e58:	a6 e2       	ldi	r26, 0x26	; 38
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e6 e2       	ldi	r30, 0x26	; 38
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	80 68       	ori	r24, 0x80	; 128
    1e64:	8c 93       	st	X, r24
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a8 e4       	ldi	r26, 0x48	; 72
    1e6c:	b3 e4       	ldi	r27, 0x43	; 67
    1e6e:	8b 87       	std	Y+11, r24	; 0x0b
    1e70:	9c 87       	std	Y+12, r25	; 0x0c
    1e72:	ad 87       	std	Y+13, r26	; 0x0d
    1e74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4a e7       	ldi	r20, 0x7A	; 122
    1e84:	55 e4       	ldi	r21, 0x45	; 69
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	8f 83       	std	Y+7, r24	; 0x07
    1e90:	98 87       	std	Y+8, r25	; 0x08
    1e92:	a9 87       	std	Y+9, r26	; 0x09
    1e94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e96:	6f 81       	ldd	r22, Y+7	; 0x07
    1e98:	78 85       	ldd	r23, Y+8	; 0x08
    1e9a:	89 85       	ldd	r24, Y+9	; 0x09
    1e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	2c f4       	brge	.+10     	; 0x1eb8 <ADC_enuInit+0xd4>
		__ticks = 1;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9e 83       	std	Y+6, r25	; 0x06
    1eb4:	8d 83       	std	Y+5, r24	; 0x05
    1eb6:	3f c0       	rjmp	.+126    	; 0x1f36 <ADC_enuInit+0x152>
	else if (__tmp > 65535)
    1eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eba:	78 85       	ldd	r23, Y+8	; 0x08
    1ebc:	89 85       	ldd	r24, Y+9	; 0x09
    1ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	3f ef       	ldi	r19, 0xFF	; 255
    1ec4:	4f e7       	ldi	r20, 0x7F	; 127
    1ec6:	57 e4       	ldi	r21, 0x47	; 71
    1ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ecc:	18 16       	cp	r1, r24
    1ece:	4c f5       	brge	.+82     	; 0x1f22 <ADC_enuInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e2       	ldi	r20, 0x20	; 32
    1ede:	51 e4       	ldi	r21, 0x41	; 65
    1ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	8d 83       	std	Y+5, r24	; 0x05
    1ef8:	0f c0       	rjmp	.+30     	; 0x1f18 <ADC_enuInit+0x134>
    1efa:	80 e9       	ldi	r24, 0x90	; 144
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	9c 83       	std	Y+4, r25	; 0x04
    1f00:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	9c 81       	ldd	r25, Y+4	; 0x04
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <ADC_enuInit+0x122>
    1f0a:	9c 83       	std	Y+4, r25	; 0x04
    1f0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	00 97       	sbiw	r24, 0x00	; 0
    1f1e:	69 f7       	brne	.-38     	; 0x1efa <ADC_enuInit+0x116>
    1f20:	14 c0       	rjmp	.+40     	; 0x1f4a <ADC_enuInit+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f22:	6f 81       	ldd	r22, Y+7	; 0x07
    1f24:	78 85       	ldd	r23, Y+8	; 0x08
    1f26:	89 85       	ldd	r24, Y+9	; 0x09
    1f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	9a 83       	std	Y+2, r25	; 0x02
    1f3c:	89 83       	std	Y+1, r24	; 0x01
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <ADC_enuInit+0x15e>
    1f46:	9a 83       	std	Y+2, r25	; 0x02
    1f48:	89 83       	std	Y+1, r24	; 0x01


	// Waiting until ADC is stablized
	_delay_ms(200);

}
    1f4a:	2e 96       	adiw	r28, 0x0e	; 14
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <ADC_enuStartConversion>:




ErrorStatus_t ADC_enuStartConversion(ADC_Channel_types ADC_channel_N){
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <ADC_enuStartConversion+0x6>
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1f68:	19 82       	std	Y+1, r1	; 0x01


	/******************************** Select ADC Channel ********************************/
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_clr_msk;
    1f6a:	a7 e2       	ldi	r26, 0x27	; 39
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e7 e2       	ldi	r30, 0x27	; 39
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	80 7e       	andi	r24, 0xE0	; 224
    1f76:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_channel_N;
    1f78:	a7 e2       	ldi	r26, 0x27	; 39
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e7 e2       	ldi	r30, 0x27	; 39
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	90 81       	ld	r25, Z
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	89 2b       	or	r24, r25
    1f86:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* ADC Start Conversion *******************************/
	//!!!!!!!!!!!!!!
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    1f88:	a6 e2       	ldi	r26, 0x26	; 38
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	e6 e2       	ldi	r30, 0x26	; 38
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	80 64       	ori	r24, 0x40	; 64
    1f94:	8c 93       	st	X, r24
	/************************************************************************************/

	return Local_enuErrrorState;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <ADC_GetResult>:



uint16 ADC_GetResult(){
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
			Copy_u16ReadValue |= ((uint16)ADCH_REG<<2);
			return Copy_u16ReadValue;
		#endif

		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			return ADCLH_REG;
    1faa:	e4 e2       	ldi	r30, 0x24	; 36
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01





}
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <ADC_enuSetCallBack>:




ErrorStatus_t ADC_enuSetCallBack(void(*Copy_pfunAppFun)(void)){
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <ADC_enuSetCallBack+0x6>
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <ADC_enuSetCallBack+0x8>
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1fc8:	19 82       	std	Y+1, r1	; 0x01

//	if(Copy_pfunAppFun == NULL ||  Copy_u8IntNumber> IN)

	if(Copy_pfunAppFun == NULL){
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fce:	00 97       	sbiw	r24, 0x00	; 0
    1fd0:	19 f4       	brne	.+6      	; 0x1fd8 <ADC_enuSetCallBack+0x20>

		return Local_enuErrrorState;
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	8c 83       	std	Y+4, r24	; 0x04
    1fd6:	0a c0       	rjmp	.+20     	; 0x1fec <ADC_enuSetCallBack+0x34>
	}

	else{
		Local_enuErrrorState = ERROR_STATUS_OK;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	89 83       	std	Y+1, r24	; 0x01

		ADC_CallBackFunction = Copy_pfunAppFun;
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe0:	90 93 97 00 	sts	0x0097, r25
    1fe4:	80 93 96 00 	sts	0x0096, r24

	}



	return Local_enuErrrorState;
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	8c 83       	std	Y+4, r24	; 0x04
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <__vector_16>:

ISR(__vector_16){
    1ffc:	1f 92       	push	r1
    1ffe:	0f 92       	push	r0
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	0f 92       	push	r0
    2004:	11 24       	eor	r1, r1
    2006:	2f 93       	push	r18
    2008:	3f 93       	push	r19
    200a:	4f 93       	push	r20
    200c:	5f 93       	push	r21
    200e:	6f 93       	push	r22
    2010:	7f 93       	push	r23
    2012:	8f 93       	push	r24
    2014:	9f 93       	push	r25
    2016:	af 93       	push	r26
    2018:	bf 93       	push	r27
    201a:	ef 93       	push	r30
    201c:	ff 93       	push	r31
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CallBackFunction != NULL){
    2026:	80 91 96 00 	lds	r24, 0x0096
    202a:	90 91 97 00 	lds	r25, 0x0097
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	29 f0       	breq	.+10     	; 0x203c <__vector_16+0x40>
		ADC_CallBackFunction();
    2032:	e0 91 96 00 	lds	r30, 0x0096
    2036:	f0 91 97 00 	lds	r31, 0x0097
    203a:	09 95       	icall
	}

}
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	ff 91       	pop	r31
    2042:	ef 91       	pop	r30
    2044:	bf 91       	pop	r27
    2046:	af 91       	pop	r26
    2048:	9f 91       	pop	r25
    204a:	8f 91       	pop	r24
    204c:	7f 91       	pop	r23
    204e:	6f 91       	pop	r22
    2050:	5f 91       	pop	r21
    2052:	4f 91       	pop	r20
    2054:	3f 91       	pop	r19
    2056:	2f 91       	pop	r18
    2058:	0f 90       	pop	r0
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	0f 90       	pop	r0
    205e:	1f 90       	pop	r1
    2060:	18 95       	reti

00002062 <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    206c:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	64 e0       	ldi	r22, 0x04	; 4
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	65 e0       	ldi	r22, 0x05	; 5
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	66 e0       	ldi	r22, 0x06	; 6
    2086:	41 e0       	ldi	r20, 0x01	; 1
    2088:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	67 e0       	ldi	r22, 0x07	; 7
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	64 e0       	ldi	r22, 0x04	; 4
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	65 e0       	ldi	r22, 0x05	; 5
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	66 e0       	ldi	r22, 0x06	; 6
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	67 e0       	ldi	r22, 0x07	; 7
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    20be:	83 e0       	ldi	r24, 0x03	; 3
    20c0:	60 e0       	ldi	r22, 0x00	; 0
    20c2:	40 e0       	ldi	r20, 0x00	; 0
    20c4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    20c8:	83 e0       	ldi	r24, 0x03	; 3
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	40 e0       	ldi	r20, 0x00	; 0
    20ce:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	64 e0       	ldi	r22, 0x04	; 4
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    20dc:	83 e0       	ldi	r24, 0x03	; 3
    20de:	65 e0       	ldi	r22, 0x05	; 5
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	64 e0       	ldi	r22, 0x04	; 4
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    2104:	83 e0       	ldi	r24, 0x03	; 3
    2106:	65 e0       	ldi	r22, 0x05	; 5
    2108:	41 e0       	ldi	r20, 0x01	; 1
    210a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    2112:	89 81       	ldd	r24, Y+1	; 0x01
}
    2114:	0f 90       	pop	r0
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	2a 97       	sbiw	r28, 0x0a	; 10
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    2132:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	8a 83       	std	Y+2, r24	; 0x02
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	8b 83       	std	Y+3, r24	; 0x03
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	8c 83       	std	Y+4, r24	; 0x04
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    2144:	84 e0       	ldi	r24, 0x04	; 4
    2146:	8e 83       	std	Y+6, r24	; 0x06
    2148:	85 e0       	ldi	r24, 0x05	; 5
    214a:	8f 83       	std	Y+7, r24	; 0x07
    214c:	86 e0       	ldi	r24, 0x06	; 6
    214e:	88 87       	std	Y+8, r24	; 0x08
    2150:	87 e0       	ldi	r24, 0x07	; 7
    2152:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    2154:	19 82       	std	Y+1, r1	; 0x01
    2156:	36 c0       	rjmp	.+108    	; 0x21c4 <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    2158:	99 81       	ldd	r25, Y+1	; 0x01
    215a:	8a 85       	ldd	r24, Y+10	; 0x0a
    215c:	98 17       	cp	r25, r24
    215e:	c1 f4       	brne	.+48     	; 0x2190 <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	28 2f       	mov	r18, r24
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	ce 01       	movw	r24, r28
    2168:	02 96       	adiw	r24, 0x02	; 2
    216a:	fc 01       	movw	r30, r24
    216c:	e2 0f       	add	r30, r18
    216e:	f3 1f       	adc	r31, r19
    2170:	40 81       	ld	r20, Z
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	ce 01       	movw	r24, r28
    217a:	06 96       	adiw	r24, 0x06	; 6
    217c:	fc 01       	movw	r30, r24
    217e:	e2 0f       	add	r30, r18
    2180:	f3 1f       	adc	r31, r19
    2182:	90 81       	ld	r25, Z
    2184:	84 2f       	mov	r24, r20
    2186:	69 2f       	mov	r22, r25
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
    218e:	17 c0       	rjmp	.+46     	; 0x21be <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	ce 01       	movw	r24, r28
    2198:	02 96       	adiw	r24, 0x02	; 2
    219a:	fc 01       	movw	r30, r24
    219c:	e2 0f       	add	r30, r18
    219e:	f3 1f       	adc	r31, r19
    21a0:	40 81       	ld	r20, Z
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	ce 01       	movw	r24, r28
    21aa:	06 96       	adiw	r24, 0x06	; 6
    21ac:	fc 01       	movw	r30, r24
    21ae:	e2 0f       	add	r30, r18
    21b0:	f3 1f       	adc	r31, r19
    21b2:	90 81       	ld	r25, Z
    21b4:	84 2f       	mov	r24, r20
    21b6:	69 2f       	mov	r22, r25
    21b8:	41 e0       	ldi	r20, 0x01	; 1
    21ba:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	8f 5f       	subi	r24, 0xFF	; 255
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	84 30       	cpi	r24, 0x04	; 4
    21c8:	38 f2       	brcs	.-114    	; 0x2158 <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    21ca:	2a 96       	adiw	r28, 0x0a	; 10
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
    21e4:	2f 97       	sbiw	r28, 0x0f	; 15
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	f8 94       	cli
    21ea:	de bf       	out	0x3e, r29	; 62
    21ec:	0f be       	out	0x3f, r0	; 63
    21ee:	cd bf       	out	0x3d, r28	; 61
    21f0:	9e 87       	std	Y+14, r25	; 0x0e
    21f2:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    21f4:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    21f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	19 f4       	brne	.+6      	; 0x2204 <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	8f 87       	std	Y+15, r24	; 0x0f
    2202:	7e c0       	rjmp	.+252    	; 0x2300 <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    2208:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    220a:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    220c:	83 e0       	ldi	r24, 0x03	; 3
    220e:	8d 83       	std	Y+5, r24	; 0x05
    2210:	83 e0       	ldi	r24, 0x03	; 3
    2212:	8e 83       	std	Y+6, r24	; 0x06
    2214:	83 e0       	ldi	r24, 0x03	; 3
    2216:	8f 83       	std	Y+7, r24	; 0x07
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    221c:	19 86       	std	Y+9, r1	; 0x09
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	8a 87       	std	Y+10, r24	; 0x0a
    2222:	84 e0       	ldi	r24, 0x04	; 4
    2224:	8b 87       	std	Y+11, r24	; 0x0b
    2226:	85 e0       	ldi	r24, 0x05	; 5
    2228:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    222a:	1a 82       	std	Y+2, r1	; 0x02
    222c:	63 c0       	rjmp	.+198    	; 0x22f4 <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	0e 94 8e 10 	call	0x211c	; 0x211c <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    2234:	19 82       	std	Y+1, r1	; 0x01
    2236:	57 c0       	rjmp	.+174    	; 0x22e6 <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	ce 01       	movw	r24, r28
    2240:	05 96       	adiw	r24, 0x05	; 5
    2242:	fc 01       	movw	r30, r24
    2244:	e2 0f       	add	r30, r18
    2246:	f3 1f       	adc	r31, r19
    2248:	40 81       	ld	r20, Z
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	ce 01       	movw	r24, r28
    2252:	09 96       	adiw	r24, 0x09	; 9
    2254:	fc 01       	movw	r30, r24
    2256:	e2 0f       	add	r30, r18
    2258:	f3 1f       	adc	r31, r19
    225a:	90 81       	ld	r25, Z
    225c:	9e 01       	movw	r18, r28
    225e:	2c 5f       	subi	r18, 0xFC	; 252
    2260:	3f 4f       	sbci	r19, 0xFF	; 255
    2262:	84 2f       	mov	r24, r20
    2264:	69 2f       	mov	r22, r25
    2266:	a9 01       	movw	r20, r18
    2268:	0e 94 de 0c 	call	0x19bc	; 0x19bc <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    226c:	8c 81       	ldd	r24, Y+4	; 0x04
    226e:	88 23       	and	r24, r24
    2270:	b9 f5       	brne	.+110    	; 0x22e0 <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9c 01       	movw	r18, r24
    227a:	22 0f       	add	r18, r18
    227c:	33 1f       	adc	r19, r19
    227e:	22 0f       	add	r18, r18
    2280:	33 1f       	adc	r19, r19
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	88 2f       	mov	r24, r24
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	82 0f       	add	r24, r18
    228a:	93 1f       	adc	r25, r19
    228c:	fc 01       	movw	r30, r24
    228e:	e1 58       	subi	r30, 0x81	; 129
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	ed 85       	ldd	r30, Y+13	; 0x0d
    2296:	fe 85       	ldd	r31, Y+14	; 0x0e
    2298:	80 83       	st	Z, r24
    229a:	1a c0       	rjmp	.+52     	; 0x22d0 <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    229c:	89 81       	ldd	r24, Y+1	; 0x01
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	ce 01       	movw	r24, r28
    22a4:	05 96       	adiw	r24, 0x05	; 5
    22a6:	fc 01       	movw	r30, r24
    22a8:	e2 0f       	add	r30, r18
    22aa:	f3 1f       	adc	r31, r19
    22ac:	40 81       	ld	r20, Z
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	ce 01       	movw	r24, r28
    22b6:	09 96       	adiw	r24, 0x09	; 9
    22b8:	fc 01       	movw	r30, r24
    22ba:	e2 0f       	add	r30, r18
    22bc:	f3 1f       	adc	r31, r19
    22be:	90 81       	ld	r25, Z
    22c0:	9e 01       	movw	r18, r28
    22c2:	2c 5f       	subi	r18, 0xFC	; 252
    22c4:	3f 4f       	sbci	r19, 0xFF	; 255
    22c6:	84 2f       	mov	r24, r20
    22c8:	69 2f       	mov	r22, r25
    22ca:	a9 01       	movw	r20, r18
    22cc:	0e 94 de 0c 	call	0x19bc	; 0x19bc <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	88 23       	and	r24, r24
    22d4:	19 f3       	breq	.-58     	; 0x229c <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	8f 87       	std	Y+15, r24	; 0x0f
    22de:	10 c0       	rjmp	.+32     	; 0x2300 <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	84 30       	cpi	r24, 0x04	; 4
    22ea:	08 f4       	brcc	.+2      	; 0x22ee <keypad_enuGetPressedKey+0x112>
    22ec:	a5 cf       	rjmp	.-182    	; 0x2238 <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	8f 5f       	subi	r24, 0xFF	; 255
    22f2:	8a 83       	std	Y+2, r24	; 0x02
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	84 30       	cpi	r24, 0x04	; 4
    22f8:	08 f4       	brcc	.+2      	; 0x22fc <keypad_enuGetPressedKey+0x120>
    22fa:	99 cf       	rjmp	.-206    	; 0x222e <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	8f 87       	std	Y+15, r24	; 0x0f
    2300:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2302:	2f 96       	adiw	r28, 0x0f	; 15
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	e9 97       	sbiw	r28, 0x39	; 57
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2328:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	62 e0       	ldi	r22, 0x02	; 2
    232e:	41 e0       	ldi	r20, 0x01	; 1
    2330:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	61 e0       	ldi	r22, 0x01	; 1
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	41 e0       	ldi	r20, 0x01	; 1
    2344:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	66 e0       	ldi	r22, 0x06	; 6
    234c:	41 e0       	ldi	r20, 0x01	; 1
    234e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	65 e0       	ldi	r22, 0x05	; 5
    2356:	41 e0       	ldi	r20, 0x01	; 1
    2358:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	64 e0       	ldi	r22, 0x04	; 4
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	63 e0       	ldi	r22, 0x03	; 3
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	ac e0       	ldi	r26, 0x0C	; 12
    2376:	b2 e4       	ldi	r27, 0x42	; 66
    2378:	8d ab       	std	Y+53, r24	; 0x35
    237a:	9e ab       	std	Y+54, r25	; 0x36
    237c:	af ab       	std	Y+55, r26	; 0x37
    237e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2380:	6d a9       	ldd	r22, Y+53	; 0x35
    2382:	7e a9       	ldd	r23, Y+54	; 0x36
    2384:	8f a9       	ldd	r24, Y+55	; 0x37
    2386:	98 ad       	ldd	r25, Y+56	; 0x38
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a e7       	ldi	r20, 0x7A	; 122
    238e:	55 e4       	ldi	r21, 0x45	; 69
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	89 ab       	std	Y+49, r24	; 0x31
    239a:	9a ab       	std	Y+50, r25	; 0x32
    239c:	ab ab       	std	Y+51, r26	; 0x33
    239e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23a0:	69 a9       	ldd	r22, Y+49	; 0x31
    23a2:	7a a9       	ldd	r23, Y+50	; 0x32
    23a4:	8b a9       	ldd	r24, Y+51	; 0x33
    23a6:	9c a9       	ldd	r25, Y+52	; 0x34
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	40 e8       	ldi	r20, 0x80	; 128
    23ae:	5f e3       	ldi	r21, 0x3F	; 63
    23b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b4:	88 23       	and	r24, r24
    23b6:	2c f4       	brge	.+10     	; 0x23c2 <LCD_enuInit+0xae>
		__ticks = 1;
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	98 ab       	std	Y+48, r25	; 0x30
    23be:	8f a7       	std	Y+47, r24	; 0x2f
    23c0:	3f c0       	rjmp	.+126    	; 0x2440 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    23c2:	69 a9       	ldd	r22, Y+49	; 0x31
    23c4:	7a a9       	ldd	r23, Y+50	; 0x32
    23c6:	8b a9       	ldd	r24, Y+51	; 0x33
    23c8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	3f ef       	ldi	r19, 0xFF	; 255
    23ce:	4f e7       	ldi	r20, 0x7F	; 127
    23d0:	57 e4       	ldi	r21, 0x47	; 71
    23d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d6:	18 16       	cp	r1, r24
    23d8:	4c f5       	brge	.+82     	; 0x242c <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23da:	6d a9       	ldd	r22, Y+53	; 0x35
    23dc:	7e a9       	ldd	r23, Y+54	; 0x36
    23de:	8f a9       	ldd	r24, Y+55	; 0x37
    23e0:	98 ad       	ldd	r25, Y+56	; 0x38
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e2       	ldi	r20, 0x20	; 32
    23e8:	51 e4       	ldi	r21, 0x41	; 65
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	98 ab       	std	Y+48, r25	; 0x30
    2400:	8f a7       	std	Y+47, r24	; 0x2f
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <LCD_enuInit+0x10e>
    2404:	80 e9       	ldi	r24, 0x90	; 144
    2406:	91 e0       	ldi	r25, 0x01	; 1
    2408:	9e a7       	std	Y+46, r25	; 0x2e
    240a:	8d a7       	std	Y+45, r24	; 0x2d
    240c:	8d a5       	ldd	r24, Y+45	; 0x2d
    240e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <LCD_enuInit+0xfc>
    2414:	9e a7       	std	Y+46, r25	; 0x2e
    2416:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2418:	8f a5       	ldd	r24, Y+47	; 0x2f
    241a:	98 a9       	ldd	r25, Y+48	; 0x30
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	98 ab       	std	Y+48, r25	; 0x30
    2420:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2422:	8f a5       	ldd	r24, Y+47	; 0x2f
    2424:	98 a9       	ldd	r25, Y+48	; 0x30
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	69 f7       	brne	.-38     	; 0x2404 <LCD_enuInit+0xf0>
    242a:	14 c0       	rjmp	.+40     	; 0x2454 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242c:	69 a9       	ldd	r22, Y+49	; 0x31
    242e:	7a a9       	ldd	r23, Y+50	; 0x32
    2430:	8b a9       	ldd	r24, Y+51	; 0x33
    2432:	9c a9       	ldd	r25, Y+52	; 0x34
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	98 ab       	std	Y+48, r25	; 0x30
    243e:	8f a7       	std	Y+47, r24	; 0x2f
    2440:	8f a5       	ldd	r24, Y+47	; 0x2f
    2442:	98 a9       	ldd	r25, Y+48	; 0x30
    2444:	9c a7       	std	Y+44, r25	; 0x2c
    2446:	8b a7       	std	Y+43, r24	; 0x2b
    2448:	8b a5       	ldd	r24, Y+43	; 0x2b
    244a:	9c a5       	ldd	r25, Y+44	; 0x2c
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <LCD_enuInit+0x138>
    2450:	9c a7       	std	Y+44, r25	; 0x2c
    2452:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    2454:	80 e2       	ldi	r24, 0x20	; 32
    2456:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    245a:	80 e2       	ldi	r24, 0x20	; 32
    245c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    2460:	80 e8       	ldi	r24, 0x80	; 128
    2462:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e8       	ldi	r26, 0x80	; 128
    246c:	bf e3       	ldi	r27, 0x3F	; 63
    246e:	8f a3       	std	Y+39, r24	; 0x27
    2470:	98 a7       	std	Y+40, r25	; 0x28
    2472:	a9 a7       	std	Y+41, r26	; 0x29
    2474:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2476:	6f a1       	ldd	r22, Y+39	; 0x27
    2478:	78 a5       	ldd	r23, Y+40	; 0x28
    247a:	89 a5       	ldd	r24, Y+41	; 0x29
    247c:	9a a5       	ldd	r25, Y+42	; 0x2a
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	4a e7       	ldi	r20, 0x7A	; 122
    2484:	55 e4       	ldi	r21, 0x45	; 69
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	8b a3       	std	Y+35, r24	; 0x23
    2490:	9c a3       	std	Y+36, r25	; 0x24
    2492:	ad a3       	std	Y+37, r26	; 0x25
    2494:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2496:	6b a1       	ldd	r22, Y+35	; 0x23
    2498:	7c a1       	ldd	r23, Y+36	; 0x24
    249a:	8d a1       	ldd	r24, Y+37	; 0x25
    249c:	9e a1       	ldd	r25, Y+38	; 0x26
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e8       	ldi	r20, 0x80	; 128
    24a4:	5f e3       	ldi	r21, 0x3F	; 63
    24a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <LCD_enuInit+0x1a4>
		__ticks = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9a a3       	std	Y+34, r25	; 0x22
    24b4:	89 a3       	std	Y+33, r24	; 0x21
    24b6:	3f c0       	rjmp	.+126    	; 0x2536 <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    24b8:	6b a1       	ldd	r22, Y+35	; 0x23
    24ba:	7c a1       	ldd	r23, Y+36	; 0x24
    24bc:	8d a1       	ldd	r24, Y+37	; 0x25
    24be:	9e a1       	ldd	r25, Y+38	; 0x26
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	3f ef       	ldi	r19, 0xFF	; 255
    24c4:	4f e7       	ldi	r20, 0x7F	; 127
    24c6:	57 e4       	ldi	r21, 0x47	; 71
    24c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24cc:	18 16       	cp	r1, r24
    24ce:	4c f5       	brge	.+82     	; 0x2522 <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d0:	6f a1       	ldd	r22, Y+39	; 0x27
    24d2:	78 a5       	ldd	r23, Y+40	; 0x28
    24d4:	89 a5       	ldd	r24, Y+41	; 0x29
    24d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e2       	ldi	r20, 0x20	; 32
    24de:	51 e4       	ldi	r21, 0x41	; 65
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9a a3       	std	Y+34, r25	; 0x22
    24f6:	89 a3       	std	Y+33, r24	; 0x21
    24f8:	0f c0       	rjmp	.+30     	; 0x2518 <LCD_enuInit+0x204>
    24fa:	80 e9       	ldi	r24, 0x90	; 144
    24fc:	91 e0       	ldi	r25, 0x01	; 1
    24fe:	98 a3       	std	Y+32, r25	; 0x20
    2500:	8f 8f       	std	Y+31, r24	; 0x1f
    2502:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2504:	98 a1       	ldd	r25, Y+32	; 0x20
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_enuInit+0x1f2>
    250a:	98 a3       	std	Y+32, r25	; 0x20
    250c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250e:	89 a1       	ldd	r24, Y+33	; 0x21
    2510:	9a a1       	ldd	r25, Y+34	; 0x22
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	9a a3       	std	Y+34, r25	; 0x22
    2516:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2518:	89 a1       	ldd	r24, Y+33	; 0x21
    251a:	9a a1       	ldd	r25, Y+34	; 0x22
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	69 f7       	brne	.-38     	; 0x24fa <LCD_enuInit+0x1e6>
    2520:	14 c0       	rjmp	.+40     	; 0x254a <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2522:	6b a1       	ldd	r22, Y+35	; 0x23
    2524:	7c a1       	ldd	r23, Y+36	; 0x24
    2526:	8d a1       	ldd	r24, Y+37	; 0x25
    2528:	9e a1       	ldd	r25, Y+38	; 0x26
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9a a3       	std	Y+34, r25	; 0x22
    2534:	89 a3       	std	Y+33, r24	; 0x21
    2536:	89 a1       	ldd	r24, Y+33	; 0x21
    2538:	9a a1       	ldd	r25, Y+34	; 0x22
    253a:	9e 8f       	std	Y+30, r25	; 0x1e
    253c:	8d 8f       	std	Y+29, r24	; 0x1d
    253e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2540:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_enuInit+0x22e>
    2546:	9e 8f       	std	Y+30, r25	; 0x1e
    2548:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    2550:	80 ef       	ldi	r24, 0xF0	; 240
    2552:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a0 e8       	ldi	r26, 0x80	; 128
    255c:	bf e3       	ldi	r27, 0x3F	; 63
    255e:	89 8f       	std	Y+25, r24	; 0x19
    2560:	9a 8f       	std	Y+26, r25	; 0x1a
    2562:	ab 8f       	std	Y+27, r26	; 0x1b
    2564:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2566:	69 8d       	ldd	r22, Y+25	; 0x19
    2568:	7a 8d       	ldd	r23, Y+26	; 0x1a
    256a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    256c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	4a e7       	ldi	r20, 0x7A	; 122
    2574:	55 e4       	ldi	r21, 0x45	; 69
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	8d 8b       	std	Y+21, r24	; 0x15
    2580:	9e 8b       	std	Y+22, r25	; 0x16
    2582:	af 8b       	std	Y+23, r26	; 0x17
    2584:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2586:	6d 89       	ldd	r22, Y+21	; 0x15
    2588:	7e 89       	ldd	r23, Y+22	; 0x16
    258a:	8f 89       	ldd	r24, Y+23	; 0x17
    258c:	98 8d       	ldd	r25, Y+24	; 0x18
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e8       	ldi	r20, 0x80	; 128
    2594:	5f e3       	ldi	r21, 0x3F	; 63
    2596:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259a:	88 23       	and	r24, r24
    259c:	2c f4       	brge	.+10     	; 0x25a8 <LCD_enuInit+0x294>
		__ticks = 1;
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9c 8b       	std	Y+20, r25	; 0x14
    25a4:	8b 8b       	std	Y+19, r24	; 0x13
    25a6:	3f c0       	rjmp	.+126    	; 0x2626 <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    25a8:	6d 89       	ldd	r22, Y+21	; 0x15
    25aa:	7e 89       	ldd	r23, Y+22	; 0x16
    25ac:	8f 89       	ldd	r24, Y+23	; 0x17
    25ae:	98 8d       	ldd	r25, Y+24	; 0x18
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	3f ef       	ldi	r19, 0xFF	; 255
    25b4:	4f e7       	ldi	r20, 0x7F	; 127
    25b6:	57 e4       	ldi	r21, 0x47	; 71
    25b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25bc:	18 16       	cp	r1, r24
    25be:	4c f5       	brge	.+82     	; 0x2612 <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c0:	69 8d       	ldd	r22, Y+25	; 0x19
    25c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e2       	ldi	r20, 0x20	; 32
    25ce:	51 e4       	ldi	r21, 0x41	; 65
    25d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	bc 01       	movw	r22, r24
    25da:	cd 01       	movw	r24, r26
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9c 8b       	std	Y+20, r25	; 0x14
    25e6:	8b 8b       	std	Y+19, r24	; 0x13
    25e8:	0f c0       	rjmp	.+30     	; 0x2608 <LCD_enuInit+0x2f4>
    25ea:	80 e9       	ldi	r24, 0x90	; 144
    25ec:	91 e0       	ldi	r25, 0x01	; 1
    25ee:	9a 8b       	std	Y+18, r25	; 0x12
    25f0:	89 8b       	std	Y+17, r24	; 0x11
    25f2:	89 89       	ldd	r24, Y+17	; 0x11
    25f4:	9a 89       	ldd	r25, Y+18	; 0x12
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <LCD_enuInit+0x2e2>
    25fa:	9a 8b       	std	Y+18, r25	; 0x12
    25fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2600:	9c 89       	ldd	r25, Y+20	; 0x14
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	9c 8b       	std	Y+20, r25	; 0x14
    2606:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2608:	8b 89       	ldd	r24, Y+19	; 0x13
    260a:	9c 89       	ldd	r25, Y+20	; 0x14
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	69 f7       	brne	.-38     	; 0x25ea <LCD_enuInit+0x2d6>
    2610:	14 c0       	rjmp	.+40     	; 0x263a <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2612:	6d 89       	ldd	r22, Y+21	; 0x15
    2614:	7e 89       	ldd	r23, Y+22	; 0x16
    2616:	8f 89       	ldd	r24, Y+23	; 0x17
    2618:	98 8d       	ldd	r25, Y+24	; 0x18
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9c 8b       	std	Y+20, r25	; 0x14
    2624:	8b 8b       	std	Y+19, r24	; 0x13
    2626:	8b 89       	ldd	r24, Y+19	; 0x13
    2628:	9c 89       	ldd	r25, Y+20	; 0x14
    262a:	98 8b       	std	Y+16, r25	; 0x10
    262c:	8f 87       	std	Y+15, r24	; 0x0f
    262e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2630:	98 89       	ldd	r25, Y+16	; 0x10
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <LCD_enuInit+0x31e>
    2636:	98 8b       	std	Y+16, r25	; 0x10
    2638:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a0 e0       	ldi	r26, 0x00	; 0
    264c:	b0 e4       	ldi	r27, 0x40	; 64
    264e:	8b 87       	std	Y+11, r24	; 0x0b
    2650:	9c 87       	std	Y+12, r25	; 0x0c
    2652:	ad 87       	std	Y+13, r26	; 0x0d
    2654:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2656:	6b 85       	ldd	r22, Y+11	; 0x0b
    2658:	7c 85       	ldd	r23, Y+12	; 0x0c
    265a:	8d 85       	ldd	r24, Y+13	; 0x0d
    265c:	9e 85       	ldd	r25, Y+14	; 0x0e
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4a e7       	ldi	r20, 0x7A	; 122
    2664:	55 e4       	ldi	r21, 0x45	; 69
    2666:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8f 83       	std	Y+7, r24	; 0x07
    2670:	98 87       	std	Y+8, r25	; 0x08
    2672:	a9 87       	std	Y+9, r26	; 0x09
    2674:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e8       	ldi	r20, 0x80	; 128
    2684:	5f e3       	ldi	r21, 0x3F	; 63
    2686:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    268a:	88 23       	and	r24, r24
    268c:	2c f4       	brge	.+10     	; 0x2698 <LCD_enuInit+0x384>
		__ticks = 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
    2696:	3f c0       	rjmp	.+126    	; 0x2716 <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    2698:	6f 81       	ldd	r22, Y+7	; 0x07
    269a:	78 85       	ldd	r23, Y+8	; 0x08
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	3f ef       	ldi	r19, 0xFF	; 255
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	57 e4       	ldi	r21, 0x47	; 71
    26a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	4c f5       	brge	.+82     	; 0x2702 <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	0f c0       	rjmp	.+30     	; 0x26f8 <LCD_enuInit+0x3e4>
    26da:	80 e9       	ldi	r24, 0x90	; 144
    26dc:	91 e0       	ldi	r25, 0x01	; 1
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_enuInit+0x3d2>
    26ea:	9c 83       	std	Y+4, r25	; 0x04
    26ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	69 f7       	brne	.-38     	; 0x26da <LCD_enuInit+0x3c6>
    2700:	14 c0       	rjmp	.+40     	; 0x272a <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2702:	6f 81       	ldd	r22, Y+7	; 0x07
    2704:	78 85       	ldd	r23, Y+8	; 0x08
    2706:	89 85       	ldd	r24, Y+9	; 0x09
    2708:	9a 85       	ldd	r25, Y+10	; 0x0a
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	9a 83       	std	Y+2, r25	; 0x02
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	89 81       	ldd	r24, Y+1	; 0x01
    2720:	9a 81       	ldd	r25, Y+2	; 0x02
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_enuInit+0x40e>
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    2730:	86 e0       	ldi	r24, 0x06	; 6
    2732:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	80 93 98 00 	sts	0x0098, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    2740:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2742:	e9 96       	adiw	r28, 0x39	; 57
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	6e 97       	sbiw	r28, 0x1e	; 30
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    276a:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    276c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    276e:	82 95       	swap	r24
    2770:	8f 70       	andi	r24, 0x0F	; 15
    2772:	98 2f       	mov	r25, r24
    2774:	91 70       	andi	r25, 0x01	; 1
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	63 e0       	ldi	r22, 0x03	; 3
    277a:	49 2f       	mov	r20, r25
    277c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    2780:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2782:	82 95       	swap	r24
    2784:	86 95       	lsr	r24
    2786:	87 70       	andi	r24, 0x07	; 7
    2788:	98 2f       	mov	r25, r24
    278a:	91 70       	andi	r25, 0x01	; 1
    278c:	80 e0       	ldi	r24, 0x00	; 0
    278e:	64 e0       	ldi	r22, 0x04	; 4
    2790:	49 2f       	mov	r20, r25
    2792:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    2796:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2798:	82 95       	swap	r24
    279a:	86 95       	lsr	r24
    279c:	86 95       	lsr	r24
    279e:	83 70       	andi	r24, 0x03	; 3
    27a0:	98 2f       	mov	r25, r24
    27a2:	91 70       	andi	r25, 0x01	; 1
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	65 e0       	ldi	r22, 0x05	; 5
    27a8:	49 2f       	mov	r20, r25
    27aa:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    27ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27b0:	98 2f       	mov	r25, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	99 27       	eor	r25, r25
    27b6:	99 1f       	adc	r25, r25
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	66 e0       	ldi	r22, 0x06	; 6
    27bc:	49 2f       	mov	r20, r25
    27be:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	60 e0       	ldi	r22, 0x00	; 0
    27c6:	41 e0       	ldi	r20, 0x01	; 1
    27c8:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
    27cc:	80 e0       	ldi	r24, 0x00	; 0
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	a0 e0       	ldi	r26, 0x00	; 0
    27d2:	b0 e4       	ldi	r27, 0x40	; 64
    27d4:	89 8f       	std	Y+25, r24	; 0x19
    27d6:	9a 8f       	std	Y+26, r25	; 0x1a
    27d8:	ab 8f       	std	Y+27, r26	; 0x1b
    27da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27dc:	69 8d       	ldd	r22, Y+25	; 0x19
    27de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	4a e7       	ldi	r20, 0x7A	; 122
    27ea:	55 e4       	ldi	r21, 0x45	; 69
    27ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	8d 8b       	std	Y+21, r24	; 0x15
    27f6:	9e 8b       	std	Y+22, r25	; 0x16
    27f8:	af 8b       	std	Y+23, r26	; 0x17
    27fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27fc:	6d 89       	ldd	r22, Y+21	; 0x15
    27fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2800:	8f 89       	ldd	r24, Y+23	; 0x17
    2802:	98 8d       	ldd	r25, Y+24	; 0x18
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e8       	ldi	r20, 0x80	; 128
    280a:	5f e3       	ldi	r21, 0x3F	; 63
    280c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2810:	88 23       	and	r24, r24
    2812:	2c f4       	brge	.+10     	; 0x281e <WriteNLatch+0xca>
		__ticks = 1;
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	9c 8b       	std	Y+20, r25	; 0x14
    281a:	8b 8b       	std	Y+19, r24	; 0x13
    281c:	3f c0       	rjmp	.+126    	; 0x289c <WriteNLatch+0x148>
	else if (__tmp > 65535)
    281e:	6d 89       	ldd	r22, Y+21	; 0x15
    2820:	7e 89       	ldd	r23, Y+22	; 0x16
    2822:	8f 89       	ldd	r24, Y+23	; 0x17
    2824:	98 8d       	ldd	r25, Y+24	; 0x18
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	3f ef       	ldi	r19, 0xFF	; 255
    282a:	4f e7       	ldi	r20, 0x7F	; 127
    282c:	57 e4       	ldi	r21, 0x47	; 71
    282e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2832:	18 16       	cp	r1, r24
    2834:	4c f5       	brge	.+82     	; 0x2888 <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2836:	69 8d       	ldd	r22, Y+25	; 0x19
    2838:	7a 8d       	ldd	r23, Y+26	; 0x1a
    283a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    283c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e2       	ldi	r20, 0x20	; 32
    2844:	51 e4       	ldi	r21, 0x41	; 65
    2846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9c 8b       	std	Y+20, r25	; 0x14
    285c:	8b 8b       	std	Y+19, r24	; 0x13
    285e:	0f c0       	rjmp	.+30     	; 0x287e <WriteNLatch+0x12a>
    2860:	80 e9       	ldi	r24, 0x90	; 144
    2862:	91 e0       	ldi	r25, 0x01	; 1
    2864:	9a 8b       	std	Y+18, r25	; 0x12
    2866:	89 8b       	std	Y+17, r24	; 0x11
    2868:	89 89       	ldd	r24, Y+17	; 0x11
    286a:	9a 89       	ldd	r25, Y+18	; 0x12
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	f1 f7       	brne	.-4      	; 0x286c <WriteNLatch+0x118>
    2870:	9a 8b       	std	Y+18, r25	; 0x12
    2872:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2874:	8b 89       	ldd	r24, Y+19	; 0x13
    2876:	9c 89       	ldd	r25, Y+20	; 0x14
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	9c 8b       	std	Y+20, r25	; 0x14
    287c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287e:	8b 89       	ldd	r24, Y+19	; 0x13
    2880:	9c 89       	ldd	r25, Y+20	; 0x14
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	69 f7       	brne	.-38     	; 0x2860 <WriteNLatch+0x10c>
    2886:	14 c0       	rjmp	.+40     	; 0x28b0 <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2888:	6d 89       	ldd	r22, Y+21	; 0x15
    288a:	7e 89       	ldd	r23, Y+22	; 0x16
    288c:	8f 89       	ldd	r24, Y+23	; 0x17
    288e:	98 8d       	ldd	r25, Y+24	; 0x18
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	9c 8b       	std	Y+20, r25	; 0x14
    289a:	8b 8b       	std	Y+19, r24	; 0x13
    289c:	8b 89       	ldd	r24, Y+19	; 0x13
    289e:	9c 89       	ldd	r25, Y+20	; 0x14
    28a0:	98 8b       	std	Y+16, r25	; 0x10
    28a2:	8f 87       	std	Y+15, r24	; 0x0f
    28a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a6:	98 89       	ldd	r25, Y+16	; 0x10
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <WriteNLatch+0x154>
    28ac:	98 8b       	std	Y+16, r25	; 0x10
    28ae:	8f 87       	std	Y+15, r24	; 0x0f
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	60 e0       	ldi	r22, 0x00	; 0
    28b4:	40 e0       	ldi	r20, 0x00	; 0
    28b6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    28ba:	80 91 98 00 	lds	r24, 0x0098
    28be:	88 23       	and	r24, r24
    28c0:	09 f4       	brne	.+2      	; 0x28c4 <WriteNLatch+0x170>
    28c2:	a2 c0       	rjmp	.+324    	; 0x2a08 <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    28c4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28c6:	98 2f       	mov	r25, r24
    28c8:	91 70       	andi	r25, 0x01	; 1
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	63 e0       	ldi	r22, 0x03	; 3
    28ce:	49 2f       	mov	r20, r25
    28d0:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    28d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28d6:	86 95       	lsr	r24
    28d8:	98 2f       	mov	r25, r24
    28da:	91 70       	andi	r25, 0x01	; 1
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	64 e0       	ldi	r22, 0x04	; 4
    28e0:	49 2f       	mov	r20, r25
    28e2:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    28e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28e8:	86 95       	lsr	r24
    28ea:	86 95       	lsr	r24
    28ec:	98 2f       	mov	r25, r24
    28ee:	91 70       	andi	r25, 0x01	; 1
    28f0:	80 e0       	ldi	r24, 0x00	; 0
    28f2:	65 e0       	ldi	r22, 0x05	; 5
    28f4:	49 2f       	mov	r20, r25
    28f6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    28fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28fc:	86 95       	lsr	r24
    28fe:	86 95       	lsr	r24
    2900:	86 95       	lsr	r24
    2902:	98 2f       	mov	r25, r24
    2904:	91 70       	andi	r25, 0x01	; 1
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	66 e0       	ldi	r22, 0x06	; 6
    290a:	49 2f       	mov	r20, r25
    290c:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a0 e0       	ldi	r26, 0x00	; 0
    2920:	b0 e4       	ldi	r27, 0x40	; 64
    2922:	8b 87       	std	Y+11, r24	; 0x0b
    2924:	9c 87       	std	Y+12, r25	; 0x0c
    2926:	ad 87       	std	Y+13, r26	; 0x0d
    2928:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292a:	6b 85       	ldd	r22, Y+11	; 0x0b
    292c:	7c 85       	ldd	r23, Y+12	; 0x0c
    292e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2930:	9e 85       	ldd	r25, Y+14	; 0x0e
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	4a e7       	ldi	r20, 0x7A	; 122
    2938:	55 e4       	ldi	r21, 0x45	; 69
    293a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	8f 83       	std	Y+7, r24	; 0x07
    2944:	98 87       	std	Y+8, r25	; 0x08
    2946:	a9 87       	std	Y+9, r26	; 0x09
    2948:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    294a:	6f 81       	ldd	r22, Y+7	; 0x07
    294c:	78 85       	ldd	r23, Y+8	; 0x08
    294e:	89 85       	ldd	r24, Y+9	; 0x09
    2950:	9a 85       	ldd	r25, Y+10	; 0x0a
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	2c f4       	brge	.+10     	; 0x296c <WriteNLatch+0x218>
		__ticks = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	3f c0       	rjmp	.+126    	; 0x29ea <WriteNLatch+0x296>
	else if (__tmp > 65535)
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	3f ef       	ldi	r19, 0xFF	; 255
    2978:	4f e7       	ldi	r20, 0x7F	; 127
    297a:	57 e4       	ldi	r21, 0x47	; 71
    297c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2980:	18 16       	cp	r1, r24
    2982:	4c f5       	brge	.+82     	; 0x29d6 <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2984:	6b 85       	ldd	r22, Y+11	; 0x0b
    2986:	7c 85       	ldd	r23, Y+12	; 0x0c
    2988:	8d 85       	ldd	r24, Y+13	; 0x0d
    298a:	9e 85       	ldd	r25, Y+14	; 0x0e
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e2       	ldi	r20, 0x20	; 32
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	0f c0       	rjmp	.+30     	; 0x29cc <WriteNLatch+0x278>
    29ae:	80 e9       	ldi	r24, 0x90	; 144
    29b0:	91 e0       	ldi	r25, 0x01	; 1
    29b2:	9c 83       	std	Y+4, r25	; 0x04
    29b4:	8b 83       	std	Y+3, r24	; 0x03
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <WriteNLatch+0x266>
    29be:	9c 83       	std	Y+4, r25	; 0x04
    29c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	9e 81       	ldd	r25, Y+6	; 0x06
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	69 f7       	brne	.-38     	; 0x29ae <WriteNLatch+0x25a>
    29d4:	14 c0       	rjmp	.+40     	; 0x29fe <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d6:	6f 81       	ldd	r22, Y+7	; 0x07
    29d8:	78 85       	ldd	r23, Y+8	; 0x08
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	9e 83       	std	Y+6, r25	; 0x06
    29e8:	8d 83       	std	Y+5, r24	; 0x05
    29ea:	8d 81       	ldd	r24, Y+5	; 0x05
    29ec:	9e 81       	ldd	r25, Y+6	; 0x06
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <WriteNLatch+0x2a2>
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	60 e0       	ldi	r22, 0x00	; 0
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    2a0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2a0e:	6e 96       	adiw	r28, 0x1e	; 30
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <LCD_enuSendData+0x6>
    2a26:	cd b7       	in	r28, 0x3d	; 61
    2a28:	de b7       	in	r29, 0x3e	; 62
    2a2a:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2a2c:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	62 e0       	ldi	r22, 0x02	; 2
    2a32:	41 e0       	ldi	r20, 0x01	; 1
    2a34:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	61 e0       	ldi	r22, 0x01	; 1
    2a3c:	40 e0       	ldi	r20, 0x00	; 0
    2a3e:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	0e 94 aa 13 	call	0x2754	; 0x2754 <WriteNLatch>



	return Local_enu_ErrorState;
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    2a54:	df 93       	push	r29
    2a56:	cf 93       	push	r28
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <LCD_enuSendCommand+0x6>
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2a60:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	62 e0       	ldi	r22, 0x02	; 2
    2a66:	40 e0       	ldi	r20, 0x00	; 0
    2a68:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	40 e0       	ldi	r20, 0x00	; 0
    2a72:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	0e 94 aa 13 	call	0x2754	; 0x2754 <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	cf 91       	pop	r28
    2a88:	df 91       	pop	r29
    2a8a:	08 95       	ret

00002a8c <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    2a8c:	df 93       	push	r29
    2a8e:	cf 93       	push	r28
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <LCD_u8SendString+0x6>
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <LCD_u8SendString+0x8>
    2a94:	0f 92       	push	r0
    2a96:	cd b7       	in	r28, 0x3d	; 61
    2a98:	de b7       	in	r29, 0x3e	; 62
    2a9a:	9c 83       	std	Y+4, r25	; 0x04
    2a9c:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2a9e:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	f9 f0       	breq	.+62     	; 0x2ae6 <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    2aa8:	19 82       	std	Y+1, r1	; 0x01
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	28 2f       	mov	r18, r24
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	e2 0f       	add	r30, r18
    2aba:	f3 1f       	adc	r31, r19
    2abc:	90 81       	ld	r25, Z
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	8f 5f       	subi	r24, 0xFF	; 255
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	89 2f       	mov	r24, r25
    2ac6:	0e 94 10 15 	call	0x2a20	; 0x2a20 <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	28 2f       	mov	r18, r24
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	e2 0f       	add	r30, r18
    2ad8:	f3 1f       	adc	r31, r19
    2ada:	80 81       	ld	r24, Z
    2adc:	88 23       	and	r24, r24
    2ade:	31 f7       	brne	.-52     	; 0x2aac <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	8d 83       	std	Y+5, r24	; 0x05
    2ae4:	04 c0       	rjmp	.+8      	; 0x2aee <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    2aea:	8a 81       	ldd	r24, Y+2	; 0x02
    2aec:	8d 83       	std	Y+5, r24	; 0x05
    2aee:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	a0 97       	sbiw	r28, 0x20	; 32
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	6b 8f       	std	Y+27, r22	; 0x1b
    2b16:	7c 8f       	std	Y+28, r23	; 0x1c
    2b18:	8d 8f       	std	Y+29, r24	; 0x1d
    2b1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b1c:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2b1e:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    2b20:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    2b22:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    2b24:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    2b26:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    2b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b2c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2b2e:	be 8d       	ldd	r27, Y+30	; 0x1e
    2b30:	bb 23       	and	r27, r27
    2b32:	94 f4       	brge	.+36     	; 0x2b58 <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    2b34:	8d e2       	ldi	r24, 0x2D	; 45
    2b36:	0e 94 10 15 	call	0x2a20	; 0x2a20 <LCD_enuSendData>
		Copy_u8data*=-1;
    2b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b3e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2b40:	be 8d       	ldd	r27, Y+30	; 0x1e
    2b42:	b0 95       	com	r27
    2b44:	a0 95       	com	r26
    2b46:	90 95       	com	r25
    2b48:	81 95       	neg	r24
    2b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b4c:	af 4f       	sbci	r26, 0xFF	; 255
    2b4e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b50:	8b 8f       	std	Y+27, r24	; 0x1b
    2b52:	9c 8f       	std	Y+28, r25	; 0x1c
    2b54:	ad 8f       	std	Y+29, r26	; 0x1d
    2b56:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    2b58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b5c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2b5e:	be 8d       	ldd	r27, Y+30	; 0x1e
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	a1 05       	cpc	r26, r1
    2b64:	b1 05       	cpc	r27, r1
    2b66:	09 f0       	breq	.+2      	; 0x2b6a <LCD_enuIntegerToString+0x6a>
    2b68:	4b c0       	rjmp	.+150    	; 0x2c00 <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    2b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	ce 01       	movw	r24, r28
    2b72:	07 96       	adiw	r24, 0x07	; 7
    2b74:	fc 01       	movw	r30, r24
    2b76:	e2 0f       	add	r30, r18
    2b78:	f3 1f       	adc	r31, r19
    2b7a:	80 e3       	ldi	r24, 0x30	; 48
    2b7c:	80 83       	st	Z, r24
    2b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b80:	8f 5f       	subi	r24, 0xFF	; 255
    2b82:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	ce 01       	movw	r24, r28
    2b8c:	07 96       	adiw	r24, 0x07	; 7
    2b8e:	fc 01       	movw	r30, r24
    2b90:	e2 0f       	add	r30, r18
    2b92:	f3 1f       	adc	r31, r19
    2b94:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    2b96:	8e 81       	ldd	r24, Y+6	; 0x06
    2b98:	88 a3       	std	Y+32, r24	; 0x20
    2b9a:	7f c0       	rjmp	.+254    	; 0x2c9a <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    2b9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	50 e0       	ldi	r21, 0x00	; 0
    2ba6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2baa:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2bac:	be 8d       	ldd	r27, Y+30	; 0x1e
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__divmodsi4>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    2bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc4:	48 2f       	mov	r20, r24
    2bc6:	40 5d       	subi	r20, 0xD0	; 208
    2bc8:	ce 01       	movw	r24, r28
    2bca:	07 96       	adiw	r24, 0x07	; 7
    2bcc:	fc 01       	movw	r30, r24
    2bce:	e2 0f       	add	r30, r18
    2bd0:	f3 1f       	adc	r31, r19
    2bd2:	40 83       	st	Z, r20
    2bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd6:	8f 5f       	subi	r24, 0xFF	; 255
    2bd8:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    2bda:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bdc:	28 2f       	mov	r18, r24
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e0       	ldi	r20, 0x00	; 0
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2be8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2bea:	be 8d       	ldd	r27, Y+30	; 0x1e
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 20 17 	call	0x2e40	; 0x2e40 <__divmodsi4>
    2bf4:	da 01       	movw	r26, r20
    2bf6:	c9 01       	movw	r24, r18
    2bf8:	8b 8f       	std	Y+27, r24	; 0x1b
    2bfa:	9c 8f       	std	Y+28, r25	; 0x1c
    2bfc:	ad 8f       	std	Y+29, r26	; 0x1d
    2bfe:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    2c00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c04:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2c06:	be 8d       	ldd	r27, Y+30	; 0x1e
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	a1 05       	cpc	r26, r1
    2c0c:	b1 05       	cpc	r27, r1
    2c0e:	31 f6       	brne	.-116    	; 0x2b9c <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    2c10:	8d 81       	ldd	r24, Y+5	; 0x05
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	ce 01       	movw	r24, r28
    2c18:	07 96       	adiw	r24, 0x07	; 7
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	e2 0f       	add	r30, r18
    2c1e:	f3 1f       	adc	r31, r19
    2c20:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	81 50       	subi	r24, 0x01	; 1
    2c26:	8a 83       	std	Y+2, r24	; 0x02
    2c28:	2c c0       	rjmp	.+88     	; 0x2c82 <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	28 2f       	mov	r18, r24
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	ce 01       	movw	r24, r28
    2c32:	07 96       	adiw	r24, 0x07	; 7
    2c34:	fc 01       	movw	r30, r24
    2c36:	e2 0f       	add	r30, r18
    2c38:	f3 1f       	adc	r31, r19
    2c3a:	80 81       	ld	r24, Z
    2c3c:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	48 2f       	mov	r20, r24
    2c42:	50 e0       	ldi	r21, 0x00	; 0
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	ce 01       	movw	r24, r28
    2c4c:	07 96       	adiw	r24, 0x07	; 7
    2c4e:	fc 01       	movw	r30, r24
    2c50:	e2 0f       	add	r30, r18
    2c52:	f3 1f       	adc	r31, r19
    2c54:	20 81       	ld	r18, Z
    2c56:	ce 01       	movw	r24, r28
    2c58:	07 96       	adiw	r24, 0x07	; 7
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	e4 0f       	add	r30, r20
    2c5e:	f5 1f       	adc	r31, r21
    2c60:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	28 2f       	mov	r18, r24
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	ce 01       	movw	r24, r28
    2c6a:	07 96       	adiw	r24, 0x07	; 7
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	e2 0f       	add	r30, r18
    2c70:	f3 1f       	adc	r31, r19
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	80 83       	st	Z, r24

        Local_u8Start++;
    2c76:	8b 81       	ldd	r24, Y+3	; 0x03
    2c78:	8f 5f       	subi	r24, 0xFF	; 255
    2c7a:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	81 50       	subi	r24, 0x01	; 1
    2c80:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	98 17       	cp	r25, r24
    2c88:	80 f2       	brcs	.-96     	; 0x2c2a <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	07 96       	adiw	r24, 0x07	; 7
    2c8e:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    2c96:	8e 81       	ldd	r24, Y+6	; 0x06
    2c98:	88 a3       	std	Y+32, r24	; 0x20
    2c9a:	88 a1       	ldd	r24, Y+32	; 0x20
}
    2c9c:	a0 96       	adiw	r28, 0x20	; 32
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	27 97       	sbiw	r28, 0x07	; 7
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	8b 83       	std	Y+3, r24	; 0x03
    2cc4:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    2cc6:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	81 31       	cpi	r24, 0x11	; 17
    2ccc:	18 f4       	brcc	.+6      	; 0x2cd4 <LCD_u8SetPosXY+0x26>
    2cce:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd0:	83 30       	cpi	r24, 0x03	; 3
    2cd2:	18 f0       	brcs	.+6      	; 0x2cda <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    2cd4:	2a 81       	ldd	r18, Y+2	; 0x02
    2cd6:	2f 83       	std	Y+7, r18	; 0x07
    2cd8:	23 c0       	rjmp	.+70     	; 0x2d20 <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    2cda:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    2cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	3e 83       	std	Y+6, r19	; 0x06
    2ce4:	2d 83       	std	Y+5, r18	; 0x05
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	81 30       	cpi	r24, 0x01	; 1
    2cec:	91 05       	cpc	r25, r1
    2cee:	31 f0       	breq	.+12     	; 0x2cfc <LCD_u8SetPosXY+0x4e>
    2cf0:	2d 81       	ldd	r18, Y+5	; 0x05
    2cf2:	3e 81       	ldd	r19, Y+6	; 0x06
    2cf4:	22 30       	cpi	r18, 0x02	; 2
    2cf6:	31 05       	cpc	r19, r1
    2cf8:	21 f0       	breq	.+8      	; 0x2d02 <LCD_u8SetPosXY+0x54>
    2cfa:	07 c0       	rjmp	.+14     	; 0x2d0a <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    2cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	05 c0       	rjmp	.+10     	; 0x2d0c <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    2d02:	8b 81       	ldd	r24, Y+3	; 0x03
    2d04:	80 5c       	subi	r24, 0xC0	; 192
    2d06:	89 83       	std	Y+1, r24	; 0x01
    2d08:	01 c0       	rjmp	.+2      	; 0x2d0c <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    2d0a:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	80 68       	ori	r24, 0x80	; 128
    2d10:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    2d1c:	3a 81       	ldd	r19, Y+2	; 0x02
    2d1e:	3f 83       	std	Y+7, r19	; 0x07
    2d20:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2d22:	27 96       	adiw	r28, 0x07	; 7
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	08 95       	ret

00002d34 <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    2d3c:	27 97       	sbiw	r28, 0x07	; 7
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	de bf       	out	0x3e, r29	; 62
    2d44:	0f be       	out	0x3f, r0	; 63
    2d46:	cd bf       	out	0x3d, r28	; 61
    2d48:	9d 83       	std	Y+5, r25	; 0x05
    2d4a:	8c 83       	std	Y+4, r24	; 0x04
    2d4c:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2d4e:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    2d50:	8c 81       	ldd	r24, Y+4	; 0x04
    2d52:	9d 81       	ldd	r25, Y+5	; 0x05
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	19 f0       	breq	.+6      	; 0x2d5e <LCD_u8StoreCustomChar+0x2a>
    2d58:	8e 81       	ldd	r24, Y+6	; 0x06
    2d5a:	89 30       	cpi	r24, 0x09	; 9
    2d5c:	18 f0       	brcs	.+6      	; 0x2d64 <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    2d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d60:	8f 83       	std	Y+7, r24	; 0x07
    2d62:	2a c0       	rjmp	.+84     	; 0x2db8 <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    2d64:	8e 81       	ldd	r24, Y+6	; 0x06
    2d66:	88 2f       	mov	r24, r24
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	88 0f       	add	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	80 64       	ori	r24, 0x40	; 64
    2d7c:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    2d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d80:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    2d84:	19 82       	std	Y+1, r1	; 0x01
    2d86:	0e c0       	rjmp	.+28     	; 0x2da4 <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d90:	9d 81       	ldd	r25, Y+5	; 0x05
    2d92:	fc 01       	movw	r30, r24
    2d94:	e2 0f       	add	r30, r18
    2d96:	f3 1f       	adc	r31, r19
    2d98:	80 81       	ld	r24, Z
    2d9a:	0e 94 10 15 	call	0x2a20	; 0x2a20 <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	8f 5f       	subi	r24, 0xFF	; 255
    2da2:	89 83       	std	Y+1, r24	; 0x01
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	88 30       	cpi	r24, 0x08	; 8
    2da8:	78 f3       	brcs	.-34     	; 0x2d88 <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    2daa:	82 e0       	ldi	r24, 0x02	; 2
    2dac:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	8f 83       	std	Y+7, r24	; 0x07
    2db8:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2dba:	27 96       	adiw	r28, 0x07	; 7
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <LCD_u8DisplayCustomChar+0x6>
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <LCD_u8DisplayCustomChar+0x8>
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	8a 83       	std	Y+2, r24	; 0x02
    2dda:	6b 83       	std	Y+3, r22	; 0x03
    2ddc:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2dde:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    2de0:	8c 81       	ldd	r24, Y+4	; 0x04
    2de2:	6b 81       	ldd	r22, Y+3	; 0x03
    2de4:	0e 94 57 16 	call	0x2cae	; 0x2cae <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	0e 94 10 15 	call	0x2a20	; 0x2a20 <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2df4:	0f 90       	pop	r0
    2df6:	0f 90       	pop	r0
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <main>:





int main(){
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
//		EXTI_enuSetCallBack(warningSequence, 1);
//	/**************************************************************/


	/********************* Testing LCD Driver *********************/
	LCD_enuInit();
    2e0a:	0e 94 8a 11 	call	0x2314	; 0x2314 <LCD_enuInit>
	LCD_u8SendString("Ahmed Asl");
    2e0e:	80 e6       	ldi	r24, 0x60	; 96
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <LCD_u8SendString>
	LCD_u8SetPosXY(0, 2);
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	62 e0       	ldi	r22, 0x02	; 2
    2e1a:	0e 94 57 16 	call	0x2cae	; 0x2cae <LCD_u8SetPosXY>
//			LCD_enuIntegerToString(AnalogReadingValue, 10);
//		}
	/****************************************************************/


	DIO_enuSetPinDirection(DIO_u8PortD, DIO_u8PIN0, DIO_u8INPUT);
    2e1e:	83 e0       	ldi	r24, 0x03	; 3
    2e20:	60 e0       	ldi	r22, 0x00	; 0
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PortD, DIO_u8PIN1, DIO_u8OUTPUT);
    2e28:	83 e0       	ldi	r24, 0x03	; 3
    2e2a:	61 e0       	ldi	r22, 0x01	; 1
    2e2c:	41 e0       	ldi	r20, 0x01	; 1
    2e2e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <DIO_enuSetPinDirection>
	UART_vidInit();
    2e32:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_vidInit>


	while(1){

		UART_enuSendString("Works ");
    2e36:	8a e6       	ldi	r24, 0x6A	; 106
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	0e 94 1a 06 	call	0xc34	; 0xc34 <UART_enuSendString>
    2e3e:	fb cf       	rjmp	.-10     	; 0x2e36 <main+0x34>

00002e40 <__divmodsi4>:
    2e40:	97 fb       	bst	r25, 7
    2e42:	09 2e       	mov	r0, r25
    2e44:	05 26       	eor	r0, r21
    2e46:	0e d0       	rcall	.+28     	; 0x2e64 <__divmodsi4_neg1>
    2e48:	57 fd       	sbrc	r21, 7
    2e4a:	04 d0       	rcall	.+8      	; 0x2e54 <__divmodsi4_neg2>
    2e4c:	14 d0       	rcall	.+40     	; 0x2e76 <__udivmodsi4>
    2e4e:	0a d0       	rcall	.+20     	; 0x2e64 <__divmodsi4_neg1>
    2e50:	00 1c       	adc	r0, r0
    2e52:	38 f4       	brcc	.+14     	; 0x2e62 <__divmodsi4_exit>

00002e54 <__divmodsi4_neg2>:
    2e54:	50 95       	com	r21
    2e56:	40 95       	com	r20
    2e58:	30 95       	com	r19
    2e5a:	21 95       	neg	r18
    2e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5e:	4f 4f       	sbci	r20, 0xFF	; 255
    2e60:	5f 4f       	sbci	r21, 0xFF	; 255

00002e62 <__divmodsi4_exit>:
    2e62:	08 95       	ret

00002e64 <__divmodsi4_neg1>:
    2e64:	f6 f7       	brtc	.-4      	; 0x2e62 <__divmodsi4_exit>
    2e66:	90 95       	com	r25
    2e68:	80 95       	com	r24
    2e6a:	70 95       	com	r23
    2e6c:	61 95       	neg	r22
    2e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e70:	8f 4f       	sbci	r24, 0xFF	; 255
    2e72:	9f 4f       	sbci	r25, 0xFF	; 255
    2e74:	08 95       	ret

00002e76 <__udivmodsi4>:
    2e76:	a1 e2       	ldi	r26, 0x21	; 33
    2e78:	1a 2e       	mov	r1, r26
    2e7a:	aa 1b       	sub	r26, r26
    2e7c:	bb 1b       	sub	r27, r27
    2e7e:	fd 01       	movw	r30, r26
    2e80:	0d c0       	rjmp	.+26     	; 0x2e9c <__udivmodsi4_ep>

00002e82 <__udivmodsi4_loop>:
    2e82:	aa 1f       	adc	r26, r26
    2e84:	bb 1f       	adc	r27, r27
    2e86:	ee 1f       	adc	r30, r30
    2e88:	ff 1f       	adc	r31, r31
    2e8a:	a2 17       	cp	r26, r18
    2e8c:	b3 07       	cpc	r27, r19
    2e8e:	e4 07       	cpc	r30, r20
    2e90:	f5 07       	cpc	r31, r21
    2e92:	20 f0       	brcs	.+8      	; 0x2e9c <__udivmodsi4_ep>
    2e94:	a2 1b       	sub	r26, r18
    2e96:	b3 0b       	sbc	r27, r19
    2e98:	e4 0b       	sbc	r30, r20
    2e9a:	f5 0b       	sbc	r31, r21

00002e9c <__udivmodsi4_ep>:
    2e9c:	66 1f       	adc	r22, r22
    2e9e:	77 1f       	adc	r23, r23
    2ea0:	88 1f       	adc	r24, r24
    2ea2:	99 1f       	adc	r25, r25
    2ea4:	1a 94       	dec	r1
    2ea6:	69 f7       	brne	.-38     	; 0x2e82 <__udivmodsi4_loop>
    2ea8:	60 95       	com	r22
    2eaa:	70 95       	com	r23
    2eac:	80 95       	com	r24
    2eae:	90 95       	com	r25
    2eb0:	9b 01       	movw	r18, r22
    2eb2:	ac 01       	movw	r20, r24
    2eb4:	bd 01       	movw	r22, r26
    2eb6:	cf 01       	movw	r24, r30
    2eb8:	08 95       	ret

00002eba <__prologue_saves__>:
    2eba:	2f 92       	push	r2
    2ebc:	3f 92       	push	r3
    2ebe:	4f 92       	push	r4
    2ec0:	5f 92       	push	r5
    2ec2:	6f 92       	push	r6
    2ec4:	7f 92       	push	r7
    2ec6:	8f 92       	push	r8
    2ec8:	9f 92       	push	r9
    2eca:	af 92       	push	r10
    2ecc:	bf 92       	push	r11
    2ece:	cf 92       	push	r12
    2ed0:	df 92       	push	r13
    2ed2:	ef 92       	push	r14
    2ed4:	ff 92       	push	r15
    2ed6:	0f 93       	push	r16
    2ed8:	1f 93       	push	r17
    2eda:	cf 93       	push	r28
    2edc:	df 93       	push	r29
    2ede:	cd b7       	in	r28, 0x3d	; 61
    2ee0:	de b7       	in	r29, 0x3e	; 62
    2ee2:	ca 1b       	sub	r28, r26
    2ee4:	db 0b       	sbc	r29, r27
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	09 94       	ijmp

00002ef2 <__epilogue_restores__>:
    2ef2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ef4:	39 88       	ldd	r3, Y+17	; 0x11
    2ef6:	48 88       	ldd	r4, Y+16	; 0x10
    2ef8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2efa:	6e 84       	ldd	r6, Y+14	; 0x0e
    2efc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2efe:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f00:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f02:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f04:	b9 84       	ldd	r11, Y+9	; 0x09
    2f06:	c8 84       	ldd	r12, Y+8	; 0x08
    2f08:	df 80       	ldd	r13, Y+7	; 0x07
    2f0a:	ee 80       	ldd	r14, Y+6	; 0x06
    2f0c:	fd 80       	ldd	r15, Y+5	; 0x05
    2f0e:	0c 81       	ldd	r16, Y+4	; 0x04
    2f10:	1b 81       	ldd	r17, Y+3	; 0x03
    2f12:	aa 81       	ldd	r26, Y+2	; 0x02
    2f14:	b9 81       	ldd	r27, Y+1	; 0x01
    2f16:	ce 0f       	add	r28, r30
    2f18:	d1 1d       	adc	r29, r1
    2f1a:	0f b6       	in	r0, 0x3f	; 63
    2f1c:	f8 94       	cli
    2f1e:	de bf       	out	0x3e, r29	; 62
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	cd bf       	out	0x3d, r28	; 61
    2f24:	ed 01       	movw	r28, r26
    2f26:	08 95       	ret

00002f28 <_exit>:
    2f28:	f8 94       	cli

00002f2a <__stop_program>:
    2f2a:	ff cf       	rjmp	.-2      	; 0x2f2a <__stop_program>
