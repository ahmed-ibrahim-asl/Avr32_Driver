
Avr32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  000027ae  00002842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800086  00800086  00002868  2**0
                  ALLOC
  3 .stab         00002dcc  00000000  00000000  00002868  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c39  00000000  00000000  00005634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000726d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000073ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000751d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009166  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a051  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b1ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b9bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__vector_1>
       8:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__vector_2>
       c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3a 13 	call	0x2674	; 0x2674 <main>
      8a:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c6 13 	jmp	0x278c	; 0x278c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ae 13 	jmp	0x275c	; 0x275c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     b50:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
     b52:	ef e5       	ldi	r30, 0x5F	; 95
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 23       	and	r24, r24
     b5a:	4c f0       	brlt	.+18     	; 0xb6e <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
     b5c:	af e5       	ldi	r26, 0x5F	; 95
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e5       	ldi	r30, 0x5F	; 95
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
}
     b70:	0f 90       	pop	r0
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	0f 92       	push	r0
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     b82:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
     b84:	ef e5       	ldi	r30, 0x5F	; 95
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	88 23       	and	r24, r24
     b8c:	4c f4       	brge	.+18     	; 0xba0 <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
     b8e:	af e5       	ldi	r26, 0x5F	; 95
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	ef e5       	ldi	r30, 0x5F	; 95
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	8f 77       	andi	r24, 0x7F	; 127
     b9a:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ba2:	0f 90       	pop	r0
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2a 97       	sbiw	r28, 0x0a	; 10
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	9b 83       	std	Y+3, r25	; 0x03
     bc0:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
     bc2:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	9b 81       	ldd	r25, Y+3	; 0x03
     bc8:	00 97       	sbiw	r24, 0x00	; 0
     bca:	19 f4       	brne	.+6      	; 0xbd2 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
     bcc:	29 81       	ldd	r18, Y+1	; 0x01
     bce:	2a 87       	std	Y+10, r18	; 0x0a
     bd0:	3c c1       	rjmp	.+632    	; 0xe4a <EXTI_enuInit+0x2a0>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT0].Int_State == EXTI_ENABLED){
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	9b 81       	ldd	r25, Y+3	; 0x03
     bd6:	fc 01       	movw	r30, r24
     bd8:	3c 96       	adiw	r30, 0x0c	; 12
     bda:	80 81       	ld	r24, Z
     bdc:	81 30       	cpi	r24, 0x01	; 1
     bde:	09 f0       	breq	.+2      	; 0xbe2 <EXTI_enuInit+0x38>
     be0:	66 c0       	rjmp	.+204    	; 0xcae <EXTI_enuInit+0x104>

			SET_BIT(GICR, INT0_switch);
     be2:	ab e5       	ldi	r26, 0x5B	; 91
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	eb e5       	ldi	r30, 0x5B	; 91
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	80 64       	ori	r24, 0x40	; 64
     bee:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT0].Sence_Level){
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	9b 81       	ldd	r25, Y+3	; 0x03
     bf4:	fc 01       	movw	r30, r24
     bf6:	3c 96       	adiw	r30, 0x0c	; 12
     bf8:	81 81       	ldd	r24, Z+1	; 0x01
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	39 87       	std	Y+9, r19	; 0x09
     c00:	28 87       	std	Y+8, r18	; 0x08
     c02:	88 85       	ldd	r24, Y+8	; 0x08
     c04:	99 85       	ldd	r25, Y+9	; 0x09
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	91 05       	cpc	r25, r1
     c0a:	21 f1       	breq	.+72     	; 0xc54 <EXTI_enuInit+0xaa>
     c0c:	28 85       	ldd	r18, Y+8	; 0x08
     c0e:	39 85       	ldd	r19, Y+9	; 0x09
     c10:	22 30       	cpi	r18, 0x02	; 2
     c12:	31 05       	cpc	r19, r1
     c14:	2c f4       	brge	.+10     	; 0xc20 <EXTI_enuInit+0x76>
     c16:	88 85       	ldd	r24, Y+8	; 0x08
     c18:	99 85       	ldd	r25, Y+9	; 0x09
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	61 f0       	breq	.+24     	; 0xc36 <EXTI_enuInit+0x8c>
     c1e:	55 c0       	rjmp	.+170    	; 0xcca <EXTI_enuInit+0x120>
     c20:	28 85       	ldd	r18, Y+8	; 0x08
     c22:	39 85       	ldd	r19, Y+9	; 0x09
     c24:	22 30       	cpi	r18, 0x02	; 2
     c26:	31 05       	cpc	r19, r1
     c28:	21 f1       	breq	.+72     	; 0xc72 <EXTI_enuInit+0xc8>
     c2a:	88 85       	ldd	r24, Y+8	; 0x08
     c2c:	99 85       	ldd	r25, Y+9	; 0x09
     c2e:	83 30       	cpi	r24, 0x03	; 3
     c30:	91 05       	cpc	r25, r1
     c32:	71 f1       	breq	.+92     	; 0xc90 <EXTI_enuInit+0xe6>
     c34:	4a c0       	rjmp	.+148    	; 0xcca <EXTI_enuInit+0x120>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
     c36:	a5 e5       	ldi	r26, 0x55	; 85
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e5 e5       	ldi	r30, 0x55	; 85
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	8e 7f       	andi	r24, 0xFE	; 254
     c42:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
     c44:	a5 e5       	ldi	r26, 0x55	; 85
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e5 e5       	ldi	r30, 0x55	; 85
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8d 7f       	andi	r24, 0xFD	; 253
     c50:	8c 93       	st	X, r24
     c52:	3b c0       	rjmp	.+118    	; 0xcca <EXTI_enuInit+0x120>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
     c54:	a5 e5       	ldi	r26, 0x55	; 85
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e5 e5       	ldi	r30, 0x55	; 85
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	81 60       	ori	r24, 0x01	; 1
     c60:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
     c62:	a5 e5       	ldi	r26, 0x55	; 85
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e5 e5       	ldi	r30, 0x55	; 85
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	8d 7f       	andi	r24, 0xFD	; 253
     c6e:	8c 93       	st	X, r24
     c70:	2c c0       	rjmp	.+88     	; 0xcca <EXTI_enuInit+0x120>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
     c72:	a5 e5       	ldi	r26, 0x55	; 85
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	e5 e5       	ldi	r30, 0x55	; 85
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	8e 7f       	andi	r24, 0xFE	; 254
     c7e:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
     c80:	a5 e5       	ldi	r26, 0x55	; 85
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e5 e5       	ldi	r30, 0x55	; 85
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	82 60       	ori	r24, 0x02	; 2
     c8c:	8c 93       	st	X, r24
     c8e:	1d c0       	rjmp	.+58     	; 0xcca <EXTI_enuInit+0x120>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
     c90:	a5 e5       	ldi	r26, 0x55	; 85
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e5 e5       	ldi	r30, 0x55	; 85
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	81 60       	ori	r24, 0x01	; 1
     c9c:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
     c9e:	a5 e5       	ldi	r26, 0x55	; 85
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e5 e5       	ldi	r30, 0x55	; 85
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	82 60       	ori	r24, 0x02	; 2
     caa:	8c 93       	st	X, r24
     cac:	0e c0       	rjmp	.+28     	; 0xcca <EXTI_enuInit+0x120>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT0].Int_State == EXTI_DISABLED){
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	9b 81       	ldd	r25, Y+3	; 0x03
     cb2:	fc 01       	movw	r30, r24
     cb4:	3c 96       	adiw	r30, 0x0c	; 12
     cb6:	80 81       	ld	r24, Z
     cb8:	88 23       	and	r24, r24
     cba:	39 f4       	brne	.+14     	; 0xcca <EXTI_enuInit+0x120>

			CLR_BIT(GICR, INT0_switch);
     cbc:	ab e5       	ldi	r26, 0x5B	; 91
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	eb e5       	ldi	r30, 0x5B	; 91
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	8f 7b       	andi	r24, 0xBF	; 191
     cc8:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT1].Int_State == EXTI_ENABLED){
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	9b 81       	ldd	r25, Y+3	; 0x03
     cce:	fc 01       	movw	r30, r24
     cd0:	3e 96       	adiw	r30, 0x0e	; 14
     cd2:	80 81       	ld	r24, Z
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	09 f0       	breq	.+2      	; 0xcda <EXTI_enuInit+0x130>
     cd8:	66 c0       	rjmp	.+204    	; 0xda6 <EXTI_enuInit+0x1fc>

			SET_BIT(GICR, INT1_switch);
     cda:	ab e5       	ldi	r26, 0x5B	; 91
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	eb e5       	ldi	r30, 0x5B	; 91
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	80 68       	ori	r24, 0x80	; 128
     ce6:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT1].Sence_Level){
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	9b 81       	ldd	r25, Y+3	; 0x03
     cec:	fc 01       	movw	r30, r24
     cee:	3e 96       	adiw	r30, 0x0e	; 14
     cf0:	81 81       	ldd	r24, Z+1	; 0x01
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	3f 83       	std	Y+7, r19	; 0x07
     cf8:	2e 83       	std	Y+6, r18	; 0x06
     cfa:	8e 81       	ldd	r24, Y+6	; 0x06
     cfc:	9f 81       	ldd	r25, Y+7	; 0x07
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	91 05       	cpc	r25, r1
     d02:	21 f1       	breq	.+72     	; 0xd4c <EXTI_enuInit+0x1a2>
     d04:	2e 81       	ldd	r18, Y+6	; 0x06
     d06:	3f 81       	ldd	r19, Y+7	; 0x07
     d08:	22 30       	cpi	r18, 0x02	; 2
     d0a:	31 05       	cpc	r19, r1
     d0c:	2c f4       	brge	.+10     	; 0xd18 <EXTI_enuInit+0x16e>
     d0e:	8e 81       	ldd	r24, Y+6	; 0x06
     d10:	9f 81       	ldd	r25, Y+7	; 0x07
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	61 f0       	breq	.+24     	; 0xd2e <EXTI_enuInit+0x184>
     d16:	55 c0       	rjmp	.+170    	; 0xdc2 <EXTI_enuInit+0x218>
     d18:	2e 81       	ldd	r18, Y+6	; 0x06
     d1a:	3f 81       	ldd	r19, Y+7	; 0x07
     d1c:	22 30       	cpi	r18, 0x02	; 2
     d1e:	31 05       	cpc	r19, r1
     d20:	21 f1       	breq	.+72     	; 0xd6a <EXTI_enuInit+0x1c0>
     d22:	8e 81       	ldd	r24, Y+6	; 0x06
     d24:	9f 81       	ldd	r25, Y+7	; 0x07
     d26:	83 30       	cpi	r24, 0x03	; 3
     d28:	91 05       	cpc	r25, r1
     d2a:	71 f1       	breq	.+92     	; 0xd88 <EXTI_enuInit+0x1de>
     d2c:	4a c0       	rjmp	.+148    	; 0xdc2 <EXTI_enuInit+0x218>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
     d2e:	a5 e5       	ldi	r26, 0x55	; 85
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e5 e5       	ldi	r30, 0x55	; 85
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8b 7f       	andi	r24, 0xFB	; 251
     d3a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
     d3c:	a5 e5       	ldi	r26, 0x55	; 85
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	e5 e5       	ldi	r30, 0x55	; 85
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	87 7f       	andi	r24, 0xF7	; 247
     d48:	8c 93       	st	X, r24
     d4a:	3b c0       	rjmp	.+118    	; 0xdc2 <EXTI_enuInit+0x218>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
     d4c:	a5 e5       	ldi	r26, 0x55	; 85
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e5 e5       	ldi	r30, 0x55	; 85
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	84 60       	ori	r24, 0x04	; 4
     d58:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
     d5a:	a5 e5       	ldi	r26, 0x55	; 85
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e5 e5       	ldi	r30, 0x55	; 85
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	87 7f       	andi	r24, 0xF7	; 247
     d66:	8c 93       	st	X, r24
     d68:	2c c0       	rjmp	.+88     	; 0xdc2 <EXTI_enuInit+0x218>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
     d6a:	a5 e5       	ldi	r26, 0x55	; 85
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e5 e5       	ldi	r30, 0x55	; 85
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	8b 7f       	andi	r24, 0xFB	; 251
     d76:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
     d78:	a5 e5       	ldi	r26, 0x55	; 85
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e5 e5       	ldi	r30, 0x55	; 85
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	88 60       	ori	r24, 0x08	; 8
     d84:	8c 93       	st	X, r24
     d86:	1d c0       	rjmp	.+58     	; 0xdc2 <EXTI_enuInit+0x218>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
     d88:	a5 e5       	ldi	r26, 0x55	; 85
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	e5 e5       	ldi	r30, 0x55	; 85
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	80 81       	ld	r24, Z
     d92:	84 60       	ori	r24, 0x04	; 4
     d94:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
     d96:	a5 e5       	ldi	r26, 0x55	; 85
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e5 e5       	ldi	r30, 0x55	; 85
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	88 60       	ori	r24, 0x08	; 8
     da2:	8c 93       	st	X, r24
     da4:	0e c0       	rjmp	.+28     	; 0xdc2 <EXTI_enuInit+0x218>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT1].Int_State == EXTI_DISABLED){
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	9b 81       	ldd	r25, Y+3	; 0x03
     daa:	fc 01       	movw	r30, r24
     dac:	3e 96       	adiw	r30, 0x0e	; 14
     dae:	80 81       	ld	r24, Z
     db0:	88 23       	and	r24, r24
     db2:	39 f4       	brne	.+14     	; 0xdc2 <EXTI_enuInit+0x218>

			CLR_BIT(GICR, INT1_switch);
     db4:	ab e5       	ldi	r26, 0x5B	; 91
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e5       	ldi	r30, 0x5B	; 91
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8f 77       	andi	r24, 0x7F	; 127
     dc0:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT2].Int_State == EXTI_ENABLED){
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	9b 81       	ldd	r25, Y+3	; 0x03
     dc6:	fc 01       	movw	r30, r24
     dc8:	3a 96       	adiw	r30, 0x0a	; 10
     dca:	80 81       	ld	r24, Z
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	59 f5       	brne	.+86     	; 0xe26 <EXTI_enuInit+0x27c>

			SET_BIT(GICR, INT2_switch);
     dd0:	ab e5       	ldi	r26, 0x5B	; 91
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	eb e5       	ldi	r30, 0x5B	; 91
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 62       	ori	r24, 0x20	; 32
     ddc:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT2].Sence_Level){
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	9b 81       	ldd	r25, Y+3	; 0x03
     de2:	fc 01       	movw	r30, r24
     de4:	3a 96       	adiw	r30, 0x0a	; 10
     de6:	81 81       	ldd	r24, Z+1	; 0x01
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	3d 83       	std	Y+5, r19	; 0x05
     dee:	2c 83       	std	Y+4, r18	; 0x04
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	82 30       	cpi	r24, 0x02	; 2
     df6:	91 05       	cpc	r25, r1
     df8:	31 f0       	breq	.+12     	; 0xe06 <EXTI_enuInit+0x25c>
     dfa:	2c 81       	ldd	r18, Y+4	; 0x04
     dfc:	3d 81       	ldd	r19, Y+5	; 0x05
     dfe:	23 30       	cpi	r18, 0x03	; 3
     e00:	31 05       	cpc	r19, r1
     e02:	49 f0       	breq	.+18     	; 0xe16 <EXTI_enuInit+0x26c>
     e04:	1e c0       	rjmp	.+60     	; 0xe42 <EXTI_enuInit+0x298>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
     e06:	a4 e5       	ldi	r26, 0x54	; 84
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e4 e5       	ldi	r30, 0x54	; 84
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8f 7b       	andi	r24, 0xBF	; 191
     e12:	8c 93       	st	X, r24
     e14:	16 c0       	rjmp	.+44     	; 0xe42 <EXTI_enuInit+0x298>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
     e16:	a4 e5       	ldi	r26, 0x54	; 84
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e4 e5       	ldi	r30, 0x54	; 84
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	80 64       	ori	r24, 0x40	; 64
     e22:	8c 93       	st	X, r24
     e24:	0e c0       	rjmp	.+28     	; 0xe42 <EXTI_enuInit+0x298>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT2].Int_State == EXTI_DISABLED){
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	9b 81       	ldd	r25, Y+3	; 0x03
     e2a:	fc 01       	movw	r30, r24
     e2c:	3a 96       	adiw	r30, 0x0a	; 10
     e2e:	80 81       	ld	r24, Z
     e30:	88 23       	and	r24, r24
     e32:	39 f4       	brne	.+14     	; 0xe42 <EXTI_enuInit+0x298>

			CLR_BIT(GICR, INT2_switch);
     e34:	ab e5       	ldi	r26, 0x5B	; 91
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	eb e5       	ldi	r30, 0x5B	; 91
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	8f 7d       	andi	r24, 0xDF	; 223
     e40:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
     e46:	39 81       	ldd	r19, Y+1	; 0x01
     e48:	3a 87       	std	Y+10, r19	; 0x0a
     e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
}
     e4c:	2a 96       	adiw	r28, 0x0a	; 10
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	08 95       	ret

00000e5e <EXTI_enuEnableInterrupt>:


ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
     e5e:	df 93       	push	r29
     e60:	cf 93       	push	r28
     e62:	00 d0       	rcall	.+0      	; 0xe64 <EXTI_enuEnableInterrupt+0x6>
     e64:	00 d0       	rcall	.+0      	; 0xe66 <EXTI_enuEnableInterrupt+0x8>
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
     e6c:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	3c 83       	std	Y+4, r19	; 0x04
     e76:	2b 83       	std	Y+3, r18	; 0x03
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	86 30       	cpi	r24, 0x06	; 6
     e7e:	91 05       	cpc	r25, r1
     e80:	59 f0       	breq	.+22     	; 0xe98 <EXTI_enuEnableInterrupt+0x3a>
     e82:	2b 81       	ldd	r18, Y+3	; 0x03
     e84:	3c 81       	ldd	r19, Y+4	; 0x04
     e86:	27 30       	cpi	r18, 0x07	; 7
     e88:	31 05       	cpc	r19, r1
     e8a:	71 f0       	breq	.+28     	; 0xea8 <EXTI_enuEnableInterrupt+0x4a>
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	85 30       	cpi	r24, 0x05	; 5
     e92:	91 05       	cpc	r25, r1
     e94:	89 f0       	breq	.+34     	; 0xeb8 <EXTI_enuEnableInterrupt+0x5a>
     e96:	17 c0       	rjmp	.+46     	; 0xec6 <EXTI_enuEnableInterrupt+0x68>
			case INT0:


				SET_BIT(GICR, INT0_switch);
     e98:	ab e5       	ldi	r26, 0x5B	; 91
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	eb e5       	ldi	r30, 0x5B	; 91
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 64       	ori	r24, 0x40	; 64
     ea4:	8c 93       	st	X, r24
     ea6:	0f c0       	rjmp	.+30     	; 0xec6 <EXTI_enuEnableInterrupt+0x68>
				break;

			case INT1:


				SET_BIT(GICR, INT1_switch);
     ea8:	ab e5       	ldi	r26, 0x5B	; 91
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	eb e5       	ldi	r30, 0x5B	; 91
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 68       	ori	r24, 0x80	; 128
     eb4:	8c 93       	st	X, r24
     eb6:	07 c0       	rjmp	.+14     	; 0xec6 <EXTI_enuEnableInterrupt+0x68>

				break;

			case INT2:

				SET_BIT(GICR, INT2_switch);
     eb8:	ab e5       	ldi	r26, 0x5B	; 91
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	eb e5       	ldi	r30, 0x5B	; 91
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 62       	ori	r24, 0x20	; 32
     ec4:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
}
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <EXTI_enuDisableInterrupt>:


ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <EXTI_enuDisableInterrupt+0x6>
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <EXTI_enuDisableInterrupt+0x8>
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
     eea:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT2){
     eec:	8a 81       	ldd	r24, Y+2	; 0x02
     eee:	86 30       	cpi	r24, 0x06	; 6
     ef0:	18 f0       	brcs	.+6      	; 0xef8 <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
     ef2:	29 81       	ldd	r18, Y+1	; 0x01
     ef4:	2d 83       	std	Y+5, r18	; 0x05
     ef6:	30 c0       	rjmp	.+96     	; 0xf58 <EXTI_enuDisableInterrupt+0x7e>
	}

	else{

		switch(Copy_u8IntNumber){
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	3c 83       	std	Y+4, r19	; 0x04
     f00:	2b 83       	std	Y+3, r18	; 0x03
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	9c 81       	ldd	r25, Y+4	; 0x04
     f06:	86 30       	cpi	r24, 0x06	; 6
     f08:	91 05       	cpc	r25, r1
     f0a:	59 f0       	breq	.+22     	; 0xf22 <EXTI_enuDisableInterrupt+0x48>
     f0c:	2b 81       	ldd	r18, Y+3	; 0x03
     f0e:	3c 81       	ldd	r19, Y+4	; 0x04
     f10:	27 30       	cpi	r18, 0x07	; 7
     f12:	31 05       	cpc	r19, r1
     f14:	71 f0       	breq	.+28     	; 0xf32 <EXTI_enuDisableInterrupt+0x58>
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	85 30       	cpi	r24, 0x05	; 5
     f1c:	91 05       	cpc	r25, r1
     f1e:	89 f0       	breq	.+34     	; 0xf42 <EXTI_enuDisableInterrupt+0x68>
     f20:	17 c0       	rjmp	.+46     	; 0xf50 <EXTI_enuDisableInterrupt+0x76>
		case INT0:

			GICR &= ~(1<<INT0_switch);
     f22:	ab e5       	ldi	r26, 0x5B	; 91
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	eb e5       	ldi	r30, 0x5B	; 91
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 7b       	andi	r24, 0xBF	; 191
     f2e:	8c 93       	st	X, r24
     f30:	0f c0       	rjmp	.+30     	; 0xf50 <EXTI_enuDisableInterrupt+0x76>
			break;

		case INT1:

			GICR &= ~(1<<INT1_switch);
     f32:	ab e5       	ldi	r26, 0x5B	; 91
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	eb e5       	ldi	r30, 0x5B	; 91
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	8f 77       	andi	r24, 0x7F	; 127
     f3e:	8c 93       	st	X, r24
     f40:	07 c0       	rjmp	.+14     	; 0xf50 <EXTI_enuDisableInterrupt+0x76>
			break;

		case INT2:

			GICR &= ~(1<<INT2_switch);
     f42:	ab e5       	ldi	r26, 0x5B	; 91
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e5       	ldi	r30, 0x5B	; 91
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 7d       	andi	r24, 0xDF	; 223
     f4e:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
     f54:	99 81       	ldd	r25, Y+1	; 0x01
     f56:	9d 83       	std	Y+5, r25	; 0x05
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
}
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	2c 97       	sbiw	r28, 0x0c	; 12
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	8a 83       	std	Y+2, r24	; 0x02
     f80:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
     f82:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
     f84:	8a 81       	ldd	r24, Y+2	; 0x02
     f86:	86 30       	cpi	r24, 0x06	; 6
     f88:	18 f4       	brcc	.+6      	; 0xf90 <EXTI_enuSetSenseLevel+0x26>
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	84 30       	cpi	r24, 0x04	; 4
     f8e:	18 f0       	brcs	.+6      	; 0xf96 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
     f90:	29 81       	ldd	r18, Y+1	; 0x01
     f92:	2c 87       	std	Y+12, r18	; 0x0c
     f94:	f0 c0       	rjmp	.+480    	; 0x1176 <EXTI_enuSetSenseLevel+0x20c>
	}

	else{

		switch(Copy_u8IntNumber){
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	3b 87       	std	Y+11, r19	; 0x0b
     f9e:	2a 87       	std	Y+10, r18	; 0x0a
     fa0:	8a 85       	ldd	r24, Y+10	; 0x0a
     fa2:	9b 85       	ldd	r25, Y+11	; 0x0b
     fa4:	86 30       	cpi	r24, 0x06	; 6
     fa6:	91 05       	cpc	r25, r1
     fa8:	69 f0       	breq	.+26     	; 0xfc4 <EXTI_enuSetSenseLevel+0x5a>
     faa:	2a 85       	ldd	r18, Y+10	; 0x0a
     fac:	3b 85       	ldd	r19, Y+11	; 0x0b
     fae:	27 30       	cpi	r18, 0x07	; 7
     fb0:	31 05       	cpc	r19, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <EXTI_enuSetSenseLevel+0x4c>
     fb4:	62 c0       	rjmp	.+196    	; 0x107a <EXTI_enuSetSenseLevel+0x110>
     fb6:	8a 85       	ldd	r24, Y+10	; 0x0a
     fb8:	9b 85       	ldd	r25, Y+11	; 0x0b
     fba:	85 30       	cpi	r24, 0x05	; 5
     fbc:	91 05       	cpc	r25, r1
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <EXTI_enuSetSenseLevel+0x58>
     fc0:	b7 c0       	rjmp	.+366    	; 0x1130 <EXTI_enuSetSenseLevel+0x1c6>
     fc2:	d5 c0       	rjmp	.+426    	; 0x116e <EXTI_enuSetSenseLevel+0x204>
		case INT0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	39 87       	std	Y+9, r19	; 0x09
     fcc:	28 87       	std	Y+8, r18	; 0x08
     fce:	88 85       	ldd	r24, Y+8	; 0x08
     fd0:	99 85       	ldd	r25, Y+9	; 0x09
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	91 05       	cpc	r25, r1
     fd6:	a9 f0       	breq	.+42     	; 0x1002 <EXTI_enuSetSenseLevel+0x98>
     fd8:	28 85       	ldd	r18, Y+8	; 0x08
     fda:	39 85       	ldd	r19, Y+9	; 0x09
     fdc:	22 30       	cpi	r18, 0x02	; 2
     fde:	31 05       	cpc	r19, r1
     fe0:	2c f4       	brge	.+10     	; 0xfec <EXTI_enuSetSenseLevel+0x82>
     fe2:	88 85       	ldd	r24, Y+8	; 0x08
     fe4:	99 85       	ldd	r25, Y+9	; 0x09
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	d9 f0       	breq	.+54     	; 0x1020 <EXTI_enuSetSenseLevel+0xb6>
     fea:	c1 c0       	rjmp	.+386    	; 0x116e <EXTI_enuSetSenseLevel+0x204>
     fec:	28 85       	ldd	r18, Y+8	; 0x08
     fee:	39 85       	ldd	r19, Y+9	; 0x09
     ff0:	22 30       	cpi	r18, 0x02	; 2
     ff2:	31 05       	cpc	r19, r1
     ff4:	21 f1       	breq	.+72     	; 0x103e <EXTI_enuSetSenseLevel+0xd4>
     ff6:	88 85       	ldd	r24, Y+8	; 0x08
     ff8:	99 85       	ldd	r25, Y+9	; 0x09
     ffa:	83 30       	cpi	r24, 0x03	; 3
     ffc:	91 05       	cpc	r25, r1
     ffe:	71 f1       	breq	.+92     	; 0x105c <EXTI_enuSetSenseLevel+0xf2>
    1000:	b6 c0       	rjmp	.+364    	; 0x116e <EXTI_enuSetSenseLevel+0x204>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
    1002:	a5 e5       	ldi	r26, 0x55	; 85
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e5 e5       	ldi	r30, 0x55	; 85
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	81 60       	ori	r24, 0x01	; 1
    100e:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    1010:	a5 e5       	ldi	r26, 0x55	; 85
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e5 e5       	ldi	r30, 0x55	; 85
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8d 7f       	andi	r24, 0xFD	; 253
    101c:	8c 93       	st	X, r24
    101e:	a7 c0       	rjmp	.+334    	; 0x116e <EXTI_enuSetSenseLevel+0x204>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    1020:	a5 e5       	ldi	r26, 0x55	; 85
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e5       	ldi	r30, 0x55	; 85
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    102e:	a5 e5       	ldi	r26, 0x55	; 85
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e5 e5       	ldi	r30, 0x55	; 85
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	8d 7f       	andi	r24, 0xFD	; 253
    103a:	8c 93       	st	X, r24
    103c:	98 c0       	rjmp	.+304    	; 0x116e <EXTI_enuSetSenseLevel+0x204>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    103e:	a5 e5       	ldi	r26, 0x55	; 85
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e5       	ldi	r30, 0x55	; 85
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	8e 7f       	andi	r24, 0xFE	; 254
    104a:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    104c:	a5 e5       	ldi	r26, 0x55	; 85
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e5       	ldi	r30, 0x55	; 85
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	82 60       	ori	r24, 0x02	; 2
    1058:	8c 93       	st	X, r24
    105a:	89 c0       	rjmp	.+274    	; 0x116e <EXTI_enuSetSenseLevel+0x204>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    105c:	a5 e5       	ldi	r26, 0x55	; 85
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e5 e5       	ldi	r30, 0x55	; 85
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	81 60       	ori	r24, 0x01	; 1
    1068:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    106a:	a5 e5       	ldi	r26, 0x55	; 85
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e5 e5       	ldi	r30, 0x55	; 85
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	82 60       	ori	r24, 0x02	; 2
    1076:	8c 93       	st	X, r24
    1078:	7a c0       	rjmp	.+244    	; 0x116e <EXTI_enuSetSenseLevel+0x204>
			/**************************************************/

		case INT1:

			/**************** INT1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	3f 83       	std	Y+7, r19	; 0x07
    1082:	2e 83       	std	Y+6, r18	; 0x06
    1084:	8e 81       	ldd	r24, Y+6	; 0x06
    1086:	9f 81       	ldd	r25, Y+7	; 0x07
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	91 05       	cpc	r25, r1
    108c:	a9 f0       	breq	.+42     	; 0x10b8 <EXTI_enuSetSenseLevel+0x14e>
    108e:	2e 81       	ldd	r18, Y+6	; 0x06
    1090:	3f 81       	ldd	r19, Y+7	; 0x07
    1092:	22 30       	cpi	r18, 0x02	; 2
    1094:	31 05       	cpc	r19, r1
    1096:	2c f4       	brge	.+10     	; 0x10a2 <EXTI_enuSetSenseLevel+0x138>
    1098:	8e 81       	ldd	r24, Y+6	; 0x06
    109a:	9f 81       	ldd	r25, Y+7	; 0x07
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	d9 f0       	breq	.+54     	; 0x10d6 <EXTI_enuSetSenseLevel+0x16c>
    10a0:	66 c0       	rjmp	.+204    	; 0x116e <EXTI_enuSetSenseLevel+0x204>
    10a2:	2e 81       	ldd	r18, Y+6	; 0x06
    10a4:	3f 81       	ldd	r19, Y+7	; 0x07
    10a6:	22 30       	cpi	r18, 0x02	; 2
    10a8:	31 05       	cpc	r19, r1
    10aa:	21 f1       	breq	.+72     	; 0x10f4 <EXTI_enuSetSenseLevel+0x18a>
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	9f 81       	ldd	r25, Y+7	; 0x07
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	91 05       	cpc	r25, r1
    10b4:	71 f1       	breq	.+92     	; 0x1112 <EXTI_enuSetSenseLevel+0x1a8>
    10b6:	5b c0       	rjmp	.+182    	; 0x116e <EXTI_enuSetSenseLevel+0x204>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    10b8:	a5 e5       	ldi	r26, 0x55	; 85
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e5       	ldi	r30, 0x55	; 85
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	84 60       	ori	r24, 0x04	; 4
    10c4:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    10c6:	a5 e5       	ldi	r26, 0x55	; 85
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e5       	ldi	r30, 0x55	; 85
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	87 7f       	andi	r24, 0xF7	; 247
    10d2:	8c 93       	st	X, r24
    10d4:	4c c0       	rjmp	.+152    	; 0x116e <EXTI_enuSetSenseLevel+0x204>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    10d6:	a5 e5       	ldi	r26, 0x55	; 85
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e5       	ldi	r30, 0x55	; 85
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8b 7f       	andi	r24, 0xFB	; 251
    10e2:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    10e4:	a5 e5       	ldi	r26, 0x55	; 85
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e5       	ldi	r30, 0x55	; 85
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	87 7f       	andi	r24, 0xF7	; 247
    10f0:	8c 93       	st	X, r24
    10f2:	3d c0       	rjmp	.+122    	; 0x116e <EXTI_enuSetSenseLevel+0x204>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    10f4:	a5 e5       	ldi	r26, 0x55	; 85
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e5       	ldi	r30, 0x55	; 85
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8b 7f       	andi	r24, 0xFB	; 251
    1100:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    1102:	a5 e5       	ldi	r26, 0x55	; 85
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e5       	ldi	r30, 0x55	; 85
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	88 60       	ori	r24, 0x08	; 8
    110e:	8c 93       	st	X, r24
    1110:	2e c0       	rjmp	.+92     	; 0x116e <EXTI_enuSetSenseLevel+0x204>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    1112:	a5 e5       	ldi	r26, 0x55	; 85
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e5 e5       	ldi	r30, 0x55	; 85
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	84 60       	ori	r24, 0x04	; 4
    111e:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    1120:	a5 e5       	ldi	r26, 0x55	; 85
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e5       	ldi	r30, 0x55	; 85
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	88 60       	ori	r24, 0x08	; 8
    112c:	8c 93       	st	X, r24
    112e:	1f c0       	rjmp	.+62     	; 0x116e <EXTI_enuSetSenseLevel+0x204>


		case INT2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3d 83       	std	Y+5, r19	; 0x05
    1138:	2c 83       	std	Y+4, r18	; 0x04
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	91 05       	cpc	r25, r1
    1142:	31 f0       	breq	.+12     	; 0x1150 <EXTI_enuSetSenseLevel+0x1e6>
    1144:	2c 81       	ldd	r18, Y+4	; 0x04
    1146:	3d 81       	ldd	r19, Y+5	; 0x05
    1148:	23 30       	cpi	r18, 0x03	; 3
    114a:	31 05       	cpc	r19, r1
    114c:	49 f0       	breq	.+18     	; 0x1160 <EXTI_enuSetSenseLevel+0x1f6>
    114e:	0f c0       	rjmp	.+30     	; 0x116e <EXTI_enuSetSenseLevel+0x204>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    1150:	a4 e5       	ldi	r26, 0x54	; 84
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e4 e5       	ldi	r30, 0x54	; 84
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	8f 7b       	andi	r24, 0xBF	; 191
    115c:	8c 93       	st	X, r24
    115e:	07 c0       	rjmp	.+14     	; 0x116e <EXTI_enuSetSenseLevel+0x204>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    1160:	a4 e5       	ldi	r26, 0x54	; 84
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e4 e5       	ldi	r30, 0x54	; 84
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	80 64       	ori	r24, 0x40	; 64
    116c:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    1172:	39 81       	ldd	r19, Y+1	; 0x01
    1174:	3c 87       	std	Y+12, r19	; 0x0c
    1176:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1178:	2c 96       	adiw	r28, 0x0c	; 12
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <EXTI_enuSetCallBack+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <EXTI_enuSetCallBack+0x8>
    1192:	0f 92       	push	r0
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	9b 83       	std	Y+3, r25	; 0x03
    119a:	8a 83       	std	Y+2, r24	; 0x02
    119c:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    119e:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	8d 83       	std	Y+5, r24	; 0x05
    11b0:	18 c0       	rjmp	.+48     	; 0x11e2 <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT2){
    11b2:	8c 81       	ldd	r24, Y+4	; 0x04
    11b4:	86 30       	cpi	r24, 0x06	; 6
    11b6:	28 f0       	brcs	.+10     	; 0x11c2 <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    11b8:	84 e0       	ldi	r24, 0x04	; 4
    11ba:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	8d 83       	std	Y+5, r24	; 0x05
    11c0:	10 c0       	rjmp	.+32     	; 0x11e2 <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	fc 01       	movw	r30, r24
    11ce:	ea 57       	subi	r30, 0x7A	; 122
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	9b 81       	ldd	r25, Y+3	; 0x03
    11d6:	91 83       	std	Z+1, r25	; 0x01
    11d8:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	8d 83       	std	Y+5, r24	; 0x05
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <__vector_1>:


ISR(INT0_vect){
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	2f 93       	push	r18
    1200:	3f 93       	push	r19
    1202:	4f 93       	push	r20
    1204:	5f 93       	push	r21
    1206:	6f 93       	push	r22
    1208:	7f 93       	push	r23
    120a:	8f 93       	push	r24
    120c:	9f 93       	push	r25
    120e:	af 93       	push	r26
    1210:	bf 93       	push	r27
    1212:	ef 93       	push	r30
    1214:	ff 93       	push	r31
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT0] != NULL){
    121e:	80 91 92 00 	lds	r24, 0x0092
    1222:	90 91 93 00 	lds	r25, 0x0093
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	29 f0       	breq	.+10     	; 0x1234 <__vector_1+0x40>
			EXTI_pfunISRFun[INT0]();
    122a:	e0 91 92 00 	lds	r30, 0x0092
    122e:	f0 91 93 00 	lds	r31, 0x0093
    1232:	09 95       	icall
		}
}
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	ff 91       	pop	r31
    123a:	ef 91       	pop	r30
    123c:	bf 91       	pop	r27
    123e:	af 91       	pop	r26
    1240:	9f 91       	pop	r25
    1242:	8f 91       	pop	r24
    1244:	7f 91       	pop	r23
    1246:	6f 91       	pop	r22
    1248:	5f 91       	pop	r21
    124a:	4f 91       	pop	r20
    124c:	3f 91       	pop	r19
    124e:	2f 91       	pop	r18
    1250:	0f 90       	pop	r0
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	0f 90       	pop	r0
    1256:	1f 90       	pop	r1
    1258:	18 95       	reti

0000125a <__vector_2>:




ISR(INT1_vect){
    125a:	1f 92       	push	r1
    125c:	0f 92       	push	r0
    125e:	0f b6       	in	r0, 0x3f	; 63
    1260:	0f 92       	push	r0
    1262:	11 24       	eor	r1, r1
    1264:	2f 93       	push	r18
    1266:	3f 93       	push	r19
    1268:	4f 93       	push	r20
    126a:	5f 93       	push	r21
    126c:	6f 93       	push	r22
    126e:	7f 93       	push	r23
    1270:	8f 93       	push	r24
    1272:	9f 93       	push	r25
    1274:	af 93       	push	r26
    1276:	bf 93       	push	r27
    1278:	ef 93       	push	r30
    127a:	ff 93       	push	r31
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT0] != NULL){
    1284:	80 91 92 00 	lds	r24, 0x0092
    1288:	90 91 93 00 	lds	r25, 0x0093
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	29 f0       	breq	.+10     	; 0x129a <__vector_2+0x40>
			EXTI_pfunISRFun[INT0]();
    1290:	e0 91 92 00 	lds	r30, 0x0092
    1294:	f0 91 93 00 	lds	r31, 0x0093
    1298:	09 95       	icall
		}
}
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	bf 91       	pop	r27
    12a4:	af 91       	pop	r26
    12a6:	9f 91       	pop	r25
    12a8:	8f 91       	pop	r24
    12aa:	7f 91       	pop	r23
    12ac:	6f 91       	pop	r22
    12ae:	5f 91       	pop	r21
    12b0:	4f 91       	pop	r20
    12b2:	3f 91       	pop	r19
    12b4:	2f 91       	pop	r18
    12b6:	0f 90       	pop	r0
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	0f 90       	pop	r0
    12bc:	1f 90       	pop	r1
    12be:	18 95       	reti

000012c0 <__vector_3>:



ISR(INT2_vect){
    12c0:	1f 92       	push	r1
    12c2:	0f 92       	push	r0
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	0f 92       	push	r0
    12c8:	11 24       	eor	r1, r1
    12ca:	2f 93       	push	r18
    12cc:	3f 93       	push	r19
    12ce:	4f 93       	push	r20
    12d0:	5f 93       	push	r21
    12d2:	6f 93       	push	r22
    12d4:	7f 93       	push	r23
    12d6:	8f 93       	push	r24
    12d8:	9f 93       	push	r25
    12da:	af 93       	push	r26
    12dc:	bf 93       	push	r27
    12de:	ef 93       	push	r30
    12e0:	ff 93       	push	r31
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT0] != NULL){
    12ea:	80 91 92 00 	lds	r24, 0x0092
    12ee:	90 91 93 00 	lds	r25, 0x0093
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	29 f0       	breq	.+10     	; 0x1300 <__vector_3+0x40>
			EXTI_pfunISRFun[INT0]();
    12f6:	e0 91 92 00 	lds	r30, 0x0092
    12fa:	f0 91 93 00 	lds	r31, 0x0093
    12fe:	09 95       	icall
		}
}
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	ff 91       	pop	r31
    1306:	ef 91       	pop	r30
    1308:	bf 91       	pop	r27
    130a:	af 91       	pop	r26
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	7f 91       	pop	r23
    1312:	6f 91       	pop	r22
    1314:	5f 91       	pop	r21
    1316:	4f 91       	pop	r20
    1318:	3f 91       	pop	r19
    131a:	2f 91       	pop	r18
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	0f 92       	push	r0
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1330:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    1332:	ea e3       	ldi	r30, 0x3A	; 58
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 ef       	ldi	r24, 0xF0	; 240
    1338:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    133a:	eb e3       	ldi	r30, 0x3B	; 59
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	83 ec       	ldi	r24, 0xC3	; 195
    1340:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    1342:	e7 e3       	ldi	r30, 0x37	; 55
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 ef       	ldi	r24, 0xF0	; 240
    1348:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    134a:	e8 e3       	ldi	r30, 0x38	; 56
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	83 ec       	ldi	r24, 0xC3	; 195
    1350:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 ef       	ldi	r24, 0xF0	; 240
    1358:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    135a:	e5 e3       	ldi	r30, 0x35	; 53
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	83 ec       	ldi	r24, 0xC3	; 195
    1360:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    1362:	e1 e3       	ldi	r30, 0x31	; 49
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 ef       	ldi	r24, 0xF0	; 240
    1368:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    136a:	e2 e3       	ldi	r30, 0x32	; 50
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	83 ec       	ldi	r24, 0xC3	; 195
    1370:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    1372:	89 81       	ldd	r24, Y+1	; 0x01
}
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	27 97       	sbiw	r28, 0x07	; 7
    1386:	0f b6       	in	r0, 0x3f	; 63
    1388:	f8 94       	cli
    138a:	de bf       	out	0x3e, r29	; 62
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	cd bf       	out	0x3d, r28	; 61
    1390:	8a 83       	std	Y+2, r24	; 0x02
    1392:	6b 83       	std	Y+3, r22	; 0x03
    1394:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1396:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	84 30       	cpi	r24, 0x04	; 4
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <DIO_enuSetPinDirection+0x24>
    139e:	de c0       	rjmp	.+444    	; 0x155c <DIO_enuSetPinDirection+0x1e0>
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	88 30       	cpi	r24, 0x08	; 8
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <DIO_enuSetPinDirection+0x2c>
    13a6:	da c0       	rjmp	.+436    	; 0x155c <DIO_enuSetPinDirection+0x1e0>
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	82 30       	cpi	r24, 0x02	; 2
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <DIO_enuSetPinDirection+0x34>
    13ae:	d6 c0       	rjmp	.+428    	; 0x155c <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3f 83       	std	Y+7, r19	; 0x07
    13b8:	2e 83       	std	Y+6, r18	; 0x06
    13ba:	8e 81       	ldd	r24, Y+6	; 0x06
    13bc:	9f 81       	ldd	r25, Y+7	; 0x07
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <DIO_enuSetPinDirection+0x4a>
    13c4:	43 c0       	rjmp	.+134    	; 0x144c <DIO_enuSetPinDirection+0xd0>
    13c6:	2e 81       	ldd	r18, Y+6	; 0x06
    13c8:	3f 81       	ldd	r19, Y+7	; 0x07
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <DIO_enuSetPinDirection+0x5e>
    13d0:	8e 81       	ldd	r24, Y+6	; 0x06
    13d2:	9f 81       	ldd	r25, Y+7	; 0x07
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	71 f0       	breq	.+28     	; 0x13f4 <DIO_enuSetPinDirection+0x78>
    13d8:	bc c0       	rjmp	.+376    	; 0x1552 <DIO_enuSetPinDirection+0x1d6>
    13da:	2e 81       	ldd	r18, Y+6	; 0x06
    13dc:	3f 81       	ldd	r19, Y+7	; 0x07
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <DIO_enuSetPinDirection+0x6a>
    13e4:	5f c0       	rjmp	.+190    	; 0x14a4 <DIO_enuSetPinDirection+0x128>
    13e6:	8e 81       	ldd	r24, Y+6	; 0x06
    13e8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <DIO_enuSetPinDirection+0x76>
    13f0:	85 c0       	rjmp	.+266    	; 0x14fc <DIO_enuSetPinDirection+0x180>
    13f2:	af c0       	rjmp	.+350    	; 0x1552 <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    13fa:	aa e3       	ldi	r26, 0x3A	; 58
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ea e3       	ldi	r30, 0x3A	; 58
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_enuSetPinDirection+0x9c>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_enuSetPinDirection+0x98>
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	98 c0       	rjmp	.+304    	; 0x1552 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    1422:	aa e3       	ldi	r26, 0x3A	; 58
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	ea e3       	ldi	r30, 0x3A	; 58
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO_enuSetPinDirection+0xc4>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <DIO_enuSetPinDirection+0xc0>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	83 c0       	rjmp	.+262    	; 0x1552 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	a1 f4       	brne	.+40     	; 0x147a <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    1452:	a7 e3       	ldi	r26, 0x37	; 55
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e7 e3       	ldi	r30, 0x37	; 55
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_enuSetPinDirection+0xf4>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_enuSetPinDirection+0xf0>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	6c c0       	rjmp	.+216    	; 0x1552 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    147a:	a7 e3       	ldi	r26, 0x37	; 55
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e7 e3       	ldi	r30, 0x37	; 55
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_enuSetPinDirection+0x11c>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_enuSetPinDirection+0x118>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	57 c0       	rjmp	.+174    	; 0x1552 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	a1 f4       	brne	.+40     	; 0x14d2 <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    14aa:	a4 e3       	ldi	r26, 0x34	; 52
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e4 e3       	ldi	r30, 0x34	; 52
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <DIO_enuSetPinDirection+0x14c>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <DIO_enuSetPinDirection+0x148>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	40 c0       	rjmp	.+128    	; 0x1552 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    14d2:	a4 e3       	ldi	r26, 0x34	; 52
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e4 e3       	ldi	r30, 0x34	; 52
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_enuSetPinDirection+0x174>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_enuSetPinDirection+0x170>
    14f4:	80 95       	com	r24
    14f6:	84 23       	and	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	2b c0       	rjmp	.+86     	; 0x1552 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    14fc:	8c 81       	ldd	r24, Y+4	; 0x04
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	a1 f4       	brne	.+40     	; 0x152a <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    1502:	a1 e3       	ldi	r26, 0x31	; 49
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e1 e3       	ldi	r30, 0x31	; 49
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <DIO_enuSetPinDirection+0x1a4>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <DIO_enuSetPinDirection+0x1a0>
    1524:	84 2b       	or	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    152a:	a1 e3       	ldi	r26, 0x31	; 49
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e1 e3       	ldi	r30, 0x31	; 49
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_enuSetPinDirection+0x1cc>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_enuSetPinDirection+0x1c8>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    1556:	99 81       	ldd	r25, Y+1	; 0x01
    1558:	9d 83       	std	Y+5, r25	; 0x05
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    155c:	29 81       	ldd	r18, Y+1	; 0x01
    155e:	2d 83       	std	Y+5, r18	; 0x05
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    1562:	27 96       	adiw	r28, 0x07	; 7
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	27 97       	sbiw	r28, 0x07	; 7
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	6b 83       	std	Y+3, r22	; 0x03
    158c:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    158e:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	08 f0       	brcs	.+2      	; 0x1598 <DIO_enuSetPinValue+0x24>
    1596:	de c0       	rjmp	.+444    	; 0x1754 <DIO_enuSetPinValue+0x1e0>
    1598:	8b 81       	ldd	r24, Y+3	; 0x03
    159a:	88 30       	cpi	r24, 0x08	; 8
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <DIO_enuSetPinValue+0x2c>
    159e:	da c0       	rjmp	.+436    	; 0x1754 <DIO_enuSetPinValue+0x1e0>
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	82 30       	cpi	r24, 0x02	; 2
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <DIO_enuSetPinValue+0x34>
    15a6:	d6 c0       	rjmp	.+428    	; 0x1754 <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	3f 83       	std	Y+7, r19	; 0x07
    15b0:	2e 83       	std	Y+6, r18	; 0x06
    15b2:	8e 81       	ldd	r24, Y+6	; 0x06
    15b4:	9f 81       	ldd	r25, Y+7	; 0x07
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	91 05       	cpc	r25, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <DIO_enuSetPinValue+0x4a>
    15bc:	43 c0       	rjmp	.+134    	; 0x1644 <DIO_enuSetPinValue+0xd0>
    15be:	2e 81       	ldd	r18, Y+6	; 0x06
    15c0:	3f 81       	ldd	r19, Y+7	; 0x07
    15c2:	22 30       	cpi	r18, 0x02	; 2
    15c4:	31 05       	cpc	r19, r1
    15c6:	2c f4       	brge	.+10     	; 0x15d2 <DIO_enuSetPinValue+0x5e>
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	71 f0       	breq	.+28     	; 0x15ec <DIO_enuSetPinValue+0x78>
    15d0:	bc c0       	rjmp	.+376    	; 0x174a <DIO_enuSetPinValue+0x1d6>
    15d2:	2e 81       	ldd	r18, Y+6	; 0x06
    15d4:	3f 81       	ldd	r19, Y+7	; 0x07
    15d6:	22 30       	cpi	r18, 0x02	; 2
    15d8:	31 05       	cpc	r19, r1
    15da:	09 f4       	brne	.+2      	; 0x15de <DIO_enuSetPinValue+0x6a>
    15dc:	5f c0       	rjmp	.+190    	; 0x169c <DIO_enuSetPinValue+0x128>
    15de:	8e 81       	ldd	r24, Y+6	; 0x06
    15e0:	9f 81       	ldd	r25, Y+7	; 0x07
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	91 05       	cpc	r25, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <DIO_enuSetPinValue+0x76>
    15e8:	85 c0       	rjmp	.+266    	; 0x16f4 <DIO_enuSetPinValue+0x180>
    15ea:	af c0       	rjmp	.+350    	; 0x174a <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    15ec:	8c 81       	ldd	r24, Y+4	; 0x04
    15ee:	88 23       	and	r24, r24
    15f0:	a1 f0       	breq	.+40     	; 0x161a <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    15f2:	ab e3       	ldi	r26, 0x3B	; 59
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	eb e3       	ldi	r30, 0x3B	; 59
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <DIO_enuSetPinValue+0x9c>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <DIO_enuSetPinValue+0x98>
    1614:	84 2b       	or	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	98 c0       	rjmp	.+304    	; 0x174a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    161a:	ab e3       	ldi	r26, 0x3B	; 59
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	eb e3       	ldi	r30, 0x3B	; 59
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <DIO_enuSetPinValue+0xc4>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <DIO_enuSetPinValue+0xc0>
    163c:	80 95       	com	r24
    163e:	84 23       	and	r24, r20
    1640:	8c 93       	st	X, r24
    1642:	83 c0       	rjmp	.+262    	; 0x174a <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    1644:	8c 81       	ldd	r24, Y+4	; 0x04
    1646:	88 23       	and	r24, r24
    1648:	a1 f0       	breq	.+40     	; 0x1672 <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    164a:	a8 e3       	ldi	r26, 0x38	; 56
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e8 e3       	ldi	r30, 0x38	; 56
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_enuSetPinValue+0xf4>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_enuSetPinValue+0xf0>
    166c:	84 2b       	or	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	6c c0       	rjmp	.+216    	; 0x174a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    1672:	a8 e3       	ldi	r26, 0x38	; 56
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e8 e3       	ldi	r30, 0x38	; 56
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_enuSetPinValue+0x11c>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_enuSetPinValue+0x118>
    1694:	80 95       	com	r24
    1696:	84 23       	and	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	57 c0       	rjmp	.+174    	; 0x174a <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	88 23       	and	r24, r24
    16a0:	a1 f0       	breq	.+40     	; 0x16ca <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    16a2:	a5 e3       	ldi	r26, 0x35	; 53
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e5 e3       	ldi	r30, 0x35	; 53
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <DIO_enuSetPinValue+0x14c>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <DIO_enuSetPinValue+0x148>
    16c4:	84 2b       	or	r24, r20
    16c6:	8c 93       	st	X, r24
    16c8:	40 c0       	rjmp	.+128    	; 0x174a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    16ca:	a5 e3       	ldi	r26, 0x35	; 53
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e5 e3       	ldi	r30, 0x35	; 53
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_enuSetPinValue+0x174>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_enuSetPinValue+0x170>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	2b c0       	rjmp	.+86     	; 0x174a <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	88 23       	and	r24, r24
    16f8:	a1 f0       	breq	.+40     	; 0x1722 <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    16fa:	a2 e3       	ldi	r26, 0x32	; 50
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e2 e3       	ldi	r30, 0x32	; 50
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_enuSetPinValue+0x1a4>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_enuSetPinValue+0x1a0>
    171c:	84 2b       	or	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	14 c0       	rjmp	.+40     	; 0x174a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    1722:	a2 e3       	ldi	r26, 0x32	; 50
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e2 e3       	ldi	r30, 0x32	; 50
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_enuSetPinValue+0x1cc>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_enuSetPinValue+0x1c8>
    1744:	80 95       	com	r24
    1746:	84 23       	and	r24, r20
    1748:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    174e:	99 81       	ldd	r25, Y+1	; 0x01
    1750:	9d 83       	std	Y+5, r25	; 0x05
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    1754:	29 81       	ldd	r18, Y+1	; 0x01
    1756:	2d 83       	std	Y+5, r18	; 0x05
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    175a:	27 96       	adiw	r28, 0x07	; 7
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
    1774:	28 97       	sbiw	r28, 0x08	; 8
    1776:	0f b6       	in	r0, 0x3f	; 63
    1778:	f8 94       	cli
    177a:	de bf       	out	0x3e, r29	; 62
    177c:	0f be       	out	0x3f, r0	; 63
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	8a 83       	std	Y+2, r24	; 0x02
    1782:	6b 83       	std	Y+3, r22	; 0x03
    1784:	5d 83       	std	Y+5, r21	; 0x05
    1786:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1788:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	29 f4       	brne	.+10     	; 0x179c <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    1792:	83 e0       	ldi	r24, 0x03	; 3
    1794:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    1796:	29 81       	ldd	r18, Y+1	; 0x01
    1798:	28 87       	std	Y+8, r18	; 0x08
    179a:	7f c0       	rjmp	.+254    	; 0x189a <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	84 30       	cpi	r24, 0x04	; 4
    17a0:	08 f0       	brcs	.+2      	; 0x17a4 <DIO_enuGetPinValue+0x38>
    17a2:	79 c0       	rjmp	.+242    	; 0x1896 <DIO_enuGetPinValue+0x12a>
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	88 30       	cpi	r24, 0x08	; 8
    17a8:	08 f0       	brcs	.+2      	; 0x17ac <DIO_enuGetPinValue+0x40>
    17aa:	75 c0       	rjmp	.+234    	; 0x1896 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	48 2f       	mov	r20, r24
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	5f 83       	std	Y+7, r21	; 0x07
    17b4:	4e 83       	std	Y+6, r20	; 0x06
    17b6:	8e 81       	ldd	r24, Y+6	; 0x06
    17b8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	91 05       	cpc	r25, r1
    17be:	59 f1       	breq	.+86     	; 0x1816 <DIO_enuGetPinValue+0xaa>
    17c0:	2e 81       	ldd	r18, Y+6	; 0x06
    17c2:	3f 81       	ldd	r19, Y+7	; 0x07
    17c4:	22 30       	cpi	r18, 0x02	; 2
    17c6:	31 05       	cpc	r19, r1
    17c8:	34 f4       	brge	.+12     	; 0x17d6 <DIO_enuGetPinValue+0x6a>
    17ca:	4e 81       	ldd	r20, Y+6	; 0x06
    17cc:	5f 81       	ldd	r21, Y+7	; 0x07
    17ce:	41 15       	cp	r20, r1
    17d0:	51 05       	cpc	r21, r1
    17d2:	69 f0       	breq	.+26     	; 0x17ee <DIO_enuGetPinValue+0x82>
    17d4:	5b c0       	rjmp	.+182    	; 0x188c <DIO_enuGetPinValue+0x120>
    17d6:	8e 81       	ldd	r24, Y+6	; 0x06
    17d8:	9f 81       	ldd	r25, Y+7	; 0x07
    17da:	82 30       	cpi	r24, 0x02	; 2
    17dc:	91 05       	cpc	r25, r1
    17de:	79 f1       	breq	.+94     	; 0x183e <DIO_enuGetPinValue+0xd2>
    17e0:	2e 81       	ldd	r18, Y+6	; 0x06
    17e2:	3f 81       	ldd	r19, Y+7	; 0x07
    17e4:	23 30       	cpi	r18, 0x03	; 3
    17e6:	31 05       	cpc	r19, r1
    17e8:	09 f4       	brne	.+2      	; 0x17ec <DIO_enuGetPinValue+0x80>
    17ea:	3d c0       	rjmp	.+122    	; 0x1866 <DIO_enuGetPinValue+0xfa>
    17ec:	4f c0       	rjmp	.+158    	; 0x188c <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    17ee:	e9 e3       	ldi	r30, 0x39	; 57
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	88 2f       	mov	r24, r24
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a9 01       	movw	r20, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <DIO_enuGetPinValue+0x9a>
    1802:	55 95       	asr	r21
    1804:	47 95       	ror	r20
    1806:	8a 95       	dec	r24
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <DIO_enuGetPinValue+0x96>
    180a:	ca 01       	movw	r24, r20
    180c:	81 70       	andi	r24, 0x01	; 1
    180e:	ec 81       	ldd	r30, Y+4	; 0x04
    1810:	fd 81       	ldd	r31, Y+5	; 0x05
    1812:	80 83       	st	Z, r24
    1814:	3b c0       	rjmp	.+118    	; 0x188c <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    1816:	e6 e3       	ldi	r30, 0x36	; 54
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	88 2f       	mov	r24, r24
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	a9 01       	movw	r20, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_enuGetPinValue+0xc2>
    182a:	55 95       	asr	r21
    182c:	47 95       	ror	r20
    182e:	8a 95       	dec	r24
    1830:	e2 f7       	brpl	.-8      	; 0x182a <DIO_enuGetPinValue+0xbe>
    1832:	ca 01       	movw	r24, r20
    1834:	81 70       	andi	r24, 0x01	; 1
    1836:	ec 81       	ldd	r30, Y+4	; 0x04
    1838:	fd 81       	ldd	r31, Y+5	; 0x05
    183a:	80 83       	st	Z, r24
    183c:	27 c0       	rjmp	.+78     	; 0x188c <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    183e:	e3 e3       	ldi	r30, 0x33	; 51
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	88 2f       	mov	r24, r24
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a9 01       	movw	r20, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <DIO_enuGetPinValue+0xea>
    1852:	55 95       	asr	r21
    1854:	47 95       	ror	r20
    1856:	8a 95       	dec	r24
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <DIO_enuGetPinValue+0xe6>
    185a:	ca 01       	movw	r24, r20
    185c:	81 70       	andi	r24, 0x01	; 1
    185e:	ec 81       	ldd	r30, Y+4	; 0x04
    1860:	fd 81       	ldd	r31, Y+5	; 0x05
    1862:	80 83       	st	Z, r24
    1864:	13 c0       	rjmp	.+38     	; 0x188c <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    1866:	e0 e3       	ldi	r30, 0x30	; 48
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	28 2f       	mov	r18, r24
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	88 2f       	mov	r24, r24
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a9 01       	movw	r20, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_enuGetPinValue+0x112>
    187a:	55 95       	asr	r21
    187c:	47 95       	ror	r20
    187e:	8a 95       	dec	r24
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_enuGetPinValue+0x10e>
    1882:	ca 01       	movw	r24, r20
    1884:	81 70       	andi	r24, 0x01	; 1
    1886:	ec 81       	ldd	r30, Y+4	; 0x04
    1888:	fd 81       	ldd	r31, Y+5	; 0x05
    188a:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    1890:	59 81       	ldd	r21, Y+1	; 0x01
    1892:	58 87       	std	Y+8, r21	; 0x08
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	88 87       	std	Y+8, r24	; 0x08
    189a:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    189c:	28 96       	adiw	r28, 0x08	; 8
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	de bf       	out	0x3e, r29	; 62
    18a4:	0f be       	out	0x3f, r0	; 63
    18a6:	cd bf       	out	0x3d, r28	; 61
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <DIO_enuTogglePinValue+0x6>
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <DIO_enuTogglePinValue+0x8>
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <DIO_enuTogglePinValue+0xa>
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	8a 83       	std	Y+2, r24	; 0x02
    18be:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    18c0:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	84 30       	cpi	r24, 0x04	; 4
    18c6:	08 f0       	brcs	.+2      	; 0x18ca <DIO_enuTogglePinValue+0x1c>
    18c8:	77 c0       	rjmp	.+238    	; 0x19b8 <DIO_enuTogglePinValue+0x10a>
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	88 30       	cpi	r24, 0x08	; 8
    18ce:	08 f0       	brcs	.+2      	; 0x18d2 <DIO_enuTogglePinValue+0x24>
    18d0:	73 c0       	rjmp	.+230    	; 0x19b8 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	3e 83       	std	Y+6, r19	; 0x06
    18da:	2d 83       	std	Y+5, r18	; 0x05
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	91 05       	cpc	r25, r1
    18e4:	49 f1       	breq	.+82     	; 0x1938 <DIO_enuTogglePinValue+0x8a>
    18e6:	2d 81       	ldd	r18, Y+5	; 0x05
    18e8:	3e 81       	ldd	r19, Y+6	; 0x06
    18ea:	22 30       	cpi	r18, 0x02	; 2
    18ec:	31 05       	cpc	r19, r1
    18ee:	2c f4       	brge	.+10     	; 0x18fa <DIO_enuTogglePinValue+0x4c>
    18f0:	8d 81       	ldd	r24, Y+5	; 0x05
    18f2:	9e 81       	ldd	r25, Y+6	; 0x06
    18f4:	00 97       	sbiw	r24, 0x00	; 0
    18f6:	61 f0       	breq	.+24     	; 0x1910 <DIO_enuTogglePinValue+0x62>
    18f8:	5a c0       	rjmp	.+180    	; 0x19ae <DIO_enuTogglePinValue+0x100>
    18fa:	2d 81       	ldd	r18, Y+5	; 0x05
    18fc:	3e 81       	ldd	r19, Y+6	; 0x06
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	31 05       	cpc	r19, r1
    1902:	71 f1       	breq	.+92     	; 0x1960 <DIO_enuTogglePinValue+0xb2>
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	83 30       	cpi	r24, 0x03	; 3
    190a:	91 05       	cpc	r25, r1
    190c:	e9 f1       	breq	.+122    	; 0x1988 <DIO_enuTogglePinValue+0xda>
    190e:	4f c0       	rjmp	.+158    	; 0x19ae <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    1910:	ab e3       	ldi	r26, 0x3B	; 59
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	eb e3       	ldi	r30, 0x3B	; 59
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	48 2f       	mov	r20, r24
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 2e       	mov	r0, r18
    1928:	02 c0       	rjmp	.+4      	; 0x192e <DIO_enuTogglePinValue+0x80>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	0a 94       	dec	r0
    1930:	e2 f7       	brpl	.-8      	; 0x192a <DIO_enuTogglePinValue+0x7c>
    1932:	84 27       	eor	r24, r20
    1934:	8c 93       	st	X, r24
    1936:	3b c0       	rjmp	.+118    	; 0x19ae <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    1938:	a8 e3       	ldi	r26, 0x38	; 56
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e8 e3       	ldi	r30, 0x38	; 56
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	48 2f       	mov	r20, r24
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 2e       	mov	r0, r18
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <DIO_enuTogglePinValue+0xa8>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	0a 94       	dec	r0
    1958:	e2 f7       	brpl	.-8      	; 0x1952 <DIO_enuTogglePinValue+0xa4>
    195a:	84 27       	eor	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	27 c0       	rjmp	.+78     	; 0x19ae <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    1960:	a5 e3       	ldi	r26, 0x35	; 53
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e5 e3       	ldi	r30, 0x35	; 53
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	48 2f       	mov	r20, r24
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	02 2e       	mov	r0, r18
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_enuTogglePinValue+0xd0>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	0a 94       	dec	r0
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_enuTogglePinValue+0xcc>
    1982:	84 27       	eor	r24, r20
    1984:	8c 93       	st	X, r24
    1986:	13 c0       	rjmp	.+38     	; 0x19ae <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    1988:	a2 e3       	ldi	r26, 0x32	; 50
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e2 e3       	ldi	r30, 0x32	; 50
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <DIO_enuTogglePinValue+0xf8>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <DIO_enuTogglePinValue+0xf4>
    19aa:	84 27       	eor	r24, r20
    19ac:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    19b2:	99 81       	ldd	r25, Y+1	; 0x01
    19b4:	9c 83       	std	Y+4, r25	; 0x04
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    19b8:	29 81       	ldd	r18, Y+1	; 0x01
    19ba:	2c 83       	std	Y+4, r18	; 0x04
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    19be:	26 96       	adiw	r28, 0x06	; 6
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <DIO_enuSetPortDirection+0x6>
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <DIO_enuSetPortDirection+0x8>
    19d8:	00 d0       	rcall	.+0      	; 0x19da <DIO_enuSetPortDirection+0xa>
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	8a 83       	std	Y+2, r24	; 0x02
    19e0:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    19e2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	84 30       	cpi	r24, 0x04	; 4
    19e8:	08 f0       	brcs	.+2      	; 0x19ec <DIO_enuSetPortDirection+0x1c>
    19ea:	57 c0       	rjmp	.+174    	; 0x1a9a <DIO_enuSetPortDirection+0xca>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	82 30       	cpi	r24, 0x02	; 2
    19f0:	08 f0       	brcs	.+2      	; 0x19f4 <DIO_enuSetPortDirection+0x24>
    19f2:	53 c0       	rjmp	.+166    	; 0x1a9a <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	3e 83       	std	Y+6, r19	; 0x06
    19fc:	2d 83       	std	Y+5, r18	; 0x05
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	91 05       	cpc	r25, r1
    1a06:	09 f1       	breq	.+66     	; 0x1a4a <DIO_enuSetPortDirection+0x7a>
    1a08:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	2c f4       	brge	.+10     	; 0x1a1c <DIO_enuSetPortDirection+0x4c>
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <DIO_enuSetPortDirection+0x62>
    1a1a:	3a c0       	rjmp	.+116    	; 0x1a90 <DIO_enuSetPortDirection+0xc0>
    1a1c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a1e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	f1 f0       	breq	.+60     	; 0x1a62 <DIO_enuSetPortDirection+0x92>
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	83 30       	cpi	r24, 0x03	; 3
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	29 f1       	breq	.+74     	; 0x1a7a <DIO_enuSetPortDirection+0xaa>
    1a30:	2f c0       	rjmp	.+94     	; 0x1a90 <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	29 f4       	brne	.+10     	; 0x1a42 <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    1a38:	ea e3       	ldi	r30, 0x3A	; 58
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	8f ef       	ldi	r24, 0xFF	; 255
    1a3e:	80 83       	st	Z, r24
    1a40:	27 c0       	rjmp	.+78     	; 0x1a90 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    1a42:	ea e3       	ldi	r30, 0x3A	; 58
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	10 82       	st	Z, r1
    1a48:	23 c0       	rjmp	.+70     	; 0x1a90 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	29 f4       	brne	.+10     	; 0x1a5a <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    1a50:	e7 e3       	ldi	r30, 0x37	; 55
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	80 83       	st	Z, r24
    1a58:	1b c0       	rjmp	.+54     	; 0x1a90 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    1a5a:	e7 e3       	ldi	r30, 0x37	; 55
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	10 82       	st	Z, r1
    1a60:	17 c0       	rjmp	.+46     	; 0x1a90 <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	29 f4       	brne	.+10     	; 0x1a72 <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    1a68:	e4 e3       	ldi	r30, 0x34	; 52
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	80 83       	st	Z, r24
    1a70:	0f c0       	rjmp	.+30     	; 0x1a90 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    1a72:	e4 e3       	ldi	r30, 0x34	; 52
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	10 82       	st	Z, r1
    1a78:	0b c0       	rjmp	.+22     	; 0x1a90 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7c:	81 30       	cpi	r24, 0x01	; 1
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    1a80:	e1 e3       	ldi	r30, 0x31	; 49
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	8f ef       	ldi	r24, 0xFF	; 255
    1a86:	80 83       	st	Z, r24
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    1a8a:	e1 e3       	ldi	r30, 0x31	; 49
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1a94:	99 81       	ldd	r25, Y+1	; 0x01
    1a96:	9c 83       	std	Y+4, r25	; 0x04
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    1a9a:	29 81       	ldd	r18, Y+1	; 0x01
    1a9c:	2c 83       	std	Y+4, r18	; 0x04
    1a9e:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1aa0:	26 96       	adiw	r28, 0x06	; 6
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	08 95       	ret

00001ab2 <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <DIO_enuSetPortValue+0x6>
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <DIO_enuSetPortValue+0x8>
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <DIO_enuSetPortValue+0xa>
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
    1ac2:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1ac4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	84 30       	cpi	r24, 0x04	; 4
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <DIO_enuSetPortValue+0x1c>
    1acc:	57 c0       	rjmp	.+174    	; 0x1b7c <DIO_enuSetPortValue+0xca>
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	08 f0       	brcs	.+2      	; 0x1ad6 <DIO_enuSetPortValue+0x24>
    1ad4:	53 c0       	rjmp	.+166    	; 0x1b7c <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	3e 83       	std	Y+6, r19	; 0x06
    1ade:	2d 83       	std	Y+5, r18	; 0x05
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	09 f1       	breq	.+66     	; 0x1b2c <DIO_enuSetPortValue+0x7a>
    1aea:	2d 81       	ldd	r18, Y+5	; 0x05
    1aec:	3e 81       	ldd	r19, Y+6	; 0x06
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	2c f4       	brge	.+10     	; 0x1afe <DIO_enuSetPortValue+0x4c>
    1af4:	8d 81       	ldd	r24, Y+5	; 0x05
    1af6:	9e 81       	ldd	r25, Y+6	; 0x06
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	61 f0       	breq	.+24     	; 0x1b14 <DIO_enuSetPortValue+0x62>
    1afc:	3a c0       	rjmp	.+116    	; 0x1b72 <DIO_enuSetPortValue+0xc0>
    1afe:	2d 81       	ldd	r18, Y+5	; 0x05
    1b00:	3e 81       	ldd	r19, Y+6	; 0x06
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	f1 f0       	breq	.+60     	; 0x1b44 <DIO_enuSetPortValue+0x92>
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	91 05       	cpc	r25, r1
    1b10:	29 f1       	breq	.+74     	; 0x1b5c <DIO_enuSetPortValue+0xaa>
    1b12:	2f c0       	rjmp	.+94     	; 0x1b72 <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	88 23       	and	r24, r24
    1b18:	29 f0       	breq	.+10     	; 0x1b24 <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    1b1a:	eb e3       	ldi	r30, 0x3B	; 59
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	8f ef       	ldi	r24, 0xFF	; 255
    1b20:	80 83       	st	Z, r24
    1b22:	27 c0       	rjmp	.+78     	; 0x1b72 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    1b24:	eb e3       	ldi	r30, 0x3B	; 59
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	10 82       	st	Z, r1
    1b2a:	23 c0       	rjmp	.+70     	; 0x1b72 <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	88 23       	and	r24, r24
    1b30:	29 f0       	breq	.+10     	; 0x1b3c <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    1b32:	e8 e3       	ldi	r30, 0x38	; 56
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	80 83       	st	Z, r24
    1b3a:	1b c0       	rjmp	.+54     	; 0x1b72 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    1b3c:	e8 e3       	ldi	r30, 0x38	; 56
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	10 82       	st	Z, r1
    1b42:	17 c0       	rjmp	.+46     	; 0x1b72 <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	88 23       	and	r24, r24
    1b48:	29 f0       	breq	.+10     	; 0x1b54 <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    1b4a:	e5 e3       	ldi	r30, 0x35	; 53
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	80 83       	st	Z, r24
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    1b54:	e5 e3       	ldi	r30, 0x35	; 53
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	10 82       	st	Z, r1
    1b5a:	0b c0       	rjmp	.+22     	; 0x1b72 <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	88 23       	and	r24, r24
    1b60:	29 f0       	breq	.+10     	; 0x1b6c <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    1b62:	e2 e3       	ldi	r30, 0x32	; 50
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	80 83       	st	Z, r24
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    1b6c:	e2 e3       	ldi	r30, 0x32	; 50
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1b76:	99 81       	ldd	r25, Y+1	; 0x01
    1b78:	9c 83       	std	Y+4, r25	; 0x04
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    1b7c:	29 81       	ldd	r18, Y+1	; 0x01
    1b7e:	2c 83       	std	Y+4, r18	; 0x04
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1b82:	26 96       	adiw	r28, 0x06	; 6
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	0f 92       	push	r0
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1b9e:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	64 e0       	ldi	r22, 0x04	; 4
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	65 e0       	ldi	r22, 0x05	; 5
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	66 e0       	ldi	r22, 0x06	; 6
    1bb8:	41 e0       	ldi	r20, 0x01	; 1
    1bba:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	67 e0       	ldi	r22, 0x07	; 7
    1bc2:	41 e0       	ldi	r20, 0x01	; 1
    1bc4:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	64 e0       	ldi	r22, 0x04	; 4
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	65 e0       	ldi	r22, 0x05	; 5
    1bd6:	41 e0       	ldi	r20, 0x01	; 1
    1bd8:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	66 e0       	ldi	r22, 0x06	; 6
    1be0:	41 e0       	ldi	r20, 0x01	; 1
    1be2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	67 e0       	ldi	r22, 0x07	; 7
    1bea:	41 e0       	ldi	r20, 0x01	; 1
    1bec:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    1bf0:	83 e0       	ldi	r24, 0x03	; 3
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    1bfa:	83 e0       	ldi	r24, 0x03	; 3
    1bfc:	61 e0       	ldi	r22, 0x01	; 1
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    1c04:	83 e0       	ldi	r24, 0x03	; 3
    1c06:	64 e0       	ldi	r22, 0x04	; 4
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    1c0e:	83 e0       	ldi	r24, 0x03	; 3
    1c10:	65 e0       	ldi	r22, 0x05	; 5
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	60 e0       	ldi	r22, 0x00	; 0
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    1c22:	83 e0       	ldi	r24, 0x03	; 3
    1c24:	61 e0       	ldi	r22, 0x01	; 1
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    1c2c:	83 e0       	ldi	r24, 0x03	; 3
    1c2e:	64 e0       	ldi	r22, 0x04	; 4
    1c30:	41 e0       	ldi	r20, 0x01	; 1
    1c32:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	65 e0       	ldi	r22, 0x05	; 5
    1c3a:	41 e0       	ldi	r20, 0x01	; 1
    1c3c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	2a 97       	sbiw	r28, 0x0a	; 10
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    1c64:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	8a 83       	std	Y+2, r24	; 0x02
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	8b 83       	std	Y+3, r24	; 0x03
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	8c 83       	std	Y+4, r24	; 0x04
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    1c76:	84 e0       	ldi	r24, 0x04	; 4
    1c78:	8e 83       	std	Y+6, r24	; 0x06
    1c7a:	85 e0       	ldi	r24, 0x05	; 5
    1c7c:	8f 83       	std	Y+7, r24	; 0x07
    1c7e:	86 e0       	ldi	r24, 0x06	; 6
    1c80:	88 87       	std	Y+8, r24	; 0x08
    1c82:	87 e0       	ldi	r24, 0x07	; 7
    1c84:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    1c86:	19 82       	std	Y+1, r1	; 0x01
    1c88:	36 c0       	rjmp	.+108    	; 0x1cf6 <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    1c8a:	99 81       	ldd	r25, Y+1	; 0x01
    1c8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c8e:	98 17       	cp	r25, r24
    1c90:	c1 f4       	brne	.+48     	; 0x1cc2 <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	ce 01       	movw	r24, r28
    1c9a:	02 96       	adiw	r24, 0x02	; 2
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	e2 0f       	add	r30, r18
    1ca0:	f3 1f       	adc	r31, r19
    1ca2:	40 81       	ld	r20, Z
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	ce 01       	movw	r24, r28
    1cac:	06 96       	adiw	r24, 0x06	; 6
    1cae:	fc 01       	movw	r30, r24
    1cb0:	e2 0f       	add	r30, r18
    1cb2:	f3 1f       	adc	r31, r19
    1cb4:	90 81       	ld	r25, Z
    1cb6:	84 2f       	mov	r24, r20
    1cb8:	69 2f       	mov	r22, r25
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
    1cc0:	17 c0       	rjmp	.+46     	; 0x1cf0 <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    1cc2:	89 81       	ldd	r24, Y+1	; 0x01
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	ce 01       	movw	r24, r28
    1cca:	02 96       	adiw	r24, 0x02	; 2
    1ccc:	fc 01       	movw	r30, r24
    1cce:	e2 0f       	add	r30, r18
    1cd0:	f3 1f       	adc	r31, r19
    1cd2:	40 81       	ld	r20, Z
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	ce 01       	movw	r24, r28
    1cdc:	06 96       	adiw	r24, 0x06	; 6
    1cde:	fc 01       	movw	r30, r24
    1ce0:	e2 0f       	add	r30, r18
    1ce2:	f3 1f       	adc	r31, r19
    1ce4:	90 81       	ld	r25, Z
    1ce6:	84 2f       	mov	r24, r20
    1ce8:	69 2f       	mov	r22, r25
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	8f 5f       	subi	r24, 0xFF	; 255
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	84 30       	cpi	r24, 0x04	; 4
    1cfa:	38 f2       	brcs	.-114    	; 0x1c8a <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    1cfc:	2a 96       	adiw	r28, 0x0a	; 10
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	2f 97       	sbiw	r28, 0x0f	; 15
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	9e 87       	std	Y+14, r25	; 0x0e
    1d24:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1d26:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    1d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	19 f4       	brne	.+6      	; 0x1d36 <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	8f 87       	std	Y+15, r24	; 0x0f
    1d34:	7e c0       	rjmp	.+252    	; 0x1e32 <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    1d3a:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    1d3c:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    1d3e:	83 e0       	ldi	r24, 0x03	; 3
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	83 e0       	ldi	r24, 0x03	; 3
    1d44:	8e 83       	std	Y+6, r24	; 0x06
    1d46:	83 e0       	ldi	r24, 0x03	; 3
    1d48:	8f 83       	std	Y+7, r24	; 0x07
    1d4a:	83 e0       	ldi	r24, 0x03	; 3
    1d4c:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    1d4e:	19 86       	std	Y+9, r1	; 0x09
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	8a 87       	std	Y+10, r24	; 0x0a
    1d54:	84 e0       	ldi	r24, 0x04	; 4
    1d56:	8b 87       	std	Y+11, r24	; 0x0b
    1d58:	85 e0       	ldi	r24, 0x05	; 5
    1d5a:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    1d5c:	1a 82       	std	Y+2, r1	; 0x02
    1d5e:	63 c0       	rjmp	.+198    	; 0x1e26 <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    1d66:	19 82       	std	Y+1, r1	; 0x01
    1d68:	57 c0       	rjmp	.+174    	; 0x1e18 <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	ce 01       	movw	r24, r28
    1d72:	05 96       	adiw	r24, 0x05	; 5
    1d74:	fc 01       	movw	r30, r24
    1d76:	e2 0f       	add	r30, r18
    1d78:	f3 1f       	adc	r31, r19
    1d7a:	40 81       	ld	r20, Z
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	ce 01       	movw	r24, r28
    1d84:	09 96       	adiw	r24, 0x09	; 9
    1d86:	fc 01       	movw	r30, r24
    1d88:	e2 0f       	add	r30, r18
    1d8a:	f3 1f       	adc	r31, r19
    1d8c:	90 81       	ld	r25, Z
    1d8e:	9e 01       	movw	r18, r28
    1d90:	2c 5f       	subi	r18, 0xFC	; 252
    1d92:	3f 4f       	sbci	r19, 0xFF	; 255
    1d94:	84 2f       	mov	r24, r20
    1d96:	69 2f       	mov	r22, r25
    1d98:	a9 01       	movw	r20, r18
    1d9a:	0e 94 b6 0b 	call	0x176c	; 0x176c <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    1d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1da0:	88 23       	and	r24, r24
    1da2:	b9 f5       	brne	.+110    	; 0x1e12 <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	88 2f       	mov	r24, r24
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	9c 01       	movw	r18, r24
    1dac:	22 0f       	add	r18, r18
    1dae:	33 1f       	adc	r19, r19
    1db0:	22 0f       	add	r18, r18
    1db2:	33 1f       	adc	r19, r19
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	82 0f       	add	r24, r18
    1dbc:	93 1f       	adc	r25, r19
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	ea 58       	subi	r30, 0x8A	; 138
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	80 81       	ld	r24, Z
    1dc6:	ed 85       	ldd	r30, Y+13	; 0x0d
    1dc8:	fe 85       	ldd	r31, Y+14	; 0x0e
    1dca:	80 83       	st	Z, r24
    1dcc:	1a c0       	rjmp	.+52     	; 0x1e02 <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	ce 01       	movw	r24, r28
    1dd6:	05 96       	adiw	r24, 0x05	; 5
    1dd8:	fc 01       	movw	r30, r24
    1dda:	e2 0f       	add	r30, r18
    1ddc:	f3 1f       	adc	r31, r19
    1dde:	40 81       	ld	r20, Z
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	ce 01       	movw	r24, r28
    1de8:	09 96       	adiw	r24, 0x09	; 9
    1dea:	fc 01       	movw	r30, r24
    1dec:	e2 0f       	add	r30, r18
    1dee:	f3 1f       	adc	r31, r19
    1df0:	90 81       	ld	r25, Z
    1df2:	9e 01       	movw	r18, r28
    1df4:	2c 5f       	subi	r18, 0xFC	; 252
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	84 2f       	mov	r24, r20
    1dfa:	69 2f       	mov	r22, r25
    1dfc:	a9 01       	movw	r20, r18
    1dfe:	0e 94 b6 0b 	call	0x176c	; 0x176c <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	88 23       	and	r24, r24
    1e06:	19 f3       	breq	.-58     	; 0x1dce <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	8f 87       	std	Y+15, r24	; 0x0f
    1e10:	10 c0       	rjmp	.+32     	; 0x1e32 <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	8f 5f       	subi	r24, 0xFF	; 255
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	08 f4       	brcc	.+2      	; 0x1e20 <keypad_enuGetPressedKey+0x112>
    1e1e:	a5 cf       	rjmp	.-182    	; 0x1d6a <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	8f 5f       	subi	r24, 0xFF	; 255
    1e24:	8a 83       	std	Y+2, r24	; 0x02
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	84 30       	cpi	r24, 0x04	; 4
    1e2a:	08 f4       	brcc	.+2      	; 0x1e2e <keypad_enuGetPressedKey+0x120>
    1e2c:	99 cf       	rjmp	.-206    	; 0x1d60 <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	8f 87       	std	Y+15, r24	; 0x0f
    1e32:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1e34:	2f 96       	adiw	r28, 0x0f	; 15
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	6d 97       	sbiw	r28, 0x1d	; 29
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1e5a:	1d 8e       	std	Y+29, r1	; 0x1d


	/******************* !Control Pins! *******************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	61 e0       	ldi	r22, 0x01	; 1
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	62 e0       	ldi	r22, 0x02	; 2
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	63 e0       	ldi	r22, 0x03	; 3
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	/******************************************************/


	/******************** !Data Pins! *********************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	67 e0       	ldi	r22, 0x07	; 7
    1e7e:	41 e0       	ldi	r20, 0x01	; 1
    1e80:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	66 e0       	ldi	r22, 0x06	; 6
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	65 e0       	ldi	r22, 0x05	; 5
    1e92:	41 e0       	ldi	r20, 0x01	; 1
    1e94:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	64 e0       	ldi	r22, 0x04	; 4
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	ac e0       	ldi	r26, 0x0C	; 12
    1ea8:	b2 e4       	ldi	r27, 0x42	; 66
    1eaa:	89 8f       	std	Y+25, r24	; 0x19
    1eac:	9a 8f       	std	Y+26, r25	; 0x1a
    1eae:	ab 8f       	std	Y+27, r26	; 0x1b
    1eb0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1eb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	4a e7       	ldi	r20, 0x7A	; 122
    1ec0:	55 e4       	ldi	r21, 0x45	; 69
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8d 8b       	std	Y+21, r24	; 0x15
    1ecc:	9e 8b       	std	Y+22, r25	; 0x16
    1ece:	af 8b       	std	Y+23, r26	; 0x17
    1ed0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ed2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ed4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ed6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ed8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	2c f4       	brge	.+10     	; 0x1ef4 <LCD_enuInit+0xae>
		__ticks = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
    1ef2:	3f c0       	rjmp	.+126    	; 0x1f72 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1ef4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef8:	8f 89       	ldd	r24, Y+23	; 0x17
    1efa:	98 8d       	ldd	r25, Y+24	; 0x18
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	3f ef       	ldi	r19, 0xFF	; 255
    1f00:	4f e7       	ldi	r20, 0x7F	; 127
    1f02:	57 e4       	ldi	r21, 0x47	; 71
    1f04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f08:	18 16       	cp	r1, r24
    1f0a:	4c f5       	brge	.+82     	; 0x1f5e <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e2       	ldi	r20, 0x20	; 32
    1f1a:	51 e4       	ldi	r21, 0x41	; 65
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9c 8b       	std	Y+20, r25	; 0x14
    1f32:	8b 8b       	std	Y+19, r24	; 0x13
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <LCD_enuInit+0x10e>
    1f36:	80 e9       	ldi	r24, 0x90	; 144
    1f38:	91 e0       	ldi	r25, 0x01	; 1
    1f3a:	9a 8b       	std	Y+18, r25	; 0x12
    1f3c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f3e:	89 89       	ldd	r24, Y+17	; 0x11
    1f40:	9a 89       	ldd	r25, Y+18	; 0x12
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_enuInit+0xfc>
    1f46:	9a 8b       	std	Y+18, r25	; 0x12
    1f48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	9c 8b       	std	Y+20, r25	; 0x14
    1f52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f54:	8b 89       	ldd	r24, Y+19	; 0x13
    1f56:	9c 89       	ldd	r25, Y+20	; 0x14
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <LCD_enuInit+0xf0>
    1f5c:	14 c0       	rjmp	.+40     	; 0x1f86 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f60:	7e 89       	ldd	r23, Y+22	; 0x16
    1f62:	8f 89       	ldd	r24, Y+23	; 0x17
    1f64:	98 8d       	ldd	r25, Y+24	; 0x18
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9c 8b       	std	Y+20, r25	; 0x14
    1f70:	8b 8b       	std	Y+19, r24	; 0x13
    1f72:	8b 89       	ldd	r24, Y+19	; 0x13
    1f74:	9c 89       	ldd	r25, Y+20	; 0x14
    1f76:	98 8b       	std	Y+16, r25	; 0x10
    1f78:	8f 87       	std	Y+15, r24	; 0x0f
    1f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f7c:	98 89       	ldd	r25, Y+16	; 0x10
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_enuInit+0x138>
    1f82:	98 8b       	std	Y+16, r25	; 0x10
    1f84:	8f 87       	std	Y+15, r24	; 0x0f
	#endif


	#if(LCD_MODE == EIGHT_BIT)
		/******************** !Data Pins! *********************/
		DIO_enuSetPinDirection(DB3_PORT, DB3_PIN, DIO_u8OUTPUT);
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	63 e0       	ldi	r22, 0x03	; 3
    1f8a:	41 e0       	ldi	r20, 0x01	; 1
    1f8c:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(DB2_PORT, DB2_PIN, DIO_u8OUTPUT);
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(DB1_PORT, DB1_PIN, DIO_u8OUTPUT);
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	41 e0       	ldi	r20, 0x01	; 1
    1fa0:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(DB0_PORT, DB0_PIN, DIO_u8OUTPUT);
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>
		/*******************************************************/



		/******************** !Function Set! ********************/
		LCD_enuSendCommand(0x38);
    1fae:	88 e3       	ldi	r24, 0x38	; 56
    1fb0:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_enuSendCommand>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e8       	ldi	r26, 0x80	; 128
    1fba:	bf e3       	ldi	r27, 0x3F	; 63
    1fbc:	8b 87       	std	Y+11, r24	; 0x0b
    1fbe:	9c 87       	std	Y+12, r25	; 0x0c
    1fc0:	ad 87       	std	Y+13, r26	; 0x0d
    1fc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	55 e4       	ldi	r21, 0x45	; 69
    1fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	8f 83       	std	Y+7, r24	; 0x07
    1fde:	98 87       	std	Y+8, r25	; 0x08
    1fe0:	a9 87       	std	Y+9, r26	; 0x09
    1fe2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe6:	78 85       	ldd	r23, Y+8	; 0x08
    1fe8:	89 85       	ldd	r24, Y+9	; 0x09
    1fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <LCD_enuInit+0x1c0>
		__ticks = 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	9e 83       	std	Y+6, r25	; 0x06
    2002:	8d 83       	std	Y+5, r24	; 0x05
    2004:	3f c0       	rjmp	.+126    	; 0x2084 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    2006:	6f 81       	ldd	r22, Y+7	; 0x07
    2008:	78 85       	ldd	r23, Y+8	; 0x08
    200a:	89 85       	ldd	r24, Y+9	; 0x09
    200c:	9a 85       	ldd	r25, Y+10	; 0x0a
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	3f ef       	ldi	r19, 0xFF	; 255
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	57 e4       	ldi	r21, 0x47	; 71
    2016:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	4c f5       	brge	.+82     	; 0x2070 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2020:	7c 85       	ldd	r23, Y+12	; 0x0c
    2022:	8d 85       	ldd	r24, Y+13	; 0x0d
    2024:	9e 85       	ldd	r25, Y+14	; 0x0e
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	9e 83       	std	Y+6, r25	; 0x06
    2044:	8d 83       	std	Y+5, r24	; 0x05
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <LCD_enuInit+0x220>
    2048:	80 e9       	ldi	r24, 0x90	; 144
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	8b 83       	std	Y+3, r24	; 0x03
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_enuInit+0x20e>
    2058:	9c 83       	std	Y+4, r25	; 0x04
    205a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	9e 83       	std	Y+6, r25	; 0x06
    2064:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	69 f7       	brne	.-38     	; 0x2048 <LCD_enuInit+0x202>
    206e:	14 c0       	rjmp	.+40     	; 0x2098 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2070:	6f 81       	ldd	r22, Y+7	; 0x07
    2072:	78 85       	ldd	r23, Y+8	; 0x08
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	9e 83       	std	Y+6, r25	; 0x06
    2082:	8d 83       	std	Y+5, r24	; 0x05
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_enuInit+0x24a>
    2094:	9a 83       	std	Y+2, r25	; 0x02
    2096:	89 83       	std	Y+1, r24	; 0x01
			 * D - Controls the Display on or off
			 * C - Controls Cursor on or off
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */
		LCD_enuSendCommand(0x0C);
    2098:	8c e0       	ldi	r24, 0x0C	; 12
    209a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_enuSendCommand>
		/********************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(CLEAR);
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_enuSendCommand>
		/********************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    20aa:	86 e0       	ldi	r24, 0x06	; 6
    20ac:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_enuSendCommand>





		Local_enuErrrorState = ERROR_STATUS_OK;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	8d 8f       	std	Y+29, r24	; 0x1d
	return Local_enuErrrorState;
    20b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    20b6:	6d 96       	adiw	r28, 0x1d	; 29
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	60 97       	sbiw	r28, 0x10	; 16
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	88 8b       	std	Y+16, r24	; 0x10

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    20de:	1f 86       	std	Y+15, r1	; 0x0f

        	SEND_ENABLE_PULSE();
        }
    #elif(LCD_MODE == EIGHT_BIT)

        DIO_enuSetPinValue(LCD_DATA_PORT, DB0_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    20e0:	88 89       	ldd	r24, Y+16	; 0x10
    20e2:	98 2f       	mov	r25, r24
    20e4:	91 70       	andi	r25, 0x01	; 1
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	60 e0       	ldi	r22, 0x00	; 0
    20ea:	49 2f       	mov	r20, r25
    20ec:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB1_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    20f0:	88 89       	ldd	r24, Y+16	; 0x10
    20f2:	86 95       	lsr	r24
    20f4:	98 2f       	mov	r25, r24
    20f6:	91 70       	andi	r25, 0x01	; 1
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	61 e0       	ldi	r22, 0x01	; 1
    20fc:	49 2f       	mov	r20, r25
    20fe:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB2_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    2102:	88 89       	ldd	r24, Y+16	; 0x10
    2104:	86 95       	lsr	r24
    2106:	86 95       	lsr	r24
    2108:	98 2f       	mov	r25, r24
    210a:	91 70       	andi	r25, 0x01	; 1
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	62 e0       	ldi	r22, 0x02	; 2
    2110:	49 2f       	mov	r20, r25
    2112:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB3_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    2116:	88 89       	ldd	r24, Y+16	; 0x10
    2118:	86 95       	lsr	r24
    211a:	86 95       	lsr	r24
    211c:	86 95       	lsr	r24
    211e:	98 2f       	mov	r25, r24
    2120:	91 70       	andi	r25, 0x01	; 1
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	63 e0       	ldi	r22, 0x03	; 3
    2126:	49 2f       	mov	r20, r25
    2128:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>

        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    212c:	88 89       	ldd	r24, Y+16	; 0x10
    212e:	82 95       	swap	r24
    2130:	8f 70       	andi	r24, 0x0F	; 15
    2132:	98 2f       	mov	r25, r24
    2134:	91 70       	andi	r25, 0x01	; 1
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	64 e0       	ldi	r22, 0x04	; 4
    213a:	49 2f       	mov	r20, r25
    213c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    2140:	88 89       	ldd	r24, Y+16	; 0x10
    2142:	82 95       	swap	r24
    2144:	86 95       	lsr	r24
    2146:	87 70       	andi	r24, 0x07	; 7
    2148:	98 2f       	mov	r25, r24
    214a:	91 70       	andi	r25, 0x01	; 1
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	65 e0       	ldi	r22, 0x05	; 5
    2150:	49 2f       	mov	r20, r25
    2152:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    2156:	88 89       	ldd	r24, Y+16	; 0x10
    2158:	82 95       	swap	r24
    215a:	86 95       	lsr	r24
    215c:	86 95       	lsr	r24
    215e:	83 70       	andi	r24, 0x03	; 3
    2160:	98 2f       	mov	r25, r24
    2162:	91 70       	andi	r25, 0x01	; 1
    2164:	80 e0       	ldi	r24, 0x00	; 0
    2166:	66 e0       	ldi	r22, 0x06	; 6
    2168:	49 2f       	mov	r20, r25
    216a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    216e:	88 89       	ldd	r24, Y+16	; 0x10
    2170:	98 2f       	mov	r25, r24
    2172:	99 1f       	adc	r25, r25
    2174:	99 27       	eor	r25, r25
    2176:	99 1f       	adc	r25, r25
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	67 e0       	ldi	r22, 0x07	; 7
    217c:	49 2f       	mov	r20, r25
    217e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>





        SEND_ENABLE_PULSE();
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	63 e0       	ldi	r22, 0x03	; 3
    2186:	41 e0       	ldi	r20, 0x01	; 1
    2188:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a0 e0       	ldi	r26, 0x00	; 0
    2192:	b0 e4       	ldi	r27, 0x40	; 64
    2194:	8b 87       	std	Y+11, r24	; 0x0b
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	ad 87       	std	Y+13, r26	; 0x0d
    219a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a e7       	ldi	r20, 0x7A	; 122
    21aa:	55 e4       	ldi	r21, 0x45	; 69
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8f 83       	std	Y+7, r24	; 0x07
    21b6:	98 87       	std	Y+8, r25	; 0x08
    21b8:	a9 87       	std	Y+9, r26	; 0x09
    21ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21bc:	6f 81       	ldd	r22, Y+7	; 0x07
    21be:	78 85       	ldd	r23, Y+8	; 0x08
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <WriteNLatch+0x116>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <WriteNLatch+0x194>
	else if (__tmp > 65535)
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <WriteNLatch+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	0f c0       	rjmp	.+30     	; 0x223e <WriteNLatch+0x176>
    2220:	80 e9       	ldi	r24, 0x90	; 144
    2222:	91 e0       	ldi	r25, 0x01	; 1
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <WriteNLatch+0x164>
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <WriteNLatch+0x158>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <WriteNLatch+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <WriteNLatch+0x1a0>
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	63 e0       	ldi	r22, 0x03	; 3
    2274:	40 e0       	ldi	r20, 0x00	; 0
    2276:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	8f 87       	std	Y+15, r24	; 0x0f
    return Local_enu_ErrorState;
    227e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2280:	60 96       	adiw	r28, 0x10	; 16
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	cf 91       	pop	r28
    228e:	df 91       	pop	r29
    2290:	08 95       	ret

00002292 <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    2292:	df 93       	push	r29
    2294:	cf 93       	push	r28
    2296:	00 d0       	rcall	.+0      	; 0x2298 <LCD_enuSendData+0x6>
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    229e:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	61 e0       	ldi	r22, 0x01	; 1
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	62 e0       	ldi	r22, 0x02	; 2
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    22b4:	8a 81       	ldd	r24, Y+2	; 0x02
    22b6:	0e 94 64 10 	call	0x20c8	; 0x20c8 <WriteNLatch>



	return Local_enu_ErrorState;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <LCD_enuSendCommand+0x6>
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    22d2:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	62 e0       	ldi	r22, 0x02	; 2
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	0e 94 64 10 	call	0x20c8	; 0x20c8 <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	00 d0       	rcall	.+0      	; 0x2304 <LCD_u8SendString+0x6>
    2304:	00 d0       	rcall	.+0      	; 0x2306 <LCD_u8SendString+0x8>
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	9c 83       	std	Y+4, r25	; 0x04
    230e:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2310:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	f9 f0       	breq	.+62     	; 0x2358 <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    231a:	19 82       	std	Y+1, r1	; 0x01
    231c:	0f c0       	rjmp	.+30     	; 0x233c <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	fc 01       	movw	r30, r24
    232a:	e2 0f       	add	r30, r18
    232c:	f3 1f       	adc	r31, r19
    232e:	90 81       	ld	r25, Z
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	89 2f       	mov	r24, r25
    2338:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	28 2f       	mov	r18, r24
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	fc 01       	movw	r30, r24
    2348:	e2 0f       	add	r30, r18
    234a:	f3 1f       	adc	r31, r19
    234c:	80 81       	ld	r24, Z
    234e:	88 23       	and	r24, r24
    2350:	31 f7       	brne	.-52     	; 0x231e <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	8d 83       	std	Y+5, r24	; 0x05
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	8d 83       	std	Y+5, r24	; 0x05
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	cf 91       	pop	r28
    236e:	df 91       	pop	r29
    2370:	08 95       	ret

00002372 <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    2372:	df 93       	push	r29
    2374:	cf 93       	push	r28
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	a0 97       	sbiw	r28, 0x20	; 32
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	6b 8f       	std	Y+27, r22	; 0x1b
    2388:	7c 8f       	std	Y+28, r23	; 0x1c
    238a:	8d 8f       	std	Y+29, r24	; 0x1d
    238c:	9e 8f       	std	Y+30, r25	; 0x1e
    238e:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2390:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    2392:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    2394:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    2396:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    2398:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    239a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    239c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    239e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    23a0:	be 8d       	ldd	r27, Y+30	; 0x1e
    23a2:	bb 23       	and	r27, r27
    23a4:	94 f4       	brge	.+36     	; 0x23ca <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    23a6:	8d e2       	ldi	r24, 0x2D	; 45
    23a8:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_enuSendData>
		Copy_u8data*=-1;
    23ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23b0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    23b2:	be 8d       	ldd	r27, Y+30	; 0x1e
    23b4:	b0 95       	com	r27
    23b6:	a0 95       	com	r26
    23b8:	90 95       	com	r25
    23ba:	81 95       	neg	r24
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	af 4f       	sbci	r26, 0xFF	; 255
    23c0:	bf 4f       	sbci	r27, 0xFF	; 255
    23c2:	8b 8f       	std	Y+27, r24	; 0x1b
    23c4:	9c 8f       	std	Y+28, r25	; 0x1c
    23c6:	ad 8f       	std	Y+29, r26	; 0x1d
    23c8:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    23ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ce:	ad 8d       	ldd	r26, Y+29	; 0x1d
    23d0:	be 8d       	ldd	r27, Y+30	; 0x1e
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	a1 05       	cpc	r26, r1
    23d6:	b1 05       	cpc	r27, r1
    23d8:	09 f0       	breq	.+2      	; 0x23dc <LCD_enuIntegerToString+0x6a>
    23da:	4b c0       	rjmp	.+150    	; 0x2472 <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    23dc:	8d 81       	ldd	r24, Y+5	; 0x05
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	ce 01       	movw	r24, r28
    23e4:	07 96       	adiw	r24, 0x07	; 7
    23e6:	fc 01       	movw	r30, r24
    23e8:	e2 0f       	add	r30, r18
    23ea:	f3 1f       	adc	r31, r19
    23ec:	80 e3       	ldi	r24, 0x30	; 48
    23ee:	80 83       	st	Z, r24
    23f0:	8d 81       	ldd	r24, Y+5	; 0x05
    23f2:	8f 5f       	subi	r24, 0xFF	; 255
    23f4:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    23f6:	8d 81       	ldd	r24, Y+5	; 0x05
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	ce 01       	movw	r24, r28
    23fe:	07 96       	adiw	r24, 0x07	; 7
    2400:	fc 01       	movw	r30, r24
    2402:	e2 0f       	add	r30, r18
    2404:	f3 1f       	adc	r31, r19
    2406:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    2408:	8e 81       	ldd	r24, Y+6	; 0x06
    240a:	88 a3       	std	Y+32, r24	; 0x20
    240c:	7f c0       	rjmp	.+254    	; 0x250c <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    240e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2410:	28 2f       	mov	r18, r24
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	50 e0       	ldi	r21, 0x00	; 0
    2418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    241a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    241c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    241e:	be 8d       	ldd	r27, Y+30	; 0x1e
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__divmodsi4>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	28 2f       	mov	r18, r24
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	8c 81       	ldd	r24, Y+4	; 0x04
    2436:	48 2f       	mov	r20, r24
    2438:	40 5d       	subi	r20, 0xD0	; 208
    243a:	ce 01       	movw	r24, r28
    243c:	07 96       	adiw	r24, 0x07	; 7
    243e:	fc 01       	movw	r30, r24
    2440:	e2 0f       	add	r30, r18
    2442:	f3 1f       	adc	r31, r19
    2444:	40 83       	st	Z, r20
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	8f 5f       	subi	r24, 0xFF	; 255
    244a:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    244c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e0       	ldi	r20, 0x00	; 0
    2454:	50 e0       	ldi	r21, 0x00	; 0
    2456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    245a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    245c:	be 8d       	ldd	r27, Y+30	; 0x1e
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__divmodsi4>
    2466:	da 01       	movw	r26, r20
    2468:	c9 01       	movw	r24, r18
    246a:	8b 8f       	std	Y+27, r24	; 0x1b
    246c:	9c 8f       	std	Y+28, r25	; 0x1c
    246e:	ad 8f       	std	Y+29, r26	; 0x1d
    2470:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    2472:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2474:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2476:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2478:	be 8d       	ldd	r27, Y+30	; 0x1e
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	a1 05       	cpc	r26, r1
    247e:	b1 05       	cpc	r27, r1
    2480:	31 f6       	brne	.-116    	; 0x240e <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    2482:	8d 81       	ldd	r24, Y+5	; 0x05
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	ce 01       	movw	r24, r28
    248a:	07 96       	adiw	r24, 0x07	; 7
    248c:	fc 01       	movw	r30, r24
    248e:	e2 0f       	add	r30, r18
    2490:	f3 1f       	adc	r31, r19
    2492:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    2494:	8d 81       	ldd	r24, Y+5	; 0x05
    2496:	81 50       	subi	r24, 0x01	; 1
    2498:	8a 83       	std	Y+2, r24	; 0x02
    249a:	2c c0       	rjmp	.+88     	; 0x24f4 <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	28 2f       	mov	r18, r24
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	ce 01       	movw	r24, r28
    24a4:	07 96       	adiw	r24, 0x07	; 7
    24a6:	fc 01       	movw	r30, r24
    24a8:	e2 0f       	add	r30, r18
    24aa:	f3 1f       	adc	r31, r19
    24ac:	80 81       	ld	r24, Z
    24ae:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	48 2f       	mov	r20, r24
    24b4:	50 e0       	ldi	r21, 0x00	; 0
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	28 2f       	mov	r18, r24
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	ce 01       	movw	r24, r28
    24be:	07 96       	adiw	r24, 0x07	; 7
    24c0:	fc 01       	movw	r30, r24
    24c2:	e2 0f       	add	r30, r18
    24c4:	f3 1f       	adc	r31, r19
    24c6:	20 81       	ld	r18, Z
    24c8:	ce 01       	movw	r24, r28
    24ca:	07 96       	adiw	r24, 0x07	; 7
    24cc:	fc 01       	movw	r30, r24
    24ce:	e4 0f       	add	r30, r20
    24d0:	f5 1f       	adc	r31, r21
    24d2:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	28 2f       	mov	r18, r24
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	ce 01       	movw	r24, r28
    24dc:	07 96       	adiw	r24, 0x07	; 7
    24de:	fc 01       	movw	r30, r24
    24e0:	e2 0f       	add	r30, r18
    24e2:	f3 1f       	adc	r31, r19
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	80 83       	st	Z, r24

        Local_u8Start++;
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	8f 5f       	subi	r24, 0xFF	; 255
    24ec:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	81 50       	subi	r24, 0x01	; 1
    24f2:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    24f4:	9b 81       	ldd	r25, Y+3	; 0x03
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	98 17       	cp	r25, r24
    24fa:	80 f2       	brcs	.-96     	; 0x249c <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    24fc:	ce 01       	movw	r24, r28
    24fe:	07 96       	adiw	r24, 0x07	; 7
    2500:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    2508:	8e 81       	ldd	r24, Y+6	; 0x06
    250a:	88 a3       	std	Y+32, r24	; 0x20
    250c:	88 a1       	ldd	r24, Y+32	; 0x20
}
    250e:	a0 96       	adiw	r28, 0x20	; 32
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	27 97       	sbiw	r28, 0x07	; 7
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	de bf       	out	0x3e, r29	; 62
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	cd bf       	out	0x3d, r28	; 61
    2534:	8b 83       	std	Y+3, r24	; 0x03
    2536:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    2538:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	81 31       	cpi	r24, 0x11	; 17
    253e:	18 f4       	brcc	.+6      	; 0x2546 <LCD_u8SetPosXY+0x26>
    2540:	8c 81       	ldd	r24, Y+4	; 0x04
    2542:	83 30       	cpi	r24, 0x03	; 3
    2544:	18 f0       	brcs	.+6      	; 0x254c <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    2546:	2a 81       	ldd	r18, Y+2	; 0x02
    2548:	2f 83       	std	Y+7, r18	; 0x07
    254a:	23 c0       	rjmp	.+70     	; 0x2592 <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    254c:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    254e:	8c 81       	ldd	r24, Y+4	; 0x04
    2550:	28 2f       	mov	r18, r24
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	3e 83       	std	Y+6, r19	; 0x06
    2556:	2d 83       	std	Y+5, r18	; 0x05
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	81 30       	cpi	r24, 0x01	; 1
    255e:	91 05       	cpc	r25, r1
    2560:	31 f0       	breq	.+12     	; 0x256e <LCD_u8SetPosXY+0x4e>
    2562:	2d 81       	ldd	r18, Y+5	; 0x05
    2564:	3e 81       	ldd	r19, Y+6	; 0x06
    2566:	22 30       	cpi	r18, 0x02	; 2
    2568:	31 05       	cpc	r19, r1
    256a:	21 f0       	breq	.+8      	; 0x2574 <LCD_u8SetPosXY+0x54>
    256c:	07 c0       	rjmp	.+14     	; 0x257c <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	05 c0       	rjmp	.+10     	; 0x257e <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	80 5c       	subi	r24, 0xC0	; 192
    2578:	89 83       	std	Y+1, r24	; 0x01
    257a:	01 c0       	rjmp	.+2      	; 0x257e <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    257c:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	80 68       	ori	r24, 0x80	; 128
    2582:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    258e:	3a 81       	ldd	r19, Y+2	; 0x02
    2590:	3f 83       	std	Y+7, r19	; 0x07
    2592:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2594:	27 96       	adiw	r28, 0x07	; 7
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	27 97       	sbiw	r28, 0x07	; 7
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	9d 83       	std	Y+5, r25	; 0x05
    25bc:	8c 83       	std	Y+4, r24	; 0x04
    25be:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    25c0:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
    25c4:	9d 81       	ldd	r25, Y+5	; 0x05
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	19 f0       	breq	.+6      	; 0x25d0 <LCD_u8StoreCustomChar+0x2a>
    25ca:	8e 81       	ldd	r24, Y+6	; 0x06
    25cc:	89 30       	cpi	r24, 0x09	; 9
    25ce:	18 f0       	brcs	.+6      	; 0x25d6 <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    25d0:	8b 81       	ldd	r24, Y+3	; 0x03
    25d2:	8f 83       	std	Y+7, r24	; 0x07
    25d4:	2a c0       	rjmp	.+84     	; 0x262a <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    25d6:	8e 81       	ldd	r24, Y+6	; 0x06
    25d8:	88 2f       	mov	r24, r24
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	80 64       	ori	r24, 0x40	; 64
    25ee:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    25f0:	8a 81       	ldd	r24, Y+2	; 0x02
    25f2:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    25f6:	19 82       	std	Y+1, r1	; 0x01
    25f8:	0e c0       	rjmp	.+28     	; 0x2616 <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	28 2f       	mov	r18, r24
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	8c 81       	ldd	r24, Y+4	; 0x04
    2602:	9d 81       	ldd	r25, Y+5	; 0x05
    2604:	fc 01       	movw	r30, r24
    2606:	e2 0f       	add	r30, r18
    2608:	f3 1f       	adc	r31, r19
    260a:	80 81       	ld	r24, Z
    260c:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	8f 5f       	subi	r24, 0xFF	; 255
    2614:	89 83       	std	Y+1, r24	; 0x01
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	88 30       	cpi	r24, 0x08	; 8
    261a:	78 f3       	brcs	.-34     	; 0x25fa <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	0e 94 63 11 	call	0x22c6	; 0x22c6 <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	8f 83       	std	Y+7, r24	; 0x07
    262a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    262c:	27 96       	adiw	r28, 0x07	; 7
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <LCD_u8DisplayCustomChar+0x6>
    2644:	00 d0       	rcall	.+0      	; 0x2646 <LCD_u8DisplayCustomChar+0x8>
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	8a 83       	std	Y+2, r24	; 0x02
    264c:	6b 83       	std	Y+3, r22	; 0x03
    264e:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2650:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    2652:	8c 81       	ldd	r24, Y+4	; 0x04
    2654:	6b 81       	ldd	r22, Y+3	; 0x03
    2656:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	0e 94 49 11 	call	0x2292	; 0x2292 <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    2664:	89 81       	ldd	r24, Y+1	; 0x01
}
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <main>:
#include <util/delay.h>

/**********************************************************/

void warningSequence();
int main(){
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62


	LCD_enuInit();
    267c:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_enuInit>
	keypad_enuInit();
    2680:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <keypad_enuInit>
//!	EXTI_enuInit(EXTI_GroupConfig);

	DIO_enuSetPinDirection(DIO_u8PortD, DIO_u8PIN2, DIO_u8INPUT);
    2684:	83 e0       	ldi	r24, 0x03	; 3
    2686:	62 e0       	ldi	r22, 0x02	; 2
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_enuSetPinDirection>


	EXTI_enuSetCallBack(warningSequence, INT0);
    268e:	86 e5       	ldi	r24, 0x56	; 86
    2690:	93 e1       	ldi	r25, 0x13	; 19
    2692:	60 e0       	ldi	r22, 0x00	; 0
    2694:	0e 94 c5 08 	call	0x118a	; 0x118a <EXTI_enuSetCallBack>



	EXTI_enuEnableInterrupt(INT0);
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <EXTI_enuEnableInterrupt>
	EXTI_enuSetSenseLevel(INT0, EXTI_RISING_EDGE);
    269e:	80 e0       	ldi	r24, 0x00	; 0
    26a0:	63 e0       	ldi	r22, 0x03	; 3
    26a2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <EXTI_enuSetSenseLevel>
	GIE_enuEnable();
    26a6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GIE_enuEnable>
    26aa:	ff cf       	rjmp	.-2      	; 0x26aa <main+0x36>

000026ac <warningSequence>:

	}
	    return 0;
}

void warningSequence(){
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
	LCD_u8SendString("WARNING");
    26b4:	80 e6       	ldi	r24, 0x60	; 96
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_u8SendString>
}
    26bc:	cf 91       	pop	r28
    26be:	df 91       	pop	r29
    26c0:	08 95       	ret

000026c2 <__divmodsi4>:
    26c2:	97 fb       	bst	r25, 7
    26c4:	09 2e       	mov	r0, r25
    26c6:	05 26       	eor	r0, r21
    26c8:	0e d0       	rcall	.+28     	; 0x26e6 <__divmodsi4_neg1>
    26ca:	57 fd       	sbrc	r21, 7
    26cc:	04 d0       	rcall	.+8      	; 0x26d6 <__divmodsi4_neg2>
    26ce:	14 d0       	rcall	.+40     	; 0x26f8 <__udivmodsi4>
    26d0:	0a d0       	rcall	.+20     	; 0x26e6 <__divmodsi4_neg1>
    26d2:	00 1c       	adc	r0, r0
    26d4:	38 f4       	brcc	.+14     	; 0x26e4 <__divmodsi4_exit>

000026d6 <__divmodsi4_neg2>:
    26d6:	50 95       	com	r21
    26d8:	40 95       	com	r20
    26da:	30 95       	com	r19
    26dc:	21 95       	neg	r18
    26de:	3f 4f       	sbci	r19, 0xFF	; 255
    26e0:	4f 4f       	sbci	r20, 0xFF	; 255
    26e2:	5f 4f       	sbci	r21, 0xFF	; 255

000026e4 <__divmodsi4_exit>:
    26e4:	08 95       	ret

000026e6 <__divmodsi4_neg1>:
    26e6:	f6 f7       	brtc	.-4      	; 0x26e4 <__divmodsi4_exit>
    26e8:	90 95       	com	r25
    26ea:	80 95       	com	r24
    26ec:	70 95       	com	r23
    26ee:	61 95       	neg	r22
    26f0:	7f 4f       	sbci	r23, 0xFF	; 255
    26f2:	8f 4f       	sbci	r24, 0xFF	; 255
    26f4:	9f 4f       	sbci	r25, 0xFF	; 255
    26f6:	08 95       	ret

000026f8 <__udivmodsi4>:
    26f8:	a1 e2       	ldi	r26, 0x21	; 33
    26fa:	1a 2e       	mov	r1, r26
    26fc:	aa 1b       	sub	r26, r26
    26fe:	bb 1b       	sub	r27, r27
    2700:	fd 01       	movw	r30, r26
    2702:	0d c0       	rjmp	.+26     	; 0x271e <__udivmodsi4_ep>

00002704 <__udivmodsi4_loop>:
    2704:	aa 1f       	adc	r26, r26
    2706:	bb 1f       	adc	r27, r27
    2708:	ee 1f       	adc	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	a2 17       	cp	r26, r18
    270e:	b3 07       	cpc	r27, r19
    2710:	e4 07       	cpc	r30, r20
    2712:	f5 07       	cpc	r31, r21
    2714:	20 f0       	brcs	.+8      	; 0x271e <__udivmodsi4_ep>
    2716:	a2 1b       	sub	r26, r18
    2718:	b3 0b       	sbc	r27, r19
    271a:	e4 0b       	sbc	r30, r20
    271c:	f5 0b       	sbc	r31, r21

0000271e <__udivmodsi4_ep>:
    271e:	66 1f       	adc	r22, r22
    2720:	77 1f       	adc	r23, r23
    2722:	88 1f       	adc	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	1a 94       	dec	r1
    2728:	69 f7       	brne	.-38     	; 0x2704 <__udivmodsi4_loop>
    272a:	60 95       	com	r22
    272c:	70 95       	com	r23
    272e:	80 95       	com	r24
    2730:	90 95       	com	r25
    2732:	9b 01       	movw	r18, r22
    2734:	ac 01       	movw	r20, r24
    2736:	bd 01       	movw	r22, r26
    2738:	cf 01       	movw	r24, r30
    273a:	08 95       	ret

0000273c <__prologue_saves__>:
    273c:	2f 92       	push	r2
    273e:	3f 92       	push	r3
    2740:	4f 92       	push	r4
    2742:	5f 92       	push	r5
    2744:	6f 92       	push	r6
    2746:	7f 92       	push	r7
    2748:	8f 92       	push	r8
    274a:	9f 92       	push	r9
    274c:	af 92       	push	r10
    274e:	bf 92       	push	r11
    2750:	cf 92       	push	r12
    2752:	df 92       	push	r13
    2754:	ef 92       	push	r14
    2756:	ff 92       	push	r15
    2758:	0f 93       	push	r16
    275a:	1f 93       	push	r17
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	ca 1b       	sub	r28, r26
    2766:	db 0b       	sbc	r29, r27
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	09 94       	ijmp

00002774 <__epilogue_restores__>:
    2774:	2a 88       	ldd	r2, Y+18	; 0x12
    2776:	39 88       	ldd	r3, Y+17	; 0x11
    2778:	48 88       	ldd	r4, Y+16	; 0x10
    277a:	5f 84       	ldd	r5, Y+15	; 0x0f
    277c:	6e 84       	ldd	r6, Y+14	; 0x0e
    277e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2780:	8c 84       	ldd	r8, Y+12	; 0x0c
    2782:	9b 84       	ldd	r9, Y+11	; 0x0b
    2784:	aa 84       	ldd	r10, Y+10	; 0x0a
    2786:	b9 84       	ldd	r11, Y+9	; 0x09
    2788:	c8 84       	ldd	r12, Y+8	; 0x08
    278a:	df 80       	ldd	r13, Y+7	; 0x07
    278c:	ee 80       	ldd	r14, Y+6	; 0x06
    278e:	fd 80       	ldd	r15, Y+5	; 0x05
    2790:	0c 81       	ldd	r16, Y+4	; 0x04
    2792:	1b 81       	ldd	r17, Y+3	; 0x03
    2794:	aa 81       	ldd	r26, Y+2	; 0x02
    2796:	b9 81       	ldd	r27, Y+1	; 0x01
    2798:	ce 0f       	add	r28, r30
    279a:	d1 1d       	adc	r29, r1
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	ed 01       	movw	r28, r26
    27a8:	08 95       	ret

000027aa <_exit>:
    27aa:	f8 94       	cli

000027ac <__stop_program>:
    27ac:	ff cf       	rjmp	.-2      	; 0x27ac <__stop_program>
