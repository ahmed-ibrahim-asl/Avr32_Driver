
Avr32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000031e0  00003274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800088  00800088  0000329c  2**0
                  ALLOC
  3 .stab         000040b0  00000000  00000000  0000329c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002235  00000000  00000000  0000734c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009581  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000096c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009831  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b47a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c365  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d114  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d274  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0a 0b 	jmp	0x1614	; 0x1614 <__vector_1>
       8:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_2>
       c:	0c 94 70 0b 	jmp	0x16e0	; 0x16e0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <main>
      8a:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e6       	ldi	r26, 0x6A	; 106
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 18 	jmp	0x316e	; 0x316e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e6       	ldi	r24, 0x6A	; 106
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 df 18 	jmp	0x31be	; 0x31be <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_vidInit>:
#include "UART_priv.h"
#include "UART_config.h"
/************************************************************************************/


void UART_vidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)

		CLR_BIT(UCSRC_REG, UCSRB_UMSEL);
     b4e:	a0 e4       	ldi	r26, 0x40	; 64
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e0 e4       	ldi	r30, 0x40	; 64
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 7b       	andi	r24, 0xBF	; 191
     b5a:	8c 93       	st	X, r24

		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)
			CLR_BIT(UCSRA_REG, UCSRA_U2X);
     b5c:	ab e2       	ldi	r26, 0x2B	; 43
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	eb e2       	ldi	r30, 0x2B	; 43
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8d 7f       	andi	r24, 0xFD	; 253
     b68:	8c 93       	st	X, r24
			SET_BIT(UCSRC_REG, UCSRB_UMSEL);
	#endif


	#if(UART_MPCM_OPERATION == UART_SINGLE_MODE)
			CLR_BIT(UCSRA_REG, UCSRA_MPCM);
     b6a:	ab e2       	ldi	r26, 0x2B	; 43
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb e2       	ldi	r30, 0x2B	; 43
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8e 7f       	andi	r24, 0xFE	; 254
     b76:	8c 93       	st	X, r24
			SET_BIT(UCSRA_REG, UCSRA_MPCM);
	#endif


	// Receiver Enable
	SET_BIT(UCSRA_REG, UCSRB_RXEN);
     b78:	ab e2       	ldi	r26, 0x2B	; 43
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	eb e2       	ldi	r30, 0x2B	; 43
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	8c 93       	st	X, r24

	// Transmitter Enable
	SET_BIT(UCSRA_REG, UCSRB_TXEN);
     b86:	ab e2       	ldi	r26, 0x2B	; 43
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	eb e2       	ldi	r30, 0x2B	; 43
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 60       	ori	r24, 0x08	; 8
     b92:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
		SET_BIT(UCSRB_REG, UCSRB_UCSZ2);

	#elif(UART_DATA_BIT == UART_DATA_8bit)

		SET_BIT(UCSRC_REG, UCSRC_UCSZ0);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     bb0:	aa e2       	ldi	r26, 0x2A	; 42
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e2       	ldi	r30, 0x2A	; 42
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	8c 93       	st	X, r24


	/********************* Setting No Stop Bits *********************/
	#if(UART_STOP_BIT == UART_STOP_1bit)

		CLR_BIT(UCSRA_REG, UCSRC_USBS);
     bbe:	ab e2       	ldi	r26, 0x2B	; 43
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	eb e2       	ldi	r30, 0x2B	; 43
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	87 7f       	andi	r24, 0xF7	; 247
     bca:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSRC_UPM0);
		SET_BIT(UCSRC_REG, UCSRC_UPM1);

	#elif(UART_PARITY_MODE == UART_PARITY_ODD)

		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     bcc:	a0 e4       	ldi	r26, 0x40	; 64
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e0 e4       	ldi	r30, 0x40	; 64
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 61       	ori	r24, 0x10	; 16
     bd8:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     bda:	a0 e4       	ldi	r26, 0x40	; 64
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e0 e4       	ldi	r30, 0x40	; 64
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	80 62       	ori	r24, 0x20	; 32
     be6:	8c 93       	st	X, r24

	#endif
	/**************************************************************/

	/********************** Setting  Baud Rate **********************/
	UART_setBaudRate(9600);
     be8:	80 e8       	ldi	r24, 0x80	; 128
     bea:	95 e2       	ldi	r25, 0x25	; 37
     bec:	0e 94 99 06 	call	0xd32	; 0xd32 <UART_setBaudRate>
	/***************************************************************/


}
     bf0:	cf 91       	pop	r28
     bf2:	df 91       	pop	r29
     bf4:	08 95       	ret

00000bf6 <UART_enuSendChar>:


ErrorStatus_t UART_enuSendChar(uint8_t copy_u8Data){
     bf6:	df 93       	push	r29
     bf8:	cf 93       	push	r28
     bfa:	00 d0       	rcall	.+0      	; 0xbfc <UART_enuSendChar+0x6>
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     c02:	19 82       	std	Y+1, r1	; 0x01


	// Wait until transmit buffer is empty
	while(GET_BIT(UCSRA_REG, UCSRA_UDE) == 0);
     c04:	eb e2       	ldi	r30, 0x2B	; 43
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	82 95       	swap	r24
     c0c:	86 95       	lsr	r24
     c0e:	87 70       	andi	r24, 0x07	; 7
     c10:	88 2f       	mov	r24, r24
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	81 70       	andi	r24, 0x01	; 1
     c16:	90 70       	andi	r25, 0x00	; 0
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	a1 f3       	breq	.-24     	; 0xc04 <UART_enuSendChar+0xe>

	UDR_REG = copy_u8Data;
     c1c:	ec e2       	ldi	r30, 0x2C	; 44
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	80 83       	st	Z, r24


	Local_enuErrrorState = ERROR_STATUS_OK;
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
}
     c2a:	0f 90       	pop	r0
     c2c:	0f 90       	pop	r0
     c2e:	cf 91       	pop	r28
     c30:	df 91       	pop	r29
     c32:	08 95       	ret

00000c34 <UART_enuSendString>:


ErrorStatus_t UART_enuSendString(uint8_t* copy_pu8Data){
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	00 d0       	rcall	.+0      	; 0xc3a <UART_enuSendString+0x6>
     c3a:	00 d0       	rcall	.+0      	; 0xc3c <UART_enuSendString+0x8>
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	9b 83       	std	Y+3, r25	; 0x03
     c42:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     c44:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	9b 81       	ldd	r25, Y+3	; 0x03
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	69 f4       	brne	.+26     	; 0xc68 <UART_enuSendString+0x34>
		return Local_enuErrrorState;
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	8c 83       	std	Y+4, r24	; 0x04
     c52:	16 c0       	rjmp	.+44     	; 0xc80 <UART_enuSendString+0x4c>
	}

	else{

		while(*copy_pu8Data != '\0'){
			UART_enuSendChar(*copy_pu8Data);
     c54:	ea 81       	ldd	r30, Y+2	; 0x02
     c56:	fb 81       	ldd	r31, Y+3	; 0x03
     c58:	80 81       	ld	r24, Z
     c5a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <UART_enuSendChar>
			copy_pu8Data++;
     c5e:	8a 81       	ldd	r24, Y+2	; 0x02
     c60:	9b 81       	ldd	r25, Y+3	; 0x03
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	9b 83       	std	Y+3, r25	; 0x03
     c66:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
	}

	else{

		while(*copy_pu8Data != '\0'){
     c68:	ea 81       	ldd	r30, Y+2	; 0x02
     c6a:	fb 81       	ldd	r31, Y+3	; 0x03
     c6c:	80 81       	ld	r24, Z
     c6e:	88 23       	and	r24, r24
     c70:	89 f7       	brne	.-30     	; 0xc54 <UART_enuSendString+0x20>
			UART_enuSendChar(*copy_pu8Data);
			copy_pu8Data++;
		}
		UART_enuSendChar('\0');
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <UART_enuSendChar>
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	8c 83       	std	Y+4, r24	; 0x04
     c80:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <UART_enuRecieveChar>:

ErrorStatus_t UART_enuRecieveChar(uint8_t* copy_pu8Data){
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <UART_enuRecieveChar+0x6>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <UART_enuRecieveChar+0x8>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     ca0:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	9b 81       	ldd	r25, Y+3	; 0x03
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	19 f4       	brne	.+6      	; 0xcb0 <UART_enuRecieveChar+0x20>
		return Local_enuErrrorState;
     caa:	89 81       	ldd	r24, Y+1	; 0x01
     cac:	8c 83       	std	Y+4, r24	; 0x04
     cae:	0f c0       	rjmp	.+30     	; 0xcce <UART_enuRecieveChar+0x3e>
	}

	else{

		// Receive Complete
		while(GET_BIT(UCSRA_REG, UCSRA_RXC) == 0);
     cb0:	eb e2       	ldi	r30, 0x2B	; 43
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	88 23       	and	r24, r24
     cb8:	dc f7       	brge	.-10     	; 0xcb0 <UART_enuRecieveChar+0x20>

		*copy_pu8Data = UDR_REG;
     cba:	ec e2       	ldi	r30, 0x2C	; 44
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	ea 81       	ldd	r30, Y+2	; 0x02
     cc2:	fb 81       	ldd	r31, Y+3	; 0x03
     cc4:	80 83       	st	Z, r24
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	8c 83       	std	Y+4, r24	; 0x04
     cce:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <UART_enuRecieveString>:



ErrorStatus_t UART_enuRecieveString(uint8_t* copy_pu8Data){
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <UART_enuRecieveString+0x6>
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <UART_enuRecieveString+0x8>
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
     cea:	9b 83       	std	Y+3, r25	; 0x03
     cec:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     cee:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	9b 81       	ldd	r25, Y+3	; 0x03
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	61 f4       	brne	.+24     	; 0xd10 <UART_enuRecieveString+0x32>
		return Local_enuErrrorState;
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	8c 83       	std	Y+4, r24	; 0x04
     cfc:	12 c0       	rjmp	.+36     	; 0xd22 <UART_enuRecieveString+0x44>
	}

	else{
		while(*copy_pu8Data != '\0'){
			UART_enuRecieveChar(copy_pu8Data);
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	9b 81       	ldd	r25, Y+3	; 0x03
     d02:	0e 94 48 06 	call	0xc90	; 0xc90 <UART_enuRecieveChar>
			copy_pu8Data+=1;
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	9b 81       	ldd	r25, Y+3	; 0x03
     d0a:	01 96       	adiw	r24, 0x01	; 1
     d0c:	9b 83       	std	Y+3, r25	; 0x03
     d0e:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_pu8Data == NULL){
		return Local_enuErrrorState;
	}

	else{
		while(*copy_pu8Data != '\0'){
     d10:	ea 81       	ldd	r30, Y+2	; 0x02
     d12:	fb 81       	ldd	r31, Y+3	; 0x03
     d14:	80 81       	ld	r24, Z
     d16:	88 23       	and	r24, r24
     d18:	91 f7       	brne	.-28     	; 0xcfe <UART_enuRecieveString+0x20>
			copy_pu8Data+=1;
		}
	}


	Local_enuErrrorState = ERROR_STATUS_OK;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	8c 83       	std	Y+4, r24	; 0x04
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <UART_setBaudRate>:


//!
static void UART_setBaudRate(uint16 copy_u8UART_BaudRate){
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <UART_setBaudRate+0x6>
     d38:	0f 92       	push	r0
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	9b 83       	std	Y+3, r25	; 0x03
     d40:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t copy_u8Temp = 0;
     d42:	19 82       	std	Y+1, r1	; 0x01

	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)
		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)

		copy_u8Temp = ((UART_MC_OSC_FREQ/(uint8_t)(16*copy_u8UART_BaudRate))-1);
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	82 95       	swap	r24
     d4a:	92 95       	swap	r25
     d4c:	90 7f       	andi	r25, 0xF0	; 240
     d4e:	98 27       	eor	r25, r24
     d50:	80 7f       	andi	r24, 0xF0	; 240
     d52:	98 27       	eor	r25, r24
     d54:	28 2f       	mov	r18, r24
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	94 e2       	ldi	r25, 0x24	; 36
     d60:	a4 ef       	ldi	r26, 0xF4	; 244
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__divmodsi4>
     d6c:	da 01       	movw	r26, r20
     d6e:	c9 01       	movw	r24, r18
     d70:	81 50       	subi	r24, 0x01	; 1
     d72:	89 83       	std	Y+1, r24	; 0x01

		UBRRL_REG |= copy_u8Temp;
     d74:	aa e2       	ldi	r26, 0x2A	; 42
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	ea e2       	ldi	r30, 0x2A	; 42
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	90 81       	ld	r25, Z
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	89 2b       	or	r24, r25
     d82:	8c 93       	st	X, r24
		UBRRH_REG |= (copy_u8Temp>>8);
     d84:	a0 e4       	ldi	r26, 0x40	; 64
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e0 e4       	ldi	r30, 0x40	; 64
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	28 2f       	mov	r18, r24
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	88 2f       	mov	r24, r24
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	89 2f       	mov	r24, r25
     d98:	99 0f       	add	r25, r25
     d9a:	99 0b       	sbc	r25, r25
     d9c:	82 2b       	or	r24, r18
     d9e:	8c 93       	st	X, r24
	#elif(UART_SYNC_ASYNC_SELECT == UART_SYNCMODE)
		copy_u8Temp = ((UART_MC_OSC_FREQ/(uint8_t)(2*copy_u8UART_BaudRate))-1);
		UBRRL_REG |= copy_u8Temp;
		UBRRH_REG |= (copy_u8Temp>>8);
	#endif
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <SPI_vidInit>:
#include "SPI_priv.h"
/************************************************************************************/



void SPI_vidInit(void){
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62

		SET_BIT(SPCR_REG, SPCR_MSTR);

	#elif(SPI_MODE == SPI_SLAVE_MODE)

		DIO_enuSetPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, DIO_u8OUTPUT);
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	66 e0       	ldi	r22, 0x06	; 6
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, DIO_u8INPUT);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	65 e0       	ldi	r22, 0x05	; 5
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>

		DIO_enuSetPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, DIO_u8INPUT);
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	67 e0       	ldi	r22, 0x07	; 7
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_SS_PORT, SPI_SS_PIN, DIO_u8INPUT);
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	64 e0       	ldi	r22, 0x04	; 4
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>

		CLR_BIT(SPCR_REG, SPCR_MSTR);
     ddc:	ad e2       	ldi	r26, 0x2D	; 45
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ed e2       	ldi	r30, 0x2D	; 45
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	8f 7e       	andi	r24, 0xEF	; 239
     de8:	8c 93       	st	X, r24

	//! Data order
	#if(SPI_DORD == SPI_DORD_MSB)
		SET_BIT(SPCR_REG, SPCR_DORD);
	#elif(SPI_DORD == SPI_DORD_LSB)
		CLR_BIT(SPCR_REG, SPCR_DORD);
     dea:	ad e2       	ldi	r26, 0x2D	; 45
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ed e2       	ldi	r30, 0x2D	; 45
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	8f 7d       	andi	r24, 0xDF	; 223
     df6:	8c 93       	st	X, r24


	//! Clock Polarity
	#if(SPI_CPOL == SPI_LRising_TFalling)
		// SCK is high when idle
		CLR_BIT(SPCR_REG, SPCR_CPOL);
     df8:	ad e2       	ldi	r26, 0x2D	; 45
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ed e2       	ldi	r30, 0x2D	; 45
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR0 );
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
		CLR_BIT(SPSR_REG, SPSR_SPI2x);

	#elif(SPI_PRES_SELECT == SPI_PRES_16)
		SET_BIT(SPCR_REG, SPCR_SPR0 );
     e06:	ad e2       	ldi	r26, 0x2D	; 45
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	ed e2       	ldi	r30, 0x2D	; 45
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	81 60       	ori	r24, 0x01	; 1
     e12:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
     e14:	ad e2       	ldi	r26, 0x2D	; 45
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ed e2       	ldi	r30, 0x2D	; 45
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	8d 7f       	andi	r24, 0xFD	; 253
     e20:	8c 93       	st	X, r24
		CLR_BIT(SPSR_REG, SPSR_SPI2x);
     e22:	ae e2       	ldi	r26, 0x2E	; 46
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	ee e2       	ldi	r30, 0x2E	; 46
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8e 7f       	andi	r24, 0xFE	; 254
     e2e:	8c 93       	st	X, r24

	#endif


	/*	Enable SPI	*/
	SET_BIT(SPCR_REG, SPCR_SPE);
     e30:	ad e2       	ldi	r26, 0x2D	; 45
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ed e2       	ldi	r30, 0x2D	; 45
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 64       	ori	r24, 0x40	; 64
     e3c:	8c 93       	st	X, r24
}
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <SPI_enuMasterTransmit_Char>:



ErrorStatus_t SPI_enuMasterTransmit_Char(uint8_t copy_u8Data){
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	00 d0       	rcall	.+0      	; 0xe4a <SPI_enuMasterTransmit_Char+0x6>
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     e50:	19 82       	std	Y+1, r1	; 0x01


	SPDR_REG = copy_u8Data;
     e52:	ef e2       	ldi	r30, 0x2F	; 47
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	80 83       	st	Z, r24

	/*! Wait for transmission complete */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
     e5a:	ee e2       	ldi	r30, 0x2E	; 46
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 23       	and	r24, r24
     e62:	dc f7       	brge	.-10     	; 0xe5a <SPI_enuMasterTransmit_Char+0x16>


	Local_enu_ErrorState = ERROR_STATUS_OK;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <SPI_enuMasterTransmit_String>:



ErrorStatus_t SPI_enuMasterTransmit_String(uint8_t* copy_pu8Data){
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <SPI_enuMasterTransmit_String+0x6>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <SPI_enuMasterTransmit_String+0x8>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	9b 83       	std	Y+3, r25	; 0x03
     e82:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     e84:	19 82       	std	Y+1, r1	; 0x01


	if(copy_pu8Data == NULL){
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	9b 81       	ldd	r25, Y+3	; 0x03
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	19 f4       	brne	.+6      	; 0xe94 <SPI_enuMasterTransmit_String+0x20>
		return Local_enu_ErrorState;
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	8c 83       	std	Y+4, r24	; 0x04
     e92:	13 c0       	rjmp	.+38     	; 0xeba <SPI_enuMasterTransmit_String+0x46>

	}else{

		do{
			SPI_enuMasterTransmit_Char(*copy_pu8Data);
     e94:	ea 81       	ldd	r30, Y+2	; 0x02
     e96:	fb 81       	ldd	r31, Y+3	; 0x03
     e98:	80 81       	ld	r24, Z
     e9a:	0e 94 22 07 	call	0xe44	; 0xe44 <SPI_enuMasterTransmit_Char>
			copy_pu8Data++;
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	9b 81       	ldd	r25, Y+3	; 0x03
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	9b 83       	std	Y+3, r25	; 0x03
     ea6:	8a 83       	std	Y+2, r24	; 0x02
		}while(*copy_pu8Data != '\0');
     ea8:	ea 81       	ldd	r30, Y+2	; 0x02
     eaa:	fb 81       	ldd	r31, Y+3	; 0x03
     eac:	80 81       	ld	r24, Z
     eae:	88 23       	and	r24, r24
     eb0:	89 f7       	brne	.-30     	; 0xe94 <SPI_enuMasterTransmit_String+0x20>
	}

	Local_enu_ErrorState = ERROR_STATUS_OK;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	8c 83       	std	Y+4, r24	; 0x04
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
}
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <SPI_enuSlaveReceive_Char>:



ErrorStatus_t SPI_enuSlaveReceive_Char(uint8_t* copy_pu8Data){
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <SPI_enuSlaveReceive_Char+0x6>
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	9b 83       	std	Y+3, r25	; 0x03
     ed8:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     eda:	19 82       	std	Y+1, r1	; 0x01


	/* Wait for successful reception of data from master */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
     edc:	ee e2       	ldi	r30, 0x2E	; 46
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 23       	and	r24, r24
     ee4:	dc f7       	brge	.-10     	; 0xedc <SPI_enuSlaveReceive_Char+0x12>

	*copy_pu8Data = SPDR_REG;
     ee6:	ef e2       	ldi	r30, 0x2F	; 47
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	ea 81       	ldd	r30, Y+2	; 0x02
     eee:	fb 81       	ldd	r31, Y+3	; 0x03
     ef0:	80 83       	st	Z, r24


	Local_enu_ErrorState = ERROR_STATUS_OK;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <SPI_enuSlaveReceive_String>:



ErrorStatus_t SPI_enuSlaveReceive_String(uint8_t* copy_pu8Data){
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	27 97       	sbiw	r28, 0x07	; 7
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	9d 83       	std	Y+5, r25	; 0x05
     f1a:	8c 83       	std	Y+4, r24	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     f1c:	1b 82       	std	Y+3, r1	; 0x03


	if(copy_pu8Data == NULL){
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	19 f4       	brne	.+6      	; 0xf2c <SPI_enuSlaveReceive_String+0x28>
		return Local_enu_ErrorState;
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	8e 83       	std	Y+6, r24	; 0x06
     f2a:	1e c0       	rjmp	.+60     	; 0xf68 <SPI_enuSlaveReceive_String+0x64>
	}else{

		// Intiate head of buffer similar to linked-list idea
		uint8_t *Local_u8Temp = copy_pu8Data;
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	9a 83       	std	Y+2, r25	; 0x02
     f32:	89 83       	std	Y+1, r24	; 0x01

		do{
			SPI_enuSlaveReceive_Char(Local_u8Temp);
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	0e 94 65 07 	call	0xeca	; 0xeca <SPI_enuSlaveReceive_Char>


		}while(*(Local_u8Temp++) != '\0');
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	80 81       	ld	r24, Z
     f42:	8f 83       	std	Y+7, r24	; 0x07
     f44:	8f 81       	ldd	r24, Y+7	; 0x07
     f46:	88 23       	and	r24, r24
     f48:	11 f0       	breq	.+4      	; 0xf4e <SPI_enuSlaveReceive_String+0x4a>
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	8f 83       	std	Y+7, r24	; 0x07
     f4e:	8f 81       	ldd	r24, Y+7	; 0x07
     f50:	29 81       	ldd	r18, Y+1	; 0x01
     f52:	3a 81       	ldd	r19, Y+2	; 0x02
     f54:	2f 5f       	subi	r18, 0xFF	; 255
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	3a 83       	std	Y+2, r19	; 0x02
     f5a:	29 83       	std	Y+1, r18	; 0x01
     f5c:	88 23       	and	r24, r24
     f5e:	51 f7       	brne	.-44     	; 0xf34 <SPI_enuSlaveReceive_String+0x30>
	}


	Local_enu_ErrorState = ERROR_STATUS_OK;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enu_ErrorState;
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	8e 83       	std	Y+6, r24	; 0x06
     f68:	8e 81       	ldd	r24, Y+6	; 0x06
}
     f6a:	27 96       	adiw	r28, 0x07	; 7
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	0f 92       	push	r0
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     f86:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
     f88:	ef e5       	ldi	r30, 0x5F	; 95
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	88 23       	and	r24, r24
     f90:	4c f0       	brlt	.+18     	; 0xfa4 <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
     f92:	af e5       	ldi	r26, 0x5F	; 95
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	ef e5       	ldi	r30, 0x5F	; 95
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	80 68       	ori	r24, 0x80	; 128
     f9e:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa6:	0f 90       	pop	r0
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	0f 92       	push	r0
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
     fb8:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
     fba:	ef e5       	ldi	r30, 0x5F	; 95
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	88 23       	and	r24, r24
     fc2:	4c f4       	brge	.+18     	; 0xfd6 <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
     fc4:	af e5       	ldi	r26, 0x5F	; 95
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ef e5       	ldi	r30, 0x5F	; 95
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8f 77       	andi	r24, 0x7F	; 127
     fd0:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	2a 97       	sbiw	r28, 0x0a	; 10
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	9b 83       	std	Y+3, r25	; 0x03
     ff6:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
     ff8:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	9b 81       	ldd	r25, Y+3	; 0x03
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	19 f4       	brne	.+6      	; 0x1008 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
    1002:	29 81       	ldd	r18, Y+1	; 0x01
    1004:	2a 87       	std	Y+10, r18	; 0x0a
    1006:	36 c1       	rjmp	.+620    	; 0x1274 <EXTI_enuInit+0x294>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_ENABLED){
    1008:	ea 81       	ldd	r30, Y+2	; 0x02
    100a:	fb 81       	ldd	r31, Y+3	; 0x03
    100c:	80 81       	ld	r24, Z
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	09 f0       	breq	.+2      	; 0x1014 <EXTI_enuInit+0x34>
    1012:	64 c0       	rjmp	.+200    	; 0x10dc <EXTI_enuInit+0xfc>

			SET_BIT(GICR, INT0_switch);
    1014:	ab e5       	ldi	r26, 0x5B	; 91
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	eb e5       	ldi	r30, 0x5B	; 91
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	80 64       	ori	r24, 0x40	; 64
    1020:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_0].Sence_Level){
    1022:	ea 81       	ldd	r30, Y+2	; 0x02
    1024:	fb 81       	ldd	r31, Y+3	; 0x03
    1026:	81 81       	ldd	r24, Z+1	; 0x01
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	39 87       	std	Y+9, r19	; 0x09
    102e:	28 87       	std	Y+8, r18	; 0x08
    1030:	88 85       	ldd	r24, Y+8	; 0x08
    1032:	99 85       	ldd	r25, Y+9	; 0x09
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 05       	cpc	r25, r1
    1038:	21 f1       	breq	.+72     	; 0x1082 <EXTI_enuInit+0xa2>
    103a:	28 85       	ldd	r18, Y+8	; 0x08
    103c:	39 85       	ldd	r19, Y+9	; 0x09
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	2c f4       	brge	.+10     	; 0x104e <EXTI_enuInit+0x6e>
    1044:	88 85       	ldd	r24, Y+8	; 0x08
    1046:	99 85       	ldd	r25, Y+9	; 0x09
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	61 f0       	breq	.+24     	; 0x1064 <EXTI_enuInit+0x84>
    104c:	53 c0       	rjmp	.+166    	; 0x10f4 <EXTI_enuInit+0x114>
    104e:	28 85       	ldd	r18, Y+8	; 0x08
    1050:	39 85       	ldd	r19, Y+9	; 0x09
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	21 f1       	breq	.+72     	; 0x10a0 <EXTI_enuInit+0xc0>
    1058:	88 85       	ldd	r24, Y+8	; 0x08
    105a:	99 85       	ldd	r25, Y+9	; 0x09
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	91 05       	cpc	r25, r1
    1060:	71 f1       	breq	.+92     	; 0x10be <EXTI_enuInit+0xde>
    1062:	48 c0       	rjmp	.+144    	; 0x10f4 <EXTI_enuInit+0x114>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
    1064:	a5 e5       	ldi	r26, 0x55	; 85
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e5       	ldi	r30, 0x55	; 85
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    1072:	a5 e5       	ldi	r26, 0x55	; 85
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e5 e5       	ldi	r30, 0x55	; 85
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8d 7f       	andi	r24, 0xFD	; 253
    107e:	8c 93       	st	X, r24
    1080:	39 c0       	rjmp	.+114    	; 0x10f4 <EXTI_enuInit+0x114>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
    1082:	a5 e5       	ldi	r26, 0x55	; 85
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e5 e5       	ldi	r30, 0x55	; 85
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    1090:	a5 e5       	ldi	r26, 0x55	; 85
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e5       	ldi	r30, 0x55	; 85
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8d 7f       	andi	r24, 0xFD	; 253
    109c:	8c 93       	st	X, r24
    109e:	2a c0       	rjmp	.+84     	; 0x10f4 <EXTI_enuInit+0x114>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
    10a0:	a5 e5       	ldi	r26, 0x55	; 85
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	e5 e5       	ldi	r30, 0x55	; 85
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8e 7f       	andi	r24, 0xFE	; 254
    10ac:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    10ae:	a5 e5       	ldi	r26, 0x55	; 85
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e5 e5       	ldi	r30, 0x55	; 85
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	82 60       	ori	r24, 0x02	; 2
    10ba:	8c 93       	st	X, r24
    10bc:	1b c0       	rjmp	.+54     	; 0x10f4 <EXTI_enuInit+0x114>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
    10be:	a5 e5       	ldi	r26, 0x55	; 85
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e5 e5       	ldi	r30, 0x55	; 85
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	81 60       	ori	r24, 0x01	; 1
    10ca:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    10cc:	a5 e5       	ldi	r26, 0x55	; 85
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e5 e5       	ldi	r30, 0x55	; 85
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	82 60       	ori	r24, 0x02	; 2
    10d8:	8c 93       	st	X, r24
    10da:	0c c0       	rjmp	.+24     	; 0x10f4 <EXTI_enuInit+0x114>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_DISABLED){
    10dc:	ea 81       	ldd	r30, Y+2	; 0x02
    10de:	fb 81       	ldd	r31, Y+3	; 0x03
    10e0:	80 81       	ld	r24, Z
    10e2:	88 23       	and	r24, r24
    10e4:	39 f4       	brne	.+14     	; 0x10f4 <EXTI_enuInit+0x114>

			CLR_BIT(GICR, INT0_switch);
    10e6:	ab e5       	ldi	r26, 0x5B	; 91
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	eb e5       	ldi	r30, 0x5B	; 91
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	8f 7b       	andi	r24, 0xBF	; 191
    10f2:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_ENABLED){
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	9b 81       	ldd	r25, Y+3	; 0x03
    10f8:	fc 01       	movw	r30, r24
    10fa:	32 96       	adiw	r30, 0x02	; 2
    10fc:	80 81       	ld	r24, Z
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	09 f0       	breq	.+2      	; 0x1104 <EXTI_enuInit+0x124>
    1102:	66 c0       	rjmp	.+204    	; 0x11d0 <EXTI_enuInit+0x1f0>

			SET_BIT(GICR, INT1_switch);
    1104:	ab e5       	ldi	r26, 0x5B	; 91
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	eb e5       	ldi	r30, 0x5B	; 91
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 68       	ori	r24, 0x80	; 128
    1110:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT_NO_1].Sence_Level){
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	9b 81       	ldd	r25, Y+3	; 0x03
    1116:	fc 01       	movw	r30, r24
    1118:	32 96       	adiw	r30, 0x02	; 2
    111a:	81 81       	ldd	r24, Z+1	; 0x01
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3f 83       	std	Y+7, r19	; 0x07
    1122:	2e 83       	std	Y+6, r18	; 0x06
    1124:	8e 81       	ldd	r24, Y+6	; 0x06
    1126:	9f 81       	ldd	r25, Y+7	; 0x07
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	91 05       	cpc	r25, r1
    112c:	21 f1       	breq	.+72     	; 0x1176 <EXTI_enuInit+0x196>
    112e:	2e 81       	ldd	r18, Y+6	; 0x06
    1130:	3f 81       	ldd	r19, Y+7	; 0x07
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	2c f4       	brge	.+10     	; 0x1142 <EXTI_enuInit+0x162>
    1138:	8e 81       	ldd	r24, Y+6	; 0x06
    113a:	9f 81       	ldd	r25, Y+7	; 0x07
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	61 f0       	breq	.+24     	; 0x1158 <EXTI_enuInit+0x178>
    1140:	55 c0       	rjmp	.+170    	; 0x11ec <EXTI_enuInit+0x20c>
    1142:	2e 81       	ldd	r18, Y+6	; 0x06
    1144:	3f 81       	ldd	r19, Y+7	; 0x07
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	21 f1       	breq	.+72     	; 0x1194 <EXTI_enuInit+0x1b4>
    114c:	8e 81       	ldd	r24, Y+6	; 0x06
    114e:	9f 81       	ldd	r25, Y+7	; 0x07
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	71 f1       	breq	.+92     	; 0x11b2 <EXTI_enuInit+0x1d2>
    1156:	4a c0       	rjmp	.+148    	; 0x11ec <EXTI_enuInit+0x20c>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
    1158:	a5 e5       	ldi	r26, 0x55	; 85
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e5       	ldi	r30, 0x55	; 85
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	8b 7f       	andi	r24, 0xFB	; 251
    1164:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	87 7f       	andi	r24, 0xF7	; 247
    1172:	8c 93       	st	X, r24
    1174:	3b c0       	rjmp	.+118    	; 0x11ec <EXTI_enuInit+0x20c>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
    1176:	a5 e5       	ldi	r26, 0x55	; 85
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e5 e5       	ldi	r30, 0x55	; 85
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	84 60       	ori	r24, 0x04	; 4
    1182:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    1184:	a5 e5       	ldi	r26, 0x55	; 85
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e5       	ldi	r30, 0x55	; 85
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	87 7f       	andi	r24, 0xF7	; 247
    1190:	8c 93       	st	X, r24
    1192:	2c c0       	rjmp	.+88     	; 0x11ec <EXTI_enuInit+0x20c>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
    1194:	a5 e5       	ldi	r26, 0x55	; 85
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e5       	ldi	r30, 0x55	; 85
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8b 7f       	andi	r24, 0xFB	; 251
    11a0:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    11a2:	a5 e5       	ldi	r26, 0x55	; 85
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e5 e5       	ldi	r30, 0x55	; 85
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	88 60       	ori	r24, 0x08	; 8
    11ae:	8c 93       	st	X, r24
    11b0:	1d c0       	rjmp	.+58     	; 0x11ec <EXTI_enuInit+0x20c>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
    11b2:	a5 e5       	ldi	r26, 0x55	; 85
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e5       	ldi	r30, 0x55	; 85
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	84 60       	ori	r24, 0x04	; 4
    11be:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    11c0:	a5 e5       	ldi	r26, 0x55	; 85
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e5 e5       	ldi	r30, 0x55	; 85
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	88 60       	ori	r24, 0x08	; 8
    11cc:	8c 93       	st	X, r24
    11ce:	0e c0       	rjmp	.+28     	; 0x11ec <EXTI_enuInit+0x20c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_DISABLED){
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	9b 81       	ldd	r25, Y+3	; 0x03
    11d4:	fc 01       	movw	r30, r24
    11d6:	32 96       	adiw	r30, 0x02	; 2
    11d8:	80 81       	ld	r24, Z
    11da:	88 23       	and	r24, r24
    11dc:	39 f4       	brne	.+14     	; 0x11ec <EXTI_enuInit+0x20c>

			CLR_BIT(GICR, INT1_switch);
    11de:	ab e5       	ldi	r26, 0x5B	; 91
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	eb e5       	ldi	r30, 0x5B	; 91
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	8f 77       	andi	r24, 0x7F	; 127
    11ea:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_ENABLED){
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	fc 01       	movw	r30, r24
    11f2:	34 96       	adiw	r30, 0x04	; 4
    11f4:	80 81       	ld	r24, Z
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	59 f5       	brne	.+86     	; 0x1250 <EXTI_enuInit+0x270>

			SET_BIT(GICR, INT2_switch);
    11fa:	ab e5       	ldi	r26, 0x5B	; 91
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	eb e5       	ldi	r30, 0x5B	; 91
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 62       	ori	r24, 0x20	; 32
    1206:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_2].Sence_Level){
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	9b 81       	ldd	r25, Y+3	; 0x03
    120c:	fc 01       	movw	r30, r24
    120e:	34 96       	adiw	r30, 0x04	; 4
    1210:	81 81       	ldd	r24, Z+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3d 83       	std	Y+5, r19	; 0x05
    1218:	2c 83       	std	Y+4, r18	; 0x04
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	9d 81       	ldd	r25, Y+5	; 0x05
    121e:	82 30       	cpi	r24, 0x02	; 2
    1220:	91 05       	cpc	r25, r1
    1222:	31 f0       	breq	.+12     	; 0x1230 <EXTI_enuInit+0x250>
    1224:	2c 81       	ldd	r18, Y+4	; 0x04
    1226:	3d 81       	ldd	r19, Y+5	; 0x05
    1228:	23 30       	cpi	r18, 0x03	; 3
    122a:	31 05       	cpc	r19, r1
    122c:	49 f0       	breq	.+18     	; 0x1240 <EXTI_enuInit+0x260>
    122e:	1e c0       	rjmp	.+60     	; 0x126c <EXTI_enuInit+0x28c>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
    1230:	a4 e5       	ldi	r26, 0x54	; 84
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e4 e5       	ldi	r30, 0x54	; 84
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8f 7b       	andi	r24, 0xBF	; 191
    123c:	8c 93       	st	X, r24
    123e:	16 c0       	rjmp	.+44     	; 0x126c <EXTI_enuInit+0x28c>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
    1240:	a4 e5       	ldi	r26, 0x54	; 84
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e4 e5       	ldi	r30, 0x54	; 84
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	80 64       	ori	r24, 0x40	; 64
    124c:	8c 93       	st	X, r24
    124e:	0e c0       	rjmp	.+28     	; 0x126c <EXTI_enuInit+0x28c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_DISABLED){
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	9b 81       	ldd	r25, Y+3	; 0x03
    1254:	fc 01       	movw	r30, r24
    1256:	34 96       	adiw	r30, 0x04	; 4
    1258:	80 81       	ld	r24, Z
    125a:	88 23       	and	r24, r24
    125c:	39 f4       	brne	.+14     	; 0x126c <EXTI_enuInit+0x28c>

			CLR_BIT(GICR, INT2_switch);
    125e:	ab e5       	ldi	r26, 0x5B	; 91
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	eb e5       	ldi	r30, 0x5B	; 91
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	8f 7d       	andi	r24, 0xDF	; 223
    126a:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    1270:	39 81       	ldd	r19, Y+1	; 0x01
    1272:	3a 87       	std	Y+10, r19	; 0x0a
    1274:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1276:	2a 96       	adiw	r28, 0x0a	; 10
    1278:	0f b6       	in	r0, 0x3f	; 63
    127a:	f8 94       	cli
    127c:	de bf       	out	0x3e, r29	; 62
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	cd bf       	out	0x3d, r28	; 61
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <EXTI_enuEnableInterrupt>:

ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <EXTI_enuEnableInterrupt+0x6>
    128e:	00 d0       	rcall	.+0      	; 0x1290 <EXTI_enuEnableInterrupt+0x8>
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    1296:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3c 83       	std	Y+4, r19	; 0x04
    12a0:	2b 83       	std	Y+3, r18	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	89 f0       	breq	.+34     	; 0x12ce <EXTI_enuEnableInterrupt+0x46>
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	a1 f0       	breq	.+40     	; 0x12de <EXTI_enuEnableInterrupt+0x56>
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	b9 f4       	brne	.+46     	; 0x12ec <EXTI_enuEnableInterrupt+0x64>
			case INT_NO_0:

				SET_BIT(GICR, INT0_switch);
    12be:	ab e5       	ldi	r26, 0x5B	; 91
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	eb e5       	ldi	r30, 0x5B	; 91
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 64       	ori	r24, 0x40	; 64
    12ca:	8c 93       	st	X, r24
    12cc:	0f c0       	rjmp	.+30     	; 0x12ec <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_1:

				SET_BIT(GICR, INT1_switch);
    12ce:	ab e5       	ldi	r26, 0x5B	; 91
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	eb e5       	ldi	r30, 0x5B	; 91
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	80 68       	ori	r24, 0x80	; 128
    12da:	8c 93       	st	X, r24
    12dc:	07 c0       	rjmp	.+14     	; 0x12ec <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_2:

				SET_BIT(GICR, INT2_switch);
    12de:	ab e5       	ldi	r26, 0x5B	; 91
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	eb e5       	ldi	r30, 0x5B	; 91
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	80 62       	ori	r24, 0x20	; 32
    12ea:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <EXTI_enuDisableInterrupt>:

ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	00 d0       	rcall	.+0      	; 0x1306 <EXTI_enuDisableInterrupt+0x6>
    1306:	00 d0       	rcall	.+0      	; 0x1308 <EXTI_enuDisableInterrupt+0x8>
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    1310:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT_NO_2){
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	83 30       	cpi	r24, 0x03	; 3
    1316:	18 f0       	brcs	.+6      	; 0x131e <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
    1318:	29 81       	ldd	r18, Y+1	; 0x01
    131a:	2d 83       	std	Y+5, r18	; 0x05
    131c:	2e c0       	rjmp	.+92     	; 0x137a <EXTI_enuDisableInterrupt+0x7a>
	}

	else{

		switch(Copy_u8IntNumber){
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	3c 83       	std	Y+4, r19	; 0x04
    1326:	2b 83       	std	Y+3, r18	; 0x03
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	91 05       	cpc	r25, r1
    1330:	89 f0       	breq	.+34     	; 0x1354 <EXTI_enuDisableInterrupt+0x54>
    1332:	2b 81       	ldd	r18, Y+3	; 0x03
    1334:	3c 81       	ldd	r19, Y+4	; 0x04
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	a1 f0       	breq	.+40     	; 0x1364 <EXTI_enuDisableInterrupt+0x64>
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	b9 f4       	brne	.+46     	; 0x1372 <EXTI_enuDisableInterrupt+0x72>
		case INT_NO_0:

			
			GICR &= ~(1<<INT0_switch);
    1344:	ab e5       	ldi	r26, 0x5B	; 91
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	eb e5       	ldi	r30, 0x5B	; 91
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8f 7b       	andi	r24, 0xBF	; 191
    1350:	8c 93       	st	X, r24
    1352:	0f c0       	rjmp	.+30     	; 0x1372 <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_1:

			GICR &= ~(1<<INT1_switch);
    1354:	ab e5       	ldi	r26, 0x5B	; 91
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	eb e5       	ldi	r30, 0x5B	; 91
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8f 77       	andi	r24, 0x7F	; 127
    1360:	8c 93       	st	X, r24
    1362:	07 c0       	rjmp	.+14     	; 0x1372 <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_2:

			GICR &= ~(1<<INT2_switch);
    1364:	ab e5       	ldi	r26, 0x5B	; 91
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	eb e5       	ldi	r30, 0x5B	; 91
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	8f 7d       	andi	r24, 0xDF	; 223
    1370:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    1376:	99 81       	ldd	r25, Y+1	; 0x01
    1378:	9d 83       	std	Y+5, r25	; 0x05
    137a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	cd b7       	in	r28, 0x3d	; 61
    1392:	de b7       	in	r29, 0x3e	; 62
    1394:	2c 97       	sbiw	r28, 0x0c	; 12
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	f8 94       	cli
    139a:	de bf       	out	0x3e, r29	; 62
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	cd bf       	out	0x3d, r28	; 61
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    13a4:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT_NO_2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	18 f4       	brcc	.+6      	; 0x13b2 <EXTI_enuSetSenseLevel+0x26>
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	18 f0       	brcs	.+6      	; 0x13b8 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
    13b2:	29 81       	ldd	r18, Y+1	; 0x01
    13b4:	2c 87       	std	Y+12, r18	; 0x0c
    13b6:	ef c0       	rjmp	.+478    	; 0x1596 <EXTI_enuSetSenseLevel+0x20a>
	}

	else{

		switch(Copy_u8IntNumber){
    13b8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	3b 87       	std	Y+11, r19	; 0x0b
    13c0:	2a 87       	std	Y+10, r18	; 0x0a
    13c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    13c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    13c6:	81 30       	cpi	r24, 0x01	; 1
    13c8:	91 05       	cpc	r25, r1
    13ca:	09 f4       	brne	.+2      	; 0x13ce <EXTI_enuSetSenseLevel+0x42>
    13cc:	66 c0       	rjmp	.+204    	; 0x149a <EXTI_enuSetSenseLevel+0x10e>
    13ce:	2a 85       	ldd	r18, Y+10	; 0x0a
    13d0:	3b 85       	ldd	r19, Y+11	; 0x0b
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	09 f4       	brne	.+2      	; 0x13da <EXTI_enuSetSenseLevel+0x4e>
    13d8:	bb c0       	rjmp	.+374    	; 0x1550 <EXTI_enuSetSenseLevel+0x1c4>
    13da:	8a 85       	ldd	r24, Y+10	; 0x0a
    13dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <EXTI_enuSetSenseLevel+0x58>
    13e2:	d5 c0       	rjmp	.+426    	; 0x158e <EXTI_enuSetSenseLevel+0x202>
		case INT_NO_0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	39 87       	std	Y+9, r19	; 0x09
    13ec:	28 87       	std	Y+8, r18	; 0x08
    13ee:	88 85       	ldd	r24, Y+8	; 0x08
    13f0:	99 85       	ldd	r25, Y+9	; 0x09
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	91 05       	cpc	r25, r1
    13f6:	a9 f0       	breq	.+42     	; 0x1422 <EXTI_enuSetSenseLevel+0x96>
    13f8:	28 85       	ldd	r18, Y+8	; 0x08
    13fa:	39 85       	ldd	r19, Y+9	; 0x09
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	2c f4       	brge	.+10     	; 0x140c <EXTI_enuSetSenseLevel+0x80>
    1402:	88 85       	ldd	r24, Y+8	; 0x08
    1404:	99 85       	ldd	r25, Y+9	; 0x09
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	d9 f0       	breq	.+54     	; 0x1440 <EXTI_enuSetSenseLevel+0xb4>
    140a:	c1 c0       	rjmp	.+386    	; 0x158e <EXTI_enuSetSenseLevel+0x202>
    140c:	28 85       	ldd	r18, Y+8	; 0x08
    140e:	39 85       	ldd	r19, Y+9	; 0x09
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	21 f1       	breq	.+72     	; 0x145e <EXTI_enuSetSenseLevel+0xd2>
    1416:	88 85       	ldd	r24, Y+8	; 0x08
    1418:	99 85       	ldd	r25, Y+9	; 0x09
    141a:	83 30       	cpi	r24, 0x03	; 3
    141c:	91 05       	cpc	r25, r1
    141e:	71 f1       	breq	.+92     	; 0x147c <EXTI_enuSetSenseLevel+0xf0>
    1420:	b6 c0       	rjmp	.+364    	; 0x158e <EXTI_enuSetSenseLevel+0x202>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
    1422:	a5 e5       	ldi	r26, 0x55	; 85
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e5 e5       	ldi	r30, 0x55	; 85
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    1430:	a5 e5       	ldi	r26, 0x55	; 85
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e5 e5       	ldi	r30, 0x55	; 85
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	8d 7f       	andi	r24, 0xFD	; 253
    143c:	8c 93       	st	X, r24
    143e:	a7 c0       	rjmp	.+334    	; 0x158e <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    1440:	a5 e5       	ldi	r26, 0x55	; 85
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e5 e5       	ldi	r30, 0x55	; 85
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	8e 7f       	andi	r24, 0xFE	; 254
    144c:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    144e:	a5 e5       	ldi	r26, 0x55	; 85
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e5 e5       	ldi	r30, 0x55	; 85
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8d 7f       	andi	r24, 0xFD	; 253
    145a:	8c 93       	st	X, r24
    145c:	98 c0       	rjmp	.+304    	; 0x158e <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    145e:	a5 e5       	ldi	r26, 0x55	; 85
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e5 e5       	ldi	r30, 0x55	; 85
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8e 7f       	andi	r24, 0xFE	; 254
    146a:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    146c:	a5 e5       	ldi	r26, 0x55	; 85
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e5 e5       	ldi	r30, 0x55	; 85
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	82 60       	ori	r24, 0x02	; 2
    1478:	8c 93       	st	X, r24
    147a:	89 c0       	rjmp	.+274    	; 0x158e <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    147c:	a5 e5       	ldi	r26, 0x55	; 85
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e5       	ldi	r30, 0x55	; 85
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	81 60       	ori	r24, 0x01	; 1
    1488:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    148a:	a5 e5       	ldi	r26, 0x55	; 85
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e5       	ldi	r30, 0x55	; 85
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	82 60       	ori	r24, 0x02	; 2
    1496:	8c 93       	st	X, r24
    1498:	7a c0       	rjmp	.+244    	; 0x158e <EXTI_enuSetSenseLevel+0x202>
			/**************************************************/

		case INT_NO_1:

			/**************** 1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3f 83       	std	Y+7, r19	; 0x07
    14a2:	2e 83       	std	Y+6, r18	; 0x06
    14a4:	8e 81       	ldd	r24, Y+6	; 0x06
    14a6:	9f 81       	ldd	r25, Y+7	; 0x07
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	91 05       	cpc	r25, r1
    14ac:	a9 f0       	breq	.+42     	; 0x14d8 <EXTI_enuSetSenseLevel+0x14c>
    14ae:	2e 81       	ldd	r18, Y+6	; 0x06
    14b0:	3f 81       	ldd	r19, Y+7	; 0x07
    14b2:	22 30       	cpi	r18, 0x02	; 2
    14b4:	31 05       	cpc	r19, r1
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <EXTI_enuSetSenseLevel+0x136>
    14b8:	8e 81       	ldd	r24, Y+6	; 0x06
    14ba:	9f 81       	ldd	r25, Y+7	; 0x07
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	d9 f0       	breq	.+54     	; 0x14f6 <EXTI_enuSetSenseLevel+0x16a>
    14c0:	66 c0       	rjmp	.+204    	; 0x158e <EXTI_enuSetSenseLevel+0x202>
    14c2:	2e 81       	ldd	r18, Y+6	; 0x06
    14c4:	3f 81       	ldd	r19, Y+7	; 0x07
    14c6:	22 30       	cpi	r18, 0x02	; 2
    14c8:	31 05       	cpc	r19, r1
    14ca:	21 f1       	breq	.+72     	; 0x1514 <EXTI_enuSetSenseLevel+0x188>
    14cc:	8e 81       	ldd	r24, Y+6	; 0x06
    14ce:	9f 81       	ldd	r25, Y+7	; 0x07
    14d0:	83 30       	cpi	r24, 0x03	; 3
    14d2:	91 05       	cpc	r25, r1
    14d4:	71 f1       	breq	.+92     	; 0x1532 <EXTI_enuSetSenseLevel+0x1a6>
    14d6:	5b c0       	rjmp	.+182    	; 0x158e <EXTI_enuSetSenseLevel+0x202>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    14d8:	a5 e5       	ldi	r26, 0x55	; 85
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e5       	ldi	r30, 0x55	; 85
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	84 60       	ori	r24, 0x04	; 4
    14e4:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    14e6:	a5 e5       	ldi	r26, 0x55	; 85
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e5 e5       	ldi	r30, 0x55	; 85
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	87 7f       	andi	r24, 0xF7	; 247
    14f2:	8c 93       	st	X, r24
    14f4:	4c c0       	rjmp	.+152    	; 0x158e <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    14f6:	a5 e5       	ldi	r26, 0x55	; 85
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e5 e5       	ldi	r30, 0x55	; 85
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8b 7f       	andi	r24, 0xFB	; 251
    1502:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    1504:	a5 e5       	ldi	r26, 0x55	; 85
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e5 e5       	ldi	r30, 0x55	; 85
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	87 7f       	andi	r24, 0xF7	; 247
    1510:	8c 93       	st	X, r24
    1512:	3d c0       	rjmp	.+122    	; 0x158e <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    1514:	a5 e5       	ldi	r26, 0x55	; 85
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e5 e5       	ldi	r30, 0x55	; 85
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	8b 7f       	andi	r24, 0xFB	; 251
    1520:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    1522:	a5 e5       	ldi	r26, 0x55	; 85
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e5 e5       	ldi	r30, 0x55	; 85
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	88 60       	ori	r24, 0x08	; 8
    152e:	8c 93       	st	X, r24
    1530:	2e c0       	rjmp	.+92     	; 0x158e <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    1532:	a5 e5       	ldi	r26, 0x55	; 85
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e5 e5       	ldi	r30, 0x55	; 85
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	84 60       	ori	r24, 0x04	; 4
    153e:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    1540:	a5 e5       	ldi	r26, 0x55	; 85
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e5 e5       	ldi	r30, 0x55	; 85
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	88 60       	ori	r24, 0x08	; 8
    154c:	8c 93       	st	X, r24
    154e:	1f c0       	rjmp	.+62     	; 0x158e <EXTI_enuSetSenseLevel+0x202>


		case INT_NO_2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	3d 83       	std	Y+5, r19	; 0x05
    1558:	2c 83       	std	Y+4, r18	; 0x04
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	9d 81       	ldd	r25, Y+5	; 0x05
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	91 05       	cpc	r25, r1
    1562:	31 f0       	breq	.+12     	; 0x1570 <EXTI_enuSetSenseLevel+0x1e4>
    1564:	2c 81       	ldd	r18, Y+4	; 0x04
    1566:	3d 81       	ldd	r19, Y+5	; 0x05
    1568:	23 30       	cpi	r18, 0x03	; 3
    156a:	31 05       	cpc	r19, r1
    156c:	49 f0       	breq	.+18     	; 0x1580 <EXTI_enuSetSenseLevel+0x1f4>
    156e:	0f c0       	rjmp	.+30     	; 0x158e <EXTI_enuSetSenseLevel+0x202>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    1570:	a4 e5       	ldi	r26, 0x54	; 84
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e4 e5       	ldi	r30, 0x54	; 84
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	8f 7b       	andi	r24, 0xBF	; 191
    157c:	8c 93       	st	X, r24
    157e:	07 c0       	rjmp	.+14     	; 0x158e <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    1580:	a4 e5       	ldi	r26, 0x54	; 84
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e4 e5       	ldi	r30, 0x54	; 84
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	80 64       	ori	r24, 0x40	; 64
    158c:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    1592:	39 81       	ldd	r19, Y+1	; 0x01
    1594:	3c 87       	std	Y+12, r19	; 0x0c
    1596:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1598:	2c 96       	adiw	r28, 0x0c	; 12
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <EXTI_enuSetCallBack+0x6>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <EXTI_enuSetCallBack+0x8>
    15b2:	0f 92       	push	r0
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	9b 83       	std	Y+3, r25	; 0x03
    15ba:	8a 83       	std	Y+2, r24	; 0x02
    15bc:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    15be:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9b 81       	ldd	r25, Y+3	; 0x03
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	29 f4       	brne	.+10     	; 0x15d2 <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    15c8:	83 e0       	ldi	r24, 0x03	; 3
    15ca:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	8d 83       	std	Y+5, r24	; 0x05
    15d0:	18 c0       	rjmp	.+48     	; 0x1602 <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT_NO_2){
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	28 f0       	brcs	.+10     	; 0x15e2 <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    15d8:	84 e0       	ldi	r24, 0x04	; 4
    15da:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	8d 83       	std	Y+5, r24	; 0x05
    15e0:	10 c0       	rjmp	.+32     	; 0x1602 <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	88 2f       	mov	r24, r24
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	fc 01       	movw	r30, r24
    15ee:	e8 57       	subi	r30, 0x78	; 120
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	9b 81       	ldd	r25, Y+3	; 0x03
    15f6:	91 83       	std	Z+1, r25	; 0x01
    15f8:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	8d 83       	std	Y+5, r24	; 0x05
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <__vector_1>:


ISR(INT0_vect){
    1614:	1f 92       	push	r1
    1616:	0f 92       	push	r0
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	0f 92       	push	r0
    161c:	11 24       	eor	r1, r1
    161e:	2f 93       	push	r18
    1620:	3f 93       	push	r19
    1622:	4f 93       	push	r20
    1624:	5f 93       	push	r21
    1626:	6f 93       	push	r22
    1628:	7f 93       	push	r23
    162a:	8f 93       	push	r24
    162c:	9f 93       	push	r25
    162e:	af 93       	push	r26
    1630:	bf 93       	push	r27
    1632:	ef 93       	push	r30
    1634:	ff 93       	push	r31
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_0] != NULL){
    163e:	80 91 88 00 	lds	r24, 0x0088
    1642:	90 91 89 00 	lds	r25, 0x0089
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	29 f0       	breq	.+10     	; 0x1654 <__vector_1+0x40>
			EXTI_pfunISRFun[INT_NO_0]();
    164a:	e0 91 88 00 	lds	r30, 0x0088
    164e:	f0 91 89 00 	lds	r31, 0x0089
    1652:	09 95       	icall
		}
}
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0
    1676:	1f 90       	pop	r1
    1678:	18 95       	reti

0000167a <__vector_2>:




ISR(INT1_vect){
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_1] != NULL){
    16a4:	80 91 8a 00 	lds	r24, 0x008A
    16a8:	90 91 8b 00 	lds	r25, 0x008B
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	29 f0       	breq	.+10     	; 0x16ba <__vector_2+0x40>
			EXTI_pfunISRFun[INT_NO_1]();
    16b0:	e0 91 8a 00 	lds	r30, 0x008A
    16b4:	f0 91 8b 00 	lds	r31, 0x008B
    16b8:	09 95       	icall
		}
}
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	ff 91       	pop	r31
    16c0:	ef 91       	pop	r30
    16c2:	bf 91       	pop	r27
    16c4:	af 91       	pop	r26
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	7f 91       	pop	r23
    16cc:	6f 91       	pop	r22
    16ce:	5f 91       	pop	r21
    16d0:	4f 91       	pop	r20
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	0f 90       	pop	r0
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	0f 90       	pop	r0
    16dc:	1f 90       	pop	r1
    16de:	18 95       	reti

000016e0 <__vector_3>:



ISR(INT2_vect){
    16e0:	1f 92       	push	r1
    16e2:	0f 92       	push	r0
    16e4:	0f b6       	in	r0, 0x3f	; 63
    16e6:	0f 92       	push	r0
    16e8:	11 24       	eor	r1, r1
    16ea:	2f 93       	push	r18
    16ec:	3f 93       	push	r19
    16ee:	4f 93       	push	r20
    16f0:	5f 93       	push	r21
    16f2:	6f 93       	push	r22
    16f4:	7f 93       	push	r23
    16f6:	8f 93       	push	r24
    16f8:	9f 93       	push	r25
    16fa:	af 93       	push	r26
    16fc:	bf 93       	push	r27
    16fe:	ef 93       	push	r30
    1700:	ff 93       	push	r31
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_2] != NULL){
    170a:	80 91 8c 00 	lds	r24, 0x008C
    170e:	90 91 8d 00 	lds	r25, 0x008D
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	29 f0       	breq	.+10     	; 0x1720 <__vector_3+0x40>
			EXTI_pfunISRFun[INT_NO_2]();
    1716:	e0 91 8c 00 	lds	r30, 0x008C
    171a:	f0 91 8d 00 	lds	r31, 0x008D
    171e:	09 95       	icall
		}
}
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	ff 91       	pop	r31
    1726:	ef 91       	pop	r30
    1728:	bf 91       	pop	r27
    172a:	af 91       	pop	r26
    172c:	9f 91       	pop	r25
    172e:	8f 91       	pop	r24
    1730:	7f 91       	pop	r23
    1732:	6f 91       	pop	r22
    1734:	5f 91       	pop	r21
    1736:	4f 91       	pop	r20
    1738:	3f 91       	pop	r19
    173a:	2f 91       	pop	r18
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	0f 92       	push	r0
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1750:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    1752:	ea e3       	ldi	r30, 0x3A	; 58
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 ef       	ldi	r24, 0xF0	; 240
    1758:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    175a:	eb e3       	ldi	r30, 0x3B	; 59
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	83 ec       	ldi	r24, 0xC3	; 195
    1760:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    1762:	e7 e3       	ldi	r30, 0x37	; 55
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 ef       	ldi	r24, 0xF0	; 240
    1768:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    176a:	e8 e3       	ldi	r30, 0x38	; 56
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	83 ec       	ldi	r24, 0xC3	; 195
    1770:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    1772:	e4 e3       	ldi	r30, 0x34	; 52
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 ef       	ldi	r24, 0xF0	; 240
    1778:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    177a:	e5 e3       	ldi	r30, 0x35	; 53
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	83 ec       	ldi	r24, 0xC3	; 195
    1780:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    1782:	e1 e3       	ldi	r30, 0x31	; 49
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 ef       	ldi	r24, 0xF0	; 240
    1788:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    178a:	e2 e3       	ldi	r30, 0x32	; 50
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	83 ec       	ldi	r24, 0xC3	; 195
    1790:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
}
    1794:	0f 90       	pop	r0
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	08 95       	ret

0000179c <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    179c:	df 93       	push	r29
    179e:	cf 93       	push	r28
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	27 97       	sbiw	r28, 0x07	; 7
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	8a 83       	std	Y+2, r24	; 0x02
    17b2:	6b 83       	std	Y+3, r22	; 0x03
    17b4:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    17b6:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	84 30       	cpi	r24, 0x04	; 4
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <DIO_enuSetPinDirection+0x24>
    17be:	de c0       	rjmp	.+444    	; 0x197c <DIO_enuSetPinDirection+0x1e0>
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	88 30       	cpi	r24, 0x08	; 8
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <DIO_enuSetPinDirection+0x2c>
    17c6:	da c0       	rjmp	.+436    	; 0x197c <DIO_enuSetPinDirection+0x1e0>
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <DIO_enuSetPinDirection+0x34>
    17ce:	d6 c0       	rjmp	.+428    	; 0x197c <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3f 83       	std	Y+7, r19	; 0x07
    17d8:	2e 83       	std	Y+6, r18	; 0x06
    17da:	8e 81       	ldd	r24, Y+6	; 0x06
    17dc:	9f 81       	ldd	r25, Y+7	; 0x07
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 05       	cpc	r25, r1
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <DIO_enuSetPinDirection+0x4a>
    17e4:	43 c0       	rjmp	.+134    	; 0x186c <DIO_enuSetPinDirection+0xd0>
    17e6:	2e 81       	ldd	r18, Y+6	; 0x06
    17e8:	3f 81       	ldd	r19, Y+7	; 0x07
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	2c f4       	brge	.+10     	; 0x17fa <DIO_enuSetPinDirection+0x5e>
    17f0:	8e 81       	ldd	r24, Y+6	; 0x06
    17f2:	9f 81       	ldd	r25, Y+7	; 0x07
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	71 f0       	breq	.+28     	; 0x1814 <DIO_enuSetPinDirection+0x78>
    17f8:	bc c0       	rjmp	.+376    	; 0x1972 <DIO_enuSetPinDirection+0x1d6>
    17fa:	2e 81       	ldd	r18, Y+6	; 0x06
    17fc:	3f 81       	ldd	r19, Y+7	; 0x07
    17fe:	22 30       	cpi	r18, 0x02	; 2
    1800:	31 05       	cpc	r19, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <DIO_enuSetPinDirection+0x6a>
    1804:	5f c0       	rjmp	.+190    	; 0x18c4 <DIO_enuSetPinDirection+0x128>
    1806:	8e 81       	ldd	r24, Y+6	; 0x06
    1808:	9f 81       	ldd	r25, Y+7	; 0x07
    180a:	83 30       	cpi	r24, 0x03	; 3
    180c:	91 05       	cpc	r25, r1
    180e:	09 f4       	brne	.+2      	; 0x1812 <DIO_enuSetPinDirection+0x76>
    1810:	85 c0       	rjmp	.+266    	; 0x191c <DIO_enuSetPinDirection+0x180>
    1812:	af c0       	rjmp	.+350    	; 0x1972 <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1814:	8c 81       	ldd	r24, Y+4	; 0x04
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	a1 f4       	brne	.+40     	; 0x1842 <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    181a:	aa e3       	ldi	r26, 0x3A	; 58
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	ea e3       	ldi	r30, 0x3A	; 58
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	48 2f       	mov	r20, r24
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 2e       	mov	r0, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <DIO_enuSetPinDirection+0x9c>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	0a 94       	dec	r0
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <DIO_enuSetPinDirection+0x98>
    183c:	84 2b       	or	r24, r20
    183e:	8c 93       	st	X, r24
    1840:	98 c0       	rjmp	.+304    	; 0x1972 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    1842:	aa e3       	ldi	r26, 0x3A	; 58
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	ea e3       	ldi	r30, 0x3A	; 58
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_enuSetPinDirection+0xc4>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_enuSetPinDirection+0xc0>
    1864:	80 95       	com	r24
    1866:	84 23       	and	r24, r20
    1868:	8c 93       	st	X, r24
    186a:	83 c0       	rjmp	.+262    	; 0x1972 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	a1 f4       	brne	.+40     	; 0x189a <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    1872:	a7 e3       	ldi	r26, 0x37	; 55
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e7 e3       	ldi	r30, 0x37	; 55
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_enuSetPinDirection+0xf4>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <DIO_enuSetPinDirection+0xf0>
    1894:	84 2b       	or	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	6c c0       	rjmp	.+216    	; 0x1972 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    189a:	a7 e3       	ldi	r26, 0x37	; 55
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	e7 e3       	ldi	r30, 0x37	; 55
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	48 2f       	mov	r20, r24
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 2e       	mov	r0, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <DIO_enuSetPinDirection+0x11c>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <DIO_enuSetPinDirection+0x118>
    18bc:	80 95       	com	r24
    18be:	84 23       	and	r24, r20
    18c0:	8c 93       	st	X, r24
    18c2:	57 c0       	rjmp	.+174    	; 0x1972 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	a1 f4       	brne	.+40     	; 0x18f2 <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    18ca:	a4 e3       	ldi	r26, 0x34	; 52
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e4 e3       	ldi	r30, 0x34	; 52
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <DIO_enuSetPinDirection+0x14c>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <DIO_enuSetPinDirection+0x148>
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	40 c0       	rjmp	.+128    	; 0x1972 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    18f2:	a4 e3       	ldi	r26, 0x34	; 52
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e4 e3       	ldi	r30, 0x34	; 52
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_enuSetPinDirection+0x174>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_enuSetPinDirection+0x170>
    1914:	80 95       	com	r24
    1916:	84 23       	and	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	2b c0       	rjmp	.+86     	; 0x1972 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	a1 f4       	brne	.+40     	; 0x194a <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    1922:	a1 e3       	ldi	r26, 0x31	; 49
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e1 e3       	ldi	r30, 0x31	; 49
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_enuSetPinDirection+0x1a4>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <DIO_enuSetPinDirection+0x1a0>
    1944:	84 2b       	or	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    194a:	a1 e3       	ldi	r26, 0x31	; 49
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e1 e3       	ldi	r30, 0x31	; 49
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <DIO_enuSetPinDirection+0x1cc>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <DIO_enuSetPinDirection+0x1c8>
    196c:	80 95       	com	r24
    196e:	84 23       	and	r24, r20
    1970:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    1976:	99 81       	ldd	r25, Y+1	; 0x01
    1978:	9d 83       	std	Y+5, r25	; 0x05
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    197c:	29 81       	ldd	r18, Y+1	; 0x01
    197e:	2d 83       	std	Y+5, r18	; 0x05
    1980:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    1982:	27 96       	adiw	r28, 0x07	; 7
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	f8 94       	cli
    1988:	de bf       	out	0x3e, r29	; 62
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	cd bf       	out	0x3d, r28	; 61
    198e:	cf 91       	pop	r28
    1990:	df 91       	pop	r29
    1992:	08 95       	ret

00001994 <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    1994:	df 93       	push	r29
    1996:	cf 93       	push	r28
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	27 97       	sbiw	r28, 0x07	; 7
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	8a 83       	std	Y+2, r24	; 0x02
    19aa:	6b 83       	std	Y+3, r22	; 0x03
    19ac:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    19ae:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	84 30       	cpi	r24, 0x04	; 4
    19b4:	08 f0       	brcs	.+2      	; 0x19b8 <DIO_enuSetPinValue+0x24>
    19b6:	de c0       	rjmp	.+444    	; 0x1b74 <DIO_enuSetPinValue+0x1e0>
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	88 30       	cpi	r24, 0x08	; 8
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <DIO_enuSetPinValue+0x2c>
    19be:	da c0       	rjmp	.+436    	; 0x1b74 <DIO_enuSetPinValue+0x1e0>
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	08 f0       	brcs	.+2      	; 0x19c8 <DIO_enuSetPinValue+0x34>
    19c6:	d6 c0       	rjmp	.+428    	; 0x1b74 <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	3f 83       	std	Y+7, r19	; 0x07
    19d0:	2e 83       	std	Y+6, r18	; 0x06
    19d2:	8e 81       	ldd	r24, Y+6	; 0x06
    19d4:	9f 81       	ldd	r25, Y+7	; 0x07
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	09 f4       	brne	.+2      	; 0x19de <DIO_enuSetPinValue+0x4a>
    19dc:	43 c0       	rjmp	.+134    	; 0x1a64 <DIO_enuSetPinValue+0xd0>
    19de:	2e 81       	ldd	r18, Y+6	; 0x06
    19e0:	3f 81       	ldd	r19, Y+7	; 0x07
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <DIO_enuSetPinValue+0x5e>
    19e8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ea:	9f 81       	ldd	r25, Y+7	; 0x07
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	71 f0       	breq	.+28     	; 0x1a0c <DIO_enuSetPinValue+0x78>
    19f0:	bc c0       	rjmp	.+376    	; 0x1b6a <DIO_enuSetPinValue+0x1d6>
    19f2:	2e 81       	ldd	r18, Y+6	; 0x06
    19f4:	3f 81       	ldd	r19, Y+7	; 0x07
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	09 f4       	brne	.+2      	; 0x19fe <DIO_enuSetPinValue+0x6a>
    19fc:	5f c0       	rjmp	.+190    	; 0x1abc <DIO_enuSetPinValue+0x128>
    19fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1a00:	9f 81       	ldd	r25, Y+7	; 0x07
    1a02:	83 30       	cpi	r24, 0x03	; 3
    1a04:	91 05       	cpc	r25, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <DIO_enuSetPinValue+0x76>
    1a08:	85 c0       	rjmp	.+266    	; 0x1b14 <DIO_enuSetPinValue+0x180>
    1a0a:	af c0       	rjmp	.+350    	; 0x1b6a <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    1a0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0e:	88 23       	and	r24, r24
    1a10:	a1 f0       	breq	.+40     	; 0x1a3a <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    1a12:	ab e3       	ldi	r26, 0x3B	; 59
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	eb e3       	ldi	r30, 0x3B	; 59
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_enuSetPinValue+0x9c>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_enuSetPinValue+0x98>
    1a34:	84 2b       	or	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	98 c0       	rjmp	.+304    	; 0x1b6a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    1a3a:	ab e3       	ldi	r26, 0x3B	; 59
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	eb e3       	ldi	r30, 0x3B	; 59
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 2e       	mov	r0, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <DIO_enuSetPinValue+0xc4>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	0a 94       	dec	r0
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <DIO_enuSetPinValue+0xc0>
    1a5c:	80 95       	com	r24
    1a5e:	84 23       	and	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	83 c0       	rjmp	.+262    	; 0x1b6a <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	88 23       	and	r24, r24
    1a68:	a1 f0       	breq	.+40     	; 0x1a92 <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    1a6a:	a8 e3       	ldi	r26, 0x38	; 56
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e8 e3       	ldi	r30, 0x38	; 56
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8b 81       	ldd	r24, Y+3	; 0x03
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_enuSetPinValue+0xf4>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_enuSetPinValue+0xf0>
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	6c c0       	rjmp	.+216    	; 0x1b6a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    1a92:	a8 e3       	ldi	r26, 0x38	; 56
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e8 e3       	ldi	r30, 0x38	; 56
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <DIO_enuSetPinValue+0x11c>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <DIO_enuSetPinValue+0x118>
    1ab4:	80 95       	com	r24
    1ab6:	84 23       	and	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	57 c0       	rjmp	.+174    	; 0x1b6a <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	88 23       	and	r24, r24
    1ac0:	a1 f0       	breq	.+40     	; 0x1aea <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    1ac2:	a5 e3       	ldi	r26, 0x35	; 53
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e5 e3       	ldi	r30, 0x35	; 53
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <DIO_enuSetPinValue+0x14c>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <DIO_enuSetPinValue+0x148>
    1ae4:	84 2b       	or	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	40 c0       	rjmp	.+128    	; 0x1b6a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    1aea:	a5 e3       	ldi	r26, 0x35	; 53
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e5 e3       	ldi	r30, 0x35	; 53
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_enuSetPinValue+0x174>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_enuSetPinValue+0x170>
    1b0c:	80 95       	com	r24
    1b0e:	84 23       	and	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	2b c0       	rjmp	.+86     	; 0x1b6a <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    1b14:	8c 81       	ldd	r24, Y+4	; 0x04
    1b16:	88 23       	and	r24, r24
    1b18:	a1 f0       	breq	.+40     	; 0x1b42 <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    1b1a:	a2 e3       	ldi	r26, 0x32	; 50
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e2 e3       	ldi	r30, 0x32	; 50
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_enuSetPinValue+0x1a4>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <DIO_enuSetPinValue+0x1a0>
    1b3c:	84 2b       	or	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    1b42:	a2 e3       	ldi	r26, 0x32	; 50
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e2 e3       	ldi	r30, 0x32	; 50
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	48 2f       	mov	r20, r24
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <DIO_enuSetPinValue+0x1cc>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <DIO_enuSetPinValue+0x1c8>
    1b64:	80 95       	com	r24
    1b66:	84 23       	and	r24, r20
    1b68:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    1b6e:	99 81       	ldd	r25, Y+1	; 0x01
    1b70:	9d 83       	std	Y+5, r25	; 0x05
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    1b74:	29 81       	ldd	r18, Y+1	; 0x01
    1b76:	2d 83       	std	Y+5, r18	; 0x05
    1b78:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    1b7a:	27 96       	adiw	r28, 0x07	; 7
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	28 97       	sbiw	r28, 0x08	; 8
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	8a 83       	std	Y+2, r24	; 0x02
    1ba2:	6b 83       	std	Y+3, r22	; 0x03
    1ba4:	5d 83       	std	Y+5, r21	; 0x05
    1ba6:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1ba8:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	9d 81       	ldd	r25, Y+5	; 0x05
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	29 f4       	brne	.+10     	; 0x1bbc <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    1bb2:	83 e0       	ldi	r24, 0x03	; 3
    1bb4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    1bb6:	29 81       	ldd	r18, Y+1	; 0x01
    1bb8:	28 87       	std	Y+8, r18	; 0x08
    1bba:	7f c0       	rjmp	.+254    	; 0x1cba <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	84 30       	cpi	r24, 0x04	; 4
    1bc0:	08 f0       	brcs	.+2      	; 0x1bc4 <DIO_enuGetPinValue+0x38>
    1bc2:	79 c0       	rjmp	.+242    	; 0x1cb6 <DIO_enuGetPinValue+0x12a>
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	88 30       	cpi	r24, 0x08	; 8
    1bc8:	08 f0       	brcs	.+2      	; 0x1bcc <DIO_enuGetPinValue+0x40>
    1bca:	75 c0       	rjmp	.+234    	; 0x1cb6 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	48 2f       	mov	r20, r24
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	5f 83       	std	Y+7, r21	; 0x07
    1bd4:	4e 83       	std	Y+6, r20	; 0x06
    1bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	91 05       	cpc	r25, r1
    1bde:	59 f1       	breq	.+86     	; 0x1c36 <DIO_enuGetPinValue+0xaa>
    1be0:	2e 81       	ldd	r18, Y+6	; 0x06
    1be2:	3f 81       	ldd	r19, Y+7	; 0x07
    1be4:	22 30       	cpi	r18, 0x02	; 2
    1be6:	31 05       	cpc	r19, r1
    1be8:	34 f4       	brge	.+12     	; 0x1bf6 <DIO_enuGetPinValue+0x6a>
    1bea:	4e 81       	ldd	r20, Y+6	; 0x06
    1bec:	5f 81       	ldd	r21, Y+7	; 0x07
    1bee:	41 15       	cp	r20, r1
    1bf0:	51 05       	cpc	r21, r1
    1bf2:	69 f0       	breq	.+26     	; 0x1c0e <DIO_enuGetPinValue+0x82>
    1bf4:	5b c0       	rjmp	.+182    	; 0x1cac <DIO_enuGetPinValue+0x120>
    1bf6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	79 f1       	breq	.+94     	; 0x1c5e <DIO_enuGetPinValue+0xd2>
    1c00:	2e 81       	ldd	r18, Y+6	; 0x06
    1c02:	3f 81       	ldd	r19, Y+7	; 0x07
    1c04:	23 30       	cpi	r18, 0x03	; 3
    1c06:	31 05       	cpc	r19, r1
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <DIO_enuGetPinValue+0x80>
    1c0a:	3d c0       	rjmp	.+122    	; 0x1c86 <DIO_enuGetPinValue+0xfa>
    1c0c:	4f c0       	rjmp	.+158    	; 0x1cac <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    1c0e:	e9 e3       	ldi	r30, 0x39	; 57
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a9 01       	movw	r20, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <DIO_enuGetPinValue+0x9a>
    1c22:	55 95       	asr	r21
    1c24:	47 95       	ror	r20
    1c26:	8a 95       	dec	r24
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <DIO_enuGetPinValue+0x96>
    1c2a:	ca 01       	movw	r24, r20
    1c2c:	81 70       	andi	r24, 0x01	; 1
    1c2e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c30:	fd 81       	ldd	r31, Y+5	; 0x05
    1c32:	80 83       	st	Z, r24
    1c34:	3b c0       	rjmp	.+118    	; 0x1cac <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    1c36:	e6 e3       	ldi	r30, 0x36	; 54
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a9 01       	movw	r20, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_enuGetPinValue+0xc2>
    1c4a:	55 95       	asr	r21
    1c4c:	47 95       	ror	r20
    1c4e:	8a 95       	dec	r24
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <DIO_enuGetPinValue+0xbe>
    1c52:	ca 01       	movw	r24, r20
    1c54:	81 70       	andi	r24, 0x01	; 1
    1c56:	ec 81       	ldd	r30, Y+4	; 0x04
    1c58:	fd 81       	ldd	r31, Y+5	; 0x05
    1c5a:	80 83       	st	Z, r24
    1c5c:	27 c0       	rjmp	.+78     	; 0x1cac <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    1c5e:	e3 e3       	ldi	r30, 0x33	; 51
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a9 01       	movw	r20, r18
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <DIO_enuGetPinValue+0xea>
    1c72:	55 95       	asr	r21
    1c74:	47 95       	ror	r20
    1c76:	8a 95       	dec	r24
    1c78:	e2 f7       	brpl	.-8      	; 0x1c72 <DIO_enuGetPinValue+0xe6>
    1c7a:	ca 01       	movw	r24, r20
    1c7c:	81 70       	andi	r24, 0x01	; 1
    1c7e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c80:	fd 81       	ldd	r31, Y+5	; 0x05
    1c82:	80 83       	st	Z, r24
    1c84:	13 c0       	rjmp	.+38     	; 0x1cac <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    1c86:	e0 e3       	ldi	r30, 0x30	; 48
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a9 01       	movw	r20, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_enuGetPinValue+0x112>
    1c9a:	55 95       	asr	r21
    1c9c:	47 95       	ror	r20
    1c9e:	8a 95       	dec	r24
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_enuGetPinValue+0x10e>
    1ca2:	ca 01       	movw	r24, r20
    1ca4:	81 70       	andi	r24, 0x01	; 1
    1ca6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ca8:	fd 81       	ldd	r31, Y+5	; 0x05
    1caa:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    1cb0:	59 81       	ldd	r21, Y+1	; 0x01
    1cb2:	58 87       	std	Y+8, r21	; 0x08
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	88 87       	std	Y+8, r24	; 0x08
    1cba:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    1cbc:	28 96       	adiw	r28, 0x08	; 8
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <DIO_enuTogglePinValue+0x6>
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <DIO_enuTogglePinValue+0x8>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <DIO_enuTogglePinValue+0xa>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	8a 83       	std	Y+2, r24	; 0x02
    1cde:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1ce0:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	84 30       	cpi	r24, 0x04	; 4
    1ce6:	08 f0       	brcs	.+2      	; 0x1cea <DIO_enuTogglePinValue+0x1c>
    1ce8:	77 c0       	rjmp	.+238    	; 0x1dd8 <DIO_enuTogglePinValue+0x10a>
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	88 30       	cpi	r24, 0x08	; 8
    1cee:	08 f0       	brcs	.+2      	; 0x1cf2 <DIO_enuTogglePinValue+0x24>
    1cf0:	73 c0       	rjmp	.+230    	; 0x1dd8 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	3e 83       	std	Y+6, r19	; 0x06
    1cfa:	2d 83       	std	Y+5, r18	; 0x05
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	81 30       	cpi	r24, 0x01	; 1
    1d02:	91 05       	cpc	r25, r1
    1d04:	49 f1       	breq	.+82     	; 0x1d58 <DIO_enuTogglePinValue+0x8a>
    1d06:	2d 81       	ldd	r18, Y+5	; 0x05
    1d08:	3e 81       	ldd	r19, Y+6	; 0x06
    1d0a:	22 30       	cpi	r18, 0x02	; 2
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	2c f4       	brge	.+10     	; 0x1d1a <DIO_enuTogglePinValue+0x4c>
    1d10:	8d 81       	ldd	r24, Y+5	; 0x05
    1d12:	9e 81       	ldd	r25, Y+6	; 0x06
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	61 f0       	breq	.+24     	; 0x1d30 <DIO_enuTogglePinValue+0x62>
    1d18:	5a c0       	rjmp	.+180    	; 0x1dce <DIO_enuTogglePinValue+0x100>
    1d1a:	2d 81       	ldd	r18, Y+5	; 0x05
    1d1c:	3e 81       	ldd	r19, Y+6	; 0x06
    1d1e:	22 30       	cpi	r18, 0x02	; 2
    1d20:	31 05       	cpc	r19, r1
    1d22:	71 f1       	breq	.+92     	; 0x1d80 <DIO_enuTogglePinValue+0xb2>
    1d24:	8d 81       	ldd	r24, Y+5	; 0x05
    1d26:	9e 81       	ldd	r25, Y+6	; 0x06
    1d28:	83 30       	cpi	r24, 0x03	; 3
    1d2a:	91 05       	cpc	r25, r1
    1d2c:	e9 f1       	breq	.+122    	; 0x1da8 <DIO_enuTogglePinValue+0xda>
    1d2e:	4f c0       	rjmp	.+158    	; 0x1dce <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    1d30:	ab e3       	ldi	r26, 0x3B	; 59
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	eb e3       	ldi	r30, 0x3B	; 59
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <DIO_enuTogglePinValue+0x80>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <DIO_enuTogglePinValue+0x7c>
    1d52:	84 27       	eor	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	3b c0       	rjmp	.+118    	; 0x1dce <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    1d58:	a8 e3       	ldi	r26, 0x38	; 56
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e8 e3       	ldi	r30, 0x38	; 56
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	48 2f       	mov	r20, r24
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	28 2f       	mov	r18, r24
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	02 2e       	mov	r0, r18
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <DIO_enuTogglePinValue+0xa8>
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	0a 94       	dec	r0
    1d78:	e2 f7       	brpl	.-8      	; 0x1d72 <DIO_enuTogglePinValue+0xa4>
    1d7a:	84 27       	eor	r24, r20
    1d7c:	8c 93       	st	X, r24
    1d7e:	27 c0       	rjmp	.+78     	; 0x1dce <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    1d80:	a5 e3       	ldi	r26, 0x35	; 53
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e5 e3       	ldi	r30, 0x35	; 53
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	48 2f       	mov	r20, r24
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	28 2f       	mov	r18, r24
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	02 2e       	mov	r0, r18
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <DIO_enuTogglePinValue+0xd0>
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	0a 94       	dec	r0
    1da0:	e2 f7       	brpl	.-8      	; 0x1d9a <DIO_enuTogglePinValue+0xcc>
    1da2:	84 27       	eor	r24, r20
    1da4:	8c 93       	st	X, r24
    1da6:	13 c0       	rjmp	.+38     	; 0x1dce <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    1da8:	a2 e3       	ldi	r26, 0x32	; 50
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e2 e3       	ldi	r30, 0x32	; 50
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	48 2f       	mov	r20, r24
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	02 2e       	mov	r0, r18
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <DIO_enuTogglePinValue+0xf8>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	0a 94       	dec	r0
    1dc8:	e2 f7       	brpl	.-8      	; 0x1dc2 <DIO_enuTogglePinValue+0xf4>
    1dca:	84 27       	eor	r24, r20
    1dcc:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1dd2:	99 81       	ldd	r25, Y+1	; 0x01
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    1dd8:	29 81       	ldd	r18, Y+1	; 0x01
    1dda:	2c 83       	std	Y+4, r18	; 0x04
    1ddc:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1dde:	26 96       	adiw	r28, 0x06	; 6
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <DIO_enuSetPortDirection+0x6>
    1df6:	00 d0       	rcall	.+0      	; 0x1df8 <DIO_enuSetPortDirection+0x8>
    1df8:	00 d0       	rcall	.+0      	; 0x1dfa <DIO_enuSetPortDirection+0xa>
    1dfa:	cd b7       	in	r28, 0x3d	; 61
    1dfc:	de b7       	in	r29, 0x3e	; 62
    1dfe:	8a 83       	std	Y+2, r24	; 0x02
    1e00:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1e02:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	84 30       	cpi	r24, 0x04	; 4
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <DIO_enuSetPortDirection+0x1c>
    1e0a:	57 c0       	rjmp	.+174    	; 0x1eba <DIO_enuSetPortDirection+0xca>
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	82 30       	cpi	r24, 0x02	; 2
    1e10:	08 f0       	brcs	.+2      	; 0x1e14 <DIO_enuSetPortDirection+0x24>
    1e12:	53 c0       	rjmp	.+166    	; 0x1eba <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	3e 83       	std	Y+6, r19	; 0x06
    1e1c:	2d 83       	std	Y+5, r18	; 0x05
    1e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e20:	9e 81       	ldd	r25, Y+6	; 0x06
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	91 05       	cpc	r25, r1
    1e26:	09 f1       	breq	.+66     	; 0x1e6a <DIO_enuSetPortDirection+0x7a>
    1e28:	2d 81       	ldd	r18, Y+5	; 0x05
    1e2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e2c:	22 30       	cpi	r18, 0x02	; 2
    1e2e:	31 05       	cpc	r19, r1
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <DIO_enuSetPortDirection+0x4c>
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05
    1e34:	9e 81       	ldd	r25, Y+6	; 0x06
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	61 f0       	breq	.+24     	; 0x1e52 <DIO_enuSetPortDirection+0x62>
    1e3a:	3a c0       	rjmp	.+116    	; 0x1eb0 <DIO_enuSetPortDirection+0xc0>
    1e3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e40:	22 30       	cpi	r18, 0x02	; 2
    1e42:	31 05       	cpc	r19, r1
    1e44:	f1 f0       	breq	.+60     	; 0x1e82 <DIO_enuSetPortDirection+0x92>
    1e46:	8d 81       	ldd	r24, Y+5	; 0x05
    1e48:	9e 81       	ldd	r25, Y+6	; 0x06
    1e4a:	83 30       	cpi	r24, 0x03	; 3
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	29 f1       	breq	.+74     	; 0x1e9a <DIO_enuSetPortDirection+0xaa>
    1e50:	2f c0       	rjmp	.+94     	; 0x1eb0 <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	29 f4       	brne	.+10     	; 0x1e62 <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    1e58:	ea e3       	ldi	r30, 0x3A	; 58
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	8f ef       	ldi	r24, 0xFF	; 255
    1e5e:	80 83       	st	Z, r24
    1e60:	27 c0       	rjmp	.+78     	; 0x1eb0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    1e62:	ea e3       	ldi	r30, 0x3A	; 58
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	10 82       	st	Z, r1
    1e68:	23 c0       	rjmp	.+70     	; 0x1eb0 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	81 30       	cpi	r24, 0x01	; 1
    1e6e:	29 f4       	brne	.+10     	; 0x1e7a <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    1e70:	e7 e3       	ldi	r30, 0x37	; 55
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	80 83       	st	Z, r24
    1e78:	1b c0       	rjmp	.+54     	; 0x1eb0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    1e7a:	e7 e3       	ldi	r30, 0x37	; 55
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	10 82       	st	Z, r1
    1e80:	17 c0       	rjmp	.+46     	; 0x1eb0 <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	29 f4       	brne	.+10     	; 0x1e92 <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    1e88:	e4 e3       	ldi	r30, 0x34	; 52
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	8f ef       	ldi	r24, 0xFF	; 255
    1e8e:	80 83       	st	Z, r24
    1e90:	0f c0       	rjmp	.+30     	; 0x1eb0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    1e92:	e4 e3       	ldi	r30, 0x34	; 52
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	10 82       	st	Z, r1
    1e98:	0b c0       	rjmp	.+22     	; 0x1eb0 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	81 30       	cpi	r24, 0x01	; 1
    1e9e:	29 f4       	brne	.+10     	; 0x1eaa <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    1ea0:	e1 e3       	ldi	r30, 0x31	; 49
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	8f ef       	ldi	r24, 0xFF	; 255
    1ea6:	80 83       	st	Z, r24
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    1eaa:	e1 e3       	ldi	r30, 0x31	; 49
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1eb4:	99 81       	ldd	r25, Y+1	; 0x01
    1eb6:	9c 83       	std	Y+4, r25	; 0x04
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    1eba:	29 81       	ldd	r18, Y+1	; 0x01
    1ebc:	2c 83       	std	Y+4, r18	; 0x04
    1ebe:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1ec0:	26 96       	adiw	r28, 0x06	; 6
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret

00001ed2 <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    1ed2:	df 93       	push	r29
    1ed4:	cf 93       	push	r28
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <DIO_enuSetPortValue+0x6>
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <DIO_enuSetPortValue+0x8>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <DIO_enuSetPortValue+0xa>
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	8a 83       	std	Y+2, r24	; 0x02
    1ee2:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1ee4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	08 f0       	brcs	.+2      	; 0x1eee <DIO_enuSetPortValue+0x1c>
    1eec:	57 c0       	rjmp	.+174    	; 0x1f9c <DIO_enuSetPortValue+0xca>
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	08 f0       	brcs	.+2      	; 0x1ef6 <DIO_enuSetPortValue+0x24>
    1ef4:	53 c0       	rjmp	.+166    	; 0x1f9c <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	3e 83       	std	Y+6, r19	; 0x06
    1efe:	2d 83       	std	Y+5, r18	; 0x05
    1f00:	8d 81       	ldd	r24, Y+5	; 0x05
    1f02:	9e 81       	ldd	r25, Y+6	; 0x06
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	91 05       	cpc	r25, r1
    1f08:	09 f1       	breq	.+66     	; 0x1f4c <DIO_enuSetPortValue+0x7a>
    1f0a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f0c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f0e:	22 30       	cpi	r18, 0x02	; 2
    1f10:	31 05       	cpc	r19, r1
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <DIO_enuSetPortValue+0x4c>
    1f14:	8d 81       	ldd	r24, Y+5	; 0x05
    1f16:	9e 81       	ldd	r25, Y+6	; 0x06
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	61 f0       	breq	.+24     	; 0x1f34 <DIO_enuSetPortValue+0x62>
    1f1c:	3a c0       	rjmp	.+116    	; 0x1f92 <DIO_enuSetPortValue+0xc0>
    1f1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f20:	3e 81       	ldd	r19, Y+6	; 0x06
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	f1 f0       	breq	.+60     	; 0x1f64 <DIO_enuSetPortValue+0x92>
    1f28:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2c:	83 30       	cpi	r24, 0x03	; 3
    1f2e:	91 05       	cpc	r25, r1
    1f30:	29 f1       	breq	.+74     	; 0x1f7c <DIO_enuSetPortValue+0xaa>
    1f32:	2f c0       	rjmp	.+94     	; 0x1f92 <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	88 23       	and	r24, r24
    1f38:	29 f0       	breq	.+10     	; 0x1f44 <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    1f3a:	eb e3       	ldi	r30, 0x3B	; 59
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	80 83       	st	Z, r24
    1f42:	27 c0       	rjmp	.+78     	; 0x1f92 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    1f44:	eb e3       	ldi	r30, 0x3B	; 59
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	10 82       	st	Z, r1
    1f4a:	23 c0       	rjmp	.+70     	; 0x1f92 <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	88 23       	and	r24, r24
    1f50:	29 f0       	breq	.+10     	; 0x1f5c <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    1f52:	e8 e3       	ldi	r30, 0x38	; 56
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
    1f58:	80 83       	st	Z, r24
    1f5a:	1b c0       	rjmp	.+54     	; 0x1f92 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    1f5c:	e8 e3       	ldi	r30, 0x38	; 56
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	10 82       	st	Z, r1
    1f62:	17 c0       	rjmp	.+46     	; 0x1f92 <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	88 23       	and	r24, r24
    1f68:	29 f0       	breq	.+10     	; 0x1f74 <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    1f6a:	e5 e3       	ldi	r30, 0x35	; 53
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	8f ef       	ldi	r24, 0xFF	; 255
    1f70:	80 83       	st	Z, r24
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    1f74:	e5 e3       	ldi	r30, 0x35	; 53
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	10 82       	st	Z, r1
    1f7a:	0b c0       	rjmp	.+22     	; 0x1f92 <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	88 23       	and	r24, r24
    1f80:	29 f0       	breq	.+10     	; 0x1f8c <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    1f82:	e2 e3       	ldi	r30, 0x32	; 50
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	8f ef       	ldi	r24, 0xFF	; 255
    1f88:	80 83       	st	Z, r24
    1f8a:	03 c0       	rjmp	.+6      	; 0x1f92 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    1f8c:	e2 e3       	ldi	r30, 0x32	; 50
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    1f96:	99 81       	ldd	r25, Y+1	; 0x01
    1f98:	9c 83       	std	Y+4, r25	; 0x04
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    1f9c:	29 81       	ldd	r18, Y+1	; 0x01
    1f9e:	2c 83       	std	Y+4, r18	; 0x04
    1fa0:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    1fa2:	26 96       	adiw	r28, 0x06	; 6
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <ADC_enuInit>:


static void (*ADC_CallBackFunction)(void) = NULL;


void ADC_enuInit(){
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
    1fbc:	2e 97       	sbiw	r28, 0x0e	; 14
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	f8 94       	cli
    1fc2:	de bf       	out	0x3e, r29	; 62
    1fc4:	0f be       	out	0x3f, r0	; 63
    1fc6:	cd bf       	out	0x3d, r28	; 61
	 * 5. Enabling ADC
	 * */


	/*************************** Selecting  voltage reference ***************************/
		ADMUX_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    1fc8:	a7 e2       	ldi	r26, 0x27	; 39
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e7 e2       	ldi	r30, 0x27	; 39
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	8f 71       	andi	r24, 0x1F	; 31
    1fd4:	8c 93       	st	X, r24
		ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
    1fd6:	a7 e2       	ldi	r26, 0x27	; 39
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e7 e2       	ldi	r30, 0x27	; 39
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	80 64       	ori	r24, 0x40	; 64
    1fe2:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************** Selecting ADC MODE ********************************/
		#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
			SET_BIT(ADCSRA_REG, ADCSRA_ADATE);
    1fe4:	a6 e2       	ldi	r26, 0x26	; 38
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e6 e2       	ldi	r30, 0x26	; 38
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	80 62       	ori	r24, 0x20	; 32
    1ff0:	8c 93       	st	X, r24

			SFIOR_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    1ff2:	a0 e5       	ldi	r26, 0x50	; 80
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e0 e5       	ldi	r30, 0x50	; 80
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	8f 71       	andi	r24, 0x1F	; 31
    1ffe:	8c 93       	st	X, r24
			SFIOR_REG |= ADC_AUTO_TRIG_SRCE_SELECTOR;
    2000:	a0 e5       	ldi	r26, 0x50	; 80
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e0 e5       	ldi	r30, 0x50	; 80
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* Selecting Adjustment *******************************/
		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			CLR_BIT(ADMUX_REG, ADMUX_ADLAR);
    200c:	a7 e2       	ldi	r26, 0x27	; 39
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e7 e2       	ldi	r30, 0x27	; 39
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8f 7d       	andi	r24, 0xDF	; 223
    2018:	8c 93       	st	X, r24
	/***************************** Clearing  Interrupt Flag *****************************/
		//! Notice: that ADIF to be cleared we write logical one (from data sheet)
		//So in initialization of ADC we write 1 to ADIF bit to make sure that the
		//flag is cleared in order to make sure that ADC ready for upcoming conversation
		// clearing interrupt flag
		SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    201a:	a6 e2       	ldi	r26, 0x26	; 38
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e6 e2       	ldi	r30, 0x26	; 38
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	80 61       	ori	r24, 0x10	; 16
    2026:	8c 93       	st	X, r24
	/************************************************************************************/


	/*********************************** Enabling ADC ***********************************/
		SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    2028:	a6 e2       	ldi	r26, 0x26	; 38
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e6 e2       	ldi	r30, 0x26	; 38
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	80 68       	ori	r24, 0x80	; 128
    2034:	8c 93       	st	X, r24
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a8 e4       	ldi	r26, 0x48	; 72
    203c:	b3 e4       	ldi	r27, 0x43	; 67
    203e:	8b 87       	std	Y+11, r24	; 0x0b
    2040:	9c 87       	std	Y+12, r25	; 0x0c
    2042:	ad 87       	std	Y+13, r26	; 0x0d
    2044:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2046:	6b 85       	ldd	r22, Y+11	; 0x0b
    2048:	7c 85       	ldd	r23, Y+12	; 0x0c
    204a:	8d 85       	ldd	r24, Y+13	; 0x0d
    204c:	9e 85       	ldd	r25, Y+14	; 0x0e
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	4a e7       	ldi	r20, 0x7A	; 122
    2054:	55 e4       	ldi	r21, 0x45	; 69
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8f 83       	std	Y+7, r24	; 0x07
    2060:	98 87       	std	Y+8, r25	; 0x08
    2062:	a9 87       	std	Y+9, r26	; 0x09
    2064:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2066:	6f 81       	ldd	r22, Y+7	; 0x07
    2068:	78 85       	ldd	r23, Y+8	; 0x08
    206a:	89 85       	ldd	r24, Y+9	; 0x09
    206c:	9a 85       	ldd	r25, Y+10	; 0x0a
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e8       	ldi	r20, 0x80	; 128
    2074:	5f e3       	ldi	r21, 0x3F	; 63
    2076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207a:	88 23       	and	r24, r24
    207c:	2c f4       	brge	.+10     	; 0x2088 <ADC_enuInit+0xd4>
		__ticks = 1;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	3f c0       	rjmp	.+126    	; 0x2106 <ADC_enuInit+0x152>
	else if (__tmp > 65535)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	3f ef       	ldi	r19, 0xFF	; 255
    2094:	4f e7       	ldi	r20, 0x7F	; 127
    2096:	57 e4       	ldi	r21, 0x47	; 71
    2098:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209c:	18 16       	cp	r1, r24
    209e:	4c f5       	brge	.+82     	; 0x20f2 <ADC_enuInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e2       	ldi	r20, 0x20	; 32
    20ae:	51 e4       	ldi	r21, 0x41	; 65
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	0f c0       	rjmp	.+30     	; 0x20e8 <ADC_enuInit+0x134>
    20ca:	80 e9       	ldi	r24, 0x90	; 144
    20cc:	91 e0       	ldi	r25, 0x01	; 1
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <ADC_enuInit+0x122>
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	69 f7       	brne	.-38     	; 0x20ca <ADC_enuInit+0x116>
    20f0:	14 c0       	rjmp	.+40     	; 0x211a <ADC_enuInit+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f2:	6f 81       	ldd	r22, Y+7	; 0x07
    20f4:	78 85       	ldd	r23, Y+8	; 0x08
    20f6:	89 85       	ldd	r24, Y+9	; 0x09
    20f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <ADC_enuInit+0x15e>
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01


	// Waiting until ADC is stablized
	_delay_ms(200);

}
    211a:	2e 96       	adiw	r28, 0x0e	; 14
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	08 95       	ret

0000212c <ADC_enuStartConversion>:




ErrorStatus_t ADC_enuStartConversion(ADC_Channel_types ADC_channel_N){
    212c:	df 93       	push	r29
    212e:	cf 93       	push	r28
    2130:	00 d0       	rcall	.+0      	; 0x2132 <ADC_enuStartConversion+0x6>
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2138:	19 82       	std	Y+1, r1	; 0x01


	/******************************** Select ADC Channel ********************************/
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_clr_msk;
    213a:	a7 e2       	ldi	r26, 0x27	; 39
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e7 e2       	ldi	r30, 0x27	; 39
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	80 7e       	andi	r24, 0xE0	; 224
    2146:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_channel_N;
    2148:	a7 e2       	ldi	r26, 0x27	; 39
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	e7 e2       	ldi	r30, 0x27	; 39
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	90 81       	ld	r25, Z
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	89 2b       	or	r24, r25
    2156:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* ADC Start Conversion *******************************/
	//!!!!!!!!!!!!!!
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    2158:	a6 e2       	ldi	r26, 0x26	; 38
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e6 e2       	ldi	r30, 0x26	; 38
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	80 64       	ori	r24, 0x40	; 64
    2164:	8c 93       	st	X, r24
	/************************************************************************************/

	return Local_enuErrrorState;
    2166:	89 81       	ldd	r24, Y+1	; 0x01
}
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <ADC_GetResult>:



uint16 ADC_GetResult(){
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
			Copy_u16ReadValue |= ((uint16)ADCH_REG<<2);
			return Copy_u16ReadValue;
		#endif

		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			return ADCLH_REG;
    217a:	e4 e2       	ldi	r30, 0x24	; 36
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	91 81       	ldd	r25, Z+1	; 0x01





}
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <ADC_enuSetCallBack>:




ErrorStatus_t ADC_enuSetCallBack(void(*Copy_pfunAppFun)(void)){
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	00 d0       	rcall	.+0      	; 0x218e <ADC_enuSetCallBack+0x6>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <ADC_enuSetCallBack+0x8>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	9b 83       	std	Y+3, r25	; 0x03
    2196:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2198:	19 82       	std	Y+1, r1	; 0x01

//	if(Copy_pfunAppFun == NULL ||  Copy_u8IntNumber> IN)

	if(Copy_pfunAppFun == NULL){
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	9b 81       	ldd	r25, Y+3	; 0x03
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	19 f4       	brne	.+6      	; 0x21a8 <ADC_enuSetCallBack+0x20>

		return Local_enuErrrorState;
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	8c 83       	std	Y+4, r24	; 0x04
    21a6:	0a c0       	rjmp	.+20     	; 0x21bc <ADC_enuSetCallBack+0x34>
	}

	else{
		Local_enuErrrorState = ERROR_STATUS_OK;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	89 83       	std	Y+1, r24	; 0x01

		ADC_CallBackFunction = Copy_pfunAppFun;
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	9b 81       	ldd	r25, Y+3	; 0x03
    21b0:	90 93 8f 00 	sts	0x008F, r25
    21b4:	80 93 8e 00 	sts	0x008E, r24

	}



	return Local_enuErrrorState;
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	8c 83       	std	Y+4, r24	; 0x04
    21bc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <__vector_16>:

ISR(__vector_16){
    21cc:	1f 92       	push	r1
    21ce:	0f 92       	push	r0
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	0f 92       	push	r0
    21d4:	11 24       	eor	r1, r1
    21d6:	2f 93       	push	r18
    21d8:	3f 93       	push	r19
    21da:	4f 93       	push	r20
    21dc:	5f 93       	push	r21
    21de:	6f 93       	push	r22
    21e0:	7f 93       	push	r23
    21e2:	8f 93       	push	r24
    21e4:	9f 93       	push	r25
    21e6:	af 93       	push	r26
    21e8:	bf 93       	push	r27
    21ea:	ef 93       	push	r30
    21ec:	ff 93       	push	r31
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CallBackFunction != NULL){
    21f6:	80 91 8e 00 	lds	r24, 0x008E
    21fa:	90 91 8f 00 	lds	r25, 0x008F
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	29 f0       	breq	.+10     	; 0x220c <__vector_16+0x40>
		ADC_CallBackFunction();
    2202:	e0 91 8e 00 	lds	r30, 0x008E
    2206:	f0 91 8f 00 	lds	r31, 0x008F
    220a:	09 95       	icall
	}

}
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	ff 91       	pop	r31
    2212:	ef 91       	pop	r30
    2214:	bf 91       	pop	r27
    2216:	af 91       	pop	r26
    2218:	9f 91       	pop	r25
    221a:	8f 91       	pop	r24
    221c:	7f 91       	pop	r23
    221e:	6f 91       	pop	r22
    2220:	5f 91       	pop	r21
    2222:	4f 91       	pop	r20
    2224:	3f 91       	pop	r19
    2226:	2f 91       	pop	r18
    2228:	0f 90       	pop	r0
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	0f 90       	pop	r0
    222e:	1f 90       	pop	r1
    2230:	18 95       	reti

00002232 <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    223c:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	64 e0       	ldi	r22, 0x04	; 4
    2242:	41 e0       	ldi	r20, 0x01	; 1
    2244:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	65 e0       	ldi	r22, 0x05	; 5
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	66 e0       	ldi	r22, 0x06	; 6
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	67 e0       	ldi	r22, 0x07	; 7
    2260:	41 e0       	ldi	r20, 0x01	; 1
    2262:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	64 e0       	ldi	r22, 0x04	; 4
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	65 e0       	ldi	r22, 0x05	; 5
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    227a:	81 e0       	ldi	r24, 0x01	; 1
    227c:	66 e0       	ldi	r22, 0x06	; 6
    227e:	41 e0       	ldi	r20, 0x01	; 1
    2280:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	67 e0       	ldi	r22, 0x07	; 7
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    2298:	83 e0       	ldi	r24, 0x03	; 3
    229a:	61 e0       	ldi	r22, 0x01	; 1
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    22a2:	83 e0       	ldi	r24, 0x03	; 3
    22a4:	64 e0       	ldi	r22, 0x04	; 4
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    22ac:	83 e0       	ldi	r24, 0x03	; 3
    22ae:	65 e0       	ldi	r22, 0x05	; 5
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    22b6:	83 e0       	ldi	r24, 0x03	; 3
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	41 e0       	ldi	r20, 0x01	; 1
    22bc:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    22c0:	83 e0       	ldi	r24, 0x03	; 3
    22c2:	61 e0       	ldi	r22, 0x01	; 1
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    22ca:	83 e0       	ldi	r24, 0x03	; 3
    22cc:	64 e0       	ldi	r22, 0x04	; 4
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    22d4:	83 e0       	ldi	r24, 0x03	; 3
    22d6:	65 e0       	ldi	r22, 0x05	; 5
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e4:	0f 90       	pop	r0
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	2a 97       	sbiw	r28, 0x0a	; 10
    22f6:	0f b6       	in	r0, 0x3f	; 63
    22f8:	f8 94       	cli
    22fa:	de bf       	out	0x3e, r29	; 62
    22fc:	0f be       	out	0x3f, r0	; 63
    22fe:	cd bf       	out	0x3d, r28	; 61
    2300:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    2302:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	8a 83       	std	Y+2, r24	; 0x02
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	8b 83       	std	Y+3, r24	; 0x03
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	8c 83       	std	Y+4, r24	; 0x04
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    2314:	84 e0       	ldi	r24, 0x04	; 4
    2316:	8e 83       	std	Y+6, r24	; 0x06
    2318:	85 e0       	ldi	r24, 0x05	; 5
    231a:	8f 83       	std	Y+7, r24	; 0x07
    231c:	86 e0       	ldi	r24, 0x06	; 6
    231e:	88 87       	std	Y+8, r24	; 0x08
    2320:	87 e0       	ldi	r24, 0x07	; 7
    2322:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    2324:	19 82       	std	Y+1, r1	; 0x01
    2326:	36 c0       	rjmp	.+108    	; 0x2394 <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    2328:	99 81       	ldd	r25, Y+1	; 0x01
    232a:	8a 85       	ldd	r24, Y+10	; 0x0a
    232c:	98 17       	cp	r25, r24
    232e:	c1 f4       	brne	.+48     	; 0x2360 <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    2330:	89 81       	ldd	r24, Y+1	; 0x01
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	ce 01       	movw	r24, r28
    2338:	02 96       	adiw	r24, 0x02	; 2
    233a:	fc 01       	movw	r30, r24
    233c:	e2 0f       	add	r30, r18
    233e:	f3 1f       	adc	r31, r19
    2340:	40 81       	ld	r20, Z
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	ce 01       	movw	r24, r28
    234a:	06 96       	adiw	r24, 0x06	; 6
    234c:	fc 01       	movw	r30, r24
    234e:	e2 0f       	add	r30, r18
    2350:	f3 1f       	adc	r31, r19
    2352:	90 81       	ld	r25, Z
    2354:	84 2f       	mov	r24, r20
    2356:	69 2f       	mov	r22, r25
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
    235e:	17 c0       	rjmp	.+46     	; 0x238e <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	ce 01       	movw	r24, r28
    2368:	02 96       	adiw	r24, 0x02	; 2
    236a:	fc 01       	movw	r30, r24
    236c:	e2 0f       	add	r30, r18
    236e:	f3 1f       	adc	r31, r19
    2370:	40 81       	ld	r20, Z
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	ce 01       	movw	r24, r28
    237a:	06 96       	adiw	r24, 0x06	; 6
    237c:	fc 01       	movw	r30, r24
    237e:	e2 0f       	add	r30, r18
    2380:	f3 1f       	adc	r31, r19
    2382:	90 81       	ld	r25, Z
    2384:	84 2f       	mov	r24, r20
    2386:	69 2f       	mov	r22, r25
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	8f 5f       	subi	r24, 0xFF	; 255
    2392:	89 83       	std	Y+1, r24	; 0x01
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	84 30       	cpi	r24, 0x04	; 4
    2398:	38 f2       	brcs	.-114    	; 0x2328 <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    239a:	2a 96       	adiw	r28, 0x0a	; 10
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	2f 97       	sbiw	r28, 0x0f	; 15
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	9e 87       	std	Y+14, r25	; 0x0e
    23c2:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    23c4:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    23c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	19 f4       	brne	.+6      	; 0x23d4 <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	8f 87       	std	Y+15, r24	; 0x0f
    23d2:	7e c0       	rjmp	.+252    	; 0x24d0 <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    23d8:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    23da:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	8d 83       	std	Y+5, r24	; 0x05
    23e0:	83 e0       	ldi	r24, 0x03	; 3
    23e2:	8e 83       	std	Y+6, r24	; 0x06
    23e4:	83 e0       	ldi	r24, 0x03	; 3
    23e6:	8f 83       	std	Y+7, r24	; 0x07
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    23ec:	19 86       	std	Y+9, r1	; 0x09
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	8a 87       	std	Y+10, r24	; 0x0a
    23f2:	84 e0       	ldi	r24, 0x04	; 4
    23f4:	8b 87       	std	Y+11, r24	; 0x0b
    23f6:	85 e0       	ldi	r24, 0x05	; 5
    23f8:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    23fa:	1a 82       	std	Y+2, r1	; 0x02
    23fc:	63 c0       	rjmp	.+198    	; 0x24c4 <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	0e 94 76 11 	call	0x22ec	; 0x22ec <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    2404:	19 82       	std	Y+1, r1	; 0x01
    2406:	57 c0       	rjmp	.+174    	; 0x24b6 <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    2408:	89 81       	ldd	r24, Y+1	; 0x01
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	ce 01       	movw	r24, r28
    2410:	05 96       	adiw	r24, 0x05	; 5
    2412:	fc 01       	movw	r30, r24
    2414:	e2 0f       	add	r30, r18
    2416:	f3 1f       	adc	r31, r19
    2418:	40 81       	ld	r20, Z
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	ce 01       	movw	r24, r28
    2422:	09 96       	adiw	r24, 0x09	; 9
    2424:	fc 01       	movw	r30, r24
    2426:	e2 0f       	add	r30, r18
    2428:	f3 1f       	adc	r31, r19
    242a:	90 81       	ld	r25, Z
    242c:	9e 01       	movw	r18, r28
    242e:	2c 5f       	subi	r18, 0xFC	; 252
    2430:	3f 4f       	sbci	r19, 0xFF	; 255
    2432:	84 2f       	mov	r24, r20
    2434:	69 2f       	mov	r22, r25
    2436:	a9 01       	movw	r20, r18
    2438:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    243c:	8c 81       	ldd	r24, Y+4	; 0x04
    243e:	88 23       	and	r24, r24
    2440:	b9 f5       	brne	.+110    	; 0x24b0 <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	88 2f       	mov	r24, r24
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9c 01       	movw	r18, r24
    244a:	22 0f       	add	r18, r18
    244c:	33 1f       	adc	r19, r19
    244e:	22 0f       	add	r18, r18
    2450:	33 1f       	adc	r19, r19
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	82 0f       	add	r24, r18
    245a:	93 1f       	adc	r25, r19
    245c:	fc 01       	movw	r30, r24
    245e:	e8 58       	subi	r30, 0x88	; 136
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	ed 85       	ldd	r30, Y+13	; 0x0d
    2466:	fe 85       	ldd	r31, Y+14	; 0x0e
    2468:	80 83       	st	Z, r24
    246a:	1a c0       	rjmp	.+52     	; 0x24a0 <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	ce 01       	movw	r24, r28
    2474:	05 96       	adiw	r24, 0x05	; 5
    2476:	fc 01       	movw	r30, r24
    2478:	e2 0f       	add	r30, r18
    247a:	f3 1f       	adc	r31, r19
    247c:	40 81       	ld	r20, Z
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	ce 01       	movw	r24, r28
    2486:	09 96       	adiw	r24, 0x09	; 9
    2488:	fc 01       	movw	r30, r24
    248a:	e2 0f       	add	r30, r18
    248c:	f3 1f       	adc	r31, r19
    248e:	90 81       	ld	r25, Z
    2490:	9e 01       	movw	r18, r28
    2492:	2c 5f       	subi	r18, 0xFC	; 252
    2494:	3f 4f       	sbci	r19, 0xFF	; 255
    2496:	84 2f       	mov	r24, r20
    2498:	69 2f       	mov	r22, r25
    249a:	a9 01       	movw	r20, r18
    249c:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    24a0:	8c 81       	ldd	r24, Y+4	; 0x04
    24a2:	88 23       	and	r24, r24
    24a4:	19 f3       	breq	.-58     	; 0x246c <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	8f 87       	std	Y+15, r24	; 0x0f
    24ae:	10 c0       	rjmp	.+32     	; 0x24d0 <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	8f 5f       	subi	r24, 0xFF	; 255
    24b4:	89 83       	std	Y+1, r24	; 0x01
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
    24b8:	84 30       	cpi	r24, 0x04	; 4
    24ba:	08 f4       	brcc	.+2      	; 0x24be <keypad_enuGetPressedKey+0x112>
    24bc:	a5 cf       	rjmp	.-182    	; 0x2408 <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    24be:	8a 81       	ldd	r24, Y+2	; 0x02
    24c0:	8f 5f       	subi	r24, 0xFF	; 255
    24c2:	8a 83       	std	Y+2, r24	; 0x02
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	84 30       	cpi	r24, 0x04	; 4
    24c8:	08 f4       	brcc	.+2      	; 0x24cc <keypad_enuGetPressedKey+0x120>
    24ca:	99 cf       	rjmp	.-206    	; 0x23fe <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    24cc:	8b 81       	ldd	r24, Y+3	; 0x03
    24ce:	8f 87       	std	Y+15, r24	; 0x0f
    24d0:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    24d2:	2f 96       	adiw	r28, 0x0f	; 15
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	e9 97       	sbiw	r28, 0x39	; 57
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    24f8:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	62 e0       	ldi	r22, 0x02	; 2
    24fe:	41 e0       	ldi	r20, 0x01	; 1
    2500:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	41 e0       	ldi	r20, 0x01	; 1
    250a:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	41 e0       	ldi	r20, 0x01	; 1
    2514:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	66 e0       	ldi	r22, 0x06	; 6
    251c:	41 e0       	ldi	r20, 0x01	; 1
    251e:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	65 e0       	ldi	r22, 0x05	; 5
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	64 e0       	ldi	r22, 0x04	; 4
    2530:	41 e0       	ldi	r20, 0x01	; 1
    2532:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	63 e0       	ldi	r22, 0x03	; 3
    253a:	41 e0       	ldi	r20, 0x01	; 1
    253c:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	ac e0       	ldi	r26, 0x0C	; 12
    2546:	b2 e4       	ldi	r27, 0x42	; 66
    2548:	8d ab       	std	Y+53, r24	; 0x35
    254a:	9e ab       	std	Y+54, r25	; 0x36
    254c:	af ab       	std	Y+55, r26	; 0x37
    254e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2550:	6d a9       	ldd	r22, Y+53	; 0x35
    2552:	7e a9       	ldd	r23, Y+54	; 0x36
    2554:	8f a9       	ldd	r24, Y+55	; 0x37
    2556:	98 ad       	ldd	r25, Y+56	; 0x38
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	4a e7       	ldi	r20, 0x7A	; 122
    255e:	55 e4       	ldi	r21, 0x45	; 69
    2560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	89 ab       	std	Y+49, r24	; 0x31
    256a:	9a ab       	std	Y+50, r25	; 0x32
    256c:	ab ab       	std	Y+51, r26	; 0x33
    256e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2570:	69 a9       	ldd	r22, Y+49	; 0x31
    2572:	7a a9       	ldd	r23, Y+50	; 0x32
    2574:	8b a9       	ldd	r24, Y+51	; 0x33
    2576:	9c a9       	ldd	r25, Y+52	; 0x34
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e8       	ldi	r20, 0x80	; 128
    257e:	5f e3       	ldi	r21, 0x3F	; 63
    2580:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2584:	88 23       	and	r24, r24
    2586:	2c f4       	brge	.+10     	; 0x2592 <LCD_enuInit+0xae>
		__ticks = 1;
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	98 ab       	std	Y+48, r25	; 0x30
    258e:	8f a7       	std	Y+47, r24	; 0x2f
    2590:	3f c0       	rjmp	.+126    	; 0x2610 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    2592:	69 a9       	ldd	r22, Y+49	; 0x31
    2594:	7a a9       	ldd	r23, Y+50	; 0x32
    2596:	8b a9       	ldd	r24, Y+51	; 0x33
    2598:	9c a9       	ldd	r25, Y+52	; 0x34
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	3f ef       	ldi	r19, 0xFF	; 255
    259e:	4f e7       	ldi	r20, 0x7F	; 127
    25a0:	57 e4       	ldi	r21, 0x47	; 71
    25a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a6:	18 16       	cp	r1, r24
    25a8:	4c f5       	brge	.+82     	; 0x25fc <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25aa:	6d a9       	ldd	r22, Y+53	; 0x35
    25ac:	7e a9       	ldd	r23, Y+54	; 0x36
    25ae:	8f a9       	ldd	r24, Y+55	; 0x37
    25b0:	98 ad       	ldd	r25, Y+56	; 0x38
    25b2:	20 e0       	ldi	r18, 0x00	; 0
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	51 e4       	ldi	r21, 0x41	; 65
    25ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	bc 01       	movw	r22, r24
    25c4:	cd 01       	movw	r24, r26
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	98 ab       	std	Y+48, r25	; 0x30
    25d0:	8f a7       	std	Y+47, r24	; 0x2f
    25d2:	0f c0       	rjmp	.+30     	; 0x25f2 <LCD_enuInit+0x10e>
    25d4:	80 e9       	ldi	r24, 0x90	; 144
    25d6:	91 e0       	ldi	r25, 0x01	; 1
    25d8:	9e a7       	std	Y+46, r25	; 0x2e
    25da:	8d a7       	std	Y+45, r24	; 0x2d
    25dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    25de:	9e a5       	ldd	r25, Y+46	; 0x2e
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <LCD_enuInit+0xfc>
    25e4:	9e a7       	std	Y+46, r25	; 0x2e
    25e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    25ea:	98 a9       	ldd	r25, Y+48	; 0x30
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	98 ab       	std	Y+48, r25	; 0x30
    25f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25f4:	98 a9       	ldd	r25, Y+48	; 0x30
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	69 f7       	brne	.-38     	; 0x25d4 <LCD_enuInit+0xf0>
    25fa:	14 c0       	rjmp	.+40     	; 0x2624 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fc:	69 a9       	ldd	r22, Y+49	; 0x31
    25fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2600:	8b a9       	ldd	r24, Y+51	; 0x33
    2602:	9c a9       	ldd	r25, Y+52	; 0x34
    2604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	98 ab       	std	Y+48, r25	; 0x30
    260e:	8f a7       	std	Y+47, r24	; 0x2f
    2610:	8f a5       	ldd	r24, Y+47	; 0x2f
    2612:	98 a9       	ldd	r25, Y+48	; 0x30
    2614:	9c a7       	std	Y+44, r25	; 0x2c
    2616:	8b a7       	std	Y+43, r24	; 0x2b
    2618:	8b a5       	ldd	r24, Y+43	; 0x2b
    261a:	9c a5       	ldd	r25, Y+44	; 0x2c
    261c:	01 97       	sbiw	r24, 0x01	; 1
    261e:	f1 f7       	brne	.-4      	; 0x261c <LCD_enuInit+0x138>
    2620:	9c a7       	std	Y+44, r25	; 0x2c
    2622:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    2624:	80 e2       	ldi	r24, 0x20	; 32
    2626:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    262a:	80 e2       	ldi	r24, 0x20	; 32
    262c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    2630:	80 e8       	ldi	r24, 0x80	; 128
    2632:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	a0 e8       	ldi	r26, 0x80	; 128
    263c:	bf e3       	ldi	r27, 0x3F	; 63
    263e:	8f a3       	std	Y+39, r24	; 0x27
    2640:	98 a7       	std	Y+40, r25	; 0x28
    2642:	a9 a7       	std	Y+41, r26	; 0x29
    2644:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2646:	6f a1       	ldd	r22, Y+39	; 0x27
    2648:	78 a5       	ldd	r23, Y+40	; 0x28
    264a:	89 a5       	ldd	r24, Y+41	; 0x29
    264c:	9a a5       	ldd	r25, Y+42	; 0x2a
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	4a e7       	ldi	r20, 0x7A	; 122
    2654:	55 e4       	ldi	r21, 0x45	; 69
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	8b a3       	std	Y+35, r24	; 0x23
    2660:	9c a3       	std	Y+36, r25	; 0x24
    2662:	ad a3       	std	Y+37, r26	; 0x25
    2664:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2666:	6b a1       	ldd	r22, Y+35	; 0x23
    2668:	7c a1       	ldd	r23, Y+36	; 0x24
    266a:	8d a1       	ldd	r24, Y+37	; 0x25
    266c:	9e a1       	ldd	r25, Y+38	; 0x26
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	40 e8       	ldi	r20, 0x80	; 128
    2674:	5f e3       	ldi	r21, 0x3F	; 63
    2676:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    267a:	88 23       	and	r24, r24
    267c:	2c f4       	brge	.+10     	; 0x2688 <LCD_enuInit+0x1a4>
		__ticks = 1;
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9a a3       	std	Y+34, r25	; 0x22
    2684:	89 a3       	std	Y+33, r24	; 0x21
    2686:	3f c0       	rjmp	.+126    	; 0x2706 <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    2688:	6b a1       	ldd	r22, Y+35	; 0x23
    268a:	7c a1       	ldd	r23, Y+36	; 0x24
    268c:	8d a1       	ldd	r24, Y+37	; 0x25
    268e:	9e a1       	ldd	r25, Y+38	; 0x26
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	3f ef       	ldi	r19, 0xFF	; 255
    2694:	4f e7       	ldi	r20, 0x7F	; 127
    2696:	57 e4       	ldi	r21, 0x47	; 71
    2698:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    269c:	18 16       	cp	r1, r24
    269e:	4c f5       	brge	.+82     	; 0x26f2 <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a0:	6f a1       	ldd	r22, Y+39	; 0x27
    26a2:	78 a5       	ldd	r23, Y+40	; 0x28
    26a4:	89 a5       	ldd	r24, Y+41	; 0x29
    26a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e2       	ldi	r20, 0x20	; 32
    26ae:	51 e4       	ldi	r21, 0x41	; 65
    26b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	bc 01       	movw	r22, r24
    26ba:	cd 01       	movw	r24, r26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9a a3       	std	Y+34, r25	; 0x22
    26c6:	89 a3       	std	Y+33, r24	; 0x21
    26c8:	0f c0       	rjmp	.+30     	; 0x26e8 <LCD_enuInit+0x204>
    26ca:	80 e9       	ldi	r24, 0x90	; 144
    26cc:	91 e0       	ldi	r25, 0x01	; 1
    26ce:	98 a3       	std	Y+32, r25	; 0x20
    26d0:	8f 8f       	std	Y+31, r24	; 0x1f
    26d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26d4:	98 a1       	ldd	r25, Y+32	; 0x20
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <LCD_enuInit+0x1f2>
    26da:	98 a3       	std	Y+32, r25	; 0x20
    26dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26de:	89 a1       	ldd	r24, Y+33	; 0x21
    26e0:	9a a1       	ldd	r25, Y+34	; 0x22
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	9a a3       	std	Y+34, r25	; 0x22
    26e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ea:	9a a1       	ldd	r25, Y+34	; 0x22
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	69 f7       	brne	.-38     	; 0x26ca <LCD_enuInit+0x1e6>
    26f0:	14 c0       	rjmp	.+40     	; 0x271a <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f2:	6b a1       	ldd	r22, Y+35	; 0x23
    26f4:	7c a1       	ldd	r23, Y+36	; 0x24
    26f6:	8d a1       	ldd	r24, Y+37	; 0x25
    26f8:	9e a1       	ldd	r25, Y+38	; 0x26
    26fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fe:	dc 01       	movw	r26, r24
    2700:	cb 01       	movw	r24, r22
    2702:	9a a3       	std	Y+34, r25	; 0x22
    2704:	89 a3       	std	Y+33, r24	; 0x21
    2706:	89 a1       	ldd	r24, Y+33	; 0x21
    2708:	9a a1       	ldd	r25, Y+34	; 0x22
    270a:	9e 8f       	std	Y+30, r25	; 0x1e
    270c:	8d 8f       	std	Y+29, r24	; 0x1d
    270e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2710:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	f1 f7       	brne	.-4      	; 0x2712 <LCD_enuInit+0x22e>
    2716:	9e 8f       	std	Y+30, r25	; 0x1e
    2718:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    2720:	80 ef       	ldi	r24, 0xF0	; 240
    2722:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	a0 e8       	ldi	r26, 0x80	; 128
    272c:	bf e3       	ldi	r27, 0x3F	; 63
    272e:	89 8f       	std	Y+25, r24	; 0x19
    2730:	9a 8f       	std	Y+26, r25	; 0x1a
    2732:	ab 8f       	std	Y+27, r26	; 0x1b
    2734:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	69 8d       	ldd	r22, Y+25	; 0x19
    2738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    273a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a e7       	ldi	r20, 0x7A	; 122
    2744:	55 e4       	ldi	r21, 0x45	; 69
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8d 8b       	std	Y+21, r24	; 0x15
    2750:	9e 8b       	std	Y+22, r25	; 0x16
    2752:	af 8b       	std	Y+23, r26	; 0x17
    2754:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2756:	6d 89       	ldd	r22, Y+21	; 0x15
    2758:	7e 89       	ldd	r23, Y+22	; 0x16
    275a:	8f 89       	ldd	r24, Y+23	; 0x17
    275c:	98 8d       	ldd	r25, Y+24	; 0x18
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276a:	88 23       	and	r24, r24
    276c:	2c f4       	brge	.+10     	; 0x2778 <LCD_enuInit+0x294>
		__ticks = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9c 8b       	std	Y+20, r25	; 0x14
    2774:	8b 8b       	std	Y+19, r24	; 0x13
    2776:	3f c0       	rjmp	.+126    	; 0x27f6 <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    2778:	6d 89       	ldd	r22, Y+21	; 0x15
    277a:	7e 89       	ldd	r23, Y+22	; 0x16
    277c:	8f 89       	ldd	r24, Y+23	; 0x17
    277e:	98 8d       	ldd	r25, Y+24	; 0x18
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	4f e7       	ldi	r20, 0x7F	; 127
    2786:	57 e4       	ldi	r21, 0x47	; 71
    2788:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278c:	18 16       	cp	r1, r24
    278e:	4c f5       	brge	.+82     	; 0x27e2 <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	69 8d       	ldd	r22, Y+25	; 0x19
    2792:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2794:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2796:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9c 8b       	std	Y+20, r25	; 0x14
    27b6:	8b 8b       	std	Y+19, r24	; 0x13
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <LCD_enuInit+0x2f4>
    27ba:	80 e9       	ldi	r24, 0x90	; 144
    27bc:	91 e0       	ldi	r25, 0x01	; 1
    27be:	9a 8b       	std	Y+18, r25	; 0x12
    27c0:	89 8b       	std	Y+17, r24	; 0x11
    27c2:	89 89       	ldd	r24, Y+17	; 0x11
    27c4:	9a 89       	ldd	r25, Y+18	; 0x12
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <LCD_enuInit+0x2e2>
    27ca:	9a 8b       	std	Y+18, r25	; 0x12
    27cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	8b 89       	ldd	r24, Y+19	; 0x13
    27d0:	9c 89       	ldd	r25, Y+20	; 0x14
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	8b 89       	ldd	r24, Y+19	; 0x13
    27da:	9c 89       	ldd	r25, Y+20	; 0x14
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <LCD_enuInit+0x2d6>
    27e0:	14 c0       	rjmp	.+40     	; 0x280a <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	6d 89       	ldd	r22, Y+21	; 0x15
    27e4:	7e 89       	ldd	r23, Y+22	; 0x16
    27e6:	8f 89       	ldd	r24, Y+23	; 0x17
    27e8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9c 8b       	std	Y+20, r25	; 0x14
    27f4:	8b 8b       	std	Y+19, r24	; 0x13
    27f6:	8b 89       	ldd	r24, Y+19	; 0x13
    27f8:	9c 89       	ldd	r25, Y+20	; 0x14
    27fa:	98 8b       	std	Y+16, r25	; 0x10
    27fc:	8f 87       	std	Y+15, r24	; 0x0f
    27fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2800:	98 89       	ldd	r25, Y+16	; 0x10
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <LCD_enuInit+0x31e>
    2806:	98 8b       	std	Y+16, r25	; 0x10
    2808:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	a0 e0       	ldi	r26, 0x00	; 0
    281c:	b0 e4       	ldi	r27, 0x40	; 64
    281e:	8b 87       	std	Y+11, r24	; 0x0b
    2820:	9c 87       	std	Y+12, r25	; 0x0c
    2822:	ad 87       	std	Y+13, r26	; 0x0d
    2824:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2826:	6b 85       	ldd	r22, Y+11	; 0x0b
    2828:	7c 85       	ldd	r23, Y+12	; 0x0c
    282a:	8d 85       	ldd	r24, Y+13	; 0x0d
    282c:	9e 85       	ldd	r25, Y+14	; 0x0e
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	4a e7       	ldi	r20, 0x7A	; 122
    2834:	55 e4       	ldi	r21, 0x45	; 69
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	8f 83       	std	Y+7, r24	; 0x07
    2840:	98 87       	std	Y+8, r25	; 0x08
    2842:	a9 87       	std	Y+9, r26	; 0x09
    2844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2846:	6f 81       	ldd	r22, Y+7	; 0x07
    2848:	78 85       	ldd	r23, Y+8	; 0x08
    284a:	89 85       	ldd	r24, Y+9	; 0x09
    284c:	9a 85       	ldd	r25, Y+10	; 0x0a
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e8       	ldi	r20, 0x80	; 128
    2854:	5f e3       	ldi	r21, 0x3F	; 63
    2856:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    285a:	88 23       	and	r24, r24
    285c:	2c f4       	brge	.+10     	; 0x2868 <LCD_enuInit+0x384>
		__ticks = 1;
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9e 83       	std	Y+6, r25	; 0x06
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	3f c0       	rjmp	.+126    	; 0x28e6 <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    2868:	6f 81       	ldd	r22, Y+7	; 0x07
    286a:	78 85       	ldd	r23, Y+8	; 0x08
    286c:	89 85       	ldd	r24, Y+9	; 0x09
    286e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	3f ef       	ldi	r19, 0xFF	; 255
    2874:	4f e7       	ldi	r20, 0x7F	; 127
    2876:	57 e4       	ldi	r21, 0x47	; 71
    2878:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287c:	18 16       	cp	r1, r24
    287e:	4c f5       	brge	.+82     	; 0x28d2 <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2880:	6b 85       	ldd	r22, Y+11	; 0x0b
    2882:	7c 85       	ldd	r23, Y+12	; 0x0c
    2884:	8d 85       	ldd	r24, Y+13	; 0x0d
    2886:	9e 85       	ldd	r25, Y+14	; 0x0e
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	40 e2       	ldi	r20, 0x20	; 32
    288e:	51 e4       	ldi	r21, 0x41	; 65
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <LCD_enuInit+0x3e4>
    28aa:	80 e9       	ldi	r24, 0x90	; 144
    28ac:	91 e0       	ldi	r25, 0x01	; 1
    28ae:	9c 83       	std	Y+4, r25	; 0x04
    28b0:	8b 83       	std	Y+3, r24	; 0x03
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <LCD_enuInit+0x3d2>
    28ba:	9c 83       	std	Y+4, r25	; 0x04
    28bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	69 f7       	brne	.-38     	; 0x28aa <LCD_enuInit+0x3c6>
    28d0:	14 c0       	rjmp	.+40     	; 0x28fa <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d2:	6f 81       	ldd	r22, Y+7	; 0x07
    28d4:	78 85       	ldd	r23, Y+8	; 0x08
    28d6:	89 85       	ldd	r24, Y+9	; 0x09
    28d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	9e 83       	std	Y+6, r25	; 0x06
    28e4:	8d 83       	std	Y+5, r24	; 0x05
    28e6:	8d 81       	ldd	r24, Y+5	; 0x05
    28e8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ea:	9a 83       	std	Y+2, r25	; 0x02
    28ec:	89 83       	std	Y+1, r24	; 0x01
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	9a 81       	ldd	r25, Y+2	; 0x02
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <LCD_enuInit+0x40e>
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    2900:	86 e0       	ldi	r24, 0x06	; 6
    2902:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	80 93 90 00 	sts	0x0090, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    2910:	89 ad       	ldd	r24, Y+57	; 0x39
}
    2912:	e9 96       	adiw	r28, 0x39	; 57
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	6e 97       	sbiw	r28, 0x1e	; 30
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    293a:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    293c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    293e:	82 95       	swap	r24
    2940:	8f 70       	andi	r24, 0x0F	; 15
    2942:	98 2f       	mov	r25, r24
    2944:	91 70       	andi	r25, 0x01	; 1
    2946:	80 e0       	ldi	r24, 0x00	; 0
    2948:	63 e0       	ldi	r22, 0x03	; 3
    294a:	49 2f       	mov	r20, r25
    294c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    2950:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2952:	82 95       	swap	r24
    2954:	86 95       	lsr	r24
    2956:	87 70       	andi	r24, 0x07	; 7
    2958:	98 2f       	mov	r25, r24
    295a:	91 70       	andi	r25, 0x01	; 1
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	64 e0       	ldi	r22, 0x04	; 4
    2960:	49 2f       	mov	r20, r25
    2962:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    2966:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2968:	82 95       	swap	r24
    296a:	86 95       	lsr	r24
    296c:	86 95       	lsr	r24
    296e:	83 70       	andi	r24, 0x03	; 3
    2970:	98 2f       	mov	r25, r24
    2972:	91 70       	andi	r25, 0x01	; 1
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	65 e0       	ldi	r22, 0x05	; 5
    2978:	49 2f       	mov	r20, r25
    297a:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    297e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2980:	98 2f       	mov	r25, r24
    2982:	99 1f       	adc	r25, r25
    2984:	99 27       	eor	r25, r25
    2986:	99 1f       	adc	r25, r25
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	66 e0       	ldi	r22, 0x06	; 6
    298c:	49 2f       	mov	r20, r25
    298e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	60 e0       	ldi	r22, 0x00	; 0
    2996:	41 e0       	ldi	r20, 0x01	; 1
    2998:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a0 e0       	ldi	r26, 0x00	; 0
    29a2:	b0 e4       	ldi	r27, 0x40	; 64
    29a4:	89 8f       	std	Y+25, r24	; 0x19
    29a6:	9a 8f       	std	Y+26, r25	; 0x1a
    29a8:	ab 8f       	std	Y+27, r26	; 0x1b
    29aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ac:	69 8d       	ldd	r22, Y+25	; 0x19
    29ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	4a e7       	ldi	r20, 0x7A	; 122
    29ba:	55 e4       	ldi	r21, 0x45	; 69
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	8d 8b       	std	Y+21, r24	; 0x15
    29c6:	9e 8b       	std	Y+22, r25	; 0x16
    29c8:	af 8b       	std	Y+23, r26	; 0x17
    29ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29cc:	6d 89       	ldd	r22, Y+21	; 0x15
    29ce:	7e 89       	ldd	r23, Y+22	; 0x16
    29d0:	8f 89       	ldd	r24, Y+23	; 0x17
    29d2:	98 8d       	ldd	r25, Y+24	; 0x18
    29d4:	20 e0       	ldi	r18, 0x00	; 0
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e8       	ldi	r20, 0x80	; 128
    29da:	5f e3       	ldi	r21, 0x3F	; 63
    29dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e0:	88 23       	and	r24, r24
    29e2:	2c f4       	brge	.+10     	; 0x29ee <WriteNLatch+0xca>
		__ticks = 1;
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9c 8b       	std	Y+20, r25	; 0x14
    29ea:	8b 8b       	std	Y+19, r24	; 0x13
    29ec:	3f c0       	rjmp	.+126    	; 0x2a6c <WriteNLatch+0x148>
	else if (__tmp > 65535)
    29ee:	6d 89       	ldd	r22, Y+21	; 0x15
    29f0:	7e 89       	ldd	r23, Y+22	; 0x16
    29f2:	8f 89       	ldd	r24, Y+23	; 0x17
    29f4:	98 8d       	ldd	r25, Y+24	; 0x18
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	3f ef       	ldi	r19, 0xFF	; 255
    29fa:	4f e7       	ldi	r20, 0x7F	; 127
    29fc:	57 e4       	ldi	r21, 0x47	; 71
    29fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a02:	18 16       	cp	r1, r24
    2a04:	4c f5       	brge	.+82     	; 0x2a58 <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a06:	69 8d       	ldd	r22, Y+25	; 0x19
    2a08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	40 e2       	ldi	r20, 0x20	; 32
    2a14:	51 e4       	ldi	r21, 0x41	; 65
    2a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a26:	dc 01       	movw	r26, r24
    2a28:	cb 01       	movw	r24, r22
    2a2a:	9c 8b       	std	Y+20, r25	; 0x14
    2a2c:	8b 8b       	std	Y+19, r24	; 0x13
    2a2e:	0f c0       	rjmp	.+30     	; 0x2a4e <WriteNLatch+0x12a>
    2a30:	80 e9       	ldi	r24, 0x90	; 144
    2a32:	91 e0       	ldi	r25, 0x01	; 1
    2a34:	9a 8b       	std	Y+18, r25	; 0x12
    2a36:	89 8b       	std	Y+17, r24	; 0x11
    2a38:	89 89       	ldd	r24, Y+17	; 0x11
    2a3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <WriteNLatch+0x118>
    2a40:	9a 8b       	std	Y+18, r25	; 0x12
    2a42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a44:	8b 89       	ldd	r24, Y+19	; 0x13
    2a46:	9c 89       	ldd	r25, Y+20	; 0x14
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	9c 8b       	std	Y+20, r25	; 0x14
    2a4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a50:	9c 89       	ldd	r25, Y+20	; 0x14
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <WriteNLatch+0x10c>
    2a56:	14 c0       	rjmp	.+40     	; 0x2a80 <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a58:	6d 89       	ldd	r22, Y+21	; 0x15
    2a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	9c 8b       	std	Y+20, r25	; 0x14
    2a6a:	8b 8b       	std	Y+19, r24	; 0x13
    2a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a70:	98 8b       	std	Y+16, r25	; 0x10
    2a72:	8f 87       	std	Y+15, r24	; 0x0f
    2a74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a76:	98 89       	ldd	r25, Y+16	; 0x10
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <WriteNLatch+0x154>
    2a7c:	98 8b       	std	Y+16, r25	; 0x10
    2a7e:	8f 87       	std	Y+15, r24	; 0x0f
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	40 e0       	ldi	r20, 0x00	; 0
    2a86:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    2a8a:	80 91 90 00 	lds	r24, 0x0090
    2a8e:	88 23       	and	r24, r24
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <WriteNLatch+0x170>
    2a92:	a2 c0       	rjmp	.+324    	; 0x2bd8 <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    2a94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a96:	98 2f       	mov	r25, r24
    2a98:	91 70       	andi	r25, 0x01	; 1
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	63 e0       	ldi	r22, 0x03	; 3
    2a9e:	49 2f       	mov	r20, r25
    2aa0:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    2aa4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aa6:	86 95       	lsr	r24
    2aa8:	98 2f       	mov	r25, r24
    2aaa:	91 70       	andi	r25, 0x01	; 1
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	64 e0       	ldi	r22, 0x04	; 4
    2ab0:	49 2f       	mov	r20, r25
    2ab2:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    2ab6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ab8:	86 95       	lsr	r24
    2aba:	86 95       	lsr	r24
    2abc:	98 2f       	mov	r25, r24
    2abe:	91 70       	andi	r25, 0x01	; 1
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	65 e0       	ldi	r22, 0x05	; 5
    2ac4:	49 2f       	mov	r20, r25
    2ac6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    2aca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2acc:	86 95       	lsr	r24
    2ace:	86 95       	lsr	r24
    2ad0:	86 95       	lsr	r24
    2ad2:	98 2f       	mov	r25, r24
    2ad4:	91 70       	andi	r25, 0x01	; 1
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	66 e0       	ldi	r22, 0x06	; 6
    2ada:	49 2f       	mov	r20, r25
    2adc:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	41 e0       	ldi	r20, 0x01	; 1
    2ae6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	a0 e0       	ldi	r26, 0x00	; 0
    2af0:	b0 e4       	ldi	r27, 0x40	; 64
    2af2:	8b 87       	std	Y+11, r24	; 0x0b
    2af4:	9c 87       	std	Y+12, r25	; 0x0c
    2af6:	ad 87       	std	Y+13, r26	; 0x0d
    2af8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2afc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	4a e7       	ldi	r20, 0x7A	; 122
    2b08:	55 e4       	ldi	r21, 0x45	; 69
    2b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	8f 83       	std	Y+7, r24	; 0x07
    2b14:	98 87       	std	Y+8, r25	; 0x08
    2b16:	a9 87       	std	Y+9, r26	; 0x09
    2b18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b1c:	78 85       	ldd	r23, Y+8	; 0x08
    2b1e:	89 85       	ldd	r24, Y+9	; 0x09
    2b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	40 e8       	ldi	r20, 0x80	; 128
    2b28:	5f e3       	ldi	r21, 0x3F	; 63
    2b2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b2e:	88 23       	and	r24, r24
    2b30:	2c f4       	brge	.+10     	; 0x2b3c <WriteNLatch+0x218>
		__ticks = 1;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9e 83       	std	Y+6, r25	; 0x06
    2b38:	8d 83       	std	Y+5, r24	; 0x05
    2b3a:	3f c0       	rjmp	.+126    	; 0x2bba <WriteNLatch+0x296>
	else if (__tmp > 65535)
    2b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3e:	78 85       	ldd	r23, Y+8	; 0x08
    2b40:	89 85       	ldd	r24, Y+9	; 0x09
    2b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	3f ef       	ldi	r19, 0xFF	; 255
    2b48:	4f e7       	ldi	r20, 0x7F	; 127
    2b4a:	57 e4       	ldi	r21, 0x47	; 71
    2b4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b50:	18 16       	cp	r1, r24
    2b52:	4c f5       	brge	.+82     	; 0x2ba6 <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e2       	ldi	r20, 0x20	; 32
    2b62:	51 e4       	ldi	r21, 0x41	; 65
    2b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	9e 83       	std	Y+6, r25	; 0x06
    2b7a:	8d 83       	std	Y+5, r24	; 0x05
    2b7c:	0f c0       	rjmp	.+30     	; 0x2b9c <WriteNLatch+0x278>
    2b7e:	80 e9       	ldi	r24, 0x90	; 144
    2b80:	91 e0       	ldi	r25, 0x01	; 1
    2b82:	9c 83       	std	Y+4, r25	; 0x04
    2b84:	8b 83       	std	Y+3, r24	; 0x03
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	f1 f7       	brne	.-4      	; 0x2b8a <WriteNLatch+0x266>
    2b8e:	9c 83       	std	Y+4, r25	; 0x04
    2b90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b92:	8d 81       	ldd	r24, Y+5	; 0x05
    2b94:	9e 81       	ldd	r25, Y+6	; 0x06
    2b96:	01 97       	sbiw	r24, 0x01	; 1
    2b98:	9e 83       	std	Y+6, r25	; 0x06
    2b9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	69 f7       	brne	.-38     	; 0x2b7e <WriteNLatch+0x25a>
    2ba4:	14 c0       	rjmp	.+40     	; 0x2bce <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba8:	78 85       	ldd	r23, Y+8	; 0x08
    2baa:	89 85       	ldd	r24, Y+9	; 0x09
    2bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	9e 83       	std	Y+6, r25	; 0x06
    2bb8:	8d 83       	std	Y+5, r24	; 0x05
    2bba:	8d 81       	ldd	r24, Y+5	; 0x05
    2bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbe:	9a 83       	std	Y+2, r25	; 0x02
    2bc0:	89 83       	std	Y+1, r24	; 0x01
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	f1 f7       	brne	.-4      	; 0x2bc6 <WriteNLatch+0x2a2>
    2bca:	9a 83       	std	Y+2, r25	; 0x02
    2bcc:	89 83       	std	Y+1, r24	; 0x01
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	60 e0       	ldi	r22, 0x00	; 0
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    2bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    2bde:	6e 96       	adiw	r28, 0x1e	; 30
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	00 d0       	rcall	.+0      	; 0x2bf6 <LCD_enuSendData+0x6>
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
    2bfa:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2bfc:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	62 e0       	ldi	r22, 0x02	; 2
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	61 e0       	ldi	r22, 0x01	; 1
    2c0c:	40 e0       	ldi	r20, 0x00	; 0
    2c0e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	0e 94 92 14 	call	0x2924	; 0x2924 <WriteNLatch>



	return Local_enu_ErrorState;
    2c18:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    2c24:	df 93       	push	r29
    2c26:	cf 93       	push	r28
    2c28:	00 d0       	rcall	.+0      	; 0x2c2a <LCD_enuSendCommand+0x6>
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2c30:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	62 e0       	ldi	r22, 0x02	; 2
    2c36:	40 e0       	ldi	r20, 0x00	; 0
    2c38:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	61 e0       	ldi	r22, 0x01	; 1
    2c40:	40 e0       	ldi	r20, 0x00	; 0
    2c42:	0e 94 ca 0c 	call	0x1994	; 0x1994 <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	0e 94 92 14 	call	0x2924	; 0x2924 <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <LCD_u8SendString+0x6>
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <LCD_u8SendString+0x8>
    2c64:	0f 92       	push	r0
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	9c 83       	std	Y+4, r25	; 0x04
    2c6c:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2c6e:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	9c 81       	ldd	r25, Y+4	; 0x04
    2c74:	00 97       	sbiw	r24, 0x00	; 0
    2c76:	f9 f0       	breq	.+62     	; 0x2cb6 <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    2c78:	19 82       	std	Y+1, r1	; 0x01
    2c7a:	0f c0       	rjmp	.+30     	; 0x2c9a <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	8b 81       	ldd	r24, Y+3	; 0x03
    2c84:	9c 81       	ldd	r25, Y+4	; 0x04
    2c86:	fc 01       	movw	r30, r24
    2c88:	e2 0f       	add	r30, r18
    2c8a:	f3 1f       	adc	r31, r19
    2c8c:	90 81       	ld	r25, Z
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	8f 5f       	subi	r24, 0xFF	; 255
    2c92:	89 83       	std	Y+1, r24	; 0x01
    2c94:	89 2f       	mov	r24, r25
    2c96:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	e2 0f       	add	r30, r18
    2ca8:	f3 1f       	adc	r31, r19
    2caa:	80 81       	ld	r24, Z
    2cac:	88 23       	and	r24, r24
    2cae:	31 f7       	brne	.-52     	; 0x2c7c <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	04 c0       	rjmp	.+8      	; 0x2cbe <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    2cc0:	0f 90       	pop	r0
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    2cd8:	a0 97       	sbiw	r28, 0x20	; 32
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	6b 8f       	std	Y+27, r22	; 0x1b
    2ce6:	7c 8f       	std	Y+28, r23	; 0x1c
    2ce8:	8d 8f       	std	Y+29, r24	; 0x1d
    2cea:	9e 8f       	std	Y+30, r25	; 0x1e
    2cec:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2cee:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    2cf0:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    2cf2:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    2cf4:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    2cf6:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    2cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cfc:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2cfe:	be 8d       	ldd	r27, Y+30	; 0x1e
    2d00:	bb 23       	and	r27, r27
    2d02:	94 f4       	brge	.+36     	; 0x2d28 <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    2d04:	8d e2       	ldi	r24, 0x2D	; 45
    2d06:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_enuSendData>
		Copy_u8data*=-1;
    2d0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2d10:	be 8d       	ldd	r27, Y+30	; 0x1e
    2d12:	b0 95       	com	r27
    2d14:	a0 95       	com	r26
    2d16:	90 95       	com	r25
    2d18:	81 95       	neg	r24
    2d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1c:	af 4f       	sbci	r26, 0xFF	; 255
    2d1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d20:	8b 8f       	std	Y+27, r24	; 0x1b
    2d22:	9c 8f       	std	Y+28, r25	; 0x1c
    2d24:	ad 8f       	std	Y+29, r26	; 0x1d
    2d26:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    2d28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d2c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2d2e:	be 8d       	ldd	r27, Y+30	; 0x1e
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	a1 05       	cpc	r26, r1
    2d34:	b1 05       	cpc	r27, r1
    2d36:	09 f0       	breq	.+2      	; 0x2d3a <LCD_enuIntegerToString+0x6a>
    2d38:	4b c0       	rjmp	.+150    	; 0x2dd0 <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    2d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	ce 01       	movw	r24, r28
    2d42:	07 96       	adiw	r24, 0x07	; 7
    2d44:	fc 01       	movw	r30, r24
    2d46:	e2 0f       	add	r30, r18
    2d48:	f3 1f       	adc	r31, r19
    2d4a:	80 e3       	ldi	r24, 0x30	; 48
    2d4c:	80 83       	st	Z, r24
    2d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d50:	8f 5f       	subi	r24, 0xFF	; 255
    2d52:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    2d54:	8d 81       	ldd	r24, Y+5	; 0x05
    2d56:	28 2f       	mov	r18, r24
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	07 96       	adiw	r24, 0x07	; 7
    2d5e:	fc 01       	movw	r30, r24
    2d60:	e2 0f       	add	r30, r18
    2d62:	f3 1f       	adc	r31, r19
    2d64:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    2d66:	8e 81       	ldd	r24, Y+6	; 0x06
    2d68:	88 a3       	std	Y+32, r24	; 0x20
    2d6a:	7f c0       	rjmp	.+254    	; 0x2e6a <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    2d6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d6e:	28 2f       	mov	r18, r24
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	50 e0       	ldi	r21, 0x00	; 0
    2d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d7a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2d7c:	be 8d       	ldd	r27, Y+30	; 0x1e
    2d7e:	bc 01       	movw	r22, r24
    2d80:	cd 01       	movw	r24, r26
    2d82:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__divmodsi4>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    2d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	8c 81       	ldd	r24, Y+4	; 0x04
    2d94:	48 2f       	mov	r20, r24
    2d96:	40 5d       	subi	r20, 0xD0	; 208
    2d98:	ce 01       	movw	r24, r28
    2d9a:	07 96       	adiw	r24, 0x07	; 7
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	e2 0f       	add	r30, r18
    2da0:	f3 1f       	adc	r31, r19
    2da2:	40 83       	st	Z, r20
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	8f 5f       	subi	r24, 0xFF	; 255
    2da8:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    2daa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	50 e0       	ldi	r21, 0x00	; 0
    2db4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2dba:	be 8d       	ldd	r27, Y+30	; 0x1e
    2dbc:	bc 01       	movw	r22, r24
    2dbe:	cd 01       	movw	r24, r26
    2dc0:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <__divmodsi4>
    2dc4:	da 01       	movw	r26, r20
    2dc6:	c9 01       	movw	r24, r18
    2dc8:	8b 8f       	std	Y+27, r24	; 0x1b
    2dca:	9c 8f       	std	Y+28, r25	; 0x1c
    2dcc:	ad 8f       	std	Y+29, r26	; 0x1d
    2dce:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    2dd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dd4:	ad 8d       	ldd	r26, Y+29	; 0x1d
    2dd6:	be 8d       	ldd	r27, Y+30	; 0x1e
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	a1 05       	cpc	r26, r1
    2ddc:	b1 05       	cpc	r27, r1
    2dde:	31 f6       	brne	.-116    	; 0x2d6c <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    2de0:	8d 81       	ldd	r24, Y+5	; 0x05
    2de2:	28 2f       	mov	r18, r24
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	ce 01       	movw	r24, r28
    2de8:	07 96       	adiw	r24, 0x07	; 7
    2dea:	fc 01       	movw	r30, r24
    2dec:	e2 0f       	add	r30, r18
    2dee:	f3 1f       	adc	r31, r19
    2df0:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	81 50       	subi	r24, 0x01	; 1
    2df6:	8a 83       	std	Y+2, r24	; 0x02
    2df8:	2c c0       	rjmp	.+88     	; 0x2e52 <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	ce 01       	movw	r24, r28
    2e02:	07 96       	adiw	r24, 0x07	; 7
    2e04:	fc 01       	movw	r30, r24
    2e06:	e2 0f       	add	r30, r18
    2e08:	f3 1f       	adc	r31, r19
    2e0a:	80 81       	ld	r24, Z
    2e0c:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    2e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e10:	48 2f       	mov	r20, r24
    2e12:	50 e0       	ldi	r21, 0x00	; 0
    2e14:	8a 81       	ldd	r24, Y+2	; 0x02
    2e16:	28 2f       	mov	r18, r24
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	07 96       	adiw	r24, 0x07	; 7
    2e1e:	fc 01       	movw	r30, r24
    2e20:	e2 0f       	add	r30, r18
    2e22:	f3 1f       	adc	r31, r19
    2e24:	20 81       	ld	r18, Z
    2e26:	ce 01       	movw	r24, r28
    2e28:	07 96       	adiw	r24, 0x07	; 7
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	e4 0f       	add	r30, r20
    2e2e:	f5 1f       	adc	r31, r21
    2e30:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	28 2f       	mov	r18, r24
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	ce 01       	movw	r24, r28
    2e3a:	07 96       	adiw	r24, 0x07	; 7
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	e2 0f       	add	r30, r18
    2e40:	f3 1f       	adc	r31, r19
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	80 83       	st	Z, r24

        Local_u8Start++;
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	8f 5f       	subi	r24, 0xFF	; 255
    2e4a:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	81 50       	subi	r24, 0x01	; 1
    2e50:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    2e52:	9b 81       	ldd	r25, Y+3	; 0x03
    2e54:	8a 81       	ldd	r24, Y+2	; 0x02
    2e56:	98 17       	cp	r25, r24
    2e58:	80 f2       	brcs	.-96     	; 0x2dfa <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	07 96       	adiw	r24, 0x07	; 7
    2e5e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    2e66:	8e 81       	ldd	r24, Y+6	; 0x06
    2e68:	88 a3       	std	Y+32, r24	; 0x20
    2e6a:	88 a1       	ldd	r24, Y+32	; 0x20
}
    2e6c:	a0 96       	adiw	r28, 0x20	; 32
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	08 95       	ret

00002e7e <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    2e7e:	df 93       	push	r29
    2e80:	cf 93       	push	r28
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	27 97       	sbiw	r28, 0x07	; 7
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	8b 83       	std	Y+3, r24	; 0x03
    2e94:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    2e96:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	81 31       	cpi	r24, 0x11	; 17
    2e9c:	18 f4       	brcc	.+6      	; 0x2ea4 <LCD_u8SetPosXY+0x26>
    2e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea0:	83 30       	cpi	r24, 0x03	; 3
    2ea2:	18 f0       	brcs	.+6      	; 0x2eaa <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    2ea4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ea6:	2f 83       	std	Y+7, r18	; 0x07
    2ea8:	23 c0       	rjmp	.+70     	; 0x2ef0 <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    2eaa:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    2eac:	8c 81       	ldd	r24, Y+4	; 0x04
    2eae:	28 2f       	mov	r18, r24
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	3e 83       	std	Y+6, r19	; 0x06
    2eb4:	2d 83       	std	Y+5, r18	; 0x05
    2eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eba:	81 30       	cpi	r24, 0x01	; 1
    2ebc:	91 05       	cpc	r25, r1
    2ebe:	31 f0       	breq	.+12     	; 0x2ecc <LCD_u8SetPosXY+0x4e>
    2ec0:	2d 81       	ldd	r18, Y+5	; 0x05
    2ec2:	3e 81       	ldd	r19, Y+6	; 0x06
    2ec4:	22 30       	cpi	r18, 0x02	; 2
    2ec6:	31 05       	cpc	r19, r1
    2ec8:	21 f0       	breq	.+8      	; 0x2ed2 <LCD_u8SetPosXY+0x54>
    2eca:	07 c0       	rjmp	.+14     	; 0x2eda <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	05 c0       	rjmp	.+10     	; 0x2edc <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	80 5c       	subi	r24, 0xC0	; 192
    2ed6:	89 83       	std	Y+1, r24	; 0x01
    2ed8:	01 c0       	rjmp	.+2      	; 0x2edc <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    2eda:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	80 68       	ori	r24, 0x80	; 128
    2ee0:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    2ee8:	81 e0       	ldi	r24, 0x01	; 1
    2eea:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    2eec:	3a 81       	ldd	r19, Y+2	; 0x02
    2eee:	3f 83       	std	Y+7, r19	; 0x07
    2ef0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2ef2:	27 96       	adiw	r28, 0x07	; 7
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	cf 91       	pop	r28
    2f00:	df 91       	pop	r29
    2f02:	08 95       	ret

00002f04 <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	27 97       	sbiw	r28, 0x07	; 7
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61
    2f18:	9d 83       	std	Y+5, r25	; 0x05
    2f1a:	8c 83       	std	Y+4, r24	; 0x04
    2f1c:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2f1e:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    2f20:	8c 81       	ldd	r24, Y+4	; 0x04
    2f22:	9d 81       	ldd	r25, Y+5	; 0x05
    2f24:	00 97       	sbiw	r24, 0x00	; 0
    2f26:	19 f0       	breq	.+6      	; 0x2f2e <LCD_u8StoreCustomChar+0x2a>
    2f28:	8e 81       	ldd	r24, Y+6	; 0x06
    2f2a:	89 30       	cpi	r24, 0x09	; 9
    2f2c:	18 f0       	brcs	.+6      	; 0x2f34 <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    2f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f30:	8f 83       	std	Y+7, r24	; 0x07
    2f32:	2a c0       	rjmp	.+84     	; 0x2f88 <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    2f34:	8e 81       	ldd	r24, Y+6	; 0x06
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	88 0f       	add	r24, r24
    2f40:	99 1f       	adc	r25, r25
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    2f48:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4a:	80 64       	ori	r24, 0x40	; 64
    2f4c:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    2f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f50:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    2f54:	19 82       	std	Y+1, r1	; 0x01
    2f56:	0e c0       	rjmp	.+28     	; 0x2f74 <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f60:	9d 81       	ldd	r25, Y+5	; 0x05
    2f62:	fc 01       	movw	r30, r24
    2f64:	e2 0f       	add	r30, r18
    2f66:	f3 1f       	adc	r31, r19
    2f68:	80 81       	ld	r24, Z
    2f6a:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	88 30       	cpi	r24, 0x08	; 8
    2f78:	78 f3       	brcs	.-34     	; 0x2f58 <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    2f7a:	82 e0       	ldi	r24, 0x02	; 2
    2f7c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	8f 83       	std	Y+7, r24	; 0x07
    2f88:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2f8a:	27 96       	adiw	r28, 0x07	; 7
    2f8c:	0f b6       	in	r0, 0x3f	; 63
    2f8e:	f8 94       	cli
    2f90:	de bf       	out	0x3e, r29	; 62
    2f92:	0f be       	out	0x3f, r0	; 63
    2f94:	cd bf       	out	0x3d, r28	; 61
    2f96:	cf 91       	pop	r28
    2f98:	df 91       	pop	r29
    2f9a:	08 95       	ret

00002f9c <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    2f9c:	df 93       	push	r29
    2f9e:	cf 93       	push	r28
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <LCD_u8DisplayCustomChar+0x6>
    2fa2:	00 d0       	rcall	.+0      	; 0x2fa4 <LCD_u8DisplayCustomChar+0x8>
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	8a 83       	std	Y+2, r24	; 0x02
    2faa:	6b 83       	std	Y+3, r22	; 0x03
    2fac:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    2fae:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    2fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb2:	6b 81       	ldd	r22, Y+3	; 0x03
    2fb4:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    2fc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fc4:	0f 90       	pop	r0
    2fc6:	0f 90       	pop	r0
    2fc8:	0f 90       	pop	r0
    2fca:	0f 90       	pop	r0
    2fcc:	cf 91       	pop	r28
    2fce:	df 91       	pop	r29
    2fd0:	08 95       	ret

00002fd2 <main>:





int main(){
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	2f 97       	sbiw	r28, 0x0f	; 15
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
//		EXTI_enuSetCallBack(warningSequence, 1);
//	/**************************************************************/


	/********************* Testing LCD Driver *********************/
	LCD_enuInit();
    2fe6:	0e 94 72 12 	call	0x24e4	; 0x24e4 <LCD_enuInit>
	LCD_u8SendString("Ahmed Asl");
    2fea:	80 e6       	ldi	r24, 0x60	; 96
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <LCD_u8SendString>
	LCD_u8SetPosXY(0, 2);
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	62 e0       	ldi	r22, 0x02	; 2
    2ff6:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <LCD_u8SetPosXY>
//	DIO_enuSetPinDirection(DIO_u8PortD, DIO_u8PIN0, DIO_u8INPUT);
//	DIO_enuSetPinDirection(DIO_u8PortD, DIO_u8PIN1, DIO_u8OUTPUT);
//	UART_vidInit();
	/****************************************************************/

	SPI_vidInit();
    2ffa:	0e 94 d6 06 	call	0xdac	; 0xdac <SPI_vidInit>

	uint8_t	data = 0;
    2ffe:	1f 86       	std	Y+15, r1	; 0x0f

	while(1){

		SPI_enuSlaveReceive_Char(&data);
    3000:	ce 01       	movw	r24, r28
    3002:	0f 96       	adiw	r24, 0x0f	; 15
    3004:	0e 94 65 07 	call	0xeca	; 0xeca <SPI_enuSlaveReceive_Char>


		LCD_enuSendData(data);
    3008:	8f 85       	ldd	r24, Y+15	; 0x0f
    300a:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <LCD_enuSendData>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	a8 ec       	ldi	r26, 0xC8	; 200
    3014:	b2 e4       	ldi	r27, 0x42	; 66
    3016:	8b 87       	std	Y+11, r24	; 0x0b
    3018:	9c 87       	std	Y+12, r25	; 0x0c
    301a:	ad 87       	std	Y+13, r26	; 0x0d
    301c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3020:	7c 85       	ldd	r23, Y+12	; 0x0c
    3022:	8d 85       	ldd	r24, Y+13	; 0x0d
    3024:	9e 85       	ldd	r25, Y+14	; 0x0e
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	4a e7       	ldi	r20, 0x7A	; 122
    302c:	55 e4       	ldi	r21, 0x45	; 69
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	8f 83       	std	Y+7, r24	; 0x07
    3038:	98 87       	std	Y+8, r25	; 0x08
    303a:	a9 87       	std	Y+9, r26	; 0x09
    303c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    303e:	6f 81       	ldd	r22, Y+7	; 0x07
    3040:	78 85       	ldd	r23, Y+8	; 0x08
    3042:	89 85       	ldd	r24, Y+9	; 0x09
    3044:	9a 85       	ldd	r25, Y+10	; 0x0a
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e8       	ldi	r20, 0x80	; 128
    304c:	5f e3       	ldi	r21, 0x3F	; 63
    304e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3052:	88 23       	and	r24, r24
    3054:	2c f4       	brge	.+10     	; 0x3060 <main+0x8e>
		__ticks = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9e 83       	std	Y+6, r25	; 0x06
    305c:	8d 83       	std	Y+5, r24	; 0x05
    305e:	3f c0       	rjmp	.+126    	; 0x30de <main+0x10c>
	else if (__tmp > 65535)
    3060:	6f 81       	ldd	r22, Y+7	; 0x07
    3062:	78 85       	ldd	r23, Y+8	; 0x08
    3064:	89 85       	ldd	r24, Y+9	; 0x09
    3066:	9a 85       	ldd	r25, Y+10	; 0x0a
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	3f ef       	ldi	r19, 0xFF	; 255
    306c:	4f e7       	ldi	r20, 0x7F	; 127
    306e:	57 e4       	ldi	r21, 0x47	; 71
    3070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3074:	18 16       	cp	r1, r24
    3076:	4c f5       	brge	.+82     	; 0x30ca <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3078:	6b 85       	ldd	r22, Y+11	; 0x0b
    307a:	7c 85       	ldd	r23, Y+12	; 0x0c
    307c:	8d 85       	ldd	r24, Y+13	; 0x0d
    307e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e2       	ldi	r20, 0x20	; 32
    3086:	51 e4       	ldi	r21, 0x41	; 65
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	9e 83       	std	Y+6, r25	; 0x06
    309e:	8d 83       	std	Y+5, r24	; 0x05
    30a0:	0f c0       	rjmp	.+30     	; 0x30c0 <main+0xee>
    30a2:	80 e9       	ldi	r24, 0x90	; 144
    30a4:	91 e0       	ldi	r25, 0x01	; 1
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	8b 83       	std	Y+3, r24	; 0x03
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	9c 81       	ldd	r25, Y+4	; 0x04
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <main+0xdc>
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b6:	8d 81       	ldd	r24, Y+5	; 0x05
    30b8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	9e 83       	std	Y+6, r25	; 0x06
    30be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c0:	8d 81       	ldd	r24, Y+5	; 0x05
    30c2:	9e 81       	ldd	r25, Y+6	; 0x06
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	69 f7       	brne	.-38     	; 0x30a2 <main+0xd0>
    30c8:	9b cf       	rjmp	.-202    	; 0x3000 <main+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ca:	6f 81       	ldd	r22, Y+7	; 0x07
    30cc:	78 85       	ldd	r23, Y+8	; 0x08
    30ce:	89 85       	ldd	r24, Y+9	; 0x09
    30d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9e 83       	std	Y+6, r25	; 0x06
    30dc:	8d 83       	std	Y+5, r24	; 0x05
    30de:	8d 81       	ldd	r24, Y+5	; 0x05
    30e0:	9e 81       	ldd	r25, Y+6	; 0x06
    30e2:	9a 83       	std	Y+2, r25	; 0x02
    30e4:	89 83       	std	Y+1, r24	; 0x01
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	9a 81       	ldd	r25, Y+2	; 0x02
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <main+0x118>
    30ee:	9a 83       	std	Y+2, r25	; 0x02
    30f0:	89 83       	std	Y+1, r24	; 0x01
    30f2:	86 cf       	rjmp	.-244    	; 0x3000 <main+0x2e>

000030f4 <__divmodsi4>:
    30f4:	97 fb       	bst	r25, 7
    30f6:	09 2e       	mov	r0, r25
    30f8:	05 26       	eor	r0, r21
    30fa:	0e d0       	rcall	.+28     	; 0x3118 <__divmodsi4_neg1>
    30fc:	57 fd       	sbrc	r21, 7
    30fe:	04 d0       	rcall	.+8      	; 0x3108 <__divmodsi4_neg2>
    3100:	14 d0       	rcall	.+40     	; 0x312a <__udivmodsi4>
    3102:	0a d0       	rcall	.+20     	; 0x3118 <__divmodsi4_neg1>
    3104:	00 1c       	adc	r0, r0
    3106:	38 f4       	brcc	.+14     	; 0x3116 <__divmodsi4_exit>

00003108 <__divmodsi4_neg2>:
    3108:	50 95       	com	r21
    310a:	40 95       	com	r20
    310c:	30 95       	com	r19
    310e:	21 95       	neg	r18
    3110:	3f 4f       	sbci	r19, 0xFF	; 255
    3112:	4f 4f       	sbci	r20, 0xFF	; 255
    3114:	5f 4f       	sbci	r21, 0xFF	; 255

00003116 <__divmodsi4_exit>:
    3116:	08 95       	ret

00003118 <__divmodsi4_neg1>:
    3118:	f6 f7       	brtc	.-4      	; 0x3116 <__divmodsi4_exit>
    311a:	90 95       	com	r25
    311c:	80 95       	com	r24
    311e:	70 95       	com	r23
    3120:	61 95       	neg	r22
    3122:	7f 4f       	sbci	r23, 0xFF	; 255
    3124:	8f 4f       	sbci	r24, 0xFF	; 255
    3126:	9f 4f       	sbci	r25, 0xFF	; 255
    3128:	08 95       	ret

0000312a <__udivmodsi4>:
    312a:	a1 e2       	ldi	r26, 0x21	; 33
    312c:	1a 2e       	mov	r1, r26
    312e:	aa 1b       	sub	r26, r26
    3130:	bb 1b       	sub	r27, r27
    3132:	fd 01       	movw	r30, r26
    3134:	0d c0       	rjmp	.+26     	; 0x3150 <__udivmodsi4_ep>

00003136 <__udivmodsi4_loop>:
    3136:	aa 1f       	adc	r26, r26
    3138:	bb 1f       	adc	r27, r27
    313a:	ee 1f       	adc	r30, r30
    313c:	ff 1f       	adc	r31, r31
    313e:	a2 17       	cp	r26, r18
    3140:	b3 07       	cpc	r27, r19
    3142:	e4 07       	cpc	r30, r20
    3144:	f5 07       	cpc	r31, r21
    3146:	20 f0       	brcs	.+8      	; 0x3150 <__udivmodsi4_ep>
    3148:	a2 1b       	sub	r26, r18
    314a:	b3 0b       	sbc	r27, r19
    314c:	e4 0b       	sbc	r30, r20
    314e:	f5 0b       	sbc	r31, r21

00003150 <__udivmodsi4_ep>:
    3150:	66 1f       	adc	r22, r22
    3152:	77 1f       	adc	r23, r23
    3154:	88 1f       	adc	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	1a 94       	dec	r1
    315a:	69 f7       	brne	.-38     	; 0x3136 <__udivmodsi4_loop>
    315c:	60 95       	com	r22
    315e:	70 95       	com	r23
    3160:	80 95       	com	r24
    3162:	90 95       	com	r25
    3164:	9b 01       	movw	r18, r22
    3166:	ac 01       	movw	r20, r24
    3168:	bd 01       	movw	r22, r26
    316a:	cf 01       	movw	r24, r30
    316c:	08 95       	ret

0000316e <__prologue_saves__>:
    316e:	2f 92       	push	r2
    3170:	3f 92       	push	r3
    3172:	4f 92       	push	r4
    3174:	5f 92       	push	r5
    3176:	6f 92       	push	r6
    3178:	7f 92       	push	r7
    317a:	8f 92       	push	r8
    317c:	9f 92       	push	r9
    317e:	af 92       	push	r10
    3180:	bf 92       	push	r11
    3182:	cf 92       	push	r12
    3184:	df 92       	push	r13
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	ca 1b       	sub	r28, r26
    3198:	db 0b       	sbc	r29, r27
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	f8 94       	cli
    319e:	de bf       	out	0x3e, r29	; 62
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	cd bf       	out	0x3d, r28	; 61
    31a4:	09 94       	ijmp

000031a6 <__epilogue_restores__>:
    31a6:	2a 88       	ldd	r2, Y+18	; 0x12
    31a8:	39 88       	ldd	r3, Y+17	; 0x11
    31aa:	48 88       	ldd	r4, Y+16	; 0x10
    31ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    31ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    31b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    31b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    31b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    31b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    31b8:	b9 84       	ldd	r11, Y+9	; 0x09
    31ba:	c8 84       	ldd	r12, Y+8	; 0x08
    31bc:	df 80       	ldd	r13, Y+7	; 0x07
    31be:	ee 80       	ldd	r14, Y+6	; 0x06
    31c0:	fd 80       	ldd	r15, Y+5	; 0x05
    31c2:	0c 81       	ldd	r16, Y+4	; 0x04
    31c4:	1b 81       	ldd	r17, Y+3	; 0x03
    31c6:	aa 81       	ldd	r26, Y+2	; 0x02
    31c8:	b9 81       	ldd	r27, Y+1	; 0x01
    31ca:	ce 0f       	add	r28, r30
    31cc:	d1 1d       	adc	r29, r1
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	f8 94       	cli
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	ed 01       	movw	r28, r26
    31da:	08 95       	ret

000031dc <_exit>:
    31dc:	f8 94       	cli

000031de <__stop_program>:
    31de:	ff cf       	rjmp	.-2      	; 0x31de <__stop_program>
