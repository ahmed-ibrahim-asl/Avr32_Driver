
Avr32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00004e64  00004ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080017e  0080017e  00005016  2**0
                  ALLOC
  3 .stab         000065b8  00000000  00000000  00005018  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000335c  00000000  00000000  0000b5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000e92c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000eacc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ecbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000110c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001244f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013628  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000137e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013ade  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001444c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9a 15 	jmp	0x2b34	; 0x2b34 <__vector_1>
       8:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__vector_2>
       c:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__vector_3>
      10:	0c 94 ba 10 	jmp	0x2174	; 0x2174 <__vector_4>
      14:	0c 94 5d 10 	jmp	0x20ba	; 0x20ba <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 00 10 	jmp	0x2000	; 0x2000 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_9>
      28:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__vector_10>
      2c:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 76 1b 	jmp	0x36ec	; 0x36ec <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e6       	ldi	r30, 0x64	; 100
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <main>
      8a:	0c 94 30 27 	jmp	0x4e60	; 0x4e60 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 87 26 	jmp	0x4d0e	; 0x4d0e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a3 26 	jmp	0x4d46	; 0x4d46 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 93 26 	jmp	0x4d26	; 0x4d26 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 93 26 	jmp	0x4d26	; 0x4d26 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 87 26 	jmp	0x4d0e	; 0x4d0e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a3 26 	jmp	0x4d46	; 0x4d46 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8f 26 	jmp	0x4d1e	; 0x4d1e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ab 26 	jmp	0x4d56	; 0x4d56 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 93 26 	jmp	0x4d26	; 0x4d26 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 93 26 	jmp	0x4d26	; 0x4d26 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 93 26 	jmp	0x4d26	; 0x4d26 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 af 26 	jmp	0x4d5e	; 0x4d5e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 97 26 	jmp	0x4d2e	; 0x4d2e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 8f 26 	jmp	0x4d1e	; 0x4d1e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ab 26 	jmp	0x4d56	; 0x4d56 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_vidInit>:
#include "UART_priv.h"
#include "UART_config.h"
/************************************************************************************/


void UART_vidInit(uint16 copy_u8UART_BaudRate){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_vidInit+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01


	/********************** Setting  Baud Rate **********************/
	UART_setBaudRate(copy_u8UART_BaudRate);
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_setBaudRate>
	/***************************************************************/
    SET_BIT(UCSRC_REG, UCSRC_URSEL);
     e44:	a0 e4       	ldi	r26, 0x40	; 64
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e0 e4       	ldi	r30, 0x40	; 64
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 68       	ori	r24, 0x80	; 128
     e50:	8c 93       	st	X, r24


	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)

		CLR_BIT(UCSRC_REG, UCSRC_UMSEL);
     e52:	a0 e4       	ldi	r26, 0x40	; 64
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e0 e4       	ldi	r30, 0x40	; 64
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7b       	andi	r24, 0xBF	; 191
     e5e:	8c 93       	st	X, r24

		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)
			CLR_BIT(UCSRA_REG, UCSRA_U2X);
     e60:	ab e2       	ldi	r26, 0x2B	; 43
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	8c 93       	st	X, r24
			SET_BIT(UCSRC_REG, UCSRC_UMSEL);
	#endif


	#if(UART_MPCM_OPERATION == UART_SINGLE_MODE)
			CLR_BIT(UCSRA_REG, UCSRA_MPCM);
     e6e:	ab e2       	ldi	r26, 0x2B	; 43
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	eb e2       	ldi	r30, 0x2B	; 43
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
			SET_BIT(UCSRA_REG, UCSRA_MPCM);
	#endif


	// Receiver Enable
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
     e7c:	aa e2       	ldi	r26, 0x2A	; 42
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ea e2       	ldi	r30, 0x2A	; 42
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 61       	ori	r24, 0x10	; 16
     e88:	8c 93       	st	X, r24

	// Transmitter Enable
	SET_BIT(UCSRB_REG, UCSRB_TXEN);
     e8a:	aa e2       	ldi	r26, 0x2A	; 42
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ea e2       	ldi	r30, 0x2A	; 42
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	88 60       	ori	r24, 0x08	; 8
     e96:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
		SET_BIT(UCSRB_REG, UCSRB_UCSZ2);

	#elif(UART_DATA_BIT == UART_DATA_8bit)

		SET_BIT(UCSRC_REG, UCSRC_UCSZ0);
     e98:	a0 e4       	ldi	r26, 0x40	; 64
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
     ea6:	a0 e4       	ldi	r26, 0x40	; 64
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e0 e4       	ldi	r30, 0x40	; 64
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	84 60       	ori	r24, 0x04	; 4
     eb2:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     eb4:	aa e2       	ldi	r26, 0x2A	; 42
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ea e2       	ldi	r30, 0x2A	; 42
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8b 7f       	andi	r24, 0xFB	; 251
     ec0:	8c 93       	st	X, r24


	/********************* Setting No Stop Bits *********************/
	#if(UART_STOP_BIT == UART_STOP_1bit)

		CLR_BIT(UCSRC_REG, UCSRC_USBS);
     ec2:	a0 e4       	ldi	r26, 0x40	; 64
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e0 e4       	ldi	r30, 0x40	; 64
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSRC_UPM0);
		SET_BIT(UCSRC_REG, UCSRC_UPM1);

	#elif(UART_PARITY_MODE == UART_PARITY_ODD)

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     ed0:	a0 e4       	ldi	r26, 0x40	; 64
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e0 e4       	ldi	r30, 0x40	; 64
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 62       	ori	r24, 0x20	; 32
     edc:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     ede:	a0 e4       	ldi	r26, 0x40	; 64
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e0 e4       	ldi	r30, 0x40	; 64
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 61       	ori	r24, 0x10	; 16
     eea:	8c 93       	st	X, r24
	/**************************************************************/




}
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <UART_enuSendChar>:


ErrorStatus_t UART_enuSendChar(uint8_t copy_u8Data){
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <UART_enuSendChar+0x6>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     f02:	19 82       	std	Y+1, r1	; 0x01


	// Wait until transmit buffer is empty
	while(GET_BIT(UCSRA_REG, UCSRA_URDE) == 0);
     f04:	eb e2       	ldi	r30, 0x2B	; 43
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	82 95       	swap	r24
     f0c:	86 95       	lsr	r24
     f0e:	87 70       	andi	r24, 0x07	; 7
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	81 70       	andi	r24, 0x01	; 1
     f16:	90 70       	andi	r25, 0x00	; 0
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	a1 f3       	breq	.-24     	; 0xf04 <UART_enuSendChar+0xe>

	UDR_REG = copy_u8Data;
     f1c:	ec e2       	ldi	r30, 0x2C	; 44
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	80 83       	st	Z, r24


	Local_enuErrrorState = ERROR_STATUS_OK;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <UART_enuSendString>:


ErrorStatus_t UART_enuSendString(uint8_t* copy_pu8Data){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <UART_enuSendString+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <UART_enuSendString+0x8>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	9b 83       	std	Y+3, r25	; 0x03
     f42:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     f44:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9b 81       	ldd	r25, Y+3	; 0x03
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	69 f4       	brne	.+26     	; 0xf68 <UART_enuSendString+0x34>
		return Local_enuErrrorState;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	8c 83       	std	Y+4, r24	; 0x04
     f52:	16 c0       	rjmp	.+44     	; 0xf80 <UART_enuSendString+0x4c>
	}

	else{

		while(*copy_pu8Data != '\0'){
			UART_enuSendChar(*copy_pu8Data);
     f54:	ea 81       	ldd	r30, Y+2	; 0x02
     f56:	fb 81       	ldd	r31, Y+3	; 0x03
     f58:	80 81       	ld	r24, Z
     f5a:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_enuSendChar>
			copy_pu8Data++;
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	9b 83       	std	Y+3, r25	; 0x03
     f66:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
	}

	else{

		while(*copy_pu8Data != '\0'){
     f68:	ea 81       	ldd	r30, Y+2	; 0x02
     f6a:	fb 81       	ldd	r31, Y+3	; 0x03
     f6c:	80 81       	ld	r24, Z
     f6e:	88 23       	and	r24, r24
     f70:	89 f7       	brne	.-30     	; 0xf54 <UART_enuSendString+0x20>
			UART_enuSendChar(*copy_pu8Data);
			copy_pu8Data++;
		}
		UART_enuSendChar('\0');
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_enuSendChar>
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	8c 83       	std	Y+4, r24	; 0x04
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <UART_enuRecieveChar>:

ErrorStatus_t UART_enuRecieveChar(uint8_t* copy_pu8Data){
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <UART_enuRecieveChar+0x6>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <UART_enuRecieveChar+0x8>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     fa0:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	19 f4       	brne	.+6      	; 0xfb0 <UART_enuRecieveChar+0x20>
		return Local_enuErrrorState;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	8c 83       	std	Y+4, r24	; 0x04
     fae:	0f c0       	rjmp	.+30     	; 0xfce <UART_enuRecieveChar+0x3e>
	}

	else{

		// Receive Complete
		while(GET_BIT(UCSRA_REG, UCSRA_RXC) == 0);
     fb0:	eb e2       	ldi	r30, 0x2B	; 43
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	88 23       	and	r24, r24
     fb8:	dc f7       	brge	.-10     	; 0xfb0 <UART_enuRecieveChar+0x20>

		*copy_pu8Data = UDR_REG;
     fba:	ec e2       	ldi	r30, 0x2C	; 44
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	ea 81       	ldd	r30, Y+2	; 0x02
     fc2:	fb 81       	ldd	r31, Y+3	; 0x03
     fc4:	80 83       	st	Z, r24
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	8c 83       	std	Y+4, r24	; 0x04
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <UART_enuRecieveString>:



ErrorStatus_t UART_enuRecieveString(uint8_t* copy_pu8Data) {
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <UART_enuRecieveString+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <UART_enuRecieveString+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9b 83       	std	Y+3, r25	; 0x03
     fec:	8a 83       	std	Y+2, r24	; 0x02
    if (copy_pu8Data == NULL) {
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	11 f4       	brne	.+4      	; 0xffa <UART_enuRecieveString+0x1c>
        return ERROR_STATUS_FAILURE;
     ff6:	1c 82       	std	Y+4, r1	; 0x04
     ff8:	16 c0       	rjmp	.+44     	; 0x1026 <UART_enuRecieveString+0x48>
    }

    uint8_t receivedChar;
    while (1) {
        // Receive a character from UART
        UART_enuRecieveChar(&receivedChar);
     ffa:	ce 01       	movw	r24, r28
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_enuRecieveChar>

        // Store the received character in the buffer
        *copy_pu8Data = receivedChar;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	ea 81       	ldd	r30, Y+2	; 0x02
    1006:	fb 81       	ldd	r31, Y+3	; 0x03
    1008:	80 83       	st	Z, r24

        // Check if the received character is the null terminator
        if (receivedChar == '\0') {
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	88 23       	and	r24, r24
    100e:	31 f0       	breq	.+12     	; 0x101c <UART_enuRecieveString+0x3e>
            break; // Exit the loop if end of string is detected
        }

        // Move to the next position in the buffer
        copy_pu8Data++;
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	9b 83       	std	Y+3, r25	; 0x03
    1018:	8a 83       	std	Y+2, r24	; 0x02
    101a:	ef cf       	rjmp	.-34     	; 0xffa <UART_enuRecieveString+0x1c>
    }

    // Null-terminate the string
    *copy_pu8Data = '\0';
    101c:	ea 81       	ldd	r30, Y+2	; 0x02
    101e:	fb 81       	ldd	r31, Y+3	; 0x03
    1020:	10 82       	st	Z, r1

    return ERROR_STATUS_OK;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	8c 83       	std	Y+4, r24	; 0x04
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <UART_setBaudRate>:

//!
void UART_setBaudRate(uint16 copy_u8UART_BaudRate){
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <UART_setBaudRate+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <UART_setBaudRate+0x8>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int copy_u16Temp = 0;
    1046:	1a 82       	std	Y+2, r1	; 0x02
    1048:	19 82       	std	Y+1, r1	; 0x01

    #if (UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)
        #if (UART_SPEED_MODE == UART_NORMAL_SPEED)


    			copy_u16Temp = ((UART_MC_OSC_FREQ / (16UL*copy_u8UART_BaudRate) ) - 1);
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	cc 01       	movw	r24, r24
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	aa 1f       	adc	r26, r26
    105a:	bb 1f       	adc	r27, r27
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	aa 1f       	adc	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	aa 1f       	adc	r26, r26
    106a:	bb 1f       	adc	r27, r27
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	aa 1f       	adc	r26, r26
    1072:	bb 1f       	adc	r27, r27
    1074:	9c 01       	movw	r18, r24
    1076:	ad 01       	movw	r20, r26
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	92 e1       	ldi	r25, 0x12	; 18
    107c:	aa e7       	ldi	r26, 0x7A	; 122
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__udivmodsi4>
    1088:	da 01       	movw	r26, r20
    108a:	c9 01       	movw	r24, r18
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01

    			copy_u16Temp = ((UART_MC_OSC_FREQ / (2UL*copy_u8UART_BaudRate) ) - 1);
    #endif


    CLR_BIT(UCSRC_REG, UCSRC_URSEL);
    1092:	a0 e4       	ldi	r26, 0x40	; 64
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e0 e4       	ldi	r30, 0x40	; 64
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 77       	andi	r24, 0x7F	; 127
    109e:	8c 93       	st	X, r24

    UBRRH_REG = (uint8_t)(copy_u16Temp >> 8);
    10a0:	e0 e4       	ldi	r30, 0x40	; 64
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	89 2f       	mov	r24, r25
    10aa:	99 27       	eor	r25, r25
    10ac:	80 83       	st	Z, r24
    UBRRL_REG = (uint8_t)copy_u16Temp;
    10ae:	e9 e2       	ldi	r30, 0x29	; 41
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	80 83       	st	Z, r24
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <TWI_enuInit>:





TWIStatus_t TWI_enuInit(void) {
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    TWIStatus_t Local_enuErrorState = TWI_STATUS_FAILURE;
    10ce:	19 82       	std	Y+1, r1	; 0x01

    #if (TWI_MODE_M_or_S == TWI_MASTER_MODE)
        // Set Value for Bit Rate (should only be when we working with master)
        TWBR_REG = TWBR_VALUE;
    10d0:	e0 e2       	ldi	r30, 0x20	; 32
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	80 83       	st	Z, r24
        TWSR_REG = TWI_PRESCALER_VALUE; // Set prescaler bits
    10d8:	e1 e2       	ldi	r30, 0x21	; 33
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	10 82       	st	Z, r1
    #endif

    // Enable TWI Interrupt
    GIE_enuEnable();
    10de:	0e 94 4e 12 	call	0x249c	; 0x249c <GIE_enuEnable>

    // Configure TWCR register based on ACK configuration
    #if (TWI_ACK_CONFIG == TWI_ACK_ENABLE)
        TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWEA) | (1 << TWCR_TWIE);
    10e2:	e6 e5       	ldi	r30, 0x56	; 86
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	85 e4       	ldi	r24, 0x45	; 69
    10e8:	80 83       	st	Z, r24
        TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWIE);
    #endif

    // Configure General Call Enable (GCE)
    #if (TWI_GCE_CONFIG == TWI_GCE_ENABLE)
        SET_BIT(TWAR_REG, TWAR_TWGCE);
    10ea:	a2 e2       	ldi	r26, 0x22	; 34
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e2 e2       	ldi	r30, 0x22	; 34
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	8c 93       	st	X, r24
    #elif (TWI_GCE_CONFIG == TWI_GCE_DISABLE)
        CLR_BIT(TWAR_REG, TWAR_TWGCE);
    #endif

    // Set Address for MC
    TWAR_REG = (TWAR_REG & 0x01) | TWI_SET_ADDR;
    10f8:	a2 e2       	ldi	r26, 0x22	; 34
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e2       	ldi	r30, 0x22	; 34
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	81 70       	andi	r24, 0x01	; 1
    1104:	88 60       	ori	r24, 0x08	; 8
    1106:	8c 93       	st	X, r24

    Local_enuErrorState = TWI_STATUS_OK;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorState;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
}
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <TWI_enuStartCondition>:



TWIStatus_t TWI_enuStartCondition(void){
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	0f 92       	push	r0
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1120:	19 82       	std	Y+1, r1	; 0x01
	 * TWEN bit must be set whenever you want to intiate a TWI operation.
	 * To send start condition enable TWI by setting TWSTA, TWINT, and TWEN in one operation.
	 * This ensures that TWI modules receives a consistent command and avoids intermediate states.
	 * */

	TWCR_REG = (1 << TWCR_TWSTA) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1122:	e6 e5       	ldi	r30, 0x56	; 86
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	84 ea       	ldi	r24, 0xA4	; 164
    1128:	80 83       	st	Z, r24



	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    112a:	e6 e5       	ldi	r30, 0x56	; 86
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	88 23       	and	r24, r24
    1132:	dc f7       	brge	.-10     	; 0x112a <TWI_enuStartCondition+0x14>
	 * 1  1  1  1  {1 0 0   0}
	 *
	 * 0xF8
	 * */

	if( (TWSR_REG & 0xF8) == TWI_START_SUCCESS_CODE){
    1134:	e1 e2       	ldi	r30, 0x21	; 33
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	88 7f       	andi	r24, 0xF8	; 248
    1140:	90 70       	andi	r25, 0x00	; 0
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	91 05       	cpc	r25, r1
    1146:	11 f4       	brne	.+4      	; 0x114c <TWI_enuStartCondition+0x36>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    114c:	89 81       	ldd	r24, Y+1	; 0x01
}
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <TWI_enuRepeatStartCondition>:

TWIStatus_t TWI_enuRepeatStartCondition(void){
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	0f 92       	push	r0
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1160:	19 82       	std	Y+1, r1	; 0x01
	 * TWEN bit must be set whenever you want to intiate a TWI operation.
	 * To send start condition enable TWI by setting TWSTA, TWINT, and TWEN in one operation.
	 * This ensures that TWI modules receives a consistent command and avoids intermediate states.
	 * */

	TWCR_REG = (1 << TWCR_TWSTA) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1162:	e6 e5       	ldi	r30, 0x56	; 86
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	84 ea       	ldi	r24, 0xA4	; 164
    1168:	80 83       	st	Z, r24


	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    116a:	e6 e5       	ldi	r30, 0x56	; 86
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	88 23       	and	r24, r24
    1172:	dc f7       	brge	.-10     	; 0x116a <TWI_enuRepeatStartCondition+0x14>
	 * 0xF8
	 * */



	if( (TWSR_REG &0xF8) == TWI_RSTART_SUCCESS_CODE){
    1174:	e1 e2       	ldi	r30, 0x21	; 33
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	88 7f       	andi	r24, 0xF8	; 248
    1180:	90 70       	andi	r25, 0x00	; 0
    1182:	80 31       	cpi	r24, 0x10	; 16
    1184:	91 05       	cpc	r25, r1
    1186:	11 f4       	brne	.+4      	; 0x118c <TWI_enuRepeatStartCondition+0x36>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enu_ErrorState;
    118c:	89 81       	ldd	r24, Y+1	; 0x01
}
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TWI_enuStopCondition>:


//! since there no status code why not doing macro like function
// IDEAS for feature development
TWIStatus_t TWI_enuStopCondition(void){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    11a0:	19 82       	std	Y+1, r1	; 0x01
	 * TWCR_TWINT & TWCR_TWEN - essential to start TWI action
	 *
	 * */


    TWCR_REG = (1 << TWCR_TWSTO) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    11a2:	e6 e5       	ldi	r30, 0x56	; 86
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	84 e9       	ldi	r24, 0x94	; 148
    11a8:	80 83       	st	Z, r24


	Local_enu_ErrorState = TWI_STATUS_OK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <TWI_enuSetSlaveOperation>:


TWIStatus_t TWI_enuSetSlaveOperation(
		uint8_t copy_u8SlaveAddress, uint8_t copy_u8Operation){
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <TWI_enuSetSlaveOperation+0x6>
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	8a 83       	std	Y+2, r24	; 0x02
    11c6:	6b 83       	std	Y+3, r22	; 0x03

	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    11c8:	19 82       	std	Y+1, r1	; 0x01

    // Load the slave address and operation (read/write) into the data register
	TWDR_REG = (copy_u8SlaveAddress << 1) | (copy_u8Operation);
    11ca:	e3 e2       	ldi	r30, 0x23	; 35
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	98 2f       	mov	r25, r24
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	89 2b       	or	r24, r25
    11de:	80 83       	st	Z, r24

    TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    11e0:	e6 e5       	ldi	r30, 0x56	; 86
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	84 e8       	ldi	r24, 0x84	; 132
    11e6:	80 83       	st	Z, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    11e8:	e6 e5       	ldi	r30, 0x56	; 86
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	88 23       	and	r24, r24
    11f0:	dc f7       	brge	.-10     	; 0x11e8 <TWI_enuSetSlaveOperation+0x30>




	if(copy_u8Operation == TWI_WriteOperation){
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 23       	and	r24, r24
    11f6:	69 f4       	brne	.+26     	; 0x1212 <TWI_enuSetSlaveOperation+0x5a>

		if((TWSR_REG &0xF8) == TWI_SLA_WR_ACK_TSUCCESS_CODE){
    11f8:	e1 e2       	ldi	r30, 0x21	; 33
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	88 7f       	andi	r24, 0xF8	; 248
    1204:	90 70       	andi	r25, 0x00	; 0
    1206:	88 31       	cpi	r24, 0x18	; 24
    1208:	91 05       	cpc	r25, r1
    120a:	91 f4       	brne	.+36     	; 0x1230 <TWI_enuSetSlaveOperation+0x78>
			Local_enu_ErrorState = TWI_STATUS_OK;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <TWI_enuSetSlaveOperation+0x78>
		}

	} else if(copy_u8Operation == TWI_ReadOperation){
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	61 f4       	brne	.+24     	; 0x1230 <TWI_enuSetSlaveOperation+0x78>

		if((TWSR_REG &0xF8) == TWI_SLA_RD_ACK_TSUCCESS_CODE){
    1218:	e1 e2       	ldi	r30, 0x21	; 33
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	88 7f       	andi	r24, 0xF8	; 248
    1224:	90 70       	andi	r25, 0x00	; 0
    1226:	80 34       	cpi	r24, 0x40	; 64
    1228:	91 05       	cpc	r25, r1
    122a:	11 f4       	brne	.+4      	; 0x1230 <TWI_enuSetSlaveOperation+0x78>
			Local_enu_ErrorState = TWI_STATUS_OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
		}
	}



	return Local_enu_ErrorState;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <TWI_enuWriteData>:

TWIStatus_t	TWI_enuWriteData(uint8_t copy_u8Data){
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <TWI_enuWriteData+0x6>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    124a:	19 82       	std	Y+1, r1	; 0x01

	TWDR_REG = copy_u8Data;
    124c:	e3 e2       	ldi	r30, 0x23	; 35
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 83       	st	Z, r24


    // Clear the TWINT flag and set TWEN to start the operation
    TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1254:	e6 e5       	ldi	r30, 0x56	; 86
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	84 e8       	ldi	r24, 0x84	; 132
    125a:	80 83       	st	Z, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    125c:	e6 e5       	ldi	r30, 0x56	; 86
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	88 23       	and	r24, r24
    1264:	dc f7       	brge	.-10     	; 0x125c <TWI_enuWriteData+0x1e>
		#if(TWI_MODE_M_or_S == TWI_MASTER_MODE)




			if((TWSR_REG & 0xF8) == 0x28){
    1266:	e1 e2       	ldi	r30, 0x21	; 33
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	88 7f       	andi	r24, 0xF8	; 248
    1272:	90 70       	andi	r25, 0x00	; 0
    1274:	88 32       	cpi	r24, 0x28	; 40
    1276:	91 05       	cpc	r25, r1
    1278:	11 f4       	brne	.+4      	; 0x127e <TWI_enuWriteData+0x40>


				Local_enu_ErrorState = TWI_STATUS_OK;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	89 83       	std	Y+1, r24	; 0x01
		#endif

	#endif


	return Local_enu_ErrorState;
    127e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <TWI_enuReadData>:


//!{works fine with status checking}
TWIStatus_t	TWI_enuReadData(uint8_t  *copy_pu8Data){
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	00 d0       	rcall	.+0      	; 0x1290 <TWI_enuReadData+0x6>
    1290:	0f 92       	push	r0
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	9b 83       	std	Y+3, r25	; 0x03
    1298:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    129a:	19 82       	std	Y+1, r1	; 0x01

	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    129c:	a6 e5       	ldi	r26, 0x56	; 86
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e6 e5       	ldi	r30, 0x56	; 86
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 68       	ori	r24, 0x80	; 128
    12a8:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    12aa:	e6 e5       	ldi	r30, 0x56	; 86
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	88 23       	and	r24, r24
    12b2:	dc f7       	brge	.-10     	; 0x12aa <TWI_enuReadData+0x20>
	// 0x88 - (slave)  data has been received not ack has been returned

	#if(TWI_ACK_CONFIG == TWI_ACK_ENABLE)

		// Master Receive
		if( ((TWSR_REG & 0xF8) == TWI_M_RSUCCESS_CODE_withAck) ){
    12b4:	e1 e2       	ldi	r30, 0x21	; 33
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	88 7f       	andi	r24, 0xF8	; 248
    12c0:	90 70       	andi	r25, 0x00	; 0
    12c2:	80 35       	cpi	r24, 0x50	; 80
    12c4:	91 05       	cpc	r25, r1
    12c6:	19 f4       	brne	.+6      	; 0x12ce <TWI_enuReadData+0x44>
			Local_enu_ErrorState = TWI_STATUS_OK;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	0c c0       	rjmp	.+24     	; 0x12e6 <TWI_enuReadData+0x5c>

		}

		// Slave Receive
		else if(((TWSR_REG & 0xF8) == TWI_S_RSUCCESS_CODE_withACK)){
    12ce:	e1 e2       	ldi	r30, 0x21	; 33
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	88 7f       	andi	r24, 0xF8	; 248
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	80 38       	cpi	r24, 0x80	; 128
    12de:	91 05       	cpc	r25, r1
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <TWI_enuReadData+0x5c>
			Local_enu_ErrorState = TWI_STATUS_OK;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	89 83       	std	Y+1, r24	; 0x01
			Local_enu_ErrorState = TWI_STATUS_OK;
		}
	#endif

	// Read data from TWDR Register
	*copy_pu8Data = TWDR_REG;
    12e6:	e3 e2       	ldi	r30, 0x23	; 35
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	ea 81       	ldd	r30, Y+2	; 0x02
    12ee:	fb 81       	ldd	r31, Y+3	; 0x03
    12f0:	80 83       	st	Z, r24

	return Local_enu_ErrorState;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <TWI_enuCheckMyAddress>:


//!{works fine with status checking}
ErrorStatus_t TWI_enuCheckMyAddress(void){
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    130a:	19 82       	std	Y+1, r1	; 0x01


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    130c:	a6 e5       	ldi	r26, 0x56	; 86
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e6 e5       	ldi	r30, 0x56	; 86
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	80 68       	ori	r24, 0x80	; 128
    1318:	8c 93       	st	X, r24


	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    131a:	e6 e5       	ldi	r30, 0x56	; 86
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	88 23       	and	r24, r24
    1322:	dc f7       	brge	.-10     	; 0x131a <TWI_enuCheckMyAddress+0x1a>


	// 0x60 - SLA+W has been received, ACK has been returned
	// 0xA8 - SLA+R has been received, ACK has been returned

	if((TWSR_REG & 0xF8) == TWI_SLA_WR_ACK_RSUCCESS_CODE){
    1324:	e1 e2       	ldi	r30, 0x21	; 33
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	88 7f       	andi	r24, 0xF8	; 248
    1330:	90 70       	andi	r25, 0x00	; 0
    1332:	80 36       	cpi	r24, 0x60	; 96
    1334:	91 05       	cpc	r25, r1
    1336:	19 f4       	brne	.+6      	; 0x133e <TWI_enuCheckMyAddress+0x3e>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	0c c0       	rjmp	.+24     	; 0x1356 <TWI_enuCheckMyAddress+0x56>
	}


	else if((TWSR_REG & 0xF8) == TWI_SLA_RD_ACK_RSUCCESS_CODE){
    133e:	e1 e2       	ldi	r30, 0x21	; 33
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	88 7f       	andi	r24, 0xF8	; 248
    134a:	90 70       	andi	r25, 0x00	; 0
    134c:	88 3a       	cpi	r24, 0xA8	; 168
    134e:	91 05       	cpc	r25, r1
    1350:	11 f4       	brne	.+4      	; 0x1356 <TWI_enuCheckMyAddress+0x56>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
}
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <TIMER0_voidInit>:
/*******************************************************************************************************/



/****************************************** TIMER0 FUNCTIONS ******************************************/
void TIMER0_voidInit(void){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	 * 3. Enable Interrupt (Compre Match Interrupt - OverFlow Interrupt)
	 *
	 * */

	/** Active global interrupt **/
	GIE_enuEnable();
    1368:	0e 94 4e 12 	call	0x249c	; 0x249c <GIE_enuEnable>
			#endif
		#endif


	#elif(TIMER0_MODE_SELECT == TIMER_MODE_FastPWM)
		SET_BIT(TCCR0_REG, TCCR0_WGM00);
    136c:	a3 e5       	ldi	r26, 0x53	; 83
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e3 e5       	ldi	r30, 0x53	; 83
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	80 64       	ori	r24, 0x40	; 64
    1378:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_WGM01);
    137a:	a3 e5       	ldi	r26, 0x53	; 83
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e3 e5       	ldi	r30, 0x53	; 83
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	88 60       	ori	r24, 0x08	; 8
    1386:	8c 93       	st	X, r24

		#if(TIMER0_FastPwm_Type == TIMER_FastPwmType_Inverted)
			CLR_BIT(TCCR0_REG, TCCR0_COM00);
    1388:	a3 e5       	ldi	r26, 0x53	; 83
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e3 e5       	ldi	r30, 0x53	; 83
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8f 7e       	andi	r24, 0xEF	; 239
    1394:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, TCCR0_COM01);
    1396:	a3 e5       	ldi	r26, 0x53	; 83
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e3 e5       	ldi	r30, 0x53	; 83
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 62       	ori	r24, 0x20	; 32
    13a2:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, TCCR0_COM01);

		#endif

		// By default, OC0 pin is default output pin for Timer0's PWM signal
		DIO_enuSetPinDirection(TIMER_OC0_PORT, TIMER_OC0_PIN, DIO_u8OUTPUT);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	63 e0       	ldi	r22, 0x03	; 3
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
		CLR_BIT(TCCR0_REG, TCCR0_CS00);
		SET_BIT(TCCR0_REG, TCCR0_CS01);
		CLR_BIT(TCCR0_REG, TCCR0_CS02);

	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_64)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
    13ae:	a3 e5       	ldi	r26, 0x53	; 83
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e3 e5       	ldi	r30, 0x53	; 83
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	81 60       	ori	r24, 0x01	; 1
    13ba:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_CS01);
    13bc:	a3 e5       	ldi	r26, 0x53	; 83
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e3 e5       	ldi	r30, 0x53	; 83
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	82 60       	ori	r24, 0x02	; 2
    13c8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_CS02);
    13ca:	a3 e5       	ldi	r26, 0x53	; 83
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e3 e5       	ldi	r30, 0x53	; 83
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8b 7f       	andi	r24, 0xFB	; 251
    13d6:	8c 93       	st	X, r24
	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_1024)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
		CLR_BIT(TCCR0_REG, TCCR0_CS01);
		SET_BIT(TCCR0_REG, TCCR0_CS02);
	#endif
}
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <TIMER0_voidStart>:

void TIMER0_voidStart(void){
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			SET_BIT(TIMSK_REG, TIMSK_OCIE0);

		#endif
}
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <TIMER0_voidStop>:

void TIMER0_voidStop(void){
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			CLR_BIT(TIMSK_REG, TIMSK_OCIE0);

		#endif
}
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <TIMER0_voidScheduleTask>:

uint8_t TIMER0_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	60 97       	sbiw	r28, 0x10	; 16
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	9a 87       	std	Y+10, r25	; 0x0a
    1418:	89 87       	std	Y+9, r24	; 0x09
    141a:	4b 87       	std	Y+11, r20	; 0x0b
    141c:	5c 87       	std	Y+12, r21	; 0x0c
    141e:	6d 87       	std	Y+13, r22	; 0x0d
    1420:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    1422:	1d 82       	std	Y+5, r1	; 0x05
    1424:	1e 82       	std	Y+6, r1	; 0x06
    1426:	1f 82       	std	Y+7, r1	; 0x07
    1428:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR0_REG & 0x07){
    142a:	e3 e5       	ldi	r30, 0x53	; 83
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	9c 01       	movw	r18, r24
    1436:	27 70       	andi	r18, 0x07	; 7
    1438:	30 70       	andi	r19, 0x00	; 0
    143a:	38 8b       	std	Y+16, r19	; 0x10
    143c:	2f 87       	std	Y+15, r18	; 0x0f
    143e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1440:	98 89       	ldd	r25, Y+16	; 0x10
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	91 05       	cpc	r25, r1
    1446:	69 f1       	breq	.+90     	; 0x14a2 <TIMER0_voidScheduleTask+0xa8>
    1448:	2f 85       	ldd	r18, Y+15	; 0x0f
    144a:	38 89       	ldd	r19, Y+16	; 0x10
    144c:	24 30       	cpi	r18, 0x04	; 4
    144e:	31 05       	cpc	r19, r1
    1450:	5c f4       	brge	.+22     	; 0x1468 <TIMER0_voidScheduleTask+0x6e>
    1452:	8f 85       	ldd	r24, Y+15	; 0x0f
    1454:	98 89       	ldd	r25, Y+16	; 0x10
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	91 05       	cpc	r25, r1
    145a:	89 f0       	breq	.+34     	; 0x147e <TIMER0_voidScheduleTask+0x84>
    145c:	2f 85       	ldd	r18, Y+15	; 0x0f
    145e:	38 89       	ldd	r19, Y+16	; 0x10
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	a9 f0       	breq	.+42     	; 0x1490 <TIMER0_voidScheduleTask+0x96>
    1466:	37 c0       	rjmp	.+110    	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	98 89       	ldd	r25, Y+16	; 0x10
    146c:	84 30       	cpi	r24, 0x04	; 4
    146e:	91 05       	cpc	r25, r1
    1470:	09 f1       	breq	.+66     	; 0x14b4 <TIMER0_voidScheduleTask+0xba>
    1472:	2f 85       	ldd	r18, Y+15	; 0x0f
    1474:	38 89       	ldd	r19, Y+16	; 0x10
    1476:	25 30       	cpi	r18, 0x05	; 5
    1478:	31 05       	cpc	r19, r1
    147a:	29 f1       	breq	.+74     	; 0x14c6 <TIMER0_voidScheduleTask+0xcc>
    147c:	2c c0       	rjmp	.+88     	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	af 83       	std	Y+7, r26	; 0x07
    148c:	b8 87       	std	Y+8, r27	; 0x08
    148e:	23 c0       	rjmp	.+70     	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    1490:	88 e0       	ldi	r24, 0x08	; 8
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a0 e0       	ldi	r26, 0x00	; 0
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	8d 83       	std	Y+5, r24	; 0x05
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	af 83       	std	Y+7, r26	; 0x07
    149e:	b8 87       	std	Y+8, r27	; 0x08
    14a0:	1a c0       	rjmp	.+52     	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    14a2:	80 e4       	ldi	r24, 0x40	; 64
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a0 e0       	ldi	r26, 0x00	; 0
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	9e 83       	std	Y+6, r25	; 0x06
    14ae:	af 83       	std	Y+7, r26	; 0x07
    14b0:	b8 87       	std	Y+8, r27	; 0x08
    14b2:	11 c0       	rjmp	.+34     	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	af 83       	std	Y+7, r26	; 0x07
    14c2:	b8 87       	std	Y+8, r27	; 0x08
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	94 e0       	ldi	r25, 0x04	; 4
    14ca:	a0 e0       	ldi	r26, 0x00	; 0
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	8d 83       	std	Y+5, r24	; 0x05
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	af 83       	std	Y+7, r26	; 0x07
    14d4:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    14d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14da:	8d 85       	ldd	r24, Y+13	; 0x0d
    14dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	34 e2       	ldi	r19, 0x24	; 36
    14e2:	44 e7       	ldi	r20, 0x74	; 116
    14e4:	5b e4       	ldi	r21, 0x4B	; 75
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	7c 01       	movw	r14, r24
    14f0:	8d 01       	movw	r16, r26
    14f2:	6d 81       	ldd	r22, Y+5	; 0x05
    14f4:	7e 81       	ldd	r23, Y+6	; 0x06
    14f6:	8f 81       	ldd	r24, Y+7	; 0x07
    14f8:	98 85       	ldd	r25, Y+8	; 0x08
    14fa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	c8 01       	movw	r24, r16
    1504:	b7 01       	movw	r22, r14
    1506:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	9a 83       	std	Y+2, r25	; 0x02
    1512:	ab 83       	std	Y+3, r26	; 0x03
    1514:	bc 83       	std	Y+4, r27	; 0x04
		}

	#endif


		TIMERS_ISR_Functions[0] = TaskCallback;
    1516:	89 85       	ldd	r24, Y+9	; 0x09
    1518:	9a 85       	ldd	r25, Y+10	; 0x0a
    151a:	90 93 8b 01 	sts	0x018B, r25
    151e:	80 93 8a 01 	sts	0x018A, r24
		TIMER0_voidStart();
    1522:	0e 94 ef 09 	call	0x13de	; 0x13de <TIMER0_voidStart>
	return 0;
    1526:	80 e0       	ldi	r24, 0x00	; 0
}
    1528:	60 96       	adiw	r28, 0x10	; 16
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	08 95       	ret

00001542 <TIMER0_voidSetPWM>:

void  TIMER0_voidSetPWM(uint8_t copy_u8DutyCycle){
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Avr32 does has floating point operation
	 * **/


	OCR0_REG = (uint8_t)(((uint16_t)copy_u8DutyCycle * 256) / 100);
    154e:	ec e5       	ldi	r30, 0x5C	; 92
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	98 2f       	mov	r25, r24
    155a:	88 27       	eor	r24, r24
    155c:	24 e6       	ldi	r18, 0x64	; 100
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	b9 01       	movw	r22, r18
    1562:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <__udivmodhi4>
    1566:	cb 01       	movw	r24, r22
    1568:	80 83       	st	Z, r24
}
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <TIMER1_voidInit>:
/******************************************************************************************************/


/****************************************** TIMER1 FUNCTIONS ******************************************/

void TIMER1_voidInit(void) {
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	 *
	 */


	/** Active global interrupt **/
	GIE_enuEnable();
    157a:	0e 94 4e 12 	call	0x249c	; 0x249c <GIE_enuEnable>


	#if(TIMER1_OC1A_OUTPUT_STATE == TIMER1_OC1_OUTPUT_ENABLE)
		DIO_enuSetPinDirection(TIMER_OC1A_PORT, TIMER_OC1A_PIN, DIO_u8OUTPUT);
    157e:	83 e0       	ldi	r24, 0x03	; 3
    1580:	65 e0       	ldi	r22, 0x05	; 5
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
		#elif(TIMER_OC1A_OUTPUT_MODE == TIMER_SET_OC1A)
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A0);
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A1);

		#elif(TIMER_OC1A_OUTPUT_MODE == TIMER_CLR_OC1A)
			CLR_BIT(TCCR1A_REG, TCCR1A_COM1A0);
    1588:	af e4       	ldi	r26, 0x4F	; 79
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ef e4       	ldi	r30, 0x4F	; 79
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8f 7b       	andi	r24, 0xBF	; 191
    1594:	8c 93       	st	X, r24
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A1);
    1596:	af e4       	ldi	r26, 0x4F	; 79
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ef e4       	ldi	r30, 0x4F	; 79
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	80 68       	ori	r24, 0x80	; 128
    15a2:	8c 93       	st	X, r24

		CLR_BIT(TCCR1B_REG, TCCR1B_WGM12);
		SET_BIT(TCCR1B_REG, TCCR1B_WGM13);

	#elif(TIMER1_MODE_SELECT == TIMER1_MODE_FastPWM_16bit_FREQ)
		CLR_BIT(TCCR1A_REG, TCCR1A_WGM10);
    15a4:	af e4       	ldi	r26, 0x4F	; 79
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ef e4       	ldi	r30, 0x4F	; 79
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8e 7f       	andi	r24, 0xFE	; 254
    15b0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG, TCCR1A_WGM11);
    15b2:	af e4       	ldi	r26, 0x4F	; 79
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ef e4       	ldi	r30, 0x4F	; 79
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	82 60       	ori	r24, 0x02	; 2
    15be:	8c 93       	st	X, r24

		SET_BIT(TCCR1B_REG, TCCR1B_WGM12);
    15c0:	ae e4       	ldi	r26, 0x4E	; 78
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ee e4       	ldi	r30, 0x4E	; 78
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	88 60       	ori	r24, 0x08	; 8
    15cc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_WGM13);
    15ce:	ae e4       	ldi	r26, 0x4E	; 78
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ee e4       	ldi	r30, 0x4E	; 78
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 61       	ori	r24, 0x10	; 16
    15da:	8c 93       	st	X, r24


/***************************************************************************/
	/**2. Set Prescaller clock **/
	#if(TIMER1_CLK_PRE_SELECT == TIMER_PRES_01)
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    15dc:	ae e4       	ldi	r26, 0x4E	; 78
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ee e4       	ldi	r30, 0x4E	; 78
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    15ea:	ae e4       	ldi	r26, 0x4E	; 78
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	ee e4       	ldi	r30, 0x4E	; 78
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	8d 7f       	andi	r24, 0xFD	; 253
    15f6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    15f8:	ae e4       	ldi	r26, 0x4E	; 78
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	ee e4       	ldi	r30, 0x4E	; 78
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8b 7f       	andi	r24, 0xFB	; 251
    1604:	8c 93       	st	X, r24
	#elif(TIMER1_CLK_PRE_SELECT == TIMER_PRES_1024)
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
	#endif
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <Timer1_SetupForTimeMeasurement>:



ErrorStatus_t Timer1_SetupForTimeMeasurement(uint16 copy_u16prescaler){
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <Timer1_SetupForTimeMeasurement+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <Timer1_SetupForTimeMeasurement+0x8>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	9b 83       	std	Y+3, r25	; 0x03
    161a:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    161c:	19 82       	std	Y+1, r1	; 0x01


	// Setup Prescaler
	if(copy_u16prescaler == 1){
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	b1 f4       	brne	.+44     	; 0x1654 <Timer1_SetupForTimeMeasurement+0x48>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    1628:	ae e4       	ldi	r26, 0x4E	; 78
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	ee e4       	ldi	r30, 0x4E	; 78
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	81 60       	ori	r24, 0x01	; 1
    1634:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    1636:	ae e4       	ldi	r26, 0x4E	; 78
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	ee e4       	ldi	r30, 0x4E	; 78
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	8d 7f       	andi	r24, 0xFD	; 253
    1642:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    1644:	ae e4       	ldi	r26, 0x4E	; 78
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ee e4       	ldi	r30, 0x4E	; 78
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8b 7f       	andi	r24, 0xFB	; 251
    1650:	8c 93       	st	X, r24
    1652:	71 c0       	rjmp	.+226    	; 0x1736 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if (copy_u16prescaler == 8){
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	91 05       	cpc	r25, r1
    165c:	b1 f4       	brne	.+44     	; 0x168a <Timer1_SetupForTimeMeasurement+0x7e>
		CLR_BIT(TCCR1B_REG, TCCR1B_CS10);
    165e:	ae e4       	ldi	r26, 0x4E	; 78
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	ee e4       	ldi	r30, 0x4E	; 78
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8e 7f       	andi	r24, 0xFE	; 254
    166a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS11);
    166c:	ae e4       	ldi	r26, 0x4E	; 78
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ee e4       	ldi	r30, 0x4E	; 78
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	82 60       	ori	r24, 0x02	; 2
    1678:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    167a:	ae e4       	ldi	r26, 0x4E	; 78
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ee e4       	ldi	r30, 0x4E	; 78
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	8b 7f       	andi	r24, 0xFB	; 251
    1686:	8c 93       	st	X, r24
    1688:	56 c0       	rjmp	.+172    	; 0x1736 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 64){
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	9b 81       	ldd	r25, Y+3	; 0x03
    168e:	80 34       	cpi	r24, 0x40	; 64
    1690:	91 05       	cpc	r25, r1
    1692:	b1 f4       	brne	.+44     	; 0x16c0 <Timer1_SetupForTimeMeasurement+0xb4>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    1694:	ae e4       	ldi	r26, 0x4E	; 78
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ee e4       	ldi	r30, 0x4E	; 78
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	81 60       	ori	r24, 0x01	; 1
    16a0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS11);
    16a2:	ae e4       	ldi	r26, 0x4E	; 78
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ee e4       	ldi	r30, 0x4E	; 78
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	82 60       	ori	r24, 0x02	; 2
    16ae:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    16b0:	ae e4       	ldi	r26, 0x4E	; 78
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ee e4       	ldi	r30, 0x4E	; 78
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8b 7f       	andi	r24, 0xFB	; 251
    16bc:	8c 93       	st	X, r24
    16be:	3b c0       	rjmp	.+118    	; 0x1736 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 256){
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	9b 81       	ldd	r25, Y+3	; 0x03
    16c4:	21 e0       	ldi	r18, 0x01	; 1
    16c6:	80 30       	cpi	r24, 0x00	; 0
    16c8:	92 07       	cpc	r25, r18
    16ca:	b1 f4       	brne	.+44     	; 0x16f8 <Timer1_SetupForTimeMeasurement+0xec>
		CLR_BIT(TCCR1B_REG, TCCR1B_CS10);
    16cc:	ae e4       	ldi	r26, 0x4E	; 78
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ee e4       	ldi	r30, 0x4E	; 78
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8e 7f       	andi	r24, 0xFE	; 254
    16d8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    16da:	ae e4       	ldi	r26, 0x4E	; 78
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ee e4       	ldi	r30, 0x4E	; 78
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8d 7f       	andi	r24, 0xFD	; 253
    16e6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
    16e8:	ae e4       	ldi	r26, 0x4E	; 78
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ee e4       	ldi	r30, 0x4E	; 78
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	84 60       	ori	r24, 0x04	; 4
    16f4:	8c 93       	st	X, r24
    16f6:	1f c0       	rjmp	.+62     	; 0x1736 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 1024){
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	9b 81       	ldd	r25, Y+3	; 0x03
    16fc:	24 e0       	ldi	r18, 0x04	; 4
    16fe:	80 30       	cpi	r24, 0x00	; 0
    1700:	92 07       	cpc	r25, r18
    1702:	b1 f4       	brne	.+44     	; 0x1730 <Timer1_SetupForTimeMeasurement+0x124>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    1704:	ae e4       	ldi	r26, 0x4E	; 78
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ee e4       	ldi	r30, 0x4E	; 78
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	81 60       	ori	r24, 0x01	; 1
    1710:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    1712:	ae e4       	ldi	r26, 0x4E	; 78
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ee e4       	ldi	r30, 0x4E	; 78
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8d 7f       	andi	r24, 0xFD	; 253
    171e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
    1720:	ae e4       	ldi	r26, 0x4E	; 78
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ee e4       	ldi	r30, 0x4E	; 78
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	84 60       	ori	r24, 0x04	; 4
    172c:	8c 93       	st	X, r24
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <Timer1_SetupForTimeMeasurement+0x12a>

	} else{
		return Local_enuErrrorState;
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	8c 83       	std	Y+4, r24	; 0x04
    1734:	0b c0       	rjmp	.+22     	; 0x174c <Timer1_SetupForTimeMeasurement+0x140>
	}


	// Setup normal mode without no pwm
	TCCR1A_REG = 0x00;
    1736:	ef e4       	ldi	r30, 0x4F	; 79
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	10 82       	st	Z, r1

	// Reset the timer counter
	RESET_TIMER1();
    173c:	ec e4       	ldi	r30, 0x4C	; 76
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	11 82       	std	Z+1, r1	; 0x01
    1742:	10 82       	st	Z, r1

	Local_enuErrrorState = ERROR_STATUS_OK;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    1748:	29 81       	ldd	r18, Y+1	; 0x01
    174a:	2c 83       	std	Y+4, r18	; 0x04
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <TIMER1_u16ReadCount>:


uint16 TIMER1_u16ReadCount(void){
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    1764:	ec e4       	ldi	r30, 0x4C	; 76
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
}
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <TIMER1_voidStart>:


void TIMER1_voidStart(void) {
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        SET_BIT(TIMSK_REG, TIMSK_OCIE1A);

    #endif
}
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <TIMER1_voidStop>:


void TIMER1_voidStop(void) {
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        CLR_BIT(TIMSK_REG, TIMSK_OCIE1A);

    #endif
}
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <TIMER1_voidScheduleTask>:

uint8_t TIMER1_voidScheduleTask(void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds) {
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	61 97       	sbiw	r28, 0x11	; 17
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	9a 87       	std	Y+10, r25	; 0x0a
    17ac:	89 87       	std	Y+9, r24	; 0x09
    17ae:	4b 87       	std	Y+11, r20	; 0x0b
    17b0:	5c 87       	std	Y+12, r21	; 0x0c
    17b2:	6d 87       	std	Y+13, r22	; 0x0d
    17b4:	7e 87       	std	Y+14, r23	; 0x0e
    uint32_t Local_u32PrescalerValue = 0;
    17b6:	1d 82       	std	Y+5, r1	; 0x05
    17b8:	1e 82       	std	Y+6, r1	; 0x06
    17ba:	1f 82       	std	Y+7, r1	; 0x07
    17bc:	18 86       	std	Y+8, r1	; 0x08

    switch(TCCR1B & 0x07) {
    17be:	ee e4       	ldi	r30, 0x4E	; 78
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9c 01       	movw	r18, r24
    17ca:	27 70       	andi	r18, 0x07	; 7
    17cc:	30 70       	andi	r19, 0x00	; 0
    17ce:	39 8b       	std	Y+17, r19	; 0x11
    17d0:	28 8b       	std	Y+16, r18	; 0x10
    17d2:	88 89       	ldd	r24, Y+16	; 0x10
    17d4:	99 89       	ldd	r25, Y+17	; 0x11
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	91 05       	cpc	r25, r1
    17da:	69 f1       	breq	.+90     	; 0x1836 <TIMER1_voidScheduleTask+0xa8>
    17dc:	28 89       	ldd	r18, Y+16	; 0x10
    17de:	39 89       	ldd	r19, Y+17	; 0x11
    17e0:	24 30       	cpi	r18, 0x04	; 4
    17e2:	31 05       	cpc	r19, r1
    17e4:	5c f4       	brge	.+22     	; 0x17fc <TIMER1_voidScheduleTask+0x6e>
    17e6:	88 89       	ldd	r24, Y+16	; 0x10
    17e8:	99 89       	ldd	r25, Y+17	; 0x11
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	91 05       	cpc	r25, r1
    17ee:	89 f0       	breq	.+34     	; 0x1812 <TIMER1_voidScheduleTask+0x84>
    17f0:	28 89       	ldd	r18, Y+16	; 0x10
    17f2:	39 89       	ldd	r19, Y+17	; 0x11
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	a9 f0       	breq	.+42     	; 0x1824 <TIMER1_voidScheduleTask+0x96>
    17fa:	38 c0       	rjmp	.+112    	; 0x186c <TIMER1_voidScheduleTask+0xde>
    17fc:	88 89       	ldd	r24, Y+16	; 0x10
    17fe:	99 89       	ldd	r25, Y+17	; 0x11
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	91 05       	cpc	r25, r1
    1804:	09 f1       	breq	.+66     	; 0x1848 <TIMER1_voidScheduleTask+0xba>
    1806:	28 89       	ldd	r18, Y+16	; 0x10
    1808:	39 89       	ldd	r19, Y+17	; 0x11
    180a:	25 30       	cpi	r18, 0x05	; 5
    180c:	31 05       	cpc	r19, r1
    180e:	29 f1       	breq	.+74     	; 0x185a <TIMER1_voidScheduleTask+0xcc>
    1810:	2d c0       	rjmp	.+90     	; 0x186c <TIMER1_voidScheduleTask+0xde>
        case 0x01: Local_u32PrescalerValue = 1; break;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	af 83       	std	Y+7, r26	; 0x07
    1820:	b8 87       	std	Y+8, r27	; 0x08
    1822:	27 c0       	rjmp	.+78     	; 0x1872 <TIMER1_voidScheduleTask+0xe4>
        case 0x02: Local_u32PrescalerValue = 8; break;
    1824:	88 e0       	ldi	r24, 0x08	; 8
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a0 e0       	ldi	r26, 0x00	; 0
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	af 83       	std	Y+7, r26	; 0x07
    1832:	b8 87       	std	Y+8, r27	; 0x08
    1834:	1e c0       	rjmp	.+60     	; 0x1872 <TIMER1_voidScheduleTask+0xe4>
        case 0x03: Local_u32PrescalerValue = 64; break;
    1836:	80 e4       	ldi	r24, 0x40	; 64
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a0 e0       	ldi	r26, 0x00	; 0
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	9e 83       	std	Y+6, r25	; 0x06
    1842:	af 83       	std	Y+7, r26	; 0x07
    1844:	b8 87       	std	Y+8, r27	; 0x08
    1846:	15 c0       	rjmp	.+42     	; 0x1872 <TIMER1_voidScheduleTask+0xe4>
        case 0x04: Local_u32PrescalerValue = 256; break;
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	af 83       	std	Y+7, r26	; 0x07
    1856:	b8 87       	std	Y+8, r27	; 0x08
    1858:	0c c0       	rjmp	.+24     	; 0x1872 <TIMER1_voidScheduleTask+0xe4>
        case 0x05: Local_u32PrescalerValue = 1024; break;
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	94 e0       	ldi	r25, 0x04	; 4
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	af 83       	std	Y+7, r26	; 0x07
    1868:	b8 87       	std	Y+8, r27	; 0x08
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <TIMER1_voidScheduleTask+0xe4>
        default: return 1; // Invalid prescaler setting
    186c:	31 e0       	ldi	r19, 0x01	; 1
    186e:	3f 87       	std	Y+15, r19	; 0x0f
    1870:	31 c0       	rjmp	.+98     	; 0x18d4 <TIMER1_voidScheduleTask+0x146>
    }

    float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU) / Local_u32PrescalerValue;
    1872:	6b 85       	ldd	r22, Y+11	; 0x0b
    1874:	7c 85       	ldd	r23, Y+12	; 0x0c
    1876:	8d 85       	ldd	r24, Y+13	; 0x0d
    1878:	9e 85       	ldd	r25, Y+14	; 0x0e
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	34 e2       	ldi	r19, 0x24	; 36
    187e:	44 e7       	ldi	r20, 0x74	; 116
    1880:	5b e4       	ldi	r21, 0x4B	; 75
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	7c 01       	movw	r14, r24
    188c:	8d 01       	movw	r16, r26
    188e:	6d 81       	ldd	r22, Y+5	; 0x05
    1890:	7e 81       	ldd	r23, Y+6	; 0x06
    1892:	8f 81       	ldd	r24, Y+7	; 0x07
    1894:	98 85       	ldd	r25, Y+8	; 0x08
    1896:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    189a:	9b 01       	movw	r18, r22
    189c:	ac 01       	movw	r20, r24
    189e:	c8 01       	movw	r24, r16
    18a0:	b7 01       	movw	r22, r14
    18a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	ab 83       	std	Y+3, r26	; 0x03
    18b0:	bc 83       	std	Y+4, r27	; 0x04
            OCR1A = 65535;
            TIMER1_TARGET_NTICKS = (uint32_t)(Local_f64Totalticks / 65535.0);
        }
    #endif

    TIMER1_CURRENT_NTICKS = 0;
    18b2:	10 92 82 01 	sts	0x0182, r1
    18b6:	10 92 83 01 	sts	0x0183, r1
    18ba:	10 92 84 01 	sts	0x0184, r1
    18be:	10 92 85 01 	sts	0x0185, r1
    TIMERS_ISR_Functions[1] = TaskCallback;
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	90 93 8d 01 	sts	0x018D, r25
    18ca:	80 93 8c 01 	sts	0x018C, r24
    TIMER1_voidStart();
    18ce:	0e 94 b9 0b 	call	0x1772	; 0x1772 <TIMER1_voidStart>
    return 0;
    18d2:	1f 86       	std	Y+15, r1	; 0x0f
    18d4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    18d6:	61 96       	adiw	r28, 0x11	; 17
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	08 95       	ret

000018f0 <TIMER1_voidSetPWM>:


void TIMER1_voidSetPWM(uint8_t copy_u8DutyCycle) {
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	00 d0       	rcall	.+0      	; 0x1902 <TIMER1_voidSetPWM+0x12>
    1902:	0f 92       	push	r0
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	8b 83       	std	Y+3, r24	; 0x03

		uint16_t Local_u16TopValue = 0;
    190a:	1a 82       	std	Y+2, r1	; 0x02
    190c:	19 82       	std	Y+1, r1	; 0x01
			// Ensure ICR1 is already set correctly during initialization
			Local_u16TopValue = ICR1;  // ICR1 for Phase and Frequency Correct

		#endif

		OCR1A_REG = (uint16_t)(((uint32_t)copy_u8DutyCycle * Local_u16TopValue) / 100);
    190e:	0f 2e       	mov	r0, r31
    1910:	fa e4       	ldi	r31, 0x4A	; 74
    1912:	cf 2e       	mov	r12, r31
    1914:	dd 24       	eor	r13, r13
    1916:	f0 2d       	mov	r31, r0
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	e8 2e       	mov	r14, r24
    191c:	ff 24       	eor	r15, r15
    191e:	00 e0       	ldi	r16, 0x00	; 0
    1920:	10 e0       	ldi	r17, 0x00	; 0
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	9c 01       	movw	r18, r24
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	c8 01       	movw	r24, r16
    192e:	b7 01       	movw	r22, r14
    1930:	0e 94 17 26 	call	0x4c2e	; 0x4c2e <__mulsi3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	24 e6       	ldi	r18, 0x64	; 100
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <__udivmodsi4>
    1948:	da 01       	movw	r26, r20
    194a:	c9 01       	movw	r24, r18
    194c:	f6 01       	movw	r30, r12
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24

}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	cf 90       	pop	r12
    1968:	08 95       	ret

0000196a <TIMER1_voidSetPWM_16bit>:

#if(TIMER1_MODE_SELECT == TIMER1_MODE_FastPWM_16bit_FREQ || TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit_FREQ )
void TIMER1_voidSetPWM_16bit(double copy_u8DutyCycle, uint32_t copy_u32Frequency) {
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	df 93       	push	r29
    1970:	cf 93       	push	r28
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	66 97       	sbiw	r28, 0x16	; 22
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	6d 87       	std	Y+13, r22	; 0x0d
    1984:	7e 87       	std	Y+14, r23	; 0x0e
    1986:	8f 87       	std	Y+15, r24	; 0x0f
    1988:	98 8b       	std	Y+16, r25	; 0x10
    198a:	29 8b       	std	Y+17, r18	; 0x11
    198c:	3a 8b       	std	Y+18, r19	; 0x12
    198e:	4b 8b       	std	Y+19, r20	; 0x13
    1990:	5c 8b       	std	Y+20, r21	; 0x14
    double Local_u32PrescalerValue = 0;
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e0       	ldi	r26, 0x00	; 0
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	89 87       	std	Y+9, r24	; 0x09
    199c:	9a 87       	std	Y+10, r25	; 0x0a
    199e:	ab 87       	std	Y+11, r26	; 0x0b
    19a0:	bc 87       	std	Y+12, r27	; 0x0c
    switch (TCCR1B_REG & 0x07) {
    19a2:	ee e4       	ldi	r30, 0x4E	; 78
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	9c 01       	movw	r18, r24
    19ae:	27 70       	andi	r18, 0x07	; 7
    19b0:	30 70       	andi	r19, 0x00	; 0
    19b2:	3e 8b       	std	Y+22, r19	; 0x16
    19b4:	2d 8b       	std	Y+21, r18	; 0x15
    19b6:	8d 89       	ldd	r24, Y+21	; 0x15
    19b8:	9e 89       	ldd	r25, Y+22	; 0x16
    19ba:	83 30       	cpi	r24, 0x03	; 3
    19bc:	91 05       	cpc	r25, r1
    19be:	69 f1       	breq	.+90     	; 0x1a1a <TIMER1_voidSetPWM_16bit+0xb0>
    19c0:	ed 89       	ldd	r30, Y+21	; 0x15
    19c2:	fe 89       	ldd	r31, Y+22	; 0x16
    19c4:	e4 30       	cpi	r30, 0x04	; 4
    19c6:	f1 05       	cpc	r31, r1
    19c8:	5c f4       	brge	.+22     	; 0x19e0 <TIMER1_voidSetPWM_16bit+0x76>
    19ca:	2d 89       	ldd	r18, Y+21	; 0x15
    19cc:	3e 89       	ldd	r19, Y+22	; 0x16
    19ce:	21 30       	cpi	r18, 0x01	; 1
    19d0:	31 05       	cpc	r19, r1
    19d2:	89 f0       	breq	.+34     	; 0x19f6 <TIMER1_voidSetPWM_16bit+0x8c>
    19d4:	8d 89       	ldd	r24, Y+21	; 0x15
    19d6:	9e 89       	ldd	r25, Y+22	; 0x16
    19d8:	82 30       	cpi	r24, 0x02	; 2
    19da:	91 05       	cpc	r25, r1
    19dc:	a9 f0       	breq	.+42     	; 0x1a08 <TIMER1_voidSetPWM_16bit+0x9e>
    19de:	38 c0       	rjmp	.+112    	; 0x1a50 <TIMER1_voidSetPWM_16bit+0xe6>
    19e0:	ed 89       	ldd	r30, Y+21	; 0x15
    19e2:	fe 89       	ldd	r31, Y+22	; 0x16
    19e4:	e4 30       	cpi	r30, 0x04	; 4
    19e6:	f1 05       	cpc	r31, r1
    19e8:	09 f1       	breq	.+66     	; 0x1a2c <TIMER1_voidSetPWM_16bit+0xc2>
    19ea:	2d 89       	ldd	r18, Y+21	; 0x15
    19ec:	3e 89       	ldd	r19, Y+22	; 0x16
    19ee:	25 30       	cpi	r18, 0x05	; 5
    19f0:	31 05       	cpc	r19, r1
    19f2:	29 f1       	breq	.+74     	; 0x1a3e <TIMER1_voidSetPWM_16bit+0xd4>
    19f4:	2d c0       	rjmp	.+90     	; 0x1a50 <TIMER1_voidSetPWM_16bit+0xe6>
        case 0x01: Local_u32PrescalerValue = 1; break;
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a0 e8       	ldi	r26, 0x80	; 128
    19fc:	bf e3       	ldi	r27, 0x3F	; 63
    19fe:	89 87       	std	Y+9, r24	; 0x09
    1a00:	9a 87       	std	Y+10, r25	; 0x0a
    1a02:	ab 87       	std	Y+11, r26	; 0x0b
    1a04:	bc 87       	std	Y+12, r27	; 0x0c
    1a06:	2c c0       	rjmp	.+88     	; 0x1a60 <TIMER1_voidSetPWM_16bit+0xf6>
        case 0x02: Local_u32PrescalerValue = 8; break;
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e0       	ldi	r26, 0x00	; 0
    1a0e:	b1 e4       	ldi	r27, 0x41	; 65
    1a10:	89 87       	std	Y+9, r24	; 0x09
    1a12:	9a 87       	std	Y+10, r25	; 0x0a
    1a14:	ab 87       	std	Y+11, r26	; 0x0b
    1a16:	bc 87       	std	Y+12, r27	; 0x0c
    1a18:	23 c0       	rjmp	.+70     	; 0x1a60 <TIMER1_voidSetPWM_16bit+0xf6>
        case 0x03: Local_u32PrescalerValue = 64; break;
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	a0 e8       	ldi	r26, 0x80	; 128
    1a20:	b2 e4       	ldi	r27, 0x42	; 66
    1a22:	89 87       	std	Y+9, r24	; 0x09
    1a24:	9a 87       	std	Y+10, r25	; 0x0a
    1a26:	ab 87       	std	Y+11, r26	; 0x0b
    1a28:	bc 87       	std	Y+12, r27	; 0x0c
    1a2a:	1a c0       	rjmp	.+52     	; 0x1a60 <TIMER1_voidSetPWM_16bit+0xf6>
        case 0x04: Local_u32PrescalerValue = 256; break;
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 e8       	ldi	r26, 0x80	; 128
    1a32:	b3 e4       	ldi	r27, 0x43	; 67
    1a34:	89 87       	std	Y+9, r24	; 0x09
    1a36:	9a 87       	std	Y+10, r25	; 0x0a
    1a38:	ab 87       	std	Y+11, r26	; 0x0b
    1a3a:	bc 87       	std	Y+12, r27	; 0x0c
    1a3c:	11 c0       	rjmp	.+34     	; 0x1a60 <TIMER1_voidSetPWM_16bit+0xf6>
        case 0x05: Local_u32PrescalerValue = 1024; break;
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	a0 e8       	ldi	r26, 0x80	; 128
    1a44:	b4 e4       	ldi	r27, 0x44	; 68
    1a46:	89 87       	std	Y+9, r24	; 0x09
    1a48:	9a 87       	std	Y+10, r25	; 0x0a
    1a4a:	ab 87       	std	Y+11, r26	; 0x0b
    1a4c:	bc 87       	std	Y+12, r27	; 0x0c
    1a4e:	08 c0       	rjmp	.+16     	; 0x1a60 <TIMER1_voidSetPWM_16bit+0xf6>
        default: Local_u32PrescalerValue = 8; // Default to prescaler 8
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a0 e0       	ldi	r26, 0x00	; 0
    1a56:	b1 e4       	ldi	r27, 0x41	; 65
    1a58:	89 87       	std	Y+9, r24	; 0x09
    1a5a:	9a 87       	std	Y+10, r25	; 0x0a
    1a5c:	ab 87       	std	Y+11, r26	; 0x0b
    1a5e:	bc 87       	std	Y+12, r27	; 0x0c
    }

    // Calculate TOP value based on desired frequency
    double icr1Double = (double)(F_CPU) / (Local_u32PrescalerValue * copy_u32Frequency) - 1;
    1a60:	69 89       	ldd	r22, Y+17	; 0x11
    1a62:	7a 89       	ldd	r23, Y+18	; 0x12
    1a64:	8b 89       	ldd	r24, Y+19	; 0x13
    1a66:	9c 89       	ldd	r25, Y+20	; 0x14
    1a68:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	bc 01       	movw	r22, r24
    1a72:	cd 01       	movw	r24, r26
    1a74:	29 85       	ldd	r18, Y+9	; 0x09
    1a76:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a78:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a7a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9c 01       	movw	r18, r24
    1a86:	ad 01       	movw	r20, r26
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	74 e2       	ldi	r23, 0x24	; 36
    1a8c:	84 e7       	ldi	r24, 0x74	; 116
    1a8e:	9b e4       	ldi	r25, 0x4B	; 75
    1a90:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8d 83       	std	Y+5, r24	; 0x05
    1aae:	9e 83       	std	Y+6, r25	; 0x06
    1ab0:	af 83       	std	Y+7, r26	; 0x07
    1ab2:	b8 87       	std	Y+8, r27	; 0x08
    ICR1 = (uint32_t)icr1Double;
    1ab4:	06 e4       	ldi	r16, 0x46	; 70
    1ab6:	10 e0       	ldi	r17, 0x00	; 0
    1ab8:	6d 81       	ldd	r22, Y+5	; 0x05
    1aba:	7e 81       	ldd	r23, Y+6	; 0x06
    1abc:	8f 81       	ldd	r24, Y+7	; 0x07
    1abe:	98 85       	ldd	r25, Y+8	; 0x08
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	f8 01       	movw	r30, r16
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	80 83       	st	Z, r24

    // Calculate OCR1A value based on desired duty cycle percentage with rounding
    double dutyCycleValue = (copy_u8DutyCycle * icr1Double) / 100.0;
    1ace:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ad0:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ad2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad4:	98 89       	ldd	r25, Y+16	; 0x10
    1ad6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad8:	3e 81       	ldd	r19, Y+6	; 0x06
    1ada:	4f 81       	ldd	r20, Y+7	; 0x07
    1adc:	58 85       	ldd	r21, Y+8	; 0x08
    1ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	48 ec       	ldi	r20, 0xC8	; 200
    1af0:	52 e4       	ldi	r21, 0x42	; 66
    1af2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	ab 83       	std	Y+3, r26	; 0x03
    1b00:	bc 83       	std	Y+4, r27	; 0x04
    OCR1A_REG = (uint16_t)round(dutyCycleValue);
    1b02:	0a e4       	ldi	r16, 0x4A	; 74
    1b04:	10 e0       	ldi	r17, 0x00	; 0
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	ab 81       	ldd	r26, Y+3	; 0x03
    1b0c:	bc 81       	ldd	r27, Y+4	; 0x04
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <round>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	bc 01       	movw	r22, r24
    1b1c:	cd 01       	movw	r24, r26
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	f8 01       	movw	r30, r16
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	80 83       	st	Z, r24

}
    1b2c:	66 96       	adiw	r28, 0x16	; 22
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	08 95       	ret

00001b42 <TIMER2_voidInit>:
#endif
/******************************************************************************************************/


/****************************************** TIMER2 FUNCTIONS ******************************************/
void TIMER2_voidInit(void){
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
			#endif

		#endif

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_FastPWM)
		SET_BIT(TCCR2_REG, TCCR2_WGM20);
    1b4a:	a5 e4       	ldi	r26, 0x45	; 69
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e5 e4       	ldi	r30, 0x45	; 69
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	80 64       	ori	r24, 0x40	; 64
    1b56:	8c 93       	st	X, r24
		SET_BIT(TCCR2_REG, TCCR2_WGM21);
    1b58:	a5 e4       	ldi	r26, 0x45	; 69
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	e5 e4       	ldi	r30, 0x45	; 69
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	88 60       	ori	r24, 0x08	; 8
    1b64:	8c 93       	st	X, r24

		#if(TIMER2_FastPwm_Type == TIMER_FastPwmType_Inverted)
			CLR_BIT(TCCR2_REG, TCCR2_COM20);
    1b66:	a5 e4       	ldi	r26, 0x45	; 69
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e5 e4       	ldi	r30, 0x45	; 69
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	8f 7e       	andi	r24, 0xEF	; 239
    1b72:	8c 93       	st	X, r24
			SET_BIT(TCCR2_REG, TCCR2_COM21);
    1b74:	a5 e4       	ldi	r26, 0x45	; 69
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e5 e4       	ldi	r30, 0x45	; 69
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 62       	ori	r24, 0x20	; 32
    1b80:	8c 93       	st	X, r24
		#elif(TIMER2_FastPwm_Type == TIMER_FastPwmType_NonInverted)
			SET_BIT(TCCR2_REG, TCCR2_COM20);
			SET_BIT(TCCR2_REG, TCCR2_COM21);
		#endif
		DIO_enuSetPinDirection(TIMER_OC2_PORT, TIMER_OC2_PIN, DIO_u8OUTPUT);
    1b82:	83 e0       	ldi	r24, 0x03	; 3
    1b84:	67 e0       	ldi	r22, 0x07	; 7
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
		SET_BIT(TCCR2_REG, TCCR2_CS20);
		SET_BIT(TCCR2_REG, TCCR2_CS21);
		CLR_BIT(TCCR2_REG, TCCR2_CS22);

	#elif(TIMER2_CLK_PRE_SELECT == TIMER_PRES_64)
		CLR_BIT(TCCR2_REG, TCCR2_CS20);
    1b8c:	a5 e4       	ldi	r26, 0x45	; 69
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e5 e4       	ldi	r30, 0x45	; 69
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8e 7f       	andi	r24, 0xFE	; 254
    1b98:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_CS21);
    1b9a:	a5 e4       	ldi	r26, 0x45	; 69
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e5 e4       	ldi	r30, 0x45	; 69
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8d 7f       	andi	r24, 0xFD	; 253
    1ba6:	8c 93       	st	X, r24
		SET_BIT(TCCR2_REG, TCCR2_CS22);
    1ba8:	a5 e4       	ldi	r26, 0x45	; 69
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e5 e4       	ldi	r30, 0x45	; 69
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	84 60       	ori	r24, 0x04	; 4
    1bb4:	8c 93       	st	X, r24
	#endif
	/******************************************************************************/


	// Turn Global Interrupt ON
	GIE_enuEnable();
    1bb6:	0e 94 4e 12 	call	0x249c	; 0x249c <GIE_enuEnable>


}
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <TIMER2_voidStart>:

void TIMER2_voidStart(void){
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		SET_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <TIMER2_voidStop>:

void TIMER2_voidStop(void){
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		CLR_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <TIMER2_voidScheduleTask>:

uint8_t TIMER2_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    1bdc:	ef 92       	push	r14
    1bde:	ff 92       	push	r15
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	60 97       	sbiw	r28, 0x10	; 16
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	9a 87       	std	Y+10, r25	; 0x0a
    1bfa:	89 87       	std	Y+9, r24	; 0x09
    1bfc:	4b 87       	std	Y+11, r20	; 0x0b
    1bfe:	5c 87       	std	Y+12, r21	; 0x0c
    1c00:	6d 87       	std	Y+13, r22	; 0x0d
    1c02:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    1c04:	1d 82       	std	Y+5, r1	; 0x05
    1c06:	1e 82       	std	Y+6, r1	; 0x06
    1c08:	1f 82       	std	Y+7, r1	; 0x07
    1c0a:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR2 & 0x07){
    1c0c:	e5 e4       	ldi	r30, 0x45	; 69
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9c 01       	movw	r18, r24
    1c18:	27 70       	andi	r18, 0x07	; 7
    1c1a:	30 70       	andi	r19, 0x00	; 0
    1c1c:	38 8b       	std	Y+16, r19	; 0x10
    1c1e:	2f 87       	std	Y+15, r18	; 0x0f
    1c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c22:	98 89       	ldd	r25, Y+16	; 0x10
    1c24:	83 30       	cpi	r24, 0x03	; 3
    1c26:	91 05       	cpc	r25, r1
    1c28:	69 f1       	breq	.+90     	; 0x1c84 <TIMER2_voidScheduleTask+0xa8>
    1c2a:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c2c:	38 89       	ldd	r19, Y+16	; 0x10
    1c2e:	24 30       	cpi	r18, 0x04	; 4
    1c30:	31 05       	cpc	r19, r1
    1c32:	5c f4       	brge	.+22     	; 0x1c4a <TIMER2_voidScheduleTask+0x6e>
    1c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c36:	98 89       	ldd	r25, Y+16	; 0x10
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	91 05       	cpc	r25, r1
    1c3c:	89 f0       	breq	.+34     	; 0x1c60 <TIMER2_voidScheduleTask+0x84>
    1c3e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c40:	38 89       	ldd	r19, Y+16	; 0x10
    1c42:	22 30       	cpi	r18, 0x02	; 2
    1c44:	31 05       	cpc	r19, r1
    1c46:	a9 f0       	breq	.+42     	; 0x1c72 <TIMER2_voidScheduleTask+0x96>
    1c48:	37 c0       	rjmp	.+110    	; 0x1cb8 <TIMER2_voidScheduleTask+0xdc>
    1c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4c:	98 89       	ldd	r25, Y+16	; 0x10
    1c4e:	84 30       	cpi	r24, 0x04	; 4
    1c50:	91 05       	cpc	r25, r1
    1c52:	09 f1       	breq	.+66     	; 0x1c96 <TIMER2_voidScheduleTask+0xba>
    1c54:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c56:	38 89       	ldd	r19, Y+16	; 0x10
    1c58:	25 30       	cpi	r18, 0x05	; 5
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	29 f1       	breq	.+74     	; 0x1ca8 <TIMER2_voidScheduleTask+0xcc>
    1c5e:	2c c0       	rjmp	.+88     	; 0x1cb8 <TIMER2_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	a0 e0       	ldi	r26, 0x00	; 0
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	8d 83       	std	Y+5, r24	; 0x05
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	af 83       	std	Y+7, r26	; 0x07
    1c6e:	b8 87       	std	Y+8, r27	; 0x08
    1c70:	23 c0       	rjmp	.+70     	; 0x1cb8 <TIMER2_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    1c72:	88 e0       	ldi	r24, 0x08	; 8
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a0 e0       	ldi	r26, 0x00	; 0
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	9e 83       	std	Y+6, r25	; 0x06
    1c7e:	af 83       	std	Y+7, r26	; 0x07
    1c80:	b8 87       	std	Y+8, r27	; 0x08
    1c82:	1a c0       	rjmp	.+52     	; 0x1cb8 <TIMER2_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    1c84:	80 e4       	ldi	r24, 0x40	; 64
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a0 e0       	ldi	r26, 0x00	; 0
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	af 83       	std	Y+7, r26	; 0x07
    1c92:	b8 87       	std	Y+8, r27	; 0x08
    1c94:	11 c0       	rjmp	.+34     	; 0x1cb8 <TIMER2_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	91 e0       	ldi	r25, 0x01	; 1
    1c9a:	a0 e0       	ldi	r26, 0x00	; 0
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	af 83       	std	Y+7, r26	; 0x07
    1ca4:	b8 87       	std	Y+8, r27	; 0x08
    1ca6:	08 c0       	rjmp	.+16     	; 0x1cb8 <TIMER2_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	94 e0       	ldi	r25, 0x04	; 4
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	af 83       	std	Y+7, r26	; 0x07
    1cb6:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    1cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	34 e2       	ldi	r19, 0x24	; 36
    1cc4:	44 e7       	ldi	r20, 0x74	; 116
    1cc6:	5b e4       	ldi	r21, 0x4B	; 75
    1cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	7c 01       	movw	r14, r24
    1cd2:	8d 01       	movw	r16, r26
    1cd4:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd6:	7e 81       	ldd	r23, Y+6	; 0x06
    1cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cda:	98 85       	ldd	r25, Y+8	; 0x08
    1cdc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1ce0:	9b 01       	movw	r18, r22
    1ce2:	ac 01       	movw	r20, r24
    1ce4:	c8 01       	movw	r24, r16
    1ce6:	b7 01       	movw	r22, r14
    1ce8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	89 83       	std	Y+1, r24	; 0x01
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	ab 83       	std	Y+3, r26	; 0x03
    1cf6:	bc 83       	std	Y+4, r27	; 0x04
		}

	#endif


		TIMERS_ISR_Functions[2] = TaskCallback;
    1cf8:	89 85       	ldd	r24, Y+9	; 0x09
    1cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfc:	90 93 8f 01 	sts	0x018F, r25
    1d00:	80 93 8e 01 	sts	0x018E, r24
		TIMER2_voidStart();
    1d04:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <TIMER2_voidStart>
	return 0;
    1d08:	80 e0       	ldi	r24, 0x00	; 0

}
    1d0a:	60 96       	adiw	r28, 0x10	; 16
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	ff 90       	pop	r15
    1d20:	ef 90       	pop	r14
    1d22:	08 95       	ret

00001d24 <TIMER2_voidSetPWM>:


void  TIMER2_voidSetPWM(uint8_t copy_u8DutyCycle){
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	0f 92       	push	r0
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Avr32 does has floating point operation
	 * **/


	OCR2_REG = (uint8_t)(((uint16_t)copy_u8DutyCycle * 256) / 100);
    1d30:	e3 e4       	ldi	r30, 0x43	; 67
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	88 2f       	mov	r24, r24
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	98 2f       	mov	r25, r24
    1d3c:	88 27       	eor	r24, r24
    1d3e:	24 e6       	ldi	r18, 0x64	; 100
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	b9 01       	movw	r22, r18
    1d44:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <__udivmodhi4>
    1d48:	cb 01       	movw	r24, r22
    1d4a:	80 83       	st	Z, r24
}
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <TIMER_voidWDTSleep>:
/*******************************************************************************************************/



/****************************************** WATCH DOG TIMER INTERFACE ******************************************/
void TIMER_voidWDTSleep(uint8_t copy_u8WdtPeriod){
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	0f 92       	push	r0
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    // Reset watchdog timer using macro
    WDT_voidRestart();
    1d60:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    1d62:	a1 e4       	ldi	r26, 0x41	; 65
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e1 e4       	ldi	r30, 0x41	; 65
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	88 61       	ori	r24, 0x18	; 24
    1d6e:	8c 93       	st	X, r24

    // Set watchdog timer prescaler and enable watchdog timer
    WDTCSR_REG = (1 << WDTCSR_WDE) | copy_u8WdtPeriod;
    1d70:	e1 e4       	ldi	r30, 0x41	; 65
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	88 60       	ori	r24, 0x08	; 8
    1d78:	80 83       	st	Z, r24

}
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <TIMER_voidWDTEnable>:

void TIMER_voidWDTEnable (void){
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    // Reset watchdog timer using macro
    WDT_voidRestart();
    1d8a:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    1d8c:	a1 e4       	ldi	r26, 0x41	; 65
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e1 e4       	ldi	r30, 0x41	; 65
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	88 61       	ori	r24, 0x18	; 24
    1d98:	8c 93       	st	X, r24

    // Enable watchdog timer with the previously set period
    SET_BIT(WDTCSR_REG, WDTCSR_WDE);
    1d9a:	a1 e4       	ldi	r26, 0x41	; 65
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e1 e4       	ldi	r30, 0x41	; 65
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	88 60       	ori	r24, 0x08	; 8
    1da6:	8c 93       	st	X, r24

}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <TIMER_voidWDTDisable>:


void TIMER_voidWDTDisable(void) {
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62
    // Reset watchdog timer using macro
    WDT_voidRestart();
    1db6:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    1db8:	a1 e4       	ldi	r26, 0x41	; 65
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e1 e4       	ldi	r30, 0x41	; 65
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	88 61       	ori	r24, 0x18	; 24
    1dc4:	8c 93       	st	X, r24

    // Disable watchdog timer
    WDTCSR_REG = 0x00;
    1dc6:	e1 e4       	ldi	r30, 0x41	; 65
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	10 82       	st	Z, r1
}
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <__vector_11>:





ISR(TIMER0_OVF_vect){
    1dd2:	1f 92       	push	r1
    1dd4:	0f 92       	push	r0
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	0f 92       	push	r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	2f 93       	push	r18
    1dde:	3f 93       	push	r19
    1de0:	4f 93       	push	r20
    1de2:	5f 93       	push	r21
    1de4:	6f 93       	push	r22
    1de6:	7f 93       	push	r23
    1de8:	8f 93       	push	r24
    1dea:	9f 93       	push	r25
    1dec:	af 93       	push	r26
    1dee:	bf 93       	push	r27
    1df0:	ef 93       	push	r30
    1df2:	ff 93       	push	r31
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    1dfc:	80 91 7e 01 	lds	r24, 0x017E
    1e00:	90 91 7f 01 	lds	r25, 0x017F
    1e04:	a0 91 80 01 	lds	r26, 0x0180
    1e08:	b0 91 81 01 	lds	r27, 0x0181
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	a1 1d       	adc	r26, r1
    1e10:	b1 1d       	adc	r27, r1
    1e12:	80 93 7e 01 	sts	0x017E, r24
    1e16:	90 93 7f 01 	sts	0x017F, r25
    1e1a:	a0 93 80 01 	sts	0x0180, r26
    1e1e:	b0 93 81 01 	sts	0x0181, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    1e22:	20 91 7e 01 	lds	r18, 0x017E
    1e26:	30 91 7f 01 	lds	r19, 0x017F
    1e2a:	40 91 80 01 	lds	r20, 0x0180
    1e2e:	50 91 81 01 	lds	r21, 0x0181
    1e32:	80 91 90 01 	lds	r24, 0x0190
    1e36:	90 91 91 01 	lds	r25, 0x0191
    1e3a:	a0 91 92 01 	lds	r26, 0x0192
    1e3e:	b0 91 93 01 	lds	r27, 0x0193
    1e42:	28 17       	cp	r18, r24
    1e44:	39 07       	cpc	r19, r25
    1e46:	4a 07       	cpc	r20, r26
    1e48:	5b 07       	cpc	r21, r27
    1e4a:	68 f0       	brcs	.+26     	; 0x1e66 <__vector_11+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    1e4c:	10 92 7e 01 	sts	0x017E, r1
    1e50:	10 92 7f 01 	sts	0x017F, r1
    1e54:	10 92 80 01 	sts	0x0180, r1
    1e58:	10 92 81 01 	sts	0x0181, r1
		TIMERS_ISR_Functions[0]();
    1e5c:	e0 91 8a 01 	lds	r30, 0x018A
    1e60:	f0 91 8b 01 	lds	r31, 0x018B
    1e64:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	ff 91       	pop	r31
    1e6c:	ef 91       	pop	r30
    1e6e:	bf 91       	pop	r27
    1e70:	af 91       	pop	r26
    1e72:	9f 91       	pop	r25
    1e74:	8f 91       	pop	r24
    1e76:	7f 91       	pop	r23
    1e78:	6f 91       	pop	r22
    1e7a:	5f 91       	pop	r21
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	0f be       	out	0x3f, r0	; 63
    1e86:	0f 90       	pop	r0
    1e88:	1f 90       	pop	r1
    1e8a:	18 95       	reti

00001e8c <__vector_10>:

ISR(TIMER0_COMP_vect){
    1e8c:	1f 92       	push	r1
    1e8e:	0f 92       	push	r0
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	0f 92       	push	r0
    1e94:	11 24       	eor	r1, r1
    1e96:	2f 93       	push	r18
    1e98:	3f 93       	push	r19
    1e9a:	4f 93       	push	r20
    1e9c:	5f 93       	push	r21
    1e9e:	6f 93       	push	r22
    1ea0:	7f 93       	push	r23
    1ea2:	8f 93       	push	r24
    1ea4:	9f 93       	push	r25
    1ea6:	af 93       	push	r26
    1ea8:	bf 93       	push	r27
    1eaa:	ef 93       	push	r30
    1eac:	ff 93       	push	r31
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    1eb6:	80 91 7e 01 	lds	r24, 0x017E
    1eba:	90 91 7f 01 	lds	r25, 0x017F
    1ebe:	a0 91 80 01 	lds	r26, 0x0180
    1ec2:	b0 91 81 01 	lds	r27, 0x0181
    1ec6:	01 96       	adiw	r24, 0x01	; 1
    1ec8:	a1 1d       	adc	r26, r1
    1eca:	b1 1d       	adc	r27, r1
    1ecc:	80 93 7e 01 	sts	0x017E, r24
    1ed0:	90 93 7f 01 	sts	0x017F, r25
    1ed4:	a0 93 80 01 	sts	0x0180, r26
    1ed8:	b0 93 81 01 	sts	0x0181, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    1edc:	20 91 7e 01 	lds	r18, 0x017E
    1ee0:	30 91 7f 01 	lds	r19, 0x017F
    1ee4:	40 91 80 01 	lds	r20, 0x0180
    1ee8:	50 91 81 01 	lds	r21, 0x0181
    1eec:	80 91 90 01 	lds	r24, 0x0190
    1ef0:	90 91 91 01 	lds	r25, 0x0191
    1ef4:	a0 91 92 01 	lds	r26, 0x0192
    1ef8:	b0 91 93 01 	lds	r27, 0x0193
    1efc:	28 17       	cp	r18, r24
    1efe:	39 07       	cpc	r19, r25
    1f00:	4a 07       	cpc	r20, r26
    1f02:	5b 07       	cpc	r21, r27
    1f04:	68 f0       	brcs	.+26     	; 0x1f20 <__vector_10+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    1f06:	10 92 7e 01 	sts	0x017E, r1
    1f0a:	10 92 7f 01 	sts	0x017F, r1
    1f0e:	10 92 80 01 	sts	0x0180, r1
    1f12:	10 92 81 01 	sts	0x0181, r1
		TIMERS_ISR_Functions[0]();
    1f16:	e0 91 8a 01 	lds	r30, 0x018A
    1f1a:	f0 91 8b 01 	lds	r31, 0x018B
    1f1e:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	ff 91       	pop	r31
    1f26:	ef 91       	pop	r30
    1f28:	bf 91       	pop	r27
    1f2a:	af 91       	pop	r26
    1f2c:	9f 91       	pop	r25
    1f2e:	8f 91       	pop	r24
    1f30:	7f 91       	pop	r23
    1f32:	6f 91       	pop	r22
    1f34:	5f 91       	pop	r21
    1f36:	4f 91       	pop	r20
    1f38:	3f 91       	pop	r19
    1f3a:	2f 91       	pop	r18
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	0f 90       	pop	r0
    1f42:	1f 90       	pop	r1
    1f44:	18 95       	reti

00001f46 <__vector_9>:

ISR(TIMER1_OVF_vect){
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	2f 93       	push	r18
    1f52:	3f 93       	push	r19
    1f54:	4f 93       	push	r20
    1f56:	5f 93       	push	r21
    1f58:	6f 93       	push	r22
    1f5a:	7f 93       	push	r23
    1f5c:	8f 93       	push	r24
    1f5e:	9f 93       	push	r25
    1f60:	af 93       	push	r26
    1f62:	bf 93       	push	r27
    1f64:	ef 93       	push	r30
    1f66:	ff 93       	push	r31
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62

	TIMER1_CURRENT_NTICKS++;
    1f70:	80 91 82 01 	lds	r24, 0x0182
    1f74:	90 91 83 01 	lds	r25, 0x0183
    1f78:	a0 91 84 01 	lds	r26, 0x0184
    1f7c:	b0 91 85 01 	lds	r27, 0x0185
    1f80:	01 96       	adiw	r24, 0x01	; 1
    1f82:	a1 1d       	adc	r26, r1
    1f84:	b1 1d       	adc	r27, r1
    1f86:	80 93 82 01 	sts	0x0182, r24
    1f8a:	90 93 83 01 	sts	0x0183, r25
    1f8e:	a0 93 84 01 	sts	0x0184, r26
    1f92:	b0 93 85 01 	sts	0x0185, r27

	if(TIMER1_CURRENT_NTICKS >= TIMER1_TARGET_NTICKS){
    1f96:	20 91 82 01 	lds	r18, 0x0182
    1f9a:	30 91 83 01 	lds	r19, 0x0183
    1f9e:	40 91 84 01 	lds	r20, 0x0184
    1fa2:	50 91 85 01 	lds	r21, 0x0185
    1fa6:	80 91 94 01 	lds	r24, 0x0194
    1faa:	90 91 95 01 	lds	r25, 0x0195
    1fae:	a0 91 96 01 	lds	r26, 0x0196
    1fb2:	b0 91 97 01 	lds	r27, 0x0197
    1fb6:	28 17       	cp	r18, r24
    1fb8:	39 07       	cpc	r19, r25
    1fba:	4a 07       	cpc	r20, r26
    1fbc:	5b 07       	cpc	r21, r27
    1fbe:	68 f0       	brcs	.+26     	; 0x1fda <__vector_9+0x94>
		TIMER1_CURRENT_NTICKS = 0;
    1fc0:	10 92 82 01 	sts	0x0182, r1
    1fc4:	10 92 83 01 	sts	0x0183, r1
    1fc8:	10 92 84 01 	sts	0x0184, r1
    1fcc:	10 92 85 01 	sts	0x0185, r1
		TIMERS_ISR_Functions[1]();
    1fd0:	e0 91 8c 01 	lds	r30, 0x018C
    1fd4:	f0 91 8d 01 	lds	r31, 0x018D
    1fd8:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	ff 91       	pop	r31
    1fe0:	ef 91       	pop	r30
    1fe2:	bf 91       	pop	r27
    1fe4:	af 91       	pop	r26
    1fe6:	9f 91       	pop	r25
    1fe8:	8f 91       	pop	r24
    1fea:	7f 91       	pop	r23
    1fec:	6f 91       	pop	r22
    1fee:	5f 91       	pop	r21
    1ff0:	4f 91       	pop	r20
    1ff2:	3f 91       	pop	r19
    1ff4:	2f 91       	pop	r18
    1ff6:	0f 90       	pop	r0
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	0f 90       	pop	r0
    1ffc:	1f 90       	pop	r1
    1ffe:	18 95       	reti

00002000 <__vector_7>:

ISR(TIMER1_COMPA_vect){
    2000:	1f 92       	push	r1
    2002:	0f 92       	push	r0
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	0f 92       	push	r0
    2008:	11 24       	eor	r1, r1
    200a:	2f 93       	push	r18
    200c:	3f 93       	push	r19
    200e:	4f 93       	push	r20
    2010:	5f 93       	push	r21
    2012:	6f 93       	push	r22
    2014:	7f 93       	push	r23
    2016:	8f 93       	push	r24
    2018:	9f 93       	push	r25
    201a:	af 93       	push	r26
    201c:	bf 93       	push	r27
    201e:	ef 93       	push	r30
    2020:	ff 93       	push	r31
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62


	#if(TIMER1_MODE_SELECT == TIMER1_MODE_ANY_PIN_PWM)
		DIO_enuTogglePinValue(global_u8PortID, global_u8PinID);
	#else
		TIMER1_CURRENT_NTICKS++;
    202a:	80 91 82 01 	lds	r24, 0x0182
    202e:	90 91 83 01 	lds	r25, 0x0183
    2032:	a0 91 84 01 	lds	r26, 0x0184
    2036:	b0 91 85 01 	lds	r27, 0x0185
    203a:	01 96       	adiw	r24, 0x01	; 1
    203c:	a1 1d       	adc	r26, r1
    203e:	b1 1d       	adc	r27, r1
    2040:	80 93 82 01 	sts	0x0182, r24
    2044:	90 93 83 01 	sts	0x0183, r25
    2048:	a0 93 84 01 	sts	0x0184, r26
    204c:	b0 93 85 01 	sts	0x0185, r27

		if(TIMER1_CURRENT_NTICKS >= TIMER1_TARGET_NTICKS){
    2050:	20 91 82 01 	lds	r18, 0x0182
    2054:	30 91 83 01 	lds	r19, 0x0183
    2058:	40 91 84 01 	lds	r20, 0x0184
    205c:	50 91 85 01 	lds	r21, 0x0185
    2060:	80 91 94 01 	lds	r24, 0x0194
    2064:	90 91 95 01 	lds	r25, 0x0195
    2068:	a0 91 96 01 	lds	r26, 0x0196
    206c:	b0 91 97 01 	lds	r27, 0x0197
    2070:	28 17       	cp	r18, r24
    2072:	39 07       	cpc	r19, r25
    2074:	4a 07       	cpc	r20, r26
    2076:	5b 07       	cpc	r21, r27
    2078:	68 f0       	brcs	.+26     	; 0x2094 <__vector_7+0x94>
			TIMER1_CURRENT_NTICKS = 0;
    207a:	10 92 82 01 	sts	0x0182, r1
    207e:	10 92 83 01 	sts	0x0183, r1
    2082:	10 92 84 01 	sts	0x0184, r1
    2086:	10 92 85 01 	sts	0x0185, r1
			TIMERS_ISR_Functions[1]();
    208a:	e0 91 8c 01 	lds	r30, 0x018C
    208e:	f0 91 8d 01 	lds	r31, 0x018D
    2092:	09 95       	icall
		}
	#endif


}
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	ff 91       	pop	r31
    209a:	ef 91       	pop	r30
    209c:	bf 91       	pop	r27
    209e:	af 91       	pop	r26
    20a0:	9f 91       	pop	r25
    20a2:	8f 91       	pop	r24
    20a4:	7f 91       	pop	r23
    20a6:	6f 91       	pop	r22
    20a8:	5f 91       	pop	r21
    20aa:	4f 91       	pop	r20
    20ac:	3f 91       	pop	r19
    20ae:	2f 91       	pop	r18
    20b0:	0f 90       	pop	r0
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	0f 90       	pop	r0
    20b6:	1f 90       	pop	r1
    20b8:	18 95       	reti

000020ba <__vector_5>:


ISR(TIMER2_OVF_vect){
    20ba:	1f 92       	push	r1
    20bc:	0f 92       	push	r0
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	0f 92       	push	r0
    20c2:	11 24       	eor	r1, r1
    20c4:	2f 93       	push	r18
    20c6:	3f 93       	push	r19
    20c8:	4f 93       	push	r20
    20ca:	5f 93       	push	r21
    20cc:	6f 93       	push	r22
    20ce:	7f 93       	push	r23
    20d0:	8f 93       	push	r24
    20d2:	9f 93       	push	r25
    20d4:	af 93       	push	r26
    20d6:	bf 93       	push	r27
    20d8:	ef 93       	push	r30
    20da:	ff 93       	push	r31
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    20e4:	80 91 86 01 	lds	r24, 0x0186
    20e8:	90 91 87 01 	lds	r25, 0x0187
    20ec:	a0 91 88 01 	lds	r26, 0x0188
    20f0:	b0 91 89 01 	lds	r27, 0x0189
    20f4:	01 96       	adiw	r24, 0x01	; 1
    20f6:	a1 1d       	adc	r26, r1
    20f8:	b1 1d       	adc	r27, r1
    20fa:	80 93 86 01 	sts	0x0186, r24
    20fe:	90 93 87 01 	sts	0x0187, r25
    2102:	a0 93 88 01 	sts	0x0188, r26
    2106:	b0 93 89 01 	sts	0x0189, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    210a:	20 91 86 01 	lds	r18, 0x0186
    210e:	30 91 87 01 	lds	r19, 0x0187
    2112:	40 91 88 01 	lds	r20, 0x0188
    2116:	50 91 89 01 	lds	r21, 0x0189
    211a:	80 91 98 01 	lds	r24, 0x0198
    211e:	90 91 99 01 	lds	r25, 0x0199
    2122:	a0 91 9a 01 	lds	r26, 0x019A
    2126:	b0 91 9b 01 	lds	r27, 0x019B
    212a:	28 17       	cp	r18, r24
    212c:	39 07       	cpc	r19, r25
    212e:	4a 07       	cpc	r20, r26
    2130:	5b 07       	cpc	r21, r27
    2132:	68 f0       	brcs	.+26     	; 0x214e <__vector_5+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    2134:	10 92 86 01 	sts	0x0186, r1
    2138:	10 92 87 01 	sts	0x0187, r1
    213c:	10 92 88 01 	sts	0x0188, r1
    2140:	10 92 89 01 	sts	0x0189, r1
		TIMERS_ISR_Functions[2]();
    2144:	e0 91 8e 01 	lds	r30, 0x018E
    2148:	f0 91 8f 01 	lds	r31, 0x018F
    214c:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything
}
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	ff 91       	pop	r31
    2154:	ef 91       	pop	r30
    2156:	bf 91       	pop	r27
    2158:	af 91       	pop	r26
    215a:	9f 91       	pop	r25
    215c:	8f 91       	pop	r24
    215e:	7f 91       	pop	r23
    2160:	6f 91       	pop	r22
    2162:	5f 91       	pop	r21
    2164:	4f 91       	pop	r20
    2166:	3f 91       	pop	r19
    2168:	2f 91       	pop	r18
    216a:	0f 90       	pop	r0
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	0f 90       	pop	r0
    2170:	1f 90       	pop	r1
    2172:	18 95       	reti

00002174 <__vector_4>:

ISR(TIMER2_COMP_vect){
    2174:	1f 92       	push	r1
    2176:	0f 92       	push	r0
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	0f 92       	push	r0
    217c:	11 24       	eor	r1, r1
    217e:	2f 93       	push	r18
    2180:	3f 93       	push	r19
    2182:	4f 93       	push	r20
    2184:	5f 93       	push	r21
    2186:	6f 93       	push	r22
    2188:	7f 93       	push	r23
    218a:	8f 93       	push	r24
    218c:	9f 93       	push	r25
    218e:	af 93       	push	r26
    2190:	bf 93       	push	r27
    2192:	ef 93       	push	r30
    2194:	ff 93       	push	r31
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    219e:	80 91 86 01 	lds	r24, 0x0186
    21a2:	90 91 87 01 	lds	r25, 0x0187
    21a6:	a0 91 88 01 	lds	r26, 0x0188
    21aa:	b0 91 89 01 	lds	r27, 0x0189
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	a1 1d       	adc	r26, r1
    21b2:	b1 1d       	adc	r27, r1
    21b4:	80 93 86 01 	sts	0x0186, r24
    21b8:	90 93 87 01 	sts	0x0187, r25
    21bc:	a0 93 88 01 	sts	0x0188, r26
    21c0:	b0 93 89 01 	sts	0x0189, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    21c4:	20 91 86 01 	lds	r18, 0x0186
    21c8:	30 91 87 01 	lds	r19, 0x0187
    21cc:	40 91 88 01 	lds	r20, 0x0188
    21d0:	50 91 89 01 	lds	r21, 0x0189
    21d4:	80 91 98 01 	lds	r24, 0x0198
    21d8:	90 91 99 01 	lds	r25, 0x0199
    21dc:	a0 91 9a 01 	lds	r26, 0x019A
    21e0:	b0 91 9b 01 	lds	r27, 0x019B
    21e4:	28 17       	cp	r18, r24
    21e6:	39 07       	cpc	r19, r25
    21e8:	4a 07       	cpc	r20, r26
    21ea:	5b 07       	cpc	r21, r27
    21ec:	68 f0       	brcs	.+26     	; 0x2208 <__vector_4+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    21ee:	10 92 86 01 	sts	0x0186, r1
    21f2:	10 92 87 01 	sts	0x0187, r1
    21f6:	10 92 88 01 	sts	0x0188, r1
    21fa:	10 92 89 01 	sts	0x0189, r1
		TIMERS_ISR_Functions[2]();
    21fe:	e0 91 8e 01 	lds	r30, 0x018E
    2202:	f0 91 8f 01 	lds	r31, 0x018F
    2206:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything

}
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	ff 91       	pop	r31
    220e:	ef 91       	pop	r30
    2210:	bf 91       	pop	r27
    2212:	af 91       	pop	r26
    2214:	9f 91       	pop	r25
    2216:	8f 91       	pop	r24
    2218:	7f 91       	pop	r23
    221a:	6f 91       	pop	r22
    221c:	5f 91       	pop	r21
    221e:	4f 91       	pop	r20
    2220:	3f 91       	pop	r19
    2222:	2f 91       	pop	r18
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <SPI_vidInit>:
#include "SPI_priv.h"
/************************************************************************************/



void SPI_vidInit(void){
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62

		SET_BIT(SPCR_REG, SPCR_MSTR);

	#elif(SPI_MODE == SPI_SLAVE_MODE)

		DIO_enuSetPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, DIO_u8OUTPUT);
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	66 e0       	ldi	r22, 0x06	; 6
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, DIO_u8INPUT);
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	65 e0       	ldi	r22, 0x05	; 5
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>

		DIO_enuSetPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, DIO_u8INPUT);
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	67 e0       	ldi	r22, 0x07	; 7
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_SS_PORT, SPI_SS_PIN, DIO_u8INPUT);
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	64 e0       	ldi	r22, 0x04	; 4
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>

		CLR_BIT(SPCR_REG, SPCR_MSTR);
    225e:	ad e2       	ldi	r26, 0x2D	; 45
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ed e2       	ldi	r30, 0x2D	; 45
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8f 7e       	andi	r24, 0xEF	; 239
    226a:	8c 93       	st	X, r24
	#endif


	//! Data order
	#if(SPI_DORD == SPI_DORD_MSB)
		SET_BIT(SPCR_REG, SPCR_DORD);
    226c:	ad e2       	ldi	r26, 0x2D	; 45
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ed e2       	ldi	r30, 0x2D	; 45
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	80 62       	ori	r24, 0x20	; 32
    2278:	8c 93       	st	X, r24


	//! Clock Polarity
	#if(SPI_CPOL == SPI_LRising_TFalling)
		// SCK is high when idle
		CLR_BIT(SPCR_REG, SPCR_CPOL);
    227a:	ad e2       	ldi	r26, 0x2D	; 45
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	ed e2       	ldi	r30, 0x2D	; 45
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	87 7f       	andi	r24, 0xF7	; 247
    2286:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR0 );
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
		CLR_BIT(SPSR_REG, SPSR_SPI2x);

	#elif(SPI_PRES_SELECT == SPI_PRES_16)
		SET_BIT(SPCR_REG, SPCR_SPR0 );
    2288:	ad e2       	ldi	r26, 0x2D	; 45
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	ed e2       	ldi	r30, 0x2D	; 45
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	81 60       	ori	r24, 0x01	; 1
    2294:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
    2296:	ad e2       	ldi	r26, 0x2D	; 45
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	ed e2       	ldi	r30, 0x2D	; 45
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	8d 7f       	andi	r24, 0xFD	; 253
    22a2:	8c 93       	st	X, r24
		CLR_BIT(SPSR_REG, SPSR_SPI2x);
    22a4:	ae e2       	ldi	r26, 0x2E	; 46
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	ee e2       	ldi	r30, 0x2E	; 46
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	8e 7f       	andi	r24, 0xFE	; 254
    22b0:	8c 93       	st	X, r24

	#endif


	/*	Enable SPI	*/
	SET_BIT(SPCR_REG, SPCR_SPE);
    22b2:	ad e2       	ldi	r26, 0x2D	; 45
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ed e2       	ldi	r30, 0x2D	; 45
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	80 64       	ori	r24, 0x40	; 64
    22be:	8c 93       	st	X, r24
}
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	08 95       	ret

000022c6 <SPI_enuMasterTransmit_Char>:



ErrorStatus_t SPI_enuMasterTransmit_Char(uint8_t copy_u8Data){
    22c6:	0f 93       	push	r16
    22c8:	1f 93       	push	r17
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <SPI_enuMasterTransmit_Char+0xa>
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    22d6:	19 82       	std	Y+1, r1	; 0x01
		SPDR_REG = copy_u8Data;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		SPDR_REG = flipBits(copy_u8Data);
    22d8:	0f e2       	ldi	r16, 0x2F	; 47
    22da:	10 e0       	ldi	r17, 0x00	; 0
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	0e 94 0e 12 	call	0x241c	; 0x241c <flipBits>
    22e2:	f8 01       	movw	r30, r16
    22e4:	80 83       	st	Z, r24
	#endif


	/*! Wait for transmission complete */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    22e6:	ee e2       	ldi	r30, 0x2E	; 46
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	88 23       	and	r24, r24
    22ee:	dc f7       	brge	.-10     	; 0x22e6 <SPI_enuMasterTransmit_Char+0x20>


	Local_enu_ErrorState = ERROR_STATUS_OK;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	08 95       	ret

00002304 <SPI_enuMasterTransmit_String>:



ErrorStatus_t SPI_enuMasterTransmit_String(uint8_t* copy_pu8Data){
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	00 d0       	rcall	.+0      	; 0x230a <SPI_enuMasterTransmit_String+0x6>
    230a:	00 d0       	rcall	.+0      	; 0x230c <SPI_enuMasterTransmit_String+0x8>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9b 83       	std	Y+3, r25	; 0x03
    2312:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2314:	19 82       	std	Y+1, r1	; 0x01


	if(copy_pu8Data == NULL){
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	19 f4       	brne	.+6      	; 0x2324 <SPI_enuMasterTransmit_String+0x20>
		return Local_enu_ErrorState;
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	8c 83       	std	Y+4, r24	; 0x04
    2322:	13 c0       	rjmp	.+38     	; 0x234a <SPI_enuMasterTransmit_String+0x46>

	}else{

		do{
			SPI_enuMasterTransmit_Char(*copy_pu8Data);
    2324:	ea 81       	ldd	r30, Y+2	; 0x02
    2326:	fb 81       	ldd	r31, Y+3	; 0x03
    2328:	80 81       	ld	r24, Z
    232a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <SPI_enuMasterTransmit_Char>
			copy_pu8Data++;
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	9b 81       	ldd	r25, Y+3	; 0x03
    2332:	01 96       	adiw	r24, 0x01	; 1
    2334:	9b 83       	std	Y+3, r25	; 0x03
    2336:	8a 83       	std	Y+2, r24	; 0x02
		}while(*copy_pu8Data != '\0');
    2338:	ea 81       	ldd	r30, Y+2	; 0x02
    233a:	fb 81       	ldd	r31, Y+3	; 0x03
    233c:	80 81       	ld	r24, Z
    233e:	88 23       	and	r24, r24
    2340:	89 f7       	brne	.-30     	; 0x2324 <SPI_enuMasterTransmit_String+0x20>
	}

	Local_enu_ErrorState = ERROR_STATUS_OK;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	8c 83       	std	Y+4, r24	; 0x04
    234a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <SPI_enuSlaveReceive_Char>:



ErrorStatus_t SPI_enuSlaveReceive_Char(uint8_t* copy_pu8Data){
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	00 d0       	rcall	.+0      	; 0x2360 <SPI_enuSlaveReceive_Char+0x6>
    2360:	0f 92       	push	r0
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	9b 83       	std	Y+3, r25	; 0x03
    2368:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    236a:	19 82       	std	Y+1, r1	; 0x01


	/* Wait for successful reception of data from master */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    236c:	ee e2       	ldi	r30, 0x2E	; 46
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	88 23       	and	r24, r24
    2374:	dc f7       	brge	.-10     	; 0x236c <SPI_enuSlaveReceive_Char+0x12>

	*copy_pu8Data = SPDR_REG;
    2376:	ef e2       	ldi	r30, 0x2F	; 47
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	ea 81       	ldd	r30, Y+2	; 0x02
    237e:	fb 81       	ldd	r31, Y+3	; 0x03
    2380:	80 83       	st	Z, r24
		*copy_pu8Data = SPDR_REG;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		*copy_pu8Data= flipBits(SPDR_REG);
    2382:	ef e2       	ldi	r30, 0x2F	; 47
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	0e 94 0e 12 	call	0x241c	; 0x241c <flipBits>
    238c:	ea 81       	ldd	r30, Y+2	; 0x02
    238e:	fb 81       	ldd	r31, Y+3	; 0x03
    2390:	80 83       	st	Z, r24
	#endif




	Local_enu_ErrorState = ERROR_STATUS_OK;
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    2396:	89 81       	ldd	r24, Y+1	; 0x01
}
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <SPI_enuSlaveReceive_String>:



ErrorStatus_t SPI_enuSlaveReceive_String(uint8_t* copy_pu8Data){
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	27 97       	sbiw	r28, 0x07	; 7
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	9d 83       	std	Y+5, r25	; 0x05
    23ba:	8c 83       	std	Y+4, r24	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    23bc:	1b 82       	std	Y+3, r1	; 0x03


	if(copy_pu8Data == NULL){
    23be:	8c 81       	ldd	r24, Y+4	; 0x04
    23c0:	9d 81       	ldd	r25, Y+5	; 0x05
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	19 f4       	brne	.+6      	; 0x23cc <SPI_enuSlaveReceive_String+0x28>
		return Local_enu_ErrorState;
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	8e 83       	std	Y+6, r24	; 0x06
    23ca:	1e c0       	rjmp	.+60     	; 0x2408 <SPI_enuSlaveReceive_String+0x64>
	}else{

		// Intiate head of buffer similar to linked-list idea
		uint8_t *Local_u8Temp = copy_pu8Data;
    23cc:	8c 81       	ldd	r24, Y+4	; 0x04
    23ce:	9d 81       	ldd	r25, Y+5	; 0x05
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01

		do{
			SPI_enuSlaveReceive_Char(Local_u8Temp);
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	9a 81       	ldd	r25, Y+2	; 0x02
    23d8:	0e 94 ad 11 	call	0x235a	; 0x235a <SPI_enuSlaveReceive_Char>


		}while(*(Local_u8Temp++) != '\0');
    23dc:	e9 81       	ldd	r30, Y+1	; 0x01
    23de:	fa 81       	ldd	r31, Y+2	; 0x02
    23e0:	80 81       	ld	r24, Z
    23e2:	8f 83       	std	Y+7, r24	; 0x07
    23e4:	8f 81       	ldd	r24, Y+7	; 0x07
    23e6:	88 23       	and	r24, r24
    23e8:	11 f0       	breq	.+4      	; 0x23ee <SPI_enuSlaveReceive_String+0x4a>
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	8f 83       	std	Y+7, r24	; 0x07
    23ee:	8f 81       	ldd	r24, Y+7	; 0x07
    23f0:	29 81       	ldd	r18, Y+1	; 0x01
    23f2:	3a 81       	ldd	r19, Y+2	; 0x02
    23f4:	2f 5f       	subi	r18, 0xFF	; 255
    23f6:	3f 4f       	sbci	r19, 0xFF	; 255
    23f8:	3a 83       	std	Y+2, r19	; 0x02
    23fa:	29 83       	std	Y+1, r18	; 0x01
    23fc:	88 23       	and	r24, r24
    23fe:	51 f7       	brne	.-44     	; 0x23d4 <SPI_enuSlaveReceive_String+0x30>
	}


	Local_enu_ErrorState = ERROR_STATUS_OK;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enu_ErrorState;
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	8e 83       	std	Y+6, r24	; 0x06
    2408:	8e 81       	ldd	r24, Y+6	; 0x06
}
    240a:	27 96       	adiw	r28, 0x07	; 7
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <flipBits>:

static inline uint8_t flipBits(uint8_t byte) {
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	0f 92       	push	r0
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	82 95       	swap	r24
    242c:	8f 70       	andi	r24, 0x0F	; 15
    242e:	28 2f       	mov	r18, r24
    2430:	89 81       	ldd	r24, Y+1	; 0x01
    2432:	88 2f       	mov	r24, r24
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	82 95       	swap	r24
    2438:	92 95       	swap	r25
    243a:	90 7f       	andi	r25, 0xF0	; 240
    243c:	98 27       	eor	r25, r24
    243e:	80 7f       	andi	r24, 0xF0	; 240
    2440:	98 27       	eor	r25, r24
    2442:	82 2b       	or	r24, r18
    2444:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	88 2f       	mov	r24, r24
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	8c 7c       	andi	r24, 0xCC	; 204
    244e:	90 70       	andi	r25, 0x00	; 0
    2450:	95 95       	asr	r25
    2452:	87 95       	ror	r24
    2454:	95 95       	asr	r25
    2456:	87 95       	ror	r24
    2458:	28 2f       	mov	r18, r24
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	83 73       	andi	r24, 0x33	; 51
    2462:	90 70       	andi	r25, 0x00	; 0
    2464:	88 0f       	add	r24, r24
    2466:	99 1f       	adc	r25, r25
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	82 2b       	or	r24, r18
    246e:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	88 2f       	mov	r24, r24
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	8a 7a       	andi	r24, 0xAA	; 170
    2478:	90 70       	andi	r25, 0x00	; 0
    247a:	95 95       	asr	r25
    247c:	87 95       	ror	r24
    247e:	28 2f       	mov	r18, r24
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	88 2f       	mov	r24, r24
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	85 75       	andi	r24, 0x55	; 85
    2488:	90 70       	andi	r25, 0x00	; 0
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	82 2b       	or	r24, r18
    2490:	89 83       	std	Y+1, r24	; 0x01
    return byte;
    2492:	89 81       	ldd	r24, Y+1	; 0x01
}
    2494:	0f 90       	pop	r0
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	0f 92       	push	r0
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    24a6:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
    24a8:	ef e5       	ldi	r30, 0x5F	; 95
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	80 81       	ld	r24, Z
    24ae:	88 23       	and	r24, r24
    24b0:	4c f0       	brlt	.+18     	; 0x24c4 <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
    24b2:	af e5       	ldi	r26, 0x5F	; 95
    24b4:	b0 e0       	ldi	r27, 0x00	; 0
    24b6:	ef e5       	ldi	r30, 0x5F	; 95
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	80 81       	ld	r24, Z
    24bc:	80 68       	ori	r24, 0x80	; 128
    24be:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24c6:	0f 90       	pop	r0
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	0f 92       	push	r0
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    24d8:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
    24da:	ef e5       	ldi	r30, 0x5F	; 95
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	88 23       	and	r24, r24
    24e2:	4c f4       	brge	.+18     	; 0x24f6 <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
    24e4:	af e5       	ldi	r26, 0x5F	; 95
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	ef e5       	ldi	r30, 0x5F	; 95
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	8f 77       	andi	r24, 0x7F	; 127
    24f0:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f8:	0f 90       	pop	r0
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	2a 97       	sbiw	r28, 0x0a	; 10
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	9b 83       	std	Y+3, r25	; 0x03
    2516:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2518:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
    251a:	8a 81       	ldd	r24, Y+2	; 0x02
    251c:	9b 81       	ldd	r25, Y+3	; 0x03
    251e:	00 97       	sbiw	r24, 0x00	; 0
    2520:	19 f4       	brne	.+6      	; 0x2528 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
    2522:	29 81       	ldd	r18, Y+1	; 0x01
    2524:	2a 87       	std	Y+10, r18	; 0x0a
    2526:	36 c1       	rjmp	.+620    	; 0x2794 <EXTI_enuInit+0x294>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_ENABLED){
    2528:	ea 81       	ldd	r30, Y+2	; 0x02
    252a:	fb 81       	ldd	r31, Y+3	; 0x03
    252c:	80 81       	ld	r24, Z
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	09 f0       	breq	.+2      	; 0x2534 <EXTI_enuInit+0x34>
    2532:	64 c0       	rjmp	.+200    	; 0x25fc <EXTI_enuInit+0xfc>

			SET_BIT(GICR, INT0_switch);
    2534:	ab e5       	ldi	r26, 0x5B	; 91
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	eb e5       	ldi	r30, 0x5B	; 91
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	80 64       	ori	r24, 0x40	; 64
    2540:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_0].Sence_Level){
    2542:	ea 81       	ldd	r30, Y+2	; 0x02
    2544:	fb 81       	ldd	r31, Y+3	; 0x03
    2546:	81 81       	ldd	r24, Z+1	; 0x01
    2548:	28 2f       	mov	r18, r24
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	39 87       	std	Y+9, r19	; 0x09
    254e:	28 87       	std	Y+8, r18	; 0x08
    2550:	88 85       	ldd	r24, Y+8	; 0x08
    2552:	99 85       	ldd	r25, Y+9	; 0x09
    2554:	81 30       	cpi	r24, 0x01	; 1
    2556:	91 05       	cpc	r25, r1
    2558:	21 f1       	breq	.+72     	; 0x25a2 <EXTI_enuInit+0xa2>
    255a:	28 85       	ldd	r18, Y+8	; 0x08
    255c:	39 85       	ldd	r19, Y+9	; 0x09
    255e:	22 30       	cpi	r18, 0x02	; 2
    2560:	31 05       	cpc	r19, r1
    2562:	2c f4       	brge	.+10     	; 0x256e <EXTI_enuInit+0x6e>
    2564:	88 85       	ldd	r24, Y+8	; 0x08
    2566:	99 85       	ldd	r25, Y+9	; 0x09
    2568:	00 97       	sbiw	r24, 0x00	; 0
    256a:	61 f0       	breq	.+24     	; 0x2584 <EXTI_enuInit+0x84>
    256c:	53 c0       	rjmp	.+166    	; 0x2614 <EXTI_enuInit+0x114>
    256e:	28 85       	ldd	r18, Y+8	; 0x08
    2570:	39 85       	ldd	r19, Y+9	; 0x09
    2572:	22 30       	cpi	r18, 0x02	; 2
    2574:	31 05       	cpc	r19, r1
    2576:	21 f1       	breq	.+72     	; 0x25c0 <EXTI_enuInit+0xc0>
    2578:	88 85       	ldd	r24, Y+8	; 0x08
    257a:	99 85       	ldd	r25, Y+9	; 0x09
    257c:	83 30       	cpi	r24, 0x03	; 3
    257e:	91 05       	cpc	r25, r1
    2580:	71 f1       	breq	.+92     	; 0x25de <EXTI_enuInit+0xde>
    2582:	48 c0       	rjmp	.+144    	; 0x2614 <EXTI_enuInit+0x114>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
    2584:	a5 e5       	ldi	r26, 0x55	; 85
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e5 e5       	ldi	r30, 0x55	; 85
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8e 7f       	andi	r24, 0xFE	; 254
    2590:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    2592:	a5 e5       	ldi	r26, 0x55	; 85
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e5 e5       	ldi	r30, 0x55	; 85
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	8d 7f       	andi	r24, 0xFD	; 253
    259e:	8c 93       	st	X, r24
    25a0:	39 c0       	rjmp	.+114    	; 0x2614 <EXTI_enuInit+0x114>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
    25a2:	a5 e5       	ldi	r26, 0x55	; 85
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e5 e5       	ldi	r30, 0x55	; 85
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	81 60       	ori	r24, 0x01	; 1
    25ae:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    25b0:	a5 e5       	ldi	r26, 0x55	; 85
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e5 e5       	ldi	r30, 0x55	; 85
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	8d 7f       	andi	r24, 0xFD	; 253
    25bc:	8c 93       	st	X, r24
    25be:	2a c0       	rjmp	.+84     	; 0x2614 <EXTI_enuInit+0x114>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
    25c0:	a5 e5       	ldi	r26, 0x55	; 85
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e5 e5       	ldi	r30, 0x55	; 85
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	8e 7f       	andi	r24, 0xFE	; 254
    25cc:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    25ce:	a5 e5       	ldi	r26, 0x55	; 85
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	e5 e5       	ldi	r30, 0x55	; 85
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	80 81       	ld	r24, Z
    25d8:	82 60       	ori	r24, 0x02	; 2
    25da:	8c 93       	st	X, r24
    25dc:	1b c0       	rjmp	.+54     	; 0x2614 <EXTI_enuInit+0x114>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
    25de:	a5 e5       	ldi	r26, 0x55	; 85
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e5 e5       	ldi	r30, 0x55	; 85
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	81 60       	ori	r24, 0x01	; 1
    25ea:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    25ec:	a5 e5       	ldi	r26, 0x55	; 85
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e5 e5       	ldi	r30, 0x55	; 85
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	82 60       	ori	r24, 0x02	; 2
    25f8:	8c 93       	st	X, r24
    25fa:	0c c0       	rjmp	.+24     	; 0x2614 <EXTI_enuInit+0x114>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_DISABLED){
    25fc:	ea 81       	ldd	r30, Y+2	; 0x02
    25fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2600:	80 81       	ld	r24, Z
    2602:	88 23       	and	r24, r24
    2604:	39 f4       	brne	.+14     	; 0x2614 <EXTI_enuInit+0x114>

			CLR_BIT(GICR, INT0_switch);
    2606:	ab e5       	ldi	r26, 0x5B	; 91
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	eb e5       	ldi	r30, 0x5B	; 91
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	8f 7b       	andi	r24, 0xBF	; 191
    2612:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_ENABLED){
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	9b 81       	ldd	r25, Y+3	; 0x03
    2618:	fc 01       	movw	r30, r24
    261a:	32 96       	adiw	r30, 0x02	; 2
    261c:	80 81       	ld	r24, Z
    261e:	81 30       	cpi	r24, 0x01	; 1
    2620:	09 f0       	breq	.+2      	; 0x2624 <EXTI_enuInit+0x124>
    2622:	66 c0       	rjmp	.+204    	; 0x26f0 <EXTI_enuInit+0x1f0>

			SET_BIT(GICR, INT1_switch);
    2624:	ab e5       	ldi	r26, 0x5B	; 91
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	eb e5       	ldi	r30, 0x5B	; 91
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	80 68       	ori	r24, 0x80	; 128
    2630:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT_NO_1].Sence_Level){
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	9b 81       	ldd	r25, Y+3	; 0x03
    2636:	fc 01       	movw	r30, r24
    2638:	32 96       	adiw	r30, 0x02	; 2
    263a:	81 81       	ldd	r24, Z+1	; 0x01
    263c:	28 2f       	mov	r18, r24
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	3f 83       	std	Y+7, r19	; 0x07
    2642:	2e 83       	std	Y+6, r18	; 0x06
    2644:	8e 81       	ldd	r24, Y+6	; 0x06
    2646:	9f 81       	ldd	r25, Y+7	; 0x07
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	91 05       	cpc	r25, r1
    264c:	21 f1       	breq	.+72     	; 0x2696 <EXTI_enuInit+0x196>
    264e:	2e 81       	ldd	r18, Y+6	; 0x06
    2650:	3f 81       	ldd	r19, Y+7	; 0x07
    2652:	22 30       	cpi	r18, 0x02	; 2
    2654:	31 05       	cpc	r19, r1
    2656:	2c f4       	brge	.+10     	; 0x2662 <EXTI_enuInit+0x162>
    2658:	8e 81       	ldd	r24, Y+6	; 0x06
    265a:	9f 81       	ldd	r25, Y+7	; 0x07
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	61 f0       	breq	.+24     	; 0x2678 <EXTI_enuInit+0x178>
    2660:	55 c0       	rjmp	.+170    	; 0x270c <EXTI_enuInit+0x20c>
    2662:	2e 81       	ldd	r18, Y+6	; 0x06
    2664:	3f 81       	ldd	r19, Y+7	; 0x07
    2666:	22 30       	cpi	r18, 0x02	; 2
    2668:	31 05       	cpc	r19, r1
    266a:	21 f1       	breq	.+72     	; 0x26b4 <EXTI_enuInit+0x1b4>
    266c:	8e 81       	ldd	r24, Y+6	; 0x06
    266e:	9f 81       	ldd	r25, Y+7	; 0x07
    2670:	83 30       	cpi	r24, 0x03	; 3
    2672:	91 05       	cpc	r25, r1
    2674:	71 f1       	breq	.+92     	; 0x26d2 <EXTI_enuInit+0x1d2>
    2676:	4a c0       	rjmp	.+148    	; 0x270c <EXTI_enuInit+0x20c>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
    2678:	a5 e5       	ldi	r26, 0x55	; 85
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e5 e5       	ldi	r30, 0x55	; 85
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	8b 7f       	andi	r24, 0xFB	; 251
    2684:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    2686:	a5 e5       	ldi	r26, 0x55	; 85
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e5 e5       	ldi	r30, 0x55	; 85
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	87 7f       	andi	r24, 0xF7	; 247
    2692:	8c 93       	st	X, r24
    2694:	3b c0       	rjmp	.+118    	; 0x270c <EXTI_enuInit+0x20c>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
    2696:	a5 e5       	ldi	r26, 0x55	; 85
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e5 e5       	ldi	r30, 0x55	; 85
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	84 60       	ori	r24, 0x04	; 4
    26a2:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    26a4:	a5 e5       	ldi	r26, 0x55	; 85
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e5 e5       	ldi	r30, 0x55	; 85
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	87 7f       	andi	r24, 0xF7	; 247
    26b0:	8c 93       	st	X, r24
    26b2:	2c c0       	rjmp	.+88     	; 0x270c <EXTI_enuInit+0x20c>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
    26b4:	a5 e5       	ldi	r26, 0x55	; 85
    26b6:	b0 e0       	ldi	r27, 0x00	; 0
    26b8:	e5 e5       	ldi	r30, 0x55	; 85
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	80 81       	ld	r24, Z
    26be:	8b 7f       	andi	r24, 0xFB	; 251
    26c0:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    26c2:	a5 e5       	ldi	r26, 0x55	; 85
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e5 e5       	ldi	r30, 0x55	; 85
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	88 60       	ori	r24, 0x08	; 8
    26ce:	8c 93       	st	X, r24
    26d0:	1d c0       	rjmp	.+58     	; 0x270c <EXTI_enuInit+0x20c>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
    26d2:	a5 e5       	ldi	r26, 0x55	; 85
    26d4:	b0 e0       	ldi	r27, 0x00	; 0
    26d6:	e5 e5       	ldi	r30, 0x55	; 85
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	80 81       	ld	r24, Z
    26dc:	84 60       	ori	r24, 0x04	; 4
    26de:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    26e0:	a5 e5       	ldi	r26, 0x55	; 85
    26e2:	b0 e0       	ldi	r27, 0x00	; 0
    26e4:	e5 e5       	ldi	r30, 0x55	; 85
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	88 60       	ori	r24, 0x08	; 8
    26ec:	8c 93       	st	X, r24
    26ee:	0e c0       	rjmp	.+28     	; 0x270c <EXTI_enuInit+0x20c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_DISABLED){
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	9b 81       	ldd	r25, Y+3	; 0x03
    26f4:	fc 01       	movw	r30, r24
    26f6:	32 96       	adiw	r30, 0x02	; 2
    26f8:	80 81       	ld	r24, Z
    26fa:	88 23       	and	r24, r24
    26fc:	39 f4       	brne	.+14     	; 0x270c <EXTI_enuInit+0x20c>

			CLR_BIT(GICR, INT1_switch);
    26fe:	ab e5       	ldi	r26, 0x5B	; 91
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	eb e5       	ldi	r30, 0x5B	; 91
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	8f 77       	andi	r24, 0x7F	; 127
    270a:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_ENABLED){
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	9b 81       	ldd	r25, Y+3	; 0x03
    2710:	fc 01       	movw	r30, r24
    2712:	34 96       	adiw	r30, 0x04	; 4
    2714:	80 81       	ld	r24, Z
    2716:	81 30       	cpi	r24, 0x01	; 1
    2718:	59 f5       	brne	.+86     	; 0x2770 <EXTI_enuInit+0x270>

			SET_BIT(GICR, INT2_switch);
    271a:	ab e5       	ldi	r26, 0x5B	; 91
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	eb e5       	ldi	r30, 0x5B	; 91
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	80 62       	ori	r24, 0x20	; 32
    2726:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_2].Sence_Level){
    2728:	8a 81       	ldd	r24, Y+2	; 0x02
    272a:	9b 81       	ldd	r25, Y+3	; 0x03
    272c:	fc 01       	movw	r30, r24
    272e:	34 96       	adiw	r30, 0x04	; 4
    2730:	81 81       	ldd	r24, Z+1	; 0x01
    2732:	28 2f       	mov	r18, r24
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	3d 83       	std	Y+5, r19	; 0x05
    2738:	2c 83       	std	Y+4, r18	; 0x04
    273a:	8c 81       	ldd	r24, Y+4	; 0x04
    273c:	9d 81       	ldd	r25, Y+5	; 0x05
    273e:	82 30       	cpi	r24, 0x02	; 2
    2740:	91 05       	cpc	r25, r1
    2742:	31 f0       	breq	.+12     	; 0x2750 <EXTI_enuInit+0x250>
    2744:	2c 81       	ldd	r18, Y+4	; 0x04
    2746:	3d 81       	ldd	r19, Y+5	; 0x05
    2748:	23 30       	cpi	r18, 0x03	; 3
    274a:	31 05       	cpc	r19, r1
    274c:	49 f0       	breq	.+18     	; 0x2760 <EXTI_enuInit+0x260>
    274e:	1e c0       	rjmp	.+60     	; 0x278c <EXTI_enuInit+0x28c>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
    2750:	a4 e5       	ldi	r26, 0x54	; 84
    2752:	b0 e0       	ldi	r27, 0x00	; 0
    2754:	e4 e5       	ldi	r30, 0x54	; 84
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	8f 7b       	andi	r24, 0xBF	; 191
    275c:	8c 93       	st	X, r24
    275e:	16 c0       	rjmp	.+44     	; 0x278c <EXTI_enuInit+0x28c>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
    2760:	a4 e5       	ldi	r26, 0x54	; 84
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e4 e5       	ldi	r30, 0x54	; 84
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	80 64       	ori	r24, 0x40	; 64
    276c:	8c 93       	st	X, r24
    276e:	0e c0       	rjmp	.+28     	; 0x278c <EXTI_enuInit+0x28c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_DISABLED){
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	9b 81       	ldd	r25, Y+3	; 0x03
    2774:	fc 01       	movw	r30, r24
    2776:	34 96       	adiw	r30, 0x04	; 4
    2778:	80 81       	ld	r24, Z
    277a:	88 23       	and	r24, r24
    277c:	39 f4       	brne	.+14     	; 0x278c <EXTI_enuInit+0x28c>

			CLR_BIT(GICR, INT2_switch);
    277e:	ab e5       	ldi	r26, 0x5B	; 91
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	eb e5       	ldi	r30, 0x5B	; 91
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	8f 7d       	andi	r24, 0xDF	; 223
    278a:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    2790:	39 81       	ldd	r19, Y+1	; 0x01
    2792:	3a 87       	std	Y+10, r19	; 0x0a
    2794:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2796:	2a 96       	adiw	r28, 0x0a	; 10
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <EXTI_enuEnableInterrupt>:

ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <EXTI_enuEnableInterrupt+0x6>
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <EXTI_enuEnableInterrupt+0x8>
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    27b6:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	3c 83       	std	Y+4, r19	; 0x04
    27c0:	2b 83       	std	Y+3, r18	; 0x03
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	91 05       	cpc	r25, r1
    27ca:	89 f0       	breq	.+34     	; 0x27ee <EXTI_enuEnableInterrupt+0x46>
    27cc:	2b 81       	ldd	r18, Y+3	; 0x03
    27ce:	3c 81       	ldd	r19, Y+4	; 0x04
    27d0:	22 30       	cpi	r18, 0x02	; 2
    27d2:	31 05       	cpc	r19, r1
    27d4:	a1 f0       	breq	.+40     	; 0x27fe <EXTI_enuEnableInterrupt+0x56>
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	9c 81       	ldd	r25, Y+4	; 0x04
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	b9 f4       	brne	.+46     	; 0x280c <EXTI_enuEnableInterrupt+0x64>
			case INT_NO_0:

				SET_BIT(GICR, INT0_switch);
    27de:	ab e5       	ldi	r26, 0x5B	; 91
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	eb e5       	ldi	r30, 0x5B	; 91
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	80 64       	ori	r24, 0x40	; 64
    27ea:	8c 93       	st	X, r24
    27ec:	0f c0       	rjmp	.+30     	; 0x280c <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_1:

				SET_BIT(GICR, INT1_switch);
    27ee:	ab e5       	ldi	r26, 0x5B	; 91
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	eb e5       	ldi	r30, 0x5B	; 91
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	80 68       	ori	r24, 0x80	; 128
    27fa:	8c 93       	st	X, r24
    27fc:	07 c0       	rjmp	.+14     	; 0x280c <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_2:

				SET_BIT(GICR, INT2_switch);
    27fe:	ab e5       	ldi	r26, 0x5B	; 91
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	eb e5       	ldi	r30, 0x5B	; 91
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	80 62       	ori	r24, 0x20	; 32
    280a:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    280c:	81 e0       	ldi	r24, 0x01	; 1
    280e:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    2810:	89 81       	ldd	r24, Y+1	; 0x01
}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <EXTI_enuDisableInterrupt>:

ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	00 d0       	rcall	.+0      	; 0x2826 <EXTI_enuDisableInterrupt+0x6>
    2826:	00 d0       	rcall	.+0      	; 0x2828 <EXTI_enuDisableInterrupt+0x8>
    2828:	0f 92       	push	r0
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2830:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT_NO_2){
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	83 30       	cpi	r24, 0x03	; 3
    2836:	18 f0       	brcs	.+6      	; 0x283e <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
    2838:	29 81       	ldd	r18, Y+1	; 0x01
    283a:	2d 83       	std	Y+5, r18	; 0x05
    283c:	2e c0       	rjmp	.+92     	; 0x289a <EXTI_enuDisableInterrupt+0x7a>
	}

	else{

		switch(Copy_u8IntNumber){
    283e:	8a 81       	ldd	r24, Y+2	; 0x02
    2840:	28 2f       	mov	r18, r24
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	3c 83       	std	Y+4, r19	; 0x04
    2846:	2b 83       	std	Y+3, r18	; 0x03
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	9c 81       	ldd	r25, Y+4	; 0x04
    284c:	81 30       	cpi	r24, 0x01	; 1
    284e:	91 05       	cpc	r25, r1
    2850:	89 f0       	breq	.+34     	; 0x2874 <EXTI_enuDisableInterrupt+0x54>
    2852:	2b 81       	ldd	r18, Y+3	; 0x03
    2854:	3c 81       	ldd	r19, Y+4	; 0x04
    2856:	22 30       	cpi	r18, 0x02	; 2
    2858:	31 05       	cpc	r19, r1
    285a:	a1 f0       	breq	.+40     	; 0x2884 <EXTI_enuDisableInterrupt+0x64>
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	9c 81       	ldd	r25, Y+4	; 0x04
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	b9 f4       	brne	.+46     	; 0x2892 <EXTI_enuDisableInterrupt+0x72>
		case INT_NO_0:

			
			GICR &= ~(1<<INT0_switch);
    2864:	ab e5       	ldi	r26, 0x5B	; 91
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	eb e5       	ldi	r30, 0x5B	; 91
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	8f 7b       	andi	r24, 0xBF	; 191
    2870:	8c 93       	st	X, r24
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_1:

			GICR &= ~(1<<INT1_switch);
    2874:	ab e5       	ldi	r26, 0x5B	; 91
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	eb e5       	ldi	r30, 0x5B	; 91
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8f 77       	andi	r24, 0x7F	; 127
    2880:	8c 93       	st	X, r24
    2882:	07 c0       	rjmp	.+14     	; 0x2892 <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_2:

			GICR &= ~(1<<INT2_switch);
    2884:	ab e5       	ldi	r26, 0x5B	; 91
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	eb e5       	ldi	r30, 0x5B	; 91
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	8f 7d       	andi	r24, 0xDF	; 223
    2890:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    2892:	81 e0       	ldi	r24, 0x01	; 1
    2894:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    2896:	99 81       	ldd	r25, Y+1	; 0x01
    2898:	9d 83       	std	Y+5, r25	; 0x05
    289a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
    28ac:	df 93       	push	r29
    28ae:	cf 93       	push	r28
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	2c 97       	sbiw	r28, 0x0c	; 12
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    28c4:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT_NO_2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	83 30       	cpi	r24, 0x03	; 3
    28ca:	18 f4       	brcc	.+6      	; 0x28d2 <EXTI_enuSetSenseLevel+0x26>
    28cc:	8b 81       	ldd	r24, Y+3	; 0x03
    28ce:	84 30       	cpi	r24, 0x04	; 4
    28d0:	18 f0       	brcs	.+6      	; 0x28d8 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
    28d2:	29 81       	ldd	r18, Y+1	; 0x01
    28d4:	2c 87       	std	Y+12, r18	; 0x0c
    28d6:	ef c0       	rjmp	.+478    	; 0x2ab6 <EXTI_enuSetSenseLevel+0x20a>
	}

	else{

		switch(Copy_u8IntNumber){
    28d8:	8a 81       	ldd	r24, Y+2	; 0x02
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	3b 87       	std	Y+11, r19	; 0x0b
    28e0:	2a 87       	std	Y+10, r18	; 0x0a
    28e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28e6:	81 30       	cpi	r24, 0x01	; 1
    28e8:	91 05       	cpc	r25, r1
    28ea:	09 f4       	brne	.+2      	; 0x28ee <EXTI_enuSetSenseLevel+0x42>
    28ec:	66 c0       	rjmp	.+204    	; 0x29ba <EXTI_enuSetSenseLevel+0x10e>
    28ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    28f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    28f2:	22 30       	cpi	r18, 0x02	; 2
    28f4:	31 05       	cpc	r19, r1
    28f6:	09 f4       	brne	.+2      	; 0x28fa <EXTI_enuSetSenseLevel+0x4e>
    28f8:	bb c0       	rjmp	.+374    	; 0x2a70 <EXTI_enuSetSenseLevel+0x1c4>
    28fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    28fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	09 f0       	breq	.+2      	; 0x2904 <EXTI_enuSetSenseLevel+0x58>
    2902:	d5 c0       	rjmp	.+426    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>
		case INT_NO_0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2904:	8b 81       	ldd	r24, Y+3	; 0x03
    2906:	28 2f       	mov	r18, r24
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	39 87       	std	Y+9, r19	; 0x09
    290c:	28 87       	std	Y+8, r18	; 0x08
    290e:	88 85       	ldd	r24, Y+8	; 0x08
    2910:	99 85       	ldd	r25, Y+9	; 0x09
    2912:	81 30       	cpi	r24, 0x01	; 1
    2914:	91 05       	cpc	r25, r1
    2916:	a9 f0       	breq	.+42     	; 0x2942 <EXTI_enuSetSenseLevel+0x96>
    2918:	28 85       	ldd	r18, Y+8	; 0x08
    291a:	39 85       	ldd	r19, Y+9	; 0x09
    291c:	22 30       	cpi	r18, 0x02	; 2
    291e:	31 05       	cpc	r19, r1
    2920:	2c f4       	brge	.+10     	; 0x292c <EXTI_enuSetSenseLevel+0x80>
    2922:	88 85       	ldd	r24, Y+8	; 0x08
    2924:	99 85       	ldd	r25, Y+9	; 0x09
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	d9 f0       	breq	.+54     	; 0x2960 <EXTI_enuSetSenseLevel+0xb4>
    292a:	c1 c0       	rjmp	.+386    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>
    292c:	28 85       	ldd	r18, Y+8	; 0x08
    292e:	39 85       	ldd	r19, Y+9	; 0x09
    2930:	22 30       	cpi	r18, 0x02	; 2
    2932:	31 05       	cpc	r19, r1
    2934:	21 f1       	breq	.+72     	; 0x297e <EXTI_enuSetSenseLevel+0xd2>
    2936:	88 85       	ldd	r24, Y+8	; 0x08
    2938:	99 85       	ldd	r25, Y+9	; 0x09
    293a:	83 30       	cpi	r24, 0x03	; 3
    293c:	91 05       	cpc	r25, r1
    293e:	71 f1       	breq	.+92     	; 0x299c <EXTI_enuSetSenseLevel+0xf0>
    2940:	b6 c0       	rjmp	.+364    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
    2942:	a5 e5       	ldi	r26, 0x55	; 85
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	e5 e5       	ldi	r30, 0x55	; 85
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	81 60       	ori	r24, 0x01	; 1
    294e:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    2950:	a5 e5       	ldi	r26, 0x55	; 85
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e5 e5       	ldi	r30, 0x55	; 85
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	8d 7f       	andi	r24, 0xFD	; 253
    295c:	8c 93       	st	X, r24
    295e:	a7 c0       	rjmp	.+334    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    2960:	a5 e5       	ldi	r26, 0x55	; 85
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e5 e5       	ldi	r30, 0x55	; 85
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	8e 7f       	andi	r24, 0xFE	; 254
    296c:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    296e:	a5 e5       	ldi	r26, 0x55	; 85
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	e5 e5       	ldi	r30, 0x55	; 85
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8d 7f       	andi	r24, 0xFD	; 253
    297a:	8c 93       	st	X, r24
    297c:	98 c0       	rjmp	.+304    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    297e:	a5 e5       	ldi	r26, 0x55	; 85
    2980:	b0 e0       	ldi	r27, 0x00	; 0
    2982:	e5 e5       	ldi	r30, 0x55	; 85
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	8e 7f       	andi	r24, 0xFE	; 254
    298a:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    298c:	a5 e5       	ldi	r26, 0x55	; 85
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	e5 e5       	ldi	r30, 0x55	; 85
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	80 81       	ld	r24, Z
    2996:	82 60       	ori	r24, 0x02	; 2
    2998:	8c 93       	st	X, r24
    299a:	89 c0       	rjmp	.+274    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    299c:	a5 e5       	ldi	r26, 0x55	; 85
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e5 e5       	ldi	r30, 0x55	; 85
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	81 60       	ori	r24, 0x01	; 1
    29a8:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    29aa:	a5 e5       	ldi	r26, 0x55	; 85
    29ac:	b0 e0       	ldi	r27, 0x00	; 0
    29ae:	e5 e5       	ldi	r30, 0x55	; 85
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	82 60       	ori	r24, 0x02	; 2
    29b6:	8c 93       	st	X, r24
    29b8:	7a c0       	rjmp	.+244    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>
			/**************************************************/

		case INT_NO_1:

			/**************** 1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	28 2f       	mov	r18, r24
    29be:	30 e0       	ldi	r19, 0x00	; 0
    29c0:	3f 83       	std	Y+7, r19	; 0x07
    29c2:	2e 83       	std	Y+6, r18	; 0x06
    29c4:	8e 81       	ldd	r24, Y+6	; 0x06
    29c6:	9f 81       	ldd	r25, Y+7	; 0x07
    29c8:	81 30       	cpi	r24, 0x01	; 1
    29ca:	91 05       	cpc	r25, r1
    29cc:	a9 f0       	breq	.+42     	; 0x29f8 <EXTI_enuSetSenseLevel+0x14c>
    29ce:	2e 81       	ldd	r18, Y+6	; 0x06
    29d0:	3f 81       	ldd	r19, Y+7	; 0x07
    29d2:	22 30       	cpi	r18, 0x02	; 2
    29d4:	31 05       	cpc	r19, r1
    29d6:	2c f4       	brge	.+10     	; 0x29e2 <EXTI_enuSetSenseLevel+0x136>
    29d8:	8e 81       	ldd	r24, Y+6	; 0x06
    29da:	9f 81       	ldd	r25, Y+7	; 0x07
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	d9 f0       	breq	.+54     	; 0x2a16 <EXTI_enuSetSenseLevel+0x16a>
    29e0:	66 c0       	rjmp	.+204    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>
    29e2:	2e 81       	ldd	r18, Y+6	; 0x06
    29e4:	3f 81       	ldd	r19, Y+7	; 0x07
    29e6:	22 30       	cpi	r18, 0x02	; 2
    29e8:	31 05       	cpc	r19, r1
    29ea:	21 f1       	breq	.+72     	; 0x2a34 <EXTI_enuSetSenseLevel+0x188>
    29ec:	8e 81       	ldd	r24, Y+6	; 0x06
    29ee:	9f 81       	ldd	r25, Y+7	; 0x07
    29f0:	83 30       	cpi	r24, 0x03	; 3
    29f2:	91 05       	cpc	r25, r1
    29f4:	71 f1       	breq	.+92     	; 0x2a52 <EXTI_enuSetSenseLevel+0x1a6>
    29f6:	5b c0       	rjmp	.+182    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    29f8:	a5 e5       	ldi	r26, 0x55	; 85
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e5 e5       	ldi	r30, 0x55	; 85
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	84 60       	ori	r24, 0x04	; 4
    2a04:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    2a06:	a5 e5       	ldi	r26, 0x55	; 85
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	e5 e5       	ldi	r30, 0x55	; 85
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	87 7f       	andi	r24, 0xF7	; 247
    2a12:	8c 93       	st	X, r24
    2a14:	4c c0       	rjmp	.+152    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    2a16:	a5 e5       	ldi	r26, 0x55	; 85
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e5 e5       	ldi	r30, 0x55	; 85
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	80 81       	ld	r24, Z
    2a20:	8b 7f       	andi	r24, 0xFB	; 251
    2a22:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    2a24:	a5 e5       	ldi	r26, 0x55	; 85
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e5 e5       	ldi	r30, 0x55	; 85
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	87 7f       	andi	r24, 0xF7	; 247
    2a30:	8c 93       	st	X, r24
    2a32:	3d c0       	rjmp	.+122    	; 0x2aae <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    2a34:	a5 e5       	ldi	r26, 0x55	; 85
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e5 e5       	ldi	r30, 0x55	; 85
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	8b 7f       	andi	r24, 0xFB	; 251
    2a40:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    2a42:	a5 e5       	ldi	r26, 0x55	; 85
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e5 e5       	ldi	r30, 0x55	; 85
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	88 60       	ori	r24, 0x08	; 8
    2a4e:	8c 93       	st	X, r24
    2a50:	2e c0       	rjmp	.+92     	; 0x2aae <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    2a52:	a5 e5       	ldi	r26, 0x55	; 85
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e5 e5       	ldi	r30, 0x55	; 85
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	84 60       	ori	r24, 0x04	; 4
    2a5e:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    2a60:	a5 e5       	ldi	r26, 0x55	; 85
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e5 e5       	ldi	r30, 0x55	; 85
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 60       	ori	r24, 0x08	; 8
    2a6c:	8c 93       	st	X, r24
    2a6e:	1f c0       	rjmp	.+62     	; 0x2aae <EXTI_enuSetSenseLevel+0x202>


		case INT_NO_2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	3d 83       	std	Y+5, r19	; 0x05
    2a78:	2c 83       	std	Y+4, r18	; 0x04
    2a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a7e:	82 30       	cpi	r24, 0x02	; 2
    2a80:	91 05       	cpc	r25, r1
    2a82:	31 f0       	breq	.+12     	; 0x2a90 <EXTI_enuSetSenseLevel+0x1e4>
    2a84:	2c 81       	ldd	r18, Y+4	; 0x04
    2a86:	3d 81       	ldd	r19, Y+5	; 0x05
    2a88:	23 30       	cpi	r18, 0x03	; 3
    2a8a:	31 05       	cpc	r19, r1
    2a8c:	49 f0       	breq	.+18     	; 0x2aa0 <EXTI_enuSetSenseLevel+0x1f4>
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <EXTI_enuSetSenseLevel+0x202>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    2a90:	a4 e5       	ldi	r26, 0x54	; 84
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e4 e5       	ldi	r30, 0x54	; 84
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	8f 7b       	andi	r24, 0xBF	; 191
    2a9c:	8c 93       	st	X, r24
    2a9e:	07 c0       	rjmp	.+14     	; 0x2aae <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    2aa0:	a4 e5       	ldi	r26, 0x54	; 84
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e4 e5       	ldi	r30, 0x54	; 84
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	80 64       	ori	r24, 0x40	; 64
    2aac:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    2ab2:	39 81       	ldd	r19, Y+1	; 0x01
    2ab4:	3c 87       	std	Y+12, r19	; 0x0c
    2ab6:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2ab8:	2c 96       	adiw	r28, 0x0c	; 12
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	08 95       	ret

00002aca <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	00 d0       	rcall	.+0      	; 0x2ad0 <EXTI_enuSetCallBack+0x6>
    2ad0:	00 d0       	rcall	.+0      	; 0x2ad2 <EXTI_enuSetCallBack+0x8>
    2ad2:	0f 92       	push	r0
    2ad4:	cd b7       	in	r28, 0x3d	; 61
    2ad6:	de b7       	in	r29, 0x3e	; 62
    2ad8:	9b 83       	std	Y+3, r25	; 0x03
    2ada:	8a 83       	std	Y+2, r24	; 0x02
    2adc:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2ade:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ae4:	00 97       	sbiw	r24, 0x00	; 0
    2ae6:	29 f4       	brne	.+10     	; 0x2af2 <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    2ae8:	83 e0       	ldi	r24, 0x03	; 3
    2aea:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	18 c0       	rjmp	.+48     	; 0x2b22 <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT_NO_2){
    2af2:	8c 81       	ldd	r24, Y+4	; 0x04
    2af4:	83 30       	cpi	r24, 0x03	; 3
    2af6:	28 f0       	brcs	.+10     	; 0x2b02 <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    2af8:	84 e0       	ldi	r24, 0x04	; 4
    2afa:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	10 c0       	rjmp	.+32     	; 0x2b22 <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    2b02:	8c 81       	ldd	r24, Y+4	; 0x04
    2b04:	88 2f       	mov	r24, r24
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	e4 56       	subi	r30, 0x64	; 100
    2b10:	fe 4f       	sbci	r31, 0xFE	; 254
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <__vector_1>:


ISR(INT0_vect){
    2b34:	1f 92       	push	r1
    2b36:	0f 92       	push	r0
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	0f 92       	push	r0
    2b3c:	11 24       	eor	r1, r1
    2b3e:	2f 93       	push	r18
    2b40:	3f 93       	push	r19
    2b42:	4f 93       	push	r20
    2b44:	5f 93       	push	r21
    2b46:	6f 93       	push	r22
    2b48:	7f 93       	push	r23
    2b4a:	8f 93       	push	r24
    2b4c:	9f 93       	push	r25
    2b4e:	af 93       	push	r26
    2b50:	bf 93       	push	r27
    2b52:	ef 93       	push	r30
    2b54:	ff 93       	push	r31
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_0] != NULL){
    2b5e:	80 91 9c 01 	lds	r24, 0x019C
    2b62:	90 91 9d 01 	lds	r25, 0x019D
    2b66:	00 97       	sbiw	r24, 0x00	; 0
    2b68:	29 f0       	breq	.+10     	; 0x2b74 <__vector_1+0x40>
			EXTI_pfunISRFun[INT_NO_0]();
    2b6a:	e0 91 9c 01 	lds	r30, 0x019C
    2b6e:	f0 91 9d 01 	lds	r31, 0x019D
    2b72:	09 95       	icall
		}
}
    2b74:	cf 91       	pop	r28
    2b76:	df 91       	pop	r29
    2b78:	ff 91       	pop	r31
    2b7a:	ef 91       	pop	r30
    2b7c:	bf 91       	pop	r27
    2b7e:	af 91       	pop	r26
    2b80:	9f 91       	pop	r25
    2b82:	8f 91       	pop	r24
    2b84:	7f 91       	pop	r23
    2b86:	6f 91       	pop	r22
    2b88:	5f 91       	pop	r21
    2b8a:	4f 91       	pop	r20
    2b8c:	3f 91       	pop	r19
    2b8e:	2f 91       	pop	r18
    2b90:	0f 90       	pop	r0
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	0f 90       	pop	r0
    2b96:	1f 90       	pop	r1
    2b98:	18 95       	reti

00002b9a <__vector_2>:




ISR(INT1_vect){
    2b9a:	1f 92       	push	r1
    2b9c:	0f 92       	push	r0
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	0f 92       	push	r0
    2ba2:	11 24       	eor	r1, r1
    2ba4:	2f 93       	push	r18
    2ba6:	3f 93       	push	r19
    2ba8:	4f 93       	push	r20
    2baa:	5f 93       	push	r21
    2bac:	6f 93       	push	r22
    2bae:	7f 93       	push	r23
    2bb0:	8f 93       	push	r24
    2bb2:	9f 93       	push	r25
    2bb4:	af 93       	push	r26
    2bb6:	bf 93       	push	r27
    2bb8:	ef 93       	push	r30
    2bba:	ff 93       	push	r31
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_1] != NULL){
    2bc4:	80 91 9e 01 	lds	r24, 0x019E
    2bc8:	90 91 9f 01 	lds	r25, 0x019F
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	29 f0       	breq	.+10     	; 0x2bda <__vector_2+0x40>
			EXTI_pfunISRFun[INT_NO_1]();
    2bd0:	e0 91 9e 01 	lds	r30, 0x019E
    2bd4:	f0 91 9f 01 	lds	r31, 0x019F
    2bd8:	09 95       	icall
		}
}
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	ff 91       	pop	r31
    2be0:	ef 91       	pop	r30
    2be2:	bf 91       	pop	r27
    2be4:	af 91       	pop	r26
    2be6:	9f 91       	pop	r25
    2be8:	8f 91       	pop	r24
    2bea:	7f 91       	pop	r23
    2bec:	6f 91       	pop	r22
    2bee:	5f 91       	pop	r21
    2bf0:	4f 91       	pop	r20
    2bf2:	3f 91       	pop	r19
    2bf4:	2f 91       	pop	r18
    2bf6:	0f 90       	pop	r0
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	0f 90       	pop	r0
    2bfc:	1f 90       	pop	r1
    2bfe:	18 95       	reti

00002c00 <__vector_3>:



ISR(INT2_vect){
    2c00:	1f 92       	push	r1
    2c02:	0f 92       	push	r0
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	0f 92       	push	r0
    2c08:	11 24       	eor	r1, r1
    2c0a:	2f 93       	push	r18
    2c0c:	3f 93       	push	r19
    2c0e:	4f 93       	push	r20
    2c10:	5f 93       	push	r21
    2c12:	6f 93       	push	r22
    2c14:	7f 93       	push	r23
    2c16:	8f 93       	push	r24
    2c18:	9f 93       	push	r25
    2c1a:	af 93       	push	r26
    2c1c:	bf 93       	push	r27
    2c1e:	ef 93       	push	r30
    2c20:	ff 93       	push	r31
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_2] != NULL){
    2c2a:	80 91 a0 01 	lds	r24, 0x01A0
    2c2e:	90 91 a1 01 	lds	r25, 0x01A1
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	29 f0       	breq	.+10     	; 0x2c40 <__vector_3+0x40>
			EXTI_pfunISRFun[INT_NO_2]();
    2c36:	e0 91 a0 01 	lds	r30, 0x01A0
    2c3a:	f0 91 a1 01 	lds	r31, 0x01A1
    2c3e:	09 95       	icall
		}
}
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	ff 91       	pop	r31
    2c46:	ef 91       	pop	r30
    2c48:	bf 91       	pop	r27
    2c4a:	af 91       	pop	r26
    2c4c:	9f 91       	pop	r25
    2c4e:	8f 91       	pop	r24
    2c50:	7f 91       	pop	r23
    2c52:	6f 91       	pop	r22
    2c54:	5f 91       	pop	r21
    2c56:	4f 91       	pop	r20
    2c58:	3f 91       	pop	r19
    2c5a:	2f 91       	pop	r18
    2c5c:	0f 90       	pop	r0
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	0f 90       	pop	r0
    2c62:	1f 90       	pop	r1
    2c64:	18 95       	reti

00002c66 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	0f 92       	push	r0
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2c70:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    2c72:	ea e3       	ldi	r30, 0x3A	; 58
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 ef       	ldi	r24, 0xF0	; 240
    2c78:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    2c7a:	eb e3       	ldi	r30, 0x3B	; 59
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	83 ec       	ldi	r24, 0xC3	; 195
    2c80:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    2c82:	e7 e3       	ldi	r30, 0x37	; 55
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 ef       	ldi	r24, 0xF0	; 240
    2c88:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    2c8a:	e8 e3       	ldi	r30, 0x38	; 56
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	83 ec       	ldi	r24, 0xC3	; 195
    2c90:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    2c92:	e4 e3       	ldi	r30, 0x34	; 52
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 ef       	ldi	r24, 0xF0	; 240
    2c98:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    2c9a:	e5 e3       	ldi	r30, 0x35	; 53
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	83 ec       	ldi	r24, 0xC3	; 195
    2ca0:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    2ca2:	e1 e3       	ldi	r30, 0x31	; 49
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	80 ef       	ldi	r24, 0xF0	; 240
    2ca8:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    2caa:	e2 e3       	ldi	r30, 0x32	; 50
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	83 ec       	ldi	r24, 0xC3	; 195
    2cb0:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cb4:	0f 90       	pop	r0
    2cb6:	cf 91       	pop	r28
    2cb8:	df 91       	pop	r29
    2cba:	08 95       	ret

00002cbc <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    2cbc:	df 93       	push	r29
    2cbe:	cf 93       	push	r28
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	27 97       	sbiw	r28, 0x07	; 7
    2cc6:	0f b6       	in	r0, 0x3f	; 63
    2cc8:	f8 94       	cli
    2cca:	de bf       	out	0x3e, r29	; 62
    2ccc:	0f be       	out	0x3f, r0	; 63
    2cce:	cd bf       	out	0x3d, r28	; 61
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
    2cd2:	6b 83       	std	Y+3, r22	; 0x03
    2cd4:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2cd6:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	84 30       	cpi	r24, 0x04	; 4
    2cdc:	08 f0       	brcs	.+2      	; 0x2ce0 <DIO_enuSetPinDirection+0x24>
    2cde:	de c0       	rjmp	.+444    	; 0x2e9c <DIO_enuSetPinDirection+0x1e0>
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	88 30       	cpi	r24, 0x08	; 8
    2ce4:	08 f0       	brcs	.+2      	; 0x2ce8 <DIO_enuSetPinDirection+0x2c>
    2ce6:	da c0       	rjmp	.+436    	; 0x2e9c <DIO_enuSetPinDirection+0x1e0>
    2ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cea:	82 30       	cpi	r24, 0x02	; 2
    2cec:	08 f0       	brcs	.+2      	; 0x2cf0 <DIO_enuSetPinDirection+0x34>
    2cee:	d6 c0       	rjmp	.+428    	; 0x2e9c <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	3f 83       	std	Y+7, r19	; 0x07
    2cf8:	2e 83       	std	Y+6, r18	; 0x06
    2cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cfe:	81 30       	cpi	r24, 0x01	; 1
    2d00:	91 05       	cpc	r25, r1
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <DIO_enuSetPinDirection+0x4a>
    2d04:	43 c0       	rjmp	.+134    	; 0x2d8c <DIO_enuSetPinDirection+0xd0>
    2d06:	2e 81       	ldd	r18, Y+6	; 0x06
    2d08:	3f 81       	ldd	r19, Y+7	; 0x07
    2d0a:	22 30       	cpi	r18, 0x02	; 2
    2d0c:	31 05       	cpc	r19, r1
    2d0e:	2c f4       	brge	.+10     	; 0x2d1a <DIO_enuSetPinDirection+0x5e>
    2d10:	8e 81       	ldd	r24, Y+6	; 0x06
    2d12:	9f 81       	ldd	r25, Y+7	; 0x07
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	71 f0       	breq	.+28     	; 0x2d34 <DIO_enuSetPinDirection+0x78>
    2d18:	bc c0       	rjmp	.+376    	; 0x2e92 <DIO_enuSetPinDirection+0x1d6>
    2d1a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d1c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d1e:	22 30       	cpi	r18, 0x02	; 2
    2d20:	31 05       	cpc	r19, r1
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <DIO_enuSetPinDirection+0x6a>
    2d24:	5f c0       	rjmp	.+190    	; 0x2de4 <DIO_enuSetPinDirection+0x128>
    2d26:	8e 81       	ldd	r24, Y+6	; 0x06
    2d28:	9f 81       	ldd	r25, Y+7	; 0x07
    2d2a:	83 30       	cpi	r24, 0x03	; 3
    2d2c:	91 05       	cpc	r25, r1
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <DIO_enuSetPinDirection+0x76>
    2d30:	85 c0       	rjmp	.+266    	; 0x2e3c <DIO_enuSetPinDirection+0x180>
    2d32:	af c0       	rjmp	.+350    	; 0x2e92 <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2d34:	8c 81       	ldd	r24, Y+4	; 0x04
    2d36:	81 30       	cpi	r24, 0x01	; 1
    2d38:	a1 f4       	brne	.+40     	; 0x2d62 <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    2d3a:	aa e3       	ldi	r26, 0x3A	; 58
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	ea e3       	ldi	r30, 0x3A	; 58
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	80 81       	ld	r24, Z
    2d44:	48 2f       	mov	r20, r24
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	28 2f       	mov	r18, r24
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	02 2e       	mov	r0, r18
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <DIO_enuSetPinDirection+0x9c>
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	0a 94       	dec	r0
    2d5a:	e2 f7       	brpl	.-8      	; 0x2d54 <DIO_enuSetPinDirection+0x98>
    2d5c:	84 2b       	or	r24, r20
    2d5e:	8c 93       	st	X, r24
    2d60:	98 c0       	rjmp	.+304    	; 0x2e92 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    2d62:	aa e3       	ldi	r26, 0x3A	; 58
    2d64:	b0 e0       	ldi	r27, 0x00	; 0
    2d66:	ea e3       	ldi	r30, 0x3A	; 58
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	48 2f       	mov	r20, r24
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	28 2f       	mov	r18, r24
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	02 2e       	mov	r0, r18
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <DIO_enuSetPinDirection+0xc4>
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	0a 94       	dec	r0
    2d82:	e2 f7       	brpl	.-8      	; 0x2d7c <DIO_enuSetPinDirection+0xc0>
    2d84:	80 95       	com	r24
    2d86:	84 23       	and	r24, r20
    2d88:	8c 93       	st	X, r24
    2d8a:	83 c0       	rjmp	.+262    	; 0x2e92 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	a1 f4       	brne	.+40     	; 0x2dba <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    2d92:	a7 e3       	ldi	r26, 0x37	; 55
    2d94:	b0 e0       	ldi	r27, 0x00	; 0
    2d96:	e7 e3       	ldi	r30, 0x37	; 55
    2d98:	f0 e0       	ldi	r31, 0x00	; 0
    2d9a:	80 81       	ld	r24, Z
    2d9c:	48 2f       	mov	r20, r24
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	02 2e       	mov	r0, r18
    2daa:	02 c0       	rjmp	.+4      	; 0x2db0 <DIO_enuSetPinDirection+0xf4>
    2dac:	88 0f       	add	r24, r24
    2dae:	99 1f       	adc	r25, r25
    2db0:	0a 94       	dec	r0
    2db2:	e2 f7       	brpl	.-8      	; 0x2dac <DIO_enuSetPinDirection+0xf0>
    2db4:	84 2b       	or	r24, r20
    2db6:	8c 93       	st	X, r24
    2db8:	6c c0       	rjmp	.+216    	; 0x2e92 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    2dba:	a7 e3       	ldi	r26, 0x37	; 55
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	e7 e3       	ldi	r30, 0x37	; 55
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	48 2f       	mov	r20, r24
    2dc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc8:	28 2f       	mov	r18, r24
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	02 2e       	mov	r0, r18
    2dd2:	02 c0       	rjmp	.+4      	; 0x2dd8 <DIO_enuSetPinDirection+0x11c>
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	0a 94       	dec	r0
    2dda:	e2 f7       	brpl	.-8      	; 0x2dd4 <DIO_enuSetPinDirection+0x118>
    2ddc:	80 95       	com	r24
    2dde:	84 23       	and	r24, r20
    2de0:	8c 93       	st	X, r24
    2de2:	57 c0       	rjmp	.+174    	; 0x2e92 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    2de4:	8c 81       	ldd	r24, Y+4	; 0x04
    2de6:	81 30       	cpi	r24, 0x01	; 1
    2de8:	a1 f4       	brne	.+40     	; 0x2e12 <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    2dea:	a4 e3       	ldi	r26, 0x34	; 52
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	e4 e3       	ldi	r30, 0x34	; 52
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	48 2f       	mov	r20, r24
    2df6:	8b 81       	ldd	r24, Y+3	; 0x03
    2df8:	28 2f       	mov	r18, r24
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	02 2e       	mov	r0, r18
    2e02:	02 c0       	rjmp	.+4      	; 0x2e08 <DIO_enuSetPinDirection+0x14c>
    2e04:	88 0f       	add	r24, r24
    2e06:	99 1f       	adc	r25, r25
    2e08:	0a 94       	dec	r0
    2e0a:	e2 f7       	brpl	.-8      	; 0x2e04 <DIO_enuSetPinDirection+0x148>
    2e0c:	84 2b       	or	r24, r20
    2e0e:	8c 93       	st	X, r24
    2e10:	40 c0       	rjmp	.+128    	; 0x2e92 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    2e12:	a4 e3       	ldi	r26, 0x34	; 52
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	e4 e3       	ldi	r30, 0x34	; 52
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	48 2f       	mov	r20, r24
    2e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e20:	28 2f       	mov	r18, r24
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	02 2e       	mov	r0, r18
    2e2a:	02 c0       	rjmp	.+4      	; 0x2e30 <DIO_enuSetPinDirection+0x174>
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	0a 94       	dec	r0
    2e32:	e2 f7       	brpl	.-8      	; 0x2e2c <DIO_enuSetPinDirection+0x170>
    2e34:	80 95       	com	r24
    2e36:	84 23       	and	r24, r20
    2e38:	8c 93       	st	X, r24
    2e3a:	2b c0       	rjmp	.+86     	; 0x2e92 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2e3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3e:	81 30       	cpi	r24, 0x01	; 1
    2e40:	a1 f4       	brne	.+40     	; 0x2e6a <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    2e42:	a1 e3       	ldi	r26, 0x31	; 49
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	e1 e3       	ldi	r30, 0x31	; 49
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	48 2f       	mov	r20, r24
    2e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e50:	28 2f       	mov	r18, r24
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	02 2e       	mov	r0, r18
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <DIO_enuSetPinDirection+0x1a4>
    2e5c:	88 0f       	add	r24, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	0a 94       	dec	r0
    2e62:	e2 f7       	brpl	.-8      	; 0x2e5c <DIO_enuSetPinDirection+0x1a0>
    2e64:	84 2b       	or	r24, r20
    2e66:	8c 93       	st	X, r24
    2e68:	14 c0       	rjmp	.+40     	; 0x2e92 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    2e6a:	a1 e3       	ldi	r26, 0x31	; 49
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	e1 e3       	ldi	r30, 0x31	; 49
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	48 2f       	mov	r20, r24
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	28 2f       	mov	r18, r24
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	02 2e       	mov	r0, r18
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <DIO_enuSetPinDirection+0x1cc>
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	0a 94       	dec	r0
    2e8a:	e2 f7       	brpl	.-8      	; 0x2e84 <DIO_enuSetPinDirection+0x1c8>
    2e8c:	80 95       	com	r24
    2e8e:	84 23       	and	r24, r20
    2e90:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    2e96:	99 81       	ldd	r25, Y+1	; 0x01
    2e98:	9d 83       	std	Y+5, r25	; 0x05
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    2e9c:	29 81       	ldd	r18, Y+1	; 0x01
    2e9e:	2d 83       	std	Y+5, r18	; 0x05
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    2ea2:	27 96       	adiw	r28, 0x07	; 7
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	f8 94       	cli
    2ea8:	de bf       	out	0x3e, r29	; 62
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	cd bf       	out	0x3d, r28	; 61
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	27 97       	sbiw	r28, 0x07	; 7
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	8a 83       	std	Y+2, r24	; 0x02
    2eca:	6b 83       	std	Y+3, r22	; 0x03
    2ecc:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2ece:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	84 30       	cpi	r24, 0x04	; 4
    2ed4:	08 f0       	brcs	.+2      	; 0x2ed8 <DIO_enuSetPinValue+0x24>
    2ed6:	de c0       	rjmp	.+444    	; 0x3094 <DIO_enuSetPinValue+0x1e0>
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	88 30       	cpi	r24, 0x08	; 8
    2edc:	08 f0       	brcs	.+2      	; 0x2ee0 <DIO_enuSetPinValue+0x2c>
    2ede:	da c0       	rjmp	.+436    	; 0x3094 <DIO_enuSetPinValue+0x1e0>
    2ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee2:	82 30       	cpi	r24, 0x02	; 2
    2ee4:	08 f0       	brcs	.+2      	; 0x2ee8 <DIO_enuSetPinValue+0x34>
    2ee6:	d6 c0       	rjmp	.+428    	; 0x3094 <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	3f 83       	std	Y+7, r19	; 0x07
    2ef0:	2e 83       	std	Y+6, r18	; 0x06
    2ef2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef6:	81 30       	cpi	r24, 0x01	; 1
    2ef8:	91 05       	cpc	r25, r1
    2efa:	09 f4       	brne	.+2      	; 0x2efe <DIO_enuSetPinValue+0x4a>
    2efc:	43 c0       	rjmp	.+134    	; 0x2f84 <DIO_enuSetPinValue+0xd0>
    2efe:	2e 81       	ldd	r18, Y+6	; 0x06
    2f00:	3f 81       	ldd	r19, Y+7	; 0x07
    2f02:	22 30       	cpi	r18, 0x02	; 2
    2f04:	31 05       	cpc	r19, r1
    2f06:	2c f4       	brge	.+10     	; 0x2f12 <DIO_enuSetPinValue+0x5e>
    2f08:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	71 f0       	breq	.+28     	; 0x2f2c <DIO_enuSetPinValue+0x78>
    2f10:	bc c0       	rjmp	.+376    	; 0x308a <DIO_enuSetPinValue+0x1d6>
    2f12:	2e 81       	ldd	r18, Y+6	; 0x06
    2f14:	3f 81       	ldd	r19, Y+7	; 0x07
    2f16:	22 30       	cpi	r18, 0x02	; 2
    2f18:	31 05       	cpc	r19, r1
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <DIO_enuSetPinValue+0x6a>
    2f1c:	5f c0       	rjmp	.+190    	; 0x2fdc <DIO_enuSetPinValue+0x128>
    2f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f20:	9f 81       	ldd	r25, Y+7	; 0x07
    2f22:	83 30       	cpi	r24, 0x03	; 3
    2f24:	91 05       	cpc	r25, r1
    2f26:	09 f4       	brne	.+2      	; 0x2f2a <DIO_enuSetPinValue+0x76>
    2f28:	85 c0       	rjmp	.+266    	; 0x3034 <DIO_enuSetPinValue+0x180>
    2f2a:	af c0       	rjmp	.+350    	; 0x308a <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    2f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f2e:	88 23       	and	r24, r24
    2f30:	a1 f0       	breq	.+40     	; 0x2f5a <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    2f32:	ab e3       	ldi	r26, 0x3B	; 59
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	eb e3       	ldi	r30, 0x3B	; 59
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	48 2f       	mov	r20, r24
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	28 2f       	mov	r18, r24
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	81 e0       	ldi	r24, 0x01	; 1
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	02 2e       	mov	r0, r18
    2f4a:	02 c0       	rjmp	.+4      	; 0x2f50 <DIO_enuSetPinValue+0x9c>
    2f4c:	88 0f       	add	r24, r24
    2f4e:	99 1f       	adc	r25, r25
    2f50:	0a 94       	dec	r0
    2f52:	e2 f7       	brpl	.-8      	; 0x2f4c <DIO_enuSetPinValue+0x98>
    2f54:	84 2b       	or	r24, r20
    2f56:	8c 93       	st	X, r24
    2f58:	98 c0       	rjmp	.+304    	; 0x308a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    2f5a:	ab e3       	ldi	r26, 0x3B	; 59
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	eb e3       	ldi	r30, 0x3B	; 59
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	48 2f       	mov	r20, r24
    2f66:	8b 81       	ldd	r24, Y+3	; 0x03
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	02 2e       	mov	r0, r18
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <DIO_enuSetPinValue+0xc4>
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	0a 94       	dec	r0
    2f7a:	e2 f7       	brpl	.-8      	; 0x2f74 <DIO_enuSetPinValue+0xc0>
    2f7c:	80 95       	com	r24
    2f7e:	84 23       	and	r24, r20
    2f80:	8c 93       	st	X, r24
    2f82:	83 c0       	rjmp	.+262    	; 0x308a <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    2f84:	8c 81       	ldd	r24, Y+4	; 0x04
    2f86:	88 23       	and	r24, r24
    2f88:	a1 f0       	breq	.+40     	; 0x2fb2 <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    2f8a:	a8 e3       	ldi	r26, 0x38	; 56
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	e8 e3       	ldi	r30, 0x38	; 56
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	48 2f       	mov	r20, r24
    2f96:	8b 81       	ldd	r24, Y+3	; 0x03
    2f98:	28 2f       	mov	r18, r24
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	02 2e       	mov	r0, r18
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <DIO_enuSetPinValue+0xf4>
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	0a 94       	dec	r0
    2faa:	e2 f7       	brpl	.-8      	; 0x2fa4 <DIO_enuSetPinValue+0xf0>
    2fac:	84 2b       	or	r24, r20
    2fae:	8c 93       	st	X, r24
    2fb0:	6c c0       	rjmp	.+216    	; 0x308a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    2fb2:	a8 e3       	ldi	r26, 0x38	; 56
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e8 e3       	ldi	r30, 0x38	; 56
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	48 2f       	mov	r20, r24
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	02 2e       	mov	r0, r18
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <DIO_enuSetPinValue+0x11c>
    2fcc:	88 0f       	add	r24, r24
    2fce:	99 1f       	adc	r25, r25
    2fd0:	0a 94       	dec	r0
    2fd2:	e2 f7       	brpl	.-8      	; 0x2fcc <DIO_enuSetPinValue+0x118>
    2fd4:	80 95       	com	r24
    2fd6:	84 23       	and	r24, r20
    2fd8:	8c 93       	st	X, r24
    2fda:	57 c0       	rjmp	.+174    	; 0x308a <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    2fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    2fde:	88 23       	and	r24, r24
    2fe0:	a1 f0       	breq	.+40     	; 0x300a <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    2fe2:	a5 e3       	ldi	r26, 0x35	; 53
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	e5 e3       	ldi	r30, 0x35	; 53
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	48 2f       	mov	r20, r24
    2fee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	02 2e       	mov	r0, r18
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <DIO_enuSetPinValue+0x14c>
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	0a 94       	dec	r0
    3002:	e2 f7       	brpl	.-8      	; 0x2ffc <DIO_enuSetPinValue+0x148>
    3004:	84 2b       	or	r24, r20
    3006:	8c 93       	st	X, r24
    3008:	40 c0       	rjmp	.+128    	; 0x308a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    300a:	a5 e3       	ldi	r26, 0x35	; 53
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e5 e3       	ldi	r30, 0x35	; 53
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	48 2f       	mov	r20, r24
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	02 2e       	mov	r0, r18
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <DIO_enuSetPinValue+0x174>
    3024:	88 0f       	add	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	0a 94       	dec	r0
    302a:	e2 f7       	brpl	.-8      	; 0x3024 <DIO_enuSetPinValue+0x170>
    302c:	80 95       	com	r24
    302e:	84 23       	and	r24, r20
    3030:	8c 93       	st	X, r24
    3032:	2b c0       	rjmp	.+86     	; 0x308a <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    3034:	8c 81       	ldd	r24, Y+4	; 0x04
    3036:	88 23       	and	r24, r24
    3038:	a1 f0       	breq	.+40     	; 0x3062 <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    303a:	a2 e3       	ldi	r26, 0x32	; 50
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	e2 e3       	ldi	r30, 0x32	; 50
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	48 2f       	mov	r20, r24
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	28 2f       	mov	r18, r24
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	81 e0       	ldi	r24, 0x01	; 1
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	02 2e       	mov	r0, r18
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <DIO_enuSetPinValue+0x1a4>
    3054:	88 0f       	add	r24, r24
    3056:	99 1f       	adc	r25, r25
    3058:	0a 94       	dec	r0
    305a:	e2 f7       	brpl	.-8      	; 0x3054 <DIO_enuSetPinValue+0x1a0>
    305c:	84 2b       	or	r24, r20
    305e:	8c 93       	st	X, r24
    3060:	14 c0       	rjmp	.+40     	; 0x308a <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    3062:	a2 e3       	ldi	r26, 0x32	; 50
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	e2 e3       	ldi	r30, 0x32	; 50
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	48 2f       	mov	r20, r24
    306e:	8b 81       	ldd	r24, Y+3	; 0x03
    3070:	28 2f       	mov	r18, r24
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	02 2e       	mov	r0, r18
    307a:	02 c0       	rjmp	.+4      	; 0x3080 <DIO_enuSetPinValue+0x1cc>
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	0a 94       	dec	r0
    3082:	e2 f7       	brpl	.-8      	; 0x307c <DIO_enuSetPinValue+0x1c8>
    3084:	80 95       	com	r24
    3086:	84 23       	and	r24, r20
    3088:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    308e:	99 81       	ldd	r25, Y+1	; 0x01
    3090:	9d 83       	std	Y+5, r25	; 0x05
    3092:	02 c0       	rjmp	.+4      	; 0x3098 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    3094:	29 81       	ldd	r18, Y+1	; 0x01
    3096:	2d 83       	std	Y+5, r18	; 0x05
    3098:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    309a:	27 96       	adiw	r28, 0x07	; 7
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	cf 91       	pop	r28
    30a8:	df 91       	pop	r29
    30aa:	08 95       	ret

000030ac <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    30ac:	df 93       	push	r29
    30ae:	cf 93       	push	r28
    30b0:	cd b7       	in	r28, 0x3d	; 61
    30b2:	de b7       	in	r29, 0x3e	; 62
    30b4:	28 97       	sbiw	r28, 0x08	; 8
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	8a 83       	std	Y+2, r24	; 0x02
    30c2:	6b 83       	std	Y+3, r22	; 0x03
    30c4:	5d 83       	std	Y+5, r21	; 0x05
    30c6:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    30c8:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    30ca:	8c 81       	ldd	r24, Y+4	; 0x04
    30cc:	9d 81       	ldd	r25, Y+5	; 0x05
    30ce:	00 97       	sbiw	r24, 0x00	; 0
    30d0:	29 f4       	brne	.+10     	; 0x30dc <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    30d2:	83 e0       	ldi	r24, 0x03	; 3
    30d4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    30d6:	29 81       	ldd	r18, Y+1	; 0x01
    30d8:	28 87       	std	Y+8, r18	; 0x08
    30da:	7f c0       	rjmp	.+254    	; 0x31da <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    30dc:	8a 81       	ldd	r24, Y+2	; 0x02
    30de:	84 30       	cpi	r24, 0x04	; 4
    30e0:	08 f0       	brcs	.+2      	; 0x30e4 <DIO_enuGetPinValue+0x38>
    30e2:	79 c0       	rjmp	.+242    	; 0x31d6 <DIO_enuGetPinValue+0x12a>
    30e4:	8b 81       	ldd	r24, Y+3	; 0x03
    30e6:	88 30       	cpi	r24, 0x08	; 8
    30e8:	08 f0       	brcs	.+2      	; 0x30ec <DIO_enuGetPinValue+0x40>
    30ea:	75 c0       	rjmp	.+234    	; 0x31d6 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    30ec:	8a 81       	ldd	r24, Y+2	; 0x02
    30ee:	48 2f       	mov	r20, r24
    30f0:	50 e0       	ldi	r21, 0x00	; 0
    30f2:	5f 83       	std	Y+7, r21	; 0x07
    30f4:	4e 83       	std	Y+6, r20	; 0x06
    30f6:	8e 81       	ldd	r24, Y+6	; 0x06
    30f8:	9f 81       	ldd	r25, Y+7	; 0x07
    30fa:	81 30       	cpi	r24, 0x01	; 1
    30fc:	91 05       	cpc	r25, r1
    30fe:	59 f1       	breq	.+86     	; 0x3156 <DIO_enuGetPinValue+0xaa>
    3100:	2e 81       	ldd	r18, Y+6	; 0x06
    3102:	3f 81       	ldd	r19, Y+7	; 0x07
    3104:	22 30       	cpi	r18, 0x02	; 2
    3106:	31 05       	cpc	r19, r1
    3108:	34 f4       	brge	.+12     	; 0x3116 <DIO_enuGetPinValue+0x6a>
    310a:	4e 81       	ldd	r20, Y+6	; 0x06
    310c:	5f 81       	ldd	r21, Y+7	; 0x07
    310e:	41 15       	cp	r20, r1
    3110:	51 05       	cpc	r21, r1
    3112:	69 f0       	breq	.+26     	; 0x312e <DIO_enuGetPinValue+0x82>
    3114:	5b c0       	rjmp	.+182    	; 0x31cc <DIO_enuGetPinValue+0x120>
    3116:	8e 81       	ldd	r24, Y+6	; 0x06
    3118:	9f 81       	ldd	r25, Y+7	; 0x07
    311a:	82 30       	cpi	r24, 0x02	; 2
    311c:	91 05       	cpc	r25, r1
    311e:	79 f1       	breq	.+94     	; 0x317e <DIO_enuGetPinValue+0xd2>
    3120:	2e 81       	ldd	r18, Y+6	; 0x06
    3122:	3f 81       	ldd	r19, Y+7	; 0x07
    3124:	23 30       	cpi	r18, 0x03	; 3
    3126:	31 05       	cpc	r19, r1
    3128:	09 f4       	brne	.+2      	; 0x312c <DIO_enuGetPinValue+0x80>
    312a:	3d c0       	rjmp	.+122    	; 0x31a6 <DIO_enuGetPinValue+0xfa>
    312c:	4f c0       	rjmp	.+158    	; 0x31cc <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    312e:	e9 e3       	ldi	r30, 0x39	; 57
    3130:	f0 e0       	ldi	r31, 0x00	; 0
    3132:	80 81       	ld	r24, Z
    3134:	28 2f       	mov	r18, r24
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	8b 81       	ldd	r24, Y+3	; 0x03
    313a:	88 2f       	mov	r24, r24
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	a9 01       	movw	r20, r18
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <DIO_enuGetPinValue+0x9a>
    3142:	55 95       	asr	r21
    3144:	47 95       	ror	r20
    3146:	8a 95       	dec	r24
    3148:	e2 f7       	brpl	.-8      	; 0x3142 <DIO_enuGetPinValue+0x96>
    314a:	ca 01       	movw	r24, r20
    314c:	81 70       	andi	r24, 0x01	; 1
    314e:	ec 81       	ldd	r30, Y+4	; 0x04
    3150:	fd 81       	ldd	r31, Y+5	; 0x05
    3152:	80 83       	st	Z, r24
    3154:	3b c0       	rjmp	.+118    	; 0x31cc <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    3156:	e6 e3       	ldi	r30, 0x36	; 54
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	28 2f       	mov	r18, r24
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	88 2f       	mov	r24, r24
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	a9 01       	movw	r20, r18
    3168:	02 c0       	rjmp	.+4      	; 0x316e <DIO_enuGetPinValue+0xc2>
    316a:	55 95       	asr	r21
    316c:	47 95       	ror	r20
    316e:	8a 95       	dec	r24
    3170:	e2 f7       	brpl	.-8      	; 0x316a <DIO_enuGetPinValue+0xbe>
    3172:	ca 01       	movw	r24, r20
    3174:	81 70       	andi	r24, 0x01	; 1
    3176:	ec 81       	ldd	r30, Y+4	; 0x04
    3178:	fd 81       	ldd	r31, Y+5	; 0x05
    317a:	80 83       	st	Z, r24
    317c:	27 c0       	rjmp	.+78     	; 0x31cc <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    317e:	e3 e3       	ldi	r30, 0x33	; 51
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	80 81       	ld	r24, Z
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	88 2f       	mov	r24, r24
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	a9 01       	movw	r20, r18
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <DIO_enuGetPinValue+0xea>
    3192:	55 95       	asr	r21
    3194:	47 95       	ror	r20
    3196:	8a 95       	dec	r24
    3198:	e2 f7       	brpl	.-8      	; 0x3192 <DIO_enuGetPinValue+0xe6>
    319a:	ca 01       	movw	r24, r20
    319c:	81 70       	andi	r24, 0x01	; 1
    319e:	ec 81       	ldd	r30, Y+4	; 0x04
    31a0:	fd 81       	ldd	r31, Y+5	; 0x05
    31a2:	80 83       	st	Z, r24
    31a4:	13 c0       	rjmp	.+38     	; 0x31cc <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    31a6:	e0 e3       	ldi	r30, 0x30	; 48
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	88 2f       	mov	r24, r24
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	a9 01       	movw	r20, r18
    31b8:	02 c0       	rjmp	.+4      	; 0x31be <DIO_enuGetPinValue+0x112>
    31ba:	55 95       	asr	r21
    31bc:	47 95       	ror	r20
    31be:	8a 95       	dec	r24
    31c0:	e2 f7       	brpl	.-8      	; 0x31ba <DIO_enuGetPinValue+0x10e>
    31c2:	ca 01       	movw	r24, r20
    31c4:	81 70       	andi	r24, 0x01	; 1
    31c6:	ec 81       	ldd	r30, Y+4	; 0x04
    31c8:	fd 81       	ldd	r31, Y+5	; 0x05
    31ca:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    31d0:	59 81       	ldd	r21, Y+1	; 0x01
    31d2:	58 87       	std	Y+8, r21	; 0x08
    31d4:	02 c0       	rjmp	.+4      	; 0x31da <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	88 87       	std	Y+8, r24	; 0x08
    31da:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    31dc:	28 96       	adiw	r28, 0x08	; 8
    31de:	0f b6       	in	r0, 0x3f	; 63
    31e0:	f8 94       	cli
    31e2:	de bf       	out	0x3e, r29	; 62
    31e4:	0f be       	out	0x3f, r0	; 63
    31e6:	cd bf       	out	0x3d, r28	; 61
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	08 95       	ret

000031ee <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <DIO_enuTogglePinValue+0x6>
    31f4:	00 d0       	rcall	.+0      	; 0x31f6 <DIO_enuTogglePinValue+0x8>
    31f6:	00 d0       	rcall	.+0      	; 0x31f8 <DIO_enuTogglePinValue+0xa>
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	8a 83       	std	Y+2, r24	; 0x02
    31fe:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3200:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	84 30       	cpi	r24, 0x04	; 4
    3206:	08 f0       	brcs	.+2      	; 0x320a <DIO_enuTogglePinValue+0x1c>
    3208:	77 c0       	rjmp	.+238    	; 0x32f8 <DIO_enuTogglePinValue+0x10a>
    320a:	8b 81       	ldd	r24, Y+3	; 0x03
    320c:	88 30       	cpi	r24, 0x08	; 8
    320e:	08 f0       	brcs	.+2      	; 0x3212 <DIO_enuTogglePinValue+0x24>
    3210:	73 c0       	rjmp	.+230    	; 0x32f8 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    3212:	8a 81       	ldd	r24, Y+2	; 0x02
    3214:	28 2f       	mov	r18, r24
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	3e 83       	std	Y+6, r19	; 0x06
    321a:	2d 83       	std	Y+5, r18	; 0x05
    321c:	8d 81       	ldd	r24, Y+5	; 0x05
    321e:	9e 81       	ldd	r25, Y+6	; 0x06
    3220:	81 30       	cpi	r24, 0x01	; 1
    3222:	91 05       	cpc	r25, r1
    3224:	49 f1       	breq	.+82     	; 0x3278 <DIO_enuTogglePinValue+0x8a>
    3226:	2d 81       	ldd	r18, Y+5	; 0x05
    3228:	3e 81       	ldd	r19, Y+6	; 0x06
    322a:	22 30       	cpi	r18, 0x02	; 2
    322c:	31 05       	cpc	r19, r1
    322e:	2c f4       	brge	.+10     	; 0x323a <DIO_enuTogglePinValue+0x4c>
    3230:	8d 81       	ldd	r24, Y+5	; 0x05
    3232:	9e 81       	ldd	r25, Y+6	; 0x06
    3234:	00 97       	sbiw	r24, 0x00	; 0
    3236:	61 f0       	breq	.+24     	; 0x3250 <DIO_enuTogglePinValue+0x62>
    3238:	5a c0       	rjmp	.+180    	; 0x32ee <DIO_enuTogglePinValue+0x100>
    323a:	2d 81       	ldd	r18, Y+5	; 0x05
    323c:	3e 81       	ldd	r19, Y+6	; 0x06
    323e:	22 30       	cpi	r18, 0x02	; 2
    3240:	31 05       	cpc	r19, r1
    3242:	71 f1       	breq	.+92     	; 0x32a0 <DIO_enuTogglePinValue+0xb2>
    3244:	8d 81       	ldd	r24, Y+5	; 0x05
    3246:	9e 81       	ldd	r25, Y+6	; 0x06
    3248:	83 30       	cpi	r24, 0x03	; 3
    324a:	91 05       	cpc	r25, r1
    324c:	e9 f1       	breq	.+122    	; 0x32c8 <DIO_enuTogglePinValue+0xda>
    324e:	4f c0       	rjmp	.+158    	; 0x32ee <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    3250:	ab e3       	ldi	r26, 0x3B	; 59
    3252:	b0 e0       	ldi	r27, 0x00	; 0
    3254:	eb e3       	ldi	r30, 0x3B	; 59
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	48 2f       	mov	r20, r24
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	28 2f       	mov	r18, r24
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	02 2e       	mov	r0, r18
    3268:	02 c0       	rjmp	.+4      	; 0x326e <DIO_enuTogglePinValue+0x80>
    326a:	88 0f       	add	r24, r24
    326c:	99 1f       	adc	r25, r25
    326e:	0a 94       	dec	r0
    3270:	e2 f7       	brpl	.-8      	; 0x326a <DIO_enuTogglePinValue+0x7c>
    3272:	84 27       	eor	r24, r20
    3274:	8c 93       	st	X, r24
    3276:	3b c0       	rjmp	.+118    	; 0x32ee <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    3278:	a8 e3       	ldi	r26, 0x38	; 56
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e8 e3       	ldi	r30, 0x38	; 56
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	80 81       	ld	r24, Z
    3282:	48 2f       	mov	r20, r24
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	28 2f       	mov	r18, r24
    3288:	30 e0       	ldi	r19, 0x00	; 0
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	02 2e       	mov	r0, r18
    3290:	02 c0       	rjmp	.+4      	; 0x3296 <DIO_enuTogglePinValue+0xa8>
    3292:	88 0f       	add	r24, r24
    3294:	99 1f       	adc	r25, r25
    3296:	0a 94       	dec	r0
    3298:	e2 f7       	brpl	.-8      	; 0x3292 <DIO_enuTogglePinValue+0xa4>
    329a:	84 27       	eor	r24, r20
    329c:	8c 93       	st	X, r24
    329e:	27 c0       	rjmp	.+78     	; 0x32ee <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    32a0:	a5 e3       	ldi	r26, 0x35	; 53
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e5 e3       	ldi	r30, 0x35	; 53
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	48 2f       	mov	r20, r24
    32ac:	8b 81       	ldd	r24, Y+3	; 0x03
    32ae:	28 2f       	mov	r18, r24
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	02 2e       	mov	r0, r18
    32b8:	02 c0       	rjmp	.+4      	; 0x32be <DIO_enuTogglePinValue+0xd0>
    32ba:	88 0f       	add	r24, r24
    32bc:	99 1f       	adc	r25, r25
    32be:	0a 94       	dec	r0
    32c0:	e2 f7       	brpl	.-8      	; 0x32ba <DIO_enuTogglePinValue+0xcc>
    32c2:	84 27       	eor	r24, r20
    32c4:	8c 93       	st	X, r24
    32c6:	13 c0       	rjmp	.+38     	; 0x32ee <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    32c8:	a2 e3       	ldi	r26, 0x32	; 50
    32ca:	b0 e0       	ldi	r27, 0x00	; 0
    32cc:	e2 e3       	ldi	r30, 0x32	; 50
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	80 81       	ld	r24, Z
    32d2:	48 2f       	mov	r20, r24
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	28 2f       	mov	r18, r24
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	02 2e       	mov	r0, r18
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <DIO_enuTogglePinValue+0xf8>
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	0a 94       	dec	r0
    32e8:	e2 f7       	brpl	.-8      	; 0x32e2 <DIO_enuTogglePinValue+0xf4>
    32ea:	84 27       	eor	r24, r20
    32ec:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    32f2:	99 81       	ldd	r25, Y+1	; 0x01
    32f4:	9c 83       	std	Y+4, r25	; 0x04
    32f6:	02 c0       	rjmp	.+4      	; 0x32fc <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    32f8:	29 81       	ldd	r18, Y+1	; 0x01
    32fa:	2c 83       	std	Y+4, r18	; 0x04
    32fc:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    32fe:	26 96       	adiw	r28, 0x06	; 6
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	08 95       	ret

00003310 <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    3310:	df 93       	push	r29
    3312:	cf 93       	push	r28
    3314:	00 d0       	rcall	.+0      	; 0x3316 <DIO_enuSetPortDirection+0x6>
    3316:	00 d0       	rcall	.+0      	; 0x3318 <DIO_enuSetPortDirection+0x8>
    3318:	00 d0       	rcall	.+0      	; 0x331a <DIO_enuSetPortDirection+0xa>
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	8a 83       	std	Y+2, r24	; 0x02
    3320:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3322:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    3324:	8a 81       	ldd	r24, Y+2	; 0x02
    3326:	84 30       	cpi	r24, 0x04	; 4
    3328:	08 f0       	brcs	.+2      	; 0x332c <DIO_enuSetPortDirection+0x1c>
    332a:	57 c0       	rjmp	.+174    	; 0x33da <DIO_enuSetPortDirection+0xca>
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	82 30       	cpi	r24, 0x02	; 2
    3330:	08 f0       	brcs	.+2      	; 0x3334 <DIO_enuSetPortDirection+0x24>
    3332:	53 c0       	rjmp	.+166    	; 0x33da <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	28 2f       	mov	r18, r24
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	3e 83       	std	Y+6, r19	; 0x06
    333c:	2d 83       	std	Y+5, r18	; 0x05
    333e:	8d 81       	ldd	r24, Y+5	; 0x05
    3340:	9e 81       	ldd	r25, Y+6	; 0x06
    3342:	81 30       	cpi	r24, 0x01	; 1
    3344:	91 05       	cpc	r25, r1
    3346:	09 f1       	breq	.+66     	; 0x338a <DIO_enuSetPortDirection+0x7a>
    3348:	2d 81       	ldd	r18, Y+5	; 0x05
    334a:	3e 81       	ldd	r19, Y+6	; 0x06
    334c:	22 30       	cpi	r18, 0x02	; 2
    334e:	31 05       	cpc	r19, r1
    3350:	2c f4       	brge	.+10     	; 0x335c <DIO_enuSetPortDirection+0x4c>
    3352:	8d 81       	ldd	r24, Y+5	; 0x05
    3354:	9e 81       	ldd	r25, Y+6	; 0x06
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	61 f0       	breq	.+24     	; 0x3372 <DIO_enuSetPortDirection+0x62>
    335a:	3a c0       	rjmp	.+116    	; 0x33d0 <DIO_enuSetPortDirection+0xc0>
    335c:	2d 81       	ldd	r18, Y+5	; 0x05
    335e:	3e 81       	ldd	r19, Y+6	; 0x06
    3360:	22 30       	cpi	r18, 0x02	; 2
    3362:	31 05       	cpc	r19, r1
    3364:	f1 f0       	breq	.+60     	; 0x33a2 <DIO_enuSetPortDirection+0x92>
    3366:	8d 81       	ldd	r24, Y+5	; 0x05
    3368:	9e 81       	ldd	r25, Y+6	; 0x06
    336a:	83 30       	cpi	r24, 0x03	; 3
    336c:	91 05       	cpc	r25, r1
    336e:	29 f1       	breq	.+74     	; 0x33ba <DIO_enuSetPortDirection+0xaa>
    3370:	2f c0       	rjmp	.+94     	; 0x33d0 <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    3372:	8b 81       	ldd	r24, Y+3	; 0x03
    3374:	81 30       	cpi	r24, 0x01	; 1
    3376:	29 f4       	brne	.+10     	; 0x3382 <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    3378:	ea e3       	ldi	r30, 0x3A	; 58
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	8f ef       	ldi	r24, 0xFF	; 255
    337e:	80 83       	st	Z, r24
    3380:	27 c0       	rjmp	.+78     	; 0x33d0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    3382:	ea e3       	ldi	r30, 0x3A	; 58
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	10 82       	st	Z, r1
    3388:	23 c0       	rjmp	.+70     	; 0x33d0 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	81 30       	cpi	r24, 0x01	; 1
    338e:	29 f4       	brne	.+10     	; 0x339a <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    3390:	e7 e3       	ldi	r30, 0x37	; 55
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	8f ef       	ldi	r24, 0xFF	; 255
    3396:	80 83       	st	Z, r24
    3398:	1b c0       	rjmp	.+54     	; 0x33d0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    339a:	e7 e3       	ldi	r30, 0x37	; 55
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	10 82       	st	Z, r1
    33a0:	17 c0       	rjmp	.+46     	; 0x33d0 <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    33a2:	8b 81       	ldd	r24, Y+3	; 0x03
    33a4:	81 30       	cpi	r24, 0x01	; 1
    33a6:	29 f4       	brne	.+10     	; 0x33b2 <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    33a8:	e4 e3       	ldi	r30, 0x34	; 52
    33aa:	f0 e0       	ldi	r31, 0x00	; 0
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	80 83       	st	Z, r24
    33b0:	0f c0       	rjmp	.+30     	; 0x33d0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    33b2:	e4 e3       	ldi	r30, 0x34	; 52
    33b4:	f0 e0       	ldi	r31, 0x00	; 0
    33b6:	10 82       	st	Z, r1
    33b8:	0b c0       	rjmp	.+22     	; 0x33d0 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	81 30       	cpi	r24, 0x01	; 1
    33be:	29 f4       	brne	.+10     	; 0x33ca <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    33c0:	e1 e3       	ldi	r30, 0x31	; 49
    33c2:	f0 e0       	ldi	r31, 0x00	; 0
    33c4:	8f ef       	ldi	r24, 0xFF	; 255
    33c6:	80 83       	st	Z, r24
    33c8:	03 c0       	rjmp	.+6      	; 0x33d0 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    33ca:	e1 e3       	ldi	r30, 0x31	; 49
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    33d4:	99 81       	ldd	r25, Y+1	; 0x01
    33d6:	9c 83       	std	Y+4, r25	; 0x04
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    33da:	29 81       	ldd	r18, Y+1	; 0x01
    33dc:	2c 83       	std	Y+4, r18	; 0x04
    33de:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    33e0:	26 96       	adiw	r28, 0x06	; 6
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	f8 94       	cli
    33e6:	de bf       	out	0x3e, r29	; 62
    33e8:	0f be       	out	0x3f, r0	; 63
    33ea:	cd bf       	out	0x3d, r28	; 61
    33ec:	cf 91       	pop	r28
    33ee:	df 91       	pop	r29
    33f0:	08 95       	ret

000033f2 <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <DIO_enuSetPortValue+0x6>
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <DIO_enuSetPortValue+0x8>
    33fa:	00 d0       	rcall	.+0      	; 0x33fc <DIO_enuSetPortValue+0xa>
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
    3400:	8a 83       	std	Y+2, r24	; 0x02
    3402:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3404:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    3406:	8a 81       	ldd	r24, Y+2	; 0x02
    3408:	84 30       	cpi	r24, 0x04	; 4
    340a:	08 f0       	brcs	.+2      	; 0x340e <DIO_enuSetPortValue+0x1c>
    340c:	57 c0       	rjmp	.+174    	; 0x34bc <DIO_enuSetPortValue+0xca>
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	82 30       	cpi	r24, 0x02	; 2
    3412:	08 f0       	brcs	.+2      	; 0x3416 <DIO_enuSetPortValue+0x24>
    3414:	53 c0       	rjmp	.+166    	; 0x34bc <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    3416:	8a 81       	ldd	r24, Y+2	; 0x02
    3418:	28 2f       	mov	r18, r24
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	3e 83       	std	Y+6, r19	; 0x06
    341e:	2d 83       	std	Y+5, r18	; 0x05
    3420:	8d 81       	ldd	r24, Y+5	; 0x05
    3422:	9e 81       	ldd	r25, Y+6	; 0x06
    3424:	81 30       	cpi	r24, 0x01	; 1
    3426:	91 05       	cpc	r25, r1
    3428:	09 f1       	breq	.+66     	; 0x346c <DIO_enuSetPortValue+0x7a>
    342a:	2d 81       	ldd	r18, Y+5	; 0x05
    342c:	3e 81       	ldd	r19, Y+6	; 0x06
    342e:	22 30       	cpi	r18, 0x02	; 2
    3430:	31 05       	cpc	r19, r1
    3432:	2c f4       	brge	.+10     	; 0x343e <DIO_enuSetPortValue+0x4c>
    3434:	8d 81       	ldd	r24, Y+5	; 0x05
    3436:	9e 81       	ldd	r25, Y+6	; 0x06
    3438:	00 97       	sbiw	r24, 0x00	; 0
    343a:	61 f0       	breq	.+24     	; 0x3454 <DIO_enuSetPortValue+0x62>
    343c:	3a c0       	rjmp	.+116    	; 0x34b2 <DIO_enuSetPortValue+0xc0>
    343e:	2d 81       	ldd	r18, Y+5	; 0x05
    3440:	3e 81       	ldd	r19, Y+6	; 0x06
    3442:	22 30       	cpi	r18, 0x02	; 2
    3444:	31 05       	cpc	r19, r1
    3446:	f1 f0       	breq	.+60     	; 0x3484 <DIO_enuSetPortValue+0x92>
    3448:	8d 81       	ldd	r24, Y+5	; 0x05
    344a:	9e 81       	ldd	r25, Y+6	; 0x06
    344c:	83 30       	cpi	r24, 0x03	; 3
    344e:	91 05       	cpc	r25, r1
    3450:	29 f1       	breq	.+74     	; 0x349c <DIO_enuSetPortValue+0xaa>
    3452:	2f c0       	rjmp	.+94     	; 0x34b2 <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    3454:	8b 81       	ldd	r24, Y+3	; 0x03
    3456:	88 23       	and	r24, r24
    3458:	29 f0       	breq	.+10     	; 0x3464 <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    345a:	eb e3       	ldi	r30, 0x3B	; 59
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	8f ef       	ldi	r24, 0xFF	; 255
    3460:	80 83       	st	Z, r24
    3462:	27 c0       	rjmp	.+78     	; 0x34b2 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    3464:	eb e3       	ldi	r30, 0x3B	; 59
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	10 82       	st	Z, r1
    346a:	23 c0       	rjmp	.+70     	; 0x34b2 <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    346c:	8b 81       	ldd	r24, Y+3	; 0x03
    346e:	88 23       	and	r24, r24
    3470:	29 f0       	breq	.+10     	; 0x347c <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    3472:	e8 e3       	ldi	r30, 0x38	; 56
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	8f ef       	ldi	r24, 0xFF	; 255
    3478:	80 83       	st	Z, r24
    347a:	1b c0       	rjmp	.+54     	; 0x34b2 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    347c:	e8 e3       	ldi	r30, 0x38	; 56
    347e:	f0 e0       	ldi	r31, 0x00	; 0
    3480:	10 82       	st	Z, r1
    3482:	17 c0       	rjmp	.+46     	; 0x34b2 <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    3484:	8b 81       	ldd	r24, Y+3	; 0x03
    3486:	88 23       	and	r24, r24
    3488:	29 f0       	breq	.+10     	; 0x3494 <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    348a:	e5 e3       	ldi	r30, 0x35	; 53
    348c:	f0 e0       	ldi	r31, 0x00	; 0
    348e:	8f ef       	ldi	r24, 0xFF	; 255
    3490:	80 83       	st	Z, r24
    3492:	0f c0       	rjmp	.+30     	; 0x34b2 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    3494:	e5 e3       	ldi	r30, 0x35	; 53
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	10 82       	st	Z, r1
    349a:	0b c0       	rjmp	.+22     	; 0x34b2 <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    349c:	8b 81       	ldd	r24, Y+3	; 0x03
    349e:	88 23       	and	r24, r24
    34a0:	29 f0       	breq	.+10     	; 0x34ac <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    34a2:	e2 e3       	ldi	r30, 0x32	; 50
    34a4:	f0 e0       	ldi	r31, 0x00	; 0
    34a6:	8f ef       	ldi	r24, 0xFF	; 255
    34a8:	80 83       	st	Z, r24
    34aa:	03 c0       	rjmp	.+6      	; 0x34b2 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    34ac:	e2 e3       	ldi	r30, 0x32	; 50
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    34b6:	99 81       	ldd	r25, Y+1	; 0x01
    34b8:	9c 83       	std	Y+4, r25	; 0x04
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    34bc:	29 81       	ldd	r18, Y+1	; 0x01
    34be:	2c 83       	std	Y+4, r18	; 0x04
    34c0:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    34c2:	26 96       	adiw	r28, 0x06	; 6
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <ADC_enuInit>:


static void (*ADC_CallBackFunction)(void) = NULL;


void ADC_enuInit(){
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	2e 97       	sbiw	r28, 0x0e	; 14
    34de:	0f b6       	in	r0, 0x3f	; 63
    34e0:	f8 94       	cli
    34e2:	de bf       	out	0x3e, r29	; 62
    34e4:	0f be       	out	0x3f, r0	; 63
    34e6:	cd bf       	out	0x3d, r28	; 61
	 * 5. Enabling ADC
	 * */


	/*************************** Selecting  voltage reference ***************************/
		ADMUX_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    34e8:	a7 e2       	ldi	r26, 0x27	; 39
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	e7 e2       	ldi	r30, 0x27	; 39
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	80 81       	ld	r24, Z
    34f2:	8f 71       	andi	r24, 0x1F	; 31
    34f4:	8c 93       	st	X, r24
		ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
    34f6:	a7 e2       	ldi	r26, 0x27	; 39
    34f8:	b0 e0       	ldi	r27, 0x00	; 0
    34fa:	e7 e2       	ldi	r30, 0x27	; 39
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	80 81       	ld	r24, Z
    3500:	80 64       	ori	r24, 0x40	; 64
    3502:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************** Selecting ADC MODE ********************************/
		#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
			SET_BIT(ADCSRA_REG, ADCSRA_ADATE);
    3504:	a6 e2       	ldi	r26, 0x26	; 38
    3506:	b0 e0       	ldi	r27, 0x00	; 0
    3508:	e6 e2       	ldi	r30, 0x26	; 38
    350a:	f0 e0       	ldi	r31, 0x00	; 0
    350c:	80 81       	ld	r24, Z
    350e:	80 62       	ori	r24, 0x20	; 32
    3510:	8c 93       	st	X, r24

			SFIOR_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    3512:	a0 e5       	ldi	r26, 0x50	; 80
    3514:	b0 e0       	ldi	r27, 0x00	; 0
    3516:	e0 e5       	ldi	r30, 0x50	; 80
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	8f 71       	andi	r24, 0x1F	; 31
    351e:	8c 93       	st	X, r24
			SFIOR_REG |= ADC_AUTO_TRIG_SRCE_SELECTOR;
    3520:	a0 e5       	ldi	r26, 0x50	; 80
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	e0 e5       	ldi	r30, 0x50	; 80
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* Selecting Adjustment *******************************/
		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			CLR_BIT(ADMUX_REG, ADMUX_ADLAR);
    352c:	a7 e2       	ldi	r26, 0x27	; 39
    352e:	b0 e0       	ldi	r27, 0x00	; 0
    3530:	e7 e2       	ldi	r30, 0x27	; 39
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	80 81       	ld	r24, Z
    3536:	8f 7d       	andi	r24, 0xDF	; 223
    3538:	8c 93       	st	X, r24
	/***************************** Clearing  Interrupt Flag *****************************/
		//! Notice: that ADIF to be cleared we write logical one (from data sheet)
		//So in initialization of ADC we write 1 to ADIF bit to make sure that the
		//flag is cleared in order to make sure that ADC ready for upcoming conversation
		// clearing interrupt flag
		SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    353a:	a6 e2       	ldi	r26, 0x26	; 38
    353c:	b0 e0       	ldi	r27, 0x00	; 0
    353e:	e6 e2       	ldi	r30, 0x26	; 38
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
    3544:	80 61       	ori	r24, 0x10	; 16
    3546:	8c 93       	st	X, r24
	/************************************************************************************/


	/*********************************** Enabling ADC ***********************************/
		SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    3548:	a6 e2       	ldi	r26, 0x26	; 38
    354a:	b0 e0       	ldi	r27, 0x00	; 0
    354c:	e6 e2       	ldi	r30, 0x26	; 38
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	80 81       	ld	r24, Z
    3552:	80 68       	ori	r24, 0x80	; 128
    3554:	8c 93       	st	X, r24
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	a8 e4       	ldi	r26, 0x48	; 72
    355c:	b3 e4       	ldi	r27, 0x43	; 67
    355e:	8b 87       	std	Y+11, r24	; 0x0b
    3560:	9c 87       	std	Y+12, r25	; 0x0c
    3562:	ad 87       	std	Y+13, r26	; 0x0d
    3564:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3566:	6b 85       	ldd	r22, Y+11	; 0x0b
    3568:	7c 85       	ldd	r23, Y+12	; 0x0c
    356a:	8d 85       	ldd	r24, Y+13	; 0x0d
    356c:	9e 85       	ldd	r25, Y+14	; 0x0e
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	4a e7       	ldi	r20, 0x7A	; 122
    3574:	55 e4       	ldi	r21, 0x45	; 69
    3576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	8f 83       	std	Y+7, r24	; 0x07
    3580:	98 87       	std	Y+8, r25	; 0x08
    3582:	a9 87       	std	Y+9, r26	; 0x09
    3584:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3586:	6f 81       	ldd	r22, Y+7	; 0x07
    3588:	78 85       	ldd	r23, Y+8	; 0x08
    358a:	89 85       	ldd	r24, Y+9	; 0x09
    358c:	9a 85       	ldd	r25, Y+10	; 0x0a
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e8       	ldi	r20, 0x80	; 128
    3594:	5f e3       	ldi	r21, 0x3F	; 63
    3596:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    359a:	88 23       	and	r24, r24
    359c:	2c f4       	brge	.+10     	; 0x35a8 <ADC_enuInit+0xd4>
		__ticks = 1;
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	9e 83       	std	Y+6, r25	; 0x06
    35a4:	8d 83       	std	Y+5, r24	; 0x05
    35a6:	3f c0       	rjmp	.+126    	; 0x3626 <ADC_enuInit+0x152>
	else if (__tmp > 65535)
    35a8:	6f 81       	ldd	r22, Y+7	; 0x07
    35aa:	78 85       	ldd	r23, Y+8	; 0x08
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	3f ef       	ldi	r19, 0xFF	; 255
    35b4:	4f e7       	ldi	r20, 0x7F	; 127
    35b6:	57 e4       	ldi	r21, 0x47	; 71
    35b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35bc:	18 16       	cp	r1, r24
    35be:	4c f5       	brge	.+82     	; 0x3612 <ADC_enuInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	40 e2       	ldi	r20, 0x20	; 32
    35ce:	51 e4       	ldi	r21, 0x41	; 65
    35d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	bc 01       	movw	r22, r24
    35da:	cd 01       	movw	r24, r26
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	9e 83       	std	Y+6, r25	; 0x06
    35e6:	8d 83       	std	Y+5, r24	; 0x05
    35e8:	0f c0       	rjmp	.+30     	; 0x3608 <ADC_enuInit+0x134>
    35ea:	80 e9       	ldi	r24, 0x90	; 144
    35ec:	91 e0       	ldi	r25, 0x01	; 1
    35ee:	9c 83       	std	Y+4, r25	; 0x04
    35f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	9c 81       	ldd	r25, Y+4	; 0x04
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <ADC_enuInit+0x122>
    35fa:	9c 83       	std	Y+4, r25	; 0x04
    35fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	9e 81       	ldd	r25, Y+6	; 0x06
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	9e 83       	std	Y+6, r25	; 0x06
    3606:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	9e 81       	ldd	r25, Y+6	; 0x06
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	69 f7       	brne	.-38     	; 0x35ea <ADC_enuInit+0x116>
    3610:	14 c0       	rjmp	.+40     	; 0x363a <ADC_enuInit+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3612:	6f 81       	ldd	r22, Y+7	; 0x07
    3614:	78 85       	ldd	r23, Y+8	; 0x08
    3616:	89 85       	ldd	r24, Y+9	; 0x09
    3618:	9a 85       	ldd	r25, Y+10	; 0x0a
    361a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	9e 83       	std	Y+6, r25	; 0x06
    3624:	8d 83       	std	Y+5, r24	; 0x05
    3626:	8d 81       	ldd	r24, Y+5	; 0x05
    3628:	9e 81       	ldd	r25, Y+6	; 0x06
    362a:	9a 83       	std	Y+2, r25	; 0x02
    362c:	89 83       	std	Y+1, r24	; 0x01
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	9a 81       	ldd	r25, Y+2	; 0x02
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	f1 f7       	brne	.-4      	; 0x3632 <ADC_enuInit+0x15e>
    3636:	9a 83       	std	Y+2, r25	; 0x02
    3638:	89 83       	std	Y+1, r24	; 0x01


	// Waiting until ADC is stablized
	_delay_ms(200);

}
    363a:	2e 96       	adiw	r28, 0x0e	; 14
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	cd bf       	out	0x3d, r28	; 61
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <ADC_enuStartConversion>:




ErrorStatus_t ADC_enuStartConversion(ADC_Channel_types ADC_channel_N){
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	00 d0       	rcall	.+0      	; 0x3652 <ADC_enuStartConversion+0x6>
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
    3656:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3658:	19 82       	std	Y+1, r1	; 0x01


	/******************************** Select ADC Channel ********************************/
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_clr_msk;
    365a:	a7 e2       	ldi	r26, 0x27	; 39
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	e7 e2       	ldi	r30, 0x27	; 39
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	80 81       	ld	r24, Z
    3664:	80 7e       	andi	r24, 0xE0	; 224
    3666:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_channel_N;
    3668:	a7 e2       	ldi	r26, 0x27	; 39
    366a:	b0 e0       	ldi	r27, 0x00	; 0
    366c:	e7 e2       	ldi	r30, 0x27	; 39
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	90 81       	ld	r25, Z
    3672:	8a 81       	ldd	r24, Y+2	; 0x02
    3674:	89 2b       	or	r24, r25
    3676:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* ADC Start Conversion *******************************/
	//!!!!!!!!!!!!!!
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    3678:	a6 e2       	ldi	r26, 0x26	; 38
    367a:	b0 e0       	ldi	r27, 0x00	; 0
    367c:	e6 e2       	ldi	r30, 0x26	; 38
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	80 81       	ld	r24, Z
    3682:	80 64       	ori	r24, 0x40	; 64
    3684:	8c 93       	st	X, r24
	/************************************************************************************/

	return Local_enuErrrorState;
    3686:	89 81       	ldd	r24, Y+1	; 0x01
}
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	08 95       	ret

00003692 <ADC_GetResult>:



uint16 ADC_GetResult(){
    3692:	df 93       	push	r29
    3694:	cf 93       	push	r28
    3696:	cd b7       	in	r28, 0x3d	; 61
    3698:	de b7       	in	r29, 0x3e	; 62
			Copy_u16ReadValue |= ((uint16)ADCH_REG<<2);
			return Copy_u16ReadValue;
		#endif

		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			return ADCLH_REG;
    369a:	e4 e2       	ldi	r30, 0x24	; 36
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	80 81       	ld	r24, Z
    36a0:	91 81       	ldd	r25, Z+1	; 0x01





}
    36a2:	cf 91       	pop	r28
    36a4:	df 91       	pop	r29
    36a6:	08 95       	ret

000036a8 <ADC_enuSetCallBack>:




ErrorStatus_t ADC_enuSetCallBack(void(*Copy_pfunAppFun)(void)){
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	00 d0       	rcall	.+0      	; 0x36ae <ADC_enuSetCallBack+0x6>
    36ae:	00 d0       	rcall	.+0      	; 0x36b0 <ADC_enuSetCallBack+0x8>
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	9b 83       	std	Y+3, r25	; 0x03
    36b6:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    36b8:	19 82       	std	Y+1, r1	; 0x01

//	if(Copy_pfunAppFun == NULL ||  Copy_u8IntNumber> IN)

	if(Copy_pfunAppFun == NULL){
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	9b 81       	ldd	r25, Y+3	; 0x03
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	19 f4       	brne	.+6      	; 0x36c8 <ADC_enuSetCallBack+0x20>

		return Local_enuErrrorState;
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	8c 83       	std	Y+4, r24	; 0x04
    36c6:	0a c0       	rjmp	.+20     	; 0x36dc <ADC_enuSetCallBack+0x34>
	}

	else{
		Local_enuErrrorState = ERROR_STATUS_OK;
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	89 83       	std	Y+1, r24	; 0x01

		ADC_CallBackFunction = Copy_pfunAppFun;
    36cc:	8a 81       	ldd	r24, Y+2	; 0x02
    36ce:	9b 81       	ldd	r25, Y+3	; 0x03
    36d0:	90 93 a3 01 	sts	0x01A3, r25
    36d4:	80 93 a2 01 	sts	0x01A2, r24

	}



	return Local_enuErrrorState;
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	8c 83       	std	Y+4, r24	; 0x04
    36dc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	08 95       	ret

000036ec <__vector_16>:

ISR(__vector_16){
    36ec:	1f 92       	push	r1
    36ee:	0f 92       	push	r0
    36f0:	0f b6       	in	r0, 0x3f	; 63
    36f2:	0f 92       	push	r0
    36f4:	11 24       	eor	r1, r1
    36f6:	2f 93       	push	r18
    36f8:	3f 93       	push	r19
    36fa:	4f 93       	push	r20
    36fc:	5f 93       	push	r21
    36fe:	6f 93       	push	r22
    3700:	7f 93       	push	r23
    3702:	8f 93       	push	r24
    3704:	9f 93       	push	r25
    3706:	af 93       	push	r26
    3708:	bf 93       	push	r27
    370a:	ef 93       	push	r30
    370c:	ff 93       	push	r31
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CallBackFunction != NULL){
    3716:	80 91 a2 01 	lds	r24, 0x01A2
    371a:	90 91 a3 01 	lds	r25, 0x01A3
    371e:	00 97       	sbiw	r24, 0x00	; 0
    3720:	29 f0       	breq	.+10     	; 0x372c <__vector_16+0x40>
		ADC_CallBackFunction();
    3722:	e0 91 a2 01 	lds	r30, 0x01A2
    3726:	f0 91 a3 01 	lds	r31, 0x01A3
    372a:	09 95       	icall
	}

}
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	ff 91       	pop	r31
    3732:	ef 91       	pop	r30
    3734:	bf 91       	pop	r27
    3736:	af 91       	pop	r26
    3738:	9f 91       	pop	r25
    373a:	8f 91       	pop	r24
    373c:	7f 91       	pop	r23
    373e:	6f 91       	pop	r22
    3740:	5f 91       	pop	r21
    3742:	4f 91       	pop	r20
    3744:	3f 91       	pop	r19
    3746:	2f 91       	pop	r18
    3748:	0f 90       	pop	r0
    374a:	0f be       	out	0x3f, r0	; 63
    374c:	0f 90       	pop	r0
    374e:	1f 90       	pop	r1
    3750:	18 95       	reti

00003752 <ultraSonic_enuInit>:
#include "ultraSonic_interface.h"
/*****************************************************************/



ErrorStatus_t ultraSonic_enuInit(ultraSonic_t ultraSonic_Instance){
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	28 97       	sbiw	r28, 0x08	; 8
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61
    3766:	4a 83       	std	Y+2, r20	; 0x02
    3768:	5b 83       	std	Y+3, r21	; 0x03
    376a:	6c 83       	std	Y+4, r22	; 0x04
    376c:	7d 83       	std	Y+5, r23	; 0x05
    376e:	8e 83       	std	Y+6, r24	; 0x06
    3770:	9f 83       	std	Y+7, r25	; 0x07
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3772:	19 82       	std	Y+1, r1	; 0x01



    if (ultraSonic_Instance.ECHO_PORT < DIO_u8PortA ||
    3774:	8a 81       	ldd	r24, Y+2	; 0x02
    3776:	84 30       	cpi	r24, 0x04	; 4
    3778:	18 f4       	brcc	.+6      	; 0x3780 <ultraSonic_enuInit+0x2e>
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	88 30       	cpi	r24, 0x08	; 8
    377e:	18 f0       	brcs	.+6      	; 0x3786 <ultraSonic_enuInit+0x34>
    	ultraSonic_Instance.ECHO_PORT > DIO_u8PortD ||
        ultraSonic_Instance.ECHO_PIN < DIO_u8PIN0 || ultraSonic_Instance.ECHO_PIN > DIO_u8PIN7) {

    	return Local_enuErrrorState;  // Return failure if the ECHO_PORT or ECHO_PIN are invalid
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	88 87       	std	Y+8, r24	; 0x08
    3784:	14 c0       	rjmp	.+40     	; 0x37ae <ultraSonic_enuInit+0x5c>

    } else {

    	Timer1_SetupForTimeMeasurement(8);
    3786:	88 e0       	ldi	r24, 0x08	; 8
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 06 0b 	call	0x160c	; 0x160c <Timer1_SetupForTimeMeasurement>
    	DIO_enuSetPinDirection(ultraSonic_Instance.ECHO_PORT, ultraSonic_Instance.ECHO_PIN, DIO_u8INPUT);
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	9b 81       	ldd	r25, Y+3	; 0x03
    3792:	69 2f       	mov	r22, r25
    3794:	40 e0       	ldi	r20, 0x00	; 0
    3796:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
    	DIO_enuSetPinDirection(ultraSonic_Instance.TRIG_PORT, ultraSonic_Instance.TRIG_PIN, DIO_u8OUTPUT);
    379a:	8c 81       	ldd	r24, Y+4	; 0x04
    379c:	9d 81       	ldd	r25, Y+5	; 0x05
    379e:	69 2f       	mov	r22, r25
    37a0:	41 e0       	ldi	r20, 0x01	; 1
    37a2:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
    }




	Local_enuErrrorState = ERROR_STATUS_OK;
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    37aa:	89 81       	ldd	r24, Y+1	; 0x01
    37ac:	88 87       	std	Y+8, r24	; 0x08
    37ae:	88 85       	ldd	r24, Y+8	; 0x08
}
    37b0:	28 96       	adiw	r28, 0x08	; 8
    37b2:	0f b6       	in	r0, 0x3f	; 63
    37b4:	f8 94       	cli
    37b6:	de bf       	out	0x3e, r29	; 62
    37b8:	0f be       	out	0x3f, r0	; 63
    37ba:	cd bf       	out	0x3d, r28	; 61
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <ultraSonic_u16GetDistance>:



void ultraSonic_u16GetDistance(ultraSonic_t* ultraSonic_Instance){
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
    37ca:	6b 97       	sbiw	r28, 0x1b	; 27
    37cc:	0f b6       	in	r0, 0x3f	; 63
    37ce:	f8 94       	cli
    37d0:	de bf       	out	0x3e, r29	; 62
    37d2:	0f be       	out	0x3f, r0	; 63
    37d4:	cd bf       	out	0x3d, r28	; 61
    37d6:	9b 8f       	std	Y+27, r25	; 0x1b
    37d8:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8_t Local_u8EchoPinStatus = 0;
    37da:	19 8e       	std	Y+25, r1	; 0x19

	// Send a 10µs pulse to the trigger pin
	DIO_enuSetPinValue(ultraSonic_Instance->TRIG_PORT, ultraSonic_Instance->TRIG_PIN, DIO_u8HIGH);
    37dc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    37de:	fb 8d       	ldd	r31, Y+27	; 0x1b
    37e0:	82 81       	ldd	r24, Z+2	; 0x02
    37e2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    37e4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    37e6:	93 81       	ldd	r25, Z+3	; 0x03
    37e8:	69 2f       	mov	r22, r25
    37ea:	41 e0       	ldi	r20, 0x01	; 1
    37ec:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	a0 e2       	ldi	r26, 0x20	; 32
    37f6:	b1 e4       	ldi	r27, 0x41	; 65
    37f8:	8d 8b       	std	Y+21, r24	; 0x15
    37fa:	9e 8b       	std	Y+22, r25	; 0x16
    37fc:	af 8b       	std	Y+23, r26	; 0x17
    37fe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3800:	6d 89       	ldd	r22, Y+21	; 0x15
    3802:	7e 89       	ldd	r23, Y+22	; 0x16
    3804:	8f 89       	ldd	r24, Y+23	; 0x17
    3806:	98 8d       	ldd	r25, Y+24	; 0x18
    3808:	2b ea       	ldi	r18, 0xAB	; 171
    380a:	3a ea       	ldi	r19, 0xAA	; 170
    380c:	4a ea       	ldi	r20, 0xAA	; 170
    380e:	50 e4       	ldi	r21, 0x40	; 64
    3810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	89 8b       	std	Y+17, r24	; 0x11
    381a:	9a 8b       	std	Y+18, r25	; 0x12
    381c:	ab 8b       	std	Y+19, r26	; 0x13
    381e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3820:	69 89       	ldd	r22, Y+17	; 0x11
    3822:	7a 89       	ldd	r23, Y+18	; 0x12
    3824:	8b 89       	ldd	r24, Y+19	; 0x13
    3826:	9c 89       	ldd	r25, Y+20	; 0x14
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	40 e8       	ldi	r20, 0x80	; 128
    382e:	5f e3       	ldi	r21, 0x3F	; 63
    3830:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3834:	88 23       	and	r24, r24
    3836:	1c f4       	brge	.+6      	; 0x383e <ultraSonic_u16GetDistance+0x7c>
		__ticks = 1;
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	88 8b       	std	Y+16, r24	; 0x10
    383c:	91 c0       	rjmp	.+290    	; 0x3960 <ultraSonic_u16GetDistance+0x19e>
	else if (__tmp > 255)
    383e:	69 89       	ldd	r22, Y+17	; 0x11
    3840:	7a 89       	ldd	r23, Y+18	; 0x12
    3842:	8b 89       	ldd	r24, Y+19	; 0x13
    3844:	9c 89       	ldd	r25, Y+20	; 0x14
    3846:	20 e0       	ldi	r18, 0x00	; 0
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	4f e7       	ldi	r20, 0x7F	; 127
    384c:	53 e4       	ldi	r21, 0x43	; 67
    384e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3852:	18 16       	cp	r1, r24
    3854:	0c f0       	brlt	.+2      	; 0x3858 <ultraSonic_u16GetDistance+0x96>
    3856:	7b c0       	rjmp	.+246    	; 0x394e <ultraSonic_u16GetDistance+0x18c>
	{
		_delay_ms(__us / 1000.0);
    3858:	6d 89       	ldd	r22, Y+21	; 0x15
    385a:	7e 89       	ldd	r23, Y+22	; 0x16
    385c:	8f 89       	ldd	r24, Y+23	; 0x17
    385e:	98 8d       	ldd	r25, Y+24	; 0x18
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	4a e7       	ldi	r20, 0x7A	; 122
    3866:	54 e4       	ldi	r21, 0x44	; 68
    3868:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    386c:	dc 01       	movw	r26, r24
    386e:	cb 01       	movw	r24, r22
    3870:	8c 87       	std	Y+12, r24	; 0x0c
    3872:	9d 87       	std	Y+13, r25	; 0x0d
    3874:	ae 87       	std	Y+14, r26	; 0x0e
    3876:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3878:	6c 85       	ldd	r22, Y+12	; 0x0c
    387a:	7d 85       	ldd	r23, Y+13	; 0x0d
    387c:	8e 85       	ldd	r24, Y+14	; 0x0e
    387e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	4a e7       	ldi	r20, 0x7A	; 122
    3886:	55 e4       	ldi	r21, 0x45	; 69
    3888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	88 87       	std	Y+8, r24	; 0x08
    3892:	99 87       	std	Y+9, r25	; 0x09
    3894:	aa 87       	std	Y+10, r26	; 0x0a
    3896:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3898:	68 85       	ldd	r22, Y+8	; 0x08
    389a:	79 85       	ldd	r23, Y+9	; 0x09
    389c:	8a 85       	ldd	r24, Y+10	; 0x0a
    389e:	9b 85       	ldd	r25, Y+11	; 0x0b
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	40 e8       	ldi	r20, 0x80	; 128
    38a6:	5f e3       	ldi	r21, 0x3F	; 63
    38a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ac:	88 23       	and	r24, r24
    38ae:	2c f4       	brge	.+10     	; 0x38ba <ultraSonic_u16GetDistance+0xf8>
		__ticks = 1;
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	9f 83       	std	Y+7, r25	; 0x07
    38b6:	8e 83       	std	Y+6, r24	; 0x06
    38b8:	3f c0       	rjmp	.+126    	; 0x3938 <ultraSonic_u16GetDistance+0x176>
	else if (__tmp > 65535)
    38ba:	68 85       	ldd	r22, Y+8	; 0x08
    38bc:	79 85       	ldd	r23, Y+9	; 0x09
    38be:	8a 85       	ldd	r24, Y+10	; 0x0a
    38c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	3f ef       	ldi	r19, 0xFF	; 255
    38c6:	4f e7       	ldi	r20, 0x7F	; 127
    38c8:	57 e4       	ldi	r21, 0x47	; 71
    38ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38ce:	18 16       	cp	r1, r24
    38d0:	4c f5       	brge	.+82     	; 0x3924 <ultraSonic_u16GetDistance+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38d2:	6c 85       	ldd	r22, Y+12	; 0x0c
    38d4:	7d 85       	ldd	r23, Y+13	; 0x0d
    38d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    38d8:	9f 85       	ldd	r25, Y+15	; 0x0f
    38da:	20 e0       	ldi	r18, 0x00	; 0
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	40 e2       	ldi	r20, 0x20	; 32
    38e0:	51 e4       	ldi	r21, 0x41	; 65
    38e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38e6:	dc 01       	movw	r26, r24
    38e8:	cb 01       	movw	r24, r22
    38ea:	bc 01       	movw	r22, r24
    38ec:	cd 01       	movw	r24, r26
    38ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	9f 83       	std	Y+7, r25	; 0x07
    38f8:	8e 83       	std	Y+6, r24	; 0x06
    38fa:	0f c0       	rjmp	.+30     	; 0x391a <ultraSonic_u16GetDistance+0x158>
    38fc:	80 e9       	ldi	r24, 0x90	; 144
    38fe:	91 e0       	ldi	r25, 0x01	; 1
    3900:	9d 83       	std	Y+5, r25	; 0x05
    3902:	8c 83       	std	Y+4, r24	; 0x04
    3904:	8c 81       	ldd	r24, Y+4	; 0x04
    3906:	9d 81       	ldd	r25, Y+5	; 0x05
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	f1 f7       	brne	.-4      	; 0x3908 <ultraSonic_u16GetDistance+0x146>
    390c:	9d 83       	std	Y+5, r25	; 0x05
    390e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3910:	8e 81       	ldd	r24, Y+6	; 0x06
    3912:	9f 81       	ldd	r25, Y+7	; 0x07
    3914:	01 97       	sbiw	r24, 0x01	; 1
    3916:	9f 83       	std	Y+7, r25	; 0x07
    3918:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    391a:	8e 81       	ldd	r24, Y+6	; 0x06
    391c:	9f 81       	ldd	r25, Y+7	; 0x07
    391e:	00 97       	sbiw	r24, 0x00	; 0
    3920:	69 f7       	brne	.-38     	; 0x38fc <ultraSonic_u16GetDistance+0x13a>
    3922:	24 c0       	rjmp	.+72     	; 0x396c <ultraSonic_u16GetDistance+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3924:	68 85       	ldd	r22, Y+8	; 0x08
    3926:	79 85       	ldd	r23, Y+9	; 0x09
    3928:	8a 85       	ldd	r24, Y+10	; 0x0a
    392a:	9b 85       	ldd	r25, Y+11	; 0x0b
    392c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3930:	dc 01       	movw	r26, r24
    3932:	cb 01       	movw	r24, r22
    3934:	9f 83       	std	Y+7, r25	; 0x07
    3936:	8e 83       	std	Y+6, r24	; 0x06
    3938:	8e 81       	ldd	r24, Y+6	; 0x06
    393a:	9f 81       	ldd	r25, Y+7	; 0x07
    393c:	9b 83       	std	Y+3, r25	; 0x03
    393e:	8a 83       	std	Y+2, r24	; 0x02
    3940:	8a 81       	ldd	r24, Y+2	; 0x02
    3942:	9b 81       	ldd	r25, Y+3	; 0x03
    3944:	01 97       	sbiw	r24, 0x01	; 1
    3946:	f1 f7       	brne	.-4      	; 0x3944 <ultraSonic_u16GetDistance+0x182>
    3948:	9b 83       	std	Y+3, r25	; 0x03
    394a:	8a 83       	std	Y+2, r24	; 0x02
    394c:	0f c0       	rjmp	.+30     	; 0x396c <ultraSonic_u16GetDistance+0x1aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    394e:	69 89       	ldd	r22, Y+17	; 0x11
    3950:	7a 89       	ldd	r23, Y+18	; 0x12
    3952:	8b 89       	ldd	r24, Y+19	; 0x13
    3954:	9c 89       	ldd	r25, Y+20	; 0x14
    3956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395a:	dc 01       	movw	r26, r24
    395c:	cb 01       	movw	r24, r22
    395e:	88 8b       	std	Y+16, r24	; 0x10
    3960:	88 89       	ldd	r24, Y+16	; 0x10
    3962:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	8a 95       	dec	r24
    3968:	f1 f7       	brne	.-4      	; 0x3966 <ultraSonic_u16GetDistance+0x1a4>
    396a:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(10);

	DIO_enuSetPinValue(ultraSonic_Instance->TRIG_PORT, ultraSonic_Instance->TRIG_PIN, DIO_u8LOW);
    396c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    396e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3970:	82 81       	ldd	r24, Z+2	; 0x02
    3972:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3974:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3976:	93 81       	ldd	r25, Z+3	; 0x03
    3978:	69 2f       	mov	r22, r25
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>


	// Wait for echo pin to go high, indicating the start of distance measurement

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    3980:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3982:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3984:	80 81       	ld	r24, Z
    3986:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3988:	fb 8d       	ldd	r31, Y+27	; 0x1b
    398a:	91 81       	ldd	r25, Z+1	; 0x01
    398c:	9e 01       	movw	r18, r28
    398e:	27 5e       	subi	r18, 0xE7	; 231
    3990:	3f 4f       	sbci	r19, 0xFF	; 255
    3992:	69 2f       	mov	r22, r25
    3994:	a9 01       	movw	r20, r18
    3996:	0e 94 56 18 	call	0x30ac	; 0x30ac <DIO_enuGetPinValue>
    399a:	0d c0       	rjmp	.+26     	; 0x39b6 <ultraSonic_u16GetDistance+0x1f4>
	while(!Local_u8EchoPinStatus){
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    399c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    399e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    39a0:	80 81       	ld	r24, Z
    39a2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    39a4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    39a6:	91 81       	ldd	r25, Z+1	; 0x01
    39a8:	9e 01       	movw	r18, r28
    39aa:	27 5e       	subi	r18, 0xE7	; 231
    39ac:	3f 4f       	sbci	r19, 0xFF	; 255
    39ae:	69 2f       	mov	r22, r25
    39b0:	a9 01       	movw	r20, r18
    39b2:	0e 94 56 18 	call	0x30ac	; 0x30ac <DIO_enuGetPinValue>


	// Wait for echo pin to go high, indicating the start of distance measurement

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	while(!Local_u8EchoPinStatus){
    39b6:	89 8d       	ldd	r24, Y+25	; 0x19
    39b8:	88 23       	and	r24, r24
    39ba:	81 f3       	breq	.-32     	; 0x399c <ultraSonic_u16GetDistance+0x1da>
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	}

	RESET_TIMER1();
    39bc:	ec e4       	ldi	r30, 0x4C	; 76
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	11 82       	std	Z+1, r1	; 0x01
    39c2:	10 82       	st	Z, r1

	// Wait for echo pin to go low (reflected pulse received)

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    39c4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    39c6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    39c8:	80 81       	ld	r24, Z
    39ca:	ea 8d       	ldd	r30, Y+26	; 0x1a
    39cc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    39ce:	91 81       	ldd	r25, Z+1	; 0x01
    39d0:	9e 01       	movw	r18, r28
    39d2:	27 5e       	subi	r18, 0xE7	; 231
    39d4:	3f 4f       	sbci	r19, 0xFF	; 255
    39d6:	69 2f       	mov	r22, r25
    39d8:	a9 01       	movw	r20, r18
    39da:	0e 94 56 18 	call	0x30ac	; 0x30ac <DIO_enuGetPinValue>
    39de:	0d c0       	rjmp	.+26     	; 0x39fa <ultraSonic_u16GetDistance+0x238>
	while(Local_u8EchoPinStatus){
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    39e0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    39e2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    39e4:	80 81       	ld	r24, Z
    39e6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    39e8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    39ea:	91 81       	ldd	r25, Z+1	; 0x01
    39ec:	9e 01       	movw	r18, r28
    39ee:	27 5e       	subi	r18, 0xE7	; 231
    39f0:	3f 4f       	sbci	r19, 0xFF	; 255
    39f2:	69 2f       	mov	r22, r25
    39f4:	a9 01       	movw	r20, r18
    39f6:	0e 94 56 18 	call	0x30ac	; 0x30ac <DIO_enuGetPinValue>
	RESET_TIMER1();

	// Wait for echo pin to go low (reflected pulse received)

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	while(Local_u8EchoPinStatus){
    39fa:	89 8d       	ldd	r24, Y+25	; 0x19
    39fc:	88 23       	and	r24, r24
    39fe:	81 f7       	brne	.-32     	; 0x39e0 <ultraSonic_u16GetDistance+0x21e>
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	}

	ultraSonic_Instance->measuredDistance_InCm = TIMER1_u16ReadCount() / 58;
    3a00:	0e 94 ae 0b 	call	0x175c	; 0x175c <TIMER1_u16ReadCount>
    3a04:	2a e3       	ldi	r18, 0x3A	; 58
    3a06:	30 e0       	ldi	r19, 0x00	; 0
    3a08:	b9 01       	movw	r22, r18
    3a0a:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <__udivmodhi4>
    3a0e:	cb 01       	movw	r24, r22
    3a10:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3a12:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3a14:	95 83       	std	Z+5, r25	; 0x05
    3a16:	84 83       	std	Z+4, r24	; 0x04
}
    3a18:	6b 96       	adiw	r28, 0x1b	; 27
    3a1a:	0f b6       	in	r0, 0x3f	; 63
    3a1c:	f8 94       	cli
    3a1e:	de bf       	out	0x3e, r29	; 62
    3a20:	0f be       	out	0x3f, r0	; 63
    3a22:	cd bf       	out	0x3d, r28	; 61
    3a24:	cf 91       	pop	r28
    3a26:	df 91       	pop	r29
    3a28:	08 95       	ret

00003a2a <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    3a2a:	df 93       	push	r29
    3a2c:	cf 93       	push	r28
    3a2e:	0f 92       	push	r0
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3a34:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	64 e0       	ldi	r22, 0x04	; 4
    3a3a:	41 e0       	ldi	r20, 0x01	; 1
    3a3c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	65 e0       	ldi	r22, 0x05	; 5
    3a44:	41 e0       	ldi	r20, 0x01	; 1
    3a46:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	66 e0       	ldi	r22, 0x06	; 6
    3a4e:	41 e0       	ldi	r20, 0x01	; 1
    3a50:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	67 e0       	ldi	r22, 0x07	; 7
    3a58:	41 e0       	ldi	r20, 0x01	; 1
    3a5a:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	64 e0       	ldi	r22, 0x04	; 4
    3a62:	41 e0       	ldi	r20, 0x01	; 1
    3a64:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	65 e0       	ldi	r22, 0x05	; 5
    3a6c:	41 e0       	ldi	r20, 0x01	; 1
    3a6e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	66 e0       	ldi	r22, 0x06	; 6
    3a76:	41 e0       	ldi	r20, 0x01	; 1
    3a78:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	67 e0       	ldi	r22, 0x07	; 7
    3a80:	41 e0       	ldi	r20, 0x01	; 1
    3a82:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    3a86:	83 e0       	ldi	r24, 0x03	; 3
    3a88:	60 e0       	ldi	r22, 0x00	; 0
    3a8a:	40 e0       	ldi	r20, 0x00	; 0
    3a8c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    3a90:	83 e0       	ldi	r24, 0x03	; 3
    3a92:	61 e0       	ldi	r22, 0x01	; 1
    3a94:	40 e0       	ldi	r20, 0x00	; 0
    3a96:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    3a9a:	83 e0       	ldi	r24, 0x03	; 3
    3a9c:	64 e0       	ldi	r22, 0x04	; 4
    3a9e:	40 e0       	ldi	r20, 0x00	; 0
    3aa0:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    3aa4:	83 e0       	ldi	r24, 0x03	; 3
    3aa6:	65 e0       	ldi	r22, 0x05	; 5
    3aa8:	40 e0       	ldi	r20, 0x00	; 0
    3aaa:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    3aae:	83 e0       	ldi	r24, 0x03	; 3
    3ab0:	60 e0       	ldi	r22, 0x00	; 0
    3ab2:	41 e0       	ldi	r20, 0x01	; 1
    3ab4:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    3ab8:	83 e0       	ldi	r24, 0x03	; 3
    3aba:	61 e0       	ldi	r22, 0x01	; 1
    3abc:	41 e0       	ldi	r20, 0x01	; 1
    3abe:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    3ac2:	83 e0       	ldi	r24, 0x03	; 3
    3ac4:	64 e0       	ldi	r22, 0x04	; 4
    3ac6:	41 e0       	ldi	r20, 0x01	; 1
    3ac8:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    3acc:	83 e0       	ldi	r24, 0x03	; 3
    3ace:	65 e0       	ldi	r22, 0x05	; 5
    3ad0:	41 e0       	ldi	r20, 0x01	; 1
    3ad2:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    3ada:	89 81       	ldd	r24, Y+1	; 0x01
}
    3adc:	0f 90       	pop	r0
    3ade:	cf 91       	pop	r28
    3ae0:	df 91       	pop	r29
    3ae2:	08 95       	ret

00003ae4 <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    3ae4:	df 93       	push	r29
    3ae6:	cf 93       	push	r28
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	2a 97       	sbiw	r28, 0x0a	; 10
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
    3af8:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    3afa:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	8a 83       	std	Y+2, r24	; 0x02
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	8b 83       	std	Y+3, r24	; 0x03
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	8c 83       	std	Y+4, r24	; 0x04
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    3b0c:	84 e0       	ldi	r24, 0x04	; 4
    3b0e:	8e 83       	std	Y+6, r24	; 0x06
    3b10:	85 e0       	ldi	r24, 0x05	; 5
    3b12:	8f 83       	std	Y+7, r24	; 0x07
    3b14:	86 e0       	ldi	r24, 0x06	; 6
    3b16:	88 87       	std	Y+8, r24	; 0x08
    3b18:	87 e0       	ldi	r24, 0x07	; 7
    3b1a:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3b1c:	19 82       	std	Y+1, r1	; 0x01
    3b1e:	36 c0       	rjmp	.+108    	; 0x3b8c <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    3b20:	99 81       	ldd	r25, Y+1	; 0x01
    3b22:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b24:	98 17       	cp	r25, r24
    3b26:	c1 f4       	brne	.+48     	; 0x3b58 <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
    3b2a:	28 2f       	mov	r18, r24
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	ce 01       	movw	r24, r28
    3b30:	02 96       	adiw	r24, 0x02	; 2
    3b32:	fc 01       	movw	r30, r24
    3b34:	e2 0f       	add	r30, r18
    3b36:	f3 1f       	adc	r31, r19
    3b38:	40 81       	ld	r20, Z
    3b3a:	89 81       	ldd	r24, Y+1	; 0x01
    3b3c:	28 2f       	mov	r18, r24
    3b3e:	30 e0       	ldi	r19, 0x00	; 0
    3b40:	ce 01       	movw	r24, r28
    3b42:	06 96       	adiw	r24, 0x06	; 6
    3b44:	fc 01       	movw	r30, r24
    3b46:	e2 0f       	add	r30, r18
    3b48:	f3 1f       	adc	r31, r19
    3b4a:	90 81       	ld	r25, Z
    3b4c:	84 2f       	mov	r24, r20
    3b4e:	69 2f       	mov	r22, r25
    3b50:	40 e0       	ldi	r20, 0x00	; 0
    3b52:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
    3b56:	17 c0       	rjmp	.+46     	; 0x3b86 <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    3b58:	89 81       	ldd	r24, Y+1	; 0x01
    3b5a:	28 2f       	mov	r18, r24
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	ce 01       	movw	r24, r28
    3b60:	02 96       	adiw	r24, 0x02	; 2
    3b62:	fc 01       	movw	r30, r24
    3b64:	e2 0f       	add	r30, r18
    3b66:	f3 1f       	adc	r31, r19
    3b68:	40 81       	ld	r20, Z
    3b6a:	89 81       	ldd	r24, Y+1	; 0x01
    3b6c:	28 2f       	mov	r18, r24
    3b6e:	30 e0       	ldi	r19, 0x00	; 0
    3b70:	ce 01       	movw	r24, r28
    3b72:	06 96       	adiw	r24, 0x06	; 6
    3b74:	fc 01       	movw	r30, r24
    3b76:	e2 0f       	add	r30, r18
    3b78:	f3 1f       	adc	r31, r19
    3b7a:	90 81       	ld	r25, Z
    3b7c:	84 2f       	mov	r24, r20
    3b7e:	69 2f       	mov	r22, r25
    3b80:	41 e0       	ldi	r20, 0x01	; 1
    3b82:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	8f 5f       	subi	r24, 0xFF	; 255
    3b8a:	89 83       	std	Y+1, r24	; 0x01
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	84 30       	cpi	r24, 0x04	; 4
    3b90:	38 f2       	brcs	.-114    	; 0x3b20 <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    3b92:	2a 96       	adiw	r28, 0x0a	; 10
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	08 95       	ret

00003ba4 <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	2f 97       	sbiw	r28, 0x0f	; 15
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	de bf       	out	0x3e, r29	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	9e 87       	std	Y+14, r25	; 0x0e
    3bba:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3bbc:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    3bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc2:	00 97       	sbiw	r24, 0x00	; 0
    3bc4:	19 f4       	brne	.+6      	; 0x3bcc <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    3bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc8:	8f 87       	std	Y+15, r24	; 0x0f
    3bca:	7e c0       	rjmp	.+252    	; 0x3cc8 <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    3bd0:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    3bd2:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    3bd4:	83 e0       	ldi	r24, 0x03	; 3
    3bd6:	8d 83       	std	Y+5, r24	; 0x05
    3bd8:	83 e0       	ldi	r24, 0x03	; 3
    3bda:	8e 83       	std	Y+6, r24	; 0x06
    3bdc:	83 e0       	ldi	r24, 0x03	; 3
    3bde:	8f 83       	std	Y+7, r24	; 0x07
    3be0:	83 e0       	ldi	r24, 0x03	; 3
    3be2:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    3be4:	19 86       	std	Y+9, r1	; 0x09
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	8a 87       	std	Y+10, r24	; 0x0a
    3bea:	84 e0       	ldi	r24, 0x04	; 4
    3bec:	8b 87       	std	Y+11, r24	; 0x0b
    3bee:	85 e0       	ldi	r24, 0x05	; 5
    3bf0:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3bf2:	1a 82       	std	Y+2, r1	; 0x02
    3bf4:	63 c0       	rjmp	.+198    	; 0x3cbc <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    3bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf8:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    3bfc:	19 82       	std	Y+1, r1	; 0x01
    3bfe:	57 c0       	rjmp	.+174    	; 0x3cae <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	28 2f       	mov	r18, r24
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	ce 01       	movw	r24, r28
    3c08:	05 96       	adiw	r24, 0x05	; 5
    3c0a:	fc 01       	movw	r30, r24
    3c0c:	e2 0f       	add	r30, r18
    3c0e:	f3 1f       	adc	r31, r19
    3c10:	40 81       	ld	r20, Z
    3c12:	89 81       	ldd	r24, Y+1	; 0x01
    3c14:	28 2f       	mov	r18, r24
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	ce 01       	movw	r24, r28
    3c1a:	09 96       	adiw	r24, 0x09	; 9
    3c1c:	fc 01       	movw	r30, r24
    3c1e:	e2 0f       	add	r30, r18
    3c20:	f3 1f       	adc	r31, r19
    3c22:	90 81       	ld	r25, Z
    3c24:	9e 01       	movw	r18, r28
    3c26:	2c 5f       	subi	r18, 0xFC	; 252
    3c28:	3f 4f       	sbci	r19, 0xFF	; 255
    3c2a:	84 2f       	mov	r24, r20
    3c2c:	69 2f       	mov	r22, r25
    3c2e:	a9 01       	movw	r20, r18
    3c30:	0e 94 56 18 	call	0x30ac	; 0x30ac <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    3c34:	8c 81       	ldd	r24, Y+4	; 0x04
    3c36:	88 23       	and	r24, r24
    3c38:	b9 f5       	brne	.+110    	; 0x3ca8 <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    3c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3c:	88 2f       	mov	r24, r24
    3c3e:	90 e0       	ldi	r25, 0x00	; 0
    3c40:	9c 01       	movw	r18, r24
    3c42:	22 0f       	add	r18, r18
    3c44:	33 1f       	adc	r19, r19
    3c46:	22 0f       	add	r18, r18
    3c48:	33 1f       	adc	r19, r19
    3c4a:	89 81       	ldd	r24, Y+1	; 0x01
    3c4c:	88 2f       	mov	r24, r24
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	82 0f       	add	r24, r18
    3c52:	93 1f       	adc	r25, r19
    3c54:	fc 01       	movw	r30, r24
    3c56:	e2 59       	subi	r30, 0x92	; 146
    3c58:	fe 4f       	sbci	r31, 0xFE	; 254
    3c5a:	80 81       	ld	r24, Z
    3c5c:	ed 85       	ldd	r30, Y+13	; 0x0d
    3c5e:	fe 85       	ldd	r31, Y+14	; 0x0e
    3c60:	80 83       	st	Z, r24
    3c62:	1a c0       	rjmp	.+52     	; 0x3c98 <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	28 2f       	mov	r18, r24
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	ce 01       	movw	r24, r28
    3c6c:	05 96       	adiw	r24, 0x05	; 5
    3c6e:	fc 01       	movw	r30, r24
    3c70:	e2 0f       	add	r30, r18
    3c72:	f3 1f       	adc	r31, r19
    3c74:	40 81       	ld	r20, Z
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	28 2f       	mov	r18, r24
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	ce 01       	movw	r24, r28
    3c7e:	09 96       	adiw	r24, 0x09	; 9
    3c80:	fc 01       	movw	r30, r24
    3c82:	e2 0f       	add	r30, r18
    3c84:	f3 1f       	adc	r31, r19
    3c86:	90 81       	ld	r25, Z
    3c88:	9e 01       	movw	r18, r28
    3c8a:	2c 5f       	subi	r18, 0xFC	; 252
    3c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8e:	84 2f       	mov	r24, r20
    3c90:	69 2f       	mov	r22, r25
    3c92:	a9 01       	movw	r20, r18
    3c94:	0e 94 56 18 	call	0x30ac	; 0x30ac <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    3c98:	8c 81       	ldd	r24, Y+4	; 0x04
    3c9a:	88 23       	and	r24, r24
    3c9c:	19 f3       	breq	.-58     	; 0x3c64 <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    3c9e:	81 e0       	ldi	r24, 0x01	; 1
    3ca0:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    3ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    3ca4:	8f 87       	std	Y+15, r24	; 0x0f
    3ca6:	10 c0       	rjmp	.+32     	; 0x3cc8 <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    3ca8:	89 81       	ldd	r24, Y+1	; 0x01
    3caa:	8f 5f       	subi	r24, 0xFF	; 255
    3cac:	89 83       	std	Y+1, r24	; 0x01
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	84 30       	cpi	r24, 0x04	; 4
    3cb2:	08 f4       	brcc	.+2      	; 0x3cb6 <keypad_enuGetPressedKey+0x112>
    3cb4:	a5 cf       	rjmp	.-182    	; 0x3c00 <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	8f 5f       	subi	r24, 0xFF	; 255
    3cba:	8a 83       	std	Y+2, r24	; 0x02
    3cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbe:	84 30       	cpi	r24, 0x04	; 4
    3cc0:	08 f4       	brcc	.+2      	; 0x3cc4 <keypad_enuGetPressedKey+0x120>
    3cc2:	99 cf       	rjmp	.-206    	; 0x3bf6 <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    3cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc6:	8f 87       	std	Y+15, r24	; 0x0f
    3cc8:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3cca:	2f 96       	adiw	r28, 0x0f	; 15
    3ccc:	0f b6       	in	r0, 0x3f	; 63
    3cce:	f8 94       	cli
    3cd0:	de bf       	out	0x3e, r29	; 62
    3cd2:	0f be       	out	0x3f, r0	; 63
    3cd4:	cd bf       	out	0x3d, r28	; 61
    3cd6:	cf 91       	pop	r28
    3cd8:	df 91       	pop	r29
    3cda:	08 95       	ret

00003cdc <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    3cdc:	df 93       	push	r29
    3cde:	cf 93       	push	r28
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62
    3ce4:	e9 97       	sbiw	r28, 0x39	; 57
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3cf0:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    3cf2:	81 e0       	ldi	r24, 0x01	; 1
    3cf4:	62 e0       	ldi	r22, 0x02	; 2
    3cf6:	41 e0       	ldi	r20, 0x01	; 1
    3cf8:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	61 e0       	ldi	r22, 0x01	; 1
    3d00:	41 e0       	ldi	r20, 0x01	; 1
    3d02:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	41 e0       	ldi	r20, 0x01	; 1
    3d0c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	60 e0       	ldi	r22, 0x00	; 0
    3d14:	41 e0       	ldi	r20, 0x01	; 1
    3d16:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	61 e0       	ldi	r22, 0x01	; 1
    3d1e:	41 e0       	ldi	r20, 0x01	; 1
    3d20:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	62 e0       	ldi	r22, 0x02	; 2
    3d28:	41 e0       	ldi	r20, 0x01	; 1
    3d2a:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	63 e0       	ldi	r22, 0x03	; 3
    3d32:	41 e0       	ldi	r20, 0x01	; 1
    3d34:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	ac e0       	ldi	r26, 0x0C	; 12
    3d3e:	b2 e4       	ldi	r27, 0x42	; 66
    3d40:	8d ab       	std	Y+53, r24	; 0x35
    3d42:	9e ab       	std	Y+54, r25	; 0x36
    3d44:	af ab       	std	Y+55, r26	; 0x37
    3d46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d48:	6d a9       	ldd	r22, Y+53	; 0x35
    3d4a:	7e a9       	ldd	r23, Y+54	; 0x36
    3d4c:	8f a9       	ldd	r24, Y+55	; 0x37
    3d4e:	98 ad       	ldd	r25, Y+56	; 0x38
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	4a e7       	ldi	r20, 0x7A	; 122
    3d56:	55 e4       	ldi	r21, 0x45	; 69
    3d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	89 ab       	std	Y+49, r24	; 0x31
    3d62:	9a ab       	std	Y+50, r25	; 0x32
    3d64:	ab ab       	std	Y+51, r26	; 0x33
    3d66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d68:	69 a9       	ldd	r22, Y+49	; 0x31
    3d6a:	7a a9       	ldd	r23, Y+50	; 0x32
    3d6c:	8b a9       	ldd	r24, Y+51	; 0x33
    3d6e:	9c a9       	ldd	r25, Y+52	; 0x34
    3d70:	20 e0       	ldi	r18, 0x00	; 0
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	40 e8       	ldi	r20, 0x80	; 128
    3d76:	5f e3       	ldi	r21, 0x3F	; 63
    3d78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d7c:	88 23       	and	r24, r24
    3d7e:	2c f4       	brge	.+10     	; 0x3d8a <LCD_enuInit+0xae>
		__ticks = 1;
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	98 ab       	std	Y+48, r25	; 0x30
    3d86:	8f a7       	std	Y+47, r24	; 0x2f
    3d88:	3f c0       	rjmp	.+126    	; 0x3e08 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    3d8a:	69 a9       	ldd	r22, Y+49	; 0x31
    3d8c:	7a a9       	ldd	r23, Y+50	; 0x32
    3d8e:	8b a9       	ldd	r24, Y+51	; 0x33
    3d90:	9c a9       	ldd	r25, Y+52	; 0x34
    3d92:	20 e0       	ldi	r18, 0x00	; 0
    3d94:	3f ef       	ldi	r19, 0xFF	; 255
    3d96:	4f e7       	ldi	r20, 0x7F	; 127
    3d98:	57 e4       	ldi	r21, 0x47	; 71
    3d9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d9e:	18 16       	cp	r1, r24
    3da0:	4c f5       	brge	.+82     	; 0x3df4 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3da2:	6d a9       	ldd	r22, Y+53	; 0x35
    3da4:	7e a9       	ldd	r23, Y+54	; 0x36
    3da6:	8f a9       	ldd	r24, Y+55	; 0x37
    3da8:	98 ad       	ldd	r25, Y+56	; 0x38
    3daa:	20 e0       	ldi	r18, 0x00	; 0
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	40 e2       	ldi	r20, 0x20	; 32
    3db0:	51 e4       	ldi	r21, 0x41	; 65
    3db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db6:	dc 01       	movw	r26, r24
    3db8:	cb 01       	movw	r24, r22
    3dba:	bc 01       	movw	r22, r24
    3dbc:	cd 01       	movw	r24, r26
    3dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	98 ab       	std	Y+48, r25	; 0x30
    3dc8:	8f a7       	std	Y+47, r24	; 0x2f
    3dca:	0f c0       	rjmp	.+30     	; 0x3dea <LCD_enuInit+0x10e>
    3dcc:	80 e9       	ldi	r24, 0x90	; 144
    3dce:	91 e0       	ldi	r25, 0x01	; 1
    3dd0:	9e a7       	std	Y+46, r25	; 0x2e
    3dd2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3dd4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3dd6:	9e a5       	ldd	r25, Y+46	; 0x2e
    3dd8:	01 97       	sbiw	r24, 0x01	; 1
    3dda:	f1 f7       	brne	.-4      	; 0x3dd8 <LCD_enuInit+0xfc>
    3ddc:	9e a7       	std	Y+46, r25	; 0x2e
    3dde:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3de0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3de2:	98 a9       	ldd	r25, Y+48	; 0x30
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	98 ab       	std	Y+48, r25	; 0x30
    3de8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dea:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dec:	98 a9       	ldd	r25, Y+48	; 0x30
    3dee:	00 97       	sbiw	r24, 0x00	; 0
    3df0:	69 f7       	brne	.-38     	; 0x3dcc <LCD_enuInit+0xf0>
    3df2:	14 c0       	rjmp	.+40     	; 0x3e1c <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3df4:	69 a9       	ldd	r22, Y+49	; 0x31
    3df6:	7a a9       	ldd	r23, Y+50	; 0x32
    3df8:	8b a9       	ldd	r24, Y+51	; 0x33
    3dfa:	9c a9       	ldd	r25, Y+52	; 0x34
    3dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e00:	dc 01       	movw	r26, r24
    3e02:	cb 01       	movw	r24, r22
    3e04:	98 ab       	std	Y+48, r25	; 0x30
    3e06:	8f a7       	std	Y+47, r24	; 0x2f
    3e08:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e0a:	98 a9       	ldd	r25, Y+48	; 0x30
    3e0c:	9c a7       	std	Y+44, r25	; 0x2c
    3e0e:	8b a7       	std	Y+43, r24	; 0x2b
    3e10:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e12:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e14:	01 97       	sbiw	r24, 0x01	; 1
    3e16:	f1 f7       	brne	.-4      	; 0x3e14 <LCD_enuInit+0x138>
    3e18:	9c a7       	std	Y+44, r25	; 0x2c
    3e1a:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    3e1c:	80 e2       	ldi	r24, 0x20	; 32
    3e1e:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    3e22:	80 e2       	ldi	r24, 0x20	; 32
    3e24:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    3e28:	80 e8       	ldi	r24, 0x80	; 128
    3e2a:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	a0 e8       	ldi	r26, 0x80	; 128
    3e34:	bf e3       	ldi	r27, 0x3F	; 63
    3e36:	8f a3       	std	Y+39, r24	; 0x27
    3e38:	98 a7       	std	Y+40, r25	; 0x28
    3e3a:	a9 a7       	std	Y+41, r26	; 0x29
    3e3c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e3e:	6f a1       	ldd	r22, Y+39	; 0x27
    3e40:	78 a5       	ldd	r23, Y+40	; 0x28
    3e42:	89 a5       	ldd	r24, Y+41	; 0x29
    3e44:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	4a e7       	ldi	r20, 0x7A	; 122
    3e4c:	55 e4       	ldi	r21, 0x45	; 69
    3e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e52:	dc 01       	movw	r26, r24
    3e54:	cb 01       	movw	r24, r22
    3e56:	8b a3       	std	Y+35, r24	; 0x23
    3e58:	9c a3       	std	Y+36, r25	; 0x24
    3e5a:	ad a3       	std	Y+37, r26	; 0x25
    3e5c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e5e:	6b a1       	ldd	r22, Y+35	; 0x23
    3e60:	7c a1       	ldd	r23, Y+36	; 0x24
    3e62:	8d a1       	ldd	r24, Y+37	; 0x25
    3e64:	9e a1       	ldd	r25, Y+38	; 0x26
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	40 e8       	ldi	r20, 0x80	; 128
    3e6c:	5f e3       	ldi	r21, 0x3F	; 63
    3e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e72:	88 23       	and	r24, r24
    3e74:	2c f4       	brge	.+10     	; 0x3e80 <LCD_enuInit+0x1a4>
		__ticks = 1;
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	9a a3       	std	Y+34, r25	; 0x22
    3e7c:	89 a3       	std	Y+33, r24	; 0x21
    3e7e:	3f c0       	rjmp	.+126    	; 0x3efe <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    3e80:	6b a1       	ldd	r22, Y+35	; 0x23
    3e82:	7c a1       	ldd	r23, Y+36	; 0x24
    3e84:	8d a1       	ldd	r24, Y+37	; 0x25
    3e86:	9e a1       	ldd	r25, Y+38	; 0x26
    3e88:	20 e0       	ldi	r18, 0x00	; 0
    3e8a:	3f ef       	ldi	r19, 0xFF	; 255
    3e8c:	4f e7       	ldi	r20, 0x7F	; 127
    3e8e:	57 e4       	ldi	r21, 0x47	; 71
    3e90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e94:	18 16       	cp	r1, r24
    3e96:	4c f5       	brge	.+82     	; 0x3eea <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e98:	6f a1       	ldd	r22, Y+39	; 0x27
    3e9a:	78 a5       	ldd	r23, Y+40	; 0x28
    3e9c:	89 a5       	ldd	r24, Y+41	; 0x29
    3e9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	40 e2       	ldi	r20, 0x20	; 32
    3ea6:	51 e4       	ldi	r21, 0x41	; 65
    3ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eac:	dc 01       	movw	r26, r24
    3eae:	cb 01       	movw	r24, r22
    3eb0:	bc 01       	movw	r22, r24
    3eb2:	cd 01       	movw	r24, r26
    3eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	9a a3       	std	Y+34, r25	; 0x22
    3ebe:	89 a3       	std	Y+33, r24	; 0x21
    3ec0:	0f c0       	rjmp	.+30     	; 0x3ee0 <LCD_enuInit+0x204>
    3ec2:	80 e9       	ldi	r24, 0x90	; 144
    3ec4:	91 e0       	ldi	r25, 0x01	; 1
    3ec6:	98 a3       	std	Y+32, r25	; 0x20
    3ec8:	8f 8f       	std	Y+31, r24	; 0x1f
    3eca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ecc:	98 a1       	ldd	r25, Y+32	; 0x20
    3ece:	01 97       	sbiw	r24, 0x01	; 1
    3ed0:	f1 f7       	brne	.-4      	; 0x3ece <LCD_enuInit+0x1f2>
    3ed2:	98 a3       	std	Y+32, r25	; 0x20
    3ed4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ed6:	89 a1       	ldd	r24, Y+33	; 0x21
    3ed8:	9a a1       	ldd	r25, Y+34	; 0x22
    3eda:	01 97       	sbiw	r24, 0x01	; 1
    3edc:	9a a3       	std	Y+34, r25	; 0x22
    3ede:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ee0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ee2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ee4:	00 97       	sbiw	r24, 0x00	; 0
    3ee6:	69 f7       	brne	.-38     	; 0x3ec2 <LCD_enuInit+0x1e6>
    3ee8:	14 c0       	rjmp	.+40     	; 0x3f12 <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eea:	6b a1       	ldd	r22, Y+35	; 0x23
    3eec:	7c a1       	ldd	r23, Y+36	; 0x24
    3eee:	8d a1       	ldd	r24, Y+37	; 0x25
    3ef0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	9a a3       	std	Y+34, r25	; 0x22
    3efc:	89 a3       	std	Y+33, r24	; 0x21
    3efe:	89 a1       	ldd	r24, Y+33	; 0x21
    3f00:	9a a1       	ldd	r25, Y+34	; 0x22
    3f02:	9e 8f       	std	Y+30, r25	; 0x1e
    3f04:	8d 8f       	std	Y+29, r24	; 0x1d
    3f06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f0a:	01 97       	sbiw	r24, 0x01	; 1
    3f0c:	f1 f7       	brne	.-4      	; 0x3f0a <LCD_enuInit+0x22e>
    3f0e:	9e 8f       	std	Y+30, r25	; 0x1e
    3f10:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    3f18:	80 ef       	ldi	r24, 0xF0	; 240
    3f1a:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	90 e0       	ldi	r25, 0x00	; 0
    3f22:	a0 e8       	ldi	r26, 0x80	; 128
    3f24:	bf e3       	ldi	r27, 0x3F	; 63
    3f26:	89 8f       	std	Y+25, r24	; 0x19
    3f28:	9a 8f       	std	Y+26, r25	; 0x1a
    3f2a:	ab 8f       	std	Y+27, r26	; 0x1b
    3f2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f2e:	69 8d       	ldd	r22, Y+25	; 0x19
    3f30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f36:	20 e0       	ldi	r18, 0x00	; 0
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	4a e7       	ldi	r20, 0x7A	; 122
    3f3c:	55 e4       	ldi	r21, 0x45	; 69
    3f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f42:	dc 01       	movw	r26, r24
    3f44:	cb 01       	movw	r24, r22
    3f46:	8d 8b       	std	Y+21, r24	; 0x15
    3f48:	9e 8b       	std	Y+22, r25	; 0x16
    3f4a:	af 8b       	std	Y+23, r26	; 0x17
    3f4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    3f50:	7e 89       	ldd	r23, Y+22	; 0x16
    3f52:	8f 89       	ldd	r24, Y+23	; 0x17
    3f54:	98 8d       	ldd	r25, Y+24	; 0x18
    3f56:	20 e0       	ldi	r18, 0x00	; 0
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	40 e8       	ldi	r20, 0x80	; 128
    3f5c:	5f e3       	ldi	r21, 0x3F	; 63
    3f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f62:	88 23       	and	r24, r24
    3f64:	2c f4       	brge	.+10     	; 0x3f70 <LCD_enuInit+0x294>
		__ticks = 1;
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	9c 8b       	std	Y+20, r25	; 0x14
    3f6c:	8b 8b       	std	Y+19, r24	; 0x13
    3f6e:	3f c0       	rjmp	.+126    	; 0x3fee <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    3f70:	6d 89       	ldd	r22, Y+21	; 0x15
    3f72:	7e 89       	ldd	r23, Y+22	; 0x16
    3f74:	8f 89       	ldd	r24, Y+23	; 0x17
    3f76:	98 8d       	ldd	r25, Y+24	; 0x18
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	3f ef       	ldi	r19, 0xFF	; 255
    3f7c:	4f e7       	ldi	r20, 0x7F	; 127
    3f7e:	57 e4       	ldi	r21, 0x47	; 71
    3f80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f84:	18 16       	cp	r1, r24
    3f86:	4c f5       	brge	.+82     	; 0x3fda <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f88:	69 8d       	ldd	r22, Y+25	; 0x19
    3f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	40 e2       	ldi	r20, 0x20	; 32
    3f96:	51 e4       	ldi	r21, 0x41	; 65
    3f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	cb 01       	movw	r24, r22
    3fa0:	bc 01       	movw	r22, r24
    3fa2:	cd 01       	movw	r24, r26
    3fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa8:	dc 01       	movw	r26, r24
    3faa:	cb 01       	movw	r24, r22
    3fac:	9c 8b       	std	Y+20, r25	; 0x14
    3fae:	8b 8b       	std	Y+19, r24	; 0x13
    3fb0:	0f c0       	rjmp	.+30     	; 0x3fd0 <LCD_enuInit+0x2f4>
    3fb2:	80 e9       	ldi	r24, 0x90	; 144
    3fb4:	91 e0       	ldi	r25, 0x01	; 1
    3fb6:	9a 8b       	std	Y+18, r25	; 0x12
    3fb8:	89 8b       	std	Y+17, r24	; 0x11
    3fba:	89 89       	ldd	r24, Y+17	; 0x11
    3fbc:	9a 89       	ldd	r25, Y+18	; 0x12
    3fbe:	01 97       	sbiw	r24, 0x01	; 1
    3fc0:	f1 f7       	brne	.-4      	; 0x3fbe <LCD_enuInit+0x2e2>
    3fc2:	9a 8b       	std	Y+18, r25	; 0x12
    3fc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    3fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    3fca:	01 97       	sbiw	r24, 0x01	; 1
    3fcc:	9c 8b       	std	Y+20, r25	; 0x14
    3fce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3fd4:	00 97       	sbiw	r24, 0x00	; 0
    3fd6:	69 f7       	brne	.-38     	; 0x3fb2 <LCD_enuInit+0x2d6>
    3fd8:	14 c0       	rjmp	.+40     	; 0x4002 <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fda:	6d 89       	ldd	r22, Y+21	; 0x15
    3fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    3fde:	8f 89       	ldd	r24, Y+23	; 0x17
    3fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    3fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	9c 8b       	std	Y+20, r25	; 0x14
    3fec:	8b 8b       	std	Y+19, r24	; 0x13
    3fee:	8b 89       	ldd	r24, Y+19	; 0x13
    3ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ff2:	98 8b       	std	Y+16, r25	; 0x10
    3ff4:	8f 87       	std	Y+15, r24	; 0x0f
    3ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ff8:	98 89       	ldd	r25, Y+16	; 0x10
    3ffa:	01 97       	sbiw	r24, 0x01	; 1
    3ffc:	f1 f7       	brne	.-4      	; 0x3ffa <LCD_enuInit+0x31e>
    3ffe:	98 8b       	std	Y+16, r25	; 0x10
    4000:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
    400e:	80 e0       	ldi	r24, 0x00	; 0
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	a0 e0       	ldi	r26, 0x00	; 0
    4014:	b0 e4       	ldi	r27, 0x40	; 64
    4016:	8b 87       	std	Y+11, r24	; 0x0b
    4018:	9c 87       	std	Y+12, r25	; 0x0c
    401a:	ad 87       	std	Y+13, r26	; 0x0d
    401c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    401e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4020:	7c 85       	ldd	r23, Y+12	; 0x0c
    4022:	8d 85       	ldd	r24, Y+13	; 0x0d
    4024:	9e 85       	ldd	r25, Y+14	; 0x0e
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	4a e7       	ldi	r20, 0x7A	; 122
    402c:	55 e4       	ldi	r21, 0x45	; 69
    402e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4032:	dc 01       	movw	r26, r24
    4034:	cb 01       	movw	r24, r22
    4036:	8f 83       	std	Y+7, r24	; 0x07
    4038:	98 87       	std	Y+8, r25	; 0x08
    403a:	a9 87       	std	Y+9, r26	; 0x09
    403c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    403e:	6f 81       	ldd	r22, Y+7	; 0x07
    4040:	78 85       	ldd	r23, Y+8	; 0x08
    4042:	89 85       	ldd	r24, Y+9	; 0x09
    4044:	9a 85       	ldd	r25, Y+10	; 0x0a
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	30 e0       	ldi	r19, 0x00	; 0
    404a:	40 e8       	ldi	r20, 0x80	; 128
    404c:	5f e3       	ldi	r21, 0x3F	; 63
    404e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4052:	88 23       	and	r24, r24
    4054:	2c f4       	brge	.+10     	; 0x4060 <LCD_enuInit+0x384>
		__ticks = 1;
    4056:	81 e0       	ldi	r24, 0x01	; 1
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	9e 83       	std	Y+6, r25	; 0x06
    405c:	8d 83       	std	Y+5, r24	; 0x05
    405e:	3f c0       	rjmp	.+126    	; 0x40de <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    4060:	6f 81       	ldd	r22, Y+7	; 0x07
    4062:	78 85       	ldd	r23, Y+8	; 0x08
    4064:	89 85       	ldd	r24, Y+9	; 0x09
    4066:	9a 85       	ldd	r25, Y+10	; 0x0a
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	3f ef       	ldi	r19, 0xFF	; 255
    406c:	4f e7       	ldi	r20, 0x7F	; 127
    406e:	57 e4       	ldi	r21, 0x47	; 71
    4070:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4074:	18 16       	cp	r1, r24
    4076:	4c f5       	brge	.+82     	; 0x40ca <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4078:	6b 85       	ldd	r22, Y+11	; 0x0b
    407a:	7c 85       	ldd	r23, Y+12	; 0x0c
    407c:	8d 85       	ldd	r24, Y+13	; 0x0d
    407e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	40 e2       	ldi	r20, 0x20	; 32
    4086:	51 e4       	ldi	r21, 0x41	; 65
    4088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	bc 01       	movw	r22, r24
    4092:	cd 01       	movw	r24, r26
    4094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4098:	dc 01       	movw	r26, r24
    409a:	cb 01       	movw	r24, r22
    409c:	9e 83       	std	Y+6, r25	; 0x06
    409e:	8d 83       	std	Y+5, r24	; 0x05
    40a0:	0f c0       	rjmp	.+30     	; 0x40c0 <LCD_enuInit+0x3e4>
    40a2:	80 e9       	ldi	r24, 0x90	; 144
    40a4:	91 e0       	ldi	r25, 0x01	; 1
    40a6:	9c 83       	std	Y+4, r25	; 0x04
    40a8:	8b 83       	std	Y+3, r24	; 0x03
    40aa:	8b 81       	ldd	r24, Y+3	; 0x03
    40ac:	9c 81       	ldd	r25, Y+4	; 0x04
    40ae:	01 97       	sbiw	r24, 0x01	; 1
    40b0:	f1 f7       	brne	.-4      	; 0x40ae <LCD_enuInit+0x3d2>
    40b2:	9c 83       	std	Y+4, r25	; 0x04
    40b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b6:	8d 81       	ldd	r24, Y+5	; 0x05
    40b8:	9e 81       	ldd	r25, Y+6	; 0x06
    40ba:	01 97       	sbiw	r24, 0x01	; 1
    40bc:	9e 83       	std	Y+6, r25	; 0x06
    40be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c0:	8d 81       	ldd	r24, Y+5	; 0x05
    40c2:	9e 81       	ldd	r25, Y+6	; 0x06
    40c4:	00 97       	sbiw	r24, 0x00	; 0
    40c6:	69 f7       	brne	.-38     	; 0x40a2 <LCD_enuInit+0x3c6>
    40c8:	14 c0       	rjmp	.+40     	; 0x40f2 <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ca:	6f 81       	ldd	r22, Y+7	; 0x07
    40cc:	78 85       	ldd	r23, Y+8	; 0x08
    40ce:	89 85       	ldd	r24, Y+9	; 0x09
    40d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d6:	dc 01       	movw	r26, r24
    40d8:	cb 01       	movw	r24, r22
    40da:	9e 83       	std	Y+6, r25	; 0x06
    40dc:	8d 83       	std	Y+5, r24	; 0x05
    40de:	8d 81       	ldd	r24, Y+5	; 0x05
    40e0:	9e 81       	ldd	r25, Y+6	; 0x06
    40e2:	9a 83       	std	Y+2, r25	; 0x02
    40e4:	89 83       	std	Y+1, r24	; 0x01
    40e6:	89 81       	ldd	r24, Y+1	; 0x01
    40e8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	f1 f7       	brne	.-4      	; 0x40ea <LCD_enuInit+0x40e>
    40ee:	9a 83       	std	Y+2, r25	; 0x02
    40f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    40f2:	80 e0       	ldi	r24, 0x00	; 0
    40f4:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    40f8:	86 e0       	ldi	r24, 0x06	; 6
    40fa:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	80 93 a4 01 	sts	0x01A4, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    4108:	89 ad       	ldd	r24, Y+57	; 0x39
}
    410a:	e9 96       	adiw	r28, 0x39	; 57
    410c:	0f b6       	in	r0, 0x3f	; 63
    410e:	f8 94       	cli
    4110:	de bf       	out	0x3e, r29	; 62
    4112:	0f be       	out	0x3f, r0	; 63
    4114:	cd bf       	out	0x3d, r28	; 61
    4116:	cf 91       	pop	r28
    4118:	df 91       	pop	r29
    411a:	08 95       	ret

0000411c <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    411c:	df 93       	push	r29
    411e:	cf 93       	push	r28
    4120:	cd b7       	in	r28, 0x3d	; 61
    4122:	de b7       	in	r29, 0x3e	; 62
    4124:	6e 97       	sbiw	r28, 0x1e	; 30
    4126:	0f b6       	in	r0, 0x3f	; 63
    4128:	f8 94       	cli
    412a:	de bf       	out	0x3e, r29	; 62
    412c:	0f be       	out	0x3f, r0	; 63
    412e:	cd bf       	out	0x3d, r28	; 61
    4130:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    4132:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    4134:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4136:	82 95       	swap	r24
    4138:	8f 70       	andi	r24, 0x0F	; 15
    413a:	98 2f       	mov	r25, r24
    413c:	91 70       	andi	r25, 0x01	; 1
    413e:	80 e0       	ldi	r24, 0x00	; 0
    4140:	63 e0       	ldi	r22, 0x03	; 3
    4142:	49 2f       	mov	r20, r25
    4144:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    4148:	8e 8d       	ldd	r24, Y+30	; 0x1e
    414a:	82 95       	swap	r24
    414c:	86 95       	lsr	r24
    414e:	87 70       	andi	r24, 0x07	; 7
    4150:	98 2f       	mov	r25, r24
    4152:	91 70       	andi	r25, 0x01	; 1
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	62 e0       	ldi	r22, 0x02	; 2
    4158:	49 2f       	mov	r20, r25
    415a:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    415e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4160:	82 95       	swap	r24
    4162:	86 95       	lsr	r24
    4164:	86 95       	lsr	r24
    4166:	83 70       	andi	r24, 0x03	; 3
    4168:	98 2f       	mov	r25, r24
    416a:	91 70       	andi	r25, 0x01	; 1
    416c:	80 e0       	ldi	r24, 0x00	; 0
    416e:	61 e0       	ldi	r22, 0x01	; 1
    4170:	49 2f       	mov	r20, r25
    4172:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    4176:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4178:	98 2f       	mov	r25, r24
    417a:	99 1f       	adc	r25, r25
    417c:	99 27       	eor	r25, r25
    417e:	99 1f       	adc	r25, r25
    4180:	80 e0       	ldi	r24, 0x00	; 0
    4182:	60 e0       	ldi	r22, 0x00	; 0
    4184:	49 2f       	mov	r20, r25
    4186:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	60 e0       	ldi	r22, 0x00	; 0
    418e:	41 e0       	ldi	r20, 0x01	; 1
    4190:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	a0 e0       	ldi	r26, 0x00	; 0
    419a:	b0 e4       	ldi	r27, 0x40	; 64
    419c:	89 8f       	std	Y+25, r24	; 0x19
    419e:	9a 8f       	std	Y+26, r25	; 0x1a
    41a0:	ab 8f       	std	Y+27, r26	; 0x1b
    41a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a4:	69 8d       	ldd	r22, Y+25	; 0x19
    41a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41ac:	20 e0       	ldi	r18, 0x00	; 0
    41ae:	30 e0       	ldi	r19, 0x00	; 0
    41b0:	4a e7       	ldi	r20, 0x7A	; 122
    41b2:	55 e4       	ldi	r21, 0x45	; 69
    41b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b8:	dc 01       	movw	r26, r24
    41ba:	cb 01       	movw	r24, r22
    41bc:	8d 8b       	std	Y+21, r24	; 0x15
    41be:	9e 8b       	std	Y+22, r25	; 0x16
    41c0:	af 8b       	std	Y+23, r26	; 0x17
    41c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    41c4:	6d 89       	ldd	r22, Y+21	; 0x15
    41c6:	7e 89       	ldd	r23, Y+22	; 0x16
    41c8:	8f 89       	ldd	r24, Y+23	; 0x17
    41ca:	98 8d       	ldd	r25, Y+24	; 0x18
    41cc:	20 e0       	ldi	r18, 0x00	; 0
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	40 e8       	ldi	r20, 0x80	; 128
    41d2:	5f e3       	ldi	r21, 0x3F	; 63
    41d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41d8:	88 23       	and	r24, r24
    41da:	2c f4       	brge	.+10     	; 0x41e6 <WriteNLatch+0xca>
		__ticks = 1;
    41dc:	81 e0       	ldi	r24, 0x01	; 1
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	9c 8b       	std	Y+20, r25	; 0x14
    41e2:	8b 8b       	std	Y+19, r24	; 0x13
    41e4:	3f c0       	rjmp	.+126    	; 0x4264 <WriteNLatch+0x148>
	else if (__tmp > 65535)
    41e6:	6d 89       	ldd	r22, Y+21	; 0x15
    41e8:	7e 89       	ldd	r23, Y+22	; 0x16
    41ea:	8f 89       	ldd	r24, Y+23	; 0x17
    41ec:	98 8d       	ldd	r25, Y+24	; 0x18
    41ee:	20 e0       	ldi	r18, 0x00	; 0
    41f0:	3f ef       	ldi	r19, 0xFF	; 255
    41f2:	4f e7       	ldi	r20, 0x7F	; 127
    41f4:	57 e4       	ldi	r21, 0x47	; 71
    41f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41fa:	18 16       	cp	r1, r24
    41fc:	4c f5       	brge	.+82     	; 0x4250 <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fe:	69 8d       	ldd	r22, Y+25	; 0x19
    4200:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4202:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4204:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4206:	20 e0       	ldi	r18, 0x00	; 0
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	40 e2       	ldi	r20, 0x20	; 32
    420c:	51 e4       	ldi	r21, 0x41	; 65
    420e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	bc 01       	movw	r22, r24
    4218:	cd 01       	movw	r24, r26
    421a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	9c 8b       	std	Y+20, r25	; 0x14
    4224:	8b 8b       	std	Y+19, r24	; 0x13
    4226:	0f c0       	rjmp	.+30     	; 0x4246 <WriteNLatch+0x12a>
    4228:	80 e9       	ldi	r24, 0x90	; 144
    422a:	91 e0       	ldi	r25, 0x01	; 1
    422c:	9a 8b       	std	Y+18, r25	; 0x12
    422e:	89 8b       	std	Y+17, r24	; 0x11
    4230:	89 89       	ldd	r24, Y+17	; 0x11
    4232:	9a 89       	ldd	r25, Y+18	; 0x12
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <WriteNLatch+0x118>
    4238:	9a 8b       	std	Y+18, r25	; 0x12
    423a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    423c:	8b 89       	ldd	r24, Y+19	; 0x13
    423e:	9c 89       	ldd	r25, Y+20	; 0x14
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	9c 8b       	std	Y+20, r25	; 0x14
    4244:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4246:	8b 89       	ldd	r24, Y+19	; 0x13
    4248:	9c 89       	ldd	r25, Y+20	; 0x14
    424a:	00 97       	sbiw	r24, 0x00	; 0
    424c:	69 f7       	brne	.-38     	; 0x4228 <WriteNLatch+0x10c>
    424e:	14 c0       	rjmp	.+40     	; 0x4278 <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4250:	6d 89       	ldd	r22, Y+21	; 0x15
    4252:	7e 89       	ldd	r23, Y+22	; 0x16
    4254:	8f 89       	ldd	r24, Y+23	; 0x17
    4256:	98 8d       	ldd	r25, Y+24	; 0x18
    4258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425c:	dc 01       	movw	r26, r24
    425e:	cb 01       	movw	r24, r22
    4260:	9c 8b       	std	Y+20, r25	; 0x14
    4262:	8b 8b       	std	Y+19, r24	; 0x13
    4264:	8b 89       	ldd	r24, Y+19	; 0x13
    4266:	9c 89       	ldd	r25, Y+20	; 0x14
    4268:	98 8b       	std	Y+16, r25	; 0x10
    426a:	8f 87       	std	Y+15, r24	; 0x0f
    426c:	8f 85       	ldd	r24, Y+15	; 0x0f
    426e:	98 89       	ldd	r25, Y+16	; 0x10
    4270:	01 97       	sbiw	r24, 0x01	; 1
    4272:	f1 f7       	brne	.-4      	; 0x4270 <WriteNLatch+0x154>
    4274:	98 8b       	std	Y+16, r25	; 0x10
    4276:	8f 87       	std	Y+15, r24	; 0x0f
    4278:	81 e0       	ldi	r24, 0x01	; 1
    427a:	60 e0       	ldi	r22, 0x00	; 0
    427c:	40 e0       	ldi	r20, 0x00	; 0
    427e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    4282:	80 91 a4 01 	lds	r24, 0x01A4
    4286:	88 23       	and	r24, r24
    4288:	09 f4       	brne	.+2      	; 0x428c <WriteNLatch+0x170>
    428a:	a2 c0       	rjmp	.+324    	; 0x43d0 <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    428c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    428e:	98 2f       	mov	r25, r24
    4290:	91 70       	andi	r25, 0x01	; 1
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	63 e0       	ldi	r22, 0x03	; 3
    4296:	49 2f       	mov	r20, r25
    4298:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    429c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    429e:	86 95       	lsr	r24
    42a0:	98 2f       	mov	r25, r24
    42a2:	91 70       	andi	r25, 0x01	; 1
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	62 e0       	ldi	r22, 0x02	; 2
    42a8:	49 2f       	mov	r20, r25
    42aa:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    42ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    42b0:	86 95       	lsr	r24
    42b2:	86 95       	lsr	r24
    42b4:	98 2f       	mov	r25, r24
    42b6:	91 70       	andi	r25, 0x01	; 1
    42b8:	80 e0       	ldi	r24, 0x00	; 0
    42ba:	61 e0       	ldi	r22, 0x01	; 1
    42bc:	49 2f       	mov	r20, r25
    42be:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    42c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    42c4:	86 95       	lsr	r24
    42c6:	86 95       	lsr	r24
    42c8:	86 95       	lsr	r24
    42ca:	98 2f       	mov	r25, r24
    42cc:	91 70       	andi	r25, 0x01	; 1
    42ce:	80 e0       	ldi	r24, 0x00	; 0
    42d0:	60 e0       	ldi	r22, 0x00	; 0
    42d2:	49 2f       	mov	r20, r25
    42d4:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	60 e0       	ldi	r22, 0x00	; 0
    42dc:	41 e0       	ldi	r20, 0x01	; 1
    42de:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	90 e0       	ldi	r25, 0x00	; 0
    42e6:	a0 e0       	ldi	r26, 0x00	; 0
    42e8:	b0 e4       	ldi	r27, 0x40	; 64
    42ea:	8b 87       	std	Y+11, r24	; 0x0b
    42ec:	9c 87       	std	Y+12, r25	; 0x0c
    42ee:	ad 87       	std	Y+13, r26	; 0x0d
    42f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    42f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    42f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    42f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	4a e7       	ldi	r20, 0x7A	; 122
    4300:	55 e4       	ldi	r21, 0x45	; 69
    4302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	8f 83       	std	Y+7, r24	; 0x07
    430c:	98 87       	std	Y+8, r25	; 0x08
    430e:	a9 87       	std	Y+9, r26	; 0x09
    4310:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4312:	6f 81       	ldd	r22, Y+7	; 0x07
    4314:	78 85       	ldd	r23, Y+8	; 0x08
    4316:	89 85       	ldd	r24, Y+9	; 0x09
    4318:	9a 85       	ldd	r25, Y+10	; 0x0a
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	40 e8       	ldi	r20, 0x80	; 128
    4320:	5f e3       	ldi	r21, 0x3F	; 63
    4322:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4326:	88 23       	and	r24, r24
    4328:	2c f4       	brge	.+10     	; 0x4334 <WriteNLatch+0x218>
		__ticks = 1;
    432a:	81 e0       	ldi	r24, 0x01	; 1
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	9e 83       	std	Y+6, r25	; 0x06
    4330:	8d 83       	std	Y+5, r24	; 0x05
    4332:	3f c0       	rjmp	.+126    	; 0x43b2 <WriteNLatch+0x296>
	else if (__tmp > 65535)
    4334:	6f 81       	ldd	r22, Y+7	; 0x07
    4336:	78 85       	ldd	r23, Y+8	; 0x08
    4338:	89 85       	ldd	r24, Y+9	; 0x09
    433a:	9a 85       	ldd	r25, Y+10	; 0x0a
    433c:	20 e0       	ldi	r18, 0x00	; 0
    433e:	3f ef       	ldi	r19, 0xFF	; 255
    4340:	4f e7       	ldi	r20, 0x7F	; 127
    4342:	57 e4       	ldi	r21, 0x47	; 71
    4344:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4348:	18 16       	cp	r1, r24
    434a:	4c f5       	brge	.+82     	; 0x439e <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    434c:	6b 85       	ldd	r22, Y+11	; 0x0b
    434e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4350:	8d 85       	ldd	r24, Y+13	; 0x0d
    4352:	9e 85       	ldd	r25, Y+14	; 0x0e
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	40 e2       	ldi	r20, 0x20	; 32
    435a:	51 e4       	ldi	r21, 0x41	; 65
    435c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	bc 01       	movw	r22, r24
    4366:	cd 01       	movw	r24, r26
    4368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436c:	dc 01       	movw	r26, r24
    436e:	cb 01       	movw	r24, r22
    4370:	9e 83       	std	Y+6, r25	; 0x06
    4372:	8d 83       	std	Y+5, r24	; 0x05
    4374:	0f c0       	rjmp	.+30     	; 0x4394 <WriteNLatch+0x278>
    4376:	80 e9       	ldi	r24, 0x90	; 144
    4378:	91 e0       	ldi	r25, 0x01	; 1
    437a:	9c 83       	std	Y+4, r25	; 0x04
    437c:	8b 83       	std	Y+3, r24	; 0x03
    437e:	8b 81       	ldd	r24, Y+3	; 0x03
    4380:	9c 81       	ldd	r25, Y+4	; 0x04
    4382:	01 97       	sbiw	r24, 0x01	; 1
    4384:	f1 f7       	brne	.-4      	; 0x4382 <WriteNLatch+0x266>
    4386:	9c 83       	std	Y+4, r25	; 0x04
    4388:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    438a:	8d 81       	ldd	r24, Y+5	; 0x05
    438c:	9e 81       	ldd	r25, Y+6	; 0x06
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	9e 83       	std	Y+6, r25	; 0x06
    4392:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4394:	8d 81       	ldd	r24, Y+5	; 0x05
    4396:	9e 81       	ldd	r25, Y+6	; 0x06
    4398:	00 97       	sbiw	r24, 0x00	; 0
    439a:	69 f7       	brne	.-38     	; 0x4376 <WriteNLatch+0x25a>
    439c:	14 c0       	rjmp	.+40     	; 0x43c6 <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    439e:	6f 81       	ldd	r22, Y+7	; 0x07
    43a0:	78 85       	ldd	r23, Y+8	; 0x08
    43a2:	89 85       	ldd	r24, Y+9	; 0x09
    43a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	9e 83       	std	Y+6, r25	; 0x06
    43b0:	8d 83       	std	Y+5, r24	; 0x05
    43b2:	8d 81       	ldd	r24, Y+5	; 0x05
    43b4:	9e 81       	ldd	r25, Y+6	; 0x06
    43b6:	9a 83       	std	Y+2, r25	; 0x02
    43b8:	89 83       	std	Y+1, r24	; 0x01
    43ba:	89 81       	ldd	r24, Y+1	; 0x01
    43bc:	9a 81       	ldd	r25, Y+2	; 0x02
    43be:	01 97       	sbiw	r24, 0x01	; 1
    43c0:	f1 f7       	brne	.-4      	; 0x43be <WriteNLatch+0x2a2>
    43c2:	9a 83       	std	Y+2, r25	; 0x02
    43c4:	89 83       	std	Y+1, r24	; 0x01
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	60 e0       	ldi	r22, 0x00	; 0
    43ca:	40 e0       	ldi	r20, 0x00	; 0
    43cc:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    43d0:	81 e0       	ldi	r24, 0x01	; 1
    43d2:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    43d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    43d6:	6e 96       	adiw	r28, 0x1e	; 30
    43d8:	0f b6       	in	r0, 0x3f	; 63
    43da:	f8 94       	cli
    43dc:	de bf       	out	0x3e, r29	; 62
    43de:	0f be       	out	0x3f, r0	; 63
    43e0:	cd bf       	out	0x3d, r28	; 61
    43e2:	cf 91       	pop	r28
    43e4:	df 91       	pop	r29
    43e6:	08 95       	ret

000043e8 <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    43e8:	df 93       	push	r29
    43ea:	cf 93       	push	r28
    43ec:	00 d0       	rcall	.+0      	; 0x43ee <LCD_enuSendData+0x6>
    43ee:	cd b7       	in	r28, 0x3d	; 61
    43f0:	de b7       	in	r29, 0x3e	; 62
    43f2:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    43f4:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    43f6:	81 e0       	ldi	r24, 0x01	; 1
    43f8:	62 e0       	ldi	r22, 0x02	; 2
    43fa:	41 e0       	ldi	r20, 0x01	; 1
    43fc:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	61 e0       	ldi	r22, 0x01	; 1
    4404:	40 e0       	ldi	r20, 0x00	; 0
    4406:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    440a:	8a 81       	ldd	r24, Y+2	; 0x02
    440c:	0e 94 8e 20 	call	0x411c	; 0x411c <WriteNLatch>



	return Local_enu_ErrorState;
    4410:	89 81       	ldd	r24, Y+1	; 0x01
}
    4412:	0f 90       	pop	r0
    4414:	0f 90       	pop	r0
    4416:	cf 91       	pop	r28
    4418:	df 91       	pop	r29
    441a:	08 95       	ret

0000441c <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    441c:	df 93       	push	r29
    441e:	cf 93       	push	r28
    4420:	00 d0       	rcall	.+0      	; 0x4422 <LCD_enuSendCommand+0x6>
    4422:	cd b7       	in	r28, 0x3d	; 61
    4424:	de b7       	in	r29, 0x3e	; 62
    4426:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    4428:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	62 e0       	ldi	r22, 0x02	; 2
    442e:	40 e0       	ldi	r20, 0x00	; 0
    4430:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    4434:	81 e0       	ldi	r24, 0x01	; 1
    4436:	61 e0       	ldi	r22, 0x01	; 1
    4438:	40 e0       	ldi	r20, 0x00	; 0
    443a:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    443e:	8a 81       	ldd	r24, Y+2	; 0x02
    4440:	0e 94 8e 20 	call	0x411c	; 0x411c <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    4448:	89 81       	ldd	r24, Y+1	; 0x01
}
    444a:	0f 90       	pop	r0
    444c:	0f 90       	pop	r0
    444e:	cf 91       	pop	r28
    4450:	df 91       	pop	r29
    4452:	08 95       	ret

00004454 <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    4454:	df 93       	push	r29
    4456:	cf 93       	push	r28
    4458:	00 d0       	rcall	.+0      	; 0x445a <LCD_u8SendString+0x6>
    445a:	00 d0       	rcall	.+0      	; 0x445c <LCD_u8SendString+0x8>
    445c:	0f 92       	push	r0
    445e:	cd b7       	in	r28, 0x3d	; 61
    4460:	de b7       	in	r29, 0x3e	; 62
    4462:	9c 83       	std	Y+4, r25	; 0x04
    4464:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4466:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    4468:	8b 81       	ldd	r24, Y+3	; 0x03
    446a:	9c 81       	ldd	r25, Y+4	; 0x04
    446c:	00 97       	sbiw	r24, 0x00	; 0
    446e:	f9 f0       	breq	.+62     	; 0x44ae <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    4470:	19 82       	std	Y+1, r1	; 0x01
    4472:	0f c0       	rjmp	.+30     	; 0x4492 <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    4474:	89 81       	ldd	r24, Y+1	; 0x01
    4476:	28 2f       	mov	r18, r24
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	8b 81       	ldd	r24, Y+3	; 0x03
    447c:	9c 81       	ldd	r25, Y+4	; 0x04
    447e:	fc 01       	movw	r30, r24
    4480:	e2 0f       	add	r30, r18
    4482:	f3 1f       	adc	r31, r19
    4484:	90 81       	ld	r25, Z
    4486:	89 81       	ldd	r24, Y+1	; 0x01
    4488:	8f 5f       	subi	r24, 0xFF	; 255
    448a:	89 83       	std	Y+1, r24	; 0x01
    448c:	89 2f       	mov	r24, r25
    448e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    4492:	89 81       	ldd	r24, Y+1	; 0x01
    4494:	28 2f       	mov	r18, r24
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	8b 81       	ldd	r24, Y+3	; 0x03
    449a:	9c 81       	ldd	r25, Y+4	; 0x04
    449c:	fc 01       	movw	r30, r24
    449e:	e2 0f       	add	r30, r18
    44a0:	f3 1f       	adc	r31, r19
    44a2:	80 81       	ld	r24, Z
    44a4:	88 23       	and	r24, r24
    44a6:	31 f7       	brne	.-52     	; 0x4474 <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    44a8:	8a 81       	ldd	r24, Y+2	; 0x02
    44aa:	8d 83       	std	Y+5, r24	; 0x05
    44ac:	04 c0       	rjmp	.+8      	; 0x44b6 <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    44ae:	81 e0       	ldi	r24, 0x01	; 1
    44b0:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    44b2:	8a 81       	ldd	r24, Y+2	; 0x02
    44b4:	8d 83       	std	Y+5, r24	; 0x05
    44b6:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    44b8:	0f 90       	pop	r0
    44ba:	0f 90       	pop	r0
    44bc:	0f 90       	pop	r0
    44be:	0f 90       	pop	r0
    44c0:	0f 90       	pop	r0
    44c2:	cf 91       	pop	r28
    44c4:	df 91       	pop	r29
    44c6:	08 95       	ret

000044c8 <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    44c8:	df 93       	push	r29
    44ca:	cf 93       	push	r28
    44cc:	cd b7       	in	r28, 0x3d	; 61
    44ce:	de b7       	in	r29, 0x3e	; 62
    44d0:	a0 97       	sbiw	r28, 0x20	; 32
    44d2:	0f b6       	in	r0, 0x3f	; 63
    44d4:	f8 94       	cli
    44d6:	de bf       	out	0x3e, r29	; 62
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	cd bf       	out	0x3d, r28	; 61
    44dc:	6b 8f       	std	Y+27, r22	; 0x1b
    44de:	7c 8f       	std	Y+28, r23	; 0x1c
    44e0:	8d 8f       	std	Y+29, r24	; 0x1d
    44e2:	9e 8f       	std	Y+30, r25	; 0x1e
    44e4:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    44e6:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    44e8:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    44ea:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    44ec:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    44ee:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    44f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44f4:	ad 8d       	ldd	r26, Y+29	; 0x1d
    44f6:	be 8d       	ldd	r27, Y+30	; 0x1e
    44f8:	bb 23       	and	r27, r27
    44fa:	94 f4       	brge	.+36     	; 0x4520 <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    44fc:	8d e2       	ldi	r24, 0x2D	; 45
    44fe:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <LCD_enuSendData>
		Copy_u8data*=-1;
    4502:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4504:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4506:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4508:	be 8d       	ldd	r27, Y+30	; 0x1e
    450a:	b0 95       	com	r27
    450c:	a0 95       	com	r26
    450e:	90 95       	com	r25
    4510:	81 95       	neg	r24
    4512:	9f 4f       	sbci	r25, 0xFF	; 255
    4514:	af 4f       	sbci	r26, 0xFF	; 255
    4516:	bf 4f       	sbci	r27, 0xFF	; 255
    4518:	8b 8f       	std	Y+27, r24	; 0x1b
    451a:	9c 8f       	std	Y+28, r25	; 0x1c
    451c:	ad 8f       	std	Y+29, r26	; 0x1d
    451e:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    4520:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4522:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4524:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4526:	be 8d       	ldd	r27, Y+30	; 0x1e
    4528:	00 97       	sbiw	r24, 0x00	; 0
    452a:	a1 05       	cpc	r26, r1
    452c:	b1 05       	cpc	r27, r1
    452e:	09 f0       	breq	.+2      	; 0x4532 <LCD_enuIntegerToString+0x6a>
    4530:	4b c0       	rjmp	.+150    	; 0x45c8 <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    4532:	8d 81       	ldd	r24, Y+5	; 0x05
    4534:	28 2f       	mov	r18, r24
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	ce 01       	movw	r24, r28
    453a:	07 96       	adiw	r24, 0x07	; 7
    453c:	fc 01       	movw	r30, r24
    453e:	e2 0f       	add	r30, r18
    4540:	f3 1f       	adc	r31, r19
    4542:	80 e3       	ldi	r24, 0x30	; 48
    4544:	80 83       	st	Z, r24
    4546:	8d 81       	ldd	r24, Y+5	; 0x05
    4548:	8f 5f       	subi	r24, 0xFF	; 255
    454a:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    454c:	8d 81       	ldd	r24, Y+5	; 0x05
    454e:	28 2f       	mov	r18, r24
    4550:	30 e0       	ldi	r19, 0x00	; 0
    4552:	ce 01       	movw	r24, r28
    4554:	07 96       	adiw	r24, 0x07	; 7
    4556:	fc 01       	movw	r30, r24
    4558:	e2 0f       	add	r30, r18
    455a:	f3 1f       	adc	r31, r19
    455c:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    455e:	8e 81       	ldd	r24, Y+6	; 0x06
    4560:	88 a3       	std	Y+32, r24	; 0x20
    4562:	7f c0       	rjmp	.+254    	; 0x4662 <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    4564:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4566:	28 2f       	mov	r18, r24
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	40 e0       	ldi	r20, 0x00	; 0
    456c:	50 e0       	ldi	r21, 0x00	; 0
    456e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4570:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4572:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4574:	be 8d       	ldd	r27, Y+30	; 0x1e
    4576:	bc 01       	movw	r22, r24
    4578:	cd 01       	movw	r24, r26
    457a:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <__divmodsi4>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    4584:	8d 81       	ldd	r24, Y+5	; 0x05
    4586:	28 2f       	mov	r18, r24
    4588:	30 e0       	ldi	r19, 0x00	; 0
    458a:	8c 81       	ldd	r24, Y+4	; 0x04
    458c:	48 2f       	mov	r20, r24
    458e:	40 5d       	subi	r20, 0xD0	; 208
    4590:	ce 01       	movw	r24, r28
    4592:	07 96       	adiw	r24, 0x07	; 7
    4594:	fc 01       	movw	r30, r24
    4596:	e2 0f       	add	r30, r18
    4598:	f3 1f       	adc	r31, r19
    459a:	40 83       	st	Z, r20
    459c:	8d 81       	ldd	r24, Y+5	; 0x05
    459e:	8f 5f       	subi	r24, 0xFF	; 255
    45a0:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    45a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45a4:	28 2f       	mov	r18, r24
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e0       	ldi	r20, 0x00	; 0
    45aa:	50 e0       	ldi	r21, 0x00	; 0
    45ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45b0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    45b2:	be 8d       	ldd	r27, Y+30	; 0x1e
    45b4:	bc 01       	movw	r22, r24
    45b6:	cd 01       	movw	r24, r26
    45b8:	0e 94 6c 26 	call	0x4cd8	; 0x4cd8 <__divmodsi4>
    45bc:	da 01       	movw	r26, r20
    45be:	c9 01       	movw	r24, r18
    45c0:	8b 8f       	std	Y+27, r24	; 0x1b
    45c2:	9c 8f       	std	Y+28, r25	; 0x1c
    45c4:	ad 8f       	std	Y+29, r26	; 0x1d
    45c6:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    45c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45cc:	ad 8d       	ldd	r26, Y+29	; 0x1d
    45ce:	be 8d       	ldd	r27, Y+30	; 0x1e
    45d0:	00 97       	sbiw	r24, 0x00	; 0
    45d2:	a1 05       	cpc	r26, r1
    45d4:	b1 05       	cpc	r27, r1
    45d6:	31 f6       	brne	.-116    	; 0x4564 <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    45d8:	8d 81       	ldd	r24, Y+5	; 0x05
    45da:	28 2f       	mov	r18, r24
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	ce 01       	movw	r24, r28
    45e0:	07 96       	adiw	r24, 0x07	; 7
    45e2:	fc 01       	movw	r30, r24
    45e4:	e2 0f       	add	r30, r18
    45e6:	f3 1f       	adc	r31, r19
    45e8:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    45ea:	8d 81       	ldd	r24, Y+5	; 0x05
    45ec:	81 50       	subi	r24, 0x01	; 1
    45ee:	8a 83       	std	Y+2, r24	; 0x02
    45f0:	2c c0       	rjmp	.+88     	; 0x464a <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    45f2:	8b 81       	ldd	r24, Y+3	; 0x03
    45f4:	28 2f       	mov	r18, r24
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	ce 01       	movw	r24, r28
    45fa:	07 96       	adiw	r24, 0x07	; 7
    45fc:	fc 01       	movw	r30, r24
    45fe:	e2 0f       	add	r30, r18
    4600:	f3 1f       	adc	r31, r19
    4602:	80 81       	ld	r24, Z
    4604:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    4606:	8b 81       	ldd	r24, Y+3	; 0x03
    4608:	48 2f       	mov	r20, r24
    460a:	50 e0       	ldi	r21, 0x00	; 0
    460c:	8a 81       	ldd	r24, Y+2	; 0x02
    460e:	28 2f       	mov	r18, r24
    4610:	30 e0       	ldi	r19, 0x00	; 0
    4612:	ce 01       	movw	r24, r28
    4614:	07 96       	adiw	r24, 0x07	; 7
    4616:	fc 01       	movw	r30, r24
    4618:	e2 0f       	add	r30, r18
    461a:	f3 1f       	adc	r31, r19
    461c:	20 81       	ld	r18, Z
    461e:	ce 01       	movw	r24, r28
    4620:	07 96       	adiw	r24, 0x07	; 7
    4622:	fc 01       	movw	r30, r24
    4624:	e4 0f       	add	r30, r20
    4626:	f5 1f       	adc	r31, r21
    4628:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    462a:	8a 81       	ldd	r24, Y+2	; 0x02
    462c:	28 2f       	mov	r18, r24
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	ce 01       	movw	r24, r28
    4632:	07 96       	adiw	r24, 0x07	; 7
    4634:	fc 01       	movw	r30, r24
    4636:	e2 0f       	add	r30, r18
    4638:	f3 1f       	adc	r31, r19
    463a:	89 81       	ldd	r24, Y+1	; 0x01
    463c:	80 83       	st	Z, r24

        Local_u8Start++;
    463e:	8b 81       	ldd	r24, Y+3	; 0x03
    4640:	8f 5f       	subi	r24, 0xFF	; 255
    4642:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    4644:	8a 81       	ldd	r24, Y+2	; 0x02
    4646:	81 50       	subi	r24, 0x01	; 1
    4648:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    464a:	9b 81       	ldd	r25, Y+3	; 0x03
    464c:	8a 81       	ldd	r24, Y+2	; 0x02
    464e:	98 17       	cp	r25, r24
    4650:	80 f2       	brcs	.-96     	; 0x45f2 <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    4652:	ce 01       	movw	r24, r28
    4654:	07 96       	adiw	r24, 0x07	; 7
    4656:	0e 94 2a 22 	call	0x4454	; 0x4454 <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    465e:	8e 81       	ldd	r24, Y+6	; 0x06
    4660:	88 a3       	std	Y+32, r24	; 0x20
    4662:	88 a1       	ldd	r24, Y+32	; 0x20
}
    4664:	a0 96       	adiw	r28, 0x20	; 32
    4666:	0f b6       	in	r0, 0x3f	; 63
    4668:	f8 94       	cli
    466a:	de bf       	out	0x3e, r29	; 62
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	cd bf       	out	0x3d, r28	; 61
    4670:	cf 91       	pop	r28
    4672:	df 91       	pop	r29
    4674:	08 95       	ret

00004676 <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    4676:	df 93       	push	r29
    4678:	cf 93       	push	r28
    467a:	cd b7       	in	r28, 0x3d	; 61
    467c:	de b7       	in	r29, 0x3e	; 62
    467e:	27 97       	sbiw	r28, 0x07	; 7
    4680:	0f b6       	in	r0, 0x3f	; 63
    4682:	f8 94       	cli
    4684:	de bf       	out	0x3e, r29	; 62
    4686:	0f be       	out	0x3f, r0	; 63
    4688:	cd bf       	out	0x3d, r28	; 61
    468a:	8b 83       	std	Y+3, r24	; 0x03
    468c:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    468e:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    4690:	8b 81       	ldd	r24, Y+3	; 0x03
    4692:	81 31       	cpi	r24, 0x11	; 17
    4694:	18 f4       	brcc	.+6      	; 0x469c <LCD_u8SetPosXY+0x26>
    4696:	8c 81       	ldd	r24, Y+4	; 0x04
    4698:	83 30       	cpi	r24, 0x03	; 3
    469a:	18 f0       	brcs	.+6      	; 0x46a2 <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    469c:	2a 81       	ldd	r18, Y+2	; 0x02
    469e:	2f 83       	std	Y+7, r18	; 0x07
    46a0:	23 c0       	rjmp	.+70     	; 0x46e8 <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    46a2:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    46a4:	8c 81       	ldd	r24, Y+4	; 0x04
    46a6:	28 2f       	mov	r18, r24
    46a8:	30 e0       	ldi	r19, 0x00	; 0
    46aa:	3e 83       	std	Y+6, r19	; 0x06
    46ac:	2d 83       	std	Y+5, r18	; 0x05
    46ae:	8d 81       	ldd	r24, Y+5	; 0x05
    46b0:	9e 81       	ldd	r25, Y+6	; 0x06
    46b2:	81 30       	cpi	r24, 0x01	; 1
    46b4:	91 05       	cpc	r25, r1
    46b6:	31 f0       	breq	.+12     	; 0x46c4 <LCD_u8SetPosXY+0x4e>
    46b8:	2d 81       	ldd	r18, Y+5	; 0x05
    46ba:	3e 81       	ldd	r19, Y+6	; 0x06
    46bc:	22 30       	cpi	r18, 0x02	; 2
    46be:	31 05       	cpc	r19, r1
    46c0:	21 f0       	breq	.+8      	; 0x46ca <LCD_u8SetPosXY+0x54>
    46c2:	07 c0       	rjmp	.+14     	; 0x46d2 <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    46c4:	8b 81       	ldd	r24, Y+3	; 0x03
    46c6:	89 83       	std	Y+1, r24	; 0x01
    46c8:	05 c0       	rjmp	.+10     	; 0x46d4 <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    46ca:	8b 81       	ldd	r24, Y+3	; 0x03
    46cc:	80 5c       	subi	r24, 0xC0	; 192
    46ce:	89 83       	std	Y+1, r24	; 0x01
    46d0:	01 c0       	rjmp	.+2      	; 0x46d4 <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    46d2:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    46d4:	89 81       	ldd	r24, Y+1	; 0x01
    46d6:	80 68       	ori	r24, 0x80	; 128
    46d8:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    46da:	89 81       	ldd	r24, Y+1	; 0x01
    46dc:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    46e4:	3a 81       	ldd	r19, Y+2	; 0x02
    46e6:	3f 83       	std	Y+7, r19	; 0x07
    46e8:	8f 81       	ldd	r24, Y+7	; 0x07
}
    46ea:	27 96       	adiw	r28, 0x07	; 7
    46ec:	0f b6       	in	r0, 0x3f	; 63
    46ee:	f8 94       	cli
    46f0:	de bf       	out	0x3e, r29	; 62
    46f2:	0f be       	out	0x3f, r0	; 63
    46f4:	cd bf       	out	0x3d, r28	; 61
    46f6:	cf 91       	pop	r28
    46f8:	df 91       	pop	r29
    46fa:	08 95       	ret

000046fc <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    46fc:	df 93       	push	r29
    46fe:	cf 93       	push	r28
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
    4704:	27 97       	sbiw	r28, 0x07	; 7
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	f8 94       	cli
    470a:	de bf       	out	0x3e, r29	; 62
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	cd bf       	out	0x3d, r28	; 61
    4710:	9d 83       	std	Y+5, r25	; 0x05
    4712:	8c 83       	std	Y+4, r24	; 0x04
    4714:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4716:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    4718:	8c 81       	ldd	r24, Y+4	; 0x04
    471a:	9d 81       	ldd	r25, Y+5	; 0x05
    471c:	00 97       	sbiw	r24, 0x00	; 0
    471e:	19 f0       	breq	.+6      	; 0x4726 <LCD_u8StoreCustomChar+0x2a>
    4720:	8e 81       	ldd	r24, Y+6	; 0x06
    4722:	89 30       	cpi	r24, 0x09	; 9
    4724:	18 f0       	brcs	.+6      	; 0x472c <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    4726:	8b 81       	ldd	r24, Y+3	; 0x03
    4728:	8f 83       	std	Y+7, r24	; 0x07
    472a:	2a c0       	rjmp	.+84     	; 0x4780 <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    472c:	8e 81       	ldd	r24, Y+6	; 0x06
    472e:	88 2f       	mov	r24, r24
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	88 0f       	add	r24, r24
    4734:	99 1f       	adc	r25, r25
    4736:	88 0f       	add	r24, r24
    4738:	99 1f       	adc	r25, r25
    473a:	88 0f       	add	r24, r24
    473c:	99 1f       	adc	r25, r25
    473e:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    4740:	8a 81       	ldd	r24, Y+2	; 0x02
    4742:	80 64       	ori	r24, 0x40	; 64
    4744:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    4746:	8a 81       	ldd	r24, Y+2	; 0x02
    4748:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    474c:	19 82       	std	Y+1, r1	; 0x01
    474e:	0e c0       	rjmp	.+28     	; 0x476c <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    4750:	89 81       	ldd	r24, Y+1	; 0x01
    4752:	28 2f       	mov	r18, r24
    4754:	30 e0       	ldi	r19, 0x00	; 0
    4756:	8c 81       	ldd	r24, Y+4	; 0x04
    4758:	9d 81       	ldd	r25, Y+5	; 0x05
    475a:	fc 01       	movw	r30, r24
    475c:	e2 0f       	add	r30, r18
    475e:	f3 1f       	adc	r31, r19
    4760:	80 81       	ld	r24, Z
    4762:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    4766:	89 81       	ldd	r24, Y+1	; 0x01
    4768:	8f 5f       	subi	r24, 0xFF	; 255
    476a:	89 83       	std	Y+1, r24	; 0x01
    476c:	89 81       	ldd	r24, Y+1	; 0x01
    476e:	88 30       	cpi	r24, 0x08	; 8
    4770:	78 f3       	brcs	.-34     	; 0x4750 <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    4772:	82 e0       	ldi	r24, 0x02	; 2
    4774:	0e 94 0e 22 	call	0x441c	; 0x441c <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    4778:	81 e0       	ldi	r24, 0x01	; 1
    477a:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    477c:	8b 81       	ldd	r24, Y+3	; 0x03
    477e:	8f 83       	std	Y+7, r24	; 0x07
    4780:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4782:	27 96       	adiw	r28, 0x07	; 7
    4784:	0f b6       	in	r0, 0x3f	; 63
    4786:	f8 94       	cli
    4788:	de bf       	out	0x3e, r29	; 62
    478a:	0f be       	out	0x3f, r0	; 63
    478c:	cd bf       	out	0x3d, r28	; 61
    478e:	cf 91       	pop	r28
    4790:	df 91       	pop	r29
    4792:	08 95       	ret

00004794 <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	00 d0       	rcall	.+0      	; 0x479a <LCD_u8DisplayCustomChar+0x6>
    479a:	00 d0       	rcall	.+0      	; 0x479c <LCD_u8DisplayCustomChar+0x8>
    479c:	cd b7       	in	r28, 0x3d	; 61
    479e:	de b7       	in	r29, 0x3e	; 62
    47a0:	8a 83       	std	Y+2, r24	; 0x02
    47a2:	6b 83       	std	Y+3, r22	; 0x03
    47a4:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    47a6:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    47a8:	8c 81       	ldd	r24, Y+4	; 0x04
    47aa:	6b 81       	ldd	r22, Y+3	; 0x03
    47ac:	0e 94 3b 23 	call	0x4676	; 0x4676 <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    47b0:	8a 81       	ldd	r24, Y+2	; 0x02
    47b2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    47ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    47bc:	0f 90       	pop	r0
    47be:	0f 90       	pop	r0
    47c0:	0f 90       	pop	r0
    47c2:	0f 90       	pop	r0
    47c4:	cf 91       	pop	r28
    47c6:	df 91       	pop	r29
    47c8:	08 95       	ret

000047ca <EEPROM_enuInit>:
#include <util/delay.h>
/**************************************************************/



ErrorStatus_t EEPROM_enuInit(void){
    47ca:	df 93       	push	r29
    47cc:	cf 93       	push	r28
    47ce:	0f 92       	push	r0
    47d0:	cd b7       	in	r28, 0x3d	; 61
    47d2:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enuErrorState = TWI_enuInit();
    47d4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <TWI_enuInit>
    47d8:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    47da:	89 81       	ldd	r24, Y+1	; 0x01
}
    47dc:	0f 90       	pop	r0
    47de:	cf 91       	pop	r28
    47e0:	df 91       	pop	r29
    47e2:	08 95       	ret

000047e4 <EEPROM_enuWriteData>:


ErrorStatus_t EEPROM_enuWriteData(EEPROM_Input_t* eepromInstance) {
    47e4:	df 93       	push	r29
    47e6:	cf 93       	push	r28
    47e8:	cd b7       	in	r28, 0x3d	; 61
    47ea:	de b7       	in	r29, 0x3e	; 62
    47ec:	62 97       	sbiw	r28, 0x12	; 18
    47ee:	0f b6       	in	r0, 0x3f	; 63
    47f0:	f8 94       	cli
    47f2:	de bf       	out	0x3e, r29	; 62
    47f4:	0f be       	out	0x3f, r0	; 63
    47f6:	cd bf       	out	0x3d, r28	; 61
    47f8:	9a 8b       	std	Y+18, r25	; 0x12
    47fa:	89 8b       	std	Y+17, r24	; 0x11
    ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    47fc:	18 8a       	std	Y+16, r1	; 0x10

    	uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 3) | (eepromInstance->A1 << 2) | (eepromInstance->A0);

	#elif(EEPROM_TYPE == EEPROM_NM24C08 || EEPROM_TYPE == EEPROM_NM24C08F )

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 2) | (eepromInstance->A1 << 1) | (eepromInstance->A0);
    47fe:	e9 89       	ldd	r30, Y+17	; 0x11
    4800:	fa 89       	ldd	r31, Y+18	; 0x12
    4802:	82 81       	ldd	r24, Z+2	; 0x02
    4804:	81 70       	andi	r24, 0x01	; 1
    4806:	88 2f       	mov	r24, r24
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	88 0f       	add	r24, r24
    480c:	99 1f       	adc	r25, r25
    480e:	88 0f       	add	r24, r24
    4810:	99 1f       	adc	r25, r25
    4812:	28 2f       	mov	r18, r24
    4814:	20 6a       	ori	r18, 0xA0	; 160
    4816:	e9 89       	ldd	r30, Y+17	; 0x11
    4818:	fa 89       	ldd	r31, Y+18	; 0x12
    481a:	82 81       	ldd	r24, Z+2	; 0x02
    481c:	86 95       	lsr	r24
    481e:	81 70       	andi	r24, 0x01	; 1
    4820:	88 2f       	mov	r24, r24
    4822:	90 e0       	ldi	r25, 0x00	; 0
    4824:	88 0f       	add	r24, r24
    4826:	99 1f       	adc	r25, r25
    4828:	92 2f       	mov	r25, r18
    482a:	98 2b       	or	r25, r24
    482c:	e9 89       	ldd	r30, Y+17	; 0x11
    482e:	fa 89       	ldd	r31, Y+18	; 0x12
    4830:	82 81       	ldd	r24, Z+2	; 0x02
    4832:	86 95       	lsr	r24
    4834:	86 95       	lsr	r24
    4836:	81 70       	andi	r24, 0x01	; 1
    4838:	89 2b       	or	r24, r25
    483a:	8f 87       	std	Y+15, r24	; 0x0f
		#error "Unsupported EEPROM type!"
	#endif


    // Send start condition
    if( TWI_enuStartCondition() == TWI_STATUS_OK){
    483c:	0e 94 8b 08 	call	0x1116	; 0x1116 <TWI_enuStartCondition>
    4840:	81 30       	cpi	r24, 0x01	; 1
    4842:	79 f4       	brne	.+30     	; 0x4862 <EEPROM_enuWriteData+0x7e>

		// Send EEPROM address with write operation
		TWI_enuWriteData(Local_u8Address | TWI_WriteOperation);
    4844:	8f 85       	ldd	r24, Y+15	; 0x0f
    4846:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Send memory address within EEPROM
		TWI_enuWriteData(eepromInstance->address);
    484a:	e9 89       	ldd	r30, Y+17	; 0x11
    484c:	fa 89       	ldd	r31, Y+18	; 0x12
    484e:	80 81       	ld	r24, Z
    4850:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Write data to EEPROM
		TWI_enuWriteData(eepromInstance->data);
    4854:	e9 89       	ldd	r30, Y+17	; 0x11
    4856:	fa 89       	ldd	r31, Y+18	; 0x12
    4858:	81 81       	ldd	r24, Z+1	; 0x01
    485a:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Send stop condition
		TWI_enuStopCondition();
    485e:	0e 94 cb 08 	call	0x1196	; 0x1196 <TWI_enuStopCondition>
    4862:	80 e0       	ldi	r24, 0x00	; 0
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	a0 e2       	ldi	r26, 0x20	; 32
    4868:	b1 e4       	ldi	r27, 0x41	; 65
    486a:	8b 87       	std	Y+11, r24	; 0x0b
    486c:	9c 87       	std	Y+12, r25	; 0x0c
    486e:	ad 87       	std	Y+13, r26	; 0x0d
    4870:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4872:	6b 85       	ldd	r22, Y+11	; 0x0b
    4874:	7c 85       	ldd	r23, Y+12	; 0x0c
    4876:	8d 85       	ldd	r24, Y+13	; 0x0d
    4878:	9e 85       	ldd	r25, Y+14	; 0x0e
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	4a ef       	ldi	r20, 0xFA	; 250
    4880:	54 e4       	ldi	r21, 0x44	; 68
    4882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4886:	dc 01       	movw	r26, r24
    4888:	cb 01       	movw	r24, r22
    488a:	8f 83       	std	Y+7, r24	; 0x07
    488c:	98 87       	std	Y+8, r25	; 0x08
    488e:	a9 87       	std	Y+9, r26	; 0x09
    4890:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4892:	6f 81       	ldd	r22, Y+7	; 0x07
    4894:	78 85       	ldd	r23, Y+8	; 0x08
    4896:	89 85       	ldd	r24, Y+9	; 0x09
    4898:	9a 85       	ldd	r25, Y+10	; 0x0a
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	40 e8       	ldi	r20, 0x80	; 128
    48a0:	5f e3       	ldi	r21, 0x3F	; 63
    48a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48a6:	88 23       	and	r24, r24
    48a8:	2c f4       	brge	.+10     	; 0x48b4 <EEPROM_enuWriteData+0xd0>
		__ticks = 1;
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	9e 83       	std	Y+6, r25	; 0x06
    48b0:	8d 83       	std	Y+5, r24	; 0x05
    48b2:	3f c0       	rjmp	.+126    	; 0x4932 <EEPROM_enuWriteData+0x14e>
	else if (__tmp > 65535)
    48b4:	6f 81       	ldd	r22, Y+7	; 0x07
    48b6:	78 85       	ldd	r23, Y+8	; 0x08
    48b8:	89 85       	ldd	r24, Y+9	; 0x09
    48ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    48bc:	20 e0       	ldi	r18, 0x00	; 0
    48be:	3f ef       	ldi	r19, 0xFF	; 255
    48c0:	4f e7       	ldi	r20, 0x7F	; 127
    48c2:	57 e4       	ldi	r21, 0x47	; 71
    48c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48c8:	18 16       	cp	r1, r24
    48ca:	4c f5       	brge	.+82     	; 0x491e <EEPROM_enuWriteData+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    48ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    48d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    48d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	40 e2       	ldi	r20, 0x20	; 32
    48da:	51 e4       	ldi	r21, 0x41	; 65
    48dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	bc 01       	movw	r22, r24
    48e6:	cd 01       	movw	r24, r26
    48e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ec:	dc 01       	movw	r26, r24
    48ee:	cb 01       	movw	r24, r22
    48f0:	9e 83       	std	Y+6, r25	; 0x06
    48f2:	8d 83       	std	Y+5, r24	; 0x05
    48f4:	0f c0       	rjmp	.+30     	; 0x4914 <EEPROM_enuWriteData+0x130>
    48f6:	88 ec       	ldi	r24, 0xC8	; 200
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	9c 83       	std	Y+4, r25	; 0x04
    48fc:	8b 83       	std	Y+3, r24	; 0x03
    48fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4900:	9c 81       	ldd	r25, Y+4	; 0x04
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	f1 f7       	brne	.-4      	; 0x4902 <EEPROM_enuWriteData+0x11e>
    4906:	9c 83       	std	Y+4, r25	; 0x04
    4908:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    490a:	8d 81       	ldd	r24, Y+5	; 0x05
    490c:	9e 81       	ldd	r25, Y+6	; 0x06
    490e:	01 97       	sbiw	r24, 0x01	; 1
    4910:	9e 83       	std	Y+6, r25	; 0x06
    4912:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4914:	8d 81       	ldd	r24, Y+5	; 0x05
    4916:	9e 81       	ldd	r25, Y+6	; 0x06
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	69 f7       	brne	.-38     	; 0x48f6 <EEPROM_enuWriteData+0x112>
    491c:	14 c0       	rjmp	.+40     	; 0x4946 <EEPROM_enuWriteData+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    491e:	6f 81       	ldd	r22, Y+7	; 0x07
    4920:	78 85       	ldd	r23, Y+8	; 0x08
    4922:	89 85       	ldd	r24, Y+9	; 0x09
    4924:	9a 85       	ldd	r25, Y+10	; 0x0a
    4926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    492a:	dc 01       	movw	r26, r24
    492c:	cb 01       	movw	r24, r22
    492e:	9e 83       	std	Y+6, r25	; 0x06
    4930:	8d 83       	std	Y+5, r24	; 0x05
    4932:	8d 81       	ldd	r24, Y+5	; 0x05
    4934:	9e 81       	ldd	r25, Y+6	; 0x06
    4936:	9a 83       	std	Y+2, r25	; 0x02
    4938:	89 83       	std	Y+1, r24	; 0x01
    493a:	89 81       	ldd	r24, Y+1	; 0x01
    493c:	9a 81       	ldd	r25, Y+2	; 0x02
    493e:	01 97       	sbiw	r24, 0x01	; 1
    4940:	f1 f7       	brne	.-4      	; 0x493e <EEPROM_enuWriteData+0x15a>
    4942:	9a 83       	std	Y+2, r25	; 0x02
    4944:	89 83       	std	Y+1, r24	; 0x01

    }

    // Small delay to ensure data is written
    _delay_ms(10);
    Local_enuErrorState = ERROR_STATUS_OK;
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	88 8b       	std	Y+16, r24	; 0x10
    return Local_enuErrorState;
    494a:	88 89       	ldd	r24, Y+16	; 0x10
}
    494c:	62 96       	adiw	r28, 0x12	; 18
    494e:	0f b6       	in	r0, 0x3f	; 63
    4950:	f8 94       	cli
    4952:	de bf       	out	0x3e, r29	; 62
    4954:	0f be       	out	0x3f, r0	; 63
    4956:	cd bf       	out	0x3d, r28	; 61
    4958:	cf 91       	pop	r28
    495a:	df 91       	pop	r29
    495c:	08 95       	ret

0000495e <EEPROM_enuReadData>:


ErrorStatus_t EEPROM_enuReadData(EEPROM_Input_t* eepromInstance) {
    495e:	df 93       	push	r29
    4960:	cf 93       	push	r28
    4962:	00 d0       	rcall	.+0      	; 0x4964 <EEPROM_enuReadData+0x6>
    4964:	00 d0       	rcall	.+0      	; 0x4966 <EEPROM_enuReadData+0x8>
    4966:	cd b7       	in	r28, 0x3d	; 61
    4968:	de b7       	in	r29, 0x3e	; 62
    496a:	9c 83       	std	Y+4, r25	; 0x04
    496c:	8b 83       	std	Y+3, r24	; 0x03
    ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    496e:	1a 82       	std	Y+2, r1	; 0x02

    eepromInstance->data = 0;
    4970:	eb 81       	ldd	r30, Y+3	; 0x03
    4972:	fc 81       	ldd	r31, Y+4	; 0x04
    4974:	11 82       	std	Z+1, r1	; 0x01

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 3) | (eepromInstance->A1 << 2) | (eepromInstance->A0);

	#elif(EEPROM_TYPE == EEPROM_NM24C08 || EEPROM_TYPE == EEPROM_NM24C08F )

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 2) | (eepromInstance->A1 << 1) | (eepromInstance->A0);
    4976:	eb 81       	ldd	r30, Y+3	; 0x03
    4978:	fc 81       	ldd	r31, Y+4	; 0x04
    497a:	82 81       	ldd	r24, Z+2	; 0x02
    497c:	81 70       	andi	r24, 0x01	; 1
    497e:	88 2f       	mov	r24, r24
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	88 0f       	add	r24, r24
    4984:	99 1f       	adc	r25, r25
    4986:	88 0f       	add	r24, r24
    4988:	99 1f       	adc	r25, r25
    498a:	28 2f       	mov	r18, r24
    498c:	20 6a       	ori	r18, 0xA0	; 160
    498e:	eb 81       	ldd	r30, Y+3	; 0x03
    4990:	fc 81       	ldd	r31, Y+4	; 0x04
    4992:	82 81       	ldd	r24, Z+2	; 0x02
    4994:	86 95       	lsr	r24
    4996:	81 70       	andi	r24, 0x01	; 1
    4998:	88 2f       	mov	r24, r24
    499a:	90 e0       	ldi	r25, 0x00	; 0
    499c:	88 0f       	add	r24, r24
    499e:	99 1f       	adc	r25, r25
    49a0:	92 2f       	mov	r25, r18
    49a2:	98 2b       	or	r25, r24
    49a4:	eb 81       	ldd	r30, Y+3	; 0x03
    49a6:	fc 81       	ldd	r31, Y+4	; 0x04
    49a8:	82 81       	ldd	r24, Z+2	; 0x02
    49aa:	86 95       	lsr	r24
    49ac:	86 95       	lsr	r24
    49ae:	81 70       	andi	r24, 0x01	; 1
    49b0:	89 2b       	or	r24, r25
    49b2:	89 83       	std	Y+1, r24	; 0x01
	#if( EEPROM_TYPE == EEPROM_NM24C09 || EEPROM_TYPE == EEPROM_NM24C09F )
		uint8_t Local_u8Address = (0xA0) | (EEPROM_A2_STATE << 2);
	#endif

	// Send start condition
    if( TWI_enuStartCondition() == TWI_STATUS_OK){
    49b4:	0e 94 8b 08 	call	0x1116	; 0x1116 <TWI_enuStartCondition>
    49b8:	81 30       	cpi	r24, 0x01	; 1
    49ba:	a9 f4       	brne	.+42     	; 0x49e6 <EEPROM_enuReadData+0x88>

		// Send EEPROM address with write operation
		TWI_enuWriteData(Local_u8Address);
    49bc:	89 81       	ldd	r24, Y+1	; 0x01
    49be:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Send memory address within EEPROM
		TWI_enuWriteData(eepromInstance->address);
    49c2:	eb 81       	ldd	r30, Y+3	; 0x03
    49c4:	fc 81       	ldd	r31, Y+4	; 0x04
    49c6:	80 81       	ld	r24, Z
    49c8:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Send repeated start condition
		TWI_enuStartCondition();
    49cc:	0e 94 8b 08 	call	0x1116	; 0x1116 <TWI_enuStartCondition>

		// Send EEPROM address with read operation
		TWI_enuWriteData(Local_u8Address | TWI_ReadOperation);
    49d0:	89 81       	ldd	r24, Y+1	; 0x01
    49d2:	81 60       	ori	r24, 0x01	; 1
    49d4:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Read data from EEPROM
		TWI_enuReadData(&(eepromInstance->data));
    49d8:	8b 81       	ldd	r24, Y+3	; 0x03
    49da:	9c 81       	ldd	r25, Y+4	; 0x04
    49dc:	01 96       	adiw	r24, 0x01	; 1
    49de:	0e 94 45 09 	call	0x128a	; 0x128a <TWI_enuReadData>

		// Send stop condition
		TWI_enuStopCondition();
    49e2:	0e 94 cb 08 	call	0x1196	; 0x1196 <TWI_enuStopCondition>

    }

    Local_enuErrorState = ERROR_STATUS_OK;
    49e6:	81 e0       	ldi	r24, 0x01	; 1
    49e8:	8a 83       	std	Y+2, r24	; 0x02
    return Local_enuErrorState;
    49ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    49ec:	0f 90       	pop	r0
    49ee:	0f 90       	pop	r0
    49f0:	0f 90       	pop	r0
    49f2:	0f 90       	pop	r0
    49f4:	cf 91       	pop	r28
    49f6:	df 91       	pop	r29
    49f8:	08 95       	ret

000049fa <EEPROM_WriteDataSequence>:



void EEPROM_WriteDataSequence(EEPROM_Input_t* eepromInstance, const uint8_t *dataBuffer, uint8_t dataLength, uint8_t flag, uint8_t startAddress) {
    49fa:	0f 93       	push	r16
    49fc:	df 93       	push	r29
    49fe:	cf 93       	push	r28
    4a00:	cd b7       	in	r28, 0x3d	; 61
    4a02:	de b7       	in	r29, 0x3e	; 62
    4a04:	28 97       	sbiw	r28, 0x08	; 8
    4a06:	0f b6       	in	r0, 0x3f	; 63
    4a08:	f8 94       	cli
    4a0a:	de bf       	out	0x3e, r29	; 62
    4a0c:	0f be       	out	0x3f, r0	; 63
    4a0e:	cd bf       	out	0x3d, r28	; 61
    4a10:	9b 83       	std	Y+3, r25	; 0x03
    4a12:	8a 83       	std	Y+2, r24	; 0x02
    4a14:	7d 83       	std	Y+5, r23	; 0x05
    4a16:	6c 83       	std	Y+4, r22	; 0x04
    4a18:	4e 83       	std	Y+6, r20	; 0x06
    4a1a:	2f 83       	std	Y+7, r18	; 0x07
    4a1c:	08 87       	std	Y+8, r16	; 0x08
    eepromInstance->address = startAddress;  // Set the EEPROM address to the specified start address
    4a1e:	ea 81       	ldd	r30, Y+2	; 0x02
    4a20:	fb 81       	ldd	r31, Y+3	; 0x03
    4a22:	88 85       	ldd	r24, Y+8	; 0x08
    4a24:	80 83       	st	Z, r24

    for(uint8_t i = 0; i < dataLength; i++) {
    4a26:	19 82       	std	Y+1, r1	; 0x01
    4a28:	1a c0       	rjmp	.+52     	; 0x4a5e <EEPROM_WriteDataSequence+0x64>
        eepromInstance->data = dataBuffer[i];
    4a2a:	89 81       	ldd	r24, Y+1	; 0x01
    4a2c:	28 2f       	mov	r18, r24
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	8c 81       	ldd	r24, Y+4	; 0x04
    4a32:	9d 81       	ldd	r25, Y+5	; 0x05
    4a34:	fc 01       	movw	r30, r24
    4a36:	e2 0f       	add	r30, r18
    4a38:	f3 1f       	adc	r31, r19
    4a3a:	80 81       	ld	r24, Z
    4a3c:	ea 81       	ldd	r30, Y+2	; 0x02
    4a3e:	fb 81       	ldd	r31, Y+3	; 0x03
    4a40:	81 83       	std	Z+1, r24	; 0x01
        EEPROM_enuWriteData(eepromInstance);
    4a42:	8a 81       	ldd	r24, Y+2	; 0x02
    4a44:	9b 81       	ldd	r25, Y+3	; 0x03
    4a46:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <EEPROM_enuWriteData>
        eepromInstance->address++;  // Move to the next address
    4a4a:	ea 81       	ldd	r30, Y+2	; 0x02
    4a4c:	fb 81       	ldd	r31, Y+3	; 0x03
    4a4e:	80 81       	ld	r24, Z
    4a50:	8f 5f       	subi	r24, 0xFF	; 255
    4a52:	ea 81       	ldd	r30, Y+2	; 0x02
    4a54:	fb 81       	ldd	r31, Y+3	; 0x03
    4a56:	80 83       	st	Z, r24


void EEPROM_WriteDataSequence(EEPROM_Input_t* eepromInstance, const uint8_t *dataBuffer, uint8_t dataLength, uint8_t flag, uint8_t startAddress) {
    eepromInstance->address = startAddress;  // Set the EEPROM address to the specified start address

    for(uint8_t i = 0; i < dataLength; i++) {
    4a58:	89 81       	ldd	r24, Y+1	; 0x01
    4a5a:	8f 5f       	subi	r24, 0xFF	; 255
    4a5c:	89 83       	std	Y+1, r24	; 0x01
    4a5e:	99 81       	ldd	r25, Y+1	; 0x01
    4a60:	8e 81       	ldd	r24, Y+6	; 0x06
    4a62:	98 17       	cp	r25, r24
    4a64:	10 f3       	brcs	.-60     	; 0x4a2a <EEPROM_WriteDataSequence+0x30>
        eepromInstance->data = dataBuffer[i];
        EEPROM_enuWriteData(eepromInstance);
        eepromInstance->address++;  // Move to the next address
    }

    eepromInstance->data = flag;  // Write the flag to indicate the end of the data
    4a66:	ea 81       	ldd	r30, Y+2	; 0x02
    4a68:	fb 81       	ldd	r31, Y+3	; 0x03
    4a6a:	8f 81       	ldd	r24, Y+7	; 0x07
    4a6c:	81 83       	std	Z+1, r24	; 0x01
    EEPROM_enuWriteData(eepromInstance);
    4a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a70:	9b 81       	ldd	r25, Y+3	; 0x03
    4a72:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <EEPROM_enuWriteData>
}
    4a76:	28 96       	adiw	r28, 0x08	; 8
    4a78:	0f b6       	in	r0, 0x3f	; 63
    4a7a:	f8 94       	cli
    4a7c:	de bf       	out	0x3e, r29	; 62
    4a7e:	0f be       	out	0x3f, r0	; 63
    4a80:	cd bf       	out	0x3d, r28	; 61
    4a82:	cf 91       	pop	r28
    4a84:	df 91       	pop	r29
    4a86:	0f 91       	pop	r16
    4a88:	08 95       	ret

00004a8a <EEPROM_SearchForFlag>:

uint8_t EEPROM_SearchForFlag(EEPROM_Input_t eepromInstance, uint8_t flag, uint8_t startAddress, uint8_t dataLength){
    4a8a:	0f 93       	push	r16
    4a8c:	df 93       	push	r29
    4a8e:	cf 93       	push	r28
    4a90:	cd b7       	in	r28, 0x3d	; 61
    4a92:	de b7       	in	r29, 0x3e	; 62
    4a94:	27 97       	sbiw	r28, 0x07	; 7
    4a96:	0f b6       	in	r0, 0x3f	; 63
    4a98:	f8 94       	cli
    4a9a:	de bf       	out	0x3e, r29	; 62
    4a9c:	0f be       	out	0x3f, r0	; 63
    4a9e:	cd bf       	out	0x3d, r28	; 61
    4aa0:	69 83       	std	Y+1, r22	; 0x01
    4aa2:	7a 83       	std	Y+2, r23	; 0x02
    4aa4:	8b 83       	std	Y+3, r24	; 0x03
    4aa6:	4c 83       	std	Y+4, r20	; 0x04
    4aa8:	2d 83       	std	Y+5, r18	; 0x05
    4aaa:	0e 83       	std	Y+6, r16	; 0x06

    // Set address to start searching from
	eepromInstance.address = startAddress + dataLength;
    4aac:	9d 81       	ldd	r25, Y+5	; 0x05
    4aae:	8e 81       	ldd	r24, Y+6	; 0x06
    4ab0:	89 0f       	add	r24, r25
    4ab2:	89 83       	std	Y+1, r24	; 0x01

    // Read the data at the address where the flag is expected
    EEPROM_enuReadData(&eepromInstance);
    4ab4:	ce 01       	movw	r24, r28
    4ab6:	01 96       	adiw	r24, 0x01	; 1
    4ab8:	0e 94 af 24 	call	0x495e	; 0x495e <EEPROM_enuReadData>

    // Check if the read data matches the flag
    if (eepromInstance.data == flag) {
    4abc:	9a 81       	ldd	r25, Y+2	; 0x02
    4abe:	8c 81       	ldd	r24, Y+4	; 0x04
    4ac0:	98 17       	cp	r25, r24
    4ac2:	19 f4       	brne	.+6      	; 0x4aca <EEPROM_SearchForFlag+0x40>
        return 1;  // Flag found
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	8f 83       	std	Y+7, r24	; 0x07
    4ac8:	01 c0       	rjmp	.+2      	; 0x4acc <EEPROM_SearchForFlag+0x42>
    }

    return 0;  // Flag not found
    4aca:	1f 82       	std	Y+7, r1	; 0x07
    4acc:	8f 81       	ldd	r24, Y+7	; 0x07

}
    4ace:	27 96       	adiw	r28, 0x07	; 7
    4ad0:	0f b6       	in	r0, 0x3f	; 63
    4ad2:	f8 94       	cli
    4ad4:	de bf       	out	0x3e, r29	; 62
    4ad6:	0f be       	out	0x3f, r0	; 63
    4ad8:	cd bf       	out	0x3d, r28	; 61
    4ada:	cf 91       	pop	r28
    4adc:	df 91       	pop	r29
    4ade:	0f 91       	pop	r16
    4ae0:	08 95       	ret

00004ae2 <EEPROM_Format>:


void EEPROM_Format(EEPROM_Input_t* eepromInstance) {
    4ae2:	df 93       	push	r29
    4ae4:	cf 93       	push	r28
    4ae6:	cd b7       	in	r28, 0x3d	; 61
    4ae8:	de b7       	in	r29, 0x3e	; 62
    4aea:	28 97       	sbiw	r28, 0x08	; 8
    4aec:	0f b6       	in	r0, 0x3f	; 63
    4aee:	f8 94       	cli
    4af0:	de bf       	out	0x3e, r29	; 62
    4af2:	0f be       	out	0x3f, r0	; 63
    4af4:	cd bf       	out	0x3d, r28	; 61
    4af6:	98 87       	std	Y+8, r25	; 0x08
    4af8:	8f 83       	std	Y+7, r24	; 0x07
    // Define the starting address and the end address
    uint16_t startAddress = 0x00; // Starting address of EEPROM
    4afa:	1e 82       	std	Y+6, r1	; 0x06
    4afc:	1d 82       	std	Y+5, r1	; 0x05
    uint16_t endAddress = 0xFF;   // Ending address of EEPROM (example)
    4afe:	8f ef       	ldi	r24, 0xFF	; 255
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	9c 83       	std	Y+4, r25	; 0x04
    4b04:	8b 83       	std	Y+3, r24	; 0x03

    // Set the EEPROM address to the start address
    eepromInstance->address = startAddress;
    4b06:	8d 81       	ldd	r24, Y+5	; 0x05
    4b08:	ef 81       	ldd	r30, Y+7	; 0x07
    4b0a:	f8 85       	ldd	r31, Y+8	; 0x08
    4b0c:	80 83       	st	Z, r24

    // Write the default value (e.g., 0x00) to each address in EEPROM
    for (uint16_t address = startAddress; address <= endAddress; address++) {
    4b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b10:	9e 81       	ldd	r25, Y+6	; 0x06
    4b12:	9a 83       	std	Y+2, r25	; 0x02
    4b14:	89 83       	std	Y+1, r24	; 0x01
    4b16:	13 c0       	rjmp	.+38     	; 0x4b3e <EEPROM_Format+0x5c>
        eepromInstance->data = 0x00;  // Default value
    4b18:	ef 81       	ldd	r30, Y+7	; 0x07
    4b1a:	f8 85       	ldd	r31, Y+8	; 0x08
    4b1c:	11 82       	std	Z+1, r1	; 0x01
        EEPROM_enuWriteData(eepromInstance);  // Write to EEPROM
    4b1e:	8f 81       	ldd	r24, Y+7	; 0x07
    4b20:	98 85       	ldd	r25, Y+8	; 0x08
    4b22:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <EEPROM_enuWriteData>
        eepromInstance->address++;  // Move to the next address
    4b26:	ef 81       	ldd	r30, Y+7	; 0x07
    4b28:	f8 85       	ldd	r31, Y+8	; 0x08
    4b2a:	80 81       	ld	r24, Z
    4b2c:	8f 5f       	subi	r24, 0xFF	; 255
    4b2e:	ef 81       	ldd	r30, Y+7	; 0x07
    4b30:	f8 85       	ldd	r31, Y+8	; 0x08
    4b32:	80 83       	st	Z, r24

    // Set the EEPROM address to the start address
    eepromInstance->address = startAddress;

    // Write the default value (e.g., 0x00) to each address in EEPROM
    for (uint16_t address = startAddress; address <= endAddress; address++) {
    4b34:	89 81       	ldd	r24, Y+1	; 0x01
    4b36:	9a 81       	ldd	r25, Y+2	; 0x02
    4b38:	01 96       	adiw	r24, 0x01	; 1
    4b3a:	9a 83       	std	Y+2, r25	; 0x02
    4b3c:	89 83       	std	Y+1, r24	; 0x01
    4b3e:	29 81       	ldd	r18, Y+1	; 0x01
    4b40:	3a 81       	ldd	r19, Y+2	; 0x02
    4b42:	8b 81       	ldd	r24, Y+3	; 0x03
    4b44:	9c 81       	ldd	r25, Y+4	; 0x04
    4b46:	82 17       	cp	r24, r18
    4b48:	93 07       	cpc	r25, r19
    4b4a:	30 f7       	brcc	.-52     	; 0x4b18 <EEPROM_Format+0x36>
        eepromInstance->data = 0x00;  // Default value
        EEPROM_enuWriteData(eepromInstance);  // Write to EEPROM
        eepromInstance->address++;  // Move to the next address
    }
}
    4b4c:	28 96       	adiw	r28, 0x08	; 8
    4b4e:	0f b6       	in	r0, 0x3f	; 63
    4b50:	f8 94       	cli
    4b52:	de bf       	out	0x3e, r29	; 62
    4b54:	0f be       	out	0x3f, r0	; 63
    4b56:	cd bf       	out	0x3d, r28	; 61
    4b58:	cf 91       	pop	r28
    4b5a:	df 91       	pop	r29
    4b5c:	08 95       	ret

00004b5e <Buzzer_voidInit>:
#include "../../MCAL/DIO/DIO_interface.h"
/****************************************************************/



void Buzzer_voidInit(Buzzer_t *Copy_Buzzer){
    4b5e:	df 93       	push	r29
    4b60:	cf 93       	push	r28
    4b62:	00 d0       	rcall	.+0      	; 0x4b64 <Buzzer_voidInit+0x6>
    4b64:	cd b7       	in	r28, 0x3d	; 61
    4b66:	de b7       	in	r29, 0x3e	; 62
    4b68:	9a 83       	std	Y+2, r25	; 0x02
    4b6a:	89 83       	std	Y+1, r24	; 0x01
	 DIO_enuSetPinDirection(Copy_Buzzer->PortID, Copy_Buzzer->PortID, DIO_u8OUTPUT);
    4b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    4b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    4b70:	80 81       	ld	r24, Z
    4b72:	e9 81       	ldd	r30, Y+1	; 0x01
    4b74:	fa 81       	ldd	r31, Y+2	; 0x02
    4b76:	90 81       	ld	r25, Z
    4b78:	69 2f       	mov	r22, r25
    4b7a:	41 e0       	ldi	r20, 0x01	; 1
    4b7c:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <DIO_enuSetPinDirection>
}
    4b80:	0f 90       	pop	r0
    4b82:	0f 90       	pop	r0
    4b84:	cf 91       	pop	r28
    4b86:	df 91       	pop	r29
    4b88:	08 95       	ret

00004b8a <Buzzer_voidON>:

void Buzzer_voidON(Buzzer_t *Copy_Buzzer){
    4b8a:	df 93       	push	r29
    4b8c:	cf 93       	push	r28
    4b8e:	00 d0       	rcall	.+0      	; 0x4b90 <Buzzer_voidON+0x6>
    4b90:	cd b7       	in	r28, 0x3d	; 61
    4b92:	de b7       	in	r29, 0x3e	; 62
    4b94:	9a 83       	std	Y+2, r25	; 0x02
    4b96:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID, DIO_u8HIGH);
    4b98:	e9 81       	ldd	r30, Y+1	; 0x01
    4b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    4b9c:	80 81       	ld	r24, Z
    4b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    4ba0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ba2:	91 81       	ldd	r25, Z+1	; 0x01
    4ba4:	69 2f       	mov	r22, r25
    4ba6:	41 e0       	ldi	r20, 0x01	; 1
    4ba8:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
}
    4bac:	0f 90       	pop	r0
    4bae:	0f 90       	pop	r0
    4bb0:	cf 91       	pop	r28
    4bb2:	df 91       	pop	r29
    4bb4:	08 95       	ret

00004bb6 <Buzzer_voidOFF>:

void Buzzer_voidOFF(Buzzer_t *Copy_Buzzer){
    4bb6:	df 93       	push	r29
    4bb8:	cf 93       	push	r28
    4bba:	00 d0       	rcall	.+0      	; 0x4bbc <Buzzer_voidOFF+0x6>
    4bbc:	cd b7       	in	r28, 0x3d	; 61
    4bbe:	de b7       	in	r29, 0x3e	; 62
    4bc0:	9a 83       	std	Y+2, r25	; 0x02
    4bc2:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID, DIO_u8LOW);
    4bc4:	e9 81       	ldd	r30, Y+1	; 0x01
    4bc6:	fa 81       	ldd	r31, Y+2	; 0x02
    4bc8:	80 81       	ld	r24, Z
    4bca:	e9 81       	ldd	r30, Y+1	; 0x01
    4bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    4bce:	91 81       	ldd	r25, Z+1	; 0x01
    4bd0:	69 2f       	mov	r22, r25
    4bd2:	40 e0       	ldi	r20, 0x00	; 0
    4bd4:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <DIO_enuSetPinValue>
}
    4bd8:	0f 90       	pop	r0
    4bda:	0f 90       	pop	r0
    4bdc:	cf 91       	pop	r28
    4bde:	df 91       	pop	r29
    4be0:	08 95       	ret

00004be2 <Buzzer_voidTOGGLE>:

void Buzzer_voidTOGGLE(Buzzer_t *Copy_Buzzer){
    4be2:	df 93       	push	r29
    4be4:	cf 93       	push	r28
    4be6:	00 d0       	rcall	.+0      	; 0x4be8 <Buzzer_voidTOGGLE+0x6>
    4be8:	cd b7       	in	r28, 0x3d	; 61
    4bea:	de b7       	in	r29, 0x3e	; 62
    4bec:	9a 83       	std	Y+2, r25	; 0x02
    4bee:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuTogglePinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID);
    4bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    4bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    4bf4:	80 81       	ld	r24, Z
    4bf6:	e9 81       	ldd	r30, Y+1	; 0x01
    4bf8:	fa 81       	ldd	r31, Y+2	; 0x02
    4bfa:	91 81       	ldd	r25, Z+1	; 0x01
    4bfc:	69 2f       	mov	r22, r25
    4bfe:	0e 94 f7 18 	call	0x31ee	; 0x31ee <DIO_enuTogglePinValue>
}
    4c02:	0f 90       	pop	r0
    4c04:	0f 90       	pop	r0
    4c06:	cf 91       	pop	r28
    4c08:	df 91       	pop	r29
    4c0a:	08 95       	ret

00004c0c <main>:
#include "MCAL/DIO/DIO_interface.h"
#include "MCAL/TIMER/TIMER_interface.h"


int main(){
    4c0c:	df 93       	push	r29
    4c0e:	cf 93       	push	r28
    4c10:	cd b7       	in	r28, 0x3d	; 61
    4c12:	de b7       	in	r29, 0x3e	; 62
	TIMER1_voidInit();
    4c14:	0e 94 b9 0a 	call	0x1572	; 0x1572 <TIMER1_voidInit>

	TIMER1_voidSetPWM_16bit(6.25, 50);
    4c18:	60 e0       	ldi	r22, 0x00	; 0
    4c1a:	70 e0       	ldi	r23, 0x00	; 0
    4c1c:	88 ec       	ldi	r24, 0xC8	; 200
    4c1e:	90 e4       	ldi	r25, 0x40	; 64
    4c20:	22 e3       	ldi	r18, 0x32	; 50
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	40 e0       	ldi	r20, 0x00	; 0
    4c26:	50 e0       	ldi	r21, 0x00	; 0
    4c28:	0e 94 b5 0c 	call	0x196a	; 0x196a <TIMER1_voidSetPWM_16bit>
    4c2c:	ff cf       	rjmp	.-2      	; 0x4c2c <main+0x20>

00004c2e <__mulsi3>:
    4c2e:	62 9f       	mul	r22, r18
    4c30:	d0 01       	movw	r26, r0
    4c32:	73 9f       	mul	r23, r19
    4c34:	f0 01       	movw	r30, r0
    4c36:	82 9f       	mul	r24, r18
    4c38:	e0 0d       	add	r30, r0
    4c3a:	f1 1d       	adc	r31, r1
    4c3c:	64 9f       	mul	r22, r20
    4c3e:	e0 0d       	add	r30, r0
    4c40:	f1 1d       	adc	r31, r1
    4c42:	92 9f       	mul	r25, r18
    4c44:	f0 0d       	add	r31, r0
    4c46:	83 9f       	mul	r24, r19
    4c48:	f0 0d       	add	r31, r0
    4c4a:	74 9f       	mul	r23, r20
    4c4c:	f0 0d       	add	r31, r0
    4c4e:	65 9f       	mul	r22, r21
    4c50:	f0 0d       	add	r31, r0
    4c52:	99 27       	eor	r25, r25
    4c54:	72 9f       	mul	r23, r18
    4c56:	b0 0d       	add	r27, r0
    4c58:	e1 1d       	adc	r30, r1
    4c5a:	f9 1f       	adc	r31, r25
    4c5c:	63 9f       	mul	r22, r19
    4c5e:	b0 0d       	add	r27, r0
    4c60:	e1 1d       	adc	r30, r1
    4c62:	f9 1f       	adc	r31, r25
    4c64:	bd 01       	movw	r22, r26
    4c66:	cf 01       	movw	r24, r30
    4c68:	11 24       	eor	r1, r1
    4c6a:	08 95       	ret

00004c6c <__udivmodhi4>:
    4c6c:	aa 1b       	sub	r26, r26
    4c6e:	bb 1b       	sub	r27, r27
    4c70:	51 e1       	ldi	r21, 0x11	; 17
    4c72:	07 c0       	rjmp	.+14     	; 0x4c82 <__udivmodhi4_ep>

00004c74 <__udivmodhi4_loop>:
    4c74:	aa 1f       	adc	r26, r26
    4c76:	bb 1f       	adc	r27, r27
    4c78:	a6 17       	cp	r26, r22
    4c7a:	b7 07       	cpc	r27, r23
    4c7c:	10 f0       	brcs	.+4      	; 0x4c82 <__udivmodhi4_ep>
    4c7e:	a6 1b       	sub	r26, r22
    4c80:	b7 0b       	sbc	r27, r23

00004c82 <__udivmodhi4_ep>:
    4c82:	88 1f       	adc	r24, r24
    4c84:	99 1f       	adc	r25, r25
    4c86:	5a 95       	dec	r21
    4c88:	a9 f7       	brne	.-22     	; 0x4c74 <__udivmodhi4_loop>
    4c8a:	80 95       	com	r24
    4c8c:	90 95       	com	r25
    4c8e:	bc 01       	movw	r22, r24
    4c90:	cd 01       	movw	r24, r26
    4c92:	08 95       	ret

00004c94 <__udivmodsi4>:
    4c94:	a1 e2       	ldi	r26, 0x21	; 33
    4c96:	1a 2e       	mov	r1, r26
    4c98:	aa 1b       	sub	r26, r26
    4c9a:	bb 1b       	sub	r27, r27
    4c9c:	fd 01       	movw	r30, r26
    4c9e:	0d c0       	rjmp	.+26     	; 0x4cba <__udivmodsi4_ep>

00004ca0 <__udivmodsi4_loop>:
    4ca0:	aa 1f       	adc	r26, r26
    4ca2:	bb 1f       	adc	r27, r27
    4ca4:	ee 1f       	adc	r30, r30
    4ca6:	ff 1f       	adc	r31, r31
    4ca8:	a2 17       	cp	r26, r18
    4caa:	b3 07       	cpc	r27, r19
    4cac:	e4 07       	cpc	r30, r20
    4cae:	f5 07       	cpc	r31, r21
    4cb0:	20 f0       	brcs	.+8      	; 0x4cba <__udivmodsi4_ep>
    4cb2:	a2 1b       	sub	r26, r18
    4cb4:	b3 0b       	sbc	r27, r19
    4cb6:	e4 0b       	sbc	r30, r20
    4cb8:	f5 0b       	sbc	r31, r21

00004cba <__udivmodsi4_ep>:
    4cba:	66 1f       	adc	r22, r22
    4cbc:	77 1f       	adc	r23, r23
    4cbe:	88 1f       	adc	r24, r24
    4cc0:	99 1f       	adc	r25, r25
    4cc2:	1a 94       	dec	r1
    4cc4:	69 f7       	brne	.-38     	; 0x4ca0 <__udivmodsi4_loop>
    4cc6:	60 95       	com	r22
    4cc8:	70 95       	com	r23
    4cca:	80 95       	com	r24
    4ccc:	90 95       	com	r25
    4cce:	9b 01       	movw	r18, r22
    4cd0:	ac 01       	movw	r20, r24
    4cd2:	bd 01       	movw	r22, r26
    4cd4:	cf 01       	movw	r24, r30
    4cd6:	08 95       	ret

00004cd8 <__divmodsi4>:
    4cd8:	97 fb       	bst	r25, 7
    4cda:	09 2e       	mov	r0, r25
    4cdc:	05 26       	eor	r0, r21
    4cde:	0e d0       	rcall	.+28     	; 0x4cfc <__divmodsi4_neg1>
    4ce0:	57 fd       	sbrc	r21, 7
    4ce2:	04 d0       	rcall	.+8      	; 0x4cec <__divmodsi4_neg2>
    4ce4:	d7 df       	rcall	.-82     	; 0x4c94 <__udivmodsi4>
    4ce6:	0a d0       	rcall	.+20     	; 0x4cfc <__divmodsi4_neg1>
    4ce8:	00 1c       	adc	r0, r0
    4cea:	38 f4       	brcc	.+14     	; 0x4cfa <__divmodsi4_exit>

00004cec <__divmodsi4_neg2>:
    4cec:	50 95       	com	r21
    4cee:	40 95       	com	r20
    4cf0:	30 95       	com	r19
    4cf2:	21 95       	neg	r18
    4cf4:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf6:	4f 4f       	sbci	r20, 0xFF	; 255
    4cf8:	5f 4f       	sbci	r21, 0xFF	; 255

00004cfa <__divmodsi4_exit>:
    4cfa:	08 95       	ret

00004cfc <__divmodsi4_neg1>:
    4cfc:	f6 f7       	brtc	.-4      	; 0x4cfa <__divmodsi4_exit>
    4cfe:	90 95       	com	r25
    4d00:	80 95       	com	r24
    4d02:	70 95       	com	r23
    4d04:	61 95       	neg	r22
    4d06:	7f 4f       	sbci	r23, 0xFF	; 255
    4d08:	8f 4f       	sbci	r24, 0xFF	; 255
    4d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d0c:	08 95       	ret

00004d0e <__prologue_saves__>:
    4d0e:	2f 92       	push	r2
    4d10:	3f 92       	push	r3
    4d12:	4f 92       	push	r4
    4d14:	5f 92       	push	r5
    4d16:	6f 92       	push	r6
    4d18:	7f 92       	push	r7
    4d1a:	8f 92       	push	r8
    4d1c:	9f 92       	push	r9
    4d1e:	af 92       	push	r10
    4d20:	bf 92       	push	r11
    4d22:	cf 92       	push	r12
    4d24:	df 92       	push	r13
    4d26:	ef 92       	push	r14
    4d28:	ff 92       	push	r15
    4d2a:	0f 93       	push	r16
    4d2c:	1f 93       	push	r17
    4d2e:	cf 93       	push	r28
    4d30:	df 93       	push	r29
    4d32:	cd b7       	in	r28, 0x3d	; 61
    4d34:	de b7       	in	r29, 0x3e	; 62
    4d36:	ca 1b       	sub	r28, r26
    4d38:	db 0b       	sbc	r29, r27
    4d3a:	0f b6       	in	r0, 0x3f	; 63
    4d3c:	f8 94       	cli
    4d3e:	de bf       	out	0x3e, r29	; 62
    4d40:	0f be       	out	0x3f, r0	; 63
    4d42:	cd bf       	out	0x3d, r28	; 61
    4d44:	09 94       	ijmp

00004d46 <__epilogue_restores__>:
    4d46:	2a 88       	ldd	r2, Y+18	; 0x12
    4d48:	39 88       	ldd	r3, Y+17	; 0x11
    4d4a:	48 88       	ldd	r4, Y+16	; 0x10
    4d4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d50:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d52:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d54:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d56:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d58:	b9 84       	ldd	r11, Y+9	; 0x09
    4d5a:	c8 84       	ldd	r12, Y+8	; 0x08
    4d5c:	df 80       	ldd	r13, Y+7	; 0x07
    4d5e:	ee 80       	ldd	r14, Y+6	; 0x06
    4d60:	fd 80       	ldd	r15, Y+5	; 0x05
    4d62:	0c 81       	ldd	r16, Y+4	; 0x04
    4d64:	1b 81       	ldd	r17, Y+3	; 0x03
    4d66:	aa 81       	ldd	r26, Y+2	; 0x02
    4d68:	b9 81       	ldd	r27, Y+1	; 0x01
    4d6a:	ce 0f       	add	r28, r30
    4d6c:	d1 1d       	adc	r29, r1
    4d6e:	0f b6       	in	r0, 0x3f	; 63
    4d70:	f8 94       	cli
    4d72:	de bf       	out	0x3e, r29	; 62
    4d74:	0f be       	out	0x3f, r0	; 63
    4d76:	cd bf       	out	0x3d, r28	; 61
    4d78:	ed 01       	movw	r28, r26
    4d7a:	08 95       	ret

00004d7c <round>:
    4d7c:	50 d0       	rcall	.+160    	; 0x4e1e <__fp_splitA>
    4d7e:	e0 f0       	brcs	.+56     	; 0x4db8 <round+0x3c>
    4d80:	9e 37       	cpi	r25, 0x7E	; 126
    4d82:	d8 f0       	brcs	.+54     	; 0x4dba <round+0x3e>
    4d84:	96 39       	cpi	r25, 0x96	; 150
    4d86:	b8 f4       	brcc	.+46     	; 0x4db6 <round+0x3a>
    4d88:	9e 38       	cpi	r25, 0x8E	; 142
    4d8a:	48 f4       	brcc	.+18     	; 0x4d9e <round+0x22>
    4d8c:	67 2f       	mov	r22, r23
    4d8e:	78 2f       	mov	r23, r24
    4d90:	88 27       	eor	r24, r24
    4d92:	98 5f       	subi	r25, 0xF8	; 248
    4d94:	f9 cf       	rjmp	.-14     	; 0x4d88 <round+0xc>
    4d96:	86 95       	lsr	r24
    4d98:	77 95       	ror	r23
    4d9a:	67 95       	ror	r22
    4d9c:	93 95       	inc	r25
    4d9e:	95 39       	cpi	r25, 0x95	; 149
    4da0:	d0 f3       	brcs	.-12     	; 0x4d96 <round+0x1a>
    4da2:	b6 2f       	mov	r27, r22
    4da4:	b1 70       	andi	r27, 0x01	; 1
    4da6:	6b 0f       	add	r22, r27
    4da8:	71 1d       	adc	r23, r1
    4daa:	81 1d       	adc	r24, r1
    4dac:	20 f4       	brcc	.+8      	; 0x4db6 <round+0x3a>
    4dae:	87 95       	ror	r24
    4db0:	77 95       	ror	r23
    4db2:	67 95       	ror	r22
    4db4:	93 95       	inc	r25
    4db6:	02 c0       	rjmp	.+4      	; 0x4dbc <__fp_mintl>
    4db8:	1c c0       	rjmp	.+56     	; 0x4df2 <__fp_mpack>
    4dba:	4c c0       	rjmp	.+152    	; 0x4e54 <__fp_szero>

00004dbc <__fp_mintl>:
    4dbc:	88 23       	and	r24, r24
    4dbe:	71 f4       	brne	.+28     	; 0x4ddc <__fp_mintl+0x20>
    4dc0:	77 23       	and	r23, r23
    4dc2:	21 f0       	breq	.+8      	; 0x4dcc <__fp_mintl+0x10>
    4dc4:	98 50       	subi	r25, 0x08	; 8
    4dc6:	87 2b       	or	r24, r23
    4dc8:	76 2f       	mov	r23, r22
    4dca:	07 c0       	rjmp	.+14     	; 0x4dda <__fp_mintl+0x1e>
    4dcc:	66 23       	and	r22, r22
    4dce:	11 f4       	brne	.+4      	; 0x4dd4 <__fp_mintl+0x18>
    4dd0:	99 27       	eor	r25, r25
    4dd2:	0d c0       	rjmp	.+26     	; 0x4dee <__fp_mintl+0x32>
    4dd4:	90 51       	subi	r25, 0x10	; 16
    4dd6:	86 2b       	or	r24, r22
    4dd8:	70 e0       	ldi	r23, 0x00	; 0
    4dda:	60 e0       	ldi	r22, 0x00	; 0
    4ddc:	2a f0       	brmi	.+10     	; 0x4de8 <__fp_mintl+0x2c>
    4dde:	9a 95       	dec	r25
    4de0:	66 0f       	add	r22, r22
    4de2:	77 1f       	adc	r23, r23
    4de4:	88 1f       	adc	r24, r24
    4de6:	da f7       	brpl	.-10     	; 0x4dde <__fp_mintl+0x22>
    4de8:	88 0f       	add	r24, r24
    4dea:	96 95       	lsr	r25
    4dec:	87 95       	ror	r24
    4dee:	97 f9       	bld	r25, 7
    4df0:	08 95       	ret

00004df2 <__fp_mpack>:
    4df2:	9f 3f       	cpi	r25, 0xFF	; 255
    4df4:	31 f0       	breq	.+12     	; 0x4e02 <__fp_mpack_finite+0xc>

00004df6 <__fp_mpack_finite>:
    4df6:	91 50       	subi	r25, 0x01	; 1
    4df8:	20 f4       	brcc	.+8      	; 0x4e02 <__fp_mpack_finite+0xc>
    4dfa:	87 95       	ror	r24
    4dfc:	77 95       	ror	r23
    4dfe:	67 95       	ror	r22
    4e00:	b7 95       	ror	r27
    4e02:	88 0f       	add	r24, r24
    4e04:	91 1d       	adc	r25, r1
    4e06:	96 95       	lsr	r25
    4e08:	87 95       	ror	r24
    4e0a:	97 f9       	bld	r25, 7
    4e0c:	08 95       	ret

00004e0e <__fp_split3>:
    4e0e:	57 fd       	sbrc	r21, 7
    4e10:	90 58       	subi	r25, 0x80	; 128
    4e12:	44 0f       	add	r20, r20
    4e14:	55 1f       	adc	r21, r21
    4e16:	59 f0       	breq	.+22     	; 0x4e2e <__fp_splitA+0x10>
    4e18:	5f 3f       	cpi	r21, 0xFF	; 255
    4e1a:	71 f0       	breq	.+28     	; 0x4e38 <__fp_splitA+0x1a>
    4e1c:	47 95       	ror	r20

00004e1e <__fp_splitA>:
    4e1e:	88 0f       	add	r24, r24
    4e20:	97 fb       	bst	r25, 7
    4e22:	99 1f       	adc	r25, r25
    4e24:	61 f0       	breq	.+24     	; 0x4e3e <__fp_splitA+0x20>
    4e26:	9f 3f       	cpi	r25, 0xFF	; 255
    4e28:	79 f0       	breq	.+30     	; 0x4e48 <__fp_splitA+0x2a>
    4e2a:	87 95       	ror	r24
    4e2c:	08 95       	ret
    4e2e:	12 16       	cp	r1, r18
    4e30:	13 06       	cpc	r1, r19
    4e32:	14 06       	cpc	r1, r20
    4e34:	55 1f       	adc	r21, r21
    4e36:	f2 cf       	rjmp	.-28     	; 0x4e1c <__fp_split3+0xe>
    4e38:	46 95       	lsr	r20
    4e3a:	f1 df       	rcall	.-30     	; 0x4e1e <__fp_splitA>
    4e3c:	08 c0       	rjmp	.+16     	; 0x4e4e <__fp_splitA+0x30>
    4e3e:	16 16       	cp	r1, r22
    4e40:	17 06       	cpc	r1, r23
    4e42:	18 06       	cpc	r1, r24
    4e44:	99 1f       	adc	r25, r25
    4e46:	f1 cf       	rjmp	.-30     	; 0x4e2a <__fp_splitA+0xc>
    4e48:	86 95       	lsr	r24
    4e4a:	71 05       	cpc	r23, r1
    4e4c:	61 05       	cpc	r22, r1
    4e4e:	08 94       	sec
    4e50:	08 95       	ret

00004e52 <__fp_zero>:
    4e52:	e8 94       	clt

00004e54 <__fp_szero>:
    4e54:	bb 27       	eor	r27, r27
    4e56:	66 27       	eor	r22, r22
    4e58:	77 27       	eor	r23, r23
    4e5a:	cb 01       	movw	r24, r22
    4e5c:	97 f9       	bld	r25, 7
    4e5e:	08 95       	ret

00004e60 <_exit>:
    4e60:	f8 94       	cli

00004e62 <__stop_program>:
    4e62:	ff cf       	rjmp	.-2      	; 0x4e62 <__stop_program>
