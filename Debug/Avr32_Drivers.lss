
Avr32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00004e58  00004eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080017e  0080017e  0000500a  2**0
                  ALLOC
  3 .stab         000067c8  00000000  00000000  0000500c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000033c6  00000000  00000000  0000b7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000eb9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000ed3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000ef2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00011337  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000126bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00013894  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00013a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00013d4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000146b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 77 15 	jmp	0x2aee	; 0x2aee <__vector_1>
       8:	0c 94 aa 15 	jmp	0x2b54	; 0x2b54 <__vector_2>
       c:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__vector_3>
      10:	0c 94 97 10 	jmp	0x212e	; 0x212e <__vector_4>
      14:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 dd 0f 	jmp	0x1fba	; 0x1fba <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__vector_9>
      28:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__vector_10>
      2c:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <main>
      8a:	0c 94 2a 27 	jmp	0x4e54	; 0x4e54 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f3 26 	jmp	0x4de6	; 0x4de6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f3 26 	jmp	0x4de6	; 0x4de6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0f 27 	jmp	0x4e1e	; 0x4e1e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 17 27 	jmp	0x4e2e	; 0x4e2e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 17 27 	jmp	0x4e2e	; 0x4e2e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_vidInit>:
#include "UART_priv.h"
#include "UART_config.h"
/************************************************************************************/


void UART_vidInit(uint16 copy_u8UART_BaudRate){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_vidInit+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01


	/********************** Setting  Baud Rate **********************/
	UART_setBaudRate(copy_u8UART_BaudRate);
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_setBaudRate>
	/***************************************************************/
    SET_BIT(UCSRC_REG, UCSRC_URSEL);
     e44:	a0 e4       	ldi	r26, 0x40	; 64
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e0 e4       	ldi	r30, 0x40	; 64
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 68       	ori	r24, 0x80	; 128
     e50:	8c 93       	st	X, r24


	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)

		CLR_BIT(UCSRC_REG, UCSRC_UMSEL);
     e52:	a0 e4       	ldi	r26, 0x40	; 64
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e0 e4       	ldi	r30, 0x40	; 64
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7b       	andi	r24, 0xBF	; 191
     e5e:	8c 93       	st	X, r24

		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)
			CLR_BIT(UCSRA_REG, UCSRA_U2X);
     e60:	ab e2       	ldi	r26, 0x2B	; 43
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	8c 93       	st	X, r24
			SET_BIT(UCSRC_REG, UCSRC_UMSEL);
	#endif


	#if(UART_MPCM_OPERATION == UART_SINGLE_MODE)
			CLR_BIT(UCSRA_REG, UCSRA_MPCM);
     e6e:	ab e2       	ldi	r26, 0x2B	; 43
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	eb e2       	ldi	r30, 0x2B	; 43
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
			SET_BIT(UCSRA_REG, UCSRA_MPCM);
	#endif


	// Receiver Enable
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
     e7c:	aa e2       	ldi	r26, 0x2A	; 42
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ea e2       	ldi	r30, 0x2A	; 42
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 61       	ori	r24, 0x10	; 16
     e88:	8c 93       	st	X, r24

	// Transmitter Enable
	SET_BIT(UCSRB_REG, UCSRB_TXEN);
     e8a:	aa e2       	ldi	r26, 0x2A	; 42
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ea e2       	ldi	r30, 0x2A	; 42
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	88 60       	ori	r24, 0x08	; 8
     e96:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
		SET_BIT(UCSRB_REG, UCSRB_UCSZ2);

	#elif(UART_DATA_BIT == UART_DATA_8bit)

		SET_BIT(UCSRC_REG, UCSRC_UCSZ0);
     e98:	a0 e4       	ldi	r26, 0x40	; 64
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
     ea6:	a0 e4       	ldi	r26, 0x40	; 64
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e0 e4       	ldi	r30, 0x40	; 64
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	84 60       	ori	r24, 0x04	; 4
     eb2:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     eb4:	aa e2       	ldi	r26, 0x2A	; 42
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ea e2       	ldi	r30, 0x2A	; 42
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8b 7f       	andi	r24, 0xFB	; 251
     ec0:	8c 93       	st	X, r24


	/********************* Setting No Stop Bits *********************/
	#if(UART_STOP_BIT == UART_STOP_1bit)

		CLR_BIT(UCSRC_REG, UCSRC_USBS);
     ec2:	a0 e4       	ldi	r26, 0x40	; 64
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e0 e4       	ldi	r30, 0x40	; 64
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSRC_UPM0);
		SET_BIT(UCSRC_REG, UCSRC_UPM1);

	#elif(UART_PARITY_MODE == UART_PARITY_ODD)

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     ed0:	a0 e4       	ldi	r26, 0x40	; 64
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e0 e4       	ldi	r30, 0x40	; 64
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 62       	ori	r24, 0x20	; 32
     edc:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     ede:	a0 e4       	ldi	r26, 0x40	; 64
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e0 e4       	ldi	r30, 0x40	; 64
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 61       	ori	r24, 0x10	; 16
     eea:	8c 93       	st	X, r24
	/**************************************************************/




}
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <UART_enuSendChar>:


ErrorStatus_t UART_enuSendChar(uint8_t copy_u8Data){
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <UART_enuSendChar+0x6>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     f02:	19 82       	std	Y+1, r1	; 0x01


	// Wait until transmit buffer is empty
	while(GET_BIT(UCSRA_REG, UCSRA_URDE) == 0);
     f04:	eb e2       	ldi	r30, 0x2B	; 43
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	82 95       	swap	r24
     f0c:	86 95       	lsr	r24
     f0e:	87 70       	andi	r24, 0x07	; 7
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	81 70       	andi	r24, 0x01	; 1
     f16:	90 70       	andi	r25, 0x00	; 0
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	a1 f3       	breq	.-24     	; 0xf04 <UART_enuSendChar+0xe>

	UDR_REG = copy_u8Data;
     f1c:	ec e2       	ldi	r30, 0x2C	; 44
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	80 83       	st	Z, r24


	Local_enuErrrorState = ERROR_STATUS_OK;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <UART_enuSendString>:


ErrorStatus_t UART_enuSendString(uint8_t* copy_pu8Data){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <UART_enuSendString+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <UART_enuSendString+0x8>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	9b 83       	std	Y+3, r25	; 0x03
     f42:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     f44:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9b 81       	ldd	r25, Y+3	; 0x03
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	69 f4       	brne	.+26     	; 0xf68 <UART_enuSendString+0x34>
		return Local_enuErrrorState;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	8c 83       	std	Y+4, r24	; 0x04
     f52:	16 c0       	rjmp	.+44     	; 0xf80 <UART_enuSendString+0x4c>
	}

	else{

		while(*copy_pu8Data != '\0'){
			UART_enuSendChar(*copy_pu8Data);
     f54:	ea 81       	ldd	r30, Y+2	; 0x02
     f56:	fb 81       	ldd	r31, Y+3	; 0x03
     f58:	80 81       	ld	r24, Z
     f5a:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_enuSendChar>
			copy_pu8Data++;
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	9b 83       	std	Y+3, r25	; 0x03
     f66:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
	}

	else{

		while(*copy_pu8Data != '\0'){
     f68:	ea 81       	ldd	r30, Y+2	; 0x02
     f6a:	fb 81       	ldd	r31, Y+3	; 0x03
     f6c:	80 81       	ld	r24, Z
     f6e:	88 23       	and	r24, r24
     f70:	89 f7       	brne	.-30     	; 0xf54 <UART_enuSendString+0x20>
			UART_enuSendChar(*copy_pu8Data);
			copy_pu8Data++;
		}
		UART_enuSendChar('\0');
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_enuSendChar>
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	8c 83       	std	Y+4, r24	; 0x04
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <UART_enuRecieveChar>:

ErrorStatus_t UART_enuRecieveChar(uint8_t* copy_pu8Data){
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <UART_enuRecieveChar+0x6>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <UART_enuRecieveChar+0x8>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     fa0:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	19 f4       	brne	.+6      	; 0xfb0 <UART_enuRecieveChar+0x20>
		return Local_enuErrrorState;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	8c 83       	std	Y+4, r24	; 0x04
     fae:	0f c0       	rjmp	.+30     	; 0xfce <UART_enuRecieveChar+0x3e>
	}

	else{

		// Receive Complete
		while(GET_BIT(UCSRA_REG, UCSRA_RXC) == 0);
     fb0:	eb e2       	ldi	r30, 0x2B	; 43
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	88 23       	and	r24, r24
     fb8:	dc f7       	brge	.-10     	; 0xfb0 <UART_enuRecieveChar+0x20>

		*copy_pu8Data = UDR_REG;
     fba:	ec e2       	ldi	r30, 0x2C	; 44
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	ea 81       	ldd	r30, Y+2	; 0x02
     fc2:	fb 81       	ldd	r31, Y+3	; 0x03
     fc4:	80 83       	st	Z, r24
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	8c 83       	std	Y+4, r24	; 0x04
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <UART_enuRecieveString>:



ErrorStatus_t UART_enuRecieveString(uint8_t* copy_pu8Data) {
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <UART_enuRecieveString+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <UART_enuRecieveString+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9b 83       	std	Y+3, r25	; 0x03
     fec:	8a 83       	std	Y+2, r24	; 0x02
    if (copy_pu8Data == NULL) {
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	11 f4       	brne	.+4      	; 0xffa <UART_enuRecieveString+0x1c>
        return ERROR_STATUS_FAILURE;
     ff6:	1c 82       	std	Y+4, r1	; 0x04
     ff8:	16 c0       	rjmp	.+44     	; 0x1026 <UART_enuRecieveString+0x48>
    }

    uint8_t receivedChar;
    while (1) {
        // Receive a character from UART
        UART_enuRecieveChar(&receivedChar);
     ffa:	ce 01       	movw	r24, r28
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_enuRecieveChar>

        // Store the received character in the buffer
        *copy_pu8Data = receivedChar;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	ea 81       	ldd	r30, Y+2	; 0x02
    1006:	fb 81       	ldd	r31, Y+3	; 0x03
    1008:	80 83       	st	Z, r24

        // Check if the received character is the null terminator
        if (receivedChar == '\0') {
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	88 23       	and	r24, r24
    100e:	31 f0       	breq	.+12     	; 0x101c <UART_enuRecieveString+0x3e>
            break; // Exit the loop if end of string is detected
        }

        // Move to the next position in the buffer
        copy_pu8Data++;
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	9b 81       	ldd	r25, Y+3	; 0x03
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	9b 83       	std	Y+3, r25	; 0x03
    1018:	8a 83       	std	Y+2, r24	; 0x02
    101a:	ef cf       	rjmp	.-34     	; 0xffa <UART_enuRecieveString+0x1c>
    }

    // Null-terminate the string
    *copy_pu8Data = '\0';
    101c:	ea 81       	ldd	r30, Y+2	; 0x02
    101e:	fb 81       	ldd	r31, Y+3	; 0x03
    1020:	10 82       	st	Z, r1

    return ERROR_STATUS_OK;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	8c 83       	std	Y+4, r24	; 0x04
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <UART_setBaudRate>:

//!
void UART_setBaudRate(uint16 copy_u8UART_BaudRate){
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <UART_setBaudRate+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <UART_setBaudRate+0x8>
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int copy_u16Temp = 0;
    1046:	1a 82       	std	Y+2, r1	; 0x02
    1048:	19 82       	std	Y+1, r1	; 0x01

    #if (UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)
        #if (UART_SPEED_MODE == UART_NORMAL_SPEED)


    			copy_u16Temp = ((UART_MC_OSC_FREQ / (16UL*copy_u8UART_BaudRate) ) - 1);
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	cc 01       	movw	r24, r24
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	aa 1f       	adc	r26, r26
    105a:	bb 1f       	adc	r27, r27
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	aa 1f       	adc	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	aa 1f       	adc	r26, r26
    106a:	bb 1f       	adc	r27, r27
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	aa 1f       	adc	r26, r26
    1072:	bb 1f       	adc	r27, r27
    1074:	9c 01       	movw	r18, r24
    1076:	ad 01       	movw	r20, r26
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	92 e1       	ldi	r25, 0x12	; 18
    107c:	aa e7       	ldi	r26, 0x7A	; 122
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <__udivmodsi4>
    1088:	da 01       	movw	r26, r20
    108a:	c9 01       	movw	r24, r18
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01

    			copy_u16Temp = ((UART_MC_OSC_FREQ / (2UL*copy_u8UART_BaudRate) ) - 1);
    #endif


    CLR_BIT(UCSRC_REG, UCSRC_URSEL);
    1092:	a0 e4       	ldi	r26, 0x40	; 64
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e0 e4       	ldi	r30, 0x40	; 64
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 77       	andi	r24, 0x7F	; 127
    109e:	8c 93       	st	X, r24

    UBRRH_REG = (uint8_t)(copy_u16Temp >> 8);
    10a0:	e0 e4       	ldi	r30, 0x40	; 64
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	89 2f       	mov	r24, r25
    10aa:	99 27       	eor	r25, r25
    10ac:	80 83       	st	Z, r24
    UBRRL_REG = (uint8_t)copy_u16Temp;
    10ae:	e9 e2       	ldi	r30, 0x29	; 41
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	80 83       	st	Z, r24
}
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <TWI_enuInit>:





TWIStatus_t TWI_enuInit(void) {
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	0f 92       	push	r0
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    TWIStatus_t Local_enuErrorState = TWI_STATUS_FAILURE;
    10ce:	19 82       	std	Y+1, r1	; 0x01

    #if (TWI_MODE_M_or_S == TWI_MASTER_MODE)
        // Set Value for Bit Rate (should only be when we working with master)
        TWBR_REG = TWBR_VALUE;
    10d0:	e0 e2       	ldi	r30, 0x20	; 32
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	80 83       	st	Z, r24
        TWSR_REG = TWI_PRESCALER_VALUE; // Set prescaler bits
    10d8:	e1 e2       	ldi	r30, 0x21	; 33
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	10 82       	st	Z, r1
    #endif

    // Enable TWI Interrupt
    GIE_enuEnable();
    10de:	0e 94 2b 12 	call	0x2456	; 0x2456 <GIE_enuEnable>

    // Configure TWCR register based on ACK configuration
    #if (TWI_ACK_CONFIG == TWI_ACK_ENABLE)
        TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWEA) | (1 << TWCR_TWIE);
    10e2:	e6 e5       	ldi	r30, 0x56	; 86
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	85 e4       	ldi	r24, 0x45	; 69
    10e8:	80 83       	st	Z, r24
        TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWIE);
    #endif

    // Configure General Call Enable (GCE)
    #if (TWI_GCE_CONFIG == TWI_GCE_ENABLE)
        SET_BIT(TWAR_REG, TWAR_TWGCE);
    10ea:	a2 e2       	ldi	r26, 0x22	; 34
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e2 e2       	ldi	r30, 0x22	; 34
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	81 60       	ori	r24, 0x01	; 1
    10f6:	8c 93       	st	X, r24
    #elif (TWI_GCE_CONFIG == TWI_GCE_DISABLE)
        CLR_BIT(TWAR_REG, TWAR_TWGCE);
    #endif

    // Set Address for MC
    TWAR_REG = (TWAR_REG & 0x01) | TWI_SET_ADDR;
    10f8:	a2 e2       	ldi	r26, 0x22	; 34
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	e2 e2       	ldi	r30, 0x22	; 34
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	81 70       	andi	r24, 0x01	; 1
    1104:	88 60       	ori	r24, 0x08	; 8
    1106:	8c 93       	st	X, r24

    Local_enuErrorState = TWI_STATUS_OK;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorState;
    110c:	89 81       	ldd	r24, Y+1	; 0x01
}
    110e:	0f 90       	pop	r0
    1110:	cf 91       	pop	r28
    1112:	df 91       	pop	r29
    1114:	08 95       	ret

00001116 <TWI_enuStartCondition>:



TWIStatus_t TWI_enuStartCondition(void){
    1116:	df 93       	push	r29
    1118:	cf 93       	push	r28
    111a:	0f 92       	push	r0
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1120:	19 82       	std	Y+1, r1	; 0x01
	 * TWEN bit must be set whenever you want to intiate a TWI operation.
	 * To send start condition enable TWI by setting TWSTA, TWINT, and TWEN in one operation.
	 * This ensures that TWI modules receives a consistent command and avoids intermediate states.
	 * */

	TWCR_REG = (1 << TWCR_TWSTA) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1122:	e6 e5       	ldi	r30, 0x56	; 86
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	84 ea       	ldi	r24, 0xA4	; 164
    1128:	80 83       	st	Z, r24



	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    112a:	e6 e5       	ldi	r30, 0x56	; 86
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	88 23       	and	r24, r24
    1132:	dc f7       	brge	.-10     	; 0x112a <TWI_enuStartCondition+0x14>
	 * 1  1  1  1  {1 0 0   0}
	 *
	 * 0xF8
	 * */

	if( (TWSR_REG & 0xF8) == TWI_START_SUCCESS_CODE){
    1134:	e1 e2       	ldi	r30, 0x21	; 33
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	88 7f       	andi	r24, 0xF8	; 248
    1140:	90 70       	andi	r25, 0x00	; 0
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	91 05       	cpc	r25, r1
    1146:	11 f4       	brne	.+4      	; 0x114c <TWI_enuStartCondition+0x36>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    114c:	89 81       	ldd	r24, Y+1	; 0x01
}
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <TWI_enuRepeatStartCondition>:

TWIStatus_t TWI_enuRepeatStartCondition(void){
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	0f 92       	push	r0
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1160:	19 82       	std	Y+1, r1	; 0x01
	 * TWEN bit must be set whenever you want to intiate a TWI operation.
	 * To send start condition enable TWI by setting TWSTA, TWINT, and TWEN in one operation.
	 * This ensures that TWI modules receives a consistent command and avoids intermediate states.
	 * */

	TWCR_REG = (1 << TWCR_TWSTA) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1162:	e6 e5       	ldi	r30, 0x56	; 86
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	84 ea       	ldi	r24, 0xA4	; 164
    1168:	80 83       	st	Z, r24


	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    116a:	e6 e5       	ldi	r30, 0x56	; 86
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	88 23       	and	r24, r24
    1172:	dc f7       	brge	.-10     	; 0x116a <TWI_enuRepeatStartCondition+0x14>
	 * 0xF8
	 * */



	if( (TWSR_REG &0xF8) == TWI_RSTART_SUCCESS_CODE){
    1174:	e1 e2       	ldi	r30, 0x21	; 33
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	88 2f       	mov	r24, r24
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	88 7f       	andi	r24, 0xF8	; 248
    1180:	90 70       	andi	r25, 0x00	; 0
    1182:	80 31       	cpi	r24, 0x10	; 16
    1184:	91 05       	cpc	r25, r1
    1186:	11 f4       	brne	.+4      	; 0x118c <TWI_enuRepeatStartCondition+0x36>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enu_ErrorState;
    118c:	89 81       	ldd	r24, Y+1	; 0x01
}
    118e:	0f 90       	pop	r0
    1190:	cf 91       	pop	r28
    1192:	df 91       	pop	r29
    1194:	08 95       	ret

00001196 <TWI_enuStopCondition>:


//! since there no status code why not doing macro like function
// IDEAS for feature development
TWIStatus_t TWI_enuStopCondition(void){
    1196:	df 93       	push	r29
    1198:	cf 93       	push	r28
    119a:	0f 92       	push	r0
    119c:	cd b7       	in	r28, 0x3d	; 61
    119e:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    11a0:	19 82       	std	Y+1, r1	; 0x01
	 * TWCR_TWINT & TWCR_TWEN - essential to start TWI action
	 *
	 * */


    TWCR_REG = (1 << TWCR_TWSTO) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    11a2:	e6 e5       	ldi	r30, 0x56	; 86
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	84 e9       	ldi	r24, 0x94	; 148
    11a8:	80 83       	st	Z, r24


	Local_enu_ErrorState = TWI_STATUS_OK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <TWI_enuSetSlaveOperation>:


TWIStatus_t TWI_enuSetSlaveOperation(
		uint8_t copy_u8SlaveAddress, uint8_t copy_u8Operation){
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	00 d0       	rcall	.+0      	; 0x11be <TWI_enuSetSlaveOperation+0x6>
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	8a 83       	std	Y+2, r24	; 0x02
    11c6:	6b 83       	std	Y+3, r22	; 0x03

	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    11c8:	19 82       	std	Y+1, r1	; 0x01

    // Load the slave address and operation (read/write) into the data register
	TWDR_REG = (copy_u8SlaveAddress << 1) | (copy_u8Operation);
    11ca:	e3 e2       	ldi	r30, 0x23	; 35
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	88 2f       	mov	r24, r24
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	98 2f       	mov	r25, r24
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	89 2b       	or	r24, r25
    11de:	80 83       	st	Z, r24

    TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    11e0:	e6 e5       	ldi	r30, 0x56	; 86
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	84 e8       	ldi	r24, 0x84	; 132
    11e6:	80 83       	st	Z, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    11e8:	e6 e5       	ldi	r30, 0x56	; 86
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	88 23       	and	r24, r24
    11f0:	dc f7       	brge	.-10     	; 0x11e8 <TWI_enuSetSlaveOperation+0x30>




	if(copy_u8Operation == TWI_WriteOperation){
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	88 23       	and	r24, r24
    11f6:	69 f4       	brne	.+26     	; 0x1212 <TWI_enuSetSlaveOperation+0x5a>

		if((TWSR_REG &0xF8) == TWI_SLA_WR_ACK_TSUCCESS_CODE){
    11f8:	e1 e2       	ldi	r30, 0x21	; 33
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	88 7f       	andi	r24, 0xF8	; 248
    1204:	90 70       	andi	r25, 0x00	; 0
    1206:	88 31       	cpi	r24, 0x18	; 24
    1208:	91 05       	cpc	r25, r1
    120a:	91 f4       	brne	.+36     	; 0x1230 <TWI_enuSetSlaveOperation+0x78>
			Local_enu_ErrorState = TWI_STATUS_OK;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <TWI_enuSetSlaveOperation+0x78>
		}

	} else if(copy_u8Operation == TWI_ReadOperation){
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	61 f4       	brne	.+24     	; 0x1230 <TWI_enuSetSlaveOperation+0x78>

		if((TWSR_REG &0xF8) == TWI_SLA_RD_ACK_TSUCCESS_CODE){
    1218:	e1 e2       	ldi	r30, 0x21	; 33
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	88 7f       	andi	r24, 0xF8	; 248
    1224:	90 70       	andi	r25, 0x00	; 0
    1226:	80 34       	cpi	r24, 0x40	; 64
    1228:	91 05       	cpc	r25, r1
    122a:	11 f4       	brne	.+4      	; 0x1230 <TWI_enuSetSlaveOperation+0x78>
			Local_enu_ErrorState = TWI_STATUS_OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
		}
	}



	return Local_enu_ErrorState;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <TWI_enuWriteData>:

TWIStatus_t	TWI_enuWriteData(uint8_t copy_u8Data){
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <TWI_enuWriteData+0x6>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    124a:	19 82       	std	Y+1, r1	; 0x01

	TWDR_REG = copy_u8Data;
    124c:	e3 e2       	ldi	r30, 0x23	; 35
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 83       	st	Z, r24


    // Clear the TWINT flag and set TWEN to start the operation
    TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1254:	e6 e5       	ldi	r30, 0x56	; 86
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	84 e8       	ldi	r24, 0x84	; 132
    125a:	80 83       	st	Z, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    125c:	e6 e5       	ldi	r30, 0x56	; 86
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	88 23       	and	r24, r24
    1264:	dc f7       	brge	.-10     	; 0x125c <TWI_enuWriteData+0x1e>
		#if(TWI_MODE_M_or_S == TWI_MASTER_MODE)




			if((TWSR_REG & 0xF8) == 0x28){
    1266:	e1 e2       	ldi	r30, 0x21	; 33
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	88 7f       	andi	r24, 0xF8	; 248
    1272:	90 70       	andi	r25, 0x00	; 0
    1274:	88 32       	cpi	r24, 0x28	; 40
    1276:	91 05       	cpc	r25, r1
    1278:	11 f4       	brne	.+4      	; 0x127e <TWI_enuWriteData+0x40>


				Local_enu_ErrorState = TWI_STATUS_OK;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	89 83       	std	Y+1, r24	; 0x01
		#endif

	#endif


	return Local_enu_ErrorState;
    127e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <TWI_enuReadData>:


//!{works fine with status checking}
TWIStatus_t	TWI_enuReadData(uint8_t  *copy_pu8Data){
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	00 d0       	rcall	.+0      	; 0x1290 <TWI_enuReadData+0x6>
    1290:	0f 92       	push	r0
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
    1296:	9b 83       	std	Y+3, r25	; 0x03
    1298:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    129a:	19 82       	std	Y+1, r1	; 0x01

	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    129c:	a6 e5       	ldi	r26, 0x56	; 86
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	e6 e5       	ldi	r30, 0x56	; 86
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	80 68       	ori	r24, 0x80	; 128
    12a8:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    12aa:	e6 e5       	ldi	r30, 0x56	; 86
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	88 23       	and	r24, r24
    12b2:	dc f7       	brge	.-10     	; 0x12aa <TWI_enuReadData+0x20>
	// 0x88 - (slave)  data has been received not ack has been returned

	#if(TWI_ACK_CONFIG == TWI_ACK_ENABLE)

		// Master Receive
		if( ((TWSR_REG & 0xF8) == TWI_M_RSUCCESS_CODE_withAck) ){
    12b4:	e1 e2       	ldi	r30, 0x21	; 33
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	88 7f       	andi	r24, 0xF8	; 248
    12c0:	90 70       	andi	r25, 0x00	; 0
    12c2:	80 35       	cpi	r24, 0x50	; 80
    12c4:	91 05       	cpc	r25, r1
    12c6:	19 f4       	brne	.+6      	; 0x12ce <TWI_enuReadData+0x44>
			Local_enu_ErrorState = TWI_STATUS_OK;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	89 83       	std	Y+1, r24	; 0x01
    12cc:	0c c0       	rjmp	.+24     	; 0x12e6 <TWI_enuReadData+0x5c>

		}

		// Slave Receive
		else if(((TWSR_REG & 0xF8) == TWI_S_RSUCCESS_CODE_withACK)){
    12ce:	e1 e2       	ldi	r30, 0x21	; 33
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	88 7f       	andi	r24, 0xF8	; 248
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	80 38       	cpi	r24, 0x80	; 128
    12de:	91 05       	cpc	r25, r1
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <TWI_enuReadData+0x5c>
			Local_enu_ErrorState = TWI_STATUS_OK;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	89 83       	std	Y+1, r24	; 0x01
			Local_enu_ErrorState = TWI_STATUS_OK;
		}
	#endif

	// Read data from TWDR Register
	*copy_pu8Data = TWDR_REG;
    12e6:	e3 e2       	ldi	r30, 0x23	; 35
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	ea 81       	ldd	r30, Y+2	; 0x02
    12ee:	fb 81       	ldd	r31, Y+3	; 0x03
    12f0:	80 83       	st	Z, r24

	return Local_enu_ErrorState;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <TWI_enuCheckMyAddress>:


//!{works fine with status checking}
ErrorStatus_t TWI_enuCheckMyAddress(void){
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	0f 92       	push	r0
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    130a:	19 82       	std	Y+1, r1	; 0x01


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    130c:	a6 e5       	ldi	r26, 0x56	; 86
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e6 e5       	ldi	r30, 0x56	; 86
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	80 68       	ori	r24, 0x80	; 128
    1318:	8c 93       	st	X, r24


	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    131a:	e6 e5       	ldi	r30, 0x56	; 86
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	88 23       	and	r24, r24
    1322:	dc f7       	brge	.-10     	; 0x131a <TWI_enuCheckMyAddress+0x1a>


	// 0x60 - SLA+W has been received, ACK has been returned
	// 0xA8 - SLA+R has been received, ACK has been returned

	if((TWSR_REG & 0xF8) == TWI_SLA_WR_ACK_RSUCCESS_CODE){
    1324:	e1 e2       	ldi	r30, 0x21	; 33
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 2f       	mov	r24, r24
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	88 7f       	andi	r24, 0xF8	; 248
    1330:	90 70       	andi	r25, 0x00	; 0
    1332:	80 36       	cpi	r24, 0x60	; 96
    1334:	91 05       	cpc	r25, r1
    1336:	19 f4       	brne	.+6      	; 0x133e <TWI_enuCheckMyAddress+0x3e>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	0c c0       	rjmp	.+24     	; 0x1356 <TWI_enuCheckMyAddress+0x56>
	}


	else if((TWSR_REG & 0xF8) == TWI_SLA_RD_ACK_RSUCCESS_CODE){
    133e:	e1 e2       	ldi	r30, 0x21	; 33
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	88 7f       	andi	r24, 0xF8	; 248
    134a:	90 70       	andi	r25, 0x00	; 0
    134c:	88 3a       	cpi	r24, 0xA8	; 168
    134e:	91 05       	cpc	r25, r1
    1350:	11 f4       	brne	.+4      	; 0x1356 <TWI_enuCheckMyAddress+0x56>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
}
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <TIMER0_voidInit>:
/*******************************************************************************************************/



/****************************************** TIMER0 FUNCTIONS ******************************************/
void TIMER0_voidInit(void){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
	 * 3. Enable Interrupt (Compre Match Interrupt - OverFlow Interrupt)
	 *
	 * */

	/** Active global interrupt **/
	GIE_enuEnable();
    1368:	0e 94 2b 12 	call	0x2456	; 0x2456 <GIE_enuEnable>
			#endif
		#endif


	#elif(TIMER0_MODE_SELECT == TIMER_MODE_FastPWM)
		SET_BIT(TCCR0_REG, TCCR0_WGM00);
    136c:	a3 e5       	ldi	r26, 0x53	; 83
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e3 e5       	ldi	r30, 0x53	; 83
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	80 64       	ori	r24, 0x40	; 64
    1378:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_WGM01);
    137a:	a3 e5       	ldi	r26, 0x53	; 83
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e3 e5       	ldi	r30, 0x53	; 83
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	88 60       	ori	r24, 0x08	; 8
    1386:	8c 93       	st	X, r24

		#if(TIMER0_FastPwm_Type == TIMER_FastPwmType_Inverted)
			CLR_BIT(TCCR0_REG, TCCR0_COM00);
    1388:	a3 e5       	ldi	r26, 0x53	; 83
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e3 e5       	ldi	r30, 0x53	; 83
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8f 7e       	andi	r24, 0xEF	; 239
    1394:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, TCCR0_COM01);
    1396:	a3 e5       	ldi	r26, 0x53	; 83
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e3 e5       	ldi	r30, 0x53	; 83
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 62       	ori	r24, 0x20	; 32
    13a2:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, TCCR0_COM01);

		#endif

		// By default, OC0 pin is default output pin for Timer0's PWM signal
		DIO_enuSetPinDirection(TIMER_OC0_PORT, TIMER_OC0_PIN, DIO_u8OUTPUT);
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	63 e0       	ldi	r22, 0x03	; 3
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
		CLR_BIT(TCCR0_REG, TCCR0_CS00);
		SET_BIT(TCCR0_REG, TCCR0_CS01);
		CLR_BIT(TCCR0_REG, TCCR0_CS02);

	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_64)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
    13ae:	a3 e5       	ldi	r26, 0x53	; 83
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e3 e5       	ldi	r30, 0x53	; 83
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	81 60       	ori	r24, 0x01	; 1
    13ba:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_CS01);
    13bc:	a3 e5       	ldi	r26, 0x53	; 83
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e3 e5       	ldi	r30, 0x53	; 83
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	82 60       	ori	r24, 0x02	; 2
    13c8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_CS02);
    13ca:	a3 e5       	ldi	r26, 0x53	; 83
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e3 e5       	ldi	r30, 0x53	; 83
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8b 7f       	andi	r24, 0xFB	; 251
    13d6:	8c 93       	st	X, r24
	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_1024)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
		CLR_BIT(TCCR0_REG, TCCR0_CS01);
		SET_BIT(TCCR0_REG, TCCR0_CS02);
	#endif
}
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <TIMER0_voidStart>:

void TIMER0_voidStart(void){
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			SET_BIT(TIMSK_REG, TIMSK_OCIE0);

		#endif
}
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <TIMER0_voidStop>:

void TIMER0_voidStop(void){
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			CLR_BIT(TIMSK_REG, TIMSK_OCIE0);

		#endif
}
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <TIMER0_voidScheduleTask>:

uint8_t TIMER0_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    13fa:	ef 92       	push	r14
    13fc:	ff 92       	push	r15
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	60 97       	sbiw	r28, 0x10	; 16
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	9a 87       	std	Y+10, r25	; 0x0a
    1418:	89 87       	std	Y+9, r24	; 0x09
    141a:	4b 87       	std	Y+11, r20	; 0x0b
    141c:	5c 87       	std	Y+12, r21	; 0x0c
    141e:	6d 87       	std	Y+13, r22	; 0x0d
    1420:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    1422:	1d 82       	std	Y+5, r1	; 0x05
    1424:	1e 82       	std	Y+6, r1	; 0x06
    1426:	1f 82       	std	Y+7, r1	; 0x07
    1428:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR0_REG & 0x07){
    142a:	e3 e5       	ldi	r30, 0x53	; 83
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	9c 01       	movw	r18, r24
    1436:	27 70       	andi	r18, 0x07	; 7
    1438:	30 70       	andi	r19, 0x00	; 0
    143a:	38 8b       	std	Y+16, r19	; 0x10
    143c:	2f 87       	std	Y+15, r18	; 0x0f
    143e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1440:	98 89       	ldd	r25, Y+16	; 0x10
    1442:	83 30       	cpi	r24, 0x03	; 3
    1444:	91 05       	cpc	r25, r1
    1446:	69 f1       	breq	.+90     	; 0x14a2 <TIMER0_voidScheduleTask+0xa8>
    1448:	2f 85       	ldd	r18, Y+15	; 0x0f
    144a:	38 89       	ldd	r19, Y+16	; 0x10
    144c:	24 30       	cpi	r18, 0x04	; 4
    144e:	31 05       	cpc	r19, r1
    1450:	5c f4       	brge	.+22     	; 0x1468 <TIMER0_voidScheduleTask+0x6e>
    1452:	8f 85       	ldd	r24, Y+15	; 0x0f
    1454:	98 89       	ldd	r25, Y+16	; 0x10
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	91 05       	cpc	r25, r1
    145a:	89 f0       	breq	.+34     	; 0x147e <TIMER0_voidScheduleTask+0x84>
    145c:	2f 85       	ldd	r18, Y+15	; 0x0f
    145e:	38 89       	ldd	r19, Y+16	; 0x10
    1460:	22 30       	cpi	r18, 0x02	; 2
    1462:	31 05       	cpc	r19, r1
    1464:	a9 f0       	breq	.+42     	; 0x1490 <TIMER0_voidScheduleTask+0x96>
    1466:	37 c0       	rjmp	.+110    	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
    1468:	8f 85       	ldd	r24, Y+15	; 0x0f
    146a:	98 89       	ldd	r25, Y+16	; 0x10
    146c:	84 30       	cpi	r24, 0x04	; 4
    146e:	91 05       	cpc	r25, r1
    1470:	09 f1       	breq	.+66     	; 0x14b4 <TIMER0_voidScheduleTask+0xba>
    1472:	2f 85       	ldd	r18, Y+15	; 0x0f
    1474:	38 89       	ldd	r19, Y+16	; 0x10
    1476:	25 30       	cpi	r18, 0x05	; 5
    1478:	31 05       	cpc	r19, r1
    147a:	29 f1       	breq	.+74     	; 0x14c6 <TIMER0_voidScheduleTask+0xcc>
    147c:	2c c0       	rjmp	.+88     	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	af 83       	std	Y+7, r26	; 0x07
    148c:	b8 87       	std	Y+8, r27	; 0x08
    148e:	23 c0       	rjmp	.+70     	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    1490:	88 e0       	ldi	r24, 0x08	; 8
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a0 e0       	ldi	r26, 0x00	; 0
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	8d 83       	std	Y+5, r24	; 0x05
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	af 83       	std	Y+7, r26	; 0x07
    149e:	b8 87       	std	Y+8, r27	; 0x08
    14a0:	1a c0       	rjmp	.+52     	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    14a2:	80 e4       	ldi	r24, 0x40	; 64
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a0 e0       	ldi	r26, 0x00	; 0
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	8d 83       	std	Y+5, r24	; 0x05
    14ac:	9e 83       	std	Y+6, r25	; 0x06
    14ae:	af 83       	std	Y+7, r26	; 0x07
    14b0:	b8 87       	std	Y+8, r27	; 0x08
    14b2:	11 c0       	rjmp	.+34     	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	91 e0       	ldi	r25, 0x01	; 1
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	8d 83       	std	Y+5, r24	; 0x05
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	af 83       	std	Y+7, r26	; 0x07
    14c2:	b8 87       	std	Y+8, r27	; 0x08
    14c4:	08 c0       	rjmp	.+16     	; 0x14d6 <TIMER0_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	94 e0       	ldi	r25, 0x04	; 4
    14ca:	a0 e0       	ldi	r26, 0x00	; 0
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	8d 83       	std	Y+5, r24	; 0x05
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	af 83       	std	Y+7, r26	; 0x07
    14d4:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    14d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14da:	8d 85       	ldd	r24, Y+13	; 0x0d
    14dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	34 e2       	ldi	r19, 0x24	; 36
    14e2:	44 e7       	ldi	r20, 0x74	; 116
    14e4:	5b e4       	ldi	r21, 0x4B	; 75
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	7c 01       	movw	r14, r24
    14f0:	8d 01       	movw	r16, r26
    14f2:	6d 81       	ldd	r22, Y+5	; 0x05
    14f4:	7e 81       	ldd	r23, Y+6	; 0x06
    14f6:	8f 81       	ldd	r24, Y+7	; 0x07
    14f8:	98 85       	ldd	r25, Y+8	; 0x08
    14fa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    14fe:	9b 01       	movw	r18, r22
    1500:	ac 01       	movw	r20, r24
    1502:	c8 01       	movw	r24, r16
    1504:	b7 01       	movw	r22, r14
    1506:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	9a 83       	std	Y+2, r25	; 0x02
    1512:	ab 83       	std	Y+3, r26	; 0x03
    1514:	bc 83       	std	Y+4, r27	; 0x04
		}

	#endif


		TIMERS_ISR_Functions[0] = TaskCallback;
    1516:	89 85       	ldd	r24, Y+9	; 0x09
    1518:	9a 85       	ldd	r25, Y+10	; 0x0a
    151a:	90 93 8b 01 	sts	0x018B, r25
    151e:	80 93 8a 01 	sts	0x018A, r24
		TIMER0_voidStart();
    1522:	0e 94 ef 09 	call	0x13de	; 0x13de <TIMER0_voidStart>
	return 0;
    1526:	80 e0       	ldi	r24, 0x00	; 0
}
    1528:	60 96       	adiw	r28, 0x10	; 16
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	1f 91       	pop	r17
    153a:	0f 91       	pop	r16
    153c:	ff 90       	pop	r15
    153e:	ef 90       	pop	r14
    1540:	08 95       	ret

00001542 <TIMER0_voidSetPWM>:

void  TIMER0_voidSetPWM(uint8_t copy_u8DutyCycle){
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	0f 92       	push	r0
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Avr32 does has floating point operation
	 * **/


	OCR0_REG = (uint8_t)(((uint16_t)copy_u8DutyCycle * 256) / 100);
    154e:	ec e5       	ldi	r30, 0x5C	; 92
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	88 2f       	mov	r24, r24
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	98 2f       	mov	r25, r24
    155a:	88 27       	eor	r24, r24
    155c:	24 e6       	ldi	r18, 0x64	; 100
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	b9 01       	movw	r22, r18
    1562:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__udivmodhi4>
    1566:	cb 01       	movw	r24, r22
    1568:	80 83       	st	Z, r24
}
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <TIMER1_voidInit>:
/******************************************************************************************************/


/****************************************** TIMER1 FUNCTIONS ******************************************/

void TIMER1_voidInit(void) {
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
	 *
	 */


	/** Active global interrupt **/
	GIE_enuEnable();
    157a:	0e 94 2b 12 	call	0x2456	; 0x2456 <GIE_enuEnable>


	#if(TIMER1_OC1A_OUTPUT_STATE == TIMER1_OC1_OUTPUT_ENABLE)
		DIO_enuSetPinDirection(TIMER_OC1A_PORT, TIMER_OC1A_PIN, DIO_u8OUTPUT);
    157e:	83 e0       	ldi	r24, 0x03	; 3
    1580:	65 e0       	ldi	r22, 0x05	; 5
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
		#elif(TIMER_OC1A_OUTPUT_MODE == TIMER_SET_OC1A)
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A0);
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A1);

		#elif(TIMER_OC1A_OUTPUT_MODE == TIMER_CLR_OC1A)
			CLR_BIT(TCCR1A_REG, TCCR1A_COM1A0);
    1588:	af e4       	ldi	r26, 0x4F	; 79
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ef e4       	ldi	r30, 0x4F	; 79
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8f 7b       	andi	r24, 0xBF	; 191
    1594:	8c 93       	st	X, r24
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A1);
    1596:	af e4       	ldi	r26, 0x4F	; 79
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ef e4       	ldi	r30, 0x4F	; 79
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	80 68       	ori	r24, 0x80	; 128
    15a2:	8c 93       	st	X, r24

		CLR_BIT(TCCR1B_REG, TCCR1B_WGM12);
		SET_BIT(TCCR1B_REG, TCCR1B_WGM13);

	#elif(TIMER1_MODE_SELECT == TIMER1_MODE_FastPWM_16bit_FREQ)
		CLR_BIT(TCCR1A_REG, TCCR1A_WGM10);
    15a4:	af e4       	ldi	r26, 0x4F	; 79
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	ef e4       	ldi	r30, 0x4F	; 79
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	8e 7f       	andi	r24, 0xFE	; 254
    15b0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG, TCCR1A_WGM11);
    15b2:	af e4       	ldi	r26, 0x4F	; 79
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	ef e4       	ldi	r30, 0x4F	; 79
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	82 60       	ori	r24, 0x02	; 2
    15be:	8c 93       	st	X, r24

		SET_BIT(TCCR1B_REG, TCCR1B_WGM12);
    15c0:	ae e4       	ldi	r26, 0x4E	; 78
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	ee e4       	ldi	r30, 0x4E	; 78
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	88 60       	ori	r24, 0x08	; 8
    15cc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_WGM13);
    15ce:	ae e4       	ldi	r26, 0x4E	; 78
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	ee e4       	ldi	r30, 0x4E	; 78
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	80 61       	ori	r24, 0x10	; 16
    15da:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);

	#elif(TIMER1_CLK_PRE_SELECT == TIMER_PRES_08)
		CLR_BIT(TCCR1B_REG, TCCR1B_CS10);
    15dc:	ae e4       	ldi	r26, 0x4E	; 78
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	ee e4       	ldi	r30, 0x4E	; 78
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	8e 7f       	andi	r24, 0xFE	; 254
    15e8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS11);
    15ea:	ae e4       	ldi	r26, 0x4E	; 78
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	ee e4       	ldi	r30, 0x4E	; 78
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	82 60       	ori	r24, 0x02	; 2
    15f6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    15f8:	ae e4       	ldi	r26, 0x4E	; 78
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	ee e4       	ldi	r30, 0x4E	; 78
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8b 7f       	andi	r24, 0xFB	; 251
    1604:	8c 93       	st	X, r24
	#elif(TIMER1_CLK_PRE_SELECT == TIMER_PRES_1024)
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
	#endif
}
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <Timer1_SetupForTimeMeasurement>:



ErrorStatus_t Timer1_SetupForTimeMeasurement(uint16 copy_u16prescaler){
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <Timer1_SetupForTimeMeasurement+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <Timer1_SetupForTimeMeasurement+0x8>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	9b 83       	std	Y+3, r25	; 0x03
    161a:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    161c:	19 82       	std	Y+1, r1	; 0x01


	// Setup Prescaler
	if(copy_u16prescaler == 1){
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	b1 f4       	brne	.+44     	; 0x1654 <Timer1_SetupForTimeMeasurement+0x48>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    1628:	ae e4       	ldi	r26, 0x4E	; 78
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	ee e4       	ldi	r30, 0x4E	; 78
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	81 60       	ori	r24, 0x01	; 1
    1634:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    1636:	ae e4       	ldi	r26, 0x4E	; 78
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	ee e4       	ldi	r30, 0x4E	; 78
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	8d 7f       	andi	r24, 0xFD	; 253
    1642:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    1644:	ae e4       	ldi	r26, 0x4E	; 78
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ee e4       	ldi	r30, 0x4E	; 78
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8b 7f       	andi	r24, 0xFB	; 251
    1650:	8c 93       	st	X, r24
    1652:	71 c0       	rjmp	.+226    	; 0x1736 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if (copy_u16prescaler == 8){
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	9b 81       	ldd	r25, Y+3	; 0x03
    1658:	88 30       	cpi	r24, 0x08	; 8
    165a:	91 05       	cpc	r25, r1
    165c:	b1 f4       	brne	.+44     	; 0x168a <Timer1_SetupForTimeMeasurement+0x7e>
		CLR_BIT(TCCR1B_REG, TCCR1B_CS10);
    165e:	ae e4       	ldi	r26, 0x4E	; 78
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	ee e4       	ldi	r30, 0x4E	; 78
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8e 7f       	andi	r24, 0xFE	; 254
    166a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS11);
    166c:	ae e4       	ldi	r26, 0x4E	; 78
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	ee e4       	ldi	r30, 0x4E	; 78
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	82 60       	ori	r24, 0x02	; 2
    1678:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    167a:	ae e4       	ldi	r26, 0x4E	; 78
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ee e4       	ldi	r30, 0x4E	; 78
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	8b 7f       	andi	r24, 0xFB	; 251
    1686:	8c 93       	st	X, r24
    1688:	56 c0       	rjmp	.+172    	; 0x1736 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 64){
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	9b 81       	ldd	r25, Y+3	; 0x03
    168e:	80 34       	cpi	r24, 0x40	; 64
    1690:	91 05       	cpc	r25, r1
    1692:	b1 f4       	brne	.+44     	; 0x16c0 <Timer1_SetupForTimeMeasurement+0xb4>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    1694:	ae e4       	ldi	r26, 0x4E	; 78
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	ee e4       	ldi	r30, 0x4E	; 78
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	81 60       	ori	r24, 0x01	; 1
    16a0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS11);
    16a2:	ae e4       	ldi	r26, 0x4E	; 78
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ee e4       	ldi	r30, 0x4E	; 78
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	82 60       	ori	r24, 0x02	; 2
    16ae:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    16b0:	ae e4       	ldi	r26, 0x4E	; 78
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ee e4       	ldi	r30, 0x4E	; 78
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8b 7f       	andi	r24, 0xFB	; 251
    16bc:	8c 93       	st	X, r24
    16be:	3b c0       	rjmp	.+118    	; 0x1736 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 256){
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	9b 81       	ldd	r25, Y+3	; 0x03
    16c4:	21 e0       	ldi	r18, 0x01	; 1
    16c6:	80 30       	cpi	r24, 0x00	; 0
    16c8:	92 07       	cpc	r25, r18
    16ca:	b1 f4       	brne	.+44     	; 0x16f8 <Timer1_SetupForTimeMeasurement+0xec>
		CLR_BIT(TCCR1B_REG, TCCR1B_CS10);
    16cc:	ae e4       	ldi	r26, 0x4E	; 78
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ee e4       	ldi	r30, 0x4E	; 78
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8e 7f       	andi	r24, 0xFE	; 254
    16d8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    16da:	ae e4       	ldi	r26, 0x4E	; 78
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ee e4       	ldi	r30, 0x4E	; 78
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8d 7f       	andi	r24, 0xFD	; 253
    16e6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
    16e8:	ae e4       	ldi	r26, 0x4E	; 78
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ee e4       	ldi	r30, 0x4E	; 78
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	84 60       	ori	r24, 0x04	; 4
    16f4:	8c 93       	st	X, r24
    16f6:	1f c0       	rjmp	.+62     	; 0x1736 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 1024){
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	9b 81       	ldd	r25, Y+3	; 0x03
    16fc:	24 e0       	ldi	r18, 0x04	; 4
    16fe:	80 30       	cpi	r24, 0x00	; 0
    1700:	92 07       	cpc	r25, r18
    1702:	b1 f4       	brne	.+44     	; 0x1730 <Timer1_SetupForTimeMeasurement+0x124>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    1704:	ae e4       	ldi	r26, 0x4E	; 78
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ee e4       	ldi	r30, 0x4E	; 78
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	81 60       	ori	r24, 0x01	; 1
    1710:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    1712:	ae e4       	ldi	r26, 0x4E	; 78
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ee e4       	ldi	r30, 0x4E	; 78
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	8d 7f       	andi	r24, 0xFD	; 253
    171e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
    1720:	ae e4       	ldi	r26, 0x4E	; 78
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ee e4       	ldi	r30, 0x4E	; 78
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	84 60       	ori	r24, 0x04	; 4
    172c:	8c 93       	st	X, r24
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <Timer1_SetupForTimeMeasurement+0x12a>

	} else{
		return Local_enuErrrorState;
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	8c 83       	std	Y+4, r24	; 0x04
    1734:	0b c0       	rjmp	.+22     	; 0x174c <Timer1_SetupForTimeMeasurement+0x140>
	}


	// Setup normal mode without no pwm
	TCCR1A_REG = 0x00;
    1736:	ef e4       	ldi	r30, 0x4F	; 79
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	10 82       	st	Z, r1

	// Reset the timer counter
	RESET_TIMER1();
    173c:	ec e4       	ldi	r30, 0x4C	; 76
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	11 82       	std	Z+1, r1	; 0x01
    1742:	10 82       	st	Z, r1

	Local_enuErrrorState = ERROR_STATUS_OK;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    1748:	29 81       	ldd	r18, Y+1	; 0x01
    174a:	2c 83       	std	Y+4, r18	; 0x04
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <TIMER1_u16ReadCount>:


uint16 TIMER1_u16ReadCount(void){
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    1764:	ec e4       	ldi	r30, 0x4C	; 76
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
}
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <TIMER1_voidStart>:


void TIMER1_voidStart(void) {
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        SET_BIT(TIMSK_REG, TIMSK_OCIE1A);

    #endif
}
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <TIMER1_voidStop>:


void TIMER1_voidStop(void) {
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	cd b7       	in	r28, 0x3d	; 61
    1786:	de b7       	in	r29, 0x3e	; 62
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        CLR_BIT(TIMSK_REG, TIMSK_OCIE1A);

    #endif
}
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <TIMER1_voidScheduleTask>:

uint8_t TIMER1_voidScheduleTask(void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds) {
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	61 97       	sbiw	r28, 0x11	; 17
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	9a 87       	std	Y+10, r25	; 0x0a
    17ac:	89 87       	std	Y+9, r24	; 0x09
    17ae:	4b 87       	std	Y+11, r20	; 0x0b
    17b0:	5c 87       	std	Y+12, r21	; 0x0c
    17b2:	6d 87       	std	Y+13, r22	; 0x0d
    17b4:	7e 87       	std	Y+14, r23	; 0x0e
    uint32_t Local_u32PrescalerValue = 0;
    17b6:	1d 82       	std	Y+5, r1	; 0x05
    17b8:	1e 82       	std	Y+6, r1	; 0x06
    17ba:	1f 82       	std	Y+7, r1	; 0x07
    17bc:	18 86       	std	Y+8, r1	; 0x08

    switch(TCCR1B & 0x07) {
    17be:	ee e4       	ldi	r30, 0x4E	; 78
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9c 01       	movw	r18, r24
    17ca:	27 70       	andi	r18, 0x07	; 7
    17cc:	30 70       	andi	r19, 0x00	; 0
    17ce:	39 8b       	std	Y+17, r19	; 0x11
    17d0:	28 8b       	std	Y+16, r18	; 0x10
    17d2:	88 89       	ldd	r24, Y+16	; 0x10
    17d4:	99 89       	ldd	r25, Y+17	; 0x11
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	91 05       	cpc	r25, r1
    17da:	69 f1       	breq	.+90     	; 0x1836 <TIMER1_voidScheduleTask+0xa8>
    17dc:	28 89       	ldd	r18, Y+16	; 0x10
    17de:	39 89       	ldd	r19, Y+17	; 0x11
    17e0:	24 30       	cpi	r18, 0x04	; 4
    17e2:	31 05       	cpc	r19, r1
    17e4:	5c f4       	brge	.+22     	; 0x17fc <TIMER1_voidScheduleTask+0x6e>
    17e6:	88 89       	ldd	r24, Y+16	; 0x10
    17e8:	99 89       	ldd	r25, Y+17	; 0x11
    17ea:	81 30       	cpi	r24, 0x01	; 1
    17ec:	91 05       	cpc	r25, r1
    17ee:	89 f0       	breq	.+34     	; 0x1812 <TIMER1_voidScheduleTask+0x84>
    17f0:	28 89       	ldd	r18, Y+16	; 0x10
    17f2:	39 89       	ldd	r19, Y+17	; 0x11
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	a9 f0       	breq	.+42     	; 0x1824 <TIMER1_voidScheduleTask+0x96>
    17fa:	38 c0       	rjmp	.+112    	; 0x186c <TIMER1_voidScheduleTask+0xde>
    17fc:	88 89       	ldd	r24, Y+16	; 0x10
    17fe:	99 89       	ldd	r25, Y+17	; 0x11
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	91 05       	cpc	r25, r1
    1804:	09 f1       	breq	.+66     	; 0x1848 <TIMER1_voidScheduleTask+0xba>
    1806:	28 89       	ldd	r18, Y+16	; 0x10
    1808:	39 89       	ldd	r19, Y+17	; 0x11
    180a:	25 30       	cpi	r18, 0x05	; 5
    180c:	31 05       	cpc	r19, r1
    180e:	29 f1       	breq	.+74     	; 0x185a <TIMER1_voidScheduleTask+0xcc>
    1810:	2d c0       	rjmp	.+90     	; 0x186c <TIMER1_voidScheduleTask+0xde>
        case 0x01: Local_u32PrescalerValue = 1; break;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	af 83       	std	Y+7, r26	; 0x07
    1820:	b8 87       	std	Y+8, r27	; 0x08
    1822:	27 c0       	rjmp	.+78     	; 0x1872 <TIMER1_voidScheduleTask+0xe4>
        case 0x02: Local_u32PrescalerValue = 8; break;
    1824:	88 e0       	ldi	r24, 0x08	; 8
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a0 e0       	ldi	r26, 0x00	; 0
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	af 83       	std	Y+7, r26	; 0x07
    1832:	b8 87       	std	Y+8, r27	; 0x08
    1834:	1e c0       	rjmp	.+60     	; 0x1872 <TIMER1_voidScheduleTask+0xe4>
        case 0x03: Local_u32PrescalerValue = 64; break;
    1836:	80 e4       	ldi	r24, 0x40	; 64
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a0 e0       	ldi	r26, 0x00	; 0
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	9e 83       	std	Y+6, r25	; 0x06
    1842:	af 83       	std	Y+7, r26	; 0x07
    1844:	b8 87       	std	Y+8, r27	; 0x08
    1846:	15 c0       	rjmp	.+42     	; 0x1872 <TIMER1_voidScheduleTask+0xe4>
        case 0x04: Local_u32PrescalerValue = 256; break;
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	af 83       	std	Y+7, r26	; 0x07
    1856:	b8 87       	std	Y+8, r27	; 0x08
    1858:	0c c0       	rjmp	.+24     	; 0x1872 <TIMER1_voidScheduleTask+0xe4>
        case 0x05: Local_u32PrescalerValue = 1024; break;
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	94 e0       	ldi	r25, 0x04	; 4
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	af 83       	std	Y+7, r26	; 0x07
    1868:	b8 87       	std	Y+8, r27	; 0x08
    186a:	03 c0       	rjmp	.+6      	; 0x1872 <TIMER1_voidScheduleTask+0xe4>
        default: return 1; // Invalid prescaler setting
    186c:	31 e0       	ldi	r19, 0x01	; 1
    186e:	3f 87       	std	Y+15, r19	; 0x0f
    1870:	31 c0       	rjmp	.+98     	; 0x18d4 <TIMER1_voidScheduleTask+0x146>
    }

    float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU) / Local_u32PrescalerValue;
    1872:	6b 85       	ldd	r22, Y+11	; 0x0b
    1874:	7c 85       	ldd	r23, Y+12	; 0x0c
    1876:	8d 85       	ldd	r24, Y+13	; 0x0d
    1878:	9e 85       	ldd	r25, Y+14	; 0x0e
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	34 e2       	ldi	r19, 0x24	; 36
    187e:	44 e7       	ldi	r20, 0x74	; 116
    1880:	5b e4       	ldi	r21, 0x4B	; 75
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	7c 01       	movw	r14, r24
    188c:	8d 01       	movw	r16, r26
    188e:	6d 81       	ldd	r22, Y+5	; 0x05
    1890:	7e 81       	ldd	r23, Y+6	; 0x06
    1892:	8f 81       	ldd	r24, Y+7	; 0x07
    1894:	98 85       	ldd	r25, Y+8	; 0x08
    1896:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    189a:	9b 01       	movw	r18, r22
    189c:	ac 01       	movw	r20, r24
    189e:	c8 01       	movw	r24, r16
    18a0:	b7 01       	movw	r22, r14
    18a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	ab 83       	std	Y+3, r26	; 0x03
    18b0:	bc 83       	std	Y+4, r27	; 0x04
            OCR1A = 65535;
            TIMER1_TARGET_NTICKS = (uint32_t)(Local_f64Totalticks / 65535.0);
        }
    #endif

    TIMER1_CURRENT_NTICKS = 0;
    18b2:	10 92 82 01 	sts	0x0182, r1
    18b6:	10 92 83 01 	sts	0x0183, r1
    18ba:	10 92 84 01 	sts	0x0184, r1
    18be:	10 92 85 01 	sts	0x0185, r1
    TIMERS_ISR_Functions[1] = TaskCallback;
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	90 93 8d 01 	sts	0x018D, r25
    18ca:	80 93 8c 01 	sts	0x018C, r24
    TIMER1_voidStart();
    18ce:	0e 94 b9 0b 	call	0x1772	; 0x1772 <TIMER1_voidStart>
    return 0;
    18d2:	1f 86       	std	Y+15, r1	; 0x0f
    18d4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    18d6:	61 96       	adiw	r28, 0x11	; 17
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	ff 90       	pop	r15
    18ec:	ef 90       	pop	r14
    18ee:	08 95       	ret

000018f0 <TIMER1_voidSetPWM>:


void TIMER1_voidSetPWM(uint8_t copy_u8DutyCycle) {
    18f0:	cf 92       	push	r12
    18f2:	df 92       	push	r13
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	df 93       	push	r29
    18fe:	cf 93       	push	r28
    1900:	00 d0       	rcall	.+0      	; 0x1902 <TIMER1_voidSetPWM+0x12>
    1902:	0f 92       	push	r0
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	8b 83       	std	Y+3, r24	; 0x03

		uint16_t Local_u16TopValue = 0;
    190a:	1a 82       	std	Y+2, r1	; 0x02
    190c:	19 82       	std	Y+1, r1	; 0x01
			// Ensure ICR1 is already set correctly during initialization
			Local_u16TopValue = ICR1;  // ICR1 for Phase and Frequency Correct

		#endif

		OCR1A_REG = (uint16_t)(((uint32_t)copy_u8DutyCycle * Local_u16TopValue) / 100);
    190e:	0f 2e       	mov	r0, r31
    1910:	fa e4       	ldi	r31, 0x4A	; 74
    1912:	cf 2e       	mov	r12, r31
    1914:	dd 24       	eor	r13, r13
    1916:	f0 2d       	mov	r31, r0
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	e8 2e       	mov	r14, r24
    191c:	ff 24       	eor	r15, r15
    191e:	00 e0       	ldi	r16, 0x00	; 0
    1920:	10 e0       	ldi	r17, 0x00	; 0
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	9c 01       	movw	r18, r24
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	c8 01       	movw	r24, r16
    192e:	b7 01       	movw	r22, r14
    1930:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__mulsi3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	24 e6       	ldi	r18, 0x64	; 100
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e0       	ldi	r20, 0x00	; 0
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	bc 01       	movw	r22, r24
    1942:	cd 01       	movw	r24, r26
    1944:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <__udivmodsi4>
    1948:	da 01       	movw	r26, r20
    194a:	c9 01       	movw	r24, r18
    194c:	f6 01       	movw	r30, r12
    194e:	91 83       	std	Z+1, r25	; 0x01
    1950:	80 83       	st	Z, r24

}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	cf 91       	pop	r28
    195a:	df 91       	pop	r29
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	cf 90       	pop	r12
    1968:	08 95       	ret

0000196a <TIMER1_voidSetPWM_16bit>:

#if(TIMER1_MODE_SELECT == TIMER1_MODE_FastPWM_16bit_FREQ || TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit_FREQ )
	void TIMER1_voidSetPWM_16bit(uint8_t copy_u8DutyCycle, uint32_t copy_u32Frequency){
    196a:	cf 92       	push	r12
    196c:	df 92       	push	r13
    196e:	ef 92       	push	r14
    1970:	ff 92       	push	r15
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	2b 97       	sbiw	r28, 0x0b	; 11
    1980:	0f b6       	in	r0, 0x3f	; 63
    1982:	f8 94       	cli
    1984:	de bf       	out	0x3e, r29	; 62
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	cd bf       	out	0x3d, r28	; 61
    198a:	8d 83       	std	Y+5, r24	; 0x05
    198c:	4e 83       	std	Y+6, r20	; 0x06
    198e:	5f 83       	std	Y+7, r21	; 0x07
    1990:	68 87       	std	Y+8, r22	; 0x08
    1992:	79 87       	std	Y+9, r23	; 0x09
		uint32_t Local_u32PrescalerValue = 0;
    1994:	19 82       	std	Y+1, r1	; 0x01
    1996:	1a 82       	std	Y+2, r1	; 0x02
    1998:	1b 82       	std	Y+3, r1	; 0x03
    199a:	1c 82       	std	Y+4, r1	; 0x04
		switch (TCCR1B_REG & 0x07) {
    199c:	ee e4       	ldi	r30, 0x4E	; 78
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	9c 01       	movw	r18, r24
    19a8:	27 70       	andi	r18, 0x07	; 7
    19aa:	30 70       	andi	r19, 0x00	; 0
    19ac:	3b 87       	std	Y+11, r19	; 0x0b
    19ae:	2a 87       	std	Y+10, r18	; 0x0a
    19b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	69 f1       	breq	.+90     	; 0x1a14 <TIMER1_voidSetPWM_16bit+0xaa>
    19ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    19bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    19be:	e4 30       	cpi	r30, 0x04	; 4
    19c0:	f1 05       	cpc	r31, r1
    19c2:	5c f4       	brge	.+22     	; 0x19da <TIMER1_voidSetPWM_16bit+0x70>
    19c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    19c6:	3b 85       	ldd	r19, Y+11	; 0x0b
    19c8:	21 30       	cpi	r18, 0x01	; 1
    19ca:	31 05       	cpc	r19, r1
    19cc:	89 f0       	breq	.+34     	; 0x19f0 <TIMER1_voidSetPWM_16bit+0x86>
    19ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    19d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    19d2:	82 30       	cpi	r24, 0x02	; 2
    19d4:	91 05       	cpc	r25, r1
    19d6:	a9 f0       	breq	.+42     	; 0x1a02 <TIMER1_voidSetPWM_16bit+0x98>
    19d8:	38 c0       	rjmp	.+112    	; 0x1a4a <TIMER1_voidSetPWM_16bit+0xe0>
    19da:	ea 85       	ldd	r30, Y+10	; 0x0a
    19dc:	fb 85       	ldd	r31, Y+11	; 0x0b
    19de:	e4 30       	cpi	r30, 0x04	; 4
    19e0:	f1 05       	cpc	r31, r1
    19e2:	09 f1       	breq	.+66     	; 0x1a26 <TIMER1_voidSetPWM_16bit+0xbc>
    19e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    19e6:	3b 85       	ldd	r19, Y+11	; 0x0b
    19e8:	25 30       	cpi	r18, 0x05	; 5
    19ea:	31 05       	cpc	r19, r1
    19ec:	29 f1       	breq	.+74     	; 0x1a38 <TIMER1_voidSetPWM_16bit+0xce>
    19ee:	2d c0       	rjmp	.+90     	; 0x1a4a <TIMER1_voidSetPWM_16bit+0xe0>
			case 0x01: Local_u32PrescalerValue = 1; break;
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a0 e0       	ldi	r26, 0x00	; 0
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	9a 83       	std	Y+2, r25	; 0x02
    19fc:	ab 83       	std	Y+3, r26	; 0x03
    19fe:	bc 83       	std	Y+4, r27	; 0x04
    1a00:	2c c0       	rjmp	.+88     	; 0x1a5a <TIMER1_voidSetPWM_16bit+0xf0>
			case 0x02: Local_u32PrescalerValue = 8; break;
    1a02:	88 e0       	ldi	r24, 0x08	; 8
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a0 e0       	ldi	r26, 0x00	; 0
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	ab 83       	std	Y+3, r26	; 0x03
    1a10:	bc 83       	std	Y+4, r27	; 0x04
    1a12:	23 c0       	rjmp	.+70     	; 0x1a5a <TIMER1_voidSetPWM_16bit+0xf0>
			case 0x03: Local_u32PrescalerValue = 64; break;
    1a14:	80 e4       	ldi	r24, 0x40	; 64
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	a0 e0       	ldi	r26, 0x00	; 0
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	ab 83       	std	Y+3, r26	; 0x03
    1a22:	bc 83       	std	Y+4, r27	; 0x04
    1a24:	1a c0       	rjmp	.+52     	; 0x1a5a <TIMER1_voidSetPWM_16bit+0xf0>
			case 0x04: Local_u32PrescalerValue = 256; break;
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	a0 e0       	ldi	r26, 0x00	; 0
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	ab 83       	std	Y+3, r26	; 0x03
    1a34:	bc 83       	std	Y+4, r27	; 0x04
    1a36:	11 c0       	rjmp	.+34     	; 0x1a5a <TIMER1_voidSetPWM_16bit+0xf0>
			case 0x05: Local_u32PrescalerValue = 1024; break;
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	94 e0       	ldi	r25, 0x04	; 4
    1a3c:	a0 e0       	ldi	r26, 0x00	; 0
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	9a 83       	std	Y+2, r25	; 0x02
    1a44:	ab 83       	std	Y+3, r26	; 0x03
    1a46:	bc 83       	std	Y+4, r27	; 0x04
    1a48:	08 c0       	rjmp	.+16     	; 0x1a5a <TIMER1_voidSetPWM_16bit+0xf0>
			default: Local_u32PrescalerValue = 8; // Default to prescaler 8
    1a4a:	88 e0       	ldi	r24, 0x08	; 8
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a0 e0       	ldi	r26, 0x00	; 0
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	ab 83       	std	Y+3, r26	; 0x03
    1a58:	bc 83       	std	Y+4, r27	; 0x04
		}

		// Calculate TOP value based on desired frequency for Fast PWM or Phase and Frequency Correct PWM
		ICR1 = ( F_CPU / (Local_u32PrescalerValue * copy_u32Frequency) ) - 1;
    1a5a:	06 e4       	ldi	r16, 0x46	; 70
    1a5c:	10 e0       	ldi	r17, 0x00	; 0
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	ab 81       	ldd	r26, Y+3	; 0x03
    1a64:	bc 81       	ldd	r27, Y+4	; 0x04
    1a66:	2e 81       	ldd	r18, Y+6	; 0x06
    1a68:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6a:	48 85       	ldd	r20, Y+8	; 0x08
    1a6c:	59 85       	ldd	r21, Y+9	; 0x09
    1a6e:	bc 01       	movw	r22, r24
    1a70:	cd 01       	movw	r24, r26
    1a72:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__mulsi3>
    1a76:	9b 01       	movw	r18, r22
    1a78:	ac 01       	movw	r20, r24
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	94 e2       	ldi	r25, 0x24	; 36
    1a7e:	a4 ef       	ldi	r26, 0xF4	; 244
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <__udivmodsi4>
    1a8a:	da 01       	movw	r26, r20
    1a8c:	c9 01       	movw	r24, r18
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f8 01       	movw	r30, r16
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24

		// Calculate OCR1A value based on desired duty cycle percentage
		OCR1A_REG = (uint16_t) (((uint32_t)copy_u8DutyCycle * ICR1) / 100);
    1a96:	0f 2e       	mov	r0, r31
    1a98:	fa e4       	ldi	r31, 0x4A	; 74
    1a9a:	cf 2e       	mov	r12, r31
    1a9c:	dd 24       	eor	r13, r13
    1a9e:	f0 2d       	mov	r31, r0
    1aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa2:	e8 2e       	mov	r14, r24
    1aa4:	ff 24       	eor	r15, r15
    1aa6:	00 e0       	ldi	r16, 0x00	; 0
    1aa8:	10 e0       	ldi	r17, 0x00	; 0
    1aaa:	e6 e4       	ldi	r30, 0x46	; 70
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	9c 01       	movw	r18, r24
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	50 e0       	ldi	r21, 0x00	; 0
    1ab8:	c8 01       	movw	r24, r16
    1aba:	b7 01       	movw	r22, r14
    1abc:	0e 94 83 26 	call	0x4d06	; 0x4d06 <__mulsi3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	24 e6       	ldi	r18, 0x64	; 100
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <__udivmodsi4>
    1ad4:	da 01       	movw	r26, r20
    1ad6:	c9 01       	movw	r24, r18
    1ad8:	f6 01       	movw	r30, r12
    1ada:	91 83       	std	Z+1, r25	; 0x01
    1adc:	80 83       	st	Z, r24



	}
    1ade:	2b 96       	adiw	r28, 0x0b	; 11
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	ff 90       	pop	r15
    1af4:	ef 90       	pop	r14
    1af6:	df 90       	pop	r13
    1af8:	cf 90       	pop	r12
    1afa:	08 95       	ret

00001afc <TIMER2_voidInit>:
#endif
/******************************************************************************************************/


/****************************************** TIMER2 FUNCTIONS ******************************************/
void TIMER2_voidInit(void){
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
			#endif

		#endif

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_FastPWM)
		SET_BIT(TCCR2_REG, TCCR2_WGM20);
    1b04:	a5 e4       	ldi	r26, 0x45	; 69
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e4       	ldi	r30, 0x45	; 69
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 64       	ori	r24, 0x40	; 64
    1b10:	8c 93       	st	X, r24
		SET_BIT(TCCR2_REG, TCCR2_WGM21);
    1b12:	a5 e4       	ldi	r26, 0x45	; 69
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e4       	ldi	r30, 0x45	; 69
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	88 60       	ori	r24, 0x08	; 8
    1b1e:	8c 93       	st	X, r24

		#if(TIMER2_FastPwm_Type == TIMER_FastPwmType_Inverted)
			CLR_BIT(TCCR2_REG, TCCR2_COM20);
    1b20:	a5 e4       	ldi	r26, 0x45	; 69
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e5 e4       	ldi	r30, 0x45	; 69
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	8f 7e       	andi	r24, 0xEF	; 239
    1b2c:	8c 93       	st	X, r24
			SET_BIT(TCCR2_REG, TCCR2_COM21);
    1b2e:	a5 e4       	ldi	r26, 0x45	; 69
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e5 e4       	ldi	r30, 0x45	; 69
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	80 62       	ori	r24, 0x20	; 32
    1b3a:	8c 93       	st	X, r24
		#elif(TIMER2_FastPwm_Type == TIMER_FastPwmType_NonInverted)
			SET_BIT(TCCR2_REG, TCCR2_COM20);
			SET_BIT(TCCR2_REG, TCCR2_COM21);
		#endif
		DIO_enuSetPinDirection(TIMER_OC2_PORT, TIMER_OC2_PIN, DIO_u8OUTPUT);
    1b3c:	83 e0       	ldi	r24, 0x03	; 3
    1b3e:	67 e0       	ldi	r22, 0x07	; 7
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
		SET_BIT(TCCR2_REG, TCCR2_CS20);
		SET_BIT(TCCR2_REG, TCCR2_CS21);
		CLR_BIT(TCCR2_REG, TCCR2_CS22);

	#elif(TIMER2_CLK_PRE_SELECT == TIMER_PRES_64)
		CLR_BIT(TCCR2_REG, TCCR2_CS20);
    1b46:	a5 e4       	ldi	r26, 0x45	; 69
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e5 e4       	ldi	r30, 0x45	; 69
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8e 7f       	andi	r24, 0xFE	; 254
    1b52:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_CS21);
    1b54:	a5 e4       	ldi	r26, 0x45	; 69
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e5 e4       	ldi	r30, 0x45	; 69
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8d 7f       	andi	r24, 0xFD	; 253
    1b60:	8c 93       	st	X, r24
		SET_BIT(TCCR2_REG, TCCR2_CS22);
    1b62:	a5 e4       	ldi	r26, 0x45	; 69
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e5 e4       	ldi	r30, 0x45	; 69
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	84 60       	ori	r24, 0x04	; 4
    1b6e:	8c 93       	st	X, r24
	#endif
	/******************************************************************************/


	// Turn Global Interrupt ON
	GIE_enuEnable();
    1b70:	0e 94 2b 12 	call	0x2456	; 0x2456 <GIE_enuEnable>


}
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <TIMER2_voidStart>:

void TIMER2_voidStart(void){
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		SET_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <TIMER2_voidStop>:

void TIMER2_voidStop(void){
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		CLR_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <TIMER2_voidScheduleTask>:

uint8_t TIMER2_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    1b96:	ef 92       	push	r14
    1b98:	ff 92       	push	r15
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	60 97       	sbiw	r28, 0x10	; 16
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	9a 87       	std	Y+10, r25	; 0x0a
    1bb4:	89 87       	std	Y+9, r24	; 0x09
    1bb6:	4b 87       	std	Y+11, r20	; 0x0b
    1bb8:	5c 87       	std	Y+12, r21	; 0x0c
    1bba:	6d 87       	std	Y+13, r22	; 0x0d
    1bbc:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    1bbe:	1d 82       	std	Y+5, r1	; 0x05
    1bc0:	1e 82       	std	Y+6, r1	; 0x06
    1bc2:	1f 82       	std	Y+7, r1	; 0x07
    1bc4:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR2 & 0x07){
    1bc6:	e5 e4       	ldi	r30, 0x45	; 69
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	9c 01       	movw	r18, r24
    1bd2:	27 70       	andi	r18, 0x07	; 7
    1bd4:	30 70       	andi	r19, 0x00	; 0
    1bd6:	38 8b       	std	Y+16, r19	; 0x10
    1bd8:	2f 87       	std	Y+15, r18	; 0x0f
    1bda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bdc:	98 89       	ldd	r25, Y+16	; 0x10
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	91 05       	cpc	r25, r1
    1be2:	69 f1       	breq	.+90     	; 0x1c3e <TIMER2_voidScheduleTask+0xa8>
    1be4:	2f 85       	ldd	r18, Y+15	; 0x0f
    1be6:	38 89       	ldd	r19, Y+16	; 0x10
    1be8:	24 30       	cpi	r18, 0x04	; 4
    1bea:	31 05       	cpc	r19, r1
    1bec:	5c f4       	brge	.+22     	; 0x1c04 <TIMER2_voidScheduleTask+0x6e>
    1bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf0:	98 89       	ldd	r25, Y+16	; 0x10
    1bf2:	81 30       	cpi	r24, 0x01	; 1
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	89 f0       	breq	.+34     	; 0x1c1a <TIMER2_voidScheduleTask+0x84>
    1bf8:	2f 85       	ldd	r18, Y+15	; 0x0f
    1bfa:	38 89       	ldd	r19, Y+16	; 0x10
    1bfc:	22 30       	cpi	r18, 0x02	; 2
    1bfe:	31 05       	cpc	r19, r1
    1c00:	a9 f0       	breq	.+42     	; 0x1c2c <TIMER2_voidScheduleTask+0x96>
    1c02:	37 c0       	rjmp	.+110    	; 0x1c72 <TIMER2_voidScheduleTask+0xdc>
    1c04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c06:	98 89       	ldd	r25, Y+16	; 0x10
    1c08:	84 30       	cpi	r24, 0x04	; 4
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	09 f1       	breq	.+66     	; 0x1c50 <TIMER2_voidScheduleTask+0xba>
    1c0e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1c10:	38 89       	ldd	r19, Y+16	; 0x10
    1c12:	25 30       	cpi	r18, 0x05	; 5
    1c14:	31 05       	cpc	r19, r1
    1c16:	29 f1       	breq	.+74     	; 0x1c62 <TIMER2_voidScheduleTask+0xcc>
    1c18:	2c c0       	rjmp	.+88     	; 0x1c72 <TIMER2_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 e0       	ldi	r26, 0x00	; 0
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	af 83       	std	Y+7, r26	; 0x07
    1c28:	b8 87       	std	Y+8, r27	; 0x08
    1c2a:	23 c0       	rjmp	.+70     	; 0x1c72 <TIMER2_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    1c2c:	88 e0       	ldi	r24, 0x08	; 8
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e0       	ldi	r26, 0x00	; 0
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	9e 83       	std	Y+6, r25	; 0x06
    1c38:	af 83       	std	Y+7, r26	; 0x07
    1c3a:	b8 87       	std	Y+8, r27	; 0x08
    1c3c:	1a c0       	rjmp	.+52     	; 0x1c72 <TIMER2_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    1c3e:	80 e4       	ldi	r24, 0x40	; 64
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	a0 e0       	ldi	r26, 0x00	; 0
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	8d 83       	std	Y+5, r24	; 0x05
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	af 83       	std	Y+7, r26	; 0x07
    1c4c:	b8 87       	std	Y+8, r27	; 0x08
    1c4e:	11 c0       	rjmp	.+34     	; 0x1c72 <TIMER2_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	91 e0       	ldi	r25, 0x01	; 1
    1c54:	a0 e0       	ldi	r26, 0x00	; 0
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	af 83       	std	Y+7, r26	; 0x07
    1c5e:	b8 87       	std	Y+8, r27	; 0x08
    1c60:	08 c0       	rjmp	.+16     	; 0x1c72 <TIMER2_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	94 e0       	ldi	r25, 0x04	; 4
    1c66:	a0 e0       	ldi	r26, 0x00	; 0
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	9e 83       	std	Y+6, r25	; 0x06
    1c6e:	af 83       	std	Y+7, r26	; 0x07
    1c70:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    1c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	34 e2       	ldi	r19, 0x24	; 36
    1c7e:	44 e7       	ldi	r20, 0x74	; 116
    1c80:	5b e4       	ldi	r21, 0x4B	; 75
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	7c 01       	movw	r14, r24
    1c8c:	8d 01       	movw	r16, r26
    1c8e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c90:	7e 81       	ldd	r23, Y+6	; 0x06
    1c92:	8f 81       	ldd	r24, Y+7	; 0x07
    1c94:	98 85       	ldd	r25, Y+8	; 0x08
    1c96:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	ac 01       	movw	r20, r24
    1c9e:	c8 01       	movw	r24, r16
    1ca0:	b7 01       	movw	r22, r14
    1ca2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	ab 83       	std	Y+3, r26	; 0x03
    1cb0:	bc 83       	std	Y+4, r27	; 0x04
		}

	#endif


		TIMERS_ISR_Functions[2] = TaskCallback;
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	90 93 8f 01 	sts	0x018F, r25
    1cba:	80 93 8e 01 	sts	0x018E, r24
		TIMER2_voidStart();
    1cbe:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <TIMER2_voidStart>
	return 0;
    1cc2:	80 e0       	ldi	r24, 0x00	; 0

}
    1cc4:	60 96       	adiw	r28, 0x10	; 16
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	08 95       	ret

00001cde <TIMER2_voidSetPWM>:


void  TIMER2_voidSetPWM(uint8_t copy_u8DutyCycle){
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	0f 92       	push	r0
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Avr32 does has floating point operation
	 * **/


	OCR2_REG = (uint8_t)(((uint16_t)copy_u8DutyCycle * 256) / 100);
    1cea:	e3 e4       	ldi	r30, 0x43	; 67
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	98 2f       	mov	r25, r24
    1cf6:	88 27       	eor	r24, r24
    1cf8:	24 e6       	ldi	r18, 0x64	; 100
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	b9 01       	movw	r22, r18
    1cfe:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__udivmodhi4>
    1d02:	cb 01       	movw	r24, r22
    1d04:	80 83       	st	Z, r24
}
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <TIMER_voidWDTSleep>:
/*******************************************************************************************************/



/****************************************** WATCH DOG TIMER INTERFACE ******************************************/
void TIMER_voidWDTSleep(uint8_t copy_u8WdtPeriod){
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	89 83       	std	Y+1, r24	; 0x01
    // Reset watchdog timer using macro
    WDT_voidRestart();
    1d1a:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    1d1c:	a1 e4       	ldi	r26, 0x41	; 65
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e1 e4       	ldi	r30, 0x41	; 65
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	88 61       	ori	r24, 0x18	; 24
    1d28:	8c 93       	st	X, r24

    // Set watchdog timer prescaler and enable watchdog timer
    WDTCSR_REG = (1 << WDTCSR_WDE) | copy_u8WdtPeriod;
    1d2a:	e1 e4       	ldi	r30, 0x41	; 65
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	88 60       	ori	r24, 0x08	; 8
    1d32:	80 83       	st	Z, r24

}
    1d34:	0f 90       	pop	r0
    1d36:	cf 91       	pop	r28
    1d38:	df 91       	pop	r29
    1d3a:	08 95       	ret

00001d3c <TIMER_voidWDTEnable>:

void TIMER_voidWDTEnable (void){
    1d3c:	df 93       	push	r29
    1d3e:	cf 93       	push	r28
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    // Reset watchdog timer using macro
    WDT_voidRestart();
    1d44:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    1d46:	a1 e4       	ldi	r26, 0x41	; 65
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e1 e4       	ldi	r30, 0x41	; 65
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	88 61       	ori	r24, 0x18	; 24
    1d52:	8c 93       	st	X, r24

    // Enable watchdog timer with the previously set period
    SET_BIT(WDTCSR_REG, WDTCSR_WDE);
    1d54:	a1 e4       	ldi	r26, 0x41	; 65
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e1 e4       	ldi	r30, 0x41	; 65
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 60       	ori	r24, 0x08	; 8
    1d60:	8c 93       	st	X, r24

}
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <TIMER_voidWDTDisable>:


void TIMER_voidWDTDisable(void) {
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    // Reset watchdog timer using macro
    WDT_voidRestart();
    1d70:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    1d72:	a1 e4       	ldi	r26, 0x41	; 65
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e1 e4       	ldi	r30, 0x41	; 65
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	88 61       	ori	r24, 0x18	; 24
    1d7e:	8c 93       	st	X, r24

    // Disable watchdog timer
    WDTCSR_REG = 0x00;
    1d80:	e1 e4       	ldi	r30, 0x41	; 65
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	10 82       	st	Z, r1
}
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <__vector_11>:





ISR(TIMER0_OVF_vect){
    1d8c:	1f 92       	push	r1
    1d8e:	0f 92       	push	r0
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	0f 92       	push	r0
    1d94:	11 24       	eor	r1, r1
    1d96:	2f 93       	push	r18
    1d98:	3f 93       	push	r19
    1d9a:	4f 93       	push	r20
    1d9c:	5f 93       	push	r21
    1d9e:	6f 93       	push	r22
    1da0:	7f 93       	push	r23
    1da2:	8f 93       	push	r24
    1da4:	9f 93       	push	r25
    1da6:	af 93       	push	r26
    1da8:	bf 93       	push	r27
    1daa:	ef 93       	push	r30
    1dac:	ff 93       	push	r31
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	cd b7       	in	r28, 0x3d	; 61
    1db4:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    1db6:	80 91 7e 01 	lds	r24, 0x017E
    1dba:	90 91 7f 01 	lds	r25, 0x017F
    1dbe:	a0 91 80 01 	lds	r26, 0x0180
    1dc2:	b0 91 81 01 	lds	r27, 0x0181
    1dc6:	01 96       	adiw	r24, 0x01	; 1
    1dc8:	a1 1d       	adc	r26, r1
    1dca:	b1 1d       	adc	r27, r1
    1dcc:	80 93 7e 01 	sts	0x017E, r24
    1dd0:	90 93 7f 01 	sts	0x017F, r25
    1dd4:	a0 93 80 01 	sts	0x0180, r26
    1dd8:	b0 93 81 01 	sts	0x0181, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    1ddc:	20 91 7e 01 	lds	r18, 0x017E
    1de0:	30 91 7f 01 	lds	r19, 0x017F
    1de4:	40 91 80 01 	lds	r20, 0x0180
    1de8:	50 91 81 01 	lds	r21, 0x0181
    1dec:	80 91 90 01 	lds	r24, 0x0190
    1df0:	90 91 91 01 	lds	r25, 0x0191
    1df4:	a0 91 92 01 	lds	r26, 0x0192
    1df8:	b0 91 93 01 	lds	r27, 0x0193
    1dfc:	28 17       	cp	r18, r24
    1dfe:	39 07       	cpc	r19, r25
    1e00:	4a 07       	cpc	r20, r26
    1e02:	5b 07       	cpc	r21, r27
    1e04:	68 f0       	brcs	.+26     	; 0x1e20 <__vector_11+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    1e06:	10 92 7e 01 	sts	0x017E, r1
    1e0a:	10 92 7f 01 	sts	0x017F, r1
    1e0e:	10 92 80 01 	sts	0x0180, r1
    1e12:	10 92 81 01 	sts	0x0181, r1
		TIMERS_ISR_Functions[0]();
    1e16:	e0 91 8a 01 	lds	r30, 0x018A
    1e1a:	f0 91 8b 01 	lds	r31, 0x018B
    1e1e:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	ff 91       	pop	r31
    1e26:	ef 91       	pop	r30
    1e28:	bf 91       	pop	r27
    1e2a:	af 91       	pop	r26
    1e2c:	9f 91       	pop	r25
    1e2e:	8f 91       	pop	r24
    1e30:	7f 91       	pop	r23
    1e32:	6f 91       	pop	r22
    1e34:	5f 91       	pop	r21
    1e36:	4f 91       	pop	r20
    1e38:	3f 91       	pop	r19
    1e3a:	2f 91       	pop	r18
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	0f 90       	pop	r0
    1e42:	1f 90       	pop	r1
    1e44:	18 95       	reti

00001e46 <__vector_10>:

ISR(TIMER0_COMP_vect){
    1e46:	1f 92       	push	r1
    1e48:	0f 92       	push	r0
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	0f 92       	push	r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	2f 93       	push	r18
    1e52:	3f 93       	push	r19
    1e54:	4f 93       	push	r20
    1e56:	5f 93       	push	r21
    1e58:	6f 93       	push	r22
    1e5a:	7f 93       	push	r23
    1e5c:	8f 93       	push	r24
    1e5e:	9f 93       	push	r25
    1e60:	af 93       	push	r26
    1e62:	bf 93       	push	r27
    1e64:	ef 93       	push	r30
    1e66:	ff 93       	push	r31
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    1e70:	80 91 7e 01 	lds	r24, 0x017E
    1e74:	90 91 7f 01 	lds	r25, 0x017F
    1e78:	a0 91 80 01 	lds	r26, 0x0180
    1e7c:	b0 91 81 01 	lds	r27, 0x0181
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	a1 1d       	adc	r26, r1
    1e84:	b1 1d       	adc	r27, r1
    1e86:	80 93 7e 01 	sts	0x017E, r24
    1e8a:	90 93 7f 01 	sts	0x017F, r25
    1e8e:	a0 93 80 01 	sts	0x0180, r26
    1e92:	b0 93 81 01 	sts	0x0181, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    1e96:	20 91 7e 01 	lds	r18, 0x017E
    1e9a:	30 91 7f 01 	lds	r19, 0x017F
    1e9e:	40 91 80 01 	lds	r20, 0x0180
    1ea2:	50 91 81 01 	lds	r21, 0x0181
    1ea6:	80 91 90 01 	lds	r24, 0x0190
    1eaa:	90 91 91 01 	lds	r25, 0x0191
    1eae:	a0 91 92 01 	lds	r26, 0x0192
    1eb2:	b0 91 93 01 	lds	r27, 0x0193
    1eb6:	28 17       	cp	r18, r24
    1eb8:	39 07       	cpc	r19, r25
    1eba:	4a 07       	cpc	r20, r26
    1ebc:	5b 07       	cpc	r21, r27
    1ebe:	68 f0       	brcs	.+26     	; 0x1eda <__vector_10+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    1ec0:	10 92 7e 01 	sts	0x017E, r1
    1ec4:	10 92 7f 01 	sts	0x017F, r1
    1ec8:	10 92 80 01 	sts	0x0180, r1
    1ecc:	10 92 81 01 	sts	0x0181, r1
		TIMERS_ISR_Functions[0]();
    1ed0:	e0 91 8a 01 	lds	r30, 0x018A
    1ed4:	f0 91 8b 01 	lds	r31, 0x018B
    1ed8:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	ff 91       	pop	r31
    1ee0:	ef 91       	pop	r30
    1ee2:	bf 91       	pop	r27
    1ee4:	af 91       	pop	r26
    1ee6:	9f 91       	pop	r25
    1ee8:	8f 91       	pop	r24
    1eea:	7f 91       	pop	r23
    1eec:	6f 91       	pop	r22
    1eee:	5f 91       	pop	r21
    1ef0:	4f 91       	pop	r20
    1ef2:	3f 91       	pop	r19
    1ef4:	2f 91       	pop	r18
    1ef6:	0f 90       	pop	r0
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	0f 90       	pop	r0
    1efc:	1f 90       	pop	r1
    1efe:	18 95       	reti

00001f00 <__vector_9>:

ISR(TIMER1_OVF_vect){
    1f00:	1f 92       	push	r1
    1f02:	0f 92       	push	r0
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	0f 92       	push	r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	2f 93       	push	r18
    1f0c:	3f 93       	push	r19
    1f0e:	4f 93       	push	r20
    1f10:	5f 93       	push	r21
    1f12:	6f 93       	push	r22
    1f14:	7f 93       	push	r23
    1f16:	8f 93       	push	r24
    1f18:	9f 93       	push	r25
    1f1a:	af 93       	push	r26
    1f1c:	bf 93       	push	r27
    1f1e:	ef 93       	push	r30
    1f20:	ff 93       	push	r31
    1f22:	df 93       	push	r29
    1f24:	cf 93       	push	r28
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62

	TIMER1_CURRENT_NTICKS++;
    1f2a:	80 91 82 01 	lds	r24, 0x0182
    1f2e:	90 91 83 01 	lds	r25, 0x0183
    1f32:	a0 91 84 01 	lds	r26, 0x0184
    1f36:	b0 91 85 01 	lds	r27, 0x0185
    1f3a:	01 96       	adiw	r24, 0x01	; 1
    1f3c:	a1 1d       	adc	r26, r1
    1f3e:	b1 1d       	adc	r27, r1
    1f40:	80 93 82 01 	sts	0x0182, r24
    1f44:	90 93 83 01 	sts	0x0183, r25
    1f48:	a0 93 84 01 	sts	0x0184, r26
    1f4c:	b0 93 85 01 	sts	0x0185, r27

	if(TIMER1_CURRENT_NTICKS >= TIMER1_TARGET_NTICKS){
    1f50:	20 91 82 01 	lds	r18, 0x0182
    1f54:	30 91 83 01 	lds	r19, 0x0183
    1f58:	40 91 84 01 	lds	r20, 0x0184
    1f5c:	50 91 85 01 	lds	r21, 0x0185
    1f60:	80 91 94 01 	lds	r24, 0x0194
    1f64:	90 91 95 01 	lds	r25, 0x0195
    1f68:	a0 91 96 01 	lds	r26, 0x0196
    1f6c:	b0 91 97 01 	lds	r27, 0x0197
    1f70:	28 17       	cp	r18, r24
    1f72:	39 07       	cpc	r19, r25
    1f74:	4a 07       	cpc	r20, r26
    1f76:	5b 07       	cpc	r21, r27
    1f78:	68 f0       	brcs	.+26     	; 0x1f94 <__vector_9+0x94>
		TIMER1_CURRENT_NTICKS = 0;
    1f7a:	10 92 82 01 	sts	0x0182, r1
    1f7e:	10 92 83 01 	sts	0x0183, r1
    1f82:	10 92 84 01 	sts	0x0184, r1
    1f86:	10 92 85 01 	sts	0x0185, r1
		TIMERS_ISR_Functions[1]();
    1f8a:	e0 91 8c 01 	lds	r30, 0x018C
    1f8e:	f0 91 8d 01 	lds	r31, 0x018D
    1f92:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	ff 91       	pop	r31
    1f9a:	ef 91       	pop	r30
    1f9c:	bf 91       	pop	r27
    1f9e:	af 91       	pop	r26
    1fa0:	9f 91       	pop	r25
    1fa2:	8f 91       	pop	r24
    1fa4:	7f 91       	pop	r23
    1fa6:	6f 91       	pop	r22
    1fa8:	5f 91       	pop	r21
    1faa:	4f 91       	pop	r20
    1fac:	3f 91       	pop	r19
    1fae:	2f 91       	pop	r18
    1fb0:	0f 90       	pop	r0
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	0f 90       	pop	r0
    1fb6:	1f 90       	pop	r1
    1fb8:	18 95       	reti

00001fba <__vector_7>:

ISR(TIMER1_COMPA_vect){
    1fba:	1f 92       	push	r1
    1fbc:	0f 92       	push	r0
    1fbe:	0f b6       	in	r0, 0x3f	; 63
    1fc0:	0f 92       	push	r0
    1fc2:	11 24       	eor	r1, r1
    1fc4:	2f 93       	push	r18
    1fc6:	3f 93       	push	r19
    1fc8:	4f 93       	push	r20
    1fca:	5f 93       	push	r21
    1fcc:	6f 93       	push	r22
    1fce:	7f 93       	push	r23
    1fd0:	8f 93       	push	r24
    1fd2:	9f 93       	push	r25
    1fd4:	af 93       	push	r26
    1fd6:	bf 93       	push	r27
    1fd8:	ef 93       	push	r30
    1fda:	ff 93       	push	r31
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62


	#if(TIMER1_MODE_SELECT == TIMER1_MODE_ANY_PIN_PWM)
		DIO_enuTogglePinValue(global_u8PortID, global_u8PinID);
	#else
		TIMER1_CURRENT_NTICKS++;
    1fe4:	80 91 82 01 	lds	r24, 0x0182
    1fe8:	90 91 83 01 	lds	r25, 0x0183
    1fec:	a0 91 84 01 	lds	r26, 0x0184
    1ff0:	b0 91 85 01 	lds	r27, 0x0185
    1ff4:	01 96       	adiw	r24, 0x01	; 1
    1ff6:	a1 1d       	adc	r26, r1
    1ff8:	b1 1d       	adc	r27, r1
    1ffa:	80 93 82 01 	sts	0x0182, r24
    1ffe:	90 93 83 01 	sts	0x0183, r25
    2002:	a0 93 84 01 	sts	0x0184, r26
    2006:	b0 93 85 01 	sts	0x0185, r27

		if(TIMER1_CURRENT_NTICKS >= TIMER1_TARGET_NTICKS){
    200a:	20 91 82 01 	lds	r18, 0x0182
    200e:	30 91 83 01 	lds	r19, 0x0183
    2012:	40 91 84 01 	lds	r20, 0x0184
    2016:	50 91 85 01 	lds	r21, 0x0185
    201a:	80 91 94 01 	lds	r24, 0x0194
    201e:	90 91 95 01 	lds	r25, 0x0195
    2022:	a0 91 96 01 	lds	r26, 0x0196
    2026:	b0 91 97 01 	lds	r27, 0x0197
    202a:	28 17       	cp	r18, r24
    202c:	39 07       	cpc	r19, r25
    202e:	4a 07       	cpc	r20, r26
    2030:	5b 07       	cpc	r21, r27
    2032:	68 f0       	brcs	.+26     	; 0x204e <__vector_7+0x94>
			TIMER1_CURRENT_NTICKS = 0;
    2034:	10 92 82 01 	sts	0x0182, r1
    2038:	10 92 83 01 	sts	0x0183, r1
    203c:	10 92 84 01 	sts	0x0184, r1
    2040:	10 92 85 01 	sts	0x0185, r1
			TIMERS_ISR_Functions[1]();
    2044:	e0 91 8c 01 	lds	r30, 0x018C
    2048:	f0 91 8d 01 	lds	r31, 0x018D
    204c:	09 95       	icall
		}
	#endif


}
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	ff 91       	pop	r31
    2054:	ef 91       	pop	r30
    2056:	bf 91       	pop	r27
    2058:	af 91       	pop	r26
    205a:	9f 91       	pop	r25
    205c:	8f 91       	pop	r24
    205e:	7f 91       	pop	r23
    2060:	6f 91       	pop	r22
    2062:	5f 91       	pop	r21
    2064:	4f 91       	pop	r20
    2066:	3f 91       	pop	r19
    2068:	2f 91       	pop	r18
    206a:	0f 90       	pop	r0
    206c:	0f be       	out	0x3f, r0	; 63
    206e:	0f 90       	pop	r0
    2070:	1f 90       	pop	r1
    2072:	18 95       	reti

00002074 <__vector_5>:


ISR(TIMER2_OVF_vect){
    2074:	1f 92       	push	r1
    2076:	0f 92       	push	r0
    2078:	0f b6       	in	r0, 0x3f	; 63
    207a:	0f 92       	push	r0
    207c:	11 24       	eor	r1, r1
    207e:	2f 93       	push	r18
    2080:	3f 93       	push	r19
    2082:	4f 93       	push	r20
    2084:	5f 93       	push	r21
    2086:	6f 93       	push	r22
    2088:	7f 93       	push	r23
    208a:	8f 93       	push	r24
    208c:	9f 93       	push	r25
    208e:	af 93       	push	r26
    2090:	bf 93       	push	r27
    2092:	ef 93       	push	r30
    2094:	ff 93       	push	r31
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    209e:	80 91 86 01 	lds	r24, 0x0186
    20a2:	90 91 87 01 	lds	r25, 0x0187
    20a6:	a0 91 88 01 	lds	r26, 0x0188
    20aa:	b0 91 89 01 	lds	r27, 0x0189
    20ae:	01 96       	adiw	r24, 0x01	; 1
    20b0:	a1 1d       	adc	r26, r1
    20b2:	b1 1d       	adc	r27, r1
    20b4:	80 93 86 01 	sts	0x0186, r24
    20b8:	90 93 87 01 	sts	0x0187, r25
    20bc:	a0 93 88 01 	sts	0x0188, r26
    20c0:	b0 93 89 01 	sts	0x0189, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    20c4:	20 91 86 01 	lds	r18, 0x0186
    20c8:	30 91 87 01 	lds	r19, 0x0187
    20cc:	40 91 88 01 	lds	r20, 0x0188
    20d0:	50 91 89 01 	lds	r21, 0x0189
    20d4:	80 91 98 01 	lds	r24, 0x0198
    20d8:	90 91 99 01 	lds	r25, 0x0199
    20dc:	a0 91 9a 01 	lds	r26, 0x019A
    20e0:	b0 91 9b 01 	lds	r27, 0x019B
    20e4:	28 17       	cp	r18, r24
    20e6:	39 07       	cpc	r19, r25
    20e8:	4a 07       	cpc	r20, r26
    20ea:	5b 07       	cpc	r21, r27
    20ec:	68 f0       	brcs	.+26     	; 0x2108 <__vector_5+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    20ee:	10 92 86 01 	sts	0x0186, r1
    20f2:	10 92 87 01 	sts	0x0187, r1
    20f6:	10 92 88 01 	sts	0x0188, r1
    20fa:	10 92 89 01 	sts	0x0189, r1
		TIMERS_ISR_Functions[2]();
    20fe:	e0 91 8e 01 	lds	r30, 0x018E
    2102:	f0 91 8f 01 	lds	r31, 0x018F
    2106:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything
}
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	ff 91       	pop	r31
    210e:	ef 91       	pop	r30
    2110:	bf 91       	pop	r27
    2112:	af 91       	pop	r26
    2114:	9f 91       	pop	r25
    2116:	8f 91       	pop	r24
    2118:	7f 91       	pop	r23
    211a:	6f 91       	pop	r22
    211c:	5f 91       	pop	r21
    211e:	4f 91       	pop	r20
    2120:	3f 91       	pop	r19
    2122:	2f 91       	pop	r18
    2124:	0f 90       	pop	r0
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	0f 90       	pop	r0
    212a:	1f 90       	pop	r1
    212c:	18 95       	reti

0000212e <__vector_4>:

ISR(TIMER2_COMP_vect){
    212e:	1f 92       	push	r1
    2130:	0f 92       	push	r0
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	0f 92       	push	r0
    2136:	11 24       	eor	r1, r1
    2138:	2f 93       	push	r18
    213a:	3f 93       	push	r19
    213c:	4f 93       	push	r20
    213e:	5f 93       	push	r21
    2140:	6f 93       	push	r22
    2142:	7f 93       	push	r23
    2144:	8f 93       	push	r24
    2146:	9f 93       	push	r25
    2148:	af 93       	push	r26
    214a:	bf 93       	push	r27
    214c:	ef 93       	push	r30
    214e:	ff 93       	push	r31
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    2158:	80 91 86 01 	lds	r24, 0x0186
    215c:	90 91 87 01 	lds	r25, 0x0187
    2160:	a0 91 88 01 	lds	r26, 0x0188
    2164:	b0 91 89 01 	lds	r27, 0x0189
    2168:	01 96       	adiw	r24, 0x01	; 1
    216a:	a1 1d       	adc	r26, r1
    216c:	b1 1d       	adc	r27, r1
    216e:	80 93 86 01 	sts	0x0186, r24
    2172:	90 93 87 01 	sts	0x0187, r25
    2176:	a0 93 88 01 	sts	0x0188, r26
    217a:	b0 93 89 01 	sts	0x0189, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    217e:	20 91 86 01 	lds	r18, 0x0186
    2182:	30 91 87 01 	lds	r19, 0x0187
    2186:	40 91 88 01 	lds	r20, 0x0188
    218a:	50 91 89 01 	lds	r21, 0x0189
    218e:	80 91 98 01 	lds	r24, 0x0198
    2192:	90 91 99 01 	lds	r25, 0x0199
    2196:	a0 91 9a 01 	lds	r26, 0x019A
    219a:	b0 91 9b 01 	lds	r27, 0x019B
    219e:	28 17       	cp	r18, r24
    21a0:	39 07       	cpc	r19, r25
    21a2:	4a 07       	cpc	r20, r26
    21a4:	5b 07       	cpc	r21, r27
    21a6:	68 f0       	brcs	.+26     	; 0x21c2 <__vector_4+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    21a8:	10 92 86 01 	sts	0x0186, r1
    21ac:	10 92 87 01 	sts	0x0187, r1
    21b0:	10 92 88 01 	sts	0x0188, r1
    21b4:	10 92 89 01 	sts	0x0189, r1
		TIMERS_ISR_Functions[2]();
    21b8:	e0 91 8e 01 	lds	r30, 0x018E
    21bc:	f0 91 8f 01 	lds	r31, 0x018F
    21c0:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything

}
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	ff 91       	pop	r31
    21c8:	ef 91       	pop	r30
    21ca:	bf 91       	pop	r27
    21cc:	af 91       	pop	r26
    21ce:	9f 91       	pop	r25
    21d0:	8f 91       	pop	r24
    21d2:	7f 91       	pop	r23
    21d4:	6f 91       	pop	r22
    21d6:	5f 91       	pop	r21
    21d8:	4f 91       	pop	r20
    21da:	3f 91       	pop	r19
    21dc:	2f 91       	pop	r18
    21de:	0f 90       	pop	r0
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	0f 90       	pop	r0
    21e4:	1f 90       	pop	r1
    21e6:	18 95       	reti

000021e8 <SPI_vidInit>:
#include "SPI_priv.h"
/************************************************************************************/



void SPI_vidInit(void){
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62

		SET_BIT(SPCR_REG, SPCR_MSTR);

	#elif(SPI_MODE == SPI_SLAVE_MODE)

		DIO_enuSetPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, DIO_u8OUTPUT);
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	66 e0       	ldi	r22, 0x06	; 6
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, DIO_u8INPUT);
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	65 e0       	ldi	r22, 0x05	; 5
    21fe:	40 e0       	ldi	r20, 0x00	; 0
    2200:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>

		DIO_enuSetPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, DIO_u8INPUT);
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	67 e0       	ldi	r22, 0x07	; 7
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_SS_PORT, SPI_SS_PIN, DIO_u8INPUT);
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	64 e0       	ldi	r22, 0x04	; 4
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>

		CLR_BIT(SPCR_REG, SPCR_MSTR);
    2218:	ad e2       	ldi	r26, 0x2D	; 45
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	ed e2       	ldi	r30, 0x2D	; 45
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	8f 7e       	andi	r24, 0xEF	; 239
    2224:	8c 93       	st	X, r24
	#endif


	//! Data order
	#if(SPI_DORD == SPI_DORD_MSB)
		SET_BIT(SPCR_REG, SPCR_DORD);
    2226:	ad e2       	ldi	r26, 0x2D	; 45
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	ed e2       	ldi	r30, 0x2D	; 45
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	80 62       	ori	r24, 0x20	; 32
    2232:	8c 93       	st	X, r24


	//! Clock Polarity
	#if(SPI_CPOL == SPI_LRising_TFalling)
		// SCK is high when idle
		CLR_BIT(SPCR_REG, SPCR_CPOL);
    2234:	ad e2       	ldi	r26, 0x2D	; 45
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	ed e2       	ldi	r30, 0x2D	; 45
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	87 7f       	andi	r24, 0xF7	; 247
    2240:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR0 );
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
		CLR_BIT(SPSR_REG, SPSR_SPI2x);

	#elif(SPI_PRES_SELECT == SPI_PRES_16)
		SET_BIT(SPCR_REG, SPCR_SPR0 );
    2242:	ad e2       	ldi	r26, 0x2D	; 45
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	ed e2       	ldi	r30, 0x2D	; 45
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	81 60       	ori	r24, 0x01	; 1
    224e:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
    2250:	ad e2       	ldi	r26, 0x2D	; 45
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ed e2       	ldi	r30, 0x2D	; 45
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	8d 7f       	andi	r24, 0xFD	; 253
    225c:	8c 93       	st	X, r24
		CLR_BIT(SPSR_REG, SPSR_SPI2x);
    225e:	ae e2       	ldi	r26, 0x2E	; 46
    2260:	b0 e0       	ldi	r27, 0x00	; 0
    2262:	ee e2       	ldi	r30, 0x2E	; 46
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	8e 7f       	andi	r24, 0xFE	; 254
    226a:	8c 93       	st	X, r24

	#endif


	/*	Enable SPI	*/
	SET_BIT(SPCR_REG, SPCR_SPE);
    226c:	ad e2       	ldi	r26, 0x2D	; 45
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ed e2       	ldi	r30, 0x2D	; 45
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	80 64       	ori	r24, 0x40	; 64
    2278:	8c 93       	st	X, r24
}
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	08 95       	ret

00002280 <SPI_enuMasterTransmit_Char>:



ErrorStatus_t SPI_enuMasterTransmit_Char(uint8_t copy_u8Data){
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <SPI_enuMasterTransmit_Char+0xa>
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2290:	19 82       	std	Y+1, r1	; 0x01
		SPDR_REG = copy_u8Data;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		SPDR_REG = flipBits(copy_u8Data);
    2292:	0f e2       	ldi	r16, 0x2F	; 47
    2294:	10 e0       	ldi	r17, 0x00	; 0
    2296:	8a 81       	ldd	r24, Y+2	; 0x02
    2298:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <flipBits>
    229c:	f8 01       	movw	r30, r16
    229e:	80 83       	st	Z, r24
	#endif


	/*! Wait for transmission complete */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    22a0:	ee e2       	ldi	r30, 0x2E	; 46
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	88 23       	and	r24, r24
    22a8:	dc f7       	brge	.-10     	; 0x22a0 <SPI_enuMasterTransmit_Char+0x20>


	Local_enu_ErrorState = ERROR_STATUS_OK;
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	08 95       	ret

000022be <SPI_enuMasterTransmit_String>:



ErrorStatus_t SPI_enuMasterTransmit_String(uint8_t* copy_pu8Data){
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <SPI_enuMasterTransmit_String+0x6>
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <SPI_enuMasterTransmit_String+0x8>
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	9b 83       	std	Y+3, r25	; 0x03
    22cc:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    22ce:	19 82       	std	Y+1, r1	; 0x01


	if(copy_pu8Data == NULL){
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	9b 81       	ldd	r25, Y+3	; 0x03
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	19 f4       	brne	.+6      	; 0x22de <SPI_enuMasterTransmit_String+0x20>
		return Local_enu_ErrorState;
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	8c 83       	std	Y+4, r24	; 0x04
    22dc:	13 c0       	rjmp	.+38     	; 0x2304 <SPI_enuMasterTransmit_String+0x46>

	}else{

		do{
			SPI_enuMasterTransmit_Char(*copy_pu8Data);
    22de:	ea 81       	ldd	r30, Y+2	; 0x02
    22e0:	fb 81       	ldd	r31, Y+3	; 0x03
    22e2:	80 81       	ld	r24, Z
    22e4:	0e 94 40 11 	call	0x2280	; 0x2280 <SPI_enuMasterTransmit_Char>
			copy_pu8Data++;
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	9b 81       	ldd	r25, Y+3	; 0x03
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	9b 83       	std	Y+3, r25	; 0x03
    22f0:	8a 83       	std	Y+2, r24	; 0x02
		}while(*copy_pu8Data != '\0');
    22f2:	ea 81       	ldd	r30, Y+2	; 0x02
    22f4:	fb 81       	ldd	r31, Y+3	; 0x03
    22f6:	80 81       	ld	r24, Z
    22f8:	88 23       	and	r24, r24
    22fa:	89 f7       	brne	.-30     	; 0x22de <SPI_enuMasterTransmit_String+0x20>
	}

	Local_enu_ErrorState = ERROR_STATUS_OK;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	8c 83       	std	Y+4, r24	; 0x04
    2304:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <SPI_enuSlaveReceive_Char>:



ErrorStatus_t SPI_enuSlaveReceive_Char(uint8_t* copy_pu8Data){
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <SPI_enuSlaveReceive_Char+0x6>
    231a:	0f 92       	push	r0
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
    2320:	9b 83       	std	Y+3, r25	; 0x03
    2322:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2324:	19 82       	std	Y+1, r1	; 0x01


	/* Wait for successful reception of data from master */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    2326:	ee e2       	ldi	r30, 0x2E	; 46
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	88 23       	and	r24, r24
    232e:	dc f7       	brge	.-10     	; 0x2326 <SPI_enuSlaveReceive_Char+0x12>

	*copy_pu8Data = SPDR_REG;
    2330:	ef e2       	ldi	r30, 0x2F	; 47
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	ea 81       	ldd	r30, Y+2	; 0x02
    2338:	fb 81       	ldd	r31, Y+3	; 0x03
    233a:	80 83       	st	Z, r24
		*copy_pu8Data = SPDR_REG;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		*copy_pu8Data= flipBits(SPDR_REG);
    233c:	ef e2       	ldi	r30, 0x2F	; 47
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <flipBits>
    2346:	ea 81       	ldd	r30, Y+2	; 0x02
    2348:	fb 81       	ldd	r31, Y+3	; 0x03
    234a:	80 83       	st	Z, r24
	#endif




	Local_enu_ErrorState = ERROR_STATUS_OK;
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    2350:	89 81       	ldd	r24, Y+1	; 0x01
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	cf 91       	pop	r28
    235a:	df 91       	pop	r29
    235c:	08 95       	ret

0000235e <SPI_enuSlaveReceive_String>:



ErrorStatus_t SPI_enuSlaveReceive_String(uint8_t* copy_pu8Data){
    235e:	df 93       	push	r29
    2360:	cf 93       	push	r28
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	27 97       	sbiw	r28, 0x07	; 7
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	9d 83       	std	Y+5, r25	; 0x05
    2374:	8c 83       	std	Y+4, r24	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2376:	1b 82       	std	Y+3, r1	; 0x03


	if(copy_pu8Data == NULL){
    2378:	8c 81       	ldd	r24, Y+4	; 0x04
    237a:	9d 81       	ldd	r25, Y+5	; 0x05
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	19 f4       	brne	.+6      	; 0x2386 <SPI_enuSlaveReceive_String+0x28>
		return Local_enu_ErrorState;
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	8e 83       	std	Y+6, r24	; 0x06
    2384:	1e c0       	rjmp	.+60     	; 0x23c2 <SPI_enuSlaveReceive_String+0x64>
	}else{

		// Intiate head of buffer similar to linked-list idea
		uint8_t *Local_u8Temp = copy_pu8Data;
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	9a 83       	std	Y+2, r25	; 0x02
    238c:	89 83       	std	Y+1, r24	; 0x01

		do{
			SPI_enuSlaveReceive_Char(Local_u8Temp);
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	9a 81       	ldd	r25, Y+2	; 0x02
    2392:	0e 94 8a 11 	call	0x2314	; 0x2314 <SPI_enuSlaveReceive_Char>


		}while(*(Local_u8Temp++) != '\0');
    2396:	e9 81       	ldd	r30, Y+1	; 0x01
    2398:	fa 81       	ldd	r31, Y+2	; 0x02
    239a:	80 81       	ld	r24, Z
    239c:	8f 83       	std	Y+7, r24	; 0x07
    239e:	8f 81       	ldd	r24, Y+7	; 0x07
    23a0:	88 23       	and	r24, r24
    23a2:	11 f0       	breq	.+4      	; 0x23a8 <SPI_enuSlaveReceive_String+0x4a>
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	8f 83       	std	Y+7, r24	; 0x07
    23a8:	8f 81       	ldd	r24, Y+7	; 0x07
    23aa:	29 81       	ldd	r18, Y+1	; 0x01
    23ac:	3a 81       	ldd	r19, Y+2	; 0x02
    23ae:	2f 5f       	subi	r18, 0xFF	; 255
    23b0:	3f 4f       	sbci	r19, 0xFF	; 255
    23b2:	3a 83       	std	Y+2, r19	; 0x02
    23b4:	29 83       	std	Y+1, r18	; 0x01
    23b6:	88 23       	and	r24, r24
    23b8:	51 f7       	brne	.-44     	; 0x238e <SPI_enuSlaveReceive_String+0x30>
	}


	Local_enu_ErrorState = ERROR_STATUS_OK;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enu_ErrorState;
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	8e 83       	std	Y+6, r24	; 0x06
    23c2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    23c4:	27 96       	adiw	r28, 0x07	; 7
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	de bf       	out	0x3e, r29	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	cd bf       	out	0x3d, r28	; 61
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <flipBits>:

static inline uint8_t flipBits(uint8_t byte) {
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	82 95       	swap	r24
    23e6:	8f 70       	andi	r24, 0x0F	; 15
    23e8:	28 2f       	mov	r18, r24
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	82 95       	swap	r24
    23f2:	92 95       	swap	r25
    23f4:	90 7f       	andi	r25, 0xF0	; 240
    23f6:	98 27       	eor	r25, r24
    23f8:	80 7f       	andi	r24, 0xF0	; 240
    23fa:	98 27       	eor	r25, r24
    23fc:	82 2b       	or	r24, r18
    23fe:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	88 2f       	mov	r24, r24
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	8c 7c       	andi	r24, 0xCC	; 204
    2408:	90 70       	andi	r25, 0x00	; 0
    240a:	95 95       	asr	r25
    240c:	87 95       	ror	r24
    240e:	95 95       	asr	r25
    2410:	87 95       	ror	r24
    2412:	28 2f       	mov	r18, r24
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	88 2f       	mov	r24, r24
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	83 73       	andi	r24, 0x33	; 51
    241c:	90 70       	andi	r25, 0x00	; 0
    241e:	88 0f       	add	r24, r24
    2420:	99 1f       	adc	r25, r25
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	82 2b       	or	r24, r18
    2428:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	88 2f       	mov	r24, r24
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	8a 7a       	andi	r24, 0xAA	; 170
    2432:	90 70       	andi	r25, 0x00	; 0
    2434:	95 95       	asr	r25
    2436:	87 95       	ror	r24
    2438:	28 2f       	mov	r18, r24
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	88 2f       	mov	r24, r24
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	85 75       	andi	r24, 0x55	; 85
    2442:	90 70       	andi	r25, 0x00	; 0
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	82 2b       	or	r24, r18
    244a:	89 83       	std	Y+1, r24	; 0x01
    return byte;
    244c:	89 81       	ldd	r24, Y+1	; 0x01
}
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	0f 92       	push	r0
    245c:	cd b7       	in	r28, 0x3d	; 61
    245e:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2460:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
    2462:	ef e5       	ldi	r30, 0x5F	; 95
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	88 23       	and	r24, r24
    246a:	4c f0       	brlt	.+18     	; 0x247e <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
    246c:	af e5       	ldi	r26, 0x5F	; 95
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	ef e5       	ldi	r30, 0x5F	; 95
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	80 68       	ori	r24, 0x80	; 128
    2478:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    247e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2480:	0f 90       	pop	r0
    2482:	cf 91       	pop	r28
    2484:	df 91       	pop	r29
    2486:	08 95       	ret

00002488 <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
    2488:	df 93       	push	r29
    248a:	cf 93       	push	r28
    248c:	0f 92       	push	r0
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2492:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
    2494:	ef e5       	ldi	r30, 0x5F	; 95
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	88 23       	and	r24, r24
    249c:	4c f4       	brge	.+18     	; 0x24b0 <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
    249e:	af e5       	ldi	r26, 0x5F	; 95
    24a0:	b0 e0       	ldi	r27, 0x00	; 0
    24a2:	ef e5       	ldi	r30, 0x5F	; 95
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 81       	ld	r24, Z
    24a8:	8f 77       	andi	r24, 0x7F	; 127
    24aa:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b2:	0f 90       	pop	r0
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	2a 97       	sbiw	r28, 0x0a	; 10
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	9b 83       	std	Y+3, r25	; 0x03
    24d0:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    24d2:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	9b 81       	ldd	r25, Y+3	; 0x03
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	19 f4       	brne	.+6      	; 0x24e2 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
    24dc:	29 81       	ldd	r18, Y+1	; 0x01
    24de:	2a 87       	std	Y+10, r18	; 0x0a
    24e0:	36 c1       	rjmp	.+620    	; 0x274e <EXTI_enuInit+0x294>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_ENABLED){
    24e2:	ea 81       	ldd	r30, Y+2	; 0x02
    24e4:	fb 81       	ldd	r31, Y+3	; 0x03
    24e6:	80 81       	ld	r24, Z
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	09 f0       	breq	.+2      	; 0x24ee <EXTI_enuInit+0x34>
    24ec:	64 c0       	rjmp	.+200    	; 0x25b6 <EXTI_enuInit+0xfc>

			SET_BIT(GICR, INT0_switch);
    24ee:	ab e5       	ldi	r26, 0x5B	; 91
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	eb e5       	ldi	r30, 0x5B	; 91
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	80 64       	ori	r24, 0x40	; 64
    24fa:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_0].Sence_Level){
    24fc:	ea 81       	ldd	r30, Y+2	; 0x02
    24fe:	fb 81       	ldd	r31, Y+3	; 0x03
    2500:	81 81       	ldd	r24, Z+1	; 0x01
    2502:	28 2f       	mov	r18, r24
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	39 87       	std	Y+9, r19	; 0x09
    2508:	28 87       	std	Y+8, r18	; 0x08
    250a:	88 85       	ldd	r24, Y+8	; 0x08
    250c:	99 85       	ldd	r25, Y+9	; 0x09
    250e:	81 30       	cpi	r24, 0x01	; 1
    2510:	91 05       	cpc	r25, r1
    2512:	21 f1       	breq	.+72     	; 0x255c <EXTI_enuInit+0xa2>
    2514:	28 85       	ldd	r18, Y+8	; 0x08
    2516:	39 85       	ldd	r19, Y+9	; 0x09
    2518:	22 30       	cpi	r18, 0x02	; 2
    251a:	31 05       	cpc	r19, r1
    251c:	2c f4       	brge	.+10     	; 0x2528 <EXTI_enuInit+0x6e>
    251e:	88 85       	ldd	r24, Y+8	; 0x08
    2520:	99 85       	ldd	r25, Y+9	; 0x09
    2522:	00 97       	sbiw	r24, 0x00	; 0
    2524:	61 f0       	breq	.+24     	; 0x253e <EXTI_enuInit+0x84>
    2526:	53 c0       	rjmp	.+166    	; 0x25ce <EXTI_enuInit+0x114>
    2528:	28 85       	ldd	r18, Y+8	; 0x08
    252a:	39 85       	ldd	r19, Y+9	; 0x09
    252c:	22 30       	cpi	r18, 0x02	; 2
    252e:	31 05       	cpc	r19, r1
    2530:	21 f1       	breq	.+72     	; 0x257a <EXTI_enuInit+0xc0>
    2532:	88 85       	ldd	r24, Y+8	; 0x08
    2534:	99 85       	ldd	r25, Y+9	; 0x09
    2536:	83 30       	cpi	r24, 0x03	; 3
    2538:	91 05       	cpc	r25, r1
    253a:	71 f1       	breq	.+92     	; 0x2598 <EXTI_enuInit+0xde>
    253c:	48 c0       	rjmp	.+144    	; 0x25ce <EXTI_enuInit+0x114>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
    253e:	a5 e5       	ldi	r26, 0x55	; 85
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e5 e5       	ldi	r30, 0x55	; 85
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	8e 7f       	andi	r24, 0xFE	; 254
    254a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    254c:	a5 e5       	ldi	r26, 0x55	; 85
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	e5 e5       	ldi	r30, 0x55	; 85
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8d 7f       	andi	r24, 0xFD	; 253
    2558:	8c 93       	st	X, r24
    255a:	39 c0       	rjmp	.+114    	; 0x25ce <EXTI_enuInit+0x114>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
    255c:	a5 e5       	ldi	r26, 0x55	; 85
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e5 e5       	ldi	r30, 0x55	; 85
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	81 60       	ori	r24, 0x01	; 1
    2568:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    256a:	a5 e5       	ldi	r26, 0x55	; 85
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	e5 e5       	ldi	r30, 0x55	; 85
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	8d 7f       	andi	r24, 0xFD	; 253
    2576:	8c 93       	st	X, r24
    2578:	2a c0       	rjmp	.+84     	; 0x25ce <EXTI_enuInit+0x114>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
    257a:	a5 e5       	ldi	r26, 0x55	; 85
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e5 e5       	ldi	r30, 0x55	; 85
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	8e 7f       	andi	r24, 0xFE	; 254
    2586:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    2588:	a5 e5       	ldi	r26, 0x55	; 85
    258a:	b0 e0       	ldi	r27, 0x00	; 0
    258c:	e5 e5       	ldi	r30, 0x55	; 85
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	80 81       	ld	r24, Z
    2592:	82 60       	ori	r24, 0x02	; 2
    2594:	8c 93       	st	X, r24
    2596:	1b c0       	rjmp	.+54     	; 0x25ce <EXTI_enuInit+0x114>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
    2598:	a5 e5       	ldi	r26, 0x55	; 85
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e5 e5       	ldi	r30, 0x55	; 85
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	81 60       	ori	r24, 0x01	; 1
    25a4:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    25a6:	a5 e5       	ldi	r26, 0x55	; 85
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e5 e5       	ldi	r30, 0x55	; 85
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	82 60       	ori	r24, 0x02	; 2
    25b2:	8c 93       	st	X, r24
    25b4:	0c c0       	rjmp	.+24     	; 0x25ce <EXTI_enuInit+0x114>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_DISABLED){
    25b6:	ea 81       	ldd	r30, Y+2	; 0x02
    25b8:	fb 81       	ldd	r31, Y+3	; 0x03
    25ba:	80 81       	ld	r24, Z
    25bc:	88 23       	and	r24, r24
    25be:	39 f4       	brne	.+14     	; 0x25ce <EXTI_enuInit+0x114>

			CLR_BIT(GICR, INT0_switch);
    25c0:	ab e5       	ldi	r26, 0x5B	; 91
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	eb e5       	ldi	r30, 0x5B	; 91
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	8f 7b       	andi	r24, 0xBF	; 191
    25cc:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_ENABLED){
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	9b 81       	ldd	r25, Y+3	; 0x03
    25d2:	fc 01       	movw	r30, r24
    25d4:	32 96       	adiw	r30, 0x02	; 2
    25d6:	80 81       	ld	r24, Z
    25d8:	81 30       	cpi	r24, 0x01	; 1
    25da:	09 f0       	breq	.+2      	; 0x25de <EXTI_enuInit+0x124>
    25dc:	66 c0       	rjmp	.+204    	; 0x26aa <EXTI_enuInit+0x1f0>

			SET_BIT(GICR, INT1_switch);
    25de:	ab e5       	ldi	r26, 0x5B	; 91
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	eb e5       	ldi	r30, 0x5B	; 91
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	80 68       	ori	r24, 0x80	; 128
    25ea:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT_NO_1].Sence_Level){
    25ec:	8a 81       	ldd	r24, Y+2	; 0x02
    25ee:	9b 81       	ldd	r25, Y+3	; 0x03
    25f0:	fc 01       	movw	r30, r24
    25f2:	32 96       	adiw	r30, 0x02	; 2
    25f4:	81 81       	ldd	r24, Z+1	; 0x01
    25f6:	28 2f       	mov	r18, r24
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	3f 83       	std	Y+7, r19	; 0x07
    25fc:	2e 83       	std	Y+6, r18	; 0x06
    25fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2600:	9f 81       	ldd	r25, Y+7	; 0x07
    2602:	81 30       	cpi	r24, 0x01	; 1
    2604:	91 05       	cpc	r25, r1
    2606:	21 f1       	breq	.+72     	; 0x2650 <EXTI_enuInit+0x196>
    2608:	2e 81       	ldd	r18, Y+6	; 0x06
    260a:	3f 81       	ldd	r19, Y+7	; 0x07
    260c:	22 30       	cpi	r18, 0x02	; 2
    260e:	31 05       	cpc	r19, r1
    2610:	2c f4       	brge	.+10     	; 0x261c <EXTI_enuInit+0x162>
    2612:	8e 81       	ldd	r24, Y+6	; 0x06
    2614:	9f 81       	ldd	r25, Y+7	; 0x07
    2616:	00 97       	sbiw	r24, 0x00	; 0
    2618:	61 f0       	breq	.+24     	; 0x2632 <EXTI_enuInit+0x178>
    261a:	55 c0       	rjmp	.+170    	; 0x26c6 <EXTI_enuInit+0x20c>
    261c:	2e 81       	ldd	r18, Y+6	; 0x06
    261e:	3f 81       	ldd	r19, Y+7	; 0x07
    2620:	22 30       	cpi	r18, 0x02	; 2
    2622:	31 05       	cpc	r19, r1
    2624:	21 f1       	breq	.+72     	; 0x266e <EXTI_enuInit+0x1b4>
    2626:	8e 81       	ldd	r24, Y+6	; 0x06
    2628:	9f 81       	ldd	r25, Y+7	; 0x07
    262a:	83 30       	cpi	r24, 0x03	; 3
    262c:	91 05       	cpc	r25, r1
    262e:	71 f1       	breq	.+92     	; 0x268c <EXTI_enuInit+0x1d2>
    2630:	4a c0       	rjmp	.+148    	; 0x26c6 <EXTI_enuInit+0x20c>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
    2632:	a5 e5       	ldi	r26, 0x55	; 85
    2634:	b0 e0       	ldi	r27, 0x00	; 0
    2636:	e5 e5       	ldi	r30, 0x55	; 85
    2638:	f0 e0       	ldi	r31, 0x00	; 0
    263a:	80 81       	ld	r24, Z
    263c:	8b 7f       	andi	r24, 0xFB	; 251
    263e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    2640:	a5 e5       	ldi	r26, 0x55	; 85
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e5 e5       	ldi	r30, 0x55	; 85
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	87 7f       	andi	r24, 0xF7	; 247
    264c:	8c 93       	st	X, r24
    264e:	3b c0       	rjmp	.+118    	; 0x26c6 <EXTI_enuInit+0x20c>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
    2650:	a5 e5       	ldi	r26, 0x55	; 85
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e5 e5       	ldi	r30, 0x55	; 85
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	84 60       	ori	r24, 0x04	; 4
    265c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    265e:	a5 e5       	ldi	r26, 0x55	; 85
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	e5 e5       	ldi	r30, 0x55	; 85
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	87 7f       	andi	r24, 0xF7	; 247
    266a:	8c 93       	st	X, r24
    266c:	2c c0       	rjmp	.+88     	; 0x26c6 <EXTI_enuInit+0x20c>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
    266e:	a5 e5       	ldi	r26, 0x55	; 85
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e5 e5       	ldi	r30, 0x55	; 85
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	8b 7f       	andi	r24, 0xFB	; 251
    267a:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    267c:	a5 e5       	ldi	r26, 0x55	; 85
    267e:	b0 e0       	ldi	r27, 0x00	; 0
    2680:	e5 e5       	ldi	r30, 0x55	; 85
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	88 60       	ori	r24, 0x08	; 8
    2688:	8c 93       	st	X, r24
    268a:	1d c0       	rjmp	.+58     	; 0x26c6 <EXTI_enuInit+0x20c>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
    268c:	a5 e5       	ldi	r26, 0x55	; 85
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e5 e5       	ldi	r30, 0x55	; 85
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	84 60       	ori	r24, 0x04	; 4
    2698:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    269a:	a5 e5       	ldi	r26, 0x55	; 85
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	e5 e5       	ldi	r30, 0x55	; 85
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	88 60       	ori	r24, 0x08	; 8
    26a6:	8c 93       	st	X, r24
    26a8:	0e c0       	rjmp	.+28     	; 0x26c6 <EXTI_enuInit+0x20c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_DISABLED){
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	fc 01       	movw	r30, r24
    26b0:	32 96       	adiw	r30, 0x02	; 2
    26b2:	80 81       	ld	r24, Z
    26b4:	88 23       	and	r24, r24
    26b6:	39 f4       	brne	.+14     	; 0x26c6 <EXTI_enuInit+0x20c>

			CLR_BIT(GICR, INT1_switch);
    26b8:	ab e5       	ldi	r26, 0x5B	; 91
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	eb e5       	ldi	r30, 0x5B	; 91
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	8f 77       	andi	r24, 0x7F	; 127
    26c4:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_ENABLED){
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ca:	fc 01       	movw	r30, r24
    26cc:	34 96       	adiw	r30, 0x04	; 4
    26ce:	80 81       	ld	r24, Z
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	59 f5       	brne	.+86     	; 0x272a <EXTI_enuInit+0x270>

			SET_BIT(GICR, INT2_switch);
    26d4:	ab e5       	ldi	r26, 0x5B	; 91
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	eb e5       	ldi	r30, 0x5B	; 91
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	80 62       	ori	r24, 0x20	; 32
    26e0:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_2].Sence_Level){
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	fc 01       	movw	r30, r24
    26e8:	34 96       	adiw	r30, 0x04	; 4
    26ea:	81 81       	ldd	r24, Z+1	; 0x01
    26ec:	28 2f       	mov	r18, r24
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	3d 83       	std	Y+5, r19	; 0x05
    26f2:	2c 83       	std	Y+4, r18	; 0x04
    26f4:	8c 81       	ldd	r24, Y+4	; 0x04
    26f6:	9d 81       	ldd	r25, Y+5	; 0x05
    26f8:	82 30       	cpi	r24, 0x02	; 2
    26fa:	91 05       	cpc	r25, r1
    26fc:	31 f0       	breq	.+12     	; 0x270a <EXTI_enuInit+0x250>
    26fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2700:	3d 81       	ldd	r19, Y+5	; 0x05
    2702:	23 30       	cpi	r18, 0x03	; 3
    2704:	31 05       	cpc	r19, r1
    2706:	49 f0       	breq	.+18     	; 0x271a <EXTI_enuInit+0x260>
    2708:	1e c0       	rjmp	.+60     	; 0x2746 <EXTI_enuInit+0x28c>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
    270a:	a4 e5       	ldi	r26, 0x54	; 84
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e4 e5       	ldi	r30, 0x54	; 84
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	8f 7b       	andi	r24, 0xBF	; 191
    2716:	8c 93       	st	X, r24
    2718:	16 c0       	rjmp	.+44     	; 0x2746 <EXTI_enuInit+0x28c>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
    271a:	a4 e5       	ldi	r26, 0x54	; 84
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e4 e5       	ldi	r30, 0x54	; 84
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	80 64       	ori	r24, 0x40	; 64
    2726:	8c 93       	st	X, r24
    2728:	0e c0       	rjmp	.+28     	; 0x2746 <EXTI_enuInit+0x28c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_DISABLED){
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	9b 81       	ldd	r25, Y+3	; 0x03
    272e:	fc 01       	movw	r30, r24
    2730:	34 96       	adiw	r30, 0x04	; 4
    2732:	80 81       	ld	r24, Z
    2734:	88 23       	and	r24, r24
    2736:	39 f4       	brne	.+14     	; 0x2746 <EXTI_enuInit+0x28c>

			CLR_BIT(GICR, INT2_switch);
    2738:	ab e5       	ldi	r26, 0x5B	; 91
    273a:	b0 e0       	ldi	r27, 0x00	; 0
    273c:	eb e5       	ldi	r30, 0x5B	; 91
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 81       	ld	r24, Z
    2742:	8f 7d       	andi	r24, 0xDF	; 223
    2744:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    274a:	39 81       	ldd	r19, Y+1	; 0x01
    274c:	3a 87       	std	Y+10, r19	; 0x0a
    274e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2750:	2a 96       	adiw	r28, 0x0a	; 10
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <EXTI_enuEnableInterrupt>:

ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <EXTI_enuEnableInterrupt+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <EXTI_enuEnableInterrupt+0x8>
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2770:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	3c 83       	std	Y+4, r19	; 0x04
    277a:	2b 83       	std	Y+3, r18	; 0x03
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	9c 81       	ldd	r25, Y+4	; 0x04
    2780:	81 30       	cpi	r24, 0x01	; 1
    2782:	91 05       	cpc	r25, r1
    2784:	89 f0       	breq	.+34     	; 0x27a8 <EXTI_enuEnableInterrupt+0x46>
    2786:	2b 81       	ldd	r18, Y+3	; 0x03
    2788:	3c 81       	ldd	r19, Y+4	; 0x04
    278a:	22 30       	cpi	r18, 0x02	; 2
    278c:	31 05       	cpc	r19, r1
    278e:	a1 f0       	breq	.+40     	; 0x27b8 <EXTI_enuEnableInterrupt+0x56>
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	b9 f4       	brne	.+46     	; 0x27c6 <EXTI_enuEnableInterrupt+0x64>
			case INT_NO_0:

				SET_BIT(GICR, INT0_switch);
    2798:	ab e5       	ldi	r26, 0x5B	; 91
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	eb e5       	ldi	r30, 0x5B	; 91
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	80 64       	ori	r24, 0x40	; 64
    27a4:	8c 93       	st	X, r24
    27a6:	0f c0       	rjmp	.+30     	; 0x27c6 <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_1:

				SET_BIT(GICR, INT1_switch);
    27a8:	ab e5       	ldi	r26, 0x5B	; 91
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	eb e5       	ldi	r30, 0x5B	; 91
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	80 68       	ori	r24, 0x80	; 128
    27b4:	8c 93       	st	X, r24
    27b6:	07 c0       	rjmp	.+14     	; 0x27c6 <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_2:

				SET_BIT(GICR, INT2_switch);
    27b8:	ab e5       	ldi	r26, 0x5B	; 91
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	eb e5       	ldi	r30, 0x5B	; 91
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	80 62       	ori	r24, 0x20	; 32
    27c4:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <EXTI_enuDisableInterrupt>:

ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <EXTI_enuDisableInterrupt+0x6>
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <EXTI_enuDisableInterrupt+0x8>
    27e2:	0f 92       	push	r0
    27e4:	cd b7       	in	r28, 0x3d	; 61
    27e6:	de b7       	in	r29, 0x3e	; 62
    27e8:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    27ea:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT_NO_2){
    27ec:	8a 81       	ldd	r24, Y+2	; 0x02
    27ee:	83 30       	cpi	r24, 0x03	; 3
    27f0:	18 f0       	brcs	.+6      	; 0x27f8 <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
    27f2:	29 81       	ldd	r18, Y+1	; 0x01
    27f4:	2d 83       	std	Y+5, r18	; 0x05
    27f6:	2e c0       	rjmp	.+92     	; 0x2854 <EXTI_enuDisableInterrupt+0x7a>
	}

	else{

		switch(Copy_u8IntNumber){
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	28 2f       	mov	r18, r24
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	3c 83       	std	Y+4, r19	; 0x04
    2800:	2b 83       	std	Y+3, r18	; 0x03
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	91 05       	cpc	r25, r1
    280a:	89 f0       	breq	.+34     	; 0x282e <EXTI_enuDisableInterrupt+0x54>
    280c:	2b 81       	ldd	r18, Y+3	; 0x03
    280e:	3c 81       	ldd	r19, Y+4	; 0x04
    2810:	22 30       	cpi	r18, 0x02	; 2
    2812:	31 05       	cpc	r19, r1
    2814:	a1 f0       	breq	.+40     	; 0x283e <EXTI_enuDisableInterrupt+0x64>
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	b9 f4       	brne	.+46     	; 0x284c <EXTI_enuDisableInterrupt+0x72>
		case INT_NO_0:

			
			GICR &= ~(1<<INT0_switch);
    281e:	ab e5       	ldi	r26, 0x5B	; 91
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	eb e5       	ldi	r30, 0x5B	; 91
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	8f 7b       	andi	r24, 0xBF	; 191
    282a:	8c 93       	st	X, r24
    282c:	0f c0       	rjmp	.+30     	; 0x284c <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_1:

			GICR &= ~(1<<INT1_switch);
    282e:	ab e5       	ldi	r26, 0x5B	; 91
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	eb e5       	ldi	r30, 0x5B	; 91
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	8f 77       	andi	r24, 0x7F	; 127
    283a:	8c 93       	st	X, r24
    283c:	07 c0       	rjmp	.+14     	; 0x284c <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_2:

			GICR &= ~(1<<INT2_switch);
    283e:	ab e5       	ldi	r26, 0x5B	; 91
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	eb e5       	ldi	r30, 0x5B	; 91
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	8f 7d       	andi	r24, 0xDF	; 223
    284a:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    2850:	99 81       	ldd	r25, Y+1	; 0x01
    2852:	9d 83       	std	Y+5, r25	; 0x05
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	2c 97       	sbiw	r28, 0x0c	; 12
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	8a 83       	std	Y+2, r24	; 0x02
    287c:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    287e:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT_NO_2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	83 30       	cpi	r24, 0x03	; 3
    2884:	18 f4       	brcc	.+6      	; 0x288c <EXTI_enuSetSenseLevel+0x26>
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	84 30       	cpi	r24, 0x04	; 4
    288a:	18 f0       	brcs	.+6      	; 0x2892 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
    288c:	29 81       	ldd	r18, Y+1	; 0x01
    288e:	2c 87       	std	Y+12, r18	; 0x0c
    2890:	ef c0       	rjmp	.+478    	; 0x2a70 <EXTI_enuSetSenseLevel+0x20a>
	}

	else{

		switch(Copy_u8IntNumber){
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	28 2f       	mov	r18, r24
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	3b 87       	std	Y+11, r19	; 0x0b
    289a:	2a 87       	std	Y+10, r18	; 0x0a
    289c:	8a 85       	ldd	r24, Y+10	; 0x0a
    289e:	9b 85       	ldd	r25, Y+11	; 0x0b
    28a0:	81 30       	cpi	r24, 0x01	; 1
    28a2:	91 05       	cpc	r25, r1
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <EXTI_enuSetSenseLevel+0x42>
    28a6:	66 c0       	rjmp	.+204    	; 0x2974 <EXTI_enuSetSenseLevel+0x10e>
    28a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    28aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    28ac:	22 30       	cpi	r18, 0x02	; 2
    28ae:	31 05       	cpc	r19, r1
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <EXTI_enuSetSenseLevel+0x4e>
    28b2:	bb c0       	rjmp	.+374    	; 0x2a2a <EXTI_enuSetSenseLevel+0x1c4>
    28b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	09 f0       	breq	.+2      	; 0x28be <EXTI_enuSetSenseLevel+0x58>
    28bc:	d5 c0       	rjmp	.+426    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>
		case INT_NO_0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	28 2f       	mov	r18, r24
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	39 87       	std	Y+9, r19	; 0x09
    28c6:	28 87       	std	Y+8, r18	; 0x08
    28c8:	88 85       	ldd	r24, Y+8	; 0x08
    28ca:	99 85       	ldd	r25, Y+9	; 0x09
    28cc:	81 30       	cpi	r24, 0x01	; 1
    28ce:	91 05       	cpc	r25, r1
    28d0:	a9 f0       	breq	.+42     	; 0x28fc <EXTI_enuSetSenseLevel+0x96>
    28d2:	28 85       	ldd	r18, Y+8	; 0x08
    28d4:	39 85       	ldd	r19, Y+9	; 0x09
    28d6:	22 30       	cpi	r18, 0x02	; 2
    28d8:	31 05       	cpc	r19, r1
    28da:	2c f4       	brge	.+10     	; 0x28e6 <EXTI_enuSetSenseLevel+0x80>
    28dc:	88 85       	ldd	r24, Y+8	; 0x08
    28de:	99 85       	ldd	r25, Y+9	; 0x09
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	d9 f0       	breq	.+54     	; 0x291a <EXTI_enuSetSenseLevel+0xb4>
    28e4:	c1 c0       	rjmp	.+386    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>
    28e6:	28 85       	ldd	r18, Y+8	; 0x08
    28e8:	39 85       	ldd	r19, Y+9	; 0x09
    28ea:	22 30       	cpi	r18, 0x02	; 2
    28ec:	31 05       	cpc	r19, r1
    28ee:	21 f1       	breq	.+72     	; 0x2938 <EXTI_enuSetSenseLevel+0xd2>
    28f0:	88 85       	ldd	r24, Y+8	; 0x08
    28f2:	99 85       	ldd	r25, Y+9	; 0x09
    28f4:	83 30       	cpi	r24, 0x03	; 3
    28f6:	91 05       	cpc	r25, r1
    28f8:	71 f1       	breq	.+92     	; 0x2956 <EXTI_enuSetSenseLevel+0xf0>
    28fa:	b6 c0       	rjmp	.+364    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
    28fc:	a5 e5       	ldi	r26, 0x55	; 85
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e5 e5       	ldi	r30, 0x55	; 85
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	81 60       	ori	r24, 0x01	; 1
    2908:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    290a:	a5 e5       	ldi	r26, 0x55	; 85
    290c:	b0 e0       	ldi	r27, 0x00	; 0
    290e:	e5 e5       	ldi	r30, 0x55	; 85
    2910:	f0 e0       	ldi	r31, 0x00	; 0
    2912:	80 81       	ld	r24, Z
    2914:	8d 7f       	andi	r24, 0xFD	; 253
    2916:	8c 93       	st	X, r24
    2918:	a7 c0       	rjmp	.+334    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    291a:	a5 e5       	ldi	r26, 0x55	; 85
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e5 e5       	ldi	r30, 0x55	; 85
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	8e 7f       	andi	r24, 0xFE	; 254
    2926:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    2928:	a5 e5       	ldi	r26, 0x55	; 85
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	e5 e5       	ldi	r30, 0x55	; 85
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	8d 7f       	andi	r24, 0xFD	; 253
    2934:	8c 93       	st	X, r24
    2936:	98 c0       	rjmp	.+304    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    2938:	a5 e5       	ldi	r26, 0x55	; 85
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	e5 e5       	ldi	r30, 0x55	; 85
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	8e 7f       	andi	r24, 0xFE	; 254
    2944:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    2946:	a5 e5       	ldi	r26, 0x55	; 85
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e5 e5       	ldi	r30, 0x55	; 85
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	82 60       	ori	r24, 0x02	; 2
    2952:	8c 93       	st	X, r24
    2954:	89 c0       	rjmp	.+274    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    2956:	a5 e5       	ldi	r26, 0x55	; 85
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e5 e5       	ldi	r30, 0x55	; 85
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	81 60       	ori	r24, 0x01	; 1
    2962:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    2964:	a5 e5       	ldi	r26, 0x55	; 85
    2966:	b0 e0       	ldi	r27, 0x00	; 0
    2968:	e5 e5       	ldi	r30, 0x55	; 85
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	82 60       	ori	r24, 0x02	; 2
    2970:	8c 93       	st	X, r24
    2972:	7a c0       	rjmp	.+244    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>
			/**************************************************/

		case INT_NO_1:

			/**************** 1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	3f 83       	std	Y+7, r19	; 0x07
    297c:	2e 83       	std	Y+6, r18	; 0x06
    297e:	8e 81       	ldd	r24, Y+6	; 0x06
    2980:	9f 81       	ldd	r25, Y+7	; 0x07
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	91 05       	cpc	r25, r1
    2986:	a9 f0       	breq	.+42     	; 0x29b2 <EXTI_enuSetSenseLevel+0x14c>
    2988:	2e 81       	ldd	r18, Y+6	; 0x06
    298a:	3f 81       	ldd	r19, Y+7	; 0x07
    298c:	22 30       	cpi	r18, 0x02	; 2
    298e:	31 05       	cpc	r19, r1
    2990:	2c f4       	brge	.+10     	; 0x299c <EXTI_enuSetSenseLevel+0x136>
    2992:	8e 81       	ldd	r24, Y+6	; 0x06
    2994:	9f 81       	ldd	r25, Y+7	; 0x07
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	d9 f0       	breq	.+54     	; 0x29d0 <EXTI_enuSetSenseLevel+0x16a>
    299a:	66 c0       	rjmp	.+204    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>
    299c:	2e 81       	ldd	r18, Y+6	; 0x06
    299e:	3f 81       	ldd	r19, Y+7	; 0x07
    29a0:	22 30       	cpi	r18, 0x02	; 2
    29a2:	31 05       	cpc	r19, r1
    29a4:	21 f1       	breq	.+72     	; 0x29ee <EXTI_enuSetSenseLevel+0x188>
    29a6:	8e 81       	ldd	r24, Y+6	; 0x06
    29a8:	9f 81       	ldd	r25, Y+7	; 0x07
    29aa:	83 30       	cpi	r24, 0x03	; 3
    29ac:	91 05       	cpc	r25, r1
    29ae:	71 f1       	breq	.+92     	; 0x2a0c <EXTI_enuSetSenseLevel+0x1a6>
    29b0:	5b c0       	rjmp	.+182    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    29b2:	a5 e5       	ldi	r26, 0x55	; 85
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e5 e5       	ldi	r30, 0x55	; 85
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	84 60       	ori	r24, 0x04	; 4
    29be:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    29c0:	a5 e5       	ldi	r26, 0x55	; 85
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	e5 e5       	ldi	r30, 0x55	; 85
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	87 7f       	andi	r24, 0xF7	; 247
    29cc:	8c 93       	st	X, r24
    29ce:	4c c0       	rjmp	.+152    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    29d0:	a5 e5       	ldi	r26, 0x55	; 85
    29d2:	b0 e0       	ldi	r27, 0x00	; 0
    29d4:	e5 e5       	ldi	r30, 0x55	; 85
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	8b 7f       	andi	r24, 0xFB	; 251
    29dc:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    29de:	a5 e5       	ldi	r26, 0x55	; 85
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e5 e5       	ldi	r30, 0x55	; 85
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	87 7f       	andi	r24, 0xF7	; 247
    29ea:	8c 93       	st	X, r24
    29ec:	3d c0       	rjmp	.+122    	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    29ee:	a5 e5       	ldi	r26, 0x55	; 85
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e5 e5       	ldi	r30, 0x55	; 85
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	8b 7f       	andi	r24, 0xFB	; 251
    29fa:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    29fc:	a5 e5       	ldi	r26, 0x55	; 85
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	e5 e5       	ldi	r30, 0x55	; 85
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	88 60       	ori	r24, 0x08	; 8
    2a08:	8c 93       	st	X, r24
    2a0a:	2e c0       	rjmp	.+92     	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    2a0c:	a5 e5       	ldi	r26, 0x55	; 85
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e5 e5       	ldi	r30, 0x55	; 85
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	84 60       	ori	r24, 0x04	; 4
    2a18:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    2a1a:	a5 e5       	ldi	r26, 0x55	; 85
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e5 e5       	ldi	r30, 0x55	; 85
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	88 60       	ori	r24, 0x08	; 8
    2a26:	8c 93       	st	X, r24
    2a28:	1f c0       	rjmp	.+62     	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>


		case INT_NO_2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	28 2f       	mov	r18, r24
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	3d 83       	std	Y+5, r19	; 0x05
    2a32:	2c 83       	std	Y+4, r18	; 0x04
    2a34:	8c 81       	ldd	r24, Y+4	; 0x04
    2a36:	9d 81       	ldd	r25, Y+5	; 0x05
    2a38:	82 30       	cpi	r24, 0x02	; 2
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	31 f0       	breq	.+12     	; 0x2a4a <EXTI_enuSetSenseLevel+0x1e4>
    2a3e:	2c 81       	ldd	r18, Y+4	; 0x04
    2a40:	3d 81       	ldd	r19, Y+5	; 0x05
    2a42:	23 30       	cpi	r18, 0x03	; 3
    2a44:	31 05       	cpc	r19, r1
    2a46:	49 f0       	breq	.+18     	; 0x2a5a <EXTI_enuSetSenseLevel+0x1f4>
    2a48:	0f c0       	rjmp	.+30     	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    2a4a:	a4 e5       	ldi	r26, 0x54	; 84
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	e4 e5       	ldi	r30, 0x54	; 84
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	80 81       	ld	r24, Z
    2a54:	8f 7b       	andi	r24, 0xBF	; 191
    2a56:	8c 93       	st	X, r24
    2a58:	07 c0       	rjmp	.+14     	; 0x2a68 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    2a5a:	a4 e5       	ldi	r26, 0x54	; 84
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	e4 e5       	ldi	r30, 0x54	; 84
    2a60:	f0 e0       	ldi	r31, 0x00	; 0
    2a62:	80 81       	ld	r24, Z
    2a64:	80 64       	ori	r24, 0x40	; 64
    2a66:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    2a6c:	39 81       	ldd	r19, Y+1	; 0x01
    2a6e:	3c 87       	std	Y+12, r19	; 0x0c
    2a70:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2a72:	2c 96       	adiw	r28, 0x0c	; 12
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <EXTI_enuSetCallBack+0x6>
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <EXTI_enuSetCallBack+0x8>
    2a8c:	0f 92       	push	r0
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
    2a92:	9b 83       	std	Y+3, r25	; 0x03
    2a94:	8a 83       	std	Y+2, r24	; 0x02
    2a96:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2a98:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	29 f4       	brne	.+10     	; 0x2aac <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    2aa2:	83 e0       	ldi	r24, 0x03	; 3
    2aa4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
    2aaa:	18 c0       	rjmp	.+48     	; 0x2adc <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT_NO_2){
    2aac:	8c 81       	ldd	r24, Y+4	; 0x04
    2aae:	83 30       	cpi	r24, 0x03	; 3
    2ab0:	28 f0       	brcs	.+10     	; 0x2abc <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	8d 83       	std	Y+5, r24	; 0x05
    2aba:	10 c0       	rjmp	.+32     	; 0x2adc <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    2abc:	8c 81       	ldd	r24, Y+4	; 0x04
    2abe:	88 2f       	mov	r24, r24
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	88 0f       	add	r24, r24
    2ac4:	99 1f       	adc	r25, r25
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e4 56       	subi	r30, 0x64	; 100
    2aca:	fe 4f       	sbci	r31, 0xFE	; 254
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	08 95       	ret

00002aee <__vector_1>:


ISR(INT0_vect){
    2aee:	1f 92       	push	r1
    2af0:	0f 92       	push	r0
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	0f 92       	push	r0
    2af6:	11 24       	eor	r1, r1
    2af8:	2f 93       	push	r18
    2afa:	3f 93       	push	r19
    2afc:	4f 93       	push	r20
    2afe:	5f 93       	push	r21
    2b00:	6f 93       	push	r22
    2b02:	7f 93       	push	r23
    2b04:	8f 93       	push	r24
    2b06:	9f 93       	push	r25
    2b08:	af 93       	push	r26
    2b0a:	bf 93       	push	r27
    2b0c:	ef 93       	push	r30
    2b0e:	ff 93       	push	r31
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_0] != NULL){
    2b18:	80 91 9c 01 	lds	r24, 0x019C
    2b1c:	90 91 9d 01 	lds	r25, 0x019D
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	29 f0       	breq	.+10     	; 0x2b2e <__vector_1+0x40>
			EXTI_pfunISRFun[INT_NO_0]();
    2b24:	e0 91 9c 01 	lds	r30, 0x019C
    2b28:	f0 91 9d 01 	lds	r31, 0x019D
    2b2c:	09 95       	icall
		}
}
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	ff 91       	pop	r31
    2b34:	ef 91       	pop	r30
    2b36:	bf 91       	pop	r27
    2b38:	af 91       	pop	r26
    2b3a:	9f 91       	pop	r25
    2b3c:	8f 91       	pop	r24
    2b3e:	7f 91       	pop	r23
    2b40:	6f 91       	pop	r22
    2b42:	5f 91       	pop	r21
    2b44:	4f 91       	pop	r20
    2b46:	3f 91       	pop	r19
    2b48:	2f 91       	pop	r18
    2b4a:	0f 90       	pop	r0
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	0f 90       	pop	r0
    2b50:	1f 90       	pop	r1
    2b52:	18 95       	reti

00002b54 <__vector_2>:




ISR(INT1_vect){
    2b54:	1f 92       	push	r1
    2b56:	0f 92       	push	r0
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	0f 92       	push	r0
    2b5c:	11 24       	eor	r1, r1
    2b5e:	2f 93       	push	r18
    2b60:	3f 93       	push	r19
    2b62:	4f 93       	push	r20
    2b64:	5f 93       	push	r21
    2b66:	6f 93       	push	r22
    2b68:	7f 93       	push	r23
    2b6a:	8f 93       	push	r24
    2b6c:	9f 93       	push	r25
    2b6e:	af 93       	push	r26
    2b70:	bf 93       	push	r27
    2b72:	ef 93       	push	r30
    2b74:	ff 93       	push	r31
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_1] != NULL){
    2b7e:	80 91 9e 01 	lds	r24, 0x019E
    2b82:	90 91 9f 01 	lds	r25, 0x019F
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	29 f0       	breq	.+10     	; 0x2b94 <__vector_2+0x40>
			EXTI_pfunISRFun[INT_NO_1]();
    2b8a:	e0 91 9e 01 	lds	r30, 0x019E
    2b8e:	f0 91 9f 01 	lds	r31, 0x019F
    2b92:	09 95       	icall
		}
}
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	ff 91       	pop	r31
    2b9a:	ef 91       	pop	r30
    2b9c:	bf 91       	pop	r27
    2b9e:	af 91       	pop	r26
    2ba0:	9f 91       	pop	r25
    2ba2:	8f 91       	pop	r24
    2ba4:	7f 91       	pop	r23
    2ba6:	6f 91       	pop	r22
    2ba8:	5f 91       	pop	r21
    2baa:	4f 91       	pop	r20
    2bac:	3f 91       	pop	r19
    2bae:	2f 91       	pop	r18
    2bb0:	0f 90       	pop	r0
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	0f 90       	pop	r0
    2bb6:	1f 90       	pop	r1
    2bb8:	18 95       	reti

00002bba <__vector_3>:



ISR(INT2_vect){
    2bba:	1f 92       	push	r1
    2bbc:	0f 92       	push	r0
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	0f 92       	push	r0
    2bc2:	11 24       	eor	r1, r1
    2bc4:	2f 93       	push	r18
    2bc6:	3f 93       	push	r19
    2bc8:	4f 93       	push	r20
    2bca:	5f 93       	push	r21
    2bcc:	6f 93       	push	r22
    2bce:	7f 93       	push	r23
    2bd0:	8f 93       	push	r24
    2bd2:	9f 93       	push	r25
    2bd4:	af 93       	push	r26
    2bd6:	bf 93       	push	r27
    2bd8:	ef 93       	push	r30
    2bda:	ff 93       	push	r31
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_2] != NULL){
    2be4:	80 91 a0 01 	lds	r24, 0x01A0
    2be8:	90 91 a1 01 	lds	r25, 0x01A1
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	29 f0       	breq	.+10     	; 0x2bfa <__vector_3+0x40>
			EXTI_pfunISRFun[INT_NO_2]();
    2bf0:	e0 91 a0 01 	lds	r30, 0x01A0
    2bf4:	f0 91 a1 01 	lds	r31, 0x01A1
    2bf8:	09 95       	icall
		}
}
    2bfa:	cf 91       	pop	r28
    2bfc:	df 91       	pop	r29
    2bfe:	ff 91       	pop	r31
    2c00:	ef 91       	pop	r30
    2c02:	bf 91       	pop	r27
    2c04:	af 91       	pop	r26
    2c06:	9f 91       	pop	r25
    2c08:	8f 91       	pop	r24
    2c0a:	7f 91       	pop	r23
    2c0c:	6f 91       	pop	r22
    2c0e:	5f 91       	pop	r21
    2c10:	4f 91       	pop	r20
    2c12:	3f 91       	pop	r19
    2c14:	2f 91       	pop	r18
    2c16:	0f 90       	pop	r0
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	0f 90       	pop	r0
    2c1c:	1f 90       	pop	r1
    2c1e:	18 95       	reti

00002c20 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    2c20:	df 93       	push	r29
    2c22:	cf 93       	push	r28
    2c24:	0f 92       	push	r0
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2c2a:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    2c2c:	ea e3       	ldi	r30, 0x3A	; 58
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 ef       	ldi	r24, 0xF0	; 240
    2c32:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    2c34:	eb e3       	ldi	r30, 0x3B	; 59
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	83 ec       	ldi	r24, 0xC3	; 195
    2c3a:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    2c3c:	e7 e3       	ldi	r30, 0x37	; 55
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	80 ef       	ldi	r24, 0xF0	; 240
    2c42:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    2c44:	e8 e3       	ldi	r30, 0x38	; 56
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	83 ec       	ldi	r24, 0xC3	; 195
    2c4a:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    2c4c:	e4 e3       	ldi	r30, 0x34	; 52
    2c4e:	f0 e0       	ldi	r31, 0x00	; 0
    2c50:	80 ef       	ldi	r24, 0xF0	; 240
    2c52:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    2c54:	e5 e3       	ldi	r30, 0x35	; 53
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	83 ec       	ldi	r24, 0xC3	; 195
    2c5a:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    2c5c:	e1 e3       	ldi	r30, 0x31	; 49
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 ef       	ldi	r24, 0xF0	; 240
    2c62:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    2c64:	e2 e3       	ldi	r30, 0x32	; 50
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	83 ec       	ldi	r24, 0xC3	; 195
    2c6a:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c6e:	0f 90       	pop	r0
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	27 97       	sbiw	r28, 0x07	; 7
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	8a 83       	std	Y+2, r24	; 0x02
    2c8c:	6b 83       	std	Y+3, r22	; 0x03
    2c8e:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2c90:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    2c92:	8a 81       	ldd	r24, Y+2	; 0x02
    2c94:	84 30       	cpi	r24, 0x04	; 4
    2c96:	08 f0       	brcs	.+2      	; 0x2c9a <DIO_enuSetPinDirection+0x24>
    2c98:	de c0       	rjmp	.+444    	; 0x2e56 <DIO_enuSetPinDirection+0x1e0>
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	88 30       	cpi	r24, 0x08	; 8
    2c9e:	08 f0       	brcs	.+2      	; 0x2ca2 <DIO_enuSetPinDirection+0x2c>
    2ca0:	da c0       	rjmp	.+436    	; 0x2e56 <DIO_enuSetPinDirection+0x1e0>
    2ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca4:	82 30       	cpi	r24, 0x02	; 2
    2ca6:	08 f0       	brcs	.+2      	; 0x2caa <DIO_enuSetPinDirection+0x34>
    2ca8:	d6 c0       	rjmp	.+428    	; 0x2e56 <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    2caa:	8a 81       	ldd	r24, Y+2	; 0x02
    2cac:	28 2f       	mov	r18, r24
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	3f 83       	std	Y+7, r19	; 0x07
    2cb2:	2e 83       	std	Y+6, r18	; 0x06
    2cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2cb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb8:	81 30       	cpi	r24, 0x01	; 1
    2cba:	91 05       	cpc	r25, r1
    2cbc:	09 f4       	brne	.+2      	; 0x2cc0 <DIO_enuSetPinDirection+0x4a>
    2cbe:	43 c0       	rjmp	.+134    	; 0x2d46 <DIO_enuSetPinDirection+0xd0>
    2cc0:	2e 81       	ldd	r18, Y+6	; 0x06
    2cc2:	3f 81       	ldd	r19, Y+7	; 0x07
    2cc4:	22 30       	cpi	r18, 0x02	; 2
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	2c f4       	brge	.+10     	; 0x2cd4 <DIO_enuSetPinDirection+0x5e>
    2cca:	8e 81       	ldd	r24, Y+6	; 0x06
    2ccc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	71 f0       	breq	.+28     	; 0x2cee <DIO_enuSetPinDirection+0x78>
    2cd2:	bc c0       	rjmp	.+376    	; 0x2e4c <DIO_enuSetPinDirection+0x1d6>
    2cd4:	2e 81       	ldd	r18, Y+6	; 0x06
    2cd6:	3f 81       	ldd	r19, Y+7	; 0x07
    2cd8:	22 30       	cpi	r18, 0x02	; 2
    2cda:	31 05       	cpc	r19, r1
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <DIO_enuSetPinDirection+0x6a>
    2cde:	5f c0       	rjmp	.+190    	; 0x2d9e <DIO_enuSetPinDirection+0x128>
    2ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce4:	83 30       	cpi	r24, 0x03	; 3
    2ce6:	91 05       	cpc	r25, r1
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <DIO_enuSetPinDirection+0x76>
    2cea:	85 c0       	rjmp	.+266    	; 0x2df6 <DIO_enuSetPinDirection+0x180>
    2cec:	af c0       	rjmp	.+350    	; 0x2e4c <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2cee:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf0:	81 30       	cpi	r24, 0x01	; 1
    2cf2:	a1 f4       	brne	.+40     	; 0x2d1c <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    2cf4:	aa e3       	ldi	r26, 0x3A	; 58
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	ea e3       	ldi	r30, 0x3A	; 58
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	48 2f       	mov	r20, r24
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	90 e0       	ldi	r25, 0x00	; 0
    2d0a:	02 2e       	mov	r0, r18
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <DIO_enuSetPinDirection+0x9c>
    2d0e:	88 0f       	add	r24, r24
    2d10:	99 1f       	adc	r25, r25
    2d12:	0a 94       	dec	r0
    2d14:	e2 f7       	brpl	.-8      	; 0x2d0e <DIO_enuSetPinDirection+0x98>
    2d16:	84 2b       	or	r24, r20
    2d18:	8c 93       	st	X, r24
    2d1a:	98 c0       	rjmp	.+304    	; 0x2e4c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    2d1c:	aa e3       	ldi	r26, 0x3A	; 58
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
    2d20:	ea e3       	ldi	r30, 0x3A	; 58
    2d22:	f0 e0       	ldi	r31, 0x00	; 0
    2d24:	80 81       	ld	r24, Z
    2d26:	48 2f       	mov	r20, r24
    2d28:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	02 2e       	mov	r0, r18
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <DIO_enuSetPinDirection+0xc4>
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	0a 94       	dec	r0
    2d3c:	e2 f7       	brpl	.-8      	; 0x2d36 <DIO_enuSetPinDirection+0xc0>
    2d3e:	80 95       	com	r24
    2d40:	84 23       	and	r24, r20
    2d42:	8c 93       	st	X, r24
    2d44:	83 c0       	rjmp	.+262    	; 0x2e4c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2d46:	8c 81       	ldd	r24, Y+4	; 0x04
    2d48:	81 30       	cpi	r24, 0x01	; 1
    2d4a:	a1 f4       	brne	.+40     	; 0x2d74 <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    2d4c:	a7 e3       	ldi	r26, 0x37	; 55
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	e7 e3       	ldi	r30, 0x37	; 55
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	48 2f       	mov	r20, r24
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	02 2e       	mov	r0, r18
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <DIO_enuSetPinDirection+0xf4>
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	0a 94       	dec	r0
    2d6c:	e2 f7       	brpl	.-8      	; 0x2d66 <DIO_enuSetPinDirection+0xf0>
    2d6e:	84 2b       	or	r24, r20
    2d70:	8c 93       	st	X, r24
    2d72:	6c c0       	rjmp	.+216    	; 0x2e4c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    2d74:	a7 e3       	ldi	r26, 0x37	; 55
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e7 e3       	ldi	r30, 0x37	; 55
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	48 2f       	mov	r20, r24
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	02 2e       	mov	r0, r18
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <DIO_enuSetPinDirection+0x11c>
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	0a 94       	dec	r0
    2d94:	e2 f7       	brpl	.-8      	; 0x2d8e <DIO_enuSetPinDirection+0x118>
    2d96:	80 95       	com	r24
    2d98:	84 23       	and	r24, r20
    2d9a:	8c 93       	st	X, r24
    2d9c:	57 c0       	rjmp	.+174    	; 0x2e4c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    2d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2da0:	81 30       	cpi	r24, 0x01	; 1
    2da2:	a1 f4       	brne	.+40     	; 0x2dcc <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    2da4:	a4 e3       	ldi	r26, 0x34	; 52
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	e4 e3       	ldi	r30, 0x34	; 52
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	48 2f       	mov	r20, r24
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	81 e0       	ldi	r24, 0x01	; 1
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	02 2e       	mov	r0, r18
    2dbc:	02 c0       	rjmp	.+4      	; 0x2dc2 <DIO_enuSetPinDirection+0x14c>
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	0a 94       	dec	r0
    2dc4:	e2 f7       	brpl	.-8      	; 0x2dbe <DIO_enuSetPinDirection+0x148>
    2dc6:	84 2b       	or	r24, r20
    2dc8:	8c 93       	st	X, r24
    2dca:	40 c0       	rjmp	.+128    	; 0x2e4c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    2dcc:	a4 e3       	ldi	r26, 0x34	; 52
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	e4 e3       	ldi	r30, 0x34	; 52
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	80 81       	ld	r24, Z
    2dd6:	48 2f       	mov	r20, r24
    2dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	02 2e       	mov	r0, r18
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <DIO_enuSetPinDirection+0x174>
    2de6:	88 0f       	add	r24, r24
    2de8:	99 1f       	adc	r25, r25
    2dea:	0a 94       	dec	r0
    2dec:	e2 f7       	brpl	.-8      	; 0x2de6 <DIO_enuSetPinDirection+0x170>
    2dee:	80 95       	com	r24
    2df0:	84 23       	and	r24, r20
    2df2:	8c 93       	st	X, r24
    2df4:	2b c0       	rjmp	.+86     	; 0x2e4c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2df6:	8c 81       	ldd	r24, Y+4	; 0x04
    2df8:	81 30       	cpi	r24, 0x01	; 1
    2dfa:	a1 f4       	brne	.+40     	; 0x2e24 <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    2dfc:	a1 e3       	ldi	r26, 0x31	; 49
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e1 e3       	ldi	r30, 0x31	; 49
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	48 2f       	mov	r20, r24
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	28 2f       	mov	r18, r24
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	02 2e       	mov	r0, r18
    2e14:	02 c0       	rjmp	.+4      	; 0x2e1a <DIO_enuSetPinDirection+0x1a4>
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	0a 94       	dec	r0
    2e1c:	e2 f7       	brpl	.-8      	; 0x2e16 <DIO_enuSetPinDirection+0x1a0>
    2e1e:	84 2b       	or	r24, r20
    2e20:	8c 93       	st	X, r24
    2e22:	14 c0       	rjmp	.+40     	; 0x2e4c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    2e24:	a1 e3       	ldi	r26, 0x31	; 49
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	e1 e3       	ldi	r30, 0x31	; 49
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	48 2f       	mov	r20, r24
    2e30:	8b 81       	ldd	r24, Y+3	; 0x03
    2e32:	28 2f       	mov	r18, r24
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	02 2e       	mov	r0, r18
    2e3c:	02 c0       	rjmp	.+4      	; 0x2e42 <DIO_enuSetPinDirection+0x1cc>
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	0a 94       	dec	r0
    2e44:	e2 f7       	brpl	.-8      	; 0x2e3e <DIO_enuSetPinDirection+0x1c8>
    2e46:	80 95       	com	r24
    2e48:	84 23       	and	r24, r20
    2e4a:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    2e50:	99 81       	ldd	r25, Y+1	; 0x01
    2e52:	9d 83       	std	Y+5, r25	; 0x05
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    2e56:	29 81       	ldd	r18, Y+1	; 0x01
    2e58:	2d 83       	std	Y+5, r18	; 0x05
    2e5a:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    2e5c:	27 96       	adiw	r28, 0x07	; 7
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	cd bf       	out	0x3d, r28	; 61
    2e68:	cf 91       	pop	r28
    2e6a:	df 91       	pop	r29
    2e6c:	08 95       	ret

00002e6e <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    2e6e:	df 93       	push	r29
    2e70:	cf 93       	push	r28
    2e72:	cd b7       	in	r28, 0x3d	; 61
    2e74:	de b7       	in	r29, 0x3e	; 62
    2e76:	27 97       	sbiw	r28, 0x07	; 7
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	8a 83       	std	Y+2, r24	; 0x02
    2e84:	6b 83       	std	Y+3, r22	; 0x03
    2e86:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2e88:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	84 30       	cpi	r24, 0x04	; 4
    2e8e:	08 f0       	brcs	.+2      	; 0x2e92 <DIO_enuSetPinValue+0x24>
    2e90:	de c0       	rjmp	.+444    	; 0x304e <DIO_enuSetPinValue+0x1e0>
    2e92:	8b 81       	ldd	r24, Y+3	; 0x03
    2e94:	88 30       	cpi	r24, 0x08	; 8
    2e96:	08 f0       	brcs	.+2      	; 0x2e9a <DIO_enuSetPinValue+0x2c>
    2e98:	da c0       	rjmp	.+436    	; 0x304e <DIO_enuSetPinValue+0x1e0>
    2e9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9c:	82 30       	cpi	r24, 0x02	; 2
    2e9e:	08 f0       	brcs	.+2      	; 0x2ea2 <DIO_enuSetPinValue+0x34>
    2ea0:	d6 c0       	rjmp	.+428    	; 0x304e <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	3f 83       	std	Y+7, r19	; 0x07
    2eaa:	2e 83       	std	Y+6, r18	; 0x06
    2eac:	8e 81       	ldd	r24, Y+6	; 0x06
    2eae:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb0:	81 30       	cpi	r24, 0x01	; 1
    2eb2:	91 05       	cpc	r25, r1
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <DIO_enuSetPinValue+0x4a>
    2eb6:	43 c0       	rjmp	.+134    	; 0x2f3e <DIO_enuSetPinValue+0xd0>
    2eb8:	2e 81       	ldd	r18, Y+6	; 0x06
    2eba:	3f 81       	ldd	r19, Y+7	; 0x07
    2ebc:	22 30       	cpi	r18, 0x02	; 2
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	2c f4       	brge	.+10     	; 0x2ecc <DIO_enuSetPinValue+0x5e>
    2ec2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ec4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec6:	00 97       	sbiw	r24, 0x00	; 0
    2ec8:	71 f0       	breq	.+28     	; 0x2ee6 <DIO_enuSetPinValue+0x78>
    2eca:	bc c0       	rjmp	.+376    	; 0x3044 <DIO_enuSetPinValue+0x1d6>
    2ecc:	2e 81       	ldd	r18, Y+6	; 0x06
    2ece:	3f 81       	ldd	r19, Y+7	; 0x07
    2ed0:	22 30       	cpi	r18, 0x02	; 2
    2ed2:	31 05       	cpc	r19, r1
    2ed4:	09 f4       	brne	.+2      	; 0x2ed8 <DIO_enuSetPinValue+0x6a>
    2ed6:	5f c0       	rjmp	.+190    	; 0x2f96 <DIO_enuSetPinValue+0x128>
    2ed8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eda:	9f 81       	ldd	r25, Y+7	; 0x07
    2edc:	83 30       	cpi	r24, 0x03	; 3
    2ede:	91 05       	cpc	r25, r1
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <DIO_enuSetPinValue+0x76>
    2ee2:	85 c0       	rjmp	.+266    	; 0x2fee <DIO_enuSetPinValue+0x180>
    2ee4:	af c0       	rjmp	.+350    	; 0x3044 <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    2ee6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee8:	88 23       	and	r24, r24
    2eea:	a1 f0       	breq	.+40     	; 0x2f14 <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    2eec:	ab e3       	ldi	r26, 0x3B	; 59
    2eee:	b0 e0       	ldi	r27, 0x00	; 0
    2ef0:	eb e3       	ldi	r30, 0x3B	; 59
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	48 2f       	mov	r20, r24
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	28 2f       	mov	r18, r24
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	02 2e       	mov	r0, r18
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <DIO_enuSetPinValue+0x9c>
    2f06:	88 0f       	add	r24, r24
    2f08:	99 1f       	adc	r25, r25
    2f0a:	0a 94       	dec	r0
    2f0c:	e2 f7       	brpl	.-8      	; 0x2f06 <DIO_enuSetPinValue+0x98>
    2f0e:	84 2b       	or	r24, r20
    2f10:	8c 93       	st	X, r24
    2f12:	98 c0       	rjmp	.+304    	; 0x3044 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    2f14:	ab e3       	ldi	r26, 0x3B	; 59
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	eb e3       	ldi	r30, 0x3B	; 59
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	80 81       	ld	r24, Z
    2f1e:	48 2f       	mov	r20, r24
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	28 2f       	mov	r18, r24
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	02 2e       	mov	r0, r18
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <DIO_enuSetPinValue+0xc4>
    2f2e:	88 0f       	add	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	0a 94       	dec	r0
    2f34:	e2 f7       	brpl	.-8      	; 0x2f2e <DIO_enuSetPinValue+0xc0>
    2f36:	80 95       	com	r24
    2f38:	84 23       	and	r24, r20
    2f3a:	8c 93       	st	X, r24
    2f3c:	83 c0       	rjmp	.+262    	; 0x3044 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    2f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f40:	88 23       	and	r24, r24
    2f42:	a1 f0       	breq	.+40     	; 0x2f6c <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    2f44:	a8 e3       	ldi	r26, 0x38	; 56
    2f46:	b0 e0       	ldi	r27, 0x00	; 0
    2f48:	e8 e3       	ldi	r30, 0x38	; 56
    2f4a:	f0 e0       	ldi	r31, 0x00	; 0
    2f4c:	80 81       	ld	r24, Z
    2f4e:	48 2f       	mov	r20, r24
    2f50:	8b 81       	ldd	r24, Y+3	; 0x03
    2f52:	28 2f       	mov	r18, r24
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	02 2e       	mov	r0, r18
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <DIO_enuSetPinValue+0xf4>
    2f5e:	88 0f       	add	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	0a 94       	dec	r0
    2f64:	e2 f7       	brpl	.-8      	; 0x2f5e <DIO_enuSetPinValue+0xf0>
    2f66:	84 2b       	or	r24, r20
    2f68:	8c 93       	st	X, r24
    2f6a:	6c c0       	rjmp	.+216    	; 0x3044 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    2f6c:	a8 e3       	ldi	r26, 0x38	; 56
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e8 e3       	ldi	r30, 0x38	; 56
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	80 81       	ld	r24, Z
    2f76:	48 2f       	mov	r20, r24
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	28 2f       	mov	r18, r24
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	02 2e       	mov	r0, r18
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <DIO_enuSetPinValue+0x11c>
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	0a 94       	dec	r0
    2f8c:	e2 f7       	brpl	.-8      	; 0x2f86 <DIO_enuSetPinValue+0x118>
    2f8e:	80 95       	com	r24
    2f90:	84 23       	and	r24, r20
    2f92:	8c 93       	st	X, r24
    2f94:	57 c0       	rjmp	.+174    	; 0x3044 <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    2f96:	8c 81       	ldd	r24, Y+4	; 0x04
    2f98:	88 23       	and	r24, r24
    2f9a:	a1 f0       	breq	.+40     	; 0x2fc4 <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    2f9c:	a5 e3       	ldi	r26, 0x35	; 53
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	e5 e3       	ldi	r30, 0x35	; 53
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	80 81       	ld	r24, Z
    2fa6:	48 2f       	mov	r20, r24
    2fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	02 2e       	mov	r0, r18
    2fb4:	02 c0       	rjmp	.+4      	; 0x2fba <DIO_enuSetPinValue+0x14c>
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	0a 94       	dec	r0
    2fbc:	e2 f7       	brpl	.-8      	; 0x2fb6 <DIO_enuSetPinValue+0x148>
    2fbe:	84 2b       	or	r24, r20
    2fc0:	8c 93       	st	X, r24
    2fc2:	40 c0       	rjmp	.+128    	; 0x3044 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    2fc4:	a5 e3       	ldi	r26, 0x35	; 53
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e5 e3       	ldi	r30, 0x35	; 53
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	48 2f       	mov	r20, r24
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	02 2e       	mov	r0, r18
    2fdc:	02 c0       	rjmp	.+4      	; 0x2fe2 <DIO_enuSetPinValue+0x174>
    2fde:	88 0f       	add	r24, r24
    2fe0:	99 1f       	adc	r25, r25
    2fe2:	0a 94       	dec	r0
    2fe4:	e2 f7       	brpl	.-8      	; 0x2fde <DIO_enuSetPinValue+0x170>
    2fe6:	80 95       	com	r24
    2fe8:	84 23       	and	r24, r20
    2fea:	8c 93       	st	X, r24
    2fec:	2b c0       	rjmp	.+86     	; 0x3044 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    2fee:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff0:	88 23       	and	r24, r24
    2ff2:	a1 f0       	breq	.+40     	; 0x301c <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    2ff4:	a2 e3       	ldi	r26, 0x32	; 50
    2ff6:	b0 e0       	ldi	r27, 0x00	; 0
    2ff8:	e2 e3       	ldi	r30, 0x32	; 50
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	80 81       	ld	r24, Z
    2ffe:	48 2f       	mov	r20, r24
    3000:	8b 81       	ldd	r24, Y+3	; 0x03
    3002:	28 2f       	mov	r18, r24
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	90 e0       	ldi	r25, 0x00	; 0
    300a:	02 2e       	mov	r0, r18
    300c:	02 c0       	rjmp	.+4      	; 0x3012 <DIO_enuSetPinValue+0x1a4>
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	0a 94       	dec	r0
    3014:	e2 f7       	brpl	.-8      	; 0x300e <DIO_enuSetPinValue+0x1a0>
    3016:	84 2b       	or	r24, r20
    3018:	8c 93       	st	X, r24
    301a:	14 c0       	rjmp	.+40     	; 0x3044 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    301c:	a2 e3       	ldi	r26, 0x32	; 50
    301e:	b0 e0       	ldi	r27, 0x00	; 0
    3020:	e2 e3       	ldi	r30, 0x32	; 50
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	48 2f       	mov	r20, r24
    3028:	8b 81       	ldd	r24, Y+3	; 0x03
    302a:	28 2f       	mov	r18, r24
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	02 2e       	mov	r0, r18
    3034:	02 c0       	rjmp	.+4      	; 0x303a <DIO_enuSetPinValue+0x1cc>
    3036:	88 0f       	add	r24, r24
    3038:	99 1f       	adc	r25, r25
    303a:	0a 94       	dec	r0
    303c:	e2 f7       	brpl	.-8      	; 0x3036 <DIO_enuSetPinValue+0x1c8>
    303e:	80 95       	com	r24
    3040:	84 23       	and	r24, r20
    3042:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    3048:	99 81       	ldd	r25, Y+1	; 0x01
    304a:	9d 83       	std	Y+5, r25	; 0x05
    304c:	02 c0       	rjmp	.+4      	; 0x3052 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    304e:	29 81       	ldd	r18, Y+1	; 0x01
    3050:	2d 83       	std	Y+5, r18	; 0x05
    3052:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    3054:	27 96       	adiw	r28, 0x07	; 7
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	cf 91       	pop	r28
    3062:	df 91       	pop	r29
    3064:	08 95       	ret

00003066 <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	28 97       	sbiw	r28, 0x08	; 8
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
    307a:	8a 83       	std	Y+2, r24	; 0x02
    307c:	6b 83       	std	Y+3, r22	; 0x03
    307e:	5d 83       	std	Y+5, r21	; 0x05
    3080:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3082:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    3084:	8c 81       	ldd	r24, Y+4	; 0x04
    3086:	9d 81       	ldd	r25, Y+5	; 0x05
    3088:	00 97       	sbiw	r24, 0x00	; 0
    308a:	29 f4       	brne	.+10     	; 0x3096 <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    308c:	83 e0       	ldi	r24, 0x03	; 3
    308e:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    3090:	29 81       	ldd	r18, Y+1	; 0x01
    3092:	28 87       	std	Y+8, r18	; 0x08
    3094:	7f c0       	rjmp	.+254    	; 0x3194 <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	84 30       	cpi	r24, 0x04	; 4
    309a:	08 f0       	brcs	.+2      	; 0x309e <DIO_enuGetPinValue+0x38>
    309c:	79 c0       	rjmp	.+242    	; 0x3190 <DIO_enuGetPinValue+0x12a>
    309e:	8b 81       	ldd	r24, Y+3	; 0x03
    30a0:	88 30       	cpi	r24, 0x08	; 8
    30a2:	08 f0       	brcs	.+2      	; 0x30a6 <DIO_enuGetPinValue+0x40>
    30a4:	75 c0       	rjmp	.+234    	; 0x3190 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	48 2f       	mov	r20, r24
    30aa:	50 e0       	ldi	r21, 0x00	; 0
    30ac:	5f 83       	std	Y+7, r21	; 0x07
    30ae:	4e 83       	std	Y+6, r20	; 0x06
    30b0:	8e 81       	ldd	r24, Y+6	; 0x06
    30b2:	9f 81       	ldd	r25, Y+7	; 0x07
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	91 05       	cpc	r25, r1
    30b8:	59 f1       	breq	.+86     	; 0x3110 <DIO_enuGetPinValue+0xaa>
    30ba:	2e 81       	ldd	r18, Y+6	; 0x06
    30bc:	3f 81       	ldd	r19, Y+7	; 0x07
    30be:	22 30       	cpi	r18, 0x02	; 2
    30c0:	31 05       	cpc	r19, r1
    30c2:	34 f4       	brge	.+12     	; 0x30d0 <DIO_enuGetPinValue+0x6a>
    30c4:	4e 81       	ldd	r20, Y+6	; 0x06
    30c6:	5f 81       	ldd	r21, Y+7	; 0x07
    30c8:	41 15       	cp	r20, r1
    30ca:	51 05       	cpc	r21, r1
    30cc:	69 f0       	breq	.+26     	; 0x30e8 <DIO_enuGetPinValue+0x82>
    30ce:	5b c0       	rjmp	.+182    	; 0x3186 <DIO_enuGetPinValue+0x120>
    30d0:	8e 81       	ldd	r24, Y+6	; 0x06
    30d2:	9f 81       	ldd	r25, Y+7	; 0x07
    30d4:	82 30       	cpi	r24, 0x02	; 2
    30d6:	91 05       	cpc	r25, r1
    30d8:	79 f1       	breq	.+94     	; 0x3138 <DIO_enuGetPinValue+0xd2>
    30da:	2e 81       	ldd	r18, Y+6	; 0x06
    30dc:	3f 81       	ldd	r19, Y+7	; 0x07
    30de:	23 30       	cpi	r18, 0x03	; 3
    30e0:	31 05       	cpc	r19, r1
    30e2:	09 f4       	brne	.+2      	; 0x30e6 <DIO_enuGetPinValue+0x80>
    30e4:	3d c0       	rjmp	.+122    	; 0x3160 <DIO_enuGetPinValue+0xfa>
    30e6:	4f c0       	rjmp	.+158    	; 0x3186 <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    30e8:	e9 e3       	ldi	r30, 0x39	; 57
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	28 2f       	mov	r18, r24
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	8b 81       	ldd	r24, Y+3	; 0x03
    30f4:	88 2f       	mov	r24, r24
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	a9 01       	movw	r20, r18
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <DIO_enuGetPinValue+0x9a>
    30fc:	55 95       	asr	r21
    30fe:	47 95       	ror	r20
    3100:	8a 95       	dec	r24
    3102:	e2 f7       	brpl	.-8      	; 0x30fc <DIO_enuGetPinValue+0x96>
    3104:	ca 01       	movw	r24, r20
    3106:	81 70       	andi	r24, 0x01	; 1
    3108:	ec 81       	ldd	r30, Y+4	; 0x04
    310a:	fd 81       	ldd	r31, Y+5	; 0x05
    310c:	80 83       	st	Z, r24
    310e:	3b c0       	rjmp	.+118    	; 0x3186 <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    3110:	e6 e3       	ldi	r30, 0x36	; 54
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	28 2f       	mov	r18, r24
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	8b 81       	ldd	r24, Y+3	; 0x03
    311c:	88 2f       	mov	r24, r24
    311e:	90 e0       	ldi	r25, 0x00	; 0
    3120:	a9 01       	movw	r20, r18
    3122:	02 c0       	rjmp	.+4      	; 0x3128 <DIO_enuGetPinValue+0xc2>
    3124:	55 95       	asr	r21
    3126:	47 95       	ror	r20
    3128:	8a 95       	dec	r24
    312a:	e2 f7       	brpl	.-8      	; 0x3124 <DIO_enuGetPinValue+0xbe>
    312c:	ca 01       	movw	r24, r20
    312e:	81 70       	andi	r24, 0x01	; 1
    3130:	ec 81       	ldd	r30, Y+4	; 0x04
    3132:	fd 81       	ldd	r31, Y+5	; 0x05
    3134:	80 83       	st	Z, r24
    3136:	27 c0       	rjmp	.+78     	; 0x3186 <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    3138:	e3 e3       	ldi	r30, 0x33	; 51
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	28 2f       	mov	r18, r24
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	8b 81       	ldd	r24, Y+3	; 0x03
    3144:	88 2f       	mov	r24, r24
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	a9 01       	movw	r20, r18
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <DIO_enuGetPinValue+0xea>
    314c:	55 95       	asr	r21
    314e:	47 95       	ror	r20
    3150:	8a 95       	dec	r24
    3152:	e2 f7       	brpl	.-8      	; 0x314c <DIO_enuGetPinValue+0xe6>
    3154:	ca 01       	movw	r24, r20
    3156:	81 70       	andi	r24, 0x01	; 1
    3158:	ec 81       	ldd	r30, Y+4	; 0x04
    315a:	fd 81       	ldd	r31, Y+5	; 0x05
    315c:	80 83       	st	Z, r24
    315e:	13 c0       	rjmp	.+38     	; 0x3186 <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    3160:	e0 e3       	ldi	r30, 0x30	; 48
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	80 81       	ld	r24, Z
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	8b 81       	ldd	r24, Y+3	; 0x03
    316c:	88 2f       	mov	r24, r24
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	a9 01       	movw	r20, r18
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <DIO_enuGetPinValue+0x112>
    3174:	55 95       	asr	r21
    3176:	47 95       	ror	r20
    3178:	8a 95       	dec	r24
    317a:	e2 f7       	brpl	.-8      	; 0x3174 <DIO_enuGetPinValue+0x10e>
    317c:	ca 01       	movw	r24, r20
    317e:	81 70       	andi	r24, 0x01	; 1
    3180:	ec 81       	ldd	r30, Y+4	; 0x04
    3182:	fd 81       	ldd	r31, Y+5	; 0x05
    3184:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    3186:	81 e0       	ldi	r24, 0x01	; 1
    3188:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    318a:	59 81       	ldd	r21, Y+1	; 0x01
    318c:	58 87       	std	Y+8, r21	; 0x08
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	88 87       	std	Y+8, r24	; 0x08
    3194:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    3196:	28 96       	adiw	r28, 0x08	; 8
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	08 95       	ret

000031a8 <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <DIO_enuTogglePinValue+0x6>
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <DIO_enuTogglePinValue+0x8>
    31b0:	00 d0       	rcall	.+0      	; 0x31b2 <DIO_enuTogglePinValue+0xa>
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	8a 83       	std	Y+2, r24	; 0x02
    31b8:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    31ba:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	84 30       	cpi	r24, 0x04	; 4
    31c0:	08 f0       	brcs	.+2      	; 0x31c4 <DIO_enuTogglePinValue+0x1c>
    31c2:	77 c0       	rjmp	.+238    	; 0x32b2 <DIO_enuTogglePinValue+0x10a>
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	88 30       	cpi	r24, 0x08	; 8
    31c8:	08 f0       	brcs	.+2      	; 0x31cc <DIO_enuTogglePinValue+0x24>
    31ca:	73 c0       	rjmp	.+230    	; 0x32b2 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	28 2f       	mov	r18, r24
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	3e 83       	std	Y+6, r19	; 0x06
    31d4:	2d 83       	std	Y+5, r18	; 0x05
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
    31d8:	9e 81       	ldd	r25, Y+6	; 0x06
    31da:	81 30       	cpi	r24, 0x01	; 1
    31dc:	91 05       	cpc	r25, r1
    31de:	49 f1       	breq	.+82     	; 0x3232 <DIO_enuTogglePinValue+0x8a>
    31e0:	2d 81       	ldd	r18, Y+5	; 0x05
    31e2:	3e 81       	ldd	r19, Y+6	; 0x06
    31e4:	22 30       	cpi	r18, 0x02	; 2
    31e6:	31 05       	cpc	r19, r1
    31e8:	2c f4       	brge	.+10     	; 0x31f4 <DIO_enuTogglePinValue+0x4c>
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	9e 81       	ldd	r25, Y+6	; 0x06
    31ee:	00 97       	sbiw	r24, 0x00	; 0
    31f0:	61 f0       	breq	.+24     	; 0x320a <DIO_enuTogglePinValue+0x62>
    31f2:	5a c0       	rjmp	.+180    	; 0x32a8 <DIO_enuTogglePinValue+0x100>
    31f4:	2d 81       	ldd	r18, Y+5	; 0x05
    31f6:	3e 81       	ldd	r19, Y+6	; 0x06
    31f8:	22 30       	cpi	r18, 0x02	; 2
    31fa:	31 05       	cpc	r19, r1
    31fc:	71 f1       	breq	.+92     	; 0x325a <DIO_enuTogglePinValue+0xb2>
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	9e 81       	ldd	r25, Y+6	; 0x06
    3202:	83 30       	cpi	r24, 0x03	; 3
    3204:	91 05       	cpc	r25, r1
    3206:	e9 f1       	breq	.+122    	; 0x3282 <DIO_enuTogglePinValue+0xda>
    3208:	4f c0       	rjmp	.+158    	; 0x32a8 <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    320a:	ab e3       	ldi	r26, 0x3B	; 59
    320c:	b0 e0       	ldi	r27, 0x00	; 0
    320e:	eb e3       	ldi	r30, 0x3B	; 59
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	80 81       	ld	r24, Z
    3214:	48 2f       	mov	r20, r24
    3216:	8b 81       	ldd	r24, Y+3	; 0x03
    3218:	28 2f       	mov	r18, r24
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	02 2e       	mov	r0, r18
    3222:	02 c0       	rjmp	.+4      	; 0x3228 <DIO_enuTogglePinValue+0x80>
    3224:	88 0f       	add	r24, r24
    3226:	99 1f       	adc	r25, r25
    3228:	0a 94       	dec	r0
    322a:	e2 f7       	brpl	.-8      	; 0x3224 <DIO_enuTogglePinValue+0x7c>
    322c:	84 27       	eor	r24, r20
    322e:	8c 93       	st	X, r24
    3230:	3b c0       	rjmp	.+118    	; 0x32a8 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    3232:	a8 e3       	ldi	r26, 0x38	; 56
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	e8 e3       	ldi	r30, 0x38	; 56
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	48 2f       	mov	r20, r24
    323e:	8b 81       	ldd	r24, Y+3	; 0x03
    3240:	28 2f       	mov	r18, r24
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	02 2e       	mov	r0, r18
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <DIO_enuTogglePinValue+0xa8>
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	0a 94       	dec	r0
    3252:	e2 f7       	brpl	.-8      	; 0x324c <DIO_enuTogglePinValue+0xa4>
    3254:	84 27       	eor	r24, r20
    3256:	8c 93       	st	X, r24
    3258:	27 c0       	rjmp	.+78     	; 0x32a8 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    325a:	a5 e3       	ldi	r26, 0x35	; 53
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	e5 e3       	ldi	r30, 0x35	; 53
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	48 2f       	mov	r20, r24
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	28 2f       	mov	r18, r24
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	02 2e       	mov	r0, r18
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <DIO_enuTogglePinValue+0xd0>
    3274:	88 0f       	add	r24, r24
    3276:	99 1f       	adc	r25, r25
    3278:	0a 94       	dec	r0
    327a:	e2 f7       	brpl	.-8      	; 0x3274 <DIO_enuTogglePinValue+0xcc>
    327c:	84 27       	eor	r24, r20
    327e:	8c 93       	st	X, r24
    3280:	13 c0       	rjmp	.+38     	; 0x32a8 <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    3282:	a2 e3       	ldi	r26, 0x32	; 50
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	e2 e3       	ldi	r30, 0x32	; 50
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	48 2f       	mov	r20, r24
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	02 2e       	mov	r0, r18
    329a:	02 c0       	rjmp	.+4      	; 0x32a0 <DIO_enuTogglePinValue+0xf8>
    329c:	88 0f       	add	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	0a 94       	dec	r0
    32a2:	e2 f7       	brpl	.-8      	; 0x329c <DIO_enuTogglePinValue+0xf4>
    32a4:	84 27       	eor	r24, r20
    32a6:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    32ac:	99 81       	ldd	r25, Y+1	; 0x01
    32ae:	9c 83       	std	Y+4, r25	; 0x04
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    32b2:	29 81       	ldd	r18, Y+1	; 0x01
    32b4:	2c 83       	std	Y+4, r18	; 0x04
    32b6:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    32b8:	26 96       	adiw	r28, 0x06	; 6
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <DIO_enuSetPortDirection+0x6>
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <DIO_enuSetPortDirection+0x8>
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <DIO_enuSetPortDirection+0xa>
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	8a 83       	std	Y+2, r24	; 0x02
    32da:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    32dc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	84 30       	cpi	r24, 0x04	; 4
    32e2:	08 f0       	brcs	.+2      	; 0x32e6 <DIO_enuSetPortDirection+0x1c>
    32e4:	57 c0       	rjmp	.+174    	; 0x3394 <DIO_enuSetPortDirection+0xca>
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	82 30       	cpi	r24, 0x02	; 2
    32ea:	08 f0       	brcs	.+2      	; 0x32ee <DIO_enuSetPortDirection+0x24>
    32ec:	53 c0       	rjmp	.+166    	; 0x3394 <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	28 2f       	mov	r18, r24
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	3e 83       	std	Y+6, r19	; 0x06
    32f6:	2d 83       	std	Y+5, r18	; 0x05
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	9e 81       	ldd	r25, Y+6	; 0x06
    32fc:	81 30       	cpi	r24, 0x01	; 1
    32fe:	91 05       	cpc	r25, r1
    3300:	09 f1       	breq	.+66     	; 0x3344 <DIO_enuSetPortDirection+0x7a>
    3302:	2d 81       	ldd	r18, Y+5	; 0x05
    3304:	3e 81       	ldd	r19, Y+6	; 0x06
    3306:	22 30       	cpi	r18, 0x02	; 2
    3308:	31 05       	cpc	r19, r1
    330a:	2c f4       	brge	.+10     	; 0x3316 <DIO_enuSetPortDirection+0x4c>
    330c:	8d 81       	ldd	r24, Y+5	; 0x05
    330e:	9e 81       	ldd	r25, Y+6	; 0x06
    3310:	00 97       	sbiw	r24, 0x00	; 0
    3312:	61 f0       	breq	.+24     	; 0x332c <DIO_enuSetPortDirection+0x62>
    3314:	3a c0       	rjmp	.+116    	; 0x338a <DIO_enuSetPortDirection+0xc0>
    3316:	2d 81       	ldd	r18, Y+5	; 0x05
    3318:	3e 81       	ldd	r19, Y+6	; 0x06
    331a:	22 30       	cpi	r18, 0x02	; 2
    331c:	31 05       	cpc	r19, r1
    331e:	f1 f0       	breq	.+60     	; 0x335c <DIO_enuSetPortDirection+0x92>
    3320:	8d 81       	ldd	r24, Y+5	; 0x05
    3322:	9e 81       	ldd	r25, Y+6	; 0x06
    3324:	83 30       	cpi	r24, 0x03	; 3
    3326:	91 05       	cpc	r25, r1
    3328:	29 f1       	breq	.+74     	; 0x3374 <DIO_enuSetPortDirection+0xaa>
    332a:	2f c0       	rjmp	.+94     	; 0x338a <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	29 f4       	brne	.+10     	; 0x333c <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    3332:	ea e3       	ldi	r30, 0x3A	; 58
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	8f ef       	ldi	r24, 0xFF	; 255
    3338:	80 83       	st	Z, r24
    333a:	27 c0       	rjmp	.+78     	; 0x338a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    333c:	ea e3       	ldi	r30, 0x3A	; 58
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	10 82       	st	Z, r1
    3342:	23 c0       	rjmp	.+70     	; 0x338a <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    3344:	8b 81       	ldd	r24, Y+3	; 0x03
    3346:	81 30       	cpi	r24, 0x01	; 1
    3348:	29 f4       	brne	.+10     	; 0x3354 <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    334a:	e7 e3       	ldi	r30, 0x37	; 55
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	8f ef       	ldi	r24, 0xFF	; 255
    3350:	80 83       	st	Z, r24
    3352:	1b c0       	rjmp	.+54     	; 0x338a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    3354:	e7 e3       	ldi	r30, 0x37	; 55
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	10 82       	st	Z, r1
    335a:	17 c0       	rjmp	.+46     	; 0x338a <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    335c:	8b 81       	ldd	r24, Y+3	; 0x03
    335e:	81 30       	cpi	r24, 0x01	; 1
    3360:	29 f4       	brne	.+10     	; 0x336c <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    3362:	e4 e3       	ldi	r30, 0x34	; 52
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	8f ef       	ldi	r24, 0xFF	; 255
    3368:	80 83       	st	Z, r24
    336a:	0f c0       	rjmp	.+30     	; 0x338a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    336c:	e4 e3       	ldi	r30, 0x34	; 52
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	10 82       	st	Z, r1
    3372:	0b c0       	rjmp	.+22     	; 0x338a <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    3374:	8b 81       	ldd	r24, Y+3	; 0x03
    3376:	81 30       	cpi	r24, 0x01	; 1
    3378:	29 f4       	brne	.+10     	; 0x3384 <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    337a:	e1 e3       	ldi	r30, 0x31	; 49
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	8f ef       	ldi	r24, 0xFF	; 255
    3380:	80 83       	st	Z, r24
    3382:	03 c0       	rjmp	.+6      	; 0x338a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    3384:	e1 e3       	ldi	r30, 0x31	; 49
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    338e:	99 81       	ldd	r25, Y+1	; 0x01
    3390:	9c 83       	std	Y+4, r25	; 0x04
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    3394:	29 81       	ldd	r18, Y+1	; 0x01
    3396:	2c 83       	std	Y+4, r18	; 0x04
    3398:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    339a:	26 96       	adiw	r28, 0x06	; 6
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <DIO_enuSetPortValue+0x6>
    33b2:	00 d0       	rcall	.+0      	; 0x33b4 <DIO_enuSetPortValue+0x8>
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <DIO_enuSetPortValue+0xa>
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	8a 83       	std	Y+2, r24	; 0x02
    33bc:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    33be:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	84 30       	cpi	r24, 0x04	; 4
    33c4:	08 f0       	brcs	.+2      	; 0x33c8 <DIO_enuSetPortValue+0x1c>
    33c6:	57 c0       	rjmp	.+174    	; 0x3476 <DIO_enuSetPortValue+0xca>
    33c8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ca:	82 30       	cpi	r24, 0x02	; 2
    33cc:	08 f0       	brcs	.+2      	; 0x33d0 <DIO_enuSetPortValue+0x24>
    33ce:	53 c0       	rjmp	.+166    	; 0x3476 <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	28 2f       	mov	r18, r24
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	3e 83       	std	Y+6, r19	; 0x06
    33d8:	2d 83       	std	Y+5, r18	; 0x05
    33da:	8d 81       	ldd	r24, Y+5	; 0x05
    33dc:	9e 81       	ldd	r25, Y+6	; 0x06
    33de:	81 30       	cpi	r24, 0x01	; 1
    33e0:	91 05       	cpc	r25, r1
    33e2:	09 f1       	breq	.+66     	; 0x3426 <DIO_enuSetPortValue+0x7a>
    33e4:	2d 81       	ldd	r18, Y+5	; 0x05
    33e6:	3e 81       	ldd	r19, Y+6	; 0x06
    33e8:	22 30       	cpi	r18, 0x02	; 2
    33ea:	31 05       	cpc	r19, r1
    33ec:	2c f4       	brge	.+10     	; 0x33f8 <DIO_enuSetPortValue+0x4c>
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	9e 81       	ldd	r25, Y+6	; 0x06
    33f2:	00 97       	sbiw	r24, 0x00	; 0
    33f4:	61 f0       	breq	.+24     	; 0x340e <DIO_enuSetPortValue+0x62>
    33f6:	3a c0       	rjmp	.+116    	; 0x346c <DIO_enuSetPortValue+0xc0>
    33f8:	2d 81       	ldd	r18, Y+5	; 0x05
    33fa:	3e 81       	ldd	r19, Y+6	; 0x06
    33fc:	22 30       	cpi	r18, 0x02	; 2
    33fe:	31 05       	cpc	r19, r1
    3400:	f1 f0       	breq	.+60     	; 0x343e <DIO_enuSetPortValue+0x92>
    3402:	8d 81       	ldd	r24, Y+5	; 0x05
    3404:	9e 81       	ldd	r25, Y+6	; 0x06
    3406:	83 30       	cpi	r24, 0x03	; 3
    3408:	91 05       	cpc	r25, r1
    340a:	29 f1       	breq	.+74     	; 0x3456 <DIO_enuSetPortValue+0xaa>
    340c:	2f c0       	rjmp	.+94     	; 0x346c <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	88 23       	and	r24, r24
    3412:	29 f0       	breq	.+10     	; 0x341e <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    3414:	eb e3       	ldi	r30, 0x3B	; 59
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	8f ef       	ldi	r24, 0xFF	; 255
    341a:	80 83       	st	Z, r24
    341c:	27 c0       	rjmp	.+78     	; 0x346c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    341e:	eb e3       	ldi	r30, 0x3B	; 59
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	10 82       	st	Z, r1
    3424:	23 c0       	rjmp	.+70     	; 0x346c <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    3426:	8b 81       	ldd	r24, Y+3	; 0x03
    3428:	88 23       	and	r24, r24
    342a:	29 f0       	breq	.+10     	; 0x3436 <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    342c:	e8 e3       	ldi	r30, 0x38	; 56
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	8f ef       	ldi	r24, 0xFF	; 255
    3432:	80 83       	st	Z, r24
    3434:	1b c0       	rjmp	.+54     	; 0x346c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    3436:	e8 e3       	ldi	r30, 0x38	; 56
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	10 82       	st	Z, r1
    343c:	17 c0       	rjmp	.+46     	; 0x346c <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	88 23       	and	r24, r24
    3442:	29 f0       	breq	.+10     	; 0x344e <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    3444:	e5 e3       	ldi	r30, 0x35	; 53
    3446:	f0 e0       	ldi	r31, 0x00	; 0
    3448:	8f ef       	ldi	r24, 0xFF	; 255
    344a:	80 83       	st	Z, r24
    344c:	0f c0       	rjmp	.+30     	; 0x346c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    344e:	e5 e3       	ldi	r30, 0x35	; 53
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	10 82       	st	Z, r1
    3454:	0b c0       	rjmp	.+22     	; 0x346c <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    3456:	8b 81       	ldd	r24, Y+3	; 0x03
    3458:	88 23       	and	r24, r24
    345a:	29 f0       	breq	.+10     	; 0x3466 <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    345c:	e2 e3       	ldi	r30, 0x32	; 50
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	8f ef       	ldi	r24, 0xFF	; 255
    3462:	80 83       	st	Z, r24
    3464:	03 c0       	rjmp	.+6      	; 0x346c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    3466:	e2 e3       	ldi	r30, 0x32	; 50
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    3470:	99 81       	ldd	r25, Y+1	; 0x01
    3472:	9c 83       	std	Y+4, r25	; 0x04
    3474:	02 c0       	rjmp	.+4      	; 0x347a <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    3476:	29 81       	ldd	r18, Y+1	; 0x01
    3478:	2c 83       	std	Y+4, r18	; 0x04
    347a:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    347c:	26 96       	adiw	r28, 0x06	; 6
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	f8 94       	cli
    3482:	de bf       	out	0x3e, r29	; 62
    3484:	0f be       	out	0x3f, r0	; 63
    3486:	cd bf       	out	0x3d, r28	; 61
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	08 95       	ret

0000348e <ADC_enuInit>:


static void (*ADC_CallBackFunction)(void) = NULL;


void ADC_enuInit(){
    348e:	df 93       	push	r29
    3490:	cf 93       	push	r28
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
    3496:	2e 97       	sbiw	r28, 0x0e	; 14
    3498:	0f b6       	in	r0, 0x3f	; 63
    349a:	f8 94       	cli
    349c:	de bf       	out	0x3e, r29	; 62
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	cd bf       	out	0x3d, r28	; 61
	 * 5. Enabling ADC
	 * */


	/*************************** Selecting  voltage reference ***************************/
		ADMUX_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    34a2:	a7 e2       	ldi	r26, 0x27	; 39
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	e7 e2       	ldi	r30, 0x27	; 39
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	80 81       	ld	r24, Z
    34ac:	8f 71       	andi	r24, 0x1F	; 31
    34ae:	8c 93       	st	X, r24
		ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
    34b0:	a7 e2       	ldi	r26, 0x27	; 39
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	e7 e2       	ldi	r30, 0x27	; 39
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	80 81       	ld	r24, Z
    34ba:	80 64       	ori	r24, 0x40	; 64
    34bc:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************** Selecting ADC MODE ********************************/
		#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
			SET_BIT(ADCSRA_REG, ADCSRA_ADATE);
    34be:	a6 e2       	ldi	r26, 0x26	; 38
    34c0:	b0 e0       	ldi	r27, 0x00	; 0
    34c2:	e6 e2       	ldi	r30, 0x26	; 38
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	80 81       	ld	r24, Z
    34c8:	80 62       	ori	r24, 0x20	; 32
    34ca:	8c 93       	st	X, r24

			SFIOR_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    34cc:	a0 e5       	ldi	r26, 0x50	; 80
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	e0 e5       	ldi	r30, 0x50	; 80
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	8f 71       	andi	r24, 0x1F	; 31
    34d8:	8c 93       	st	X, r24
			SFIOR_REG |= ADC_AUTO_TRIG_SRCE_SELECTOR;
    34da:	a0 e5       	ldi	r26, 0x50	; 80
    34dc:	b0 e0       	ldi	r27, 0x00	; 0
    34de:	e0 e5       	ldi	r30, 0x50	; 80
    34e0:	f0 e0       	ldi	r31, 0x00	; 0
    34e2:	80 81       	ld	r24, Z
    34e4:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* Selecting Adjustment *******************************/
		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			CLR_BIT(ADMUX_REG, ADMUX_ADLAR);
    34e6:	a7 e2       	ldi	r26, 0x27	; 39
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	e7 e2       	ldi	r30, 0x27	; 39
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	8f 7d       	andi	r24, 0xDF	; 223
    34f2:	8c 93       	st	X, r24
	/***************************** Clearing  Interrupt Flag *****************************/
		//! Notice: that ADIF to be cleared we write logical one (from data sheet)
		//So in initialization of ADC we write 1 to ADIF bit to make sure that the
		//flag is cleared in order to make sure that ADC ready for upcoming conversation
		// clearing interrupt flag
		SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    34f4:	a6 e2       	ldi	r26, 0x26	; 38
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	e6 e2       	ldi	r30, 0x26	; 38
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	80 61       	ori	r24, 0x10	; 16
    3500:	8c 93       	st	X, r24
	/************************************************************************************/


	/*********************************** Enabling ADC ***********************************/
		SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    3502:	a6 e2       	ldi	r26, 0x26	; 38
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	e6 e2       	ldi	r30, 0x26	; 38
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	80 68       	ori	r24, 0x80	; 128
    350e:	8c 93       	st	X, r24
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	a8 e4       	ldi	r26, 0x48	; 72
    3516:	b3 e4       	ldi	r27, 0x43	; 67
    3518:	8b 87       	std	Y+11, r24	; 0x0b
    351a:	9c 87       	std	Y+12, r25	; 0x0c
    351c:	ad 87       	std	Y+13, r26	; 0x0d
    351e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3520:	6b 85       	ldd	r22, Y+11	; 0x0b
    3522:	7c 85       	ldd	r23, Y+12	; 0x0c
    3524:	8d 85       	ldd	r24, Y+13	; 0x0d
    3526:	9e 85       	ldd	r25, Y+14	; 0x0e
    3528:	20 e0       	ldi	r18, 0x00	; 0
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	4a e7       	ldi	r20, 0x7A	; 122
    352e:	55 e4       	ldi	r21, 0x45	; 69
    3530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3534:	dc 01       	movw	r26, r24
    3536:	cb 01       	movw	r24, r22
    3538:	8f 83       	std	Y+7, r24	; 0x07
    353a:	98 87       	std	Y+8, r25	; 0x08
    353c:	a9 87       	std	Y+9, r26	; 0x09
    353e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3540:	6f 81       	ldd	r22, Y+7	; 0x07
    3542:	78 85       	ldd	r23, Y+8	; 0x08
    3544:	89 85       	ldd	r24, Y+9	; 0x09
    3546:	9a 85       	ldd	r25, Y+10	; 0x0a
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e8       	ldi	r20, 0x80	; 128
    354e:	5f e3       	ldi	r21, 0x3F	; 63
    3550:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3554:	88 23       	and	r24, r24
    3556:	2c f4       	brge	.+10     	; 0x3562 <ADC_enuInit+0xd4>
		__ticks = 1;
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	9e 83       	std	Y+6, r25	; 0x06
    355e:	8d 83       	std	Y+5, r24	; 0x05
    3560:	3f c0       	rjmp	.+126    	; 0x35e0 <ADC_enuInit+0x152>
	else if (__tmp > 65535)
    3562:	6f 81       	ldd	r22, Y+7	; 0x07
    3564:	78 85       	ldd	r23, Y+8	; 0x08
    3566:	89 85       	ldd	r24, Y+9	; 0x09
    3568:	9a 85       	ldd	r25, Y+10	; 0x0a
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	3f ef       	ldi	r19, 0xFF	; 255
    356e:	4f e7       	ldi	r20, 0x7F	; 127
    3570:	57 e4       	ldi	r21, 0x47	; 71
    3572:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3576:	18 16       	cp	r1, r24
    3578:	4c f5       	brge	.+82     	; 0x35cc <ADC_enuInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357a:	6b 85       	ldd	r22, Y+11	; 0x0b
    357c:	7c 85       	ldd	r23, Y+12	; 0x0c
    357e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3580:	9e 85       	ldd	r25, Y+14	; 0x0e
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	40 e2       	ldi	r20, 0x20	; 32
    3588:	51 e4       	ldi	r21, 0x41	; 65
    358a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358e:	dc 01       	movw	r26, r24
    3590:	cb 01       	movw	r24, r22
    3592:	bc 01       	movw	r22, r24
    3594:	cd 01       	movw	r24, r26
    3596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	9e 83       	std	Y+6, r25	; 0x06
    35a0:	8d 83       	std	Y+5, r24	; 0x05
    35a2:	0f c0       	rjmp	.+30     	; 0x35c2 <ADC_enuInit+0x134>
    35a4:	80 e9       	ldi	r24, 0x90	; 144
    35a6:	91 e0       	ldi	r25, 0x01	; 1
    35a8:	9c 83       	std	Y+4, r25	; 0x04
    35aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35ac:	8b 81       	ldd	r24, Y+3	; 0x03
    35ae:	9c 81       	ldd	r25, Y+4	; 0x04
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	f1 f7       	brne	.-4      	; 0x35b0 <ADC_enuInit+0x122>
    35b4:	9c 83       	std	Y+4, r25	; 0x04
    35b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b8:	8d 81       	ldd	r24, Y+5	; 0x05
    35ba:	9e 81       	ldd	r25, Y+6	; 0x06
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	9e 83       	std	Y+6, r25	; 0x06
    35c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c2:	8d 81       	ldd	r24, Y+5	; 0x05
    35c4:	9e 81       	ldd	r25, Y+6	; 0x06
    35c6:	00 97       	sbiw	r24, 0x00	; 0
    35c8:	69 f7       	brne	.-38     	; 0x35a4 <ADC_enuInit+0x116>
    35ca:	14 c0       	rjmp	.+40     	; 0x35f4 <ADC_enuInit+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35cc:	6f 81       	ldd	r22, Y+7	; 0x07
    35ce:	78 85       	ldd	r23, Y+8	; 0x08
    35d0:	89 85       	ldd	r24, Y+9	; 0x09
    35d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	9e 83       	std	Y+6, r25	; 0x06
    35de:	8d 83       	std	Y+5, r24	; 0x05
    35e0:	8d 81       	ldd	r24, Y+5	; 0x05
    35e2:	9e 81       	ldd	r25, Y+6	; 0x06
    35e4:	9a 83       	std	Y+2, r25	; 0x02
    35e6:	89 83       	std	Y+1, r24	; 0x01
    35e8:	89 81       	ldd	r24, Y+1	; 0x01
    35ea:	9a 81       	ldd	r25, Y+2	; 0x02
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <ADC_enuInit+0x15e>
    35f0:	9a 83       	std	Y+2, r25	; 0x02
    35f2:	89 83       	std	Y+1, r24	; 0x01


	// Waiting until ADC is stablized
	_delay_ms(200);

}
    35f4:	2e 96       	adiw	r28, 0x0e	; 14
    35f6:	0f b6       	in	r0, 0x3f	; 63
    35f8:	f8 94       	cli
    35fa:	de bf       	out	0x3e, r29	; 62
    35fc:	0f be       	out	0x3f, r0	; 63
    35fe:	cd bf       	out	0x3d, r28	; 61
    3600:	cf 91       	pop	r28
    3602:	df 91       	pop	r29
    3604:	08 95       	ret

00003606 <ADC_enuStartConversion>:




ErrorStatus_t ADC_enuStartConversion(ADC_Channel_types ADC_channel_N){
    3606:	df 93       	push	r29
    3608:	cf 93       	push	r28
    360a:	00 d0       	rcall	.+0      	; 0x360c <ADC_enuStartConversion+0x6>
    360c:	cd b7       	in	r28, 0x3d	; 61
    360e:	de b7       	in	r29, 0x3e	; 62
    3610:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3612:	19 82       	std	Y+1, r1	; 0x01


	/******************************** Select ADC Channel ********************************/
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_clr_msk;
    3614:	a7 e2       	ldi	r26, 0x27	; 39
    3616:	b0 e0       	ldi	r27, 0x00	; 0
    3618:	e7 e2       	ldi	r30, 0x27	; 39
    361a:	f0 e0       	ldi	r31, 0x00	; 0
    361c:	80 81       	ld	r24, Z
    361e:	80 7e       	andi	r24, 0xE0	; 224
    3620:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_channel_N;
    3622:	a7 e2       	ldi	r26, 0x27	; 39
    3624:	b0 e0       	ldi	r27, 0x00	; 0
    3626:	e7 e2       	ldi	r30, 0x27	; 39
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	90 81       	ld	r25, Z
    362c:	8a 81       	ldd	r24, Y+2	; 0x02
    362e:	89 2b       	or	r24, r25
    3630:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* ADC Start Conversion *******************************/
	//!!!!!!!!!!!!!!
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    3632:	a6 e2       	ldi	r26, 0x26	; 38
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	e6 e2       	ldi	r30, 0x26	; 38
    3638:	f0 e0       	ldi	r31, 0x00	; 0
    363a:	80 81       	ld	r24, Z
    363c:	80 64       	ori	r24, 0x40	; 64
    363e:	8c 93       	st	X, r24
	/************************************************************************************/

	return Local_enuErrrorState;
    3640:	89 81       	ldd	r24, Y+1	; 0x01
}
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <ADC_GetResult>:



uint16 ADC_GetResult(){
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
			Copy_u16ReadValue |= ((uint16)ADCH_REG<<2);
			return Copy_u16ReadValue;
		#endif

		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			return ADCLH_REG;
    3654:	e4 e2       	ldi	r30, 0x24	; 36
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	80 81       	ld	r24, Z
    365a:	91 81       	ldd	r25, Z+1	; 0x01





}
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <ADC_enuSetCallBack>:




ErrorStatus_t ADC_enuSetCallBack(void(*Copy_pfunAppFun)(void)){
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	00 d0       	rcall	.+0      	; 0x3668 <ADC_enuSetCallBack+0x6>
    3668:	00 d0       	rcall	.+0      	; 0x366a <ADC_enuSetCallBack+0x8>
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
    366e:	9b 83       	std	Y+3, r25	; 0x03
    3670:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3672:	19 82       	std	Y+1, r1	; 0x01

//	if(Copy_pfunAppFun == NULL ||  Copy_u8IntNumber> IN)

	if(Copy_pfunAppFun == NULL){
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
    3676:	9b 81       	ldd	r25, Y+3	; 0x03
    3678:	00 97       	sbiw	r24, 0x00	; 0
    367a:	19 f4       	brne	.+6      	; 0x3682 <ADC_enuSetCallBack+0x20>

		return Local_enuErrrorState;
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	8c 83       	std	Y+4, r24	; 0x04
    3680:	0a c0       	rjmp	.+20     	; 0x3696 <ADC_enuSetCallBack+0x34>
	}

	else{
		Local_enuErrrorState = ERROR_STATUS_OK;
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	89 83       	std	Y+1, r24	; 0x01

		ADC_CallBackFunction = Copy_pfunAppFun;
    3686:	8a 81       	ldd	r24, Y+2	; 0x02
    3688:	9b 81       	ldd	r25, Y+3	; 0x03
    368a:	90 93 a3 01 	sts	0x01A3, r25
    368e:	80 93 a2 01 	sts	0x01A2, r24

	}



	return Local_enuErrrorState;
    3692:	89 81       	ldd	r24, Y+1	; 0x01
    3694:	8c 83       	std	Y+4, r24	; 0x04
    3696:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	0f 90       	pop	r0
    36a0:	cf 91       	pop	r28
    36a2:	df 91       	pop	r29
    36a4:	08 95       	ret

000036a6 <__vector_16>:

ISR(__vector_16){
    36a6:	1f 92       	push	r1
    36a8:	0f 92       	push	r0
    36aa:	0f b6       	in	r0, 0x3f	; 63
    36ac:	0f 92       	push	r0
    36ae:	11 24       	eor	r1, r1
    36b0:	2f 93       	push	r18
    36b2:	3f 93       	push	r19
    36b4:	4f 93       	push	r20
    36b6:	5f 93       	push	r21
    36b8:	6f 93       	push	r22
    36ba:	7f 93       	push	r23
    36bc:	8f 93       	push	r24
    36be:	9f 93       	push	r25
    36c0:	af 93       	push	r26
    36c2:	bf 93       	push	r27
    36c4:	ef 93       	push	r30
    36c6:	ff 93       	push	r31
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CallBackFunction != NULL){
    36d0:	80 91 a2 01 	lds	r24, 0x01A2
    36d4:	90 91 a3 01 	lds	r25, 0x01A3
    36d8:	00 97       	sbiw	r24, 0x00	; 0
    36da:	29 f0       	breq	.+10     	; 0x36e6 <__vector_16+0x40>
		ADC_CallBackFunction();
    36dc:	e0 91 a2 01 	lds	r30, 0x01A2
    36e0:	f0 91 a3 01 	lds	r31, 0x01A3
    36e4:	09 95       	icall
	}

}
    36e6:	cf 91       	pop	r28
    36e8:	df 91       	pop	r29
    36ea:	ff 91       	pop	r31
    36ec:	ef 91       	pop	r30
    36ee:	bf 91       	pop	r27
    36f0:	af 91       	pop	r26
    36f2:	9f 91       	pop	r25
    36f4:	8f 91       	pop	r24
    36f6:	7f 91       	pop	r23
    36f8:	6f 91       	pop	r22
    36fa:	5f 91       	pop	r21
    36fc:	4f 91       	pop	r20
    36fe:	3f 91       	pop	r19
    3700:	2f 91       	pop	r18
    3702:	0f 90       	pop	r0
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	0f 90       	pop	r0
    3708:	1f 90       	pop	r1
    370a:	18 95       	reti

0000370c <ultraSonic_enuInit>:
#include "ultraSonic_interface.h"
/*****************************************************************/



ErrorStatus_t ultraSonic_enuInit(ultraSonic_t ultraSonic_Instance){
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	cd b7       	in	r28, 0x3d	; 61
    3712:	de b7       	in	r29, 0x3e	; 62
    3714:	28 97       	sbiw	r28, 0x08	; 8
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	4a 83       	std	Y+2, r20	; 0x02
    3722:	5b 83       	std	Y+3, r21	; 0x03
    3724:	6c 83       	std	Y+4, r22	; 0x04
    3726:	7d 83       	std	Y+5, r23	; 0x05
    3728:	8e 83       	std	Y+6, r24	; 0x06
    372a:	9f 83       	std	Y+7, r25	; 0x07
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    372c:	19 82       	std	Y+1, r1	; 0x01



    if (ultraSonic_Instance.ECHO_PORT < DIO_u8PortA ||
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	84 30       	cpi	r24, 0x04	; 4
    3732:	18 f4       	brcc	.+6      	; 0x373a <ultraSonic_enuInit+0x2e>
    3734:	8b 81       	ldd	r24, Y+3	; 0x03
    3736:	88 30       	cpi	r24, 0x08	; 8
    3738:	18 f0       	brcs	.+6      	; 0x3740 <ultraSonic_enuInit+0x34>
    	ultraSonic_Instance.ECHO_PORT > DIO_u8PortD ||
        ultraSonic_Instance.ECHO_PIN < DIO_u8PIN0 || ultraSonic_Instance.ECHO_PIN > DIO_u8PIN7) {

    	return Local_enuErrrorState;  // Return failure if the ECHO_PORT or ECHO_PIN are invalid
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	88 87       	std	Y+8, r24	; 0x08
    373e:	14 c0       	rjmp	.+40     	; 0x3768 <ultraSonic_enuInit+0x5c>

    } else {

    	Timer1_SetupForTimeMeasurement(8);
    3740:	88 e0       	ldi	r24, 0x08	; 8
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	0e 94 06 0b 	call	0x160c	; 0x160c <Timer1_SetupForTimeMeasurement>
    	DIO_enuSetPinDirection(ultraSonic_Instance.ECHO_PORT, ultraSonic_Instance.ECHO_PIN, DIO_u8INPUT);
    3748:	8a 81       	ldd	r24, Y+2	; 0x02
    374a:	9b 81       	ldd	r25, Y+3	; 0x03
    374c:	69 2f       	mov	r22, r25
    374e:	40 e0       	ldi	r20, 0x00	; 0
    3750:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
    	DIO_enuSetPinDirection(ultraSonic_Instance.TRIG_PORT, ultraSonic_Instance.TRIG_PIN, DIO_u8OUTPUT);
    3754:	8c 81       	ldd	r24, Y+4	; 0x04
    3756:	9d 81       	ldd	r25, Y+5	; 0x05
    3758:	69 2f       	mov	r22, r25
    375a:	41 e0       	ldi	r20, 0x01	; 1
    375c:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
    }




	Local_enuErrrorState = ERROR_STATUS_OK;
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	88 87       	std	Y+8, r24	; 0x08
    3768:	88 85       	ldd	r24, Y+8	; 0x08
}
    376a:	28 96       	adiw	r28, 0x08	; 8
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	cf 91       	pop	r28
    3778:	df 91       	pop	r29
    377a:	08 95       	ret

0000377c <ultraSonic_u16GetDistance>:



void ultraSonic_u16GetDistance(ultraSonic_t* ultraSonic_Instance){
    377c:	df 93       	push	r29
    377e:	cf 93       	push	r28
    3780:	cd b7       	in	r28, 0x3d	; 61
    3782:	de b7       	in	r29, 0x3e	; 62
    3784:	6b 97       	sbiw	r28, 0x1b	; 27
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	f8 94       	cli
    378a:	de bf       	out	0x3e, r29	; 62
    378c:	0f be       	out	0x3f, r0	; 63
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	9b 8f       	std	Y+27, r25	; 0x1b
    3792:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8_t Local_u8EchoPinStatus = 0;
    3794:	19 8e       	std	Y+25, r1	; 0x19

	// Send a 10µs pulse to the trigger pin
	DIO_enuSetPinValue(ultraSonic_Instance->TRIG_PORT, ultraSonic_Instance->TRIG_PIN, DIO_u8HIGH);
    3796:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3798:	fb 8d       	ldd	r31, Y+27	; 0x1b
    379a:	82 81       	ldd	r24, Z+2	; 0x02
    379c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    379e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    37a0:	93 81       	ldd	r25, Z+3	; 0x03
    37a2:	69 2f       	mov	r22, r25
    37a4:	41 e0       	ldi	r20, 0x01	; 1
    37a6:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
    37aa:	80 e0       	ldi	r24, 0x00	; 0
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	a0 e2       	ldi	r26, 0x20	; 32
    37b0:	b1 e4       	ldi	r27, 0x41	; 65
    37b2:	8d 8b       	std	Y+21, r24	; 0x15
    37b4:	9e 8b       	std	Y+22, r25	; 0x16
    37b6:	af 8b       	std	Y+23, r26	; 0x17
    37b8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37ba:	6d 89       	ldd	r22, Y+21	; 0x15
    37bc:	7e 89       	ldd	r23, Y+22	; 0x16
    37be:	8f 89       	ldd	r24, Y+23	; 0x17
    37c0:	98 8d       	ldd	r25, Y+24	; 0x18
    37c2:	2b ea       	ldi	r18, 0xAB	; 171
    37c4:	3a ea       	ldi	r19, 0xAA	; 170
    37c6:	4a ea       	ldi	r20, 0xAA	; 170
    37c8:	50 e4       	ldi	r21, 0x40	; 64
    37ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	89 8b       	std	Y+17, r24	; 0x11
    37d4:	9a 8b       	std	Y+18, r25	; 0x12
    37d6:	ab 8b       	std	Y+19, r26	; 0x13
    37d8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    37da:	69 89       	ldd	r22, Y+17	; 0x11
    37dc:	7a 89       	ldd	r23, Y+18	; 0x12
    37de:	8b 89       	ldd	r24, Y+19	; 0x13
    37e0:	9c 89       	ldd	r25, Y+20	; 0x14
    37e2:	20 e0       	ldi	r18, 0x00	; 0
    37e4:	30 e0       	ldi	r19, 0x00	; 0
    37e6:	40 e8       	ldi	r20, 0x80	; 128
    37e8:	5f e3       	ldi	r21, 0x3F	; 63
    37ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37ee:	88 23       	and	r24, r24
    37f0:	1c f4       	brge	.+6      	; 0x37f8 <ultraSonic_u16GetDistance+0x7c>
		__ticks = 1;
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	88 8b       	std	Y+16, r24	; 0x10
    37f6:	91 c0       	rjmp	.+290    	; 0x391a <ultraSonic_u16GetDistance+0x19e>
	else if (__tmp > 255)
    37f8:	69 89       	ldd	r22, Y+17	; 0x11
    37fa:	7a 89       	ldd	r23, Y+18	; 0x12
    37fc:	8b 89       	ldd	r24, Y+19	; 0x13
    37fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	4f e7       	ldi	r20, 0x7F	; 127
    3806:	53 e4       	ldi	r21, 0x43	; 67
    3808:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    380c:	18 16       	cp	r1, r24
    380e:	0c f0       	brlt	.+2      	; 0x3812 <ultraSonic_u16GetDistance+0x96>
    3810:	7b c0       	rjmp	.+246    	; 0x3908 <ultraSonic_u16GetDistance+0x18c>
	{
		_delay_ms(__us / 1000.0);
    3812:	6d 89       	ldd	r22, Y+21	; 0x15
    3814:	7e 89       	ldd	r23, Y+22	; 0x16
    3816:	8f 89       	ldd	r24, Y+23	; 0x17
    3818:	98 8d       	ldd	r25, Y+24	; 0x18
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	4a e7       	ldi	r20, 0x7A	; 122
    3820:	54 e4       	ldi	r21, 0x44	; 68
    3822:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	8c 87       	std	Y+12, r24	; 0x0c
    382c:	9d 87       	std	Y+13, r25	; 0x0d
    382e:	ae 87       	std	Y+14, r26	; 0x0e
    3830:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3832:	6c 85       	ldd	r22, Y+12	; 0x0c
    3834:	7d 85       	ldd	r23, Y+13	; 0x0d
    3836:	8e 85       	ldd	r24, Y+14	; 0x0e
    3838:	9f 85       	ldd	r25, Y+15	; 0x0f
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	4a e7       	ldi	r20, 0x7A	; 122
    3840:	55 e4       	ldi	r21, 0x45	; 69
    3842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3846:	dc 01       	movw	r26, r24
    3848:	cb 01       	movw	r24, r22
    384a:	88 87       	std	Y+8, r24	; 0x08
    384c:	99 87       	std	Y+9, r25	; 0x09
    384e:	aa 87       	std	Y+10, r26	; 0x0a
    3850:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3852:	68 85       	ldd	r22, Y+8	; 0x08
    3854:	79 85       	ldd	r23, Y+9	; 0x09
    3856:	8a 85       	ldd	r24, Y+10	; 0x0a
    3858:	9b 85       	ldd	r25, Y+11	; 0x0b
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	40 e8       	ldi	r20, 0x80	; 128
    3860:	5f e3       	ldi	r21, 0x3F	; 63
    3862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3866:	88 23       	and	r24, r24
    3868:	2c f4       	brge	.+10     	; 0x3874 <ultraSonic_u16GetDistance+0xf8>
		__ticks = 1;
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	9f 83       	std	Y+7, r25	; 0x07
    3870:	8e 83       	std	Y+6, r24	; 0x06
    3872:	3f c0       	rjmp	.+126    	; 0x38f2 <ultraSonic_u16GetDistance+0x176>
	else if (__tmp > 65535)
    3874:	68 85       	ldd	r22, Y+8	; 0x08
    3876:	79 85       	ldd	r23, Y+9	; 0x09
    3878:	8a 85       	ldd	r24, Y+10	; 0x0a
    387a:	9b 85       	ldd	r25, Y+11	; 0x0b
    387c:	20 e0       	ldi	r18, 0x00	; 0
    387e:	3f ef       	ldi	r19, 0xFF	; 255
    3880:	4f e7       	ldi	r20, 0x7F	; 127
    3882:	57 e4       	ldi	r21, 0x47	; 71
    3884:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3888:	18 16       	cp	r1, r24
    388a:	4c f5       	brge	.+82     	; 0x38de <ultraSonic_u16GetDistance+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    388c:	6c 85       	ldd	r22, Y+12	; 0x0c
    388e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3890:	8e 85       	ldd	r24, Y+14	; 0x0e
    3892:	9f 85       	ldd	r25, Y+15	; 0x0f
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e2       	ldi	r20, 0x20	; 32
    389a:	51 e4       	ldi	r21, 0x41	; 65
    389c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	bc 01       	movw	r22, r24
    38a6:	cd 01       	movw	r24, r26
    38a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	9f 83       	std	Y+7, r25	; 0x07
    38b2:	8e 83       	std	Y+6, r24	; 0x06
    38b4:	0f c0       	rjmp	.+30     	; 0x38d4 <ultraSonic_u16GetDistance+0x158>
    38b6:	80 e9       	ldi	r24, 0x90	; 144
    38b8:	91 e0       	ldi	r25, 0x01	; 1
    38ba:	9d 83       	std	Y+5, r25	; 0x05
    38bc:	8c 83       	std	Y+4, r24	; 0x04
    38be:	8c 81       	ldd	r24, Y+4	; 0x04
    38c0:	9d 81       	ldd	r25, Y+5	; 0x05
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	f1 f7       	brne	.-4      	; 0x38c2 <ultraSonic_u16GetDistance+0x146>
    38c6:	9d 83       	std	Y+5, r25	; 0x05
    38c8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ca:	8e 81       	ldd	r24, Y+6	; 0x06
    38cc:	9f 81       	ldd	r25, Y+7	; 0x07
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	9f 83       	std	Y+7, r25	; 0x07
    38d2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38d4:	8e 81       	ldd	r24, Y+6	; 0x06
    38d6:	9f 81       	ldd	r25, Y+7	; 0x07
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	69 f7       	brne	.-38     	; 0x38b6 <ultraSonic_u16GetDistance+0x13a>
    38dc:	24 c0       	rjmp	.+72     	; 0x3926 <ultraSonic_u16GetDistance+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38de:	68 85       	ldd	r22, Y+8	; 0x08
    38e0:	79 85       	ldd	r23, Y+9	; 0x09
    38e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    38e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	9f 83       	std	Y+7, r25	; 0x07
    38f0:	8e 83       	std	Y+6, r24	; 0x06
    38f2:	8e 81       	ldd	r24, Y+6	; 0x06
    38f4:	9f 81       	ldd	r25, Y+7	; 0x07
    38f6:	9b 83       	std	Y+3, r25	; 0x03
    38f8:	8a 83       	std	Y+2, r24	; 0x02
    38fa:	8a 81       	ldd	r24, Y+2	; 0x02
    38fc:	9b 81       	ldd	r25, Y+3	; 0x03
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	f1 f7       	brne	.-4      	; 0x38fe <ultraSonic_u16GetDistance+0x182>
    3902:	9b 83       	std	Y+3, r25	; 0x03
    3904:	8a 83       	std	Y+2, r24	; 0x02
    3906:	0f c0       	rjmp	.+30     	; 0x3926 <ultraSonic_u16GetDistance+0x1aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3908:	69 89       	ldd	r22, Y+17	; 0x11
    390a:	7a 89       	ldd	r23, Y+18	; 0x12
    390c:	8b 89       	ldd	r24, Y+19	; 0x13
    390e:	9c 89       	ldd	r25, Y+20	; 0x14
    3910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	88 8b       	std	Y+16, r24	; 0x10
    391a:	88 89       	ldd	r24, Y+16	; 0x10
    391c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    391e:	89 81       	ldd	r24, Y+1	; 0x01
    3920:	8a 95       	dec	r24
    3922:	f1 f7       	brne	.-4      	; 0x3920 <ultraSonic_u16GetDistance+0x1a4>
    3924:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(10);

	DIO_enuSetPinValue(ultraSonic_Instance->TRIG_PORT, ultraSonic_Instance->TRIG_PIN, DIO_u8LOW);
    3926:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3928:	fb 8d       	ldd	r31, Y+27	; 0x1b
    392a:	82 81       	ldd	r24, Z+2	; 0x02
    392c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    392e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3930:	93 81       	ldd	r25, Z+3	; 0x03
    3932:	69 2f       	mov	r22, r25
    3934:	40 e0       	ldi	r20, 0x00	; 0
    3936:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>


	// Wait for echo pin to go high, indicating the start of distance measurement

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    393a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    393c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    393e:	80 81       	ld	r24, Z
    3940:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3942:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3944:	91 81       	ldd	r25, Z+1	; 0x01
    3946:	9e 01       	movw	r18, r28
    3948:	27 5e       	subi	r18, 0xE7	; 231
    394a:	3f 4f       	sbci	r19, 0xFF	; 255
    394c:	69 2f       	mov	r22, r25
    394e:	a9 01       	movw	r20, r18
    3950:	0e 94 33 18 	call	0x3066	; 0x3066 <DIO_enuGetPinValue>
    3954:	0d c0       	rjmp	.+26     	; 0x3970 <ultraSonic_u16GetDistance+0x1f4>
	while(!Local_u8EchoPinStatus){
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    3956:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3958:	fb 8d       	ldd	r31, Y+27	; 0x1b
    395a:	80 81       	ld	r24, Z
    395c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    395e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3960:	91 81       	ldd	r25, Z+1	; 0x01
    3962:	9e 01       	movw	r18, r28
    3964:	27 5e       	subi	r18, 0xE7	; 231
    3966:	3f 4f       	sbci	r19, 0xFF	; 255
    3968:	69 2f       	mov	r22, r25
    396a:	a9 01       	movw	r20, r18
    396c:	0e 94 33 18 	call	0x3066	; 0x3066 <DIO_enuGetPinValue>


	// Wait for echo pin to go high, indicating the start of distance measurement

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	while(!Local_u8EchoPinStatus){
    3970:	89 8d       	ldd	r24, Y+25	; 0x19
    3972:	88 23       	and	r24, r24
    3974:	81 f3       	breq	.-32     	; 0x3956 <ultraSonic_u16GetDistance+0x1da>
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	}

	RESET_TIMER1();
    3976:	ec e4       	ldi	r30, 0x4C	; 76
    3978:	f0 e0       	ldi	r31, 0x00	; 0
    397a:	11 82       	std	Z+1, r1	; 0x01
    397c:	10 82       	st	Z, r1

	// Wait for echo pin to go low (reflected pulse received)

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    397e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3980:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3982:	80 81       	ld	r24, Z
    3984:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3986:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3988:	91 81       	ldd	r25, Z+1	; 0x01
    398a:	9e 01       	movw	r18, r28
    398c:	27 5e       	subi	r18, 0xE7	; 231
    398e:	3f 4f       	sbci	r19, 0xFF	; 255
    3990:	69 2f       	mov	r22, r25
    3992:	a9 01       	movw	r20, r18
    3994:	0e 94 33 18 	call	0x3066	; 0x3066 <DIO_enuGetPinValue>
    3998:	0d c0       	rjmp	.+26     	; 0x39b4 <ultraSonic_u16GetDistance+0x238>
	while(Local_u8EchoPinStatus){
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    399a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    399c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    399e:	80 81       	ld	r24, Z
    39a0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    39a2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    39a4:	91 81       	ldd	r25, Z+1	; 0x01
    39a6:	9e 01       	movw	r18, r28
    39a8:	27 5e       	subi	r18, 0xE7	; 231
    39aa:	3f 4f       	sbci	r19, 0xFF	; 255
    39ac:	69 2f       	mov	r22, r25
    39ae:	a9 01       	movw	r20, r18
    39b0:	0e 94 33 18 	call	0x3066	; 0x3066 <DIO_enuGetPinValue>
	RESET_TIMER1();

	// Wait for echo pin to go low (reflected pulse received)

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	while(Local_u8EchoPinStatus){
    39b4:	89 8d       	ldd	r24, Y+25	; 0x19
    39b6:	88 23       	and	r24, r24
    39b8:	81 f7       	brne	.-32     	; 0x399a <ultraSonic_u16GetDistance+0x21e>
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	}

	ultraSonic_Instance->measuredDistance_InCm = TIMER1_u16ReadCount() / 58;
    39ba:	0e 94 ae 0b 	call	0x175c	; 0x175c <TIMER1_u16ReadCount>
    39be:	2a e3       	ldi	r18, 0x3A	; 58
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	b9 01       	movw	r22, r18
    39c4:	0e 94 a2 26 	call	0x4d44	; 0x4d44 <__udivmodhi4>
    39c8:	cb 01       	movw	r24, r22
    39ca:	ea 8d       	ldd	r30, Y+26	; 0x1a
    39cc:	fb 8d       	ldd	r31, Y+27	; 0x1b
    39ce:	95 83       	std	Z+5, r25	; 0x05
    39d0:	84 83       	std	Z+4, r24	; 0x04
}
    39d2:	6b 96       	adiw	r28, 0x1b	; 27
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	cf 91       	pop	r28
    39e0:	df 91       	pop	r29
    39e2:	08 95       	ret

000039e4 <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    39e4:	df 93       	push	r29
    39e6:	cf 93       	push	r28
    39e8:	0f 92       	push	r0
    39ea:	cd b7       	in	r28, 0x3d	; 61
    39ec:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    39ee:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	64 e0       	ldi	r22, 0x04	; 4
    39f4:	41 e0       	ldi	r20, 0x01	; 1
    39f6:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	65 e0       	ldi	r22, 0x05	; 5
    39fe:	41 e0       	ldi	r20, 0x01	; 1
    3a00:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	66 e0       	ldi	r22, 0x06	; 6
    3a08:	41 e0       	ldi	r20, 0x01	; 1
    3a0a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	67 e0       	ldi	r22, 0x07	; 7
    3a12:	41 e0       	ldi	r20, 0x01	; 1
    3a14:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	64 e0       	ldi	r22, 0x04	; 4
    3a1c:	41 e0       	ldi	r20, 0x01	; 1
    3a1e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    3a22:	81 e0       	ldi	r24, 0x01	; 1
    3a24:	65 e0       	ldi	r22, 0x05	; 5
    3a26:	41 e0       	ldi	r20, 0x01	; 1
    3a28:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	66 e0       	ldi	r22, 0x06	; 6
    3a30:	41 e0       	ldi	r20, 0x01	; 1
    3a32:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    3a36:	81 e0       	ldi	r24, 0x01	; 1
    3a38:	67 e0       	ldi	r22, 0x07	; 7
    3a3a:	41 e0       	ldi	r20, 0x01	; 1
    3a3c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    3a40:	83 e0       	ldi	r24, 0x03	; 3
    3a42:	60 e0       	ldi	r22, 0x00	; 0
    3a44:	40 e0       	ldi	r20, 0x00	; 0
    3a46:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    3a4a:	83 e0       	ldi	r24, 0x03	; 3
    3a4c:	61 e0       	ldi	r22, 0x01	; 1
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    3a54:	83 e0       	ldi	r24, 0x03	; 3
    3a56:	64 e0       	ldi	r22, 0x04	; 4
    3a58:	40 e0       	ldi	r20, 0x00	; 0
    3a5a:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    3a5e:	83 e0       	ldi	r24, 0x03	; 3
    3a60:	65 e0       	ldi	r22, 0x05	; 5
    3a62:	40 e0       	ldi	r20, 0x00	; 0
    3a64:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    3a68:	83 e0       	ldi	r24, 0x03	; 3
    3a6a:	60 e0       	ldi	r22, 0x00	; 0
    3a6c:	41 e0       	ldi	r20, 0x01	; 1
    3a6e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    3a72:	83 e0       	ldi	r24, 0x03	; 3
    3a74:	61 e0       	ldi	r22, 0x01	; 1
    3a76:	41 e0       	ldi	r20, 0x01	; 1
    3a78:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    3a7c:	83 e0       	ldi	r24, 0x03	; 3
    3a7e:	64 e0       	ldi	r22, 0x04	; 4
    3a80:	41 e0       	ldi	r20, 0x01	; 1
    3a82:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    3a86:	83 e0       	ldi	r24, 0x03	; 3
    3a88:	65 e0       	ldi	r22, 0x05	; 5
    3a8a:	41 e0       	ldi	r20, 0x01	; 1
    3a8c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a96:	0f 90       	pop	r0
    3a98:	cf 91       	pop	r28
    3a9a:	df 91       	pop	r29
    3a9c:	08 95       	ret

00003a9e <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    3a9e:	df 93       	push	r29
    3aa0:	cf 93       	push	r28
    3aa2:	cd b7       	in	r28, 0x3d	; 61
    3aa4:	de b7       	in	r29, 0x3e	; 62
    3aa6:	2a 97       	sbiw	r28, 0x0a	; 10
    3aa8:	0f b6       	in	r0, 0x3f	; 63
    3aaa:	f8 94       	cli
    3aac:	de bf       	out	0x3e, r29	; 62
    3aae:	0f be       	out	0x3f, r0	; 63
    3ab0:	cd bf       	out	0x3d, r28	; 61
    3ab2:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    3ab4:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	8a 83       	std	Y+2, r24	; 0x02
    3aba:	81 e0       	ldi	r24, 0x01	; 1
    3abc:	8b 83       	std	Y+3, r24	; 0x03
    3abe:	81 e0       	ldi	r24, 0x01	; 1
    3ac0:	8c 83       	std	Y+4, r24	; 0x04
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    3ac6:	84 e0       	ldi	r24, 0x04	; 4
    3ac8:	8e 83       	std	Y+6, r24	; 0x06
    3aca:	85 e0       	ldi	r24, 0x05	; 5
    3acc:	8f 83       	std	Y+7, r24	; 0x07
    3ace:	86 e0       	ldi	r24, 0x06	; 6
    3ad0:	88 87       	std	Y+8, r24	; 0x08
    3ad2:	87 e0       	ldi	r24, 0x07	; 7
    3ad4:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3ad6:	19 82       	std	Y+1, r1	; 0x01
    3ad8:	36 c0       	rjmp	.+108    	; 0x3b46 <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    3ada:	99 81       	ldd	r25, Y+1	; 0x01
    3adc:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ade:	98 17       	cp	r25, r24
    3ae0:	c1 f4       	brne	.+48     	; 0x3b12 <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    3ae2:	89 81       	ldd	r24, Y+1	; 0x01
    3ae4:	28 2f       	mov	r18, r24
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	ce 01       	movw	r24, r28
    3aea:	02 96       	adiw	r24, 0x02	; 2
    3aec:	fc 01       	movw	r30, r24
    3aee:	e2 0f       	add	r30, r18
    3af0:	f3 1f       	adc	r31, r19
    3af2:	40 81       	ld	r20, Z
    3af4:	89 81       	ldd	r24, Y+1	; 0x01
    3af6:	28 2f       	mov	r18, r24
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	ce 01       	movw	r24, r28
    3afc:	06 96       	adiw	r24, 0x06	; 6
    3afe:	fc 01       	movw	r30, r24
    3b00:	e2 0f       	add	r30, r18
    3b02:	f3 1f       	adc	r31, r19
    3b04:	90 81       	ld	r25, Z
    3b06:	84 2f       	mov	r24, r20
    3b08:	69 2f       	mov	r22, r25
    3b0a:	40 e0       	ldi	r20, 0x00	; 0
    3b0c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
    3b10:	17 c0       	rjmp	.+46     	; 0x3b40 <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	28 2f       	mov	r18, r24
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	ce 01       	movw	r24, r28
    3b1a:	02 96       	adiw	r24, 0x02	; 2
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	e2 0f       	add	r30, r18
    3b20:	f3 1f       	adc	r31, r19
    3b22:	40 81       	ld	r20, Z
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	28 2f       	mov	r18, r24
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	ce 01       	movw	r24, r28
    3b2c:	06 96       	adiw	r24, 0x06	; 6
    3b2e:	fc 01       	movw	r30, r24
    3b30:	e2 0f       	add	r30, r18
    3b32:	f3 1f       	adc	r31, r19
    3b34:	90 81       	ld	r25, Z
    3b36:	84 2f       	mov	r24, r20
    3b38:	69 2f       	mov	r22, r25
    3b3a:	41 e0       	ldi	r20, 0x01	; 1
    3b3c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	8f 5f       	subi	r24, 0xFF	; 255
    3b44:	89 83       	std	Y+1, r24	; 0x01
    3b46:	89 81       	ldd	r24, Y+1	; 0x01
    3b48:	84 30       	cpi	r24, 0x04	; 4
    3b4a:	38 f2       	brcs	.-114    	; 0x3ada <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    3b4c:	2a 96       	adiw	r28, 0x0a	; 10
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	f8 94       	cli
    3b52:	de bf       	out	0x3e, r29	; 62
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	cf 91       	pop	r28
    3b5a:	df 91       	pop	r29
    3b5c:	08 95       	ret

00003b5e <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    3b5e:	df 93       	push	r29
    3b60:	cf 93       	push	r28
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
    3b66:	2f 97       	sbiw	r28, 0x0f	; 15
    3b68:	0f b6       	in	r0, 0x3f	; 63
    3b6a:	f8 94       	cli
    3b6c:	de bf       	out	0x3e, r29	; 62
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	cd bf       	out	0x3d, r28	; 61
    3b72:	9e 87       	std	Y+14, r25	; 0x0e
    3b74:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3b76:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    3b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b7c:	00 97       	sbiw	r24, 0x00	; 0
    3b7e:	19 f4       	brne	.+6      	; 0x3b86 <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    3b80:	8b 81       	ldd	r24, Y+3	; 0x03
    3b82:	8f 87       	std	Y+15, r24	; 0x0f
    3b84:	7e c0       	rjmp	.+252    	; 0x3c82 <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    3b8a:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    3b8c:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    3b8e:	83 e0       	ldi	r24, 0x03	; 3
    3b90:	8d 83       	std	Y+5, r24	; 0x05
    3b92:	83 e0       	ldi	r24, 0x03	; 3
    3b94:	8e 83       	std	Y+6, r24	; 0x06
    3b96:	83 e0       	ldi	r24, 0x03	; 3
    3b98:	8f 83       	std	Y+7, r24	; 0x07
    3b9a:	83 e0       	ldi	r24, 0x03	; 3
    3b9c:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    3b9e:	19 86       	std	Y+9, r1	; 0x09
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	8a 87       	std	Y+10, r24	; 0x0a
    3ba4:	84 e0       	ldi	r24, 0x04	; 4
    3ba6:	8b 87       	std	Y+11, r24	; 0x0b
    3ba8:	85 e0       	ldi	r24, 0x05	; 5
    3baa:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3bac:	1a 82       	std	Y+2, r1	; 0x02
    3bae:	63 c0       	rjmp	.+198    	; 0x3c76 <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    3bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb2:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    3bb6:	19 82       	std	Y+1, r1	; 0x01
    3bb8:	57 c0       	rjmp	.+174    	; 0x3c68 <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    3bba:	89 81       	ldd	r24, Y+1	; 0x01
    3bbc:	28 2f       	mov	r18, r24
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	ce 01       	movw	r24, r28
    3bc2:	05 96       	adiw	r24, 0x05	; 5
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	e2 0f       	add	r30, r18
    3bc8:	f3 1f       	adc	r31, r19
    3bca:	40 81       	ld	r20, Z
    3bcc:	89 81       	ldd	r24, Y+1	; 0x01
    3bce:	28 2f       	mov	r18, r24
    3bd0:	30 e0       	ldi	r19, 0x00	; 0
    3bd2:	ce 01       	movw	r24, r28
    3bd4:	09 96       	adiw	r24, 0x09	; 9
    3bd6:	fc 01       	movw	r30, r24
    3bd8:	e2 0f       	add	r30, r18
    3bda:	f3 1f       	adc	r31, r19
    3bdc:	90 81       	ld	r25, Z
    3bde:	9e 01       	movw	r18, r28
    3be0:	2c 5f       	subi	r18, 0xFC	; 252
    3be2:	3f 4f       	sbci	r19, 0xFF	; 255
    3be4:	84 2f       	mov	r24, r20
    3be6:	69 2f       	mov	r22, r25
    3be8:	a9 01       	movw	r20, r18
    3bea:	0e 94 33 18 	call	0x3066	; 0x3066 <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    3bee:	8c 81       	ldd	r24, Y+4	; 0x04
    3bf0:	88 23       	and	r24, r24
    3bf2:	b9 f5       	brne	.+110    	; 0x3c62 <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	88 2f       	mov	r24, r24
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	9c 01       	movw	r18, r24
    3bfc:	22 0f       	add	r18, r18
    3bfe:	33 1f       	adc	r19, r19
    3c00:	22 0f       	add	r18, r18
    3c02:	33 1f       	adc	r19, r19
    3c04:	89 81       	ldd	r24, Y+1	; 0x01
    3c06:	88 2f       	mov	r24, r24
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	82 0f       	add	r24, r18
    3c0c:	93 1f       	adc	r25, r19
    3c0e:	fc 01       	movw	r30, r24
    3c10:	e2 59       	subi	r30, 0x92	; 146
    3c12:	fe 4f       	sbci	r31, 0xFE	; 254
    3c14:	80 81       	ld	r24, Z
    3c16:	ed 85       	ldd	r30, Y+13	; 0x0d
    3c18:	fe 85       	ldd	r31, Y+14	; 0x0e
    3c1a:	80 83       	st	Z, r24
    3c1c:	1a c0       	rjmp	.+52     	; 0x3c52 <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    3c1e:	89 81       	ldd	r24, Y+1	; 0x01
    3c20:	28 2f       	mov	r18, r24
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	ce 01       	movw	r24, r28
    3c26:	05 96       	adiw	r24, 0x05	; 5
    3c28:	fc 01       	movw	r30, r24
    3c2a:	e2 0f       	add	r30, r18
    3c2c:	f3 1f       	adc	r31, r19
    3c2e:	40 81       	ld	r20, Z
    3c30:	89 81       	ldd	r24, Y+1	; 0x01
    3c32:	28 2f       	mov	r18, r24
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	ce 01       	movw	r24, r28
    3c38:	09 96       	adiw	r24, 0x09	; 9
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	e2 0f       	add	r30, r18
    3c3e:	f3 1f       	adc	r31, r19
    3c40:	90 81       	ld	r25, Z
    3c42:	9e 01       	movw	r18, r28
    3c44:	2c 5f       	subi	r18, 0xFC	; 252
    3c46:	3f 4f       	sbci	r19, 0xFF	; 255
    3c48:	84 2f       	mov	r24, r20
    3c4a:	69 2f       	mov	r22, r25
    3c4c:	a9 01       	movw	r20, r18
    3c4e:	0e 94 33 18 	call	0x3066	; 0x3066 <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    3c52:	8c 81       	ldd	r24, Y+4	; 0x04
    3c54:	88 23       	and	r24, r24
    3c56:	19 f3       	breq	.-58     	; 0x3c1e <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    3c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5e:	8f 87       	std	Y+15, r24	; 0x0f
    3c60:	10 c0       	rjmp	.+32     	; 0x3c82 <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	8f 5f       	subi	r24, 0xFF	; 255
    3c66:	89 83       	std	Y+1, r24	; 0x01
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	84 30       	cpi	r24, 0x04	; 4
    3c6c:	08 f4       	brcc	.+2      	; 0x3c70 <keypad_enuGetPressedKey+0x112>
    3c6e:	a5 cf       	rjmp	.-182    	; 0x3bba <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	8f 5f       	subi	r24, 0xFF	; 255
    3c74:	8a 83       	std	Y+2, r24	; 0x02
    3c76:	8a 81       	ldd	r24, Y+2	; 0x02
    3c78:	84 30       	cpi	r24, 0x04	; 4
    3c7a:	08 f4       	brcc	.+2      	; 0x3c7e <keypad_enuGetPressedKey+0x120>
    3c7c:	99 cf       	rjmp	.-206    	; 0x3bb0 <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    3c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c80:	8f 87       	std	Y+15, r24	; 0x0f
    3c82:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3c84:	2f 96       	adiw	r28, 0x0f	; 15
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	f8 94       	cli
    3c8a:	de bf       	out	0x3e, r29	; 62
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	cd bf       	out	0x3d, r28	; 61
    3c90:	cf 91       	pop	r28
    3c92:	df 91       	pop	r29
    3c94:	08 95       	ret

00003c96 <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    3c96:	df 93       	push	r29
    3c98:	cf 93       	push	r28
    3c9a:	cd b7       	in	r28, 0x3d	; 61
    3c9c:	de b7       	in	r29, 0x3e	; 62
    3c9e:	e9 97       	sbiw	r28, 0x39	; 57
    3ca0:	0f b6       	in	r0, 0x3f	; 63
    3ca2:	f8 94       	cli
    3ca4:	de bf       	out	0x3e, r29	; 62
    3ca6:	0f be       	out	0x3f, r0	; 63
    3ca8:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3caa:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	61 e0       	ldi	r22, 0x01	; 1
    3cb0:	41 e0       	ldi	r20, 0x01	; 1
    3cb2:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	62 e0       	ldi	r22, 0x02	; 2
    3cba:	41 e0       	ldi	r20, 0x01	; 1
    3cbc:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	63 e0       	ldi	r22, 0x03	; 3
    3cc4:	41 e0       	ldi	r20, 0x01	; 1
    3cc6:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    3cca:	80 e0       	ldi	r24, 0x00	; 0
    3ccc:	67 e0       	ldi	r22, 0x07	; 7
    3cce:	41 e0       	ldi	r20, 0x01	; 1
    3cd0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	66 e0       	ldi	r22, 0x06	; 6
    3cd8:	41 e0       	ldi	r20, 0x01	; 1
    3cda:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	65 e0       	ldi	r22, 0x05	; 5
    3ce2:	41 e0       	ldi	r20, 0x01	; 1
    3ce4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	64 e0       	ldi	r22, 0x04	; 4
    3cec:	41 e0       	ldi	r20, 0x01	; 1
    3cee:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	90 e0       	ldi	r25, 0x00	; 0
    3cf6:	ac e0       	ldi	r26, 0x0C	; 12
    3cf8:	b2 e4       	ldi	r27, 0x42	; 66
    3cfa:	8d ab       	std	Y+53, r24	; 0x35
    3cfc:	9e ab       	std	Y+54, r25	; 0x36
    3cfe:	af ab       	std	Y+55, r26	; 0x37
    3d00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d02:	6d a9       	ldd	r22, Y+53	; 0x35
    3d04:	7e a9       	ldd	r23, Y+54	; 0x36
    3d06:	8f a9       	ldd	r24, Y+55	; 0x37
    3d08:	98 ad       	ldd	r25, Y+56	; 0x38
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	4a e7       	ldi	r20, 0x7A	; 122
    3d10:	55 e4       	ldi	r21, 0x45	; 69
    3d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d16:	dc 01       	movw	r26, r24
    3d18:	cb 01       	movw	r24, r22
    3d1a:	89 ab       	std	Y+49, r24	; 0x31
    3d1c:	9a ab       	std	Y+50, r25	; 0x32
    3d1e:	ab ab       	std	Y+51, r26	; 0x33
    3d20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d22:	69 a9       	ldd	r22, Y+49	; 0x31
    3d24:	7a a9       	ldd	r23, Y+50	; 0x32
    3d26:	8b a9       	ldd	r24, Y+51	; 0x33
    3d28:	9c a9       	ldd	r25, Y+52	; 0x34
    3d2a:	20 e0       	ldi	r18, 0x00	; 0
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	40 e8       	ldi	r20, 0x80	; 128
    3d30:	5f e3       	ldi	r21, 0x3F	; 63
    3d32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d36:	88 23       	and	r24, r24
    3d38:	2c f4       	brge	.+10     	; 0x3d44 <LCD_enuInit+0xae>
		__ticks = 1;
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	98 ab       	std	Y+48, r25	; 0x30
    3d40:	8f a7       	std	Y+47, r24	; 0x2f
    3d42:	3f c0       	rjmp	.+126    	; 0x3dc2 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    3d44:	69 a9       	ldd	r22, Y+49	; 0x31
    3d46:	7a a9       	ldd	r23, Y+50	; 0x32
    3d48:	8b a9       	ldd	r24, Y+51	; 0x33
    3d4a:	9c a9       	ldd	r25, Y+52	; 0x34
    3d4c:	20 e0       	ldi	r18, 0x00	; 0
    3d4e:	3f ef       	ldi	r19, 0xFF	; 255
    3d50:	4f e7       	ldi	r20, 0x7F	; 127
    3d52:	57 e4       	ldi	r21, 0x47	; 71
    3d54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d58:	18 16       	cp	r1, r24
    3d5a:	4c f5       	brge	.+82     	; 0x3dae <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d5c:	6d a9       	ldd	r22, Y+53	; 0x35
    3d5e:	7e a9       	ldd	r23, Y+54	; 0x36
    3d60:	8f a9       	ldd	r24, Y+55	; 0x37
    3d62:	98 ad       	ldd	r25, Y+56	; 0x38
    3d64:	20 e0       	ldi	r18, 0x00	; 0
    3d66:	30 e0       	ldi	r19, 0x00	; 0
    3d68:	40 e2       	ldi	r20, 0x20	; 32
    3d6a:	51 e4       	ldi	r21, 0x41	; 65
    3d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	bc 01       	movw	r22, r24
    3d76:	cd 01       	movw	r24, r26
    3d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d7c:	dc 01       	movw	r26, r24
    3d7e:	cb 01       	movw	r24, r22
    3d80:	98 ab       	std	Y+48, r25	; 0x30
    3d82:	8f a7       	std	Y+47, r24	; 0x2f
    3d84:	0f c0       	rjmp	.+30     	; 0x3da4 <LCD_enuInit+0x10e>
    3d86:	80 e9       	ldi	r24, 0x90	; 144
    3d88:	91 e0       	ldi	r25, 0x01	; 1
    3d8a:	9e a7       	std	Y+46, r25	; 0x2e
    3d8c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d90:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	f1 f7       	brne	.-4      	; 0x3d92 <LCD_enuInit+0xfc>
    3d96:	9e a7       	std	Y+46, r25	; 0x2e
    3d98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d9c:	98 a9       	ldd	r25, Y+48	; 0x30
    3d9e:	01 97       	sbiw	r24, 0x01	; 1
    3da0:	98 ab       	std	Y+48, r25	; 0x30
    3da2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3da6:	98 a9       	ldd	r25, Y+48	; 0x30
    3da8:	00 97       	sbiw	r24, 0x00	; 0
    3daa:	69 f7       	brne	.-38     	; 0x3d86 <LCD_enuInit+0xf0>
    3dac:	14 c0       	rjmp	.+40     	; 0x3dd6 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dae:	69 a9       	ldd	r22, Y+49	; 0x31
    3db0:	7a a9       	ldd	r23, Y+50	; 0x32
    3db2:	8b a9       	ldd	r24, Y+51	; 0x33
    3db4:	9c a9       	ldd	r25, Y+52	; 0x34
    3db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dba:	dc 01       	movw	r26, r24
    3dbc:	cb 01       	movw	r24, r22
    3dbe:	98 ab       	std	Y+48, r25	; 0x30
    3dc0:	8f a7       	std	Y+47, r24	; 0x2f
    3dc2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dc4:	98 a9       	ldd	r25, Y+48	; 0x30
    3dc6:	9c a7       	std	Y+44, r25	; 0x2c
    3dc8:	8b a7       	std	Y+43, r24	; 0x2b
    3dca:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    3dce:	01 97       	sbiw	r24, 0x01	; 1
    3dd0:	f1 f7       	brne	.-4      	; 0x3dce <LCD_enuInit+0x138>
    3dd2:	9c a7       	std	Y+44, r25	; 0x2c
    3dd4:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    3dd6:	80 e2       	ldi	r24, 0x20	; 32
    3dd8:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    3ddc:	80 e2       	ldi	r24, 0x20	; 32
    3dde:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    3de2:	80 e8       	ldi	r24, 0x80	; 128
    3de4:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	a0 e8       	ldi	r26, 0x80	; 128
    3dee:	bf e3       	ldi	r27, 0x3F	; 63
    3df0:	8f a3       	std	Y+39, r24	; 0x27
    3df2:	98 a7       	std	Y+40, r25	; 0x28
    3df4:	a9 a7       	std	Y+41, r26	; 0x29
    3df6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3df8:	6f a1       	ldd	r22, Y+39	; 0x27
    3dfa:	78 a5       	ldd	r23, Y+40	; 0x28
    3dfc:	89 a5       	ldd	r24, Y+41	; 0x29
    3dfe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	4a e7       	ldi	r20, 0x7A	; 122
    3e06:	55 e4       	ldi	r21, 0x45	; 69
    3e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	8b a3       	std	Y+35, r24	; 0x23
    3e12:	9c a3       	std	Y+36, r25	; 0x24
    3e14:	ad a3       	std	Y+37, r26	; 0x25
    3e16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e18:	6b a1       	ldd	r22, Y+35	; 0x23
    3e1a:	7c a1       	ldd	r23, Y+36	; 0x24
    3e1c:	8d a1       	ldd	r24, Y+37	; 0x25
    3e1e:	9e a1       	ldd	r25, Y+38	; 0x26
    3e20:	20 e0       	ldi	r18, 0x00	; 0
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	40 e8       	ldi	r20, 0x80	; 128
    3e26:	5f e3       	ldi	r21, 0x3F	; 63
    3e28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e2c:	88 23       	and	r24, r24
    3e2e:	2c f4       	brge	.+10     	; 0x3e3a <LCD_enuInit+0x1a4>
		__ticks = 1;
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	9a a3       	std	Y+34, r25	; 0x22
    3e36:	89 a3       	std	Y+33, r24	; 0x21
    3e38:	3f c0       	rjmp	.+126    	; 0x3eb8 <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    3e3a:	6b a1       	ldd	r22, Y+35	; 0x23
    3e3c:	7c a1       	ldd	r23, Y+36	; 0x24
    3e3e:	8d a1       	ldd	r24, Y+37	; 0x25
    3e40:	9e a1       	ldd	r25, Y+38	; 0x26
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	3f ef       	ldi	r19, 0xFF	; 255
    3e46:	4f e7       	ldi	r20, 0x7F	; 127
    3e48:	57 e4       	ldi	r21, 0x47	; 71
    3e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e4e:	18 16       	cp	r1, r24
    3e50:	4c f5       	brge	.+82     	; 0x3ea4 <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e52:	6f a1       	ldd	r22, Y+39	; 0x27
    3e54:	78 a5       	ldd	r23, Y+40	; 0x28
    3e56:	89 a5       	ldd	r24, Y+41	; 0x29
    3e58:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e5a:	20 e0       	ldi	r18, 0x00	; 0
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	40 e2       	ldi	r20, 0x20	; 32
    3e60:	51 e4       	ldi	r21, 0x41	; 65
    3e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	bc 01       	movw	r22, r24
    3e6c:	cd 01       	movw	r24, r26
    3e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e72:	dc 01       	movw	r26, r24
    3e74:	cb 01       	movw	r24, r22
    3e76:	9a a3       	std	Y+34, r25	; 0x22
    3e78:	89 a3       	std	Y+33, r24	; 0x21
    3e7a:	0f c0       	rjmp	.+30     	; 0x3e9a <LCD_enuInit+0x204>
    3e7c:	80 e9       	ldi	r24, 0x90	; 144
    3e7e:	91 e0       	ldi	r25, 0x01	; 1
    3e80:	98 a3       	std	Y+32, r25	; 0x20
    3e82:	8f 8f       	std	Y+31, r24	; 0x1f
    3e84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e86:	98 a1       	ldd	r25, Y+32	; 0x20
    3e88:	01 97       	sbiw	r24, 0x01	; 1
    3e8a:	f1 f7       	brne	.-4      	; 0x3e88 <LCD_enuInit+0x1f2>
    3e8c:	98 a3       	std	Y+32, r25	; 0x20
    3e8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e90:	89 a1       	ldd	r24, Y+33	; 0x21
    3e92:	9a a1       	ldd	r25, Y+34	; 0x22
    3e94:	01 97       	sbiw	r24, 0x01	; 1
    3e96:	9a a3       	std	Y+34, r25	; 0x22
    3e98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e9a:	89 a1       	ldd	r24, Y+33	; 0x21
    3e9c:	9a a1       	ldd	r25, Y+34	; 0x22
    3e9e:	00 97       	sbiw	r24, 0x00	; 0
    3ea0:	69 f7       	brne	.-38     	; 0x3e7c <LCD_enuInit+0x1e6>
    3ea2:	14 c0       	rjmp	.+40     	; 0x3ecc <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ea6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ea8:	8d a1       	ldd	r24, Y+37	; 0x25
    3eaa:	9e a1       	ldd	r25, Y+38	; 0x26
    3eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	9a a3       	std	Y+34, r25	; 0x22
    3eb6:	89 a3       	std	Y+33, r24	; 0x21
    3eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    3eba:	9a a1       	ldd	r25, Y+34	; 0x22
    3ebc:	9e 8f       	std	Y+30, r25	; 0x1e
    3ebe:	8d 8f       	std	Y+29, r24	; 0x1d
    3ec0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ec2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ec4:	01 97       	sbiw	r24, 0x01	; 1
    3ec6:	f1 f7       	brne	.-4      	; 0x3ec4 <LCD_enuInit+0x22e>
    3ec8:	9e 8f       	std	Y+30, r25	; 0x1e
    3eca:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    3ecc:	80 e0       	ldi	r24, 0x00	; 0
    3ece:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    3ed2:	80 ef       	ldi	r24, 0xF0	; 240
    3ed4:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	a0 e8       	ldi	r26, 0x80	; 128
    3ede:	bf e3       	ldi	r27, 0x3F	; 63
    3ee0:	89 8f       	std	Y+25, r24	; 0x19
    3ee2:	9a 8f       	std	Y+26, r25	; 0x1a
    3ee4:	ab 8f       	std	Y+27, r26	; 0x1b
    3ee6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ee8:	69 8d       	ldd	r22, Y+25	; 0x19
    3eea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3eec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	4a e7       	ldi	r20, 0x7A	; 122
    3ef6:	55 e4       	ldi	r21, 0x45	; 69
    3ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	8d 8b       	std	Y+21, r24	; 0x15
    3f02:	9e 8b       	std	Y+22, r25	; 0x16
    3f04:	af 8b       	std	Y+23, r26	; 0x17
    3f06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f08:	6d 89       	ldd	r22, Y+21	; 0x15
    3f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    3f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    3f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	40 e8       	ldi	r20, 0x80	; 128
    3f16:	5f e3       	ldi	r21, 0x3F	; 63
    3f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f1c:	88 23       	and	r24, r24
    3f1e:	2c f4       	brge	.+10     	; 0x3f2a <LCD_enuInit+0x294>
		__ticks = 1;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	9c 8b       	std	Y+20, r25	; 0x14
    3f26:	8b 8b       	std	Y+19, r24	; 0x13
    3f28:	3f c0       	rjmp	.+126    	; 0x3fa8 <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    3f2a:	6d 89       	ldd	r22, Y+21	; 0x15
    3f2c:	7e 89       	ldd	r23, Y+22	; 0x16
    3f2e:	8f 89       	ldd	r24, Y+23	; 0x17
    3f30:	98 8d       	ldd	r25, Y+24	; 0x18
    3f32:	20 e0       	ldi	r18, 0x00	; 0
    3f34:	3f ef       	ldi	r19, 0xFF	; 255
    3f36:	4f e7       	ldi	r20, 0x7F	; 127
    3f38:	57 e4       	ldi	r21, 0x47	; 71
    3f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f3e:	18 16       	cp	r1, r24
    3f40:	4c f5       	brge	.+82     	; 0x3f94 <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f42:	69 8d       	ldd	r22, Y+25	; 0x19
    3f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f4a:	20 e0       	ldi	r18, 0x00	; 0
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	40 e2       	ldi	r20, 0x20	; 32
    3f50:	51 e4       	ldi	r21, 0x41	; 65
    3f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	bc 01       	movw	r22, r24
    3f5c:	cd 01       	movw	r24, r26
    3f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f62:	dc 01       	movw	r26, r24
    3f64:	cb 01       	movw	r24, r22
    3f66:	9c 8b       	std	Y+20, r25	; 0x14
    3f68:	8b 8b       	std	Y+19, r24	; 0x13
    3f6a:	0f c0       	rjmp	.+30     	; 0x3f8a <LCD_enuInit+0x2f4>
    3f6c:	80 e9       	ldi	r24, 0x90	; 144
    3f6e:	91 e0       	ldi	r25, 0x01	; 1
    3f70:	9a 8b       	std	Y+18, r25	; 0x12
    3f72:	89 8b       	std	Y+17, r24	; 0x11
    3f74:	89 89       	ldd	r24, Y+17	; 0x11
    3f76:	9a 89       	ldd	r25, Y+18	; 0x12
    3f78:	01 97       	sbiw	r24, 0x01	; 1
    3f7a:	f1 f7       	brne	.-4      	; 0x3f78 <LCD_enuInit+0x2e2>
    3f7c:	9a 8b       	std	Y+18, r25	; 0x12
    3f7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f80:	8b 89       	ldd	r24, Y+19	; 0x13
    3f82:	9c 89       	ldd	r25, Y+20	; 0x14
    3f84:	01 97       	sbiw	r24, 0x01	; 1
    3f86:	9c 8b       	std	Y+20, r25	; 0x14
    3f88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    3f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    3f8e:	00 97       	sbiw	r24, 0x00	; 0
    3f90:	69 f7       	brne	.-38     	; 0x3f6c <LCD_enuInit+0x2d6>
    3f92:	14 c0       	rjmp	.+40     	; 0x3fbc <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f94:	6d 89       	ldd	r22, Y+21	; 0x15
    3f96:	7e 89       	ldd	r23, Y+22	; 0x16
    3f98:	8f 89       	ldd	r24, Y+23	; 0x17
    3f9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	9c 8b       	std	Y+20, r25	; 0x14
    3fa6:	8b 8b       	std	Y+19, r24	; 0x13
    3fa8:	8b 89       	ldd	r24, Y+19	; 0x13
    3faa:	9c 89       	ldd	r25, Y+20	; 0x14
    3fac:	98 8b       	std	Y+16, r25	; 0x10
    3fae:	8f 87       	std	Y+15, r24	; 0x0f
    3fb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fb2:	98 89       	ldd	r25, Y+16	; 0x10
    3fb4:	01 97       	sbiw	r24, 0x01	; 1
    3fb6:	f1 f7       	brne	.-4      	; 0x3fb4 <LCD_enuInit+0x31e>
    3fb8:	98 8b       	std	Y+16, r25	; 0x10
    3fba:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    3fbc:	80 e0       	ldi	r24, 0x00	; 0
    3fbe:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
    3fc8:	80 e0       	ldi	r24, 0x00	; 0
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	a0 e0       	ldi	r26, 0x00	; 0
    3fce:	b0 e4       	ldi	r27, 0x40	; 64
    3fd0:	8b 87       	std	Y+11, r24	; 0x0b
    3fd2:	9c 87       	std	Y+12, r25	; 0x0c
    3fd4:	ad 87       	std	Y+13, r26	; 0x0d
    3fd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fda:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fde:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fe0:	20 e0       	ldi	r18, 0x00	; 0
    3fe2:	30 e0       	ldi	r19, 0x00	; 0
    3fe4:	4a e7       	ldi	r20, 0x7A	; 122
    3fe6:	55 e4       	ldi	r21, 0x45	; 69
    3fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fec:	dc 01       	movw	r26, r24
    3fee:	cb 01       	movw	r24, r22
    3ff0:	8f 83       	std	Y+7, r24	; 0x07
    3ff2:	98 87       	std	Y+8, r25	; 0x08
    3ff4:	a9 87       	std	Y+9, r26	; 0x09
    3ff6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ff8:	6f 81       	ldd	r22, Y+7	; 0x07
    3ffa:	78 85       	ldd	r23, Y+8	; 0x08
    3ffc:	89 85       	ldd	r24, Y+9	; 0x09
    3ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4000:	20 e0       	ldi	r18, 0x00	; 0
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	40 e8       	ldi	r20, 0x80	; 128
    4006:	5f e3       	ldi	r21, 0x3F	; 63
    4008:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    400c:	88 23       	and	r24, r24
    400e:	2c f4       	brge	.+10     	; 0x401a <LCD_enuInit+0x384>
		__ticks = 1;
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	9e 83       	std	Y+6, r25	; 0x06
    4016:	8d 83       	std	Y+5, r24	; 0x05
    4018:	3f c0       	rjmp	.+126    	; 0x4098 <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    401a:	6f 81       	ldd	r22, Y+7	; 0x07
    401c:	78 85       	ldd	r23, Y+8	; 0x08
    401e:	89 85       	ldd	r24, Y+9	; 0x09
    4020:	9a 85       	ldd	r25, Y+10	; 0x0a
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	3f ef       	ldi	r19, 0xFF	; 255
    4026:	4f e7       	ldi	r20, 0x7F	; 127
    4028:	57 e4       	ldi	r21, 0x47	; 71
    402a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    402e:	18 16       	cp	r1, r24
    4030:	4c f5       	brge	.+82     	; 0x4084 <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4032:	6b 85       	ldd	r22, Y+11	; 0x0b
    4034:	7c 85       	ldd	r23, Y+12	; 0x0c
    4036:	8d 85       	ldd	r24, Y+13	; 0x0d
    4038:	9e 85       	ldd	r25, Y+14	; 0x0e
    403a:	20 e0       	ldi	r18, 0x00	; 0
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	40 e2       	ldi	r20, 0x20	; 32
    4040:	51 e4       	ldi	r21, 0x41	; 65
    4042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4046:	dc 01       	movw	r26, r24
    4048:	cb 01       	movw	r24, r22
    404a:	bc 01       	movw	r22, r24
    404c:	cd 01       	movw	r24, r26
    404e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	9e 83       	std	Y+6, r25	; 0x06
    4058:	8d 83       	std	Y+5, r24	; 0x05
    405a:	0f c0       	rjmp	.+30     	; 0x407a <LCD_enuInit+0x3e4>
    405c:	80 e9       	ldi	r24, 0x90	; 144
    405e:	91 e0       	ldi	r25, 0x01	; 1
    4060:	9c 83       	std	Y+4, r25	; 0x04
    4062:	8b 83       	std	Y+3, r24	; 0x03
    4064:	8b 81       	ldd	r24, Y+3	; 0x03
    4066:	9c 81       	ldd	r25, Y+4	; 0x04
    4068:	01 97       	sbiw	r24, 0x01	; 1
    406a:	f1 f7       	brne	.-4      	; 0x4068 <LCD_enuInit+0x3d2>
    406c:	9c 83       	std	Y+4, r25	; 0x04
    406e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4070:	8d 81       	ldd	r24, Y+5	; 0x05
    4072:	9e 81       	ldd	r25, Y+6	; 0x06
    4074:	01 97       	sbiw	r24, 0x01	; 1
    4076:	9e 83       	std	Y+6, r25	; 0x06
    4078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    407a:	8d 81       	ldd	r24, Y+5	; 0x05
    407c:	9e 81       	ldd	r25, Y+6	; 0x06
    407e:	00 97       	sbiw	r24, 0x00	; 0
    4080:	69 f7       	brne	.-38     	; 0x405c <LCD_enuInit+0x3c6>
    4082:	14 c0       	rjmp	.+40     	; 0x40ac <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4084:	6f 81       	ldd	r22, Y+7	; 0x07
    4086:	78 85       	ldd	r23, Y+8	; 0x08
    4088:	89 85       	ldd	r24, Y+9	; 0x09
    408a:	9a 85       	ldd	r25, Y+10	; 0x0a
    408c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
    4094:	9e 83       	std	Y+6, r25	; 0x06
    4096:	8d 83       	std	Y+5, r24	; 0x05
    4098:	8d 81       	ldd	r24, Y+5	; 0x05
    409a:	9e 81       	ldd	r25, Y+6	; 0x06
    409c:	9a 83       	std	Y+2, r25	; 0x02
    409e:	89 83       	std	Y+1, r24	; 0x01
    40a0:	89 81       	ldd	r24, Y+1	; 0x01
    40a2:	9a 81       	ldd	r25, Y+2	; 0x02
    40a4:	01 97       	sbiw	r24, 0x01	; 1
    40a6:	f1 f7       	brne	.-4      	; 0x40a4 <LCD_enuInit+0x40e>
    40a8:	9a 83       	std	Y+2, r25	; 0x02
    40aa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    40ac:	80 e0       	ldi	r24, 0x00	; 0
    40ae:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    40b2:	86 e0       	ldi	r24, 0x06	; 6
    40b4:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	80 93 a4 01 	sts	0x01A4, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    40be:	81 e0       	ldi	r24, 0x01	; 1
    40c0:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    40c2:	89 ad       	ldd	r24, Y+57	; 0x39
}
    40c4:	e9 96       	adiw	r28, 0x39	; 57
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	cf 91       	pop	r28
    40d2:	df 91       	pop	r29
    40d4:	08 95       	ret

000040d6 <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    40d6:	df 93       	push	r29
    40d8:	cf 93       	push	r28
    40da:	cd b7       	in	r28, 0x3d	; 61
    40dc:	de b7       	in	r29, 0x3e	; 62
    40de:	6e 97       	sbiw	r28, 0x1e	; 30
    40e0:	0f b6       	in	r0, 0x3f	; 63
    40e2:	f8 94       	cli
    40e4:	de bf       	out	0x3e, r29	; 62
    40e6:	0f be       	out	0x3f, r0	; 63
    40e8:	cd bf       	out	0x3d, r28	; 61
    40ea:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    40ec:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    40ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    40f0:	82 95       	swap	r24
    40f2:	8f 70       	andi	r24, 0x0F	; 15
    40f4:	98 2f       	mov	r25, r24
    40f6:	91 70       	andi	r25, 0x01	; 1
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	64 e0       	ldi	r22, 0x04	; 4
    40fc:	49 2f       	mov	r20, r25
    40fe:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    4102:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4104:	82 95       	swap	r24
    4106:	86 95       	lsr	r24
    4108:	87 70       	andi	r24, 0x07	; 7
    410a:	98 2f       	mov	r25, r24
    410c:	91 70       	andi	r25, 0x01	; 1
    410e:	80 e0       	ldi	r24, 0x00	; 0
    4110:	65 e0       	ldi	r22, 0x05	; 5
    4112:	49 2f       	mov	r20, r25
    4114:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    4118:	8e 8d       	ldd	r24, Y+30	; 0x1e
    411a:	82 95       	swap	r24
    411c:	86 95       	lsr	r24
    411e:	86 95       	lsr	r24
    4120:	83 70       	andi	r24, 0x03	; 3
    4122:	98 2f       	mov	r25, r24
    4124:	91 70       	andi	r25, 0x01	; 1
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	66 e0       	ldi	r22, 0x06	; 6
    412a:	49 2f       	mov	r20, r25
    412c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    4130:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4132:	98 2f       	mov	r25, r24
    4134:	99 1f       	adc	r25, r25
    4136:	99 27       	eor	r25, r25
    4138:	99 1f       	adc	r25, r25
    413a:	80 e0       	ldi	r24, 0x00	; 0
    413c:	67 e0       	ldi	r22, 0x07	; 7
    413e:	49 2f       	mov	r20, r25
    4140:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	63 e0       	ldi	r22, 0x03	; 3
    4148:	41 e0       	ldi	r20, 0x01	; 1
    414a:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
    414e:	80 e0       	ldi	r24, 0x00	; 0
    4150:	90 e0       	ldi	r25, 0x00	; 0
    4152:	a0 e0       	ldi	r26, 0x00	; 0
    4154:	b0 e4       	ldi	r27, 0x40	; 64
    4156:	89 8f       	std	Y+25, r24	; 0x19
    4158:	9a 8f       	std	Y+26, r25	; 0x1a
    415a:	ab 8f       	std	Y+27, r26	; 0x1b
    415c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415e:	69 8d       	ldd	r22, Y+25	; 0x19
    4160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	4a e7       	ldi	r20, 0x7A	; 122
    416c:	55 e4       	ldi	r21, 0x45	; 69
    416e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	8d 8b       	std	Y+21, r24	; 0x15
    4178:	9e 8b       	std	Y+22, r25	; 0x16
    417a:	af 8b       	std	Y+23, r26	; 0x17
    417c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    417e:	6d 89       	ldd	r22, Y+21	; 0x15
    4180:	7e 89       	ldd	r23, Y+22	; 0x16
    4182:	8f 89       	ldd	r24, Y+23	; 0x17
    4184:	98 8d       	ldd	r25, Y+24	; 0x18
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	40 e8       	ldi	r20, 0x80	; 128
    418c:	5f e3       	ldi	r21, 0x3F	; 63
    418e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4192:	88 23       	and	r24, r24
    4194:	2c f4       	brge	.+10     	; 0x41a0 <WriteNLatch+0xca>
		__ticks = 1;
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	9c 8b       	std	Y+20, r25	; 0x14
    419c:	8b 8b       	std	Y+19, r24	; 0x13
    419e:	3f c0       	rjmp	.+126    	; 0x421e <WriteNLatch+0x148>
	else if (__tmp > 65535)
    41a0:	6d 89       	ldd	r22, Y+21	; 0x15
    41a2:	7e 89       	ldd	r23, Y+22	; 0x16
    41a4:	8f 89       	ldd	r24, Y+23	; 0x17
    41a6:	98 8d       	ldd	r25, Y+24	; 0x18
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	3f ef       	ldi	r19, 0xFF	; 255
    41ac:	4f e7       	ldi	r20, 0x7F	; 127
    41ae:	57 e4       	ldi	r21, 0x47	; 71
    41b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b4:	18 16       	cp	r1, r24
    41b6:	4c f5       	brge	.+82     	; 0x420a <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b8:	69 8d       	ldd	r22, Y+25	; 0x19
    41ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    41bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    41be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    41c0:	20 e0       	ldi	r18, 0x00	; 0
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	40 e2       	ldi	r20, 0x20	; 32
    41c6:	51 e4       	ldi	r21, 0x41	; 65
    41c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	bc 01       	movw	r22, r24
    41d2:	cd 01       	movw	r24, r26
    41d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	9c 8b       	std	Y+20, r25	; 0x14
    41de:	8b 8b       	std	Y+19, r24	; 0x13
    41e0:	0f c0       	rjmp	.+30     	; 0x4200 <WriteNLatch+0x12a>
    41e2:	80 e9       	ldi	r24, 0x90	; 144
    41e4:	91 e0       	ldi	r25, 0x01	; 1
    41e6:	9a 8b       	std	Y+18, r25	; 0x12
    41e8:	89 8b       	std	Y+17, r24	; 0x11
    41ea:	89 89       	ldd	r24, Y+17	; 0x11
    41ec:	9a 89       	ldd	r25, Y+18	; 0x12
    41ee:	01 97       	sbiw	r24, 0x01	; 1
    41f0:	f1 f7       	brne	.-4      	; 0x41ee <WriteNLatch+0x118>
    41f2:	9a 8b       	std	Y+18, r25	; 0x12
    41f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f6:	8b 89       	ldd	r24, Y+19	; 0x13
    41f8:	9c 89       	ldd	r25, Y+20	; 0x14
    41fa:	01 97       	sbiw	r24, 0x01	; 1
    41fc:	9c 8b       	std	Y+20, r25	; 0x14
    41fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4200:	8b 89       	ldd	r24, Y+19	; 0x13
    4202:	9c 89       	ldd	r25, Y+20	; 0x14
    4204:	00 97       	sbiw	r24, 0x00	; 0
    4206:	69 f7       	brne	.-38     	; 0x41e2 <WriteNLatch+0x10c>
    4208:	14 c0       	rjmp	.+40     	; 0x4232 <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    420a:	6d 89       	ldd	r22, Y+21	; 0x15
    420c:	7e 89       	ldd	r23, Y+22	; 0x16
    420e:	8f 89       	ldd	r24, Y+23	; 0x17
    4210:	98 8d       	ldd	r25, Y+24	; 0x18
    4212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	9c 8b       	std	Y+20, r25	; 0x14
    421c:	8b 8b       	std	Y+19, r24	; 0x13
    421e:	8b 89       	ldd	r24, Y+19	; 0x13
    4220:	9c 89       	ldd	r25, Y+20	; 0x14
    4222:	98 8b       	std	Y+16, r25	; 0x10
    4224:	8f 87       	std	Y+15, r24	; 0x0f
    4226:	8f 85       	ldd	r24, Y+15	; 0x0f
    4228:	98 89       	ldd	r25, Y+16	; 0x10
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	f1 f7       	brne	.-4      	; 0x422a <WriteNLatch+0x154>
    422e:	98 8b       	std	Y+16, r25	; 0x10
    4230:	8f 87       	std	Y+15, r24	; 0x0f
    4232:	81 e0       	ldi	r24, 0x01	; 1
    4234:	63 e0       	ldi	r22, 0x03	; 3
    4236:	40 e0       	ldi	r20, 0x00	; 0
    4238:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    423c:	80 91 a4 01 	lds	r24, 0x01A4
    4240:	88 23       	and	r24, r24
    4242:	09 f4       	brne	.+2      	; 0x4246 <WriteNLatch+0x170>
    4244:	a2 c0       	rjmp	.+324    	; 0x438a <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    4246:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4248:	98 2f       	mov	r25, r24
    424a:	91 70       	andi	r25, 0x01	; 1
    424c:	80 e0       	ldi	r24, 0x00	; 0
    424e:	64 e0       	ldi	r22, 0x04	; 4
    4250:	49 2f       	mov	r20, r25
    4252:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    4256:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4258:	86 95       	lsr	r24
    425a:	98 2f       	mov	r25, r24
    425c:	91 70       	andi	r25, 0x01	; 1
    425e:	80 e0       	ldi	r24, 0x00	; 0
    4260:	65 e0       	ldi	r22, 0x05	; 5
    4262:	49 2f       	mov	r20, r25
    4264:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    4268:	8e 8d       	ldd	r24, Y+30	; 0x1e
    426a:	86 95       	lsr	r24
    426c:	86 95       	lsr	r24
    426e:	98 2f       	mov	r25, r24
    4270:	91 70       	andi	r25, 0x01	; 1
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	66 e0       	ldi	r22, 0x06	; 6
    4276:	49 2f       	mov	r20, r25
    4278:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    427c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    427e:	86 95       	lsr	r24
    4280:	86 95       	lsr	r24
    4282:	86 95       	lsr	r24
    4284:	98 2f       	mov	r25, r24
    4286:	91 70       	andi	r25, 0x01	; 1
    4288:	80 e0       	ldi	r24, 0x00	; 0
    428a:	67 e0       	ldi	r22, 0x07	; 7
    428c:	49 2f       	mov	r20, r25
    428e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	63 e0       	ldi	r22, 0x03	; 3
    4296:	41 e0       	ldi	r20, 0x01	; 1
    4298:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	a0 e0       	ldi	r26, 0x00	; 0
    42a2:	b0 e4       	ldi	r27, 0x40	; 64
    42a4:	8b 87       	std	Y+11, r24	; 0x0b
    42a6:	9c 87       	std	Y+12, r25	; 0x0c
    42a8:	ad 87       	std	Y+13, r26	; 0x0d
    42aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    42ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    42b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    42b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	30 e0       	ldi	r19, 0x00	; 0
    42b8:	4a e7       	ldi	r20, 0x7A	; 122
    42ba:	55 e4       	ldi	r21, 0x45	; 69
    42bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c0:	dc 01       	movw	r26, r24
    42c2:	cb 01       	movw	r24, r22
    42c4:	8f 83       	std	Y+7, r24	; 0x07
    42c6:	98 87       	std	Y+8, r25	; 0x08
    42c8:	a9 87       	std	Y+9, r26	; 0x09
    42ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    42cc:	6f 81       	ldd	r22, Y+7	; 0x07
    42ce:	78 85       	ldd	r23, Y+8	; 0x08
    42d0:	89 85       	ldd	r24, Y+9	; 0x09
    42d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42d4:	20 e0       	ldi	r18, 0x00	; 0
    42d6:	30 e0       	ldi	r19, 0x00	; 0
    42d8:	40 e8       	ldi	r20, 0x80	; 128
    42da:	5f e3       	ldi	r21, 0x3F	; 63
    42dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42e0:	88 23       	and	r24, r24
    42e2:	2c f4       	brge	.+10     	; 0x42ee <WriteNLatch+0x218>
		__ticks = 1;
    42e4:	81 e0       	ldi	r24, 0x01	; 1
    42e6:	90 e0       	ldi	r25, 0x00	; 0
    42e8:	9e 83       	std	Y+6, r25	; 0x06
    42ea:	8d 83       	std	Y+5, r24	; 0x05
    42ec:	3f c0       	rjmp	.+126    	; 0x436c <WriteNLatch+0x296>
	else if (__tmp > 65535)
    42ee:	6f 81       	ldd	r22, Y+7	; 0x07
    42f0:	78 85       	ldd	r23, Y+8	; 0x08
    42f2:	89 85       	ldd	r24, Y+9	; 0x09
    42f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42f6:	20 e0       	ldi	r18, 0x00	; 0
    42f8:	3f ef       	ldi	r19, 0xFF	; 255
    42fa:	4f e7       	ldi	r20, 0x7F	; 127
    42fc:	57 e4       	ldi	r21, 0x47	; 71
    42fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4302:	18 16       	cp	r1, r24
    4304:	4c f5       	brge	.+82     	; 0x4358 <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4306:	6b 85       	ldd	r22, Y+11	; 0x0b
    4308:	7c 85       	ldd	r23, Y+12	; 0x0c
    430a:	8d 85       	ldd	r24, Y+13	; 0x0d
    430c:	9e 85       	ldd	r25, Y+14	; 0x0e
    430e:	20 e0       	ldi	r18, 0x00	; 0
    4310:	30 e0       	ldi	r19, 0x00	; 0
    4312:	40 e2       	ldi	r20, 0x20	; 32
    4314:	51 e4       	ldi	r21, 0x41	; 65
    4316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    431a:	dc 01       	movw	r26, r24
    431c:	cb 01       	movw	r24, r22
    431e:	bc 01       	movw	r22, r24
    4320:	cd 01       	movw	r24, r26
    4322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4326:	dc 01       	movw	r26, r24
    4328:	cb 01       	movw	r24, r22
    432a:	9e 83       	std	Y+6, r25	; 0x06
    432c:	8d 83       	std	Y+5, r24	; 0x05
    432e:	0f c0       	rjmp	.+30     	; 0x434e <WriteNLatch+0x278>
    4330:	80 e9       	ldi	r24, 0x90	; 144
    4332:	91 e0       	ldi	r25, 0x01	; 1
    4334:	9c 83       	std	Y+4, r25	; 0x04
    4336:	8b 83       	std	Y+3, r24	; 0x03
    4338:	8b 81       	ldd	r24, Y+3	; 0x03
    433a:	9c 81       	ldd	r25, Y+4	; 0x04
    433c:	01 97       	sbiw	r24, 0x01	; 1
    433e:	f1 f7       	brne	.-4      	; 0x433c <WriteNLatch+0x266>
    4340:	9c 83       	std	Y+4, r25	; 0x04
    4342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4344:	8d 81       	ldd	r24, Y+5	; 0x05
    4346:	9e 81       	ldd	r25, Y+6	; 0x06
    4348:	01 97       	sbiw	r24, 0x01	; 1
    434a:	9e 83       	std	Y+6, r25	; 0x06
    434c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    434e:	8d 81       	ldd	r24, Y+5	; 0x05
    4350:	9e 81       	ldd	r25, Y+6	; 0x06
    4352:	00 97       	sbiw	r24, 0x00	; 0
    4354:	69 f7       	brne	.-38     	; 0x4330 <WriteNLatch+0x25a>
    4356:	14 c0       	rjmp	.+40     	; 0x4380 <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4358:	6f 81       	ldd	r22, Y+7	; 0x07
    435a:	78 85       	ldd	r23, Y+8	; 0x08
    435c:	89 85       	ldd	r24, Y+9	; 0x09
    435e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4364:	dc 01       	movw	r26, r24
    4366:	cb 01       	movw	r24, r22
    4368:	9e 83       	std	Y+6, r25	; 0x06
    436a:	8d 83       	std	Y+5, r24	; 0x05
    436c:	8d 81       	ldd	r24, Y+5	; 0x05
    436e:	9e 81       	ldd	r25, Y+6	; 0x06
    4370:	9a 83       	std	Y+2, r25	; 0x02
    4372:	89 83       	std	Y+1, r24	; 0x01
    4374:	89 81       	ldd	r24, Y+1	; 0x01
    4376:	9a 81       	ldd	r25, Y+2	; 0x02
    4378:	01 97       	sbiw	r24, 0x01	; 1
    437a:	f1 f7       	brne	.-4      	; 0x4378 <WriteNLatch+0x2a2>
    437c:	9a 83       	std	Y+2, r25	; 0x02
    437e:	89 83       	std	Y+1, r24	; 0x01
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	63 e0       	ldi	r22, 0x03	; 3
    4384:	40 e0       	ldi	r20, 0x00	; 0
    4386:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    438e:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4390:	6e 96       	adiw	r28, 0x1e	; 30
    4392:	0f b6       	in	r0, 0x3f	; 63
    4394:	f8 94       	cli
    4396:	de bf       	out	0x3e, r29	; 62
    4398:	0f be       	out	0x3f, r0	; 63
    439a:	cd bf       	out	0x3d, r28	; 61
    439c:	cf 91       	pop	r28
    439e:	df 91       	pop	r29
    43a0:	08 95       	ret

000043a2 <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    43a2:	df 93       	push	r29
    43a4:	cf 93       	push	r28
    43a6:	00 d0       	rcall	.+0      	; 0x43a8 <LCD_enuSendData+0x6>
    43a8:	cd b7       	in	r28, 0x3d	; 61
    43aa:	de b7       	in	r29, 0x3e	; 62
    43ac:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    43ae:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	61 e0       	ldi	r22, 0x01	; 1
    43b4:	41 e0       	ldi	r20, 0x01	; 1
    43b6:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	62 e0       	ldi	r22, 0x02	; 2
    43be:	40 e0       	ldi	r20, 0x00	; 0
    43c0:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    43c4:	8a 81       	ldd	r24, Y+2	; 0x02
    43c6:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <WriteNLatch>



	return Local_enu_ErrorState;
    43ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    43cc:	0f 90       	pop	r0
    43ce:	0f 90       	pop	r0
    43d0:	cf 91       	pop	r28
    43d2:	df 91       	pop	r29
    43d4:	08 95       	ret

000043d6 <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    43d6:	df 93       	push	r29
    43d8:	cf 93       	push	r28
    43da:	00 d0       	rcall	.+0      	; 0x43dc <LCD_enuSendCommand+0x6>
    43dc:	cd b7       	in	r28, 0x3d	; 61
    43de:	de b7       	in	r29, 0x3e	; 62
    43e0:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    43e2:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	61 e0       	ldi	r22, 0x01	; 1
    43e8:	40 e0       	ldi	r20, 0x00	; 0
    43ea:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	62 e0       	ldi	r22, 0x02	; 2
    43f2:	40 e0       	ldi	r20, 0x00	; 0
    43f4:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    43f8:	8a 81       	ldd	r24, Y+2	; 0x02
    43fa:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    4402:	89 81       	ldd	r24, Y+1	; 0x01
}
    4404:	0f 90       	pop	r0
    4406:	0f 90       	pop	r0
    4408:	cf 91       	pop	r28
    440a:	df 91       	pop	r29
    440c:	08 95       	ret

0000440e <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    440e:	df 93       	push	r29
    4410:	cf 93       	push	r28
    4412:	00 d0       	rcall	.+0      	; 0x4414 <LCD_u8SendString+0x6>
    4414:	00 d0       	rcall	.+0      	; 0x4416 <LCD_u8SendString+0x8>
    4416:	0f 92       	push	r0
    4418:	cd b7       	in	r28, 0x3d	; 61
    441a:	de b7       	in	r29, 0x3e	; 62
    441c:	9c 83       	std	Y+4, r25	; 0x04
    441e:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4420:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    4422:	8b 81       	ldd	r24, Y+3	; 0x03
    4424:	9c 81       	ldd	r25, Y+4	; 0x04
    4426:	00 97       	sbiw	r24, 0x00	; 0
    4428:	f9 f0       	breq	.+62     	; 0x4468 <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    442a:	19 82       	std	Y+1, r1	; 0x01
    442c:	0f c0       	rjmp	.+30     	; 0x444c <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    442e:	89 81       	ldd	r24, Y+1	; 0x01
    4430:	28 2f       	mov	r18, r24
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	8b 81       	ldd	r24, Y+3	; 0x03
    4436:	9c 81       	ldd	r25, Y+4	; 0x04
    4438:	fc 01       	movw	r30, r24
    443a:	e2 0f       	add	r30, r18
    443c:	f3 1f       	adc	r31, r19
    443e:	90 81       	ld	r25, Z
    4440:	89 81       	ldd	r24, Y+1	; 0x01
    4442:	8f 5f       	subi	r24, 0xFF	; 255
    4444:	89 83       	std	Y+1, r24	; 0x01
    4446:	89 2f       	mov	r24, r25
    4448:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    444c:	89 81       	ldd	r24, Y+1	; 0x01
    444e:	28 2f       	mov	r18, r24
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	8b 81       	ldd	r24, Y+3	; 0x03
    4454:	9c 81       	ldd	r25, Y+4	; 0x04
    4456:	fc 01       	movw	r30, r24
    4458:	e2 0f       	add	r30, r18
    445a:	f3 1f       	adc	r31, r19
    445c:	80 81       	ld	r24, Z
    445e:	88 23       	and	r24, r24
    4460:	31 f7       	brne	.-52     	; 0x442e <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    4462:	8a 81       	ldd	r24, Y+2	; 0x02
    4464:	8d 83       	std	Y+5, r24	; 0x05
    4466:	04 c0       	rjmp	.+8      	; 0x4470 <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    4468:	81 e0       	ldi	r24, 0x01	; 1
    446a:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    446c:	8a 81       	ldd	r24, Y+2	; 0x02
    446e:	8d 83       	std	Y+5, r24	; 0x05
    4470:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    4472:	0f 90       	pop	r0
    4474:	0f 90       	pop	r0
    4476:	0f 90       	pop	r0
    4478:	0f 90       	pop	r0
    447a:	0f 90       	pop	r0
    447c:	cf 91       	pop	r28
    447e:	df 91       	pop	r29
    4480:	08 95       	ret

00004482 <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    4482:	df 93       	push	r29
    4484:	cf 93       	push	r28
    4486:	cd b7       	in	r28, 0x3d	; 61
    4488:	de b7       	in	r29, 0x3e	; 62
    448a:	a0 97       	sbiw	r28, 0x20	; 32
    448c:	0f b6       	in	r0, 0x3f	; 63
    448e:	f8 94       	cli
    4490:	de bf       	out	0x3e, r29	; 62
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	cd bf       	out	0x3d, r28	; 61
    4496:	6b 8f       	std	Y+27, r22	; 0x1b
    4498:	7c 8f       	std	Y+28, r23	; 0x1c
    449a:	8d 8f       	std	Y+29, r24	; 0x1d
    449c:	9e 8f       	std	Y+30, r25	; 0x1e
    449e:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    44a0:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    44a2:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    44a4:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    44a6:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    44a8:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    44aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44ae:	ad 8d       	ldd	r26, Y+29	; 0x1d
    44b0:	be 8d       	ldd	r27, Y+30	; 0x1e
    44b2:	bb 23       	and	r27, r27
    44b4:	94 f4       	brge	.+36     	; 0x44da <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    44b6:	8d e2       	ldi	r24, 0x2D	; 45
    44b8:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <LCD_enuSendData>
		Copy_u8data*=-1;
    44bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44c0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    44c2:	be 8d       	ldd	r27, Y+30	; 0x1e
    44c4:	b0 95       	com	r27
    44c6:	a0 95       	com	r26
    44c8:	90 95       	com	r25
    44ca:	81 95       	neg	r24
    44cc:	9f 4f       	sbci	r25, 0xFF	; 255
    44ce:	af 4f       	sbci	r26, 0xFF	; 255
    44d0:	bf 4f       	sbci	r27, 0xFF	; 255
    44d2:	8b 8f       	std	Y+27, r24	; 0x1b
    44d4:	9c 8f       	std	Y+28, r25	; 0x1c
    44d6:	ad 8f       	std	Y+29, r26	; 0x1d
    44d8:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    44da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44de:	ad 8d       	ldd	r26, Y+29	; 0x1d
    44e0:	be 8d       	ldd	r27, Y+30	; 0x1e
    44e2:	00 97       	sbiw	r24, 0x00	; 0
    44e4:	a1 05       	cpc	r26, r1
    44e6:	b1 05       	cpc	r27, r1
    44e8:	09 f0       	breq	.+2      	; 0x44ec <LCD_enuIntegerToString+0x6a>
    44ea:	4b c0       	rjmp	.+150    	; 0x4582 <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    44ec:	8d 81       	ldd	r24, Y+5	; 0x05
    44ee:	28 2f       	mov	r18, r24
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	ce 01       	movw	r24, r28
    44f4:	07 96       	adiw	r24, 0x07	; 7
    44f6:	fc 01       	movw	r30, r24
    44f8:	e2 0f       	add	r30, r18
    44fa:	f3 1f       	adc	r31, r19
    44fc:	80 e3       	ldi	r24, 0x30	; 48
    44fe:	80 83       	st	Z, r24
    4500:	8d 81       	ldd	r24, Y+5	; 0x05
    4502:	8f 5f       	subi	r24, 0xFF	; 255
    4504:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    4506:	8d 81       	ldd	r24, Y+5	; 0x05
    4508:	28 2f       	mov	r18, r24
    450a:	30 e0       	ldi	r19, 0x00	; 0
    450c:	ce 01       	movw	r24, r28
    450e:	07 96       	adiw	r24, 0x07	; 7
    4510:	fc 01       	movw	r30, r24
    4512:	e2 0f       	add	r30, r18
    4514:	f3 1f       	adc	r31, r19
    4516:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    4518:	8e 81       	ldd	r24, Y+6	; 0x06
    451a:	88 a3       	std	Y+32, r24	; 0x20
    451c:	7f c0       	rjmp	.+254    	; 0x461c <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    451e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4520:	28 2f       	mov	r18, r24
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	40 e0       	ldi	r20, 0x00	; 0
    4526:	50 e0       	ldi	r21, 0x00	; 0
    4528:	8b 8d       	ldd	r24, Y+27	; 0x1b
    452a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    452c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    452e:	be 8d       	ldd	r27, Y+30	; 0x1e
    4530:	bc 01       	movw	r22, r24
    4532:	cd 01       	movw	r24, r26
    4534:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <__divmodsi4>
    4538:	dc 01       	movw	r26, r24
    453a:	cb 01       	movw	r24, r22
    453c:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    453e:	8d 81       	ldd	r24, Y+5	; 0x05
    4540:	28 2f       	mov	r18, r24
    4542:	30 e0       	ldi	r19, 0x00	; 0
    4544:	8c 81       	ldd	r24, Y+4	; 0x04
    4546:	48 2f       	mov	r20, r24
    4548:	40 5d       	subi	r20, 0xD0	; 208
    454a:	ce 01       	movw	r24, r28
    454c:	07 96       	adiw	r24, 0x07	; 7
    454e:	fc 01       	movw	r30, r24
    4550:	e2 0f       	add	r30, r18
    4552:	f3 1f       	adc	r31, r19
    4554:	40 83       	st	Z, r20
    4556:	8d 81       	ldd	r24, Y+5	; 0x05
    4558:	8f 5f       	subi	r24, 0xFF	; 255
    455a:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    455c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    455e:	28 2f       	mov	r18, r24
    4560:	30 e0       	ldi	r19, 0x00	; 0
    4562:	40 e0       	ldi	r20, 0x00	; 0
    4564:	50 e0       	ldi	r21, 0x00	; 0
    4566:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4568:	9c 8d       	ldd	r25, Y+28	; 0x1c
    456a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    456c:	be 8d       	ldd	r27, Y+30	; 0x1e
    456e:	bc 01       	movw	r22, r24
    4570:	cd 01       	movw	r24, r26
    4572:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <__divmodsi4>
    4576:	da 01       	movw	r26, r20
    4578:	c9 01       	movw	r24, r18
    457a:	8b 8f       	std	Y+27, r24	; 0x1b
    457c:	9c 8f       	std	Y+28, r25	; 0x1c
    457e:	ad 8f       	std	Y+29, r26	; 0x1d
    4580:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    4582:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4584:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4586:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4588:	be 8d       	ldd	r27, Y+30	; 0x1e
    458a:	00 97       	sbiw	r24, 0x00	; 0
    458c:	a1 05       	cpc	r26, r1
    458e:	b1 05       	cpc	r27, r1
    4590:	31 f6       	brne	.-116    	; 0x451e <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    4592:	8d 81       	ldd	r24, Y+5	; 0x05
    4594:	28 2f       	mov	r18, r24
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	ce 01       	movw	r24, r28
    459a:	07 96       	adiw	r24, 0x07	; 7
    459c:	fc 01       	movw	r30, r24
    459e:	e2 0f       	add	r30, r18
    45a0:	f3 1f       	adc	r31, r19
    45a2:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    45a4:	8d 81       	ldd	r24, Y+5	; 0x05
    45a6:	81 50       	subi	r24, 0x01	; 1
    45a8:	8a 83       	std	Y+2, r24	; 0x02
    45aa:	2c c0       	rjmp	.+88     	; 0x4604 <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    45ac:	8b 81       	ldd	r24, Y+3	; 0x03
    45ae:	28 2f       	mov	r18, r24
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	ce 01       	movw	r24, r28
    45b4:	07 96       	adiw	r24, 0x07	; 7
    45b6:	fc 01       	movw	r30, r24
    45b8:	e2 0f       	add	r30, r18
    45ba:	f3 1f       	adc	r31, r19
    45bc:	80 81       	ld	r24, Z
    45be:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    45c0:	8b 81       	ldd	r24, Y+3	; 0x03
    45c2:	48 2f       	mov	r20, r24
    45c4:	50 e0       	ldi	r21, 0x00	; 0
    45c6:	8a 81       	ldd	r24, Y+2	; 0x02
    45c8:	28 2f       	mov	r18, r24
    45ca:	30 e0       	ldi	r19, 0x00	; 0
    45cc:	ce 01       	movw	r24, r28
    45ce:	07 96       	adiw	r24, 0x07	; 7
    45d0:	fc 01       	movw	r30, r24
    45d2:	e2 0f       	add	r30, r18
    45d4:	f3 1f       	adc	r31, r19
    45d6:	20 81       	ld	r18, Z
    45d8:	ce 01       	movw	r24, r28
    45da:	07 96       	adiw	r24, 0x07	; 7
    45dc:	fc 01       	movw	r30, r24
    45de:	e4 0f       	add	r30, r20
    45e0:	f5 1f       	adc	r31, r21
    45e2:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    45e4:	8a 81       	ldd	r24, Y+2	; 0x02
    45e6:	28 2f       	mov	r18, r24
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	ce 01       	movw	r24, r28
    45ec:	07 96       	adiw	r24, 0x07	; 7
    45ee:	fc 01       	movw	r30, r24
    45f0:	e2 0f       	add	r30, r18
    45f2:	f3 1f       	adc	r31, r19
    45f4:	89 81       	ldd	r24, Y+1	; 0x01
    45f6:	80 83       	st	Z, r24

        Local_u8Start++;
    45f8:	8b 81       	ldd	r24, Y+3	; 0x03
    45fa:	8f 5f       	subi	r24, 0xFF	; 255
    45fc:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    45fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4600:	81 50       	subi	r24, 0x01	; 1
    4602:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    4604:	9b 81       	ldd	r25, Y+3	; 0x03
    4606:	8a 81       	ldd	r24, Y+2	; 0x02
    4608:	98 17       	cp	r25, r24
    460a:	80 f2       	brcs	.-96     	; 0x45ac <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    460c:	ce 01       	movw	r24, r28
    460e:	07 96       	adiw	r24, 0x07	; 7
    4610:	0e 94 07 22 	call	0x440e	; 0x440e <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    4618:	8e 81       	ldd	r24, Y+6	; 0x06
    461a:	88 a3       	std	Y+32, r24	; 0x20
    461c:	88 a1       	ldd	r24, Y+32	; 0x20
}
    461e:	a0 96       	adiw	r28, 0x20	; 32
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	f8 94       	cli
    4624:	de bf       	out	0x3e, r29	; 62
    4626:	0f be       	out	0x3f, r0	; 63
    4628:	cd bf       	out	0x3d, r28	; 61
    462a:	cf 91       	pop	r28
    462c:	df 91       	pop	r29
    462e:	08 95       	ret

00004630 <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    4630:	df 93       	push	r29
    4632:	cf 93       	push	r28
    4634:	cd b7       	in	r28, 0x3d	; 61
    4636:	de b7       	in	r29, 0x3e	; 62
    4638:	27 97       	sbiw	r28, 0x07	; 7
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	f8 94       	cli
    463e:	de bf       	out	0x3e, r29	; 62
    4640:	0f be       	out	0x3f, r0	; 63
    4642:	cd bf       	out	0x3d, r28	; 61
    4644:	8b 83       	std	Y+3, r24	; 0x03
    4646:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    4648:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    464a:	8b 81       	ldd	r24, Y+3	; 0x03
    464c:	81 31       	cpi	r24, 0x11	; 17
    464e:	18 f4       	brcc	.+6      	; 0x4656 <LCD_u8SetPosXY+0x26>
    4650:	8c 81       	ldd	r24, Y+4	; 0x04
    4652:	83 30       	cpi	r24, 0x03	; 3
    4654:	18 f0       	brcs	.+6      	; 0x465c <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    4656:	2a 81       	ldd	r18, Y+2	; 0x02
    4658:	2f 83       	std	Y+7, r18	; 0x07
    465a:	23 c0       	rjmp	.+70     	; 0x46a2 <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    465c:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    465e:	8c 81       	ldd	r24, Y+4	; 0x04
    4660:	28 2f       	mov	r18, r24
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	3e 83       	std	Y+6, r19	; 0x06
    4666:	2d 83       	std	Y+5, r18	; 0x05
    4668:	8d 81       	ldd	r24, Y+5	; 0x05
    466a:	9e 81       	ldd	r25, Y+6	; 0x06
    466c:	81 30       	cpi	r24, 0x01	; 1
    466e:	91 05       	cpc	r25, r1
    4670:	31 f0       	breq	.+12     	; 0x467e <LCD_u8SetPosXY+0x4e>
    4672:	2d 81       	ldd	r18, Y+5	; 0x05
    4674:	3e 81       	ldd	r19, Y+6	; 0x06
    4676:	22 30       	cpi	r18, 0x02	; 2
    4678:	31 05       	cpc	r19, r1
    467a:	21 f0       	breq	.+8      	; 0x4684 <LCD_u8SetPosXY+0x54>
    467c:	07 c0       	rjmp	.+14     	; 0x468c <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    467e:	8b 81       	ldd	r24, Y+3	; 0x03
    4680:	89 83       	std	Y+1, r24	; 0x01
    4682:	05 c0       	rjmp	.+10     	; 0x468e <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    4684:	8b 81       	ldd	r24, Y+3	; 0x03
    4686:	80 5c       	subi	r24, 0xC0	; 192
    4688:	89 83       	std	Y+1, r24	; 0x01
    468a:	01 c0       	rjmp	.+2      	; 0x468e <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    468c:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    468e:	89 81       	ldd	r24, Y+1	; 0x01
    4690:	80 68       	ori	r24, 0x80	; 128
    4692:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    4694:	89 81       	ldd	r24, Y+1	; 0x01
    4696:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    469e:	3a 81       	ldd	r19, Y+2	; 0x02
    46a0:	3f 83       	std	Y+7, r19	; 0x07
    46a2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    46a4:	27 96       	adiw	r28, 0x07	; 7
    46a6:	0f b6       	in	r0, 0x3f	; 63
    46a8:	f8 94       	cli
    46aa:	de bf       	out	0x3e, r29	; 62
    46ac:	0f be       	out	0x3f, r0	; 63
    46ae:	cd bf       	out	0x3d, r28	; 61
    46b0:	cf 91       	pop	r28
    46b2:	df 91       	pop	r29
    46b4:	08 95       	ret

000046b6 <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    46b6:	df 93       	push	r29
    46b8:	cf 93       	push	r28
    46ba:	cd b7       	in	r28, 0x3d	; 61
    46bc:	de b7       	in	r29, 0x3e	; 62
    46be:	27 97       	sbiw	r28, 0x07	; 7
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	f8 94       	cli
    46c4:	de bf       	out	0x3e, r29	; 62
    46c6:	0f be       	out	0x3f, r0	; 63
    46c8:	cd bf       	out	0x3d, r28	; 61
    46ca:	9d 83       	std	Y+5, r25	; 0x05
    46cc:	8c 83       	std	Y+4, r24	; 0x04
    46ce:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    46d0:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    46d2:	8c 81       	ldd	r24, Y+4	; 0x04
    46d4:	9d 81       	ldd	r25, Y+5	; 0x05
    46d6:	00 97       	sbiw	r24, 0x00	; 0
    46d8:	19 f0       	breq	.+6      	; 0x46e0 <LCD_u8StoreCustomChar+0x2a>
    46da:	8e 81       	ldd	r24, Y+6	; 0x06
    46dc:	89 30       	cpi	r24, 0x09	; 9
    46de:	18 f0       	brcs	.+6      	; 0x46e6 <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    46e0:	8b 81       	ldd	r24, Y+3	; 0x03
    46e2:	8f 83       	std	Y+7, r24	; 0x07
    46e4:	2a c0       	rjmp	.+84     	; 0x473a <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    46e6:	8e 81       	ldd	r24, Y+6	; 0x06
    46e8:	88 2f       	mov	r24, r24
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	88 0f       	add	r24, r24
    46ee:	99 1f       	adc	r25, r25
    46f0:	88 0f       	add	r24, r24
    46f2:	99 1f       	adc	r25, r25
    46f4:	88 0f       	add	r24, r24
    46f6:	99 1f       	adc	r25, r25
    46f8:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    46fa:	8a 81       	ldd	r24, Y+2	; 0x02
    46fc:	80 64       	ori	r24, 0x40	; 64
    46fe:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    4700:	8a 81       	ldd	r24, Y+2	; 0x02
    4702:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    4706:	19 82       	std	Y+1, r1	; 0x01
    4708:	0e c0       	rjmp	.+28     	; 0x4726 <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    470a:	89 81       	ldd	r24, Y+1	; 0x01
    470c:	28 2f       	mov	r18, r24
    470e:	30 e0       	ldi	r19, 0x00	; 0
    4710:	8c 81       	ldd	r24, Y+4	; 0x04
    4712:	9d 81       	ldd	r25, Y+5	; 0x05
    4714:	fc 01       	movw	r30, r24
    4716:	e2 0f       	add	r30, r18
    4718:	f3 1f       	adc	r31, r19
    471a:	80 81       	ld	r24, Z
    471c:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	8f 5f       	subi	r24, 0xFF	; 255
    4724:	89 83       	std	Y+1, r24	; 0x01
    4726:	89 81       	ldd	r24, Y+1	; 0x01
    4728:	88 30       	cpi	r24, 0x08	; 8
    472a:	78 f3       	brcs	.-34     	; 0x470a <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    472c:	82 e0       	ldi	r24, 0x02	; 2
    472e:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    4732:	81 e0       	ldi	r24, 0x01	; 1
    4734:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    4736:	8b 81       	ldd	r24, Y+3	; 0x03
    4738:	8f 83       	std	Y+7, r24	; 0x07
    473a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    473c:	27 96       	adiw	r28, 0x07	; 7
    473e:	0f b6       	in	r0, 0x3f	; 63
    4740:	f8 94       	cli
    4742:	de bf       	out	0x3e, r29	; 62
    4744:	0f be       	out	0x3f, r0	; 63
    4746:	cd bf       	out	0x3d, r28	; 61
    4748:	cf 91       	pop	r28
    474a:	df 91       	pop	r29
    474c:	08 95       	ret

0000474e <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    474e:	df 93       	push	r29
    4750:	cf 93       	push	r28
    4752:	00 d0       	rcall	.+0      	; 0x4754 <LCD_u8DisplayCustomChar+0x6>
    4754:	00 d0       	rcall	.+0      	; 0x4756 <LCD_u8DisplayCustomChar+0x8>
    4756:	cd b7       	in	r28, 0x3d	; 61
    4758:	de b7       	in	r29, 0x3e	; 62
    475a:	8a 83       	std	Y+2, r24	; 0x02
    475c:	6b 83       	std	Y+3, r22	; 0x03
    475e:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4760:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    4762:	8c 81       	ldd	r24, Y+4	; 0x04
    4764:	6b 81       	ldd	r22, Y+3	; 0x03
    4766:	0e 94 18 23 	call	0x4630	; 0x4630 <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    476a:	8a 81       	ldd	r24, Y+2	; 0x02
    476c:	0e 94 d1 21 	call	0x43a2	; 0x43a2 <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    4770:	81 e0       	ldi	r24, 0x01	; 1
    4772:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    4774:	89 81       	ldd	r24, Y+1	; 0x01
}
    4776:	0f 90       	pop	r0
    4778:	0f 90       	pop	r0
    477a:	0f 90       	pop	r0
    477c:	0f 90       	pop	r0
    477e:	cf 91       	pop	r28
    4780:	df 91       	pop	r29
    4782:	08 95       	ret

00004784 <EEPROM_enuInit>:
#include <util/delay.h>
/**************************************************************/



ErrorStatus_t EEPROM_enuInit(void){
    4784:	df 93       	push	r29
    4786:	cf 93       	push	r28
    4788:	0f 92       	push	r0
    478a:	cd b7       	in	r28, 0x3d	; 61
    478c:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enuErrorState = TWI_enuInit();
    478e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <TWI_enuInit>
    4792:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4794:	89 81       	ldd	r24, Y+1	; 0x01
}
    4796:	0f 90       	pop	r0
    4798:	cf 91       	pop	r28
    479a:	df 91       	pop	r29
    479c:	08 95       	ret

0000479e <EEPROM_enuWriteData>:


ErrorStatus_t EEPROM_enuWriteData(EEPROM_Input_t* eepromInstance) {
    479e:	df 93       	push	r29
    47a0:	cf 93       	push	r28
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	62 97       	sbiw	r28, 0x12	; 18
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	f8 94       	cli
    47ac:	de bf       	out	0x3e, r29	; 62
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	cd bf       	out	0x3d, r28	; 61
    47b2:	9a 8b       	std	Y+18, r25	; 0x12
    47b4:	89 8b       	std	Y+17, r24	; 0x11
    ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    47b6:	18 8a       	std	Y+16, r1	; 0x10

    	uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 3) | (eepromInstance->A1 << 2) | (eepromInstance->A0);

	#elif(EEPROM_TYPE == EEPROM_NM24C08 || EEPROM_TYPE == EEPROM_NM24C08F )

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 2) | (eepromInstance->A1 << 1) | (eepromInstance->A0);
    47b8:	e9 89       	ldd	r30, Y+17	; 0x11
    47ba:	fa 89       	ldd	r31, Y+18	; 0x12
    47bc:	82 81       	ldd	r24, Z+2	; 0x02
    47be:	81 70       	andi	r24, 0x01	; 1
    47c0:	88 2f       	mov	r24, r24
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	88 0f       	add	r24, r24
    47c6:	99 1f       	adc	r25, r25
    47c8:	88 0f       	add	r24, r24
    47ca:	99 1f       	adc	r25, r25
    47cc:	28 2f       	mov	r18, r24
    47ce:	20 6a       	ori	r18, 0xA0	; 160
    47d0:	e9 89       	ldd	r30, Y+17	; 0x11
    47d2:	fa 89       	ldd	r31, Y+18	; 0x12
    47d4:	82 81       	ldd	r24, Z+2	; 0x02
    47d6:	86 95       	lsr	r24
    47d8:	81 70       	andi	r24, 0x01	; 1
    47da:	88 2f       	mov	r24, r24
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	88 0f       	add	r24, r24
    47e0:	99 1f       	adc	r25, r25
    47e2:	92 2f       	mov	r25, r18
    47e4:	98 2b       	or	r25, r24
    47e6:	e9 89       	ldd	r30, Y+17	; 0x11
    47e8:	fa 89       	ldd	r31, Y+18	; 0x12
    47ea:	82 81       	ldd	r24, Z+2	; 0x02
    47ec:	86 95       	lsr	r24
    47ee:	86 95       	lsr	r24
    47f0:	81 70       	andi	r24, 0x01	; 1
    47f2:	89 2b       	or	r24, r25
    47f4:	8f 87       	std	Y+15, r24	; 0x0f
		#error "Unsupported EEPROM type!"
	#endif


    // Send start condition
    if( TWI_enuStartCondition() == TWI_STATUS_OK){
    47f6:	0e 94 8b 08 	call	0x1116	; 0x1116 <TWI_enuStartCondition>
    47fa:	81 30       	cpi	r24, 0x01	; 1
    47fc:	79 f4       	brne	.+30     	; 0x481c <EEPROM_enuWriteData+0x7e>

		// Send EEPROM address with write operation
		TWI_enuWriteData(Local_u8Address | TWI_WriteOperation);
    47fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    4800:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Send memory address within EEPROM
		TWI_enuWriteData(eepromInstance->address);
    4804:	e9 89       	ldd	r30, Y+17	; 0x11
    4806:	fa 89       	ldd	r31, Y+18	; 0x12
    4808:	80 81       	ld	r24, Z
    480a:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Write data to EEPROM
		TWI_enuWriteData(eepromInstance->data);
    480e:	e9 89       	ldd	r30, Y+17	; 0x11
    4810:	fa 89       	ldd	r31, Y+18	; 0x12
    4812:	81 81       	ldd	r24, Z+1	; 0x01
    4814:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Send stop condition
		TWI_enuStopCondition();
    4818:	0e 94 cb 08 	call	0x1196	; 0x1196 <TWI_enuStopCondition>
    481c:	80 e0       	ldi	r24, 0x00	; 0
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	a0 e2       	ldi	r26, 0x20	; 32
    4822:	b1 e4       	ldi	r27, 0x41	; 65
    4824:	8b 87       	std	Y+11, r24	; 0x0b
    4826:	9c 87       	std	Y+12, r25	; 0x0c
    4828:	ad 87       	std	Y+13, r26	; 0x0d
    482a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    482c:	6b 85       	ldd	r22, Y+11	; 0x0b
    482e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4830:	8d 85       	ldd	r24, Y+13	; 0x0d
    4832:	9e 85       	ldd	r25, Y+14	; 0x0e
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	4a ef       	ldi	r20, 0xFA	; 250
    483a:	54 e4       	ldi	r21, 0x44	; 68
    483c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4840:	dc 01       	movw	r26, r24
    4842:	cb 01       	movw	r24, r22
    4844:	8f 83       	std	Y+7, r24	; 0x07
    4846:	98 87       	std	Y+8, r25	; 0x08
    4848:	a9 87       	std	Y+9, r26	; 0x09
    484a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    484c:	6f 81       	ldd	r22, Y+7	; 0x07
    484e:	78 85       	ldd	r23, Y+8	; 0x08
    4850:	89 85       	ldd	r24, Y+9	; 0x09
    4852:	9a 85       	ldd	r25, Y+10	; 0x0a
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	30 e0       	ldi	r19, 0x00	; 0
    4858:	40 e8       	ldi	r20, 0x80	; 128
    485a:	5f e3       	ldi	r21, 0x3F	; 63
    485c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4860:	88 23       	and	r24, r24
    4862:	2c f4       	brge	.+10     	; 0x486e <EEPROM_enuWriteData+0xd0>
		__ticks = 1;
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	90 e0       	ldi	r25, 0x00	; 0
    4868:	9e 83       	std	Y+6, r25	; 0x06
    486a:	8d 83       	std	Y+5, r24	; 0x05
    486c:	3f c0       	rjmp	.+126    	; 0x48ec <EEPROM_enuWriteData+0x14e>
	else if (__tmp > 65535)
    486e:	6f 81       	ldd	r22, Y+7	; 0x07
    4870:	78 85       	ldd	r23, Y+8	; 0x08
    4872:	89 85       	ldd	r24, Y+9	; 0x09
    4874:	9a 85       	ldd	r25, Y+10	; 0x0a
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	3f ef       	ldi	r19, 0xFF	; 255
    487a:	4f e7       	ldi	r20, 0x7F	; 127
    487c:	57 e4       	ldi	r21, 0x47	; 71
    487e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4882:	18 16       	cp	r1, r24
    4884:	4c f5       	brge	.+82     	; 0x48d8 <EEPROM_enuWriteData+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4886:	6b 85       	ldd	r22, Y+11	; 0x0b
    4888:	7c 85       	ldd	r23, Y+12	; 0x0c
    488a:	8d 85       	ldd	r24, Y+13	; 0x0d
    488c:	9e 85       	ldd	r25, Y+14	; 0x0e
    488e:	20 e0       	ldi	r18, 0x00	; 0
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	40 e2       	ldi	r20, 0x20	; 32
    4894:	51 e4       	ldi	r21, 0x41	; 65
    4896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    489a:	dc 01       	movw	r26, r24
    489c:	cb 01       	movw	r24, r22
    489e:	bc 01       	movw	r22, r24
    48a0:	cd 01       	movw	r24, r26
    48a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48a6:	dc 01       	movw	r26, r24
    48a8:	cb 01       	movw	r24, r22
    48aa:	9e 83       	std	Y+6, r25	; 0x06
    48ac:	8d 83       	std	Y+5, r24	; 0x05
    48ae:	0f c0       	rjmp	.+30     	; 0x48ce <EEPROM_enuWriteData+0x130>
    48b0:	88 ec       	ldi	r24, 0xC8	; 200
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	9c 83       	std	Y+4, r25	; 0x04
    48b6:	8b 83       	std	Y+3, r24	; 0x03
    48b8:	8b 81       	ldd	r24, Y+3	; 0x03
    48ba:	9c 81       	ldd	r25, Y+4	; 0x04
    48bc:	01 97       	sbiw	r24, 0x01	; 1
    48be:	f1 f7       	brne	.-4      	; 0x48bc <EEPROM_enuWriteData+0x11e>
    48c0:	9c 83       	std	Y+4, r25	; 0x04
    48c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c4:	8d 81       	ldd	r24, Y+5	; 0x05
    48c6:	9e 81       	ldd	r25, Y+6	; 0x06
    48c8:	01 97       	sbiw	r24, 0x01	; 1
    48ca:	9e 83       	std	Y+6, r25	; 0x06
    48cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ce:	8d 81       	ldd	r24, Y+5	; 0x05
    48d0:	9e 81       	ldd	r25, Y+6	; 0x06
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	69 f7       	brne	.-38     	; 0x48b0 <EEPROM_enuWriteData+0x112>
    48d6:	14 c0       	rjmp	.+40     	; 0x4900 <EEPROM_enuWriteData+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48d8:	6f 81       	ldd	r22, Y+7	; 0x07
    48da:	78 85       	ldd	r23, Y+8	; 0x08
    48dc:	89 85       	ldd	r24, Y+9	; 0x09
    48de:	9a 85       	ldd	r25, Y+10	; 0x0a
    48e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e4:	dc 01       	movw	r26, r24
    48e6:	cb 01       	movw	r24, r22
    48e8:	9e 83       	std	Y+6, r25	; 0x06
    48ea:	8d 83       	std	Y+5, r24	; 0x05
    48ec:	8d 81       	ldd	r24, Y+5	; 0x05
    48ee:	9e 81       	ldd	r25, Y+6	; 0x06
    48f0:	9a 83       	std	Y+2, r25	; 0x02
    48f2:	89 83       	std	Y+1, r24	; 0x01
    48f4:	89 81       	ldd	r24, Y+1	; 0x01
    48f6:	9a 81       	ldd	r25, Y+2	; 0x02
    48f8:	01 97       	sbiw	r24, 0x01	; 1
    48fa:	f1 f7       	brne	.-4      	; 0x48f8 <EEPROM_enuWriteData+0x15a>
    48fc:	9a 83       	std	Y+2, r25	; 0x02
    48fe:	89 83       	std	Y+1, r24	; 0x01

    }

    // Small delay to ensure data is written
    _delay_ms(10);
    Local_enuErrorState = ERROR_STATUS_OK;
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	88 8b       	std	Y+16, r24	; 0x10
    return Local_enuErrorState;
    4904:	88 89       	ldd	r24, Y+16	; 0x10
}
    4906:	62 96       	adiw	r28, 0x12	; 18
    4908:	0f b6       	in	r0, 0x3f	; 63
    490a:	f8 94       	cli
    490c:	de bf       	out	0x3e, r29	; 62
    490e:	0f be       	out	0x3f, r0	; 63
    4910:	cd bf       	out	0x3d, r28	; 61
    4912:	cf 91       	pop	r28
    4914:	df 91       	pop	r29
    4916:	08 95       	ret

00004918 <EEPROM_enuReadData>:


ErrorStatus_t EEPROM_enuReadData(EEPROM_Input_t* eepromInstance) {
    4918:	df 93       	push	r29
    491a:	cf 93       	push	r28
    491c:	00 d0       	rcall	.+0      	; 0x491e <EEPROM_enuReadData+0x6>
    491e:	00 d0       	rcall	.+0      	; 0x4920 <EEPROM_enuReadData+0x8>
    4920:	cd b7       	in	r28, 0x3d	; 61
    4922:	de b7       	in	r29, 0x3e	; 62
    4924:	9c 83       	std	Y+4, r25	; 0x04
    4926:	8b 83       	std	Y+3, r24	; 0x03
    ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    4928:	1a 82       	std	Y+2, r1	; 0x02

    eepromInstance->data = 0;
    492a:	eb 81       	ldd	r30, Y+3	; 0x03
    492c:	fc 81       	ldd	r31, Y+4	; 0x04
    492e:	11 82       	std	Z+1, r1	; 0x01

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 3) | (eepromInstance->A1 << 2) | (eepromInstance->A0);

	#elif(EEPROM_TYPE == EEPROM_NM24C08 || EEPROM_TYPE == EEPROM_NM24C08F )

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 2) | (eepromInstance->A1 << 1) | (eepromInstance->A0);
    4930:	eb 81       	ldd	r30, Y+3	; 0x03
    4932:	fc 81       	ldd	r31, Y+4	; 0x04
    4934:	82 81       	ldd	r24, Z+2	; 0x02
    4936:	81 70       	andi	r24, 0x01	; 1
    4938:	88 2f       	mov	r24, r24
    493a:	90 e0       	ldi	r25, 0x00	; 0
    493c:	88 0f       	add	r24, r24
    493e:	99 1f       	adc	r25, r25
    4940:	88 0f       	add	r24, r24
    4942:	99 1f       	adc	r25, r25
    4944:	28 2f       	mov	r18, r24
    4946:	20 6a       	ori	r18, 0xA0	; 160
    4948:	eb 81       	ldd	r30, Y+3	; 0x03
    494a:	fc 81       	ldd	r31, Y+4	; 0x04
    494c:	82 81       	ldd	r24, Z+2	; 0x02
    494e:	86 95       	lsr	r24
    4950:	81 70       	andi	r24, 0x01	; 1
    4952:	88 2f       	mov	r24, r24
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	88 0f       	add	r24, r24
    4958:	99 1f       	adc	r25, r25
    495a:	92 2f       	mov	r25, r18
    495c:	98 2b       	or	r25, r24
    495e:	eb 81       	ldd	r30, Y+3	; 0x03
    4960:	fc 81       	ldd	r31, Y+4	; 0x04
    4962:	82 81       	ldd	r24, Z+2	; 0x02
    4964:	86 95       	lsr	r24
    4966:	86 95       	lsr	r24
    4968:	81 70       	andi	r24, 0x01	; 1
    496a:	89 2b       	or	r24, r25
    496c:	89 83       	std	Y+1, r24	; 0x01
	#if( EEPROM_TYPE == EEPROM_NM24C09 || EEPROM_TYPE == EEPROM_NM24C09F )
		uint8_t Local_u8Address = (0xA0) | (EEPROM_A2_STATE << 2);
	#endif

	// Send start condition
    if( TWI_enuStartCondition() == TWI_STATUS_OK){
    496e:	0e 94 8b 08 	call	0x1116	; 0x1116 <TWI_enuStartCondition>
    4972:	81 30       	cpi	r24, 0x01	; 1
    4974:	a9 f4       	brne	.+42     	; 0x49a0 <EEPROM_enuReadData+0x88>

		// Send EEPROM address with write operation
		TWI_enuWriteData(Local_u8Address);
    4976:	89 81       	ldd	r24, Y+1	; 0x01
    4978:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Send memory address within EEPROM
		TWI_enuWriteData(eepromInstance->address);
    497c:	eb 81       	ldd	r30, Y+3	; 0x03
    497e:	fc 81       	ldd	r31, Y+4	; 0x04
    4980:	80 81       	ld	r24, Z
    4982:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Send repeated start condition
		TWI_enuStartCondition();
    4986:	0e 94 8b 08 	call	0x1116	; 0x1116 <TWI_enuStartCondition>

		// Send EEPROM address with read operation
		TWI_enuWriteData(Local_u8Address | TWI_ReadOperation);
    498a:	89 81       	ldd	r24, Y+1	; 0x01
    498c:	81 60       	ori	r24, 0x01	; 1
    498e:	0e 94 1f 09 	call	0x123e	; 0x123e <TWI_enuWriteData>

		// Read data from EEPROM
		TWI_enuReadData(&(eepromInstance->data));
    4992:	8b 81       	ldd	r24, Y+3	; 0x03
    4994:	9c 81       	ldd	r25, Y+4	; 0x04
    4996:	01 96       	adiw	r24, 0x01	; 1
    4998:	0e 94 45 09 	call	0x128a	; 0x128a <TWI_enuReadData>

		// Send stop condition
		TWI_enuStopCondition();
    499c:	0e 94 cb 08 	call	0x1196	; 0x1196 <TWI_enuStopCondition>

    }

    Local_enuErrorState = ERROR_STATUS_OK;
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	8a 83       	std	Y+2, r24	; 0x02
    return Local_enuErrorState;
    49a4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    49a6:	0f 90       	pop	r0
    49a8:	0f 90       	pop	r0
    49aa:	0f 90       	pop	r0
    49ac:	0f 90       	pop	r0
    49ae:	cf 91       	pop	r28
    49b0:	df 91       	pop	r29
    49b2:	08 95       	ret

000049b4 <EEPROM_WriteDataSequence>:



void EEPROM_WriteDataSequence(EEPROM_Input_t* eepromInstance, const uint8_t *dataBuffer, uint8_t dataLength, uint8_t flag, uint8_t startAddress) {
    49b4:	0f 93       	push	r16
    49b6:	df 93       	push	r29
    49b8:	cf 93       	push	r28
    49ba:	cd b7       	in	r28, 0x3d	; 61
    49bc:	de b7       	in	r29, 0x3e	; 62
    49be:	28 97       	sbiw	r28, 0x08	; 8
    49c0:	0f b6       	in	r0, 0x3f	; 63
    49c2:	f8 94       	cli
    49c4:	de bf       	out	0x3e, r29	; 62
    49c6:	0f be       	out	0x3f, r0	; 63
    49c8:	cd bf       	out	0x3d, r28	; 61
    49ca:	9b 83       	std	Y+3, r25	; 0x03
    49cc:	8a 83       	std	Y+2, r24	; 0x02
    49ce:	7d 83       	std	Y+5, r23	; 0x05
    49d0:	6c 83       	std	Y+4, r22	; 0x04
    49d2:	4e 83       	std	Y+6, r20	; 0x06
    49d4:	2f 83       	std	Y+7, r18	; 0x07
    49d6:	08 87       	std	Y+8, r16	; 0x08
    eepromInstance->address = startAddress;  // Set the EEPROM address to the specified start address
    49d8:	ea 81       	ldd	r30, Y+2	; 0x02
    49da:	fb 81       	ldd	r31, Y+3	; 0x03
    49dc:	88 85       	ldd	r24, Y+8	; 0x08
    49de:	80 83       	st	Z, r24

    for(uint8_t i = 0; i < dataLength; i++) {
    49e0:	19 82       	std	Y+1, r1	; 0x01
    49e2:	1a c0       	rjmp	.+52     	; 0x4a18 <EEPROM_WriteDataSequence+0x64>
        eepromInstance->data = dataBuffer[i];
    49e4:	89 81       	ldd	r24, Y+1	; 0x01
    49e6:	28 2f       	mov	r18, r24
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	8c 81       	ldd	r24, Y+4	; 0x04
    49ec:	9d 81       	ldd	r25, Y+5	; 0x05
    49ee:	fc 01       	movw	r30, r24
    49f0:	e2 0f       	add	r30, r18
    49f2:	f3 1f       	adc	r31, r19
    49f4:	80 81       	ld	r24, Z
    49f6:	ea 81       	ldd	r30, Y+2	; 0x02
    49f8:	fb 81       	ldd	r31, Y+3	; 0x03
    49fa:	81 83       	std	Z+1, r24	; 0x01
        EEPROM_enuWriteData(eepromInstance);
    49fc:	8a 81       	ldd	r24, Y+2	; 0x02
    49fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4a00:	0e 94 cf 23 	call	0x479e	; 0x479e <EEPROM_enuWriteData>
        eepromInstance->address++;  // Move to the next address
    4a04:	ea 81       	ldd	r30, Y+2	; 0x02
    4a06:	fb 81       	ldd	r31, Y+3	; 0x03
    4a08:	80 81       	ld	r24, Z
    4a0a:	8f 5f       	subi	r24, 0xFF	; 255
    4a0c:	ea 81       	ldd	r30, Y+2	; 0x02
    4a0e:	fb 81       	ldd	r31, Y+3	; 0x03
    4a10:	80 83       	st	Z, r24


void EEPROM_WriteDataSequence(EEPROM_Input_t* eepromInstance, const uint8_t *dataBuffer, uint8_t dataLength, uint8_t flag, uint8_t startAddress) {
    eepromInstance->address = startAddress;  // Set the EEPROM address to the specified start address

    for(uint8_t i = 0; i < dataLength; i++) {
    4a12:	89 81       	ldd	r24, Y+1	; 0x01
    4a14:	8f 5f       	subi	r24, 0xFF	; 255
    4a16:	89 83       	std	Y+1, r24	; 0x01
    4a18:	99 81       	ldd	r25, Y+1	; 0x01
    4a1a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a1c:	98 17       	cp	r25, r24
    4a1e:	10 f3       	brcs	.-60     	; 0x49e4 <EEPROM_WriteDataSequence+0x30>
        eepromInstance->data = dataBuffer[i];
        EEPROM_enuWriteData(eepromInstance);
        eepromInstance->address++;  // Move to the next address
    }

    eepromInstance->data = flag;  // Write the flag to indicate the end of the data
    4a20:	ea 81       	ldd	r30, Y+2	; 0x02
    4a22:	fb 81       	ldd	r31, Y+3	; 0x03
    4a24:	8f 81       	ldd	r24, Y+7	; 0x07
    4a26:	81 83       	std	Z+1, r24	; 0x01
    EEPROM_enuWriteData(eepromInstance);
    4a28:	8a 81       	ldd	r24, Y+2	; 0x02
    4a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a2c:	0e 94 cf 23 	call	0x479e	; 0x479e <EEPROM_enuWriteData>
}
    4a30:	28 96       	adiw	r28, 0x08	; 8
    4a32:	0f b6       	in	r0, 0x3f	; 63
    4a34:	f8 94       	cli
    4a36:	de bf       	out	0x3e, r29	; 62
    4a38:	0f be       	out	0x3f, r0	; 63
    4a3a:	cd bf       	out	0x3d, r28	; 61
    4a3c:	cf 91       	pop	r28
    4a3e:	df 91       	pop	r29
    4a40:	0f 91       	pop	r16
    4a42:	08 95       	ret

00004a44 <EEPROM_SearchForFlag>:

uint8_t EEPROM_SearchForFlag(EEPROM_Input_t eepromInstance, uint8_t flag, uint8_t startAddress, uint8_t dataLength){
    4a44:	0f 93       	push	r16
    4a46:	df 93       	push	r29
    4a48:	cf 93       	push	r28
    4a4a:	cd b7       	in	r28, 0x3d	; 61
    4a4c:	de b7       	in	r29, 0x3e	; 62
    4a4e:	27 97       	sbiw	r28, 0x07	; 7
    4a50:	0f b6       	in	r0, 0x3f	; 63
    4a52:	f8 94       	cli
    4a54:	de bf       	out	0x3e, r29	; 62
    4a56:	0f be       	out	0x3f, r0	; 63
    4a58:	cd bf       	out	0x3d, r28	; 61
    4a5a:	69 83       	std	Y+1, r22	; 0x01
    4a5c:	7a 83       	std	Y+2, r23	; 0x02
    4a5e:	8b 83       	std	Y+3, r24	; 0x03
    4a60:	4c 83       	std	Y+4, r20	; 0x04
    4a62:	2d 83       	std	Y+5, r18	; 0x05
    4a64:	0e 83       	std	Y+6, r16	; 0x06

    // Set address to start searching from
	eepromInstance.address = startAddress + dataLength;
    4a66:	9d 81       	ldd	r25, Y+5	; 0x05
    4a68:	8e 81       	ldd	r24, Y+6	; 0x06
    4a6a:	89 0f       	add	r24, r25
    4a6c:	89 83       	std	Y+1, r24	; 0x01

    // Read the data at the address where the flag is expected
    EEPROM_enuReadData(&eepromInstance);
    4a6e:	ce 01       	movw	r24, r28
    4a70:	01 96       	adiw	r24, 0x01	; 1
    4a72:	0e 94 8c 24 	call	0x4918	; 0x4918 <EEPROM_enuReadData>

    // Check if the read data matches the flag
    if (eepromInstance.data == flag) {
    4a76:	9a 81       	ldd	r25, Y+2	; 0x02
    4a78:	8c 81       	ldd	r24, Y+4	; 0x04
    4a7a:	98 17       	cp	r25, r24
    4a7c:	19 f4       	brne	.+6      	; 0x4a84 <EEPROM_SearchForFlag+0x40>
        return 1;  // Flag found
    4a7e:	81 e0       	ldi	r24, 0x01	; 1
    4a80:	8f 83       	std	Y+7, r24	; 0x07
    4a82:	01 c0       	rjmp	.+2      	; 0x4a86 <EEPROM_SearchForFlag+0x42>
    }

    return 0;  // Flag not found
    4a84:	1f 82       	std	Y+7, r1	; 0x07
    4a86:	8f 81       	ldd	r24, Y+7	; 0x07

}
    4a88:	27 96       	adiw	r28, 0x07	; 7
    4a8a:	0f b6       	in	r0, 0x3f	; 63
    4a8c:	f8 94       	cli
    4a8e:	de bf       	out	0x3e, r29	; 62
    4a90:	0f be       	out	0x3f, r0	; 63
    4a92:	cd bf       	out	0x3d, r28	; 61
    4a94:	cf 91       	pop	r28
    4a96:	df 91       	pop	r29
    4a98:	0f 91       	pop	r16
    4a9a:	08 95       	ret

00004a9c <EEPROM_Format>:


void EEPROM_Format(EEPROM_Input_t* eepromInstance) {
    4a9c:	df 93       	push	r29
    4a9e:	cf 93       	push	r28
    4aa0:	cd b7       	in	r28, 0x3d	; 61
    4aa2:	de b7       	in	r29, 0x3e	; 62
    4aa4:	28 97       	sbiw	r28, 0x08	; 8
    4aa6:	0f b6       	in	r0, 0x3f	; 63
    4aa8:	f8 94       	cli
    4aaa:	de bf       	out	0x3e, r29	; 62
    4aac:	0f be       	out	0x3f, r0	; 63
    4aae:	cd bf       	out	0x3d, r28	; 61
    4ab0:	98 87       	std	Y+8, r25	; 0x08
    4ab2:	8f 83       	std	Y+7, r24	; 0x07
    // Define the starting address and the end address
    uint16_t startAddress = 0x00; // Starting address of EEPROM
    4ab4:	1e 82       	std	Y+6, r1	; 0x06
    4ab6:	1d 82       	std	Y+5, r1	; 0x05
    uint16_t endAddress = 0xFF;   // Ending address of EEPROM (example)
    4ab8:	8f ef       	ldi	r24, 0xFF	; 255
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	9c 83       	std	Y+4, r25	; 0x04
    4abe:	8b 83       	std	Y+3, r24	; 0x03

    // Set the EEPROM address to the start address
    eepromInstance->address = startAddress;
    4ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ac2:	ef 81       	ldd	r30, Y+7	; 0x07
    4ac4:	f8 85       	ldd	r31, Y+8	; 0x08
    4ac6:	80 83       	st	Z, r24

    // Write the default value (e.g., 0x00) to each address in EEPROM
    for (uint16_t address = startAddress; address <= endAddress; address++) {
    4ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    4aca:	9e 81       	ldd	r25, Y+6	; 0x06
    4acc:	9a 83       	std	Y+2, r25	; 0x02
    4ace:	89 83       	std	Y+1, r24	; 0x01
    4ad0:	13 c0       	rjmp	.+38     	; 0x4af8 <EEPROM_Format+0x5c>
        eepromInstance->data = 0x00;  // Default value
    4ad2:	ef 81       	ldd	r30, Y+7	; 0x07
    4ad4:	f8 85       	ldd	r31, Y+8	; 0x08
    4ad6:	11 82       	std	Z+1, r1	; 0x01
        EEPROM_enuWriteData(eepromInstance);  // Write to EEPROM
    4ad8:	8f 81       	ldd	r24, Y+7	; 0x07
    4ada:	98 85       	ldd	r25, Y+8	; 0x08
    4adc:	0e 94 cf 23 	call	0x479e	; 0x479e <EEPROM_enuWriteData>
        eepromInstance->address++;  // Move to the next address
    4ae0:	ef 81       	ldd	r30, Y+7	; 0x07
    4ae2:	f8 85       	ldd	r31, Y+8	; 0x08
    4ae4:	80 81       	ld	r24, Z
    4ae6:	8f 5f       	subi	r24, 0xFF	; 255
    4ae8:	ef 81       	ldd	r30, Y+7	; 0x07
    4aea:	f8 85       	ldd	r31, Y+8	; 0x08
    4aec:	80 83       	st	Z, r24

    // Set the EEPROM address to the start address
    eepromInstance->address = startAddress;

    // Write the default value (e.g., 0x00) to each address in EEPROM
    for (uint16_t address = startAddress; address <= endAddress; address++) {
    4aee:	89 81       	ldd	r24, Y+1	; 0x01
    4af0:	9a 81       	ldd	r25, Y+2	; 0x02
    4af2:	01 96       	adiw	r24, 0x01	; 1
    4af4:	9a 83       	std	Y+2, r25	; 0x02
    4af6:	89 83       	std	Y+1, r24	; 0x01
    4af8:	29 81       	ldd	r18, Y+1	; 0x01
    4afa:	3a 81       	ldd	r19, Y+2	; 0x02
    4afc:	8b 81       	ldd	r24, Y+3	; 0x03
    4afe:	9c 81       	ldd	r25, Y+4	; 0x04
    4b00:	82 17       	cp	r24, r18
    4b02:	93 07       	cpc	r25, r19
    4b04:	30 f7       	brcc	.-52     	; 0x4ad2 <EEPROM_Format+0x36>
        eepromInstance->data = 0x00;  // Default value
        EEPROM_enuWriteData(eepromInstance);  // Write to EEPROM
        eepromInstance->address++;  // Move to the next address
    }
}
    4b06:	28 96       	adiw	r28, 0x08	; 8
    4b08:	0f b6       	in	r0, 0x3f	; 63
    4b0a:	f8 94       	cli
    4b0c:	de bf       	out	0x3e, r29	; 62
    4b0e:	0f be       	out	0x3f, r0	; 63
    4b10:	cd bf       	out	0x3d, r28	; 61
    4b12:	cf 91       	pop	r28
    4b14:	df 91       	pop	r29
    4b16:	08 95       	ret

00004b18 <Buzzer_voidInit>:
#include "../../MCAL/DIO/DIO_interface.h"
/****************************************************************/



void Buzzer_voidInit(Buzzer_t *Copy_Buzzer){
    4b18:	df 93       	push	r29
    4b1a:	cf 93       	push	r28
    4b1c:	00 d0       	rcall	.+0      	; 0x4b1e <Buzzer_voidInit+0x6>
    4b1e:	cd b7       	in	r28, 0x3d	; 61
    4b20:	de b7       	in	r29, 0x3e	; 62
    4b22:	9a 83       	std	Y+2, r25	; 0x02
    4b24:	89 83       	std	Y+1, r24	; 0x01
	 DIO_enuSetPinDirection(Copy_Buzzer->PortID, Copy_Buzzer->PortID, DIO_u8OUTPUT);
    4b26:	e9 81       	ldd	r30, Y+1	; 0x01
    4b28:	fa 81       	ldd	r31, Y+2	; 0x02
    4b2a:	80 81       	ld	r24, Z
    4b2c:	e9 81       	ldd	r30, Y+1	; 0x01
    4b2e:	fa 81       	ldd	r31, Y+2	; 0x02
    4b30:	90 81       	ld	r25, Z
    4b32:	69 2f       	mov	r22, r25
    4b34:	41 e0       	ldi	r20, 0x01	; 1
    4b36:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <DIO_enuSetPinDirection>
}
    4b3a:	0f 90       	pop	r0
    4b3c:	0f 90       	pop	r0
    4b3e:	cf 91       	pop	r28
    4b40:	df 91       	pop	r29
    4b42:	08 95       	ret

00004b44 <Buzzer_voidON>:

void Buzzer_voidON(Buzzer_t *Copy_Buzzer){
    4b44:	df 93       	push	r29
    4b46:	cf 93       	push	r28
    4b48:	00 d0       	rcall	.+0      	; 0x4b4a <Buzzer_voidON+0x6>
    4b4a:	cd b7       	in	r28, 0x3d	; 61
    4b4c:	de b7       	in	r29, 0x3e	; 62
    4b4e:	9a 83       	std	Y+2, r25	; 0x02
    4b50:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID, DIO_u8HIGH);
    4b52:	e9 81       	ldd	r30, Y+1	; 0x01
    4b54:	fa 81       	ldd	r31, Y+2	; 0x02
    4b56:	80 81       	ld	r24, Z
    4b58:	e9 81       	ldd	r30, Y+1	; 0x01
    4b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    4b5c:	91 81       	ldd	r25, Z+1	; 0x01
    4b5e:	69 2f       	mov	r22, r25
    4b60:	41 e0       	ldi	r20, 0x01	; 1
    4b62:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
}
    4b66:	0f 90       	pop	r0
    4b68:	0f 90       	pop	r0
    4b6a:	cf 91       	pop	r28
    4b6c:	df 91       	pop	r29
    4b6e:	08 95       	ret

00004b70 <Buzzer_voidOFF>:

void Buzzer_voidOFF(Buzzer_t *Copy_Buzzer){
    4b70:	df 93       	push	r29
    4b72:	cf 93       	push	r28
    4b74:	00 d0       	rcall	.+0      	; 0x4b76 <Buzzer_voidOFF+0x6>
    4b76:	cd b7       	in	r28, 0x3d	; 61
    4b78:	de b7       	in	r29, 0x3e	; 62
    4b7a:	9a 83       	std	Y+2, r25	; 0x02
    4b7c:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID, DIO_u8LOW);
    4b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    4b80:	fa 81       	ldd	r31, Y+2	; 0x02
    4b82:	80 81       	ld	r24, Z
    4b84:	e9 81       	ldd	r30, Y+1	; 0x01
    4b86:	fa 81       	ldd	r31, Y+2	; 0x02
    4b88:	91 81       	ldd	r25, Z+1	; 0x01
    4b8a:	69 2f       	mov	r22, r25
    4b8c:	40 e0       	ldi	r20, 0x00	; 0
    4b8e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <DIO_enuSetPinValue>
}
    4b92:	0f 90       	pop	r0
    4b94:	0f 90       	pop	r0
    4b96:	cf 91       	pop	r28
    4b98:	df 91       	pop	r29
    4b9a:	08 95       	ret

00004b9c <Buzzer_voidTOGGLE>:

void Buzzer_voidTOGGLE(Buzzer_t *Copy_Buzzer){
    4b9c:	df 93       	push	r29
    4b9e:	cf 93       	push	r28
    4ba0:	00 d0       	rcall	.+0      	; 0x4ba2 <Buzzer_voidTOGGLE+0x6>
    4ba2:	cd b7       	in	r28, 0x3d	; 61
    4ba4:	de b7       	in	r29, 0x3e	; 62
    4ba6:	9a 83       	std	Y+2, r25	; 0x02
    4ba8:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuTogglePinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID);
    4baa:	e9 81       	ldd	r30, Y+1	; 0x01
    4bac:	fa 81       	ldd	r31, Y+2	; 0x02
    4bae:	80 81       	ld	r24, Z
    4bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    4bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    4bb4:	91 81       	ldd	r25, Z+1	; 0x01
    4bb6:	69 2f       	mov	r22, r25
    4bb8:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <DIO_enuTogglePinValue>
}
    4bbc:	0f 90       	pop	r0
    4bbe:	0f 90       	pop	r0
    4bc0:	cf 91       	pop	r28
    4bc2:	df 91       	pop	r29
    4bc4:	08 95       	ret

00004bc6 <main>:

#include "HAL/LCD/LCD_HAL_interface.h"
#include "HAL/ultraSonic/ultraSonic_interface.h"
#include <util/delay.h>

int main(void) {
    4bc6:	df 93       	push	r29
    4bc8:	cf 93       	push	r28
    4bca:	cd b7       	in	r28, 0x3d	; 61
    4bcc:	de b7       	in	r29, 0x3e	; 62
    4bce:	64 97       	sbiw	r28, 0x14	; 20
    4bd0:	0f b6       	in	r0, 0x3f	; 63
    4bd2:	f8 94       	cli
    4bd4:	de bf       	out	0x3e, r29	; 62
    4bd6:	0f be       	out	0x3f, r0	; 63
    4bd8:	cd bf       	out	0x3d, r28	; 61

	LCD_enuInit();
    4bda:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <LCD_enuInit>



	ultraSonic_t ultraSonic_1;
	ultraSonic_1.ECHO_PORT = DIO_u8PortD;
    4bde:	83 e0       	ldi	r24, 0x03	; 3
    4be0:	8f 87       	std	Y+15, r24	; 0x0f
	ultraSonic_1.ECHO_PIN = DIO_u8PIN6;
    4be2:	86 e0       	ldi	r24, 0x06	; 6
    4be4:	88 8b       	std	Y+16, r24	; 0x10

	ultraSonic_1.TRIG_PORT = DIO_u8PortD;
    4be6:	83 e0       	ldi	r24, 0x03	; 3
    4be8:	89 8b       	std	Y+17, r24	; 0x11
	ultraSonic_1.TRIG_PIN = DIO_u8PIN7;
    4bea:	87 e0       	ldi	r24, 0x07	; 7
    4bec:	8a 8b       	std	Y+18, r24	; 0x12
	ultraSonic_enuInit(ultraSonic_1);
    4bee:	4f 85       	ldd	r20, Y+15	; 0x0f
    4bf0:	58 89       	ldd	r21, Y+16	; 0x10
    4bf2:	69 89       	ldd	r22, Y+17	; 0x11
    4bf4:	7a 89       	ldd	r23, Y+18	; 0x12
    4bf6:	8b 89       	ldd	r24, Y+19	; 0x13
    4bf8:	9c 89       	ldd	r25, Y+20	; 0x14
    4bfa:	0e 94 86 1b 	call	0x370c	; 0x370c <ultraSonic_enuInit>


    while (1) {
        // Main loop

    	ultraSonic_u16GetDistance(&ultraSonic_1);
    4bfe:	ce 01       	movw	r24, r28
    4c00:	0f 96       	adiw	r24, 0x0f	; 15
    4c02:	0e 94 be 1b 	call	0x377c	; 0x377c <ultraSonic_u16GetDistance>


        LCD_enuClearDisplay();
    4c06:	81 e0       	ldi	r24, 0x01	; 1
    4c08:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <LCD_enuSendCommand>
    	LCD_enuIntegerToString(ultraSonic_1.measuredDistance_InCm, 10);
    4c0c:	8b 89       	ldd	r24, Y+19	; 0x13
    4c0e:	9c 89       	ldd	r25, Y+20	; 0x14
    4c10:	cc 01       	movw	r24, r24
    4c12:	a0 e0       	ldi	r26, 0x00	; 0
    4c14:	b0 e0       	ldi	r27, 0x00	; 0
    4c16:	bc 01       	movw	r22, r24
    4c18:	cd 01       	movw	r24, r26
    4c1a:	4a e0       	ldi	r20, 0x0A	; 10
    4c1c:	0e 94 41 22 	call	0x4482	; 0x4482 <LCD_enuIntegerToString>
    4c20:	80 e0       	ldi	r24, 0x00	; 0
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	aa e7       	ldi	r26, 0x7A	; 122
    4c26:	b4 e4       	ldi	r27, 0x44	; 68
    4c28:	8b 87       	std	Y+11, r24	; 0x0b
    4c2a:	9c 87       	std	Y+12, r25	; 0x0c
    4c2c:	ad 87       	std	Y+13, r26	; 0x0d
    4c2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c38:	20 e0       	ldi	r18, 0x00	; 0
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	4a e7       	ldi	r20, 0x7A	; 122
    4c3e:	55 e4       	ldi	r21, 0x45	; 69
    4c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c44:	dc 01       	movw	r26, r24
    4c46:	cb 01       	movw	r24, r22
    4c48:	8f 83       	std	Y+7, r24	; 0x07
    4c4a:	98 87       	std	Y+8, r25	; 0x08
    4c4c:	a9 87       	std	Y+9, r26	; 0x09
    4c4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c50:	6f 81       	ldd	r22, Y+7	; 0x07
    4c52:	78 85       	ldd	r23, Y+8	; 0x08
    4c54:	89 85       	ldd	r24, Y+9	; 0x09
    4c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c58:	20 e0       	ldi	r18, 0x00	; 0
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	40 e8       	ldi	r20, 0x80	; 128
    4c5e:	5f e3       	ldi	r21, 0x3F	; 63
    4c60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c64:	88 23       	and	r24, r24
    4c66:	2c f4       	brge	.+10     	; 0x4c72 <main+0xac>
		__ticks = 1;
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	9e 83       	std	Y+6, r25	; 0x06
    4c6e:	8d 83       	std	Y+5, r24	; 0x05
    4c70:	3f c0       	rjmp	.+126    	; 0x4cf0 <main+0x12a>
	else if (__tmp > 65535)
    4c72:	6f 81       	ldd	r22, Y+7	; 0x07
    4c74:	78 85       	ldd	r23, Y+8	; 0x08
    4c76:	89 85       	ldd	r24, Y+9	; 0x09
    4c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c7a:	20 e0       	ldi	r18, 0x00	; 0
    4c7c:	3f ef       	ldi	r19, 0xFF	; 255
    4c7e:	4f e7       	ldi	r20, 0x7F	; 127
    4c80:	57 e4       	ldi	r21, 0x47	; 71
    4c82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c86:	18 16       	cp	r1, r24
    4c88:	4c f5       	brge	.+82     	; 0x4cdc <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c90:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c92:	20 e0       	ldi	r18, 0x00	; 0
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	40 e2       	ldi	r20, 0x20	; 32
    4c98:	51 e4       	ldi	r21, 0x41	; 65
    4c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c9e:	dc 01       	movw	r26, r24
    4ca0:	cb 01       	movw	r24, r22
    4ca2:	bc 01       	movw	r22, r24
    4ca4:	cd 01       	movw	r24, r26
    4ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	9e 83       	std	Y+6, r25	; 0x06
    4cb0:	8d 83       	std	Y+5, r24	; 0x05
    4cb2:	0f c0       	rjmp	.+30     	; 0x4cd2 <main+0x10c>
    4cb4:	80 e9       	ldi	r24, 0x90	; 144
    4cb6:	91 e0       	ldi	r25, 0x01	; 1
    4cb8:	9c 83       	std	Y+4, r25	; 0x04
    4cba:	8b 83       	std	Y+3, r24	; 0x03
    4cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    4cc0:	01 97       	sbiw	r24, 0x01	; 1
    4cc2:	f1 f7       	brne	.-4      	; 0x4cc0 <main+0xfa>
    4cc4:	9c 83       	std	Y+4, r25	; 0x04
    4cc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cca:	9e 81       	ldd	r25, Y+6	; 0x06
    4ccc:	01 97       	sbiw	r24, 0x01	; 1
    4cce:	9e 83       	std	Y+6, r25	; 0x06
    4cd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd6:	00 97       	sbiw	r24, 0x00	; 0
    4cd8:	69 f7       	brne	.-38     	; 0x4cb4 <main+0xee>
    4cda:	91 cf       	rjmp	.-222    	; 0x4bfe <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    4cde:	78 85       	ldd	r23, Y+8	; 0x08
    4ce0:	89 85       	ldd	r24, Y+9	; 0x09
    4ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce8:	dc 01       	movw	r26, r24
    4cea:	cb 01       	movw	r24, r22
    4cec:	9e 83       	std	Y+6, r25	; 0x06
    4cee:	8d 83       	std	Y+5, r24	; 0x05
    4cf0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cf2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cf4:	9a 83       	std	Y+2, r25	; 0x02
    4cf6:	89 83       	std	Y+1, r24	; 0x01
    4cf8:	89 81       	ldd	r24, Y+1	; 0x01
    4cfa:	9a 81       	ldd	r25, Y+2	; 0x02
    4cfc:	01 97       	sbiw	r24, 0x01	; 1
    4cfe:	f1 f7       	brne	.-4      	; 0x4cfc <main+0x136>
    4d00:	9a 83       	std	Y+2, r25	; 0x02
    4d02:	89 83       	std	Y+1, r24	; 0x01
    4d04:	7c cf       	rjmp	.-264    	; 0x4bfe <main+0x38>

00004d06 <__mulsi3>:
    4d06:	62 9f       	mul	r22, r18
    4d08:	d0 01       	movw	r26, r0
    4d0a:	73 9f       	mul	r23, r19
    4d0c:	f0 01       	movw	r30, r0
    4d0e:	82 9f       	mul	r24, r18
    4d10:	e0 0d       	add	r30, r0
    4d12:	f1 1d       	adc	r31, r1
    4d14:	64 9f       	mul	r22, r20
    4d16:	e0 0d       	add	r30, r0
    4d18:	f1 1d       	adc	r31, r1
    4d1a:	92 9f       	mul	r25, r18
    4d1c:	f0 0d       	add	r31, r0
    4d1e:	83 9f       	mul	r24, r19
    4d20:	f0 0d       	add	r31, r0
    4d22:	74 9f       	mul	r23, r20
    4d24:	f0 0d       	add	r31, r0
    4d26:	65 9f       	mul	r22, r21
    4d28:	f0 0d       	add	r31, r0
    4d2a:	99 27       	eor	r25, r25
    4d2c:	72 9f       	mul	r23, r18
    4d2e:	b0 0d       	add	r27, r0
    4d30:	e1 1d       	adc	r30, r1
    4d32:	f9 1f       	adc	r31, r25
    4d34:	63 9f       	mul	r22, r19
    4d36:	b0 0d       	add	r27, r0
    4d38:	e1 1d       	adc	r30, r1
    4d3a:	f9 1f       	adc	r31, r25
    4d3c:	bd 01       	movw	r22, r26
    4d3e:	cf 01       	movw	r24, r30
    4d40:	11 24       	eor	r1, r1
    4d42:	08 95       	ret

00004d44 <__udivmodhi4>:
    4d44:	aa 1b       	sub	r26, r26
    4d46:	bb 1b       	sub	r27, r27
    4d48:	51 e1       	ldi	r21, 0x11	; 17
    4d4a:	07 c0       	rjmp	.+14     	; 0x4d5a <__udivmodhi4_ep>

00004d4c <__udivmodhi4_loop>:
    4d4c:	aa 1f       	adc	r26, r26
    4d4e:	bb 1f       	adc	r27, r27
    4d50:	a6 17       	cp	r26, r22
    4d52:	b7 07       	cpc	r27, r23
    4d54:	10 f0       	brcs	.+4      	; 0x4d5a <__udivmodhi4_ep>
    4d56:	a6 1b       	sub	r26, r22
    4d58:	b7 0b       	sbc	r27, r23

00004d5a <__udivmodhi4_ep>:
    4d5a:	88 1f       	adc	r24, r24
    4d5c:	99 1f       	adc	r25, r25
    4d5e:	5a 95       	dec	r21
    4d60:	a9 f7       	brne	.-22     	; 0x4d4c <__udivmodhi4_loop>
    4d62:	80 95       	com	r24
    4d64:	90 95       	com	r25
    4d66:	bc 01       	movw	r22, r24
    4d68:	cd 01       	movw	r24, r26
    4d6a:	08 95       	ret

00004d6c <__udivmodsi4>:
    4d6c:	a1 e2       	ldi	r26, 0x21	; 33
    4d6e:	1a 2e       	mov	r1, r26
    4d70:	aa 1b       	sub	r26, r26
    4d72:	bb 1b       	sub	r27, r27
    4d74:	fd 01       	movw	r30, r26
    4d76:	0d c0       	rjmp	.+26     	; 0x4d92 <__udivmodsi4_ep>

00004d78 <__udivmodsi4_loop>:
    4d78:	aa 1f       	adc	r26, r26
    4d7a:	bb 1f       	adc	r27, r27
    4d7c:	ee 1f       	adc	r30, r30
    4d7e:	ff 1f       	adc	r31, r31
    4d80:	a2 17       	cp	r26, r18
    4d82:	b3 07       	cpc	r27, r19
    4d84:	e4 07       	cpc	r30, r20
    4d86:	f5 07       	cpc	r31, r21
    4d88:	20 f0       	brcs	.+8      	; 0x4d92 <__udivmodsi4_ep>
    4d8a:	a2 1b       	sub	r26, r18
    4d8c:	b3 0b       	sbc	r27, r19
    4d8e:	e4 0b       	sbc	r30, r20
    4d90:	f5 0b       	sbc	r31, r21

00004d92 <__udivmodsi4_ep>:
    4d92:	66 1f       	adc	r22, r22
    4d94:	77 1f       	adc	r23, r23
    4d96:	88 1f       	adc	r24, r24
    4d98:	99 1f       	adc	r25, r25
    4d9a:	1a 94       	dec	r1
    4d9c:	69 f7       	brne	.-38     	; 0x4d78 <__udivmodsi4_loop>
    4d9e:	60 95       	com	r22
    4da0:	70 95       	com	r23
    4da2:	80 95       	com	r24
    4da4:	90 95       	com	r25
    4da6:	9b 01       	movw	r18, r22
    4da8:	ac 01       	movw	r20, r24
    4daa:	bd 01       	movw	r22, r26
    4dac:	cf 01       	movw	r24, r30
    4dae:	08 95       	ret

00004db0 <__divmodsi4>:
    4db0:	97 fb       	bst	r25, 7
    4db2:	09 2e       	mov	r0, r25
    4db4:	05 26       	eor	r0, r21
    4db6:	0e d0       	rcall	.+28     	; 0x4dd4 <__divmodsi4_neg1>
    4db8:	57 fd       	sbrc	r21, 7
    4dba:	04 d0       	rcall	.+8      	; 0x4dc4 <__divmodsi4_neg2>
    4dbc:	d7 df       	rcall	.-82     	; 0x4d6c <__udivmodsi4>
    4dbe:	0a d0       	rcall	.+20     	; 0x4dd4 <__divmodsi4_neg1>
    4dc0:	00 1c       	adc	r0, r0
    4dc2:	38 f4       	brcc	.+14     	; 0x4dd2 <__divmodsi4_exit>

00004dc4 <__divmodsi4_neg2>:
    4dc4:	50 95       	com	r21
    4dc6:	40 95       	com	r20
    4dc8:	30 95       	com	r19
    4dca:	21 95       	neg	r18
    4dcc:	3f 4f       	sbci	r19, 0xFF	; 255
    4dce:	4f 4f       	sbci	r20, 0xFF	; 255
    4dd0:	5f 4f       	sbci	r21, 0xFF	; 255

00004dd2 <__divmodsi4_exit>:
    4dd2:	08 95       	ret

00004dd4 <__divmodsi4_neg1>:
    4dd4:	f6 f7       	brtc	.-4      	; 0x4dd2 <__divmodsi4_exit>
    4dd6:	90 95       	com	r25
    4dd8:	80 95       	com	r24
    4dda:	70 95       	com	r23
    4ddc:	61 95       	neg	r22
    4dde:	7f 4f       	sbci	r23, 0xFF	; 255
    4de0:	8f 4f       	sbci	r24, 0xFF	; 255
    4de2:	9f 4f       	sbci	r25, 0xFF	; 255
    4de4:	08 95       	ret

00004de6 <__prologue_saves__>:
    4de6:	2f 92       	push	r2
    4de8:	3f 92       	push	r3
    4dea:	4f 92       	push	r4
    4dec:	5f 92       	push	r5
    4dee:	6f 92       	push	r6
    4df0:	7f 92       	push	r7
    4df2:	8f 92       	push	r8
    4df4:	9f 92       	push	r9
    4df6:	af 92       	push	r10
    4df8:	bf 92       	push	r11
    4dfa:	cf 92       	push	r12
    4dfc:	df 92       	push	r13
    4dfe:	ef 92       	push	r14
    4e00:	ff 92       	push	r15
    4e02:	0f 93       	push	r16
    4e04:	1f 93       	push	r17
    4e06:	cf 93       	push	r28
    4e08:	df 93       	push	r29
    4e0a:	cd b7       	in	r28, 0x3d	; 61
    4e0c:	de b7       	in	r29, 0x3e	; 62
    4e0e:	ca 1b       	sub	r28, r26
    4e10:	db 0b       	sbc	r29, r27
    4e12:	0f b6       	in	r0, 0x3f	; 63
    4e14:	f8 94       	cli
    4e16:	de bf       	out	0x3e, r29	; 62
    4e18:	0f be       	out	0x3f, r0	; 63
    4e1a:	cd bf       	out	0x3d, r28	; 61
    4e1c:	09 94       	ijmp

00004e1e <__epilogue_restores__>:
    4e1e:	2a 88       	ldd	r2, Y+18	; 0x12
    4e20:	39 88       	ldd	r3, Y+17	; 0x11
    4e22:	48 88       	ldd	r4, Y+16	; 0x10
    4e24:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e26:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e28:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e2a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e2c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e2e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e30:	b9 84       	ldd	r11, Y+9	; 0x09
    4e32:	c8 84       	ldd	r12, Y+8	; 0x08
    4e34:	df 80       	ldd	r13, Y+7	; 0x07
    4e36:	ee 80       	ldd	r14, Y+6	; 0x06
    4e38:	fd 80       	ldd	r15, Y+5	; 0x05
    4e3a:	0c 81       	ldd	r16, Y+4	; 0x04
    4e3c:	1b 81       	ldd	r17, Y+3	; 0x03
    4e3e:	aa 81       	ldd	r26, Y+2	; 0x02
    4e40:	b9 81       	ldd	r27, Y+1	; 0x01
    4e42:	ce 0f       	add	r28, r30
    4e44:	d1 1d       	adc	r29, r1
    4e46:	0f b6       	in	r0, 0x3f	; 63
    4e48:	f8 94       	cli
    4e4a:	de bf       	out	0x3e, r29	; 62
    4e4c:	0f be       	out	0x3f, r0	; 63
    4e4e:	cd bf       	out	0x3d, r28	; 61
    4e50:	ed 01       	movw	r28, r26
    4e52:	08 95       	ret

00004e54 <_exit>:
    4e54:	f8 94       	cli

00004e56 <__stop_program>:
    4e56:	ff cf       	rjmp	.-2      	; 0x4e56 <__stop_program>
