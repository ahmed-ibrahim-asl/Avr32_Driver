
Avr32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  00004386  0000441a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080017e  0080017e  00004538  2**0
                  ALLOC
  3 .stab         00005754  00000000  00000000  00004538  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002cc2  00000000  00000000  00009c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000c94e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000caee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000cce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f0eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00010471  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011648  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011808  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001246c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__vector_1>
       8:	0c 94 c4 13 	jmp	0x2788	; 0x2788 <__vector_2>
       c:	0c 94 f7 13 	jmp	0x27ee	; 0x27ee <__vector_3>
      10:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__vector_4>
      14:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__vector_9>
      28:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__vector_10>
      2c:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 6d 19 	jmp	0x32da	; 0x32da <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 10 21 	call	0x4220	; 0x4220 <main>
      8a:	0c 94 c1 21 	jmp	0x4382	; 0x4382 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 21 	jmp	0x4314	; 0x4314 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 21 	jmp	0x432c	; 0x432c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 21 	jmp	0x432c	; 0x432c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 21 	jmp	0x4314	; 0x4314 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 21 	jmp	0x4324	; 0x4324 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ae 21 	jmp	0x435c	; 0x435c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 96 21 	jmp	0x432c	; 0x432c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 96 21 	jmp	0x432c	; 0x432c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 96 21 	jmp	0x432c	; 0x432c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b2 21 	jmp	0x4364	; 0x4364 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 92 21 	jmp	0x4324	; 0x4324 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ae 21 	jmp	0x435c	; 0x435c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_vidInit>:
#include "UART_priv.h"
#include "UART_config.h"
/************************************************************************************/


void UART_vidInit(uint16 copy_u8UART_BaudRate){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_vidInit+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01


	/********************** Setting  Baud Rate **********************/
	UART_setBaudRate(copy_u8UART_BaudRate);
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	0e 94 19 08 	call	0x1032	; 0x1032 <UART_setBaudRate>
	/***************************************************************/
    SET_BIT(UCSRC_REG, UCSRC_URSEL);
     e44:	a0 e4       	ldi	r26, 0x40	; 64
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e0 e4       	ldi	r30, 0x40	; 64
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	80 68       	ori	r24, 0x80	; 128
     e50:	8c 93       	st	X, r24


	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)

		CLR_BIT(UCSRC_REG, UCSRC_UMSEL);
     e52:	a0 e4       	ldi	r26, 0x40	; 64
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e0 e4       	ldi	r30, 0x40	; 64
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7b       	andi	r24, 0xBF	; 191
     e5e:	8c 93       	st	X, r24

		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)
			CLR_BIT(UCSRA_REG, UCSRA_U2X);
     e60:	ab e2       	ldi	r26, 0x2B	; 43
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8d 7f       	andi	r24, 0xFD	; 253
     e6c:	8c 93       	st	X, r24
			SET_BIT(UCSRC_REG, UCSRC_UMSEL);
	#endif


	#if(UART_MPCM_OPERATION == UART_SINGLE_MODE)
			CLR_BIT(UCSRA_REG, UCSRA_MPCM);
     e6e:	ab e2       	ldi	r26, 0x2B	; 43
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	eb e2       	ldi	r30, 0x2B	; 43
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8e 7f       	andi	r24, 0xFE	; 254
     e7a:	8c 93       	st	X, r24
			SET_BIT(UCSRA_REG, UCSRA_MPCM);
	#endif


	// Receiver Enable
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
     e7c:	aa e2       	ldi	r26, 0x2A	; 42
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ea e2       	ldi	r30, 0x2A	; 42
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 61       	ori	r24, 0x10	; 16
     e88:	8c 93       	st	X, r24

	// Transmitter Enable
	SET_BIT(UCSRB_REG, UCSRB_TXEN);
     e8a:	aa e2       	ldi	r26, 0x2A	; 42
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ea e2       	ldi	r30, 0x2A	; 42
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	88 60       	ori	r24, 0x08	; 8
     e96:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
		SET_BIT(UCSRB_REG, UCSRB_UCSZ2);

	#elif(UART_DATA_BIT == UART_DATA_8bit)

		SET_BIT(UCSRC_REG, UCSRC_UCSZ0);
     e98:	a0 e4       	ldi	r26, 0x40	; 64
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e0 e4       	ldi	r30, 0x40	; 64
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
     ea6:	a0 e4       	ldi	r26, 0x40	; 64
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e0 e4       	ldi	r30, 0x40	; 64
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	84 60       	ori	r24, 0x04	; 4
     eb2:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     eb4:	aa e2       	ldi	r26, 0x2A	; 42
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ea e2       	ldi	r30, 0x2A	; 42
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8b 7f       	andi	r24, 0xFB	; 251
     ec0:	8c 93       	st	X, r24


	/********************* Setting No Stop Bits *********************/
	#if(UART_STOP_BIT == UART_STOP_1bit)

		CLR_BIT(UCSRC_REG, UCSRC_USBS);
     ec2:	a0 e4       	ldi	r26, 0x40	; 64
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e0 e4       	ldi	r30, 0x40	; 64
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	87 7f       	andi	r24, 0xF7	; 247
     ece:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSRC_UPM0);
		SET_BIT(UCSRC_REG, UCSRC_UPM1);

	#elif(UART_PARITY_MODE == UART_PARITY_ODD)

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     ed0:	a0 e4       	ldi	r26, 0x40	; 64
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	e0 e4       	ldi	r30, 0x40	; 64
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	80 62       	ori	r24, 0x20	; 32
     edc:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     ede:	a0 e4       	ldi	r26, 0x40	; 64
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e0 e4       	ldi	r30, 0x40	; 64
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	80 61       	ori	r24, 0x10	; 16
     eea:	8c 93       	st	X, r24
	/**************************************************************/




}
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <UART_enuSendChar>:


ErrorStatus_t UART_enuSendChar(uint8_t copy_u8Data){
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <UART_enuSendChar+0x6>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     f02:	19 82       	std	Y+1, r1	; 0x01


	// Wait until transmit buffer is empty
	while(GET_BIT(UCSRA_REG, UCSRA_URDE) == 0);
     f04:	eb e2       	ldi	r30, 0x2B	; 43
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	82 95       	swap	r24
     f0c:	86 95       	lsr	r24
     f0e:	87 70       	andi	r24, 0x07	; 7
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	81 70       	andi	r24, 0x01	; 1
     f16:	90 70       	andi	r25, 0x00	; 0
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	a1 f3       	breq	.-24     	; 0xf04 <UART_enuSendChar+0xe>

	UDR_REG = copy_u8Data;
     f1c:	ec e2       	ldi	r30, 0x2C	; 44
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	80 83       	st	Z, r24


	Local_enuErrrorState = ERROR_STATUS_OK;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <UART_enuSendString>:


ErrorStatus_t UART_enuSendString(uint8_t* copy_pu8Data){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	00 d0       	rcall	.+0      	; 0xf3a <UART_enuSendString+0x6>
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <UART_enuSendString+0x8>
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	9b 83       	std	Y+3, r25	; 0x03
     f42:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     f44:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9b 81       	ldd	r25, Y+3	; 0x03
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	69 f4       	brne	.+26     	; 0xf68 <UART_enuSendString+0x34>
		return Local_enuErrrorState;
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	8c 83       	std	Y+4, r24	; 0x04
     f52:	16 c0       	rjmp	.+44     	; 0xf80 <UART_enuSendString+0x4c>
	}

	else{

		while(*copy_pu8Data != '\0'){
			UART_enuSendChar(*copy_pu8Data);
     f54:	ea 81       	ldd	r30, Y+2	; 0x02
     f56:	fb 81       	ldd	r31, Y+3	; 0x03
     f58:	80 81       	ld	r24, Z
     f5a:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_enuSendChar>
			copy_pu8Data++;
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	9b 81       	ldd	r25, Y+3	; 0x03
     f62:	01 96       	adiw	r24, 0x01	; 1
     f64:	9b 83       	std	Y+3, r25	; 0x03
     f66:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
	}

	else{

		while(*copy_pu8Data != '\0'){
     f68:	ea 81       	ldd	r30, Y+2	; 0x02
     f6a:	fb 81       	ldd	r31, Y+3	; 0x03
     f6c:	80 81       	ld	r24, Z
     f6e:	88 23       	and	r24, r24
     f70:	89 f7       	brne	.-30     	; 0xf54 <UART_enuSendString+0x20>
			UART_enuSendChar(*copy_pu8Data);
			copy_pu8Data++;
		}
		UART_enuSendChar('\0');
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	0e 94 7b 07 	call	0xef6	; 0xef6 <UART_enuSendChar>
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	8c 83       	std	Y+4, r24	; 0x04
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	0f 90       	pop	r0
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <UART_enuRecieveChar>:

ErrorStatus_t UART_enuRecieveChar(uint8_t* copy_pu8Data){
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	00 d0       	rcall	.+0      	; 0xf96 <UART_enuRecieveChar+0x6>
     f96:	00 d0       	rcall	.+0      	; 0xf98 <UART_enuRecieveChar+0x8>
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     fa0:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	9b 81       	ldd	r25, Y+3	; 0x03
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	19 f4       	brne	.+6      	; 0xfb0 <UART_enuRecieveChar+0x20>
		return Local_enuErrrorState;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	8c 83       	std	Y+4, r24	; 0x04
     fae:	0f c0       	rjmp	.+30     	; 0xfce <UART_enuRecieveChar+0x3e>
	}

	else{

		// Receive Complete
		while(GET_BIT(UCSRA_REG, UCSRA_RXC) == 0);
     fb0:	eb e2       	ldi	r30, 0x2B	; 43
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	88 23       	and	r24, r24
     fb8:	dc f7       	brge	.-10     	; 0xfb0 <UART_enuRecieveChar+0x20>

		*copy_pu8Data = UDR_REG;
     fba:	ec e2       	ldi	r30, 0x2C	; 44
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	ea 81       	ldd	r30, Y+2	; 0x02
     fc2:	fb 81       	ldd	r31, Y+3	; 0x03
     fc4:	80 83       	st	Z, r24
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	8c 83       	std	Y+4, r24	; 0x04
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
}
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <UART_enuRecieveString>:



ErrorStatus_t UART_enuRecieveString(uint8_t* copy_pu8Data){
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <UART_enuRecieveString+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <UART_enuRecieveString+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9b 83       	std	Y+3, r25	; 0x03
     fec:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     fee:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	9b 81       	ldd	r25, Y+3	; 0x03
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	61 f4       	brne	.+24     	; 0x1010 <UART_enuRecieveString+0x32>
		return Local_enuErrrorState;
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	8c 83       	std	Y+4, r24	; 0x04
     ffc:	12 c0       	rjmp	.+36     	; 0x1022 <UART_enuRecieveString+0x44>
	}

	else{
		while(*copy_pu8Data != '\0'){
			UART_enuRecieveChar(copy_pu8Data);
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	9b 81       	ldd	r25, Y+3	; 0x03
    1002:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_enuRecieveChar>
			copy_pu8Data+=1;
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	9b 81       	ldd	r25, Y+3	; 0x03
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	9b 83       	std	Y+3, r25	; 0x03
    100e:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_pu8Data == NULL){
		return Local_enuErrrorState;
	}

	else{
		while(*copy_pu8Data != '\0'){
    1010:	ea 81       	ldd	r30, Y+2	; 0x02
    1012:	fb 81       	ldd	r31, Y+3	; 0x03
    1014:	80 81       	ld	r24, Z
    1016:	88 23       	and	r24, r24
    1018:	91 f7       	brne	.-28     	; 0xffe <UART_enuRecieveString+0x20>
			copy_pu8Data+=1;
		}
	}


	Local_enuErrrorState = ERROR_STATUS_OK;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	8c 83       	std	Y+4, r24	; 0x04
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	cf 91       	pop	r28
    102e:	df 91       	pop	r29
    1030:	08 95       	ret

00001032 <UART_setBaudRate>:


//!
void UART_setBaudRate(uint16 copy_u8UART_BaudRate){
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	00 d0       	rcall	.+0      	; 0x1038 <UART_setBaudRate+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <UART_setBaudRate+0x8>
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	9c 83       	std	Y+4, r25	; 0x04
    1040:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int copy_u16Temp = 0;
    1042:	1a 82       	std	Y+2, r1	; 0x02
    1044:	19 82       	std	Y+1, r1	; 0x01

    #if (UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)
        #if (UART_SPEED_MODE == UART_NORMAL_SPEED)


    			copy_u16Temp = ((UART_MC_OSC_FREQ / (16UL*copy_u8UART_BaudRate) ) - 1);
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	cc 01       	movw	r24, r24
    104c:	a0 e0       	ldi	r26, 0x00	; 0
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	aa 1f       	adc	r26, r26
    1056:	bb 1f       	adc	r27, r27
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	aa 1f       	adc	r26, r26
    105e:	bb 1f       	adc	r27, r27
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	aa 1f       	adc	r26, r26
    1066:	bb 1f       	adc	r27, r27
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	aa 1f       	adc	r26, r26
    106e:	bb 1f       	adc	r27, r27
    1070:	9c 01       	movw	r18, r24
    1072:	ad 01       	movw	r20, r26
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	92 e1       	ldi	r25, 0x12	; 18
    1078:	aa e7       	ldi	r26, 0x7A	; 122
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 4d 21 	call	0x429a	; 0x429a <__udivmodsi4>
    1084:	da 01       	movw	r26, r20
    1086:	c9 01       	movw	r24, r18
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	9a 83       	std	Y+2, r25	; 0x02
    108c:	89 83       	std	Y+1, r24	; 0x01

    			copy_u16Temp = ((UART_MC_OSC_FREQ / (2UL*copy_u8UART_BaudRate) ) - 1);
    #endif


    CLR_BIT(UCSRC_REG, UCSRC_URSEL);
    108e:	a0 e4       	ldi	r26, 0x40	; 64
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e0 e4       	ldi	r30, 0x40	; 64
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8f 77       	andi	r24, 0x7F	; 127
    109a:	8c 93       	st	X, r24

    UBRRH_REG = (uint8_t)(copy_u16Temp >> 8);
    109c:	e0 e4       	ldi	r30, 0x40	; 64
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	89 2f       	mov	r24, r25
    10a6:	99 27       	eor	r25, r25
    10a8:	80 83       	st	Z, r24
    UBRRL_REG = (uint8_t)copy_u16Temp;
    10aa:	e9 e2       	ldi	r30, 0x29	; 41
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	80 83       	st	Z, r24
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	cf 91       	pop	r28
    10bc:	df 91       	pop	r29
    10be:	08 95       	ret

000010c0 <TWI_enuInit>:





TWIStatus_t TWI_enuInit(void) {
    10c0:	df 93       	push	r29
    10c2:	cf 93       	push	r28
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    TWIStatus_t Local_enuErrorState = TWI_STATUS_FAILURE;
    10ca:	19 82       	std	Y+1, r1	; 0x01

    #if (TWI_MODE_M_or_S == TWI_MASTER_MODE)
        // Set Value for Bit Rate (should only be when we working with master)
        TWBR_REG = TWBR_VALUE;
    10cc:	e0 e2       	ldi	r30, 0x20	; 32
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	80 83       	st	Z, r24
        TWSR_REG = TWI_PRESCALER_VALUE; // Set prescaler bits
    10d4:	e1 e2       	ldi	r30, 0x21	; 33
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	10 82       	st	Z, r1
    #endif

    // Enable TWI Interrupt
    GIE_enuEnable();
    10da:	0e 94 45 10 	call	0x208a	; 0x208a <GIE_enuEnable>

    // Configure TWCR register based on ACK configuration
    #if (TWI_ACK_CONFIG == TWI_ACK_ENABLE)
        TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWEA) | (1 << TWCR_TWIE);
    10de:	e6 e5       	ldi	r30, 0x56	; 86
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	85 e4       	ldi	r24, 0x45	; 69
    10e4:	80 83       	st	Z, r24
        TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWIE);
    #endif

    // Configure General Call Enable (GCE)
    #if (TWI_GCE_CONFIG == TWI_GCE_ENABLE)
        SET_BIT(TWAR_REG, TWAR_TWGCE);
    10e6:	a2 e2       	ldi	r26, 0x22	; 34
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e2 e2       	ldi	r30, 0x22	; 34
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	81 60       	ori	r24, 0x01	; 1
    10f2:	8c 93       	st	X, r24
    #elif (TWI_GCE_CONFIG == TWI_GCE_DISABLE)
        CLR_BIT(TWAR_REG, TWAR_TWGCE);
    #endif

    // Set Address for MC
    TWAR_REG = (TWAR_REG & 0x01) | TWI_SET_ADDR;
    10f4:	a2 e2       	ldi	r26, 0x22	; 34
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e2 e2       	ldi	r30, 0x22	; 34
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	81 70       	andi	r24, 0x01	; 1
    1100:	88 60       	ori	r24, 0x08	; 8
    1102:	8c 93       	st	X, r24

    Local_enuErrorState = TWI_STATUS_OK;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorState;
    1108:	89 81       	ldd	r24, Y+1	; 0x01
}
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <TWI_enuStartCondition>:



TWIStatus_t TWI_enuStartCondition(void){
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	0f 92       	push	r0
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    111c:	19 82       	std	Y+1, r1	; 0x01
	 * TWEN bit must be set whenever you want to intiate a TWI operation.
	 * To send start condition enable TWI by setting TWSTA, TWINT, and TWEN in one operation.
	 * This ensures that TWI modules receives a consistent command and avoids intermediate states.
	 * */

	TWCR_REG = (1 << TWCR_TWSTA) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    111e:	e6 e5       	ldi	r30, 0x56	; 86
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	84 ea       	ldi	r24, 0xA4	; 164
    1124:	80 83       	st	Z, r24



	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    1126:	e6 e5       	ldi	r30, 0x56	; 86
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	88 23       	and	r24, r24
    112e:	dc f7       	brge	.-10     	; 0x1126 <TWI_enuStartCondition+0x14>
	 * 1  1  1  1  {1 0 0   0}
	 *
	 * 0xF8
	 * */

	if( (TWSR_REG & 0xF8) == TWI_START_SUCCESS_CODE){
    1130:	e1 e2       	ldi	r30, 0x21	; 33
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	88 2f       	mov	r24, r24
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	88 7f       	andi	r24, 0xF8	; 248
    113c:	90 70       	andi	r25, 0x00	; 0
    113e:	88 30       	cpi	r24, 0x08	; 8
    1140:	91 05       	cpc	r25, r1
    1142:	11 f4       	brne	.+4      	; 0x1148 <TWI_enuStartCondition+0x36>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    1148:	89 81       	ldd	r24, Y+1	; 0x01
}
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <TWI_enuRepeatStartCondition>:

TWIStatus_t TWI_enuRepeatStartCondition(void){
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    115c:	19 82       	std	Y+1, r1	; 0x01
	 * TWEN bit must be set whenever you want to intiate a TWI operation.
	 * To send start condition enable TWI by setting TWSTA, TWINT, and TWEN in one operation.
	 * This ensures that TWI modules receives a consistent command and avoids intermediate states.
	 * */

	TWCR_REG = (1 << TWCR_TWSTA) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    115e:	e6 e5       	ldi	r30, 0x56	; 86
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	84 ea       	ldi	r24, 0xA4	; 164
    1164:	80 83       	st	Z, r24


	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    1166:	e6 e5       	ldi	r30, 0x56	; 86
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	88 23       	and	r24, r24
    116e:	dc f7       	brge	.-10     	; 0x1166 <TWI_enuRepeatStartCondition+0x14>
	 * 0xF8
	 * */



	if( (TWSR_REG &0xF8) == TWI_RSTART_SUCCESS_CODE){
    1170:	e1 e2       	ldi	r30, 0x21	; 33
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	88 7f       	andi	r24, 0xF8	; 248
    117c:	90 70       	andi	r25, 0x00	; 0
    117e:	80 31       	cpi	r24, 0x10	; 16
    1180:	91 05       	cpc	r25, r1
    1182:	11 f4       	brne	.+4      	; 0x1188 <TWI_enuRepeatStartCondition+0x36>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enu_ErrorState;
    1188:	89 81       	ldd	r24, Y+1	; 0x01
}
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <TWI_enuStopCondition>:


//! since there no status code why not doing macro like function
// IDEAS for feature development
TWIStatus_t TWI_enuStopCondition(void){
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	0f 92       	push	r0
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    119c:	19 82       	std	Y+1, r1	; 0x01
	 * TWCR_TWINT & TWCR_TWEN - essential to start TWI action
	 *
	 * */


    TWCR_REG = (1 << TWCR_TWSTO) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    119e:	e6 e5       	ldi	r30, 0x56	; 86
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	84 e9       	ldi	r24, 0x94	; 148
    11a4:	80 83       	st	Z, r24


	Local_enu_ErrorState = TWI_STATUS_OK;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <TWI_enuSetSlaveOperation>:


TWIStatus_t TWI_enuSetSlaveOperation(
		uint8_t copy_u8SlaveAddress, uint8_t copy_u8Operation){
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <TWI_enuSetSlaveOperation+0x6>
    11ba:	0f 92       	push	r0
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	8a 83       	std	Y+2, r24	; 0x02
    11c2:	6b 83       	std	Y+3, r22	; 0x03

	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    11c4:	19 82       	std	Y+1, r1	; 0x01

    // Load the slave address and operation (read/write) into the data register
	TWDR_REG = (copy_u8SlaveAddress << 1) | (copy_u8Operation);
    11c6:	e3 e2       	ldi	r30, 0x23	; 35
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	98 2f       	mov	r25, r24
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	89 2b       	or	r24, r25
    11da:	80 83       	st	Z, r24

    TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    11dc:	e6 e5       	ldi	r30, 0x56	; 86
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	84 e8       	ldi	r24, 0x84	; 132
    11e2:	80 83       	st	Z, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    11e4:	e6 e5       	ldi	r30, 0x56	; 86
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	88 23       	and	r24, r24
    11ec:	dc f7       	brge	.-10     	; 0x11e4 <TWI_enuSetSlaveOperation+0x30>




	if(copy_u8Operation == TWI_WriteOperation){
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	88 23       	and	r24, r24
    11f2:	69 f4       	brne	.+26     	; 0x120e <TWI_enuSetSlaveOperation+0x5a>

		if((TWSR_REG &0xF8) == TWI_SLA_WR_ACK_TSUCCESS_CODE){
    11f4:	e1 e2       	ldi	r30, 0x21	; 33
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	88 7f       	andi	r24, 0xF8	; 248
    1200:	90 70       	andi	r25, 0x00	; 0
    1202:	88 31       	cpi	r24, 0x18	; 24
    1204:	91 05       	cpc	r25, r1
    1206:	91 f4       	brne	.+36     	; 0x122c <TWI_enuSetSlaveOperation+0x78>
			Local_enu_ErrorState = TWI_STATUS_OK;
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	89 83       	std	Y+1, r24	; 0x01
    120c:	0f c0       	rjmp	.+30     	; 0x122c <TWI_enuSetSlaveOperation+0x78>
		}

	} else if(copy_u8Operation == TWI_ReadOperation){
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	61 f4       	brne	.+24     	; 0x122c <TWI_enuSetSlaveOperation+0x78>

		if((TWSR_REG &0xF8) == TWI_SLA_RD_ACK_TSUCCESS_CODE){
    1214:	e1 e2       	ldi	r30, 0x21	; 33
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	88 7f       	andi	r24, 0xF8	; 248
    1220:	90 70       	andi	r25, 0x00	; 0
    1222:	80 34       	cpi	r24, 0x40	; 64
    1224:	91 05       	cpc	r25, r1
    1226:	11 f4       	brne	.+4      	; 0x122c <TWI_enuSetSlaveOperation+0x78>
			Local_enu_ErrorState = TWI_STATUS_OK;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	89 83       	std	Y+1, r24	; 0x01
		}
	}



	return Local_enu_ErrorState;
    122c:	89 81       	ldd	r24, Y+1	; 0x01
}
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <TWI_enuWriteData>:

TWIStatus_t	TWI_enuWriteData(uint8_t copy_u8Data){
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <TWI_enuWriteData+0x6>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1246:	19 82       	std	Y+1, r1	; 0x01

	TWDR_REG = copy_u8Data;
    1248:	e3 e2       	ldi	r30, 0x23	; 35
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	80 83       	st	Z, r24


    // Clear the TWINT flag and set TWEN to start the operation
    TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1250:	e6 e5       	ldi	r30, 0x56	; 86
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	84 e8       	ldi	r24, 0x84	; 132
    1256:	80 83       	st	Z, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    1258:	e6 e5       	ldi	r30, 0x56	; 86
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	88 23       	and	r24, r24
    1260:	dc f7       	brge	.-10     	; 0x1258 <TWI_enuWriteData+0x1e>
		#if(TWI_MODE_M_or_S == TWI_MASTER_MODE)




			if((TWSR_REG & 0xF8) == 0x28){
    1262:	e1 e2       	ldi	r30, 0x21	; 33
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	88 2f       	mov	r24, r24
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	88 7f       	andi	r24, 0xF8	; 248
    126e:	90 70       	andi	r25, 0x00	; 0
    1270:	88 32       	cpi	r24, 0x28	; 40
    1272:	91 05       	cpc	r25, r1
    1274:	11 f4       	brne	.+4      	; 0x127a <TWI_enuWriteData+0x40>


				Local_enu_ErrorState = TWI_STATUS_OK;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	89 83       	std	Y+1, r24	; 0x01
		#endif

	#endif


	return Local_enu_ErrorState;
    127a:	89 81       	ldd	r24, Y+1	; 0x01
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <TWI_enuReadData>:


//!{works fine with status checking}
TWIStatus_t	TWI_enuReadData(uint8_t  *copy_pu8Data){
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	00 d0       	rcall	.+0      	; 0x128c <TWI_enuReadData+0x6>
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	9b 83       	std	Y+3, r25	; 0x03
    1294:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1296:	19 82       	std	Y+1, r1	; 0x01

	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    1298:	a6 e5       	ldi	r26, 0x56	; 86
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e6 e5       	ldi	r30, 0x56	; 86
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	80 68       	ori	r24, 0x80	; 128
    12a4:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    12a6:	e6 e5       	ldi	r30, 0x56	; 86
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	88 23       	and	r24, r24
    12ae:	dc f7       	brge	.-10     	; 0x12a6 <TWI_enuReadData+0x20>
	// 0x88 - (slave)  data has been received not ack has been returned

	#if(TWI_ACK_CONFIG == TWI_ACK_ENABLE)

		// Master Receive
		if( ((TWSR_REG & 0xF8) == TWI_M_RSUCCESS_CODE_withAck) ){
    12b0:	e1 e2       	ldi	r30, 0x21	; 33
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 7f       	andi	r24, 0xF8	; 248
    12bc:	90 70       	andi	r25, 0x00	; 0
    12be:	80 35       	cpi	r24, 0x50	; 80
    12c0:	91 05       	cpc	r25, r1
    12c2:	19 f4       	brne	.+6      	; 0x12ca <TWI_enuReadData+0x44>
			Local_enu_ErrorState = TWI_STATUS_OK;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	0c c0       	rjmp	.+24     	; 0x12e2 <TWI_enuReadData+0x5c>

		}

		// Slave Receive
		else if(((TWSR_REG & 0xF8) == TWI_S_RSUCCESS_CODE_withACK)){
    12ca:	e1 e2       	ldi	r30, 0x21	; 33
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	88 7f       	andi	r24, 0xF8	; 248
    12d6:	90 70       	andi	r25, 0x00	; 0
    12d8:	80 38       	cpi	r24, 0x80	; 128
    12da:	91 05       	cpc	r25, r1
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <TWI_enuReadData+0x5c>
			Local_enu_ErrorState = TWI_STATUS_OK;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	89 83       	std	Y+1, r24	; 0x01
			Local_enu_ErrorState = TWI_STATUS_OK;
		}
	#endif

	// Read data from TWDR Register
	*copy_pu8Data = TWDR_REG;
    12e2:	e3 e2       	ldi	r30, 0x23	; 35
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	ea 81       	ldd	r30, Y+2	; 0x02
    12ea:	fb 81       	ldd	r31, Y+3	; 0x03
    12ec:	80 83       	st	Z, r24

	return Local_enu_ErrorState;
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <TWI_enuCheckMyAddress>:


//!{works fine with status checking}
ErrorStatus_t TWI_enuCheckMyAddress(void){
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1306:	19 82       	std	Y+1, r1	; 0x01


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    1308:	a6 e5       	ldi	r26, 0x56	; 86
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e6 e5       	ldi	r30, 0x56	; 86
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	80 68       	ori	r24, 0x80	; 128
    1314:	8c 93       	st	X, r24


	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    1316:	e6 e5       	ldi	r30, 0x56	; 86
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	88 23       	and	r24, r24
    131e:	dc f7       	brge	.-10     	; 0x1316 <TWI_enuCheckMyAddress+0x1a>


	// 0x60 - SLA+W has been received, ACK has been returned
	// 0xA8 - SLA+R has been received, ACK has been returned

	if((TWSR_REG & 0xF8) == TWI_SLA_WR_ACK_RSUCCESS_CODE){
    1320:	e1 e2       	ldi	r30, 0x21	; 33
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	88 2f       	mov	r24, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	88 7f       	andi	r24, 0xF8	; 248
    132c:	90 70       	andi	r25, 0x00	; 0
    132e:	80 36       	cpi	r24, 0x60	; 96
    1330:	91 05       	cpc	r25, r1
    1332:	19 f4       	brne	.+6      	; 0x133a <TWI_enuCheckMyAddress+0x3e>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	0c c0       	rjmp	.+24     	; 0x1352 <TWI_enuCheckMyAddress+0x56>
	}


	else if((TWSR_REG & 0xF8) == TWI_SLA_RD_ACK_RSUCCESS_CODE){
    133a:	e1 e2       	ldi	r30, 0x21	; 33
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	88 7f       	andi	r24, 0xF8	; 248
    1346:	90 70       	andi	r25, 0x00	; 0
    1348:	88 3a       	cpi	r24, 0xA8	; 168
    134a:	91 05       	cpc	r25, r1
    134c:	11 f4       	brne	.+4      	; 0x1352 <TWI_enuCheckMyAddress+0x56>
		Local_enu_ErrorState = TWI_STATUS_OK;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    1352:	89 81       	ldd	r24, Y+1	; 0x01
}
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <TIMER0_voidInit>:
/*******************************************************************************************************/



/****************************************** TIMER0 FUNCTIONS ******************************************/
void TIMER0_voidInit(void){
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
	 * 3. Enable Interrupt (Compre Match Interrupt - OverFlow Interrupt)
	 *
	 * */

	/** Active global interrupt **/
	GIE_enuEnable();
    1364:	0e 94 45 10 	call	0x208a	; 0x208a <GIE_enuEnable>
			#endif
		#endif


	#elif(TIMER0_MODE_SELECT == TIMER_MODE_FastPWM)
		SET_BIT(TCCR0_REG, TCCR0_WGM00);
    1368:	a3 e5       	ldi	r26, 0x53	; 83
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e3 e5       	ldi	r30, 0x53	; 83
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	80 64       	ori	r24, 0x40	; 64
    1374:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_WGM01);
    1376:	a3 e5       	ldi	r26, 0x53	; 83
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e3 e5       	ldi	r30, 0x53	; 83
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	88 60       	ori	r24, 0x08	; 8
    1382:	8c 93       	st	X, r24

		#if(TIMER0_FastPwm_Type == TIMER_FastPwmType_Inverted)
			CLR_BIT(TCCR0_REG, TCCR0_COM00);
    1384:	a3 e5       	ldi	r26, 0x53	; 83
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	e3 e5       	ldi	r30, 0x53	; 83
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	8f 7e       	andi	r24, 0xEF	; 239
    1390:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, TCCR0_COM01);
    1392:	a3 e5       	ldi	r26, 0x53	; 83
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e3 e5       	ldi	r30, 0x53	; 83
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	80 62       	ori	r24, 0x20	; 32
    139e:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, TCCR0_COM01);

		#endif

		// By default, OC0 pin is default output pin for Timer0's PWM signal
		DIO_enuSetPinDirection(TIMER_OC0_PORT, TIMER_OC0_PIN, DIO_u8OUTPUT);
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	63 e0       	ldi	r22, 0x03	; 3
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>



	/**2. Set Prescaller clock **/
	#if(TIMER0_CLK_PRE_SELECT == TIMER_PRES_01)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
    13aa:	a3 e5       	ldi	r26, 0x53	; 83
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e3 e5       	ldi	r30, 0x53	; 83
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	81 60       	ori	r24, 0x01	; 1
    13b6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_CS01);
    13b8:	a3 e5       	ldi	r26, 0x53	; 83
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e3 e5       	ldi	r30, 0x53	; 83
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8d 7f       	andi	r24, 0xFD	; 253
    13c4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_CS02);
    13c6:	a3 e5       	ldi	r26, 0x53	; 83
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e3 e5       	ldi	r30, 0x53	; 83
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8b 7f       	andi	r24, 0xFB	; 251
    13d2:	8c 93       	st	X, r24
	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_1024)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
		CLR_BIT(TCCR0_REG, TCCR0_CS01);
		SET_BIT(TCCR0_REG, TCCR0_CS02);
	#endif
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <TIMER0_voidStart>:

void TIMER0_voidStart(void){
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			SET_BIT(TIMSK_REG, TIMSK_OCIE0);

		#endif
}
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <TIMER0_voidStop>:

void TIMER0_voidStop(void){
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			CLR_BIT(TIMSK_REG, TIMSK_OCIE0);

		#endif
}
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <TIMER0_voidScheduleTask>:

uint8_t TIMER0_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	60 97       	sbiw	r28, 0x10	; 16
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	9a 87       	std	Y+10, r25	; 0x0a
    1414:	89 87       	std	Y+9, r24	; 0x09
    1416:	4b 87       	std	Y+11, r20	; 0x0b
    1418:	5c 87       	std	Y+12, r21	; 0x0c
    141a:	6d 87       	std	Y+13, r22	; 0x0d
    141c:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    141e:	1d 82       	std	Y+5, r1	; 0x05
    1420:	1e 82       	std	Y+6, r1	; 0x06
    1422:	1f 82       	std	Y+7, r1	; 0x07
    1424:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR0_REG & 0x07){
    1426:	e3 e5       	ldi	r30, 0x53	; 83
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c 01       	movw	r18, r24
    1432:	27 70       	andi	r18, 0x07	; 7
    1434:	30 70       	andi	r19, 0x00	; 0
    1436:	38 8b       	std	Y+16, r19	; 0x10
    1438:	2f 87       	std	Y+15, r18	; 0x0f
    143a:	8f 85       	ldd	r24, Y+15	; 0x0f
    143c:	98 89       	ldd	r25, Y+16	; 0x10
    143e:	83 30       	cpi	r24, 0x03	; 3
    1440:	91 05       	cpc	r25, r1
    1442:	69 f1       	breq	.+90     	; 0x149e <TIMER0_voidScheduleTask+0xa8>
    1444:	2f 85       	ldd	r18, Y+15	; 0x0f
    1446:	38 89       	ldd	r19, Y+16	; 0x10
    1448:	24 30       	cpi	r18, 0x04	; 4
    144a:	31 05       	cpc	r19, r1
    144c:	5c f4       	brge	.+22     	; 0x1464 <TIMER0_voidScheduleTask+0x6e>
    144e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1450:	98 89       	ldd	r25, Y+16	; 0x10
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	91 05       	cpc	r25, r1
    1456:	89 f0       	breq	.+34     	; 0x147a <TIMER0_voidScheduleTask+0x84>
    1458:	2f 85       	ldd	r18, Y+15	; 0x0f
    145a:	38 89       	ldd	r19, Y+16	; 0x10
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	a9 f0       	breq	.+42     	; 0x148c <TIMER0_voidScheduleTask+0x96>
    1462:	37 c0       	rjmp	.+110    	; 0x14d2 <TIMER0_voidScheduleTask+0xdc>
    1464:	8f 85       	ldd	r24, Y+15	; 0x0f
    1466:	98 89       	ldd	r25, Y+16	; 0x10
    1468:	84 30       	cpi	r24, 0x04	; 4
    146a:	91 05       	cpc	r25, r1
    146c:	09 f1       	breq	.+66     	; 0x14b0 <TIMER0_voidScheduleTask+0xba>
    146e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1470:	38 89       	ldd	r19, Y+16	; 0x10
    1472:	25 30       	cpi	r18, 0x05	; 5
    1474:	31 05       	cpc	r19, r1
    1476:	29 f1       	breq	.+74     	; 0x14c2 <TIMER0_voidScheduleTask+0xcc>
    1478:	2c c0       	rjmp	.+88     	; 0x14d2 <TIMER0_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	a0 e0       	ldi	r26, 0x00	; 0
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	8d 83       	std	Y+5, r24	; 0x05
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	af 83       	std	Y+7, r26	; 0x07
    1488:	b8 87       	std	Y+8, r27	; 0x08
    148a:	23 c0       	rjmp	.+70     	; 0x14d2 <TIMER0_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    148c:	88 e0       	ldi	r24, 0x08	; 8
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	a0 e0       	ldi	r26, 0x00	; 0
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	8d 83       	std	Y+5, r24	; 0x05
    1496:	9e 83       	std	Y+6, r25	; 0x06
    1498:	af 83       	std	Y+7, r26	; 0x07
    149a:	b8 87       	std	Y+8, r27	; 0x08
    149c:	1a c0       	rjmp	.+52     	; 0x14d2 <TIMER0_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    149e:	80 e4       	ldi	r24, 0x40	; 64
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a0 e0       	ldi	r26, 0x00	; 0
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	8d 83       	std	Y+5, r24	; 0x05
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	af 83       	std	Y+7, r26	; 0x07
    14ac:	b8 87       	std	Y+8, r27	; 0x08
    14ae:	11 c0       	rjmp	.+34     	; 0x14d2 <TIMER0_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	8d 83       	std	Y+5, r24	; 0x05
    14ba:	9e 83       	std	Y+6, r25	; 0x06
    14bc:	af 83       	std	Y+7, r26	; 0x07
    14be:	b8 87       	std	Y+8, r27	; 0x08
    14c0:	08 c0       	rjmp	.+16     	; 0x14d2 <TIMER0_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	94 e0       	ldi	r25, 0x04	; 4
    14c6:	a0 e0       	ldi	r26, 0x00	; 0
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	8d 83       	std	Y+5, r24	; 0x05
    14cc:	9e 83       	std	Y+6, r25	; 0x06
    14ce:	af 83       	std	Y+7, r26	; 0x07
    14d0:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    14d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	34 e2       	ldi	r19, 0x24	; 36
    14de:	44 ef       	ldi	r20, 0xF4	; 244
    14e0:	5a e4       	ldi	r21, 0x4A	; 74
    14e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	7c 01       	movw	r14, r24
    14ec:	8d 01       	movw	r16, r26
    14ee:	6d 81       	ldd	r22, Y+5	; 0x05
    14f0:	7e 81       	ldd	r23, Y+6	; 0x06
    14f2:	8f 81       	ldd	r24, Y+7	; 0x07
    14f4:	98 85       	ldd	r25, Y+8	; 0x08
    14f6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    14fa:	9b 01       	movw	r18, r22
    14fc:	ac 01       	movw	r20, r24
    14fe:	c8 01       	movw	r24, r16
    1500:	b7 01       	movw	r22, r14
    1502:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1506:	dc 01       	movw	r26, r24
    1508:	cb 01       	movw	r24, r22
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	ab 83       	std	Y+3, r26	; 0x03
    1510:	bc 83       	std	Y+4, r27	; 0x04
		}

	#endif


		TIMERS_ISR_Functions[0] = TaskCallback;
    1512:	89 85       	ldd	r24, Y+9	; 0x09
    1514:	9a 85       	ldd	r25, Y+10	; 0x0a
    1516:	90 93 8b 01 	sts	0x018B, r25
    151a:	80 93 8a 01 	sts	0x018A, r24
		TIMER0_voidStart();
    151e:	0e 94 ed 09 	call	0x13da	; 0x13da <TIMER0_voidStart>
	return 0;
    1522:	80 e0       	ldi	r24, 0x00	; 0
}
    1524:	60 96       	adiw	r28, 0x10	; 16
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	08 95       	ret

0000153e <TIMER0_voidSetPWM>:



void  TIMER0_voidSetPWM(uint8_t copy_u8DutyCycle){
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	0f 92       	push	r0
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Avr32 does has floating point operation
	 * **/


	OCR0_REG = (uint8_t)(((uint16_t)copy_u8DutyCycle * 256) / 100);
    154a:	ec e5       	ldi	r30, 0x5C	; 92
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	98 2f       	mov	r25, r24
    1556:	88 27       	eor	r24, r24
    1558:	24 e6       	ldi	r18, 0x64	; 100
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	b9 01       	movw	r22, r18
    155e:	0e 94 39 21 	call	0x4272	; 0x4272 <__udivmodhi4>
    1562:	cb 01       	movw	r24, r22
    1564:	80 83       	st	Z, r24
}
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <TIMER1_voidInit>:
/******************************************************************************************************/


/****************************************** TIMER1 FUNCTIONS ******************************************/

void TIMER1_voidInit(void) {
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
	 *
	 */


	/** Active global interrupt **/
	GIE_enuEnable();
    1576:	0e 94 45 10 	call	0x208a	; 0x208a <GIE_enuEnable>



	/**2. Set Prescaller clock **/
	#if(TIMER1_CLK_PRE_SELECT == TIMER_PRES_01)
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    157a:	ae e4       	ldi	r26, 0x4E	; 78
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ee e4       	ldi	r30, 0x4E	; 78
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	81 60       	ori	r24, 0x01	; 1
    1586:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    1588:	ae e4       	ldi	r26, 0x4E	; 78
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ee e4       	ldi	r30, 0x4E	; 78
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8d 7f       	andi	r24, 0xFD	; 253
    1594:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    1596:	ae e4       	ldi	r26, 0x4E	; 78
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ee e4       	ldi	r30, 0x4E	; 78
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	8b 7f       	andi	r24, 0xFB	; 251
    15a2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
	#endif

}
    15a4:	cf 91       	pop	r28
    15a6:	df 91       	pop	r29
    15a8:	08 95       	ret

000015aa <TIMER1_voidStart>:

void TIMER1_voidStart(void) {
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_8bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_9bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_10bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        SET_BIT(TIMSK_REG, TIMSK_OCIE1A);
    15b2:	a9 e5       	ldi	r26, 0x59	; 89
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e9 e5       	ldi	r30, 0x59	; 89
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	80 61       	ori	r24, 0x10	; 16
    15be:	8c 93       	st	X, r24

    #endif
}
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <TIMER1_voidStop>:


void TIMER1_voidStop(void) {
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_8bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_9bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_10bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        CLR_BIT(TIMSK_REG, TIMSK_OCIE1A);
    15ce:	a9 e5       	ldi	r26, 0x59	; 89
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e9 e5       	ldi	r30, 0x59	; 89
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	8f 7e       	andi	r24, 0xEF	; 239
    15da:	8c 93       	st	X, r24

    #endif
}
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <TIMER1_voidScheduleTask>:

uint8_t TIMER1_voidScheduleTask(void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds) {
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	61 97       	sbiw	r28, 0x11	; 17
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	9a 87       	std	Y+10, r25	; 0x0a
    1600:	89 87       	std	Y+9, r24	; 0x09
    1602:	4b 87       	std	Y+11, r20	; 0x0b
    1604:	5c 87       	std	Y+12, r21	; 0x0c
    1606:	6d 87       	std	Y+13, r22	; 0x0d
    1608:	7e 87       	std	Y+14, r23	; 0x0e
    uint32_t Local_u32PrescalerValue = 0;
    160a:	1d 82       	std	Y+5, r1	; 0x05
    160c:	1e 82       	std	Y+6, r1	; 0x06
    160e:	1f 82       	std	Y+7, r1	; 0x07
    1610:	18 86       	std	Y+8, r1	; 0x08

    switch(TCCR1B & 0x07) {
    1612:	ee e4       	ldi	r30, 0x4E	; 78
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	88 2f       	mov	r24, r24
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	9c 01       	movw	r18, r24
    161e:	27 70       	andi	r18, 0x07	; 7
    1620:	30 70       	andi	r19, 0x00	; 0
    1622:	39 8b       	std	Y+17, r19	; 0x11
    1624:	28 8b       	std	Y+16, r18	; 0x10
    1626:	88 89       	ldd	r24, Y+16	; 0x10
    1628:	99 89       	ldd	r25, Y+17	; 0x11
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	91 05       	cpc	r25, r1
    162e:	69 f1       	breq	.+90     	; 0x168a <TIMER1_voidScheduleTask+0xa8>
    1630:	28 89       	ldd	r18, Y+16	; 0x10
    1632:	39 89       	ldd	r19, Y+17	; 0x11
    1634:	24 30       	cpi	r18, 0x04	; 4
    1636:	31 05       	cpc	r19, r1
    1638:	5c f4       	brge	.+22     	; 0x1650 <TIMER1_voidScheduleTask+0x6e>
    163a:	88 89       	ldd	r24, Y+16	; 0x10
    163c:	99 89       	ldd	r25, Y+17	; 0x11
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	91 05       	cpc	r25, r1
    1642:	89 f0       	breq	.+34     	; 0x1666 <TIMER1_voidScheduleTask+0x84>
    1644:	28 89       	ldd	r18, Y+16	; 0x10
    1646:	39 89       	ldd	r19, Y+17	; 0x11
    1648:	22 30       	cpi	r18, 0x02	; 2
    164a:	31 05       	cpc	r19, r1
    164c:	a9 f0       	breq	.+42     	; 0x1678 <TIMER1_voidScheduleTask+0x96>
    164e:	38 c0       	rjmp	.+112    	; 0x16c0 <TIMER1_voidScheduleTask+0xde>
    1650:	88 89       	ldd	r24, Y+16	; 0x10
    1652:	99 89       	ldd	r25, Y+17	; 0x11
    1654:	84 30       	cpi	r24, 0x04	; 4
    1656:	91 05       	cpc	r25, r1
    1658:	09 f1       	breq	.+66     	; 0x169c <TIMER1_voidScheduleTask+0xba>
    165a:	28 89       	ldd	r18, Y+16	; 0x10
    165c:	39 89       	ldd	r19, Y+17	; 0x11
    165e:	25 30       	cpi	r18, 0x05	; 5
    1660:	31 05       	cpc	r19, r1
    1662:	29 f1       	breq	.+74     	; 0x16ae <TIMER1_voidScheduleTask+0xcc>
    1664:	2d c0       	rjmp	.+90     	; 0x16c0 <TIMER1_voidScheduleTask+0xde>
        case 0x01: Local_u32PrescalerValue = 1; break;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	af 83       	std	Y+7, r26	; 0x07
    1674:	b8 87       	std	Y+8, r27	; 0x08
    1676:	27 c0       	rjmp	.+78     	; 0x16c6 <TIMER1_voidScheduleTask+0xe4>
        case 0x02: Local_u32PrescalerValue = 8; break;
    1678:	88 e0       	ldi	r24, 0x08	; 8
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 e0       	ldi	r26, 0x00	; 0
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	af 83       	std	Y+7, r26	; 0x07
    1686:	b8 87       	std	Y+8, r27	; 0x08
    1688:	1e c0       	rjmp	.+60     	; 0x16c6 <TIMER1_voidScheduleTask+0xe4>
        case 0x03: Local_u32PrescalerValue = 64; break;
    168a:	80 e4       	ldi	r24, 0x40	; 64
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 e0       	ldi	r26, 0x00	; 0
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	8d 83       	std	Y+5, r24	; 0x05
    1694:	9e 83       	std	Y+6, r25	; 0x06
    1696:	af 83       	std	Y+7, r26	; 0x07
    1698:	b8 87       	std	Y+8, r27	; 0x08
    169a:	15 c0       	rjmp	.+42     	; 0x16c6 <TIMER1_voidScheduleTask+0xe4>
        case 0x04: Local_u32PrescalerValue = 256; break;
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	a0 e0       	ldi	r26, 0x00	; 0
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	af 83       	std	Y+7, r26	; 0x07
    16aa:	b8 87       	std	Y+8, r27	; 0x08
    16ac:	0c c0       	rjmp	.+24     	; 0x16c6 <TIMER1_voidScheduleTask+0xe4>
        case 0x05: Local_u32PrescalerValue = 1024; break;
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	94 e0       	ldi	r25, 0x04	; 4
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	8d 83       	std	Y+5, r24	; 0x05
    16b8:	9e 83       	std	Y+6, r25	; 0x06
    16ba:	af 83       	std	Y+7, r26	; 0x07
    16bc:	b8 87       	std	Y+8, r27	; 0x08
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <TIMER1_voidScheduleTask+0xe4>
        default: return 1; // Invalid prescaler setting
    16c0:	31 e0       	ldi	r19, 0x01	; 1
    16c2:	3f 87       	std	Y+15, r19	; 0x0f
    16c4:	31 c0       	rjmp	.+98     	; 0x1728 <TIMER1_voidScheduleTask+0x146>
    }

    float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU) / Local_u32PrescalerValue;
    16c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    16cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	34 e2       	ldi	r19, 0x24	; 36
    16d2:	44 ef       	ldi	r20, 0xF4	; 244
    16d4:	5a e4       	ldi	r21, 0x4A	; 74
    16d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	7c 01       	movw	r14, r24
    16e0:	8d 01       	movw	r16, r26
    16e2:	6d 81       	ldd	r22, Y+5	; 0x05
    16e4:	7e 81       	ldd	r23, Y+6	; 0x06
    16e6:	8f 81       	ldd	r24, Y+7	; 0x07
    16e8:	98 85       	ldd	r25, Y+8	; 0x08
    16ea:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    16ee:	9b 01       	movw	r18, r22
    16f0:	ac 01       	movw	r20, r24
    16f2:	c8 01       	movw	r24, r16
    16f4:	b7 01       	movw	r22, r14
    16f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	ab 83       	std	Y+3, r26	; 0x03
    1704:	bc 83       	std	Y+4, r27	; 0x04
            OCR1A = 65535;
            TIMER1_TARGET_NTICKS = (uint32_t)(Local_f64Totalticks / 65535.0);
        }
    #endif

    TIMER1_CURRENT_NTICKS = 0;
    1706:	10 92 82 01 	sts	0x0182, r1
    170a:	10 92 83 01 	sts	0x0183, r1
    170e:	10 92 84 01 	sts	0x0184, r1
    1712:	10 92 85 01 	sts	0x0185, r1
    TIMERS_ISR_Functions[1] = TaskCallback;
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	90 93 8d 01 	sts	0x018D, r25
    171e:	80 93 8c 01 	sts	0x018C, r24
    TIMER1_voidStart();
    1722:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <TIMER1_voidStart>
    return 0;
    1726:	1f 86       	std	Y+15, r1	; 0x0f
    1728:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    172a:	61 96       	adiw	r28, 0x11	; 17
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	08 95       	ret

00001744 <TIMER1_voidSetPWM>:



void TIMER1_voidSetPWM(uint8_t copy_u8DutyCycle) {
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	00 d0       	rcall	.+0      	; 0x1756 <TIMER1_voidSetPWM+0x12>
    1756:	0f 92       	push	r0
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	8b 83       	std	Y+3, r24	; 0x03
    uint16_t Local_u16TopValue = 0;
    175e:	1a 82       	std	Y+2, r1	; 0x02
    1760:	19 82       	std	Y+1, r1	; 0x01

    #if(TIMER1_MODE_SELECT == TIMER1_MODE_FastPWM_8bit || \
        TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_8bit)
    	Local_u16TopValue = 0x00FF;  // 8-bit resolution
    1762:	8f ef       	ldi	r24, 0xFF	; 255
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	89 83       	std	Y+1, r24	; 0x01
    #elif(TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        // Ensure ICR1 is already set correctly during initialization
    	Local_u16TopValue = ICR1;  // ICR1 for Phase and Frequency Correct
    #endif

    OCR1A_REG = (uint16_t)(((uint32_t)copy_u8DutyCycle * Local_u16TopValue) / 100);
    176a:	0f 2e       	mov	r0, r31
    176c:	fa e4       	ldi	r31, 0x4A	; 74
    176e:	cf 2e       	mov	r12, r31
    1770:	dd 24       	eor	r13, r13
    1772:	f0 2d       	mov	r31, r0
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	e8 2e       	mov	r14, r24
    1778:	ff 24       	eor	r15, r15
    177a:	00 e0       	ldi	r16, 0x00	; 0
    177c:	10 e0       	ldi	r17, 0x00	; 0
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	9c 01       	movw	r18, r24
    1784:	40 e0       	ldi	r20, 0x00	; 0
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	c8 01       	movw	r24, r16
    178a:	b7 01       	movw	r22, r14
    178c:	0e 94 1a 21 	call	0x4234	; 0x4234 <__mulsi3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	24 e6       	ldi	r18, 0x64	; 100
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	bc 01       	movw	r22, r24
    179e:	cd 01       	movw	r24, r26
    17a0:	0e 94 4d 21 	call	0x429a	; 0x429a <__udivmodsi4>
    17a4:	da 01       	movw	r26, r20
    17a6:	c9 01       	movw	r24, r18
    17a8:	f6 01       	movw	r30, r12
    17aa:	91 83       	std	Z+1, r25	; 0x01
    17ac:	80 83       	st	Z, r24
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	df 90       	pop	r13
    17c2:	cf 90       	pop	r12
    17c4:	08 95       	ret

000017c6 <TIMER2_voidInit>:

/******************************************************************************************************/


/****************************************** TIMER2 FUNCTIONS ******************************************/
void TIMER2_voidInit(void){
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
			SET_BIT(TCCR2_REG, TCCR2_COM21);
		#endif
		DIO_enuSetPinDirection(TIMER_OC2_PORT, TIMER_OC2_PIN, DIO_u8OUTPUT);

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_PWMphasecorrect)
		SET_BIT(TCCR2_REG, TCCR2_WGM20);
    17ce:	a5 e4       	ldi	r26, 0x45	; 69
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e5 e4       	ldi	r30, 0x45	; 69
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	80 64       	ori	r24, 0x40	; 64
    17da:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_WGM21);
    17dc:	a5 e4       	ldi	r26, 0x45	; 69
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e5 e4       	ldi	r30, 0x45	; 69
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	87 7f       	andi	r24, 0xF7	; 247
    17e8:	8c 93       	st	X, r24
		#if(TIMER2_PhaseCorrect_Type == TIMER_PhaseCorrect_NonInverted)
			SET_BIT(TCCR2_REG, TCCR2_COM20);
			SET_BIT(TCCR2_REG, TCCR2_COM21);

		#elif(TIMER2_PhaseCorrect_Type == TIMER_PhaseCorrect_Inverted)
			CLR_BIT(TCCR2_REG, TCCR2_COM20);
    17ea:	a5 e4       	ldi	r26, 0x45	; 69
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e5 e4       	ldi	r30, 0x45	; 69
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	8f 7e       	andi	r24, 0xEF	; 239
    17f6:	8c 93       	st	X, r24
			SET_BIT(TCCR2_REG, TCCR2_COM21);
    17f8:	a5 e4       	ldi	r26, 0x45	; 69
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e5 e4       	ldi	r30, 0x45	; 69
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 62       	ori	r24, 0x20	; 32
    1804:	8c 93       	st	X, r24
	#endif
	/******************************************************************************/

	/***************************** TIMER2  PRE SELECT *****************************/
	#if(TIMER2_CLK_PRE_SELECT == TIMER_PRES_01)
		SET_BIT(TCCR2_REG, TCCR2_CS20);
    1806:	a5 e4       	ldi	r26, 0x45	; 69
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e5 e4       	ldi	r30, 0x45	; 69
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	81 60       	ori	r24, 0x01	; 1
    1812:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_CS21);
    1814:	a5 e4       	ldi	r26, 0x45	; 69
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e5 e4       	ldi	r30, 0x45	; 69
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	8d 7f       	andi	r24, 0xFD	; 253
    1820:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_CS22);
    1822:	a5 e4       	ldi	r26, 0x45	; 69
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e4       	ldi	r30, 0x45	; 69
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8b 7f       	andi	r24, 0xFB	; 251
    182e:	8c 93       	st	X, r24
	#endif
	/******************************************************************************/


	// Turn Global Interrupt ON
	GIE_enuEnable();
    1830:	0e 94 45 10 	call	0x208a	; 0x208a <GIE_enuEnable>


}
    1834:	cf 91       	pop	r28
    1836:	df 91       	pop	r29
    1838:	08 95       	ret

0000183a <TIMER2_voidStart>:

void TIMER2_voidStart(void){
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		SET_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <TIMER2_voidStop>:

void TIMER2_voidStop(void){
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		CLR_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <TIMER2_voidScheduleTask>:

uint8_t TIMER2_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    1856:	ef 92       	push	r14
    1858:	ff 92       	push	r15
    185a:	0f 93       	push	r16
    185c:	1f 93       	push	r17
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	60 97       	sbiw	r28, 0x10	; 16
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	9a 87       	std	Y+10, r25	; 0x0a
    1874:	89 87       	std	Y+9, r24	; 0x09
    1876:	4b 87       	std	Y+11, r20	; 0x0b
    1878:	5c 87       	std	Y+12, r21	; 0x0c
    187a:	6d 87       	std	Y+13, r22	; 0x0d
    187c:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    187e:	1d 82       	std	Y+5, r1	; 0x05
    1880:	1e 82       	std	Y+6, r1	; 0x06
    1882:	1f 82       	std	Y+7, r1	; 0x07
    1884:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR2 & 0x07){
    1886:	e5 e4       	ldi	r30, 0x45	; 69
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9c 01       	movw	r18, r24
    1892:	27 70       	andi	r18, 0x07	; 7
    1894:	30 70       	andi	r19, 0x00	; 0
    1896:	38 8b       	std	Y+16, r19	; 0x10
    1898:	2f 87       	std	Y+15, r18	; 0x0f
    189a:	8f 85       	ldd	r24, Y+15	; 0x0f
    189c:	98 89       	ldd	r25, Y+16	; 0x10
    189e:	83 30       	cpi	r24, 0x03	; 3
    18a0:	91 05       	cpc	r25, r1
    18a2:	69 f1       	breq	.+90     	; 0x18fe <TIMER2_voidScheduleTask+0xa8>
    18a4:	2f 85       	ldd	r18, Y+15	; 0x0f
    18a6:	38 89       	ldd	r19, Y+16	; 0x10
    18a8:	24 30       	cpi	r18, 0x04	; 4
    18aa:	31 05       	cpc	r19, r1
    18ac:	5c f4       	brge	.+22     	; 0x18c4 <TIMER2_voidScheduleTask+0x6e>
    18ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b0:	98 89       	ldd	r25, Y+16	; 0x10
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	91 05       	cpc	r25, r1
    18b6:	89 f0       	breq	.+34     	; 0x18da <TIMER2_voidScheduleTask+0x84>
    18b8:	2f 85       	ldd	r18, Y+15	; 0x0f
    18ba:	38 89       	ldd	r19, Y+16	; 0x10
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	a9 f0       	breq	.+42     	; 0x18ec <TIMER2_voidScheduleTask+0x96>
    18c2:	37 c0       	rjmp	.+110    	; 0x1932 <TIMER2_voidScheduleTask+0xdc>
    18c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c6:	98 89       	ldd	r25, Y+16	; 0x10
    18c8:	84 30       	cpi	r24, 0x04	; 4
    18ca:	91 05       	cpc	r25, r1
    18cc:	09 f1       	breq	.+66     	; 0x1910 <TIMER2_voidScheduleTask+0xba>
    18ce:	2f 85       	ldd	r18, Y+15	; 0x0f
    18d0:	38 89       	ldd	r19, Y+16	; 0x10
    18d2:	25 30       	cpi	r18, 0x05	; 5
    18d4:	31 05       	cpc	r19, r1
    18d6:	29 f1       	breq	.+74     	; 0x1922 <TIMER2_voidScheduleTask+0xcc>
    18d8:	2c c0       	rjmp	.+88     	; 0x1932 <TIMER2_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	8d 83       	std	Y+5, r24	; 0x05
    18e4:	9e 83       	std	Y+6, r25	; 0x06
    18e6:	af 83       	std	Y+7, r26	; 0x07
    18e8:	b8 87       	std	Y+8, r27	; 0x08
    18ea:	23 c0       	rjmp	.+70     	; 0x1932 <TIMER2_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    18ec:	88 e0       	ldi	r24, 0x08	; 8
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	8d 83       	std	Y+5, r24	; 0x05
    18f6:	9e 83       	std	Y+6, r25	; 0x06
    18f8:	af 83       	std	Y+7, r26	; 0x07
    18fa:	b8 87       	std	Y+8, r27	; 0x08
    18fc:	1a c0       	rjmp	.+52     	; 0x1932 <TIMER2_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    18fe:	80 e4       	ldi	r24, 0x40	; 64
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a0 e0       	ldi	r26, 0x00	; 0
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	8d 83       	std	Y+5, r24	; 0x05
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	af 83       	std	Y+7, r26	; 0x07
    190c:	b8 87       	std	Y+8, r27	; 0x08
    190e:	11 c0       	rjmp	.+34     	; 0x1932 <TIMER2_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	a0 e0       	ldi	r26, 0x00	; 0
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	8d 83       	std	Y+5, r24	; 0x05
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	af 83       	std	Y+7, r26	; 0x07
    191e:	b8 87       	std	Y+8, r27	; 0x08
    1920:	08 c0       	rjmp	.+16     	; 0x1932 <TIMER2_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	94 e0       	ldi	r25, 0x04	; 4
    1926:	a0 e0       	ldi	r26, 0x00	; 0
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	8d 83       	std	Y+5, r24	; 0x05
    192c:	9e 83       	std	Y+6, r25	; 0x06
    192e:	af 83       	std	Y+7, r26	; 0x07
    1930:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    1932:	6b 85       	ldd	r22, Y+11	; 0x0b
    1934:	7c 85       	ldd	r23, Y+12	; 0x0c
    1936:	8d 85       	ldd	r24, Y+13	; 0x0d
    1938:	9e 85       	ldd	r25, Y+14	; 0x0e
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	34 e2       	ldi	r19, 0x24	; 36
    193e:	44 ef       	ldi	r20, 0xF4	; 244
    1940:	5a e4       	ldi	r21, 0x4A	; 74
    1942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1946:	dc 01       	movw	r26, r24
    1948:	cb 01       	movw	r24, r22
    194a:	7c 01       	movw	r14, r24
    194c:	8d 01       	movw	r16, r26
    194e:	6d 81       	ldd	r22, Y+5	; 0x05
    1950:	7e 81       	ldd	r23, Y+6	; 0x06
    1952:	8f 81       	ldd	r24, Y+7	; 0x07
    1954:	98 85       	ldd	r25, Y+8	; 0x08
    1956:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    195a:	9b 01       	movw	r18, r22
    195c:	ac 01       	movw	r20, r24
    195e:	c8 01       	movw	r24, r16
    1960:	b7 01       	movw	r22, r14
    1962:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	ab 83       	std	Y+3, r26	; 0x03
    1970:	bc 83       	std	Y+4, r27	; 0x04
		}

	#endif


		TIMERS_ISR_Functions[2] = TaskCallback;
    1972:	89 85       	ldd	r24, Y+9	; 0x09
    1974:	9a 85       	ldd	r25, Y+10	; 0x0a
    1976:	90 93 8f 01 	sts	0x018F, r25
    197a:	80 93 8e 01 	sts	0x018E, r24
		TIMER2_voidStart();
    197e:	0e 94 1d 0c 	call	0x183a	; 0x183a <TIMER2_voidStart>
	return 0;
    1982:	80 e0       	ldi	r24, 0x00	; 0

}
    1984:	60 96       	adiw	r28, 0x10	; 16
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	08 95       	ret

0000199e <TIMER2_voidSetPWM>:


void  TIMER2_voidSetPWM(uint8_t copy_u8DutyCycle){
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	0f 92       	push	r0
    19a4:	cd b7       	in	r28, 0x3d	; 61
    19a6:	de b7       	in	r29, 0x3e	; 62
    19a8:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Avr32 does has floating point operation
	 * **/


	OCR2_REG = (uint8_t)(((uint16_t)copy_u8DutyCycle * 256) / 100);
    19aa:	e3 e4       	ldi	r30, 0x43	; 67
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	88 2f       	mov	r24, r24
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	98 2f       	mov	r25, r24
    19b6:	88 27       	eor	r24, r24
    19b8:	24 e6       	ldi	r18, 0x64	; 100
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	b9 01       	movw	r22, r18
    19be:	0e 94 39 21 	call	0x4272	; 0x4272 <__udivmodhi4>
    19c2:	cb 01       	movw	r24, r22
    19c4:	80 83       	st	Z, r24
}
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <__vector_11>:
/*******************************************************************************************************/

ISR(TIMER0_OVF_vect){
    19ce:	1f 92       	push	r1
    19d0:	0f 92       	push	r0
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	0f 92       	push	r0
    19d6:	11 24       	eor	r1, r1
    19d8:	2f 93       	push	r18
    19da:	3f 93       	push	r19
    19dc:	4f 93       	push	r20
    19de:	5f 93       	push	r21
    19e0:	6f 93       	push	r22
    19e2:	7f 93       	push	r23
    19e4:	8f 93       	push	r24
    19e6:	9f 93       	push	r25
    19e8:	af 93       	push	r26
    19ea:	bf 93       	push	r27
    19ec:	ef 93       	push	r30
    19ee:	ff 93       	push	r31
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    19f8:	80 91 7e 01 	lds	r24, 0x017E
    19fc:	90 91 7f 01 	lds	r25, 0x017F
    1a00:	a0 91 80 01 	lds	r26, 0x0180
    1a04:	b0 91 81 01 	lds	r27, 0x0181
    1a08:	01 96       	adiw	r24, 0x01	; 1
    1a0a:	a1 1d       	adc	r26, r1
    1a0c:	b1 1d       	adc	r27, r1
    1a0e:	80 93 7e 01 	sts	0x017E, r24
    1a12:	90 93 7f 01 	sts	0x017F, r25
    1a16:	a0 93 80 01 	sts	0x0180, r26
    1a1a:	b0 93 81 01 	sts	0x0181, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    1a1e:	20 91 7e 01 	lds	r18, 0x017E
    1a22:	30 91 7f 01 	lds	r19, 0x017F
    1a26:	40 91 80 01 	lds	r20, 0x0180
    1a2a:	50 91 81 01 	lds	r21, 0x0181
    1a2e:	80 91 90 01 	lds	r24, 0x0190
    1a32:	90 91 91 01 	lds	r25, 0x0191
    1a36:	a0 91 92 01 	lds	r26, 0x0192
    1a3a:	b0 91 93 01 	lds	r27, 0x0193
    1a3e:	28 17       	cp	r18, r24
    1a40:	39 07       	cpc	r19, r25
    1a42:	4a 07       	cpc	r20, r26
    1a44:	5b 07       	cpc	r21, r27
    1a46:	68 f0       	brcs	.+26     	; 0x1a62 <__vector_11+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    1a48:	10 92 7e 01 	sts	0x017E, r1
    1a4c:	10 92 7f 01 	sts	0x017F, r1
    1a50:	10 92 80 01 	sts	0x0180, r1
    1a54:	10 92 81 01 	sts	0x0181, r1
		TIMERS_ISR_Functions[0]();
    1a58:	e0 91 8a 01 	lds	r30, 0x018A
    1a5c:	f0 91 8b 01 	lds	r31, 0x018B
    1a60:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	ff 91       	pop	r31
    1a68:	ef 91       	pop	r30
    1a6a:	bf 91       	pop	r27
    1a6c:	af 91       	pop	r26
    1a6e:	9f 91       	pop	r25
    1a70:	8f 91       	pop	r24
    1a72:	7f 91       	pop	r23
    1a74:	6f 91       	pop	r22
    1a76:	5f 91       	pop	r21
    1a78:	4f 91       	pop	r20
    1a7a:	3f 91       	pop	r19
    1a7c:	2f 91       	pop	r18
    1a7e:	0f 90       	pop	r0
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	0f 90       	pop	r0
    1a84:	1f 90       	pop	r1
    1a86:	18 95       	reti

00001a88 <__vector_10>:

ISR(TIMER0_COMP_vect){
    1a88:	1f 92       	push	r1
    1a8a:	0f 92       	push	r0
    1a8c:	0f b6       	in	r0, 0x3f	; 63
    1a8e:	0f 92       	push	r0
    1a90:	11 24       	eor	r1, r1
    1a92:	2f 93       	push	r18
    1a94:	3f 93       	push	r19
    1a96:	4f 93       	push	r20
    1a98:	5f 93       	push	r21
    1a9a:	6f 93       	push	r22
    1a9c:	7f 93       	push	r23
    1a9e:	8f 93       	push	r24
    1aa0:	9f 93       	push	r25
    1aa2:	af 93       	push	r26
    1aa4:	bf 93       	push	r27
    1aa6:	ef 93       	push	r30
    1aa8:	ff 93       	push	r31
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    1ab2:	80 91 7e 01 	lds	r24, 0x017E
    1ab6:	90 91 7f 01 	lds	r25, 0x017F
    1aba:	a0 91 80 01 	lds	r26, 0x0180
    1abe:	b0 91 81 01 	lds	r27, 0x0181
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	a1 1d       	adc	r26, r1
    1ac6:	b1 1d       	adc	r27, r1
    1ac8:	80 93 7e 01 	sts	0x017E, r24
    1acc:	90 93 7f 01 	sts	0x017F, r25
    1ad0:	a0 93 80 01 	sts	0x0180, r26
    1ad4:	b0 93 81 01 	sts	0x0181, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    1ad8:	20 91 7e 01 	lds	r18, 0x017E
    1adc:	30 91 7f 01 	lds	r19, 0x017F
    1ae0:	40 91 80 01 	lds	r20, 0x0180
    1ae4:	50 91 81 01 	lds	r21, 0x0181
    1ae8:	80 91 90 01 	lds	r24, 0x0190
    1aec:	90 91 91 01 	lds	r25, 0x0191
    1af0:	a0 91 92 01 	lds	r26, 0x0192
    1af4:	b0 91 93 01 	lds	r27, 0x0193
    1af8:	28 17       	cp	r18, r24
    1afa:	39 07       	cpc	r19, r25
    1afc:	4a 07       	cpc	r20, r26
    1afe:	5b 07       	cpc	r21, r27
    1b00:	68 f0       	brcs	.+26     	; 0x1b1c <__vector_10+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    1b02:	10 92 7e 01 	sts	0x017E, r1
    1b06:	10 92 7f 01 	sts	0x017F, r1
    1b0a:	10 92 80 01 	sts	0x0180, r1
    1b0e:	10 92 81 01 	sts	0x0181, r1
		TIMERS_ISR_Functions[0]();
    1b12:	e0 91 8a 01 	lds	r30, 0x018A
    1b16:	f0 91 8b 01 	lds	r31, 0x018B
    1b1a:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	ff 91       	pop	r31
    1b22:	ef 91       	pop	r30
    1b24:	bf 91       	pop	r27
    1b26:	af 91       	pop	r26
    1b28:	9f 91       	pop	r25
    1b2a:	8f 91       	pop	r24
    1b2c:	7f 91       	pop	r23
    1b2e:	6f 91       	pop	r22
    1b30:	5f 91       	pop	r21
    1b32:	4f 91       	pop	r20
    1b34:	3f 91       	pop	r19
    1b36:	2f 91       	pop	r18
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	0f 90       	pop	r0
    1b3e:	1f 90       	pop	r1
    1b40:	18 95       	reti

00001b42 <__vector_9>:

ISR(TIMER1_OVF_vect){
    1b42:	1f 92       	push	r1
    1b44:	0f 92       	push	r0
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	0f 92       	push	r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	2f 93       	push	r18
    1b4e:	3f 93       	push	r19
    1b50:	4f 93       	push	r20
    1b52:	5f 93       	push	r21
    1b54:	6f 93       	push	r22
    1b56:	7f 93       	push	r23
    1b58:	8f 93       	push	r24
    1b5a:	9f 93       	push	r25
    1b5c:	af 93       	push	r26
    1b5e:	bf 93       	push	r27
    1b60:	ef 93       	push	r30
    1b62:	ff 93       	push	r31
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62

	TIMER1_CURRENT_NTICKS++;
    1b6c:	80 91 82 01 	lds	r24, 0x0182
    1b70:	90 91 83 01 	lds	r25, 0x0183
    1b74:	a0 91 84 01 	lds	r26, 0x0184
    1b78:	b0 91 85 01 	lds	r27, 0x0185
    1b7c:	01 96       	adiw	r24, 0x01	; 1
    1b7e:	a1 1d       	adc	r26, r1
    1b80:	b1 1d       	adc	r27, r1
    1b82:	80 93 82 01 	sts	0x0182, r24
    1b86:	90 93 83 01 	sts	0x0183, r25
    1b8a:	a0 93 84 01 	sts	0x0184, r26
    1b8e:	b0 93 85 01 	sts	0x0185, r27

	if(TIMER1_CURRENT_NTICKS >= TIMER1_TARGET_NTICKS){
    1b92:	20 91 82 01 	lds	r18, 0x0182
    1b96:	30 91 83 01 	lds	r19, 0x0183
    1b9a:	40 91 84 01 	lds	r20, 0x0184
    1b9e:	50 91 85 01 	lds	r21, 0x0185
    1ba2:	80 91 94 01 	lds	r24, 0x0194
    1ba6:	90 91 95 01 	lds	r25, 0x0195
    1baa:	a0 91 96 01 	lds	r26, 0x0196
    1bae:	b0 91 97 01 	lds	r27, 0x0197
    1bb2:	28 17       	cp	r18, r24
    1bb4:	39 07       	cpc	r19, r25
    1bb6:	4a 07       	cpc	r20, r26
    1bb8:	5b 07       	cpc	r21, r27
    1bba:	68 f0       	brcs	.+26     	; 0x1bd6 <__vector_9+0x94>
		TIMER1_CURRENT_NTICKS = 0;
    1bbc:	10 92 82 01 	sts	0x0182, r1
    1bc0:	10 92 83 01 	sts	0x0183, r1
    1bc4:	10 92 84 01 	sts	0x0184, r1
    1bc8:	10 92 85 01 	sts	0x0185, r1
		TIMERS_ISR_Functions[1]();
    1bcc:	e0 91 8c 01 	lds	r30, 0x018C
    1bd0:	f0 91 8d 01 	lds	r31, 0x018D
    1bd4:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	0f 90       	pop	r0
    1bf8:	1f 90       	pop	r1
    1bfa:	18 95       	reti

00001bfc <__vector_7>:

ISR(TIMER1_COMPA_vect){
    1bfc:	1f 92       	push	r1
    1bfe:	0f 92       	push	r0
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	0f 92       	push	r0
    1c04:	11 24       	eor	r1, r1
    1c06:	2f 93       	push	r18
    1c08:	3f 93       	push	r19
    1c0a:	4f 93       	push	r20
    1c0c:	5f 93       	push	r21
    1c0e:	6f 93       	push	r22
    1c10:	7f 93       	push	r23
    1c12:	8f 93       	push	r24
    1c14:	9f 93       	push	r25
    1c16:	af 93       	push	r26
    1c18:	bf 93       	push	r27
    1c1a:	ef 93       	push	r30
    1c1c:	ff 93       	push	r31
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62

	TIMER1_CURRENT_NTICKS++;
    1c26:	80 91 82 01 	lds	r24, 0x0182
    1c2a:	90 91 83 01 	lds	r25, 0x0183
    1c2e:	a0 91 84 01 	lds	r26, 0x0184
    1c32:	b0 91 85 01 	lds	r27, 0x0185
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	a1 1d       	adc	r26, r1
    1c3a:	b1 1d       	adc	r27, r1
    1c3c:	80 93 82 01 	sts	0x0182, r24
    1c40:	90 93 83 01 	sts	0x0183, r25
    1c44:	a0 93 84 01 	sts	0x0184, r26
    1c48:	b0 93 85 01 	sts	0x0185, r27

	if(TIMER1_CURRENT_NTICKS >= TIMER1_TARGET_NTICKS){
    1c4c:	20 91 82 01 	lds	r18, 0x0182
    1c50:	30 91 83 01 	lds	r19, 0x0183
    1c54:	40 91 84 01 	lds	r20, 0x0184
    1c58:	50 91 85 01 	lds	r21, 0x0185
    1c5c:	80 91 94 01 	lds	r24, 0x0194
    1c60:	90 91 95 01 	lds	r25, 0x0195
    1c64:	a0 91 96 01 	lds	r26, 0x0196
    1c68:	b0 91 97 01 	lds	r27, 0x0197
    1c6c:	28 17       	cp	r18, r24
    1c6e:	39 07       	cpc	r19, r25
    1c70:	4a 07       	cpc	r20, r26
    1c72:	5b 07       	cpc	r21, r27
    1c74:	68 f0       	brcs	.+26     	; 0x1c90 <__vector_7+0x94>
		TIMER1_CURRENT_NTICKS = 0;
    1c76:	10 92 82 01 	sts	0x0182, r1
    1c7a:	10 92 83 01 	sts	0x0183, r1
    1c7e:	10 92 84 01 	sts	0x0184, r1
    1c82:	10 92 85 01 	sts	0x0185, r1
		TIMERS_ISR_Functions[1]();
    1c86:	e0 91 8c 01 	lds	r30, 0x018C
    1c8a:	f0 91 8d 01 	lds	r31, 0x018D
    1c8e:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	ff 91       	pop	r31
    1c96:	ef 91       	pop	r30
    1c98:	bf 91       	pop	r27
    1c9a:	af 91       	pop	r26
    1c9c:	9f 91       	pop	r25
    1c9e:	8f 91       	pop	r24
    1ca0:	7f 91       	pop	r23
    1ca2:	6f 91       	pop	r22
    1ca4:	5f 91       	pop	r21
    1ca6:	4f 91       	pop	r20
    1ca8:	3f 91       	pop	r19
    1caa:	2f 91       	pop	r18
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	0f 90       	pop	r0
    1cb2:	1f 90       	pop	r1
    1cb4:	18 95       	reti

00001cb6 <__vector_5>:


ISR(TIMER2_OVF_vect){
    1cb6:	1f 92       	push	r1
    1cb8:	0f 92       	push	r0
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	0f 92       	push	r0
    1cbe:	11 24       	eor	r1, r1
    1cc0:	2f 93       	push	r18
    1cc2:	3f 93       	push	r19
    1cc4:	4f 93       	push	r20
    1cc6:	5f 93       	push	r21
    1cc8:	6f 93       	push	r22
    1cca:	7f 93       	push	r23
    1ccc:	8f 93       	push	r24
    1cce:	9f 93       	push	r25
    1cd0:	af 93       	push	r26
    1cd2:	bf 93       	push	r27
    1cd4:	ef 93       	push	r30
    1cd6:	ff 93       	push	r31
    1cd8:	df 93       	push	r29
    1cda:	cf 93       	push	r28
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    1ce0:	80 91 86 01 	lds	r24, 0x0186
    1ce4:	90 91 87 01 	lds	r25, 0x0187
    1ce8:	a0 91 88 01 	lds	r26, 0x0188
    1cec:	b0 91 89 01 	lds	r27, 0x0189
    1cf0:	01 96       	adiw	r24, 0x01	; 1
    1cf2:	a1 1d       	adc	r26, r1
    1cf4:	b1 1d       	adc	r27, r1
    1cf6:	80 93 86 01 	sts	0x0186, r24
    1cfa:	90 93 87 01 	sts	0x0187, r25
    1cfe:	a0 93 88 01 	sts	0x0188, r26
    1d02:	b0 93 89 01 	sts	0x0189, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    1d06:	20 91 86 01 	lds	r18, 0x0186
    1d0a:	30 91 87 01 	lds	r19, 0x0187
    1d0e:	40 91 88 01 	lds	r20, 0x0188
    1d12:	50 91 89 01 	lds	r21, 0x0189
    1d16:	80 91 98 01 	lds	r24, 0x0198
    1d1a:	90 91 99 01 	lds	r25, 0x0199
    1d1e:	a0 91 9a 01 	lds	r26, 0x019A
    1d22:	b0 91 9b 01 	lds	r27, 0x019B
    1d26:	28 17       	cp	r18, r24
    1d28:	39 07       	cpc	r19, r25
    1d2a:	4a 07       	cpc	r20, r26
    1d2c:	5b 07       	cpc	r21, r27
    1d2e:	68 f0       	brcs	.+26     	; 0x1d4a <__vector_5+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    1d30:	10 92 86 01 	sts	0x0186, r1
    1d34:	10 92 87 01 	sts	0x0187, r1
    1d38:	10 92 88 01 	sts	0x0188, r1
    1d3c:	10 92 89 01 	sts	0x0189, r1
		TIMERS_ISR_Functions[2]();
    1d40:	e0 91 8e 01 	lds	r30, 0x018E
    1d44:	f0 91 8f 01 	lds	r31, 0x018F
    1d48:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything
}
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	ff 91       	pop	r31
    1d50:	ef 91       	pop	r30
    1d52:	bf 91       	pop	r27
    1d54:	af 91       	pop	r26
    1d56:	9f 91       	pop	r25
    1d58:	8f 91       	pop	r24
    1d5a:	7f 91       	pop	r23
    1d5c:	6f 91       	pop	r22
    1d5e:	5f 91       	pop	r21
    1d60:	4f 91       	pop	r20
    1d62:	3f 91       	pop	r19
    1d64:	2f 91       	pop	r18
    1d66:	0f 90       	pop	r0
    1d68:	0f be       	out	0x3f, r0	; 63
    1d6a:	0f 90       	pop	r0
    1d6c:	1f 90       	pop	r1
    1d6e:	18 95       	reti

00001d70 <__vector_4>:

ISR(TIMER2_COMP_vect){
    1d70:	1f 92       	push	r1
    1d72:	0f 92       	push	r0
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	0f 92       	push	r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	2f 93       	push	r18
    1d7c:	3f 93       	push	r19
    1d7e:	4f 93       	push	r20
    1d80:	5f 93       	push	r21
    1d82:	6f 93       	push	r22
    1d84:	7f 93       	push	r23
    1d86:	8f 93       	push	r24
    1d88:	9f 93       	push	r25
    1d8a:	af 93       	push	r26
    1d8c:	bf 93       	push	r27
    1d8e:	ef 93       	push	r30
    1d90:	ff 93       	push	r31
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    1d9a:	80 91 86 01 	lds	r24, 0x0186
    1d9e:	90 91 87 01 	lds	r25, 0x0187
    1da2:	a0 91 88 01 	lds	r26, 0x0188
    1da6:	b0 91 89 01 	lds	r27, 0x0189
    1daa:	01 96       	adiw	r24, 0x01	; 1
    1dac:	a1 1d       	adc	r26, r1
    1dae:	b1 1d       	adc	r27, r1
    1db0:	80 93 86 01 	sts	0x0186, r24
    1db4:	90 93 87 01 	sts	0x0187, r25
    1db8:	a0 93 88 01 	sts	0x0188, r26
    1dbc:	b0 93 89 01 	sts	0x0189, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    1dc0:	20 91 86 01 	lds	r18, 0x0186
    1dc4:	30 91 87 01 	lds	r19, 0x0187
    1dc8:	40 91 88 01 	lds	r20, 0x0188
    1dcc:	50 91 89 01 	lds	r21, 0x0189
    1dd0:	80 91 98 01 	lds	r24, 0x0198
    1dd4:	90 91 99 01 	lds	r25, 0x0199
    1dd8:	a0 91 9a 01 	lds	r26, 0x019A
    1ddc:	b0 91 9b 01 	lds	r27, 0x019B
    1de0:	28 17       	cp	r18, r24
    1de2:	39 07       	cpc	r19, r25
    1de4:	4a 07       	cpc	r20, r26
    1de6:	5b 07       	cpc	r21, r27
    1de8:	68 f0       	brcs	.+26     	; 0x1e04 <__vector_4+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    1dea:	10 92 86 01 	sts	0x0186, r1
    1dee:	10 92 87 01 	sts	0x0187, r1
    1df2:	10 92 88 01 	sts	0x0188, r1
    1df6:	10 92 89 01 	sts	0x0189, r1
		TIMERS_ISR_Functions[2]();
    1dfa:	e0 91 8e 01 	lds	r30, 0x018E
    1dfe:	f0 91 8f 01 	lds	r31, 0x018F
    1e02:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything

}
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	ff 91       	pop	r31
    1e0a:	ef 91       	pop	r30
    1e0c:	bf 91       	pop	r27
    1e0e:	af 91       	pop	r26
    1e10:	9f 91       	pop	r25
    1e12:	8f 91       	pop	r24
    1e14:	7f 91       	pop	r23
    1e16:	6f 91       	pop	r22
    1e18:	5f 91       	pop	r21
    1e1a:	4f 91       	pop	r20
    1e1c:	3f 91       	pop	r19
    1e1e:	2f 91       	pop	r18
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	0f 90       	pop	r0
    1e26:	1f 90       	pop	r1
    1e28:	18 95       	reti

00001e2a <SPI_vidInit>:
#include "SPI_priv.h"
/************************************************************************************/



void SPI_vidInit(void){
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62

		SET_BIT(SPCR_REG, SPCR_MSTR);

	#elif(SPI_MODE == SPI_SLAVE_MODE)

		DIO_enuSetPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, DIO_u8OUTPUT);
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	66 e0       	ldi	r22, 0x06	; 6
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, DIO_u8INPUT);
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	65 e0       	ldi	r22, 0x05	; 5
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>

		DIO_enuSetPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, DIO_u8INPUT);
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	67 e0       	ldi	r22, 0x07	; 7
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_SS_PORT, SPI_SS_PIN, DIO_u8INPUT);
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	64 e0       	ldi	r22, 0x04	; 4
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>

		CLR_BIT(SPCR_REG, SPCR_MSTR);
    1e5a:	ad e2       	ldi	r26, 0x2D	; 45
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	ed e2       	ldi	r30, 0x2D	; 45
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	8f 7e       	andi	r24, 0xEF	; 239
    1e66:	8c 93       	st	X, r24
	#endif


	//! Data order
	#if(SPI_DORD == SPI_DORD_MSB)
		SET_BIT(SPCR_REG, SPCR_DORD);
    1e68:	ad e2       	ldi	r26, 0x2D	; 45
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	ed e2       	ldi	r30, 0x2D	; 45
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	80 62       	ori	r24, 0x20	; 32
    1e74:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR0 );
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
		CLR_BIT(SPSR_REG, SPSR_SPI2x);

	#elif(SPI_PRES_SELECT == SPI_PRES_16)
		SET_BIT(SPCR_REG, SPCR_SPR0 );
    1e76:	ad e2       	ldi	r26, 0x2D	; 45
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	ed e2       	ldi	r30, 0x2D	; 45
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	81 60       	ori	r24, 0x01	; 1
    1e82:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
    1e84:	ad e2       	ldi	r26, 0x2D	; 45
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	ed e2       	ldi	r30, 0x2D	; 45
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8d 7f       	andi	r24, 0xFD	; 253
    1e90:	8c 93       	st	X, r24
		CLR_BIT(SPSR_REG, SPSR_SPI2x);
    1e92:	ae e2       	ldi	r26, 0x2E	; 46
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	ee e2       	ldi	r30, 0x2E	; 46
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	8e 7f       	andi	r24, 0xFE	; 254
    1e9e:	8c 93       	st	X, r24

	#endif


	/*	Enable SPI	*/
	SET_BIT(SPCR_REG, SPCR_SPE);
    1ea0:	ad e2       	ldi	r26, 0x2D	; 45
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	ed e2       	ldi	r30, 0x2D	; 45
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	80 64       	ori	r24, 0x40	; 64
    1eac:	8c 93       	st	X, r24
}
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <SPI_enuMasterTransmit_Char>:



ErrorStatus_t SPI_enuMasterTransmit_Char(uint8_t copy_u8Data){
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <SPI_enuMasterTransmit_Char+0xa>
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1ec4:	19 82       	std	Y+1, r1	; 0x01
		SPDR_REG = copy_u8Data;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		SPDR_REG = flipBits(copy_u8Data);
    1ec6:	0f e2       	ldi	r16, 0x2F	; 47
    1ec8:	10 e0       	ldi	r17, 0x00	; 0
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	0e 94 05 10 	call	0x200a	; 0x200a <flipBits>
    1ed0:	f8 01       	movw	r30, r16
    1ed2:	80 83       	st	Z, r24
	#endif


	/*! Wait for transmission complete */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    1ed4:	ee e2       	ldi	r30, 0x2E	; 46
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 23       	and	r24, r24
    1edc:	dc f7       	brge	.-10     	; 0x1ed4 <SPI_enuMasterTransmit_Char+0x20>


	Local_enu_ErrorState = ERROR_STATUS_OK;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	08 95       	ret

00001ef2 <SPI_enuMasterTransmit_String>:



ErrorStatus_t SPI_enuMasterTransmit_String(uint8_t* copy_pu8Data){
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <SPI_enuMasterTransmit_String+0x6>
    1ef8:	00 d0       	rcall	.+0      	; 0x1efa <SPI_enuMasterTransmit_String+0x8>
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	9b 83       	std	Y+3, r25	; 0x03
    1f00:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1f02:	19 82       	std	Y+1, r1	; 0x01


	if(copy_pu8Data == NULL){
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	19 f4       	brne	.+6      	; 0x1f12 <SPI_enuMasterTransmit_String+0x20>
		return Local_enu_ErrorState;
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	8c 83       	std	Y+4, r24	; 0x04
    1f10:	13 c0       	rjmp	.+38     	; 0x1f38 <SPI_enuMasterTransmit_String+0x46>

	}else{

		do{
			SPI_enuMasterTransmit_Char(*copy_pu8Data);
    1f12:	ea 81       	ldd	r30, Y+2	; 0x02
    1f14:	fb 81       	ldd	r31, Y+3	; 0x03
    1f16:	80 81       	ld	r24, Z
    1f18:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <SPI_enuMasterTransmit_Char>
			copy_pu8Data++;
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f20:	01 96       	adiw	r24, 0x01	; 1
    1f22:	9b 83       	std	Y+3, r25	; 0x03
    1f24:	8a 83       	std	Y+2, r24	; 0x02
		}while(*copy_pu8Data != '\0');
    1f26:	ea 81       	ldd	r30, Y+2	; 0x02
    1f28:	fb 81       	ldd	r31, Y+3	; 0x03
    1f2a:	80 81       	ld	r24, Z
    1f2c:	88 23       	and	r24, r24
    1f2e:	89 f7       	brne	.-30     	; 0x1f12 <SPI_enuMasterTransmit_String+0x20>
	}

	Local_enu_ErrorState = ERROR_STATUS_OK;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	8c 83       	std	Y+4, r24	; 0x04
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <SPI_enuSlaveReceive_Char>:



ErrorStatus_t SPI_enuSlaveReceive_Char(uint8_t* copy_pu8Data){
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	00 d0       	rcall	.+0      	; 0x1f4e <SPI_enuSlaveReceive_Char+0x6>
    1f4e:	0f 92       	push	r0
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9b 83       	std	Y+3, r25	; 0x03
    1f56:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1f58:	19 82       	std	Y+1, r1	; 0x01


	/* Wait for successful reception of data from master */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    1f5a:	ee e2       	ldi	r30, 0x2E	; 46
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	88 23       	and	r24, r24
    1f62:	dc f7       	brge	.-10     	; 0x1f5a <SPI_enuSlaveReceive_Char+0x12>

	*copy_pu8Data = SPDR_REG;
    1f64:	ef e2       	ldi	r30, 0x2F	; 47
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f6c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f6e:	80 83       	st	Z, r24
		*copy_pu8Data = SPDR_REG;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		*copy_pu8Data= flipBits(SPDR_REG);
    1f70:	ef e2       	ldi	r30, 0x2F	; 47
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	0e 94 05 10 	call	0x200a	; 0x200a <flipBits>
    1f7a:	ea 81       	ldd	r30, Y+2	; 0x02
    1f7c:	fb 81       	ldd	r31, Y+3	; 0x03
    1f7e:	80 83       	st	Z, r24
	#endif




	Local_enu_ErrorState = ERROR_STATUS_OK;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <SPI_enuSlaveReceive_String>:



ErrorStatus_t SPI_enuSlaveReceive_String(uint8_t* copy_pu8Data){
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	27 97       	sbiw	r28, 0x07	; 7
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	9d 83       	std	Y+5, r25	; 0x05
    1fa8:	8c 83       	std	Y+4, r24	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1faa:	1b 82       	std	Y+3, r1	; 0x03


	if(copy_pu8Data == NULL){
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	19 f4       	brne	.+6      	; 0x1fba <SPI_enuSlaveReceive_String+0x28>
		return Local_enu_ErrorState;
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	8e 83       	std	Y+6, r24	; 0x06
    1fb8:	1e c0       	rjmp	.+60     	; 0x1ff6 <SPI_enuSlaveReceive_String+0x64>
	}else{

		// Intiate head of buffer similar to linked-list idea
		uint8_t *Local_u8Temp = copy_pu8Data;
    1fba:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01

		do{
			SPI_enuSlaveReceive_Char(Local_u8Temp);
    1fc2:	89 81       	ldd	r24, Y+1	; 0x01
    1fc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc6:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <SPI_enuSlaveReceive_Char>


		}while(*(Local_u8Temp++) != '\0');
    1fca:	e9 81       	ldd	r30, Y+1	; 0x01
    1fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fce:	80 81       	ld	r24, Z
    1fd0:	8f 83       	std	Y+7, r24	; 0x07
    1fd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd4:	88 23       	and	r24, r24
    1fd6:	11 f0       	breq	.+4      	; 0x1fdc <SPI_enuSlaveReceive_String+0x4a>
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	8f 83       	std	Y+7, r24	; 0x07
    1fdc:	8f 81       	ldd	r24, Y+7	; 0x07
    1fde:	29 81       	ldd	r18, Y+1	; 0x01
    1fe0:	3a 81       	ldd	r19, Y+2	; 0x02
    1fe2:	2f 5f       	subi	r18, 0xFF	; 255
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe6:	3a 83       	std	Y+2, r19	; 0x02
    1fe8:	29 83       	std	Y+1, r18	; 0x01
    1fea:	88 23       	and	r24, r24
    1fec:	51 f7       	brne	.-44     	; 0x1fc2 <SPI_enuSlaveReceive_String+0x30>
	}


	Local_enu_ErrorState = ERROR_STATUS_OK;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enu_ErrorState;
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	8e 83       	std	Y+6, r24	; 0x06
    1ff6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1ff8:	27 96       	adiw	r28, 0x07	; 7
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <flipBits>:

static inline uint8_t flipBits(uint8_t byte) {
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	0f 92       	push	r0
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	82 95       	swap	r24
    201a:	8f 70       	andi	r24, 0x0F	; 15
    201c:	28 2f       	mov	r18, r24
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	82 95       	swap	r24
    2026:	92 95       	swap	r25
    2028:	90 7f       	andi	r25, 0xF0	; 240
    202a:	98 27       	eor	r25, r24
    202c:	80 7f       	andi	r24, 0xF0	; 240
    202e:	98 27       	eor	r25, r24
    2030:	82 2b       	or	r24, r18
    2032:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	88 2f       	mov	r24, r24
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	8c 7c       	andi	r24, 0xCC	; 204
    203c:	90 70       	andi	r25, 0x00	; 0
    203e:	95 95       	asr	r25
    2040:	87 95       	ror	r24
    2042:	95 95       	asr	r25
    2044:	87 95       	ror	r24
    2046:	28 2f       	mov	r18, r24
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	83 73       	andi	r24, 0x33	; 51
    2050:	90 70       	andi	r25, 0x00	; 0
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	82 2b       	or	r24, r18
    205c:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	8a 7a       	andi	r24, 0xAA	; 170
    2066:	90 70       	andi	r25, 0x00	; 0
    2068:	95 95       	asr	r25
    206a:	87 95       	ror	r24
    206c:	28 2f       	mov	r18, r24
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	88 2f       	mov	r24, r24
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	85 75       	andi	r24, 0x55	; 85
    2076:	90 70       	andi	r25, 0x00	; 0
    2078:	88 0f       	add	r24, r24
    207a:	99 1f       	adc	r25, r25
    207c:	82 2b       	or	r24, r18
    207e:	89 83       	std	Y+1, r24	; 0x01
    return byte;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
}
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	0f 92       	push	r0
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2094:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
    2096:	ef e5       	ldi	r30, 0x5F	; 95
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	88 23       	and	r24, r24
    209e:	4c f0       	brlt	.+18     	; 0x20b2 <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
    20a0:	af e5       	ldi	r26, 0x5F	; 95
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	ef e5       	ldi	r30, 0x5F	; 95
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	80 68       	ori	r24, 0x80	; 128
    20ac:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20b4:	0f 90       	pop	r0
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	0f 92       	push	r0
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    20c6:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
    20c8:	ef e5       	ldi	r30, 0x5F	; 95
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	88 23       	and	r24, r24
    20d0:	4c f4       	brge	.+18     	; 0x20e4 <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
    20d2:	af e5       	ldi	r26, 0x5F	; 95
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	ef e5       	ldi	r30, 0x5F	; 95
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	8f 77       	andi	r24, 0x7F	; 127
    20de:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	2a 97       	sbiw	r28, 0x0a	; 10
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	9b 83       	std	Y+3, r25	; 0x03
    2104:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2106:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	9b 81       	ldd	r25, Y+3	; 0x03
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	19 f4       	brne	.+6      	; 0x2116 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
    2110:	29 81       	ldd	r18, Y+1	; 0x01
    2112:	2a 87       	std	Y+10, r18	; 0x0a
    2114:	36 c1       	rjmp	.+620    	; 0x2382 <EXTI_enuInit+0x294>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_ENABLED){
    2116:	ea 81       	ldd	r30, Y+2	; 0x02
    2118:	fb 81       	ldd	r31, Y+3	; 0x03
    211a:	80 81       	ld	r24, Z
    211c:	81 30       	cpi	r24, 0x01	; 1
    211e:	09 f0       	breq	.+2      	; 0x2122 <EXTI_enuInit+0x34>
    2120:	64 c0       	rjmp	.+200    	; 0x21ea <EXTI_enuInit+0xfc>

			SET_BIT(GICR, INT0_switch);
    2122:	ab e5       	ldi	r26, 0x5B	; 91
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	eb e5       	ldi	r30, 0x5B	; 91
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	80 64       	ori	r24, 0x40	; 64
    212e:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_0].Sence_Level){
    2130:	ea 81       	ldd	r30, Y+2	; 0x02
    2132:	fb 81       	ldd	r31, Y+3	; 0x03
    2134:	81 81       	ldd	r24, Z+1	; 0x01
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	39 87       	std	Y+9, r19	; 0x09
    213c:	28 87       	std	Y+8, r18	; 0x08
    213e:	88 85       	ldd	r24, Y+8	; 0x08
    2140:	99 85       	ldd	r25, Y+9	; 0x09
    2142:	81 30       	cpi	r24, 0x01	; 1
    2144:	91 05       	cpc	r25, r1
    2146:	21 f1       	breq	.+72     	; 0x2190 <EXTI_enuInit+0xa2>
    2148:	28 85       	ldd	r18, Y+8	; 0x08
    214a:	39 85       	ldd	r19, Y+9	; 0x09
    214c:	22 30       	cpi	r18, 0x02	; 2
    214e:	31 05       	cpc	r19, r1
    2150:	2c f4       	brge	.+10     	; 0x215c <EXTI_enuInit+0x6e>
    2152:	88 85       	ldd	r24, Y+8	; 0x08
    2154:	99 85       	ldd	r25, Y+9	; 0x09
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	61 f0       	breq	.+24     	; 0x2172 <EXTI_enuInit+0x84>
    215a:	53 c0       	rjmp	.+166    	; 0x2202 <EXTI_enuInit+0x114>
    215c:	28 85       	ldd	r18, Y+8	; 0x08
    215e:	39 85       	ldd	r19, Y+9	; 0x09
    2160:	22 30       	cpi	r18, 0x02	; 2
    2162:	31 05       	cpc	r19, r1
    2164:	21 f1       	breq	.+72     	; 0x21ae <EXTI_enuInit+0xc0>
    2166:	88 85       	ldd	r24, Y+8	; 0x08
    2168:	99 85       	ldd	r25, Y+9	; 0x09
    216a:	83 30       	cpi	r24, 0x03	; 3
    216c:	91 05       	cpc	r25, r1
    216e:	71 f1       	breq	.+92     	; 0x21cc <EXTI_enuInit+0xde>
    2170:	48 c0       	rjmp	.+144    	; 0x2202 <EXTI_enuInit+0x114>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
    2172:	a5 e5       	ldi	r26, 0x55	; 85
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	e5 e5       	ldi	r30, 0x55	; 85
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	8e 7f       	andi	r24, 0xFE	; 254
    217e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    2180:	a5 e5       	ldi	r26, 0x55	; 85
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	e5 e5       	ldi	r30, 0x55	; 85
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	8d 7f       	andi	r24, 0xFD	; 253
    218c:	8c 93       	st	X, r24
    218e:	39 c0       	rjmp	.+114    	; 0x2202 <EXTI_enuInit+0x114>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
    2190:	a5 e5       	ldi	r26, 0x55	; 85
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e5 e5       	ldi	r30, 0x55	; 85
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	81 60       	ori	r24, 0x01	; 1
    219c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    219e:	a5 e5       	ldi	r26, 0x55	; 85
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e5 e5       	ldi	r30, 0x55	; 85
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	8d 7f       	andi	r24, 0xFD	; 253
    21aa:	8c 93       	st	X, r24
    21ac:	2a c0       	rjmp	.+84     	; 0x2202 <EXTI_enuInit+0x114>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
    21ae:	a5 e5       	ldi	r26, 0x55	; 85
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e5 e5       	ldi	r30, 0x55	; 85
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	8e 7f       	andi	r24, 0xFE	; 254
    21ba:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    21bc:	a5 e5       	ldi	r26, 0x55	; 85
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e5 e5       	ldi	r30, 0x55	; 85
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	82 60       	ori	r24, 0x02	; 2
    21c8:	8c 93       	st	X, r24
    21ca:	1b c0       	rjmp	.+54     	; 0x2202 <EXTI_enuInit+0x114>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
    21cc:	a5 e5       	ldi	r26, 0x55	; 85
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e5 e5       	ldi	r30, 0x55	; 85
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	81 60       	ori	r24, 0x01	; 1
    21d8:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    21da:	a5 e5       	ldi	r26, 0x55	; 85
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e5 e5       	ldi	r30, 0x55	; 85
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	82 60       	ori	r24, 0x02	; 2
    21e6:	8c 93       	st	X, r24
    21e8:	0c c0       	rjmp	.+24     	; 0x2202 <EXTI_enuInit+0x114>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_DISABLED){
    21ea:	ea 81       	ldd	r30, Y+2	; 0x02
    21ec:	fb 81       	ldd	r31, Y+3	; 0x03
    21ee:	80 81       	ld	r24, Z
    21f0:	88 23       	and	r24, r24
    21f2:	39 f4       	brne	.+14     	; 0x2202 <EXTI_enuInit+0x114>

			CLR_BIT(GICR, INT0_switch);
    21f4:	ab e5       	ldi	r26, 0x5B	; 91
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	eb e5       	ldi	r30, 0x5B	; 91
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	8f 7b       	andi	r24, 0xBF	; 191
    2200:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_ENABLED){
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	9b 81       	ldd	r25, Y+3	; 0x03
    2206:	fc 01       	movw	r30, r24
    2208:	32 96       	adiw	r30, 0x02	; 2
    220a:	80 81       	ld	r24, Z
    220c:	81 30       	cpi	r24, 0x01	; 1
    220e:	09 f0       	breq	.+2      	; 0x2212 <EXTI_enuInit+0x124>
    2210:	66 c0       	rjmp	.+204    	; 0x22de <EXTI_enuInit+0x1f0>

			SET_BIT(GICR, INT1_switch);
    2212:	ab e5       	ldi	r26, 0x5B	; 91
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	eb e5       	ldi	r30, 0x5B	; 91
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	80 68       	ori	r24, 0x80	; 128
    221e:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT_NO_1].Sence_Level){
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	9b 81       	ldd	r25, Y+3	; 0x03
    2224:	fc 01       	movw	r30, r24
    2226:	32 96       	adiw	r30, 0x02	; 2
    2228:	81 81       	ldd	r24, Z+1	; 0x01
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	3f 83       	std	Y+7, r19	; 0x07
    2230:	2e 83       	std	Y+6, r18	; 0x06
    2232:	8e 81       	ldd	r24, Y+6	; 0x06
    2234:	9f 81       	ldd	r25, Y+7	; 0x07
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	91 05       	cpc	r25, r1
    223a:	21 f1       	breq	.+72     	; 0x2284 <EXTI_enuInit+0x196>
    223c:	2e 81       	ldd	r18, Y+6	; 0x06
    223e:	3f 81       	ldd	r19, Y+7	; 0x07
    2240:	22 30       	cpi	r18, 0x02	; 2
    2242:	31 05       	cpc	r19, r1
    2244:	2c f4       	brge	.+10     	; 0x2250 <EXTI_enuInit+0x162>
    2246:	8e 81       	ldd	r24, Y+6	; 0x06
    2248:	9f 81       	ldd	r25, Y+7	; 0x07
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	61 f0       	breq	.+24     	; 0x2266 <EXTI_enuInit+0x178>
    224e:	55 c0       	rjmp	.+170    	; 0x22fa <EXTI_enuInit+0x20c>
    2250:	2e 81       	ldd	r18, Y+6	; 0x06
    2252:	3f 81       	ldd	r19, Y+7	; 0x07
    2254:	22 30       	cpi	r18, 0x02	; 2
    2256:	31 05       	cpc	r19, r1
    2258:	21 f1       	breq	.+72     	; 0x22a2 <EXTI_enuInit+0x1b4>
    225a:	8e 81       	ldd	r24, Y+6	; 0x06
    225c:	9f 81       	ldd	r25, Y+7	; 0x07
    225e:	83 30       	cpi	r24, 0x03	; 3
    2260:	91 05       	cpc	r25, r1
    2262:	71 f1       	breq	.+92     	; 0x22c0 <EXTI_enuInit+0x1d2>
    2264:	4a c0       	rjmp	.+148    	; 0x22fa <EXTI_enuInit+0x20c>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
    2266:	a5 e5       	ldi	r26, 0x55	; 85
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e5 e5       	ldi	r30, 0x55	; 85
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8b 7f       	andi	r24, 0xFB	; 251
    2272:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    2274:	a5 e5       	ldi	r26, 0x55	; 85
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e5 e5       	ldi	r30, 0x55	; 85
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	87 7f       	andi	r24, 0xF7	; 247
    2280:	8c 93       	st	X, r24
    2282:	3b c0       	rjmp	.+118    	; 0x22fa <EXTI_enuInit+0x20c>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
    2284:	a5 e5       	ldi	r26, 0x55	; 85
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e5 e5       	ldi	r30, 0x55	; 85
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	84 60       	ori	r24, 0x04	; 4
    2290:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    2292:	a5 e5       	ldi	r26, 0x55	; 85
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e5 e5       	ldi	r30, 0x55	; 85
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	87 7f       	andi	r24, 0xF7	; 247
    229e:	8c 93       	st	X, r24
    22a0:	2c c0       	rjmp	.+88     	; 0x22fa <EXTI_enuInit+0x20c>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
    22a2:	a5 e5       	ldi	r26, 0x55	; 85
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e5 e5       	ldi	r30, 0x55	; 85
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	8b 7f       	andi	r24, 0xFB	; 251
    22ae:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    22b0:	a5 e5       	ldi	r26, 0x55	; 85
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e5 e5       	ldi	r30, 0x55	; 85
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	88 60       	ori	r24, 0x08	; 8
    22bc:	8c 93       	st	X, r24
    22be:	1d c0       	rjmp	.+58     	; 0x22fa <EXTI_enuInit+0x20c>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
    22c0:	a5 e5       	ldi	r26, 0x55	; 85
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	e5 e5       	ldi	r30, 0x55	; 85
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	84 60       	ori	r24, 0x04	; 4
    22cc:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    22ce:	a5 e5       	ldi	r26, 0x55	; 85
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e5 e5       	ldi	r30, 0x55	; 85
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	88 60       	ori	r24, 0x08	; 8
    22da:	8c 93       	st	X, r24
    22dc:	0e c0       	rjmp	.+28     	; 0x22fa <EXTI_enuInit+0x20c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_DISABLED){
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	fc 01       	movw	r30, r24
    22e4:	32 96       	adiw	r30, 0x02	; 2
    22e6:	80 81       	ld	r24, Z
    22e8:	88 23       	and	r24, r24
    22ea:	39 f4       	brne	.+14     	; 0x22fa <EXTI_enuInit+0x20c>

			CLR_BIT(GICR, INT1_switch);
    22ec:	ab e5       	ldi	r26, 0x5B	; 91
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	eb e5       	ldi	r30, 0x5B	; 91
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	8f 77       	andi	r24, 0x7F	; 127
    22f8:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_ENABLED){
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	9b 81       	ldd	r25, Y+3	; 0x03
    22fe:	fc 01       	movw	r30, r24
    2300:	34 96       	adiw	r30, 0x04	; 4
    2302:	80 81       	ld	r24, Z
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	59 f5       	brne	.+86     	; 0x235e <EXTI_enuInit+0x270>

			SET_BIT(GICR, INT2_switch);
    2308:	ab e5       	ldi	r26, 0x5B	; 91
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	eb e5       	ldi	r30, 0x5B	; 91
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	80 62       	ori	r24, 0x20	; 32
    2314:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_2].Sence_Level){
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9b 81       	ldd	r25, Y+3	; 0x03
    231a:	fc 01       	movw	r30, r24
    231c:	34 96       	adiw	r30, 0x04	; 4
    231e:	81 81       	ldd	r24, Z+1	; 0x01
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	3d 83       	std	Y+5, r19	; 0x05
    2326:	2c 83       	std	Y+4, r18	; 0x04
    2328:	8c 81       	ldd	r24, Y+4	; 0x04
    232a:	9d 81       	ldd	r25, Y+5	; 0x05
    232c:	82 30       	cpi	r24, 0x02	; 2
    232e:	91 05       	cpc	r25, r1
    2330:	31 f0       	breq	.+12     	; 0x233e <EXTI_enuInit+0x250>
    2332:	2c 81       	ldd	r18, Y+4	; 0x04
    2334:	3d 81       	ldd	r19, Y+5	; 0x05
    2336:	23 30       	cpi	r18, 0x03	; 3
    2338:	31 05       	cpc	r19, r1
    233a:	49 f0       	breq	.+18     	; 0x234e <EXTI_enuInit+0x260>
    233c:	1e c0       	rjmp	.+60     	; 0x237a <EXTI_enuInit+0x28c>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
    233e:	a4 e5       	ldi	r26, 0x54	; 84
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e4 e5       	ldi	r30, 0x54	; 84
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	8f 7b       	andi	r24, 0xBF	; 191
    234a:	8c 93       	st	X, r24
    234c:	16 c0       	rjmp	.+44     	; 0x237a <EXTI_enuInit+0x28c>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
    234e:	a4 e5       	ldi	r26, 0x54	; 84
    2350:	b0 e0       	ldi	r27, 0x00	; 0
    2352:	e4 e5       	ldi	r30, 0x54	; 84
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	80 64       	ori	r24, 0x40	; 64
    235a:	8c 93       	st	X, r24
    235c:	0e c0       	rjmp	.+28     	; 0x237a <EXTI_enuInit+0x28c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_DISABLED){
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	9b 81       	ldd	r25, Y+3	; 0x03
    2362:	fc 01       	movw	r30, r24
    2364:	34 96       	adiw	r30, 0x04	; 4
    2366:	80 81       	ld	r24, Z
    2368:	88 23       	and	r24, r24
    236a:	39 f4       	brne	.+14     	; 0x237a <EXTI_enuInit+0x28c>

			CLR_BIT(GICR, INT2_switch);
    236c:	ab e5       	ldi	r26, 0x5B	; 91
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	eb e5       	ldi	r30, 0x5B	; 91
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	8f 7d       	andi	r24, 0xDF	; 223
    2378:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    237e:	39 81       	ldd	r19, Y+1	; 0x01
    2380:	3a 87       	std	Y+10, r19	; 0x0a
    2382:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2384:	2a 96       	adiw	r28, 0x0a	; 10
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <EXTI_enuEnableInterrupt>:

ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <EXTI_enuEnableInterrupt+0x6>
    239c:	00 d0       	rcall	.+0      	; 0x239e <EXTI_enuEnableInterrupt+0x8>
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    23a4:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	28 2f       	mov	r18, r24
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	3c 83       	std	Y+4, r19	; 0x04
    23ae:	2b 83       	std	Y+3, r18	; 0x03
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	91 05       	cpc	r25, r1
    23b8:	89 f0       	breq	.+34     	; 0x23dc <EXTI_enuEnableInterrupt+0x46>
    23ba:	2b 81       	ldd	r18, Y+3	; 0x03
    23bc:	3c 81       	ldd	r19, Y+4	; 0x04
    23be:	22 30       	cpi	r18, 0x02	; 2
    23c0:	31 05       	cpc	r19, r1
    23c2:	a1 f0       	breq	.+40     	; 0x23ec <EXTI_enuEnableInterrupt+0x56>
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	b9 f4       	brne	.+46     	; 0x23fa <EXTI_enuEnableInterrupt+0x64>
			case INT_NO_0:

				SET_BIT(GICR, INT0_switch);
    23cc:	ab e5       	ldi	r26, 0x5B	; 91
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	eb e5       	ldi	r30, 0x5B	; 91
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	80 64       	ori	r24, 0x40	; 64
    23d8:	8c 93       	st	X, r24
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_1:

				SET_BIT(GICR, INT1_switch);
    23dc:	ab e5       	ldi	r26, 0x5B	; 91
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	eb e5       	ldi	r30, 0x5B	; 91
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	80 68       	ori	r24, 0x80	; 128
    23e8:	8c 93       	st	X, r24
    23ea:	07 c0       	rjmp	.+14     	; 0x23fa <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_2:

				SET_BIT(GICR, INT2_switch);
    23ec:	ab e5       	ldi	r26, 0x5B	; 91
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	eb e5       	ldi	r30, 0x5B	; 91
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	80 62       	ori	r24, 0x20	; 32
    23f8:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2400:	0f 90       	pop	r0
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <EXTI_enuDisableInterrupt>:

ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	00 d0       	rcall	.+0      	; 0x2414 <EXTI_enuDisableInterrupt+0x6>
    2414:	00 d0       	rcall	.+0      	; 0x2416 <EXTI_enuDisableInterrupt+0x8>
    2416:	0f 92       	push	r0
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    241e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT_NO_2){
    2420:	8a 81       	ldd	r24, Y+2	; 0x02
    2422:	83 30       	cpi	r24, 0x03	; 3
    2424:	18 f0       	brcs	.+6      	; 0x242c <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
    2426:	29 81       	ldd	r18, Y+1	; 0x01
    2428:	2d 83       	std	Y+5, r18	; 0x05
    242a:	2e c0       	rjmp	.+92     	; 0x2488 <EXTI_enuDisableInterrupt+0x7a>
	}

	else{

		switch(Copy_u8IntNumber){
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	28 2f       	mov	r18, r24
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	3c 83       	std	Y+4, r19	; 0x04
    2434:	2b 83       	std	Y+3, r18	; 0x03
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	9c 81       	ldd	r25, Y+4	; 0x04
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	91 05       	cpc	r25, r1
    243e:	89 f0       	breq	.+34     	; 0x2462 <EXTI_enuDisableInterrupt+0x54>
    2440:	2b 81       	ldd	r18, Y+3	; 0x03
    2442:	3c 81       	ldd	r19, Y+4	; 0x04
    2444:	22 30       	cpi	r18, 0x02	; 2
    2446:	31 05       	cpc	r19, r1
    2448:	a1 f0       	breq	.+40     	; 0x2472 <EXTI_enuDisableInterrupt+0x64>
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	b9 f4       	brne	.+46     	; 0x2480 <EXTI_enuDisableInterrupt+0x72>
		case INT_NO_0:

			
			GICR &= ~(1<<INT0_switch);
    2452:	ab e5       	ldi	r26, 0x5B	; 91
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	eb e5       	ldi	r30, 0x5B	; 91
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	8f 7b       	andi	r24, 0xBF	; 191
    245e:	8c 93       	st	X, r24
    2460:	0f c0       	rjmp	.+30     	; 0x2480 <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_1:

			GICR &= ~(1<<INT1_switch);
    2462:	ab e5       	ldi	r26, 0x5B	; 91
    2464:	b0 e0       	ldi	r27, 0x00	; 0
    2466:	eb e5       	ldi	r30, 0x5B	; 91
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	8f 77       	andi	r24, 0x7F	; 127
    246e:	8c 93       	st	X, r24
    2470:	07 c0       	rjmp	.+14     	; 0x2480 <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_2:

			GICR &= ~(1<<INT2_switch);
    2472:	ab e5       	ldi	r26, 0x5B	; 91
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	eb e5       	ldi	r30, 0x5B	; 91
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	8f 7d       	andi	r24, 0xDF	; 223
    247e:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    2484:	99 81       	ldd	r25, Y+1	; 0x01
    2486:	9d 83       	std	Y+5, r25	; 0x05
    2488:	8d 81       	ldd	r24, Y+5	; 0x05
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	2c 97       	sbiw	r28, 0x0c	; 12
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	8a 83       	std	Y+2, r24	; 0x02
    24b0:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    24b2:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT_NO_2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
    24b4:	8a 81       	ldd	r24, Y+2	; 0x02
    24b6:	83 30       	cpi	r24, 0x03	; 3
    24b8:	18 f4       	brcc	.+6      	; 0x24c0 <EXTI_enuSetSenseLevel+0x26>
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	84 30       	cpi	r24, 0x04	; 4
    24be:	18 f0       	brcs	.+6      	; 0x24c6 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
    24c0:	29 81       	ldd	r18, Y+1	; 0x01
    24c2:	2c 87       	std	Y+12, r18	; 0x0c
    24c4:	ef c0       	rjmp	.+478    	; 0x26a4 <EXTI_enuSetSenseLevel+0x20a>
	}

	else{

		switch(Copy_u8IntNumber){
    24c6:	8a 81       	ldd	r24, Y+2	; 0x02
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	3b 87       	std	Y+11, r19	; 0x0b
    24ce:	2a 87       	std	Y+10, r18	; 0x0a
    24d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	91 05       	cpc	r25, r1
    24d8:	09 f4       	brne	.+2      	; 0x24dc <EXTI_enuSetSenseLevel+0x42>
    24da:	66 c0       	rjmp	.+204    	; 0x25a8 <EXTI_enuSetSenseLevel+0x10e>
    24dc:	2a 85       	ldd	r18, Y+10	; 0x0a
    24de:	3b 85       	ldd	r19, Y+11	; 0x0b
    24e0:	22 30       	cpi	r18, 0x02	; 2
    24e2:	31 05       	cpc	r19, r1
    24e4:	09 f4       	brne	.+2      	; 0x24e8 <EXTI_enuSetSenseLevel+0x4e>
    24e6:	bb c0       	rjmp	.+374    	; 0x265e <EXTI_enuSetSenseLevel+0x1c4>
    24e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <EXTI_enuSetSenseLevel+0x58>
    24f0:	d5 c0       	rjmp	.+426    	; 0x269c <EXTI_enuSetSenseLevel+0x202>
		case INT_NO_0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    24f2:	8b 81       	ldd	r24, Y+3	; 0x03
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	39 87       	std	Y+9, r19	; 0x09
    24fa:	28 87       	std	Y+8, r18	; 0x08
    24fc:	88 85       	ldd	r24, Y+8	; 0x08
    24fe:	99 85       	ldd	r25, Y+9	; 0x09
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	91 05       	cpc	r25, r1
    2504:	a9 f0       	breq	.+42     	; 0x2530 <EXTI_enuSetSenseLevel+0x96>
    2506:	28 85       	ldd	r18, Y+8	; 0x08
    2508:	39 85       	ldd	r19, Y+9	; 0x09
    250a:	22 30       	cpi	r18, 0x02	; 2
    250c:	31 05       	cpc	r19, r1
    250e:	2c f4       	brge	.+10     	; 0x251a <EXTI_enuSetSenseLevel+0x80>
    2510:	88 85       	ldd	r24, Y+8	; 0x08
    2512:	99 85       	ldd	r25, Y+9	; 0x09
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	d9 f0       	breq	.+54     	; 0x254e <EXTI_enuSetSenseLevel+0xb4>
    2518:	c1 c0       	rjmp	.+386    	; 0x269c <EXTI_enuSetSenseLevel+0x202>
    251a:	28 85       	ldd	r18, Y+8	; 0x08
    251c:	39 85       	ldd	r19, Y+9	; 0x09
    251e:	22 30       	cpi	r18, 0x02	; 2
    2520:	31 05       	cpc	r19, r1
    2522:	21 f1       	breq	.+72     	; 0x256c <EXTI_enuSetSenseLevel+0xd2>
    2524:	88 85       	ldd	r24, Y+8	; 0x08
    2526:	99 85       	ldd	r25, Y+9	; 0x09
    2528:	83 30       	cpi	r24, 0x03	; 3
    252a:	91 05       	cpc	r25, r1
    252c:	71 f1       	breq	.+92     	; 0x258a <EXTI_enuSetSenseLevel+0xf0>
    252e:	b6 c0       	rjmp	.+364    	; 0x269c <EXTI_enuSetSenseLevel+0x202>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
    2530:	a5 e5       	ldi	r26, 0x55	; 85
    2532:	b0 e0       	ldi	r27, 0x00	; 0
    2534:	e5 e5       	ldi	r30, 0x55	; 85
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	81 60       	ori	r24, 0x01	; 1
    253c:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    253e:	a5 e5       	ldi	r26, 0x55	; 85
    2540:	b0 e0       	ldi	r27, 0x00	; 0
    2542:	e5 e5       	ldi	r30, 0x55	; 85
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	8d 7f       	andi	r24, 0xFD	; 253
    254a:	8c 93       	st	X, r24
    254c:	a7 c0       	rjmp	.+334    	; 0x269c <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    254e:	a5 e5       	ldi	r26, 0x55	; 85
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e5 e5       	ldi	r30, 0x55	; 85
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	8e 7f       	andi	r24, 0xFE	; 254
    255a:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    255c:	a5 e5       	ldi	r26, 0x55	; 85
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e5 e5       	ldi	r30, 0x55	; 85
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8d 7f       	andi	r24, 0xFD	; 253
    2568:	8c 93       	st	X, r24
    256a:	98 c0       	rjmp	.+304    	; 0x269c <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    256c:	a5 e5       	ldi	r26, 0x55	; 85
    256e:	b0 e0       	ldi	r27, 0x00	; 0
    2570:	e5 e5       	ldi	r30, 0x55	; 85
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	80 81       	ld	r24, Z
    2576:	8e 7f       	andi	r24, 0xFE	; 254
    2578:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    257a:	a5 e5       	ldi	r26, 0x55	; 85
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e5 e5       	ldi	r30, 0x55	; 85
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	82 60       	ori	r24, 0x02	; 2
    2586:	8c 93       	st	X, r24
    2588:	89 c0       	rjmp	.+274    	; 0x269c <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    258a:	a5 e5       	ldi	r26, 0x55	; 85
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e5 e5       	ldi	r30, 0x55	; 85
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	81 60       	ori	r24, 0x01	; 1
    2596:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    2598:	a5 e5       	ldi	r26, 0x55	; 85
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e5 e5       	ldi	r30, 0x55	; 85
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	82 60       	ori	r24, 0x02	; 2
    25a4:	8c 93       	st	X, r24
    25a6:	7a c0       	rjmp	.+244    	; 0x269c <EXTI_enuSetSenseLevel+0x202>
			/**************************************************/

		case INT_NO_1:

			/**************** 1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    25a8:	8b 81       	ldd	r24, Y+3	; 0x03
    25aa:	28 2f       	mov	r18, r24
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	3f 83       	std	Y+7, r19	; 0x07
    25b0:	2e 83       	std	Y+6, r18	; 0x06
    25b2:	8e 81       	ldd	r24, Y+6	; 0x06
    25b4:	9f 81       	ldd	r25, Y+7	; 0x07
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	91 05       	cpc	r25, r1
    25ba:	a9 f0       	breq	.+42     	; 0x25e6 <EXTI_enuSetSenseLevel+0x14c>
    25bc:	2e 81       	ldd	r18, Y+6	; 0x06
    25be:	3f 81       	ldd	r19, Y+7	; 0x07
    25c0:	22 30       	cpi	r18, 0x02	; 2
    25c2:	31 05       	cpc	r19, r1
    25c4:	2c f4       	brge	.+10     	; 0x25d0 <EXTI_enuSetSenseLevel+0x136>
    25c6:	8e 81       	ldd	r24, Y+6	; 0x06
    25c8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	d9 f0       	breq	.+54     	; 0x2604 <EXTI_enuSetSenseLevel+0x16a>
    25ce:	66 c0       	rjmp	.+204    	; 0x269c <EXTI_enuSetSenseLevel+0x202>
    25d0:	2e 81       	ldd	r18, Y+6	; 0x06
    25d2:	3f 81       	ldd	r19, Y+7	; 0x07
    25d4:	22 30       	cpi	r18, 0x02	; 2
    25d6:	31 05       	cpc	r19, r1
    25d8:	21 f1       	breq	.+72     	; 0x2622 <EXTI_enuSetSenseLevel+0x188>
    25da:	8e 81       	ldd	r24, Y+6	; 0x06
    25dc:	9f 81       	ldd	r25, Y+7	; 0x07
    25de:	83 30       	cpi	r24, 0x03	; 3
    25e0:	91 05       	cpc	r25, r1
    25e2:	71 f1       	breq	.+92     	; 0x2640 <EXTI_enuSetSenseLevel+0x1a6>
    25e4:	5b c0       	rjmp	.+182    	; 0x269c <EXTI_enuSetSenseLevel+0x202>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    25e6:	a5 e5       	ldi	r26, 0x55	; 85
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e5 e5       	ldi	r30, 0x55	; 85
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	84 60       	ori	r24, 0x04	; 4
    25f2:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    25f4:	a5 e5       	ldi	r26, 0x55	; 85
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e5 e5       	ldi	r30, 0x55	; 85
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	87 7f       	andi	r24, 0xF7	; 247
    2600:	8c 93       	st	X, r24
    2602:	4c c0       	rjmp	.+152    	; 0x269c <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    2604:	a5 e5       	ldi	r26, 0x55	; 85
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e5 e5       	ldi	r30, 0x55	; 85
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	8b 7f       	andi	r24, 0xFB	; 251
    2610:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    2612:	a5 e5       	ldi	r26, 0x55	; 85
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e5 e5       	ldi	r30, 0x55	; 85
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	87 7f       	andi	r24, 0xF7	; 247
    261e:	8c 93       	st	X, r24
    2620:	3d c0       	rjmp	.+122    	; 0x269c <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    2622:	a5 e5       	ldi	r26, 0x55	; 85
    2624:	b0 e0       	ldi	r27, 0x00	; 0
    2626:	e5 e5       	ldi	r30, 0x55	; 85
    2628:	f0 e0       	ldi	r31, 0x00	; 0
    262a:	80 81       	ld	r24, Z
    262c:	8b 7f       	andi	r24, 0xFB	; 251
    262e:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    2630:	a5 e5       	ldi	r26, 0x55	; 85
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	e5 e5       	ldi	r30, 0x55	; 85
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	80 81       	ld	r24, Z
    263a:	88 60       	ori	r24, 0x08	; 8
    263c:	8c 93       	st	X, r24
    263e:	2e c0       	rjmp	.+92     	; 0x269c <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    2640:	a5 e5       	ldi	r26, 0x55	; 85
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e5 e5       	ldi	r30, 0x55	; 85
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	84 60       	ori	r24, 0x04	; 4
    264c:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    264e:	a5 e5       	ldi	r26, 0x55	; 85
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	e5 e5       	ldi	r30, 0x55	; 85
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	80 81       	ld	r24, Z
    2658:	88 60       	ori	r24, 0x08	; 8
    265a:	8c 93       	st	X, r24
    265c:	1f c0       	rjmp	.+62     	; 0x269c <EXTI_enuSetSenseLevel+0x202>


		case INT_NO_2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	28 2f       	mov	r18, r24
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	3d 83       	std	Y+5, r19	; 0x05
    2666:	2c 83       	std	Y+4, r18	; 0x04
    2668:	8c 81       	ldd	r24, Y+4	; 0x04
    266a:	9d 81       	ldd	r25, Y+5	; 0x05
    266c:	82 30       	cpi	r24, 0x02	; 2
    266e:	91 05       	cpc	r25, r1
    2670:	31 f0       	breq	.+12     	; 0x267e <EXTI_enuSetSenseLevel+0x1e4>
    2672:	2c 81       	ldd	r18, Y+4	; 0x04
    2674:	3d 81       	ldd	r19, Y+5	; 0x05
    2676:	23 30       	cpi	r18, 0x03	; 3
    2678:	31 05       	cpc	r19, r1
    267a:	49 f0       	breq	.+18     	; 0x268e <EXTI_enuSetSenseLevel+0x1f4>
    267c:	0f c0       	rjmp	.+30     	; 0x269c <EXTI_enuSetSenseLevel+0x202>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    267e:	a4 e5       	ldi	r26, 0x54	; 84
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	e4 e5       	ldi	r30, 0x54	; 84
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	8f 7b       	andi	r24, 0xBF	; 191
    268a:	8c 93       	st	X, r24
    268c:	07 c0       	rjmp	.+14     	; 0x269c <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    268e:	a4 e5       	ldi	r26, 0x54	; 84
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e4 e5       	ldi	r30, 0x54	; 84
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	80 64       	ori	r24, 0x40	; 64
    269a:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    26a0:	39 81       	ldd	r19, Y+1	; 0x01
    26a2:	3c 87       	std	Y+12, r19	; 0x0c
    26a4:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    26a6:	2c 96       	adiw	r28, 0x0c	; 12
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	cf 91       	pop	r28
    26b4:	df 91       	pop	r29
    26b6:	08 95       	ret

000026b8 <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    26b8:	df 93       	push	r29
    26ba:	cf 93       	push	r28
    26bc:	00 d0       	rcall	.+0      	; 0x26be <EXTI_enuSetCallBack+0x6>
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <EXTI_enuSetCallBack+0x8>
    26c0:	0f 92       	push	r0
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	9b 83       	std	Y+3, r25	; 0x03
    26c8:	8a 83       	std	Y+2, r24	; 0x02
    26ca:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    26cc:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    26ce:	8a 81       	ldd	r24, Y+2	; 0x02
    26d0:	9b 81       	ldd	r25, Y+3	; 0x03
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	29 f4       	brne	.+10     	; 0x26e0 <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    26d6:	83 e0       	ldi	r24, 0x03	; 3
    26d8:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	8d 83       	std	Y+5, r24	; 0x05
    26de:	18 c0       	rjmp	.+48     	; 0x2710 <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT_NO_2){
    26e0:	8c 81       	ldd	r24, Y+4	; 0x04
    26e2:	83 30       	cpi	r24, 0x03	; 3
    26e4:	28 f0       	brcs	.+10     	; 0x26f0 <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    26e6:	84 e0       	ldi	r24, 0x04	; 4
    26e8:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    26ea:	89 81       	ldd	r24, Y+1	; 0x01
    26ec:	8d 83       	std	Y+5, r24	; 0x05
    26ee:	10 c0       	rjmp	.+32     	; 0x2710 <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    26f0:	8c 81       	ldd	r24, Y+4	; 0x04
    26f2:	88 2f       	mov	r24, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	88 0f       	add	r24, r24
    26f8:	99 1f       	adc	r25, r25
    26fa:	fc 01       	movw	r30, r24
    26fc:	e4 56       	subi	r30, 0x64	; 100
    26fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	9b 81       	ldd	r25, Y+3	; 0x03
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	0f 90       	pop	r0
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <__vector_1>:


ISR(INT0_vect){
    2722:	1f 92       	push	r1
    2724:	0f 92       	push	r0
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	0f 92       	push	r0
    272a:	11 24       	eor	r1, r1
    272c:	2f 93       	push	r18
    272e:	3f 93       	push	r19
    2730:	4f 93       	push	r20
    2732:	5f 93       	push	r21
    2734:	6f 93       	push	r22
    2736:	7f 93       	push	r23
    2738:	8f 93       	push	r24
    273a:	9f 93       	push	r25
    273c:	af 93       	push	r26
    273e:	bf 93       	push	r27
    2740:	ef 93       	push	r30
    2742:	ff 93       	push	r31
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_0] != NULL){
    274c:	80 91 9c 01 	lds	r24, 0x019C
    2750:	90 91 9d 01 	lds	r25, 0x019D
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	29 f0       	breq	.+10     	; 0x2762 <__vector_1+0x40>
			EXTI_pfunISRFun[INT_NO_0]();
    2758:	e0 91 9c 01 	lds	r30, 0x019C
    275c:	f0 91 9d 01 	lds	r31, 0x019D
    2760:	09 95       	icall
		}
}
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	ff 91       	pop	r31
    2768:	ef 91       	pop	r30
    276a:	bf 91       	pop	r27
    276c:	af 91       	pop	r26
    276e:	9f 91       	pop	r25
    2770:	8f 91       	pop	r24
    2772:	7f 91       	pop	r23
    2774:	6f 91       	pop	r22
    2776:	5f 91       	pop	r21
    2778:	4f 91       	pop	r20
    277a:	3f 91       	pop	r19
    277c:	2f 91       	pop	r18
    277e:	0f 90       	pop	r0
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	0f 90       	pop	r0
    2784:	1f 90       	pop	r1
    2786:	18 95       	reti

00002788 <__vector_2>:




ISR(INT1_vect){
    2788:	1f 92       	push	r1
    278a:	0f 92       	push	r0
    278c:	0f b6       	in	r0, 0x3f	; 63
    278e:	0f 92       	push	r0
    2790:	11 24       	eor	r1, r1
    2792:	2f 93       	push	r18
    2794:	3f 93       	push	r19
    2796:	4f 93       	push	r20
    2798:	5f 93       	push	r21
    279a:	6f 93       	push	r22
    279c:	7f 93       	push	r23
    279e:	8f 93       	push	r24
    27a0:	9f 93       	push	r25
    27a2:	af 93       	push	r26
    27a4:	bf 93       	push	r27
    27a6:	ef 93       	push	r30
    27a8:	ff 93       	push	r31
    27aa:	df 93       	push	r29
    27ac:	cf 93       	push	r28
    27ae:	cd b7       	in	r28, 0x3d	; 61
    27b0:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_1] != NULL){
    27b2:	80 91 9e 01 	lds	r24, 0x019E
    27b6:	90 91 9f 01 	lds	r25, 0x019F
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	29 f0       	breq	.+10     	; 0x27c8 <__vector_2+0x40>
			EXTI_pfunISRFun[INT_NO_1]();
    27be:	e0 91 9e 01 	lds	r30, 0x019E
    27c2:	f0 91 9f 01 	lds	r31, 0x019F
    27c6:	09 95       	icall
		}
}
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	ff 91       	pop	r31
    27ce:	ef 91       	pop	r30
    27d0:	bf 91       	pop	r27
    27d2:	af 91       	pop	r26
    27d4:	9f 91       	pop	r25
    27d6:	8f 91       	pop	r24
    27d8:	7f 91       	pop	r23
    27da:	6f 91       	pop	r22
    27dc:	5f 91       	pop	r21
    27de:	4f 91       	pop	r20
    27e0:	3f 91       	pop	r19
    27e2:	2f 91       	pop	r18
    27e4:	0f 90       	pop	r0
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	0f 90       	pop	r0
    27ea:	1f 90       	pop	r1
    27ec:	18 95       	reti

000027ee <__vector_3>:



ISR(INT2_vect){
    27ee:	1f 92       	push	r1
    27f0:	0f 92       	push	r0
    27f2:	0f b6       	in	r0, 0x3f	; 63
    27f4:	0f 92       	push	r0
    27f6:	11 24       	eor	r1, r1
    27f8:	2f 93       	push	r18
    27fa:	3f 93       	push	r19
    27fc:	4f 93       	push	r20
    27fe:	5f 93       	push	r21
    2800:	6f 93       	push	r22
    2802:	7f 93       	push	r23
    2804:	8f 93       	push	r24
    2806:	9f 93       	push	r25
    2808:	af 93       	push	r26
    280a:	bf 93       	push	r27
    280c:	ef 93       	push	r30
    280e:	ff 93       	push	r31
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_2] != NULL){
    2818:	80 91 a0 01 	lds	r24, 0x01A0
    281c:	90 91 a1 01 	lds	r25, 0x01A1
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	29 f0       	breq	.+10     	; 0x282e <__vector_3+0x40>
			EXTI_pfunISRFun[INT_NO_2]();
    2824:	e0 91 a0 01 	lds	r30, 0x01A0
    2828:	f0 91 a1 01 	lds	r31, 0x01A1
    282c:	09 95       	icall
		}
}
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	ff 91       	pop	r31
    2834:	ef 91       	pop	r30
    2836:	bf 91       	pop	r27
    2838:	af 91       	pop	r26
    283a:	9f 91       	pop	r25
    283c:	8f 91       	pop	r24
    283e:	7f 91       	pop	r23
    2840:	6f 91       	pop	r22
    2842:	5f 91       	pop	r21
    2844:	4f 91       	pop	r20
    2846:	3f 91       	pop	r19
    2848:	2f 91       	pop	r18
    284a:	0f 90       	pop	r0
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	0f 90       	pop	r0
    2850:	1f 90       	pop	r1
    2852:	18 95       	reti

00002854 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	0f 92       	push	r0
    285a:	cd b7       	in	r28, 0x3d	; 61
    285c:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    285e:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    2860:	ea e3       	ldi	r30, 0x3A	; 58
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 ef       	ldi	r24, 0xF0	; 240
    2866:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    2868:	eb e3       	ldi	r30, 0x3B	; 59
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	83 ec       	ldi	r24, 0xC3	; 195
    286e:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    2870:	e7 e3       	ldi	r30, 0x37	; 55
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 ef       	ldi	r24, 0xF0	; 240
    2876:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    2878:	e8 e3       	ldi	r30, 0x38	; 56
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	83 ec       	ldi	r24, 0xC3	; 195
    287e:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    2880:	e4 e3       	ldi	r30, 0x34	; 52
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 ef       	ldi	r24, 0xF0	; 240
    2886:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    2888:	e5 e3       	ldi	r30, 0x35	; 53
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	83 ec       	ldi	r24, 0xC3	; 195
    288e:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    2890:	e1 e3       	ldi	r30, 0x31	; 49
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 ef       	ldi	r24, 0xF0	; 240
    2896:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    2898:	e2 e3       	ldi	r30, 0x32	; 50
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	83 ec       	ldi	r24, 0xC3	; 195
    289e:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    28a2:	0f 90       	pop	r0
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	cd b7       	in	r28, 0x3d	; 61
    28b0:	de b7       	in	r29, 0x3e	; 62
    28b2:	27 97       	sbiw	r28, 0x07	; 7
    28b4:	0f b6       	in	r0, 0x3f	; 63
    28b6:	f8 94       	cli
    28b8:	de bf       	out	0x3e, r29	; 62
    28ba:	0f be       	out	0x3f, r0	; 63
    28bc:	cd bf       	out	0x3d, r28	; 61
    28be:	8a 83       	std	Y+2, r24	; 0x02
    28c0:	6b 83       	std	Y+3, r22	; 0x03
    28c2:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    28c4:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    28c6:	8a 81       	ldd	r24, Y+2	; 0x02
    28c8:	84 30       	cpi	r24, 0x04	; 4
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <DIO_enuSetPinDirection+0x24>
    28cc:	de c0       	rjmp	.+444    	; 0x2a8a <DIO_enuSetPinDirection+0x1e0>
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	88 30       	cpi	r24, 0x08	; 8
    28d2:	08 f0       	brcs	.+2      	; 0x28d6 <DIO_enuSetPinDirection+0x2c>
    28d4:	da c0       	rjmp	.+436    	; 0x2a8a <DIO_enuSetPinDirection+0x1e0>
    28d6:	8c 81       	ldd	r24, Y+4	; 0x04
    28d8:	82 30       	cpi	r24, 0x02	; 2
    28da:	08 f0       	brcs	.+2      	; 0x28de <DIO_enuSetPinDirection+0x34>
    28dc:	d6 c0       	rjmp	.+428    	; 0x2a8a <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	3f 83       	std	Y+7, r19	; 0x07
    28e6:	2e 83       	std	Y+6, r18	; 0x06
    28e8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ea:	9f 81       	ldd	r25, Y+7	; 0x07
    28ec:	81 30       	cpi	r24, 0x01	; 1
    28ee:	91 05       	cpc	r25, r1
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <DIO_enuSetPinDirection+0x4a>
    28f2:	43 c0       	rjmp	.+134    	; 0x297a <DIO_enuSetPinDirection+0xd0>
    28f4:	2e 81       	ldd	r18, Y+6	; 0x06
    28f6:	3f 81       	ldd	r19, Y+7	; 0x07
    28f8:	22 30       	cpi	r18, 0x02	; 2
    28fa:	31 05       	cpc	r19, r1
    28fc:	2c f4       	brge	.+10     	; 0x2908 <DIO_enuSetPinDirection+0x5e>
    28fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2900:	9f 81       	ldd	r25, Y+7	; 0x07
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	71 f0       	breq	.+28     	; 0x2922 <DIO_enuSetPinDirection+0x78>
    2906:	bc c0       	rjmp	.+376    	; 0x2a80 <DIO_enuSetPinDirection+0x1d6>
    2908:	2e 81       	ldd	r18, Y+6	; 0x06
    290a:	3f 81       	ldd	r19, Y+7	; 0x07
    290c:	22 30       	cpi	r18, 0x02	; 2
    290e:	31 05       	cpc	r19, r1
    2910:	09 f4       	brne	.+2      	; 0x2914 <DIO_enuSetPinDirection+0x6a>
    2912:	5f c0       	rjmp	.+190    	; 0x29d2 <DIO_enuSetPinDirection+0x128>
    2914:	8e 81       	ldd	r24, Y+6	; 0x06
    2916:	9f 81       	ldd	r25, Y+7	; 0x07
    2918:	83 30       	cpi	r24, 0x03	; 3
    291a:	91 05       	cpc	r25, r1
    291c:	09 f4       	brne	.+2      	; 0x2920 <DIO_enuSetPinDirection+0x76>
    291e:	85 c0       	rjmp	.+266    	; 0x2a2a <DIO_enuSetPinDirection+0x180>
    2920:	af c0       	rjmp	.+350    	; 0x2a80 <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2922:	8c 81       	ldd	r24, Y+4	; 0x04
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	a1 f4       	brne	.+40     	; 0x2950 <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    2928:	aa e3       	ldi	r26, 0x3A	; 58
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	ea e3       	ldi	r30, 0x3A	; 58
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	48 2f       	mov	r20, r24
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	02 2e       	mov	r0, r18
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <DIO_enuSetPinDirection+0x9c>
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	0a 94       	dec	r0
    2948:	e2 f7       	brpl	.-8      	; 0x2942 <DIO_enuSetPinDirection+0x98>
    294a:	84 2b       	or	r24, r20
    294c:	8c 93       	st	X, r24
    294e:	98 c0       	rjmp	.+304    	; 0x2a80 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    2950:	aa e3       	ldi	r26, 0x3A	; 58
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	ea e3       	ldi	r30, 0x3A	; 58
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	48 2f       	mov	r20, r24
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	28 2f       	mov	r18, r24
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	02 2e       	mov	r0, r18
    2968:	02 c0       	rjmp	.+4      	; 0x296e <DIO_enuSetPinDirection+0xc4>
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	0a 94       	dec	r0
    2970:	e2 f7       	brpl	.-8      	; 0x296a <DIO_enuSetPinDirection+0xc0>
    2972:	80 95       	com	r24
    2974:	84 23       	and	r24, r20
    2976:	8c 93       	st	X, r24
    2978:	83 c0       	rjmp	.+262    	; 0x2a80 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    297a:	8c 81       	ldd	r24, Y+4	; 0x04
    297c:	81 30       	cpi	r24, 0x01	; 1
    297e:	a1 f4       	brne	.+40     	; 0x29a8 <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    2980:	a7 e3       	ldi	r26, 0x37	; 55
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	e7 e3       	ldi	r30, 0x37	; 55
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	80 81       	ld	r24, Z
    298a:	48 2f       	mov	r20, r24
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	02 2e       	mov	r0, r18
    2998:	02 c0       	rjmp	.+4      	; 0x299e <DIO_enuSetPinDirection+0xf4>
    299a:	88 0f       	add	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	0a 94       	dec	r0
    29a0:	e2 f7       	brpl	.-8      	; 0x299a <DIO_enuSetPinDirection+0xf0>
    29a2:	84 2b       	or	r24, r20
    29a4:	8c 93       	st	X, r24
    29a6:	6c c0       	rjmp	.+216    	; 0x2a80 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    29a8:	a7 e3       	ldi	r26, 0x37	; 55
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	e7 e3       	ldi	r30, 0x37	; 55
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	48 2f       	mov	r20, r24
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	28 2f       	mov	r18, r24
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	81 e0       	ldi	r24, 0x01	; 1
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	02 2e       	mov	r0, r18
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <DIO_enuSetPinDirection+0x11c>
    29c2:	88 0f       	add	r24, r24
    29c4:	99 1f       	adc	r25, r25
    29c6:	0a 94       	dec	r0
    29c8:	e2 f7       	brpl	.-8      	; 0x29c2 <DIO_enuSetPinDirection+0x118>
    29ca:	80 95       	com	r24
    29cc:	84 23       	and	r24, r20
    29ce:	8c 93       	st	X, r24
    29d0:	57 c0       	rjmp	.+174    	; 0x2a80 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    29d2:	8c 81       	ldd	r24, Y+4	; 0x04
    29d4:	81 30       	cpi	r24, 0x01	; 1
    29d6:	a1 f4       	brne	.+40     	; 0x2a00 <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    29d8:	a4 e3       	ldi	r26, 0x34	; 52
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e4 e3       	ldi	r30, 0x34	; 52
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	48 2f       	mov	r20, r24
    29e4:	8b 81       	ldd	r24, Y+3	; 0x03
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	02 2e       	mov	r0, r18
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <DIO_enuSetPinDirection+0x14c>
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	0a 94       	dec	r0
    29f8:	e2 f7       	brpl	.-8      	; 0x29f2 <DIO_enuSetPinDirection+0x148>
    29fa:	84 2b       	or	r24, r20
    29fc:	8c 93       	st	X, r24
    29fe:	40 c0       	rjmp	.+128    	; 0x2a80 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    2a00:	a4 e3       	ldi	r26, 0x34	; 52
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	e4 e3       	ldi	r30, 0x34	; 52
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	48 2f       	mov	r20, r24
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	28 2f       	mov	r18, r24
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	02 2e       	mov	r0, r18
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <DIO_enuSetPinDirection+0x174>
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	0a 94       	dec	r0
    2a20:	e2 f7       	brpl	.-8      	; 0x2a1a <DIO_enuSetPinDirection+0x170>
    2a22:	80 95       	com	r24
    2a24:	84 23       	and	r24, r20
    2a26:	8c 93       	st	X, r24
    2a28:	2b c0       	rjmp	.+86     	; 0x2a80 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	81 30       	cpi	r24, 0x01	; 1
    2a2e:	a1 f4       	brne	.+40     	; 0x2a58 <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    2a30:	a1 e3       	ldi	r26, 0x31	; 49
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	e1 e3       	ldi	r30, 0x31	; 49
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	48 2f       	mov	r20, r24
    2a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	02 2e       	mov	r0, r18
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <DIO_enuSetPinDirection+0x1a4>
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	0a 94       	dec	r0
    2a50:	e2 f7       	brpl	.-8      	; 0x2a4a <DIO_enuSetPinDirection+0x1a0>
    2a52:	84 2b       	or	r24, r20
    2a54:	8c 93       	st	X, r24
    2a56:	14 c0       	rjmp	.+40     	; 0x2a80 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    2a58:	a1 e3       	ldi	r26, 0x31	; 49
    2a5a:	b0 e0       	ldi	r27, 0x00	; 0
    2a5c:	e1 e3       	ldi	r30, 0x31	; 49
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	80 81       	ld	r24, Z
    2a62:	48 2f       	mov	r20, r24
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	28 2f       	mov	r18, r24
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	02 2e       	mov	r0, r18
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <DIO_enuSetPinDirection+0x1cc>
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	0a 94       	dec	r0
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <DIO_enuSetPinDirection+0x1c8>
    2a7a:	80 95       	com	r24
    2a7c:	84 23       	and	r24, r20
    2a7e:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    2a84:	99 81       	ldd	r25, Y+1	; 0x01
    2a86:	9d 83       	std	Y+5, r25	; 0x05
    2a88:	02 c0       	rjmp	.+4      	; 0x2a8e <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    2a8a:	29 81       	ldd	r18, Y+1	; 0x01
    2a8c:	2d 83       	std	Y+5, r18	; 0x05
    2a8e:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    2a90:	27 96       	adiw	r28, 0x07	; 7
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	27 97       	sbiw	r28, 0x07	; 7
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	f8 94       	cli
    2ab0:	de bf       	out	0x3e, r29	; 62
    2ab2:	0f be       	out	0x3f, r0	; 63
    2ab4:	cd bf       	out	0x3d, r28	; 61
    2ab6:	8a 83       	std	Y+2, r24	; 0x02
    2ab8:	6b 83       	std	Y+3, r22	; 0x03
    2aba:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2abc:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	84 30       	cpi	r24, 0x04	; 4
    2ac2:	08 f0       	brcs	.+2      	; 0x2ac6 <DIO_enuSetPinValue+0x24>
    2ac4:	de c0       	rjmp	.+444    	; 0x2c82 <DIO_enuSetPinValue+0x1e0>
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	88 30       	cpi	r24, 0x08	; 8
    2aca:	08 f0       	brcs	.+2      	; 0x2ace <DIO_enuSetPinValue+0x2c>
    2acc:	da c0       	rjmp	.+436    	; 0x2c82 <DIO_enuSetPinValue+0x1e0>
    2ace:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad0:	82 30       	cpi	r24, 0x02	; 2
    2ad2:	08 f0       	brcs	.+2      	; 0x2ad6 <DIO_enuSetPinValue+0x34>
    2ad4:	d6 c0       	rjmp	.+428    	; 0x2c82 <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    2ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad8:	28 2f       	mov	r18, r24
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	3f 83       	std	Y+7, r19	; 0x07
    2ade:	2e 83       	std	Y+6, r18	; 0x06
    2ae0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ae4:	81 30       	cpi	r24, 0x01	; 1
    2ae6:	91 05       	cpc	r25, r1
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <DIO_enuSetPinValue+0x4a>
    2aea:	43 c0       	rjmp	.+134    	; 0x2b72 <DIO_enuSetPinValue+0xd0>
    2aec:	2e 81       	ldd	r18, Y+6	; 0x06
    2aee:	3f 81       	ldd	r19, Y+7	; 0x07
    2af0:	22 30       	cpi	r18, 0x02	; 2
    2af2:	31 05       	cpc	r19, r1
    2af4:	2c f4       	brge	.+10     	; 0x2b00 <DIO_enuSetPinValue+0x5e>
    2af6:	8e 81       	ldd	r24, Y+6	; 0x06
    2af8:	9f 81       	ldd	r25, Y+7	; 0x07
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	71 f0       	breq	.+28     	; 0x2b1a <DIO_enuSetPinValue+0x78>
    2afe:	bc c0       	rjmp	.+376    	; 0x2c78 <DIO_enuSetPinValue+0x1d6>
    2b00:	2e 81       	ldd	r18, Y+6	; 0x06
    2b02:	3f 81       	ldd	r19, Y+7	; 0x07
    2b04:	22 30       	cpi	r18, 0x02	; 2
    2b06:	31 05       	cpc	r19, r1
    2b08:	09 f4       	brne	.+2      	; 0x2b0c <DIO_enuSetPinValue+0x6a>
    2b0a:	5f c0       	rjmp	.+190    	; 0x2bca <DIO_enuSetPinValue+0x128>
    2b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b10:	83 30       	cpi	r24, 0x03	; 3
    2b12:	91 05       	cpc	r25, r1
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <DIO_enuSetPinValue+0x76>
    2b16:	85 c0       	rjmp	.+266    	; 0x2c22 <DIO_enuSetPinValue+0x180>
    2b18:	af c0       	rjmp	.+350    	; 0x2c78 <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    2b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1c:	88 23       	and	r24, r24
    2b1e:	a1 f0       	breq	.+40     	; 0x2b48 <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    2b20:	ab e3       	ldi	r26, 0x3B	; 59
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	eb e3       	ldi	r30, 0x3B	; 59
    2b26:	f0 e0       	ldi	r31, 0x00	; 0
    2b28:	80 81       	ld	r24, Z
    2b2a:	48 2f       	mov	r20, r24
    2b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2e:	28 2f       	mov	r18, r24
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	02 2e       	mov	r0, r18
    2b38:	02 c0       	rjmp	.+4      	; 0x2b3e <DIO_enuSetPinValue+0x9c>
    2b3a:	88 0f       	add	r24, r24
    2b3c:	99 1f       	adc	r25, r25
    2b3e:	0a 94       	dec	r0
    2b40:	e2 f7       	brpl	.-8      	; 0x2b3a <DIO_enuSetPinValue+0x98>
    2b42:	84 2b       	or	r24, r20
    2b44:	8c 93       	st	X, r24
    2b46:	98 c0       	rjmp	.+304    	; 0x2c78 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    2b48:	ab e3       	ldi	r26, 0x3B	; 59
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	eb e3       	ldi	r30, 0x3B	; 59
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	48 2f       	mov	r20, r24
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	28 2f       	mov	r18, r24
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	02 2e       	mov	r0, r18
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <DIO_enuSetPinValue+0xc4>
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	0a 94       	dec	r0
    2b68:	e2 f7       	brpl	.-8      	; 0x2b62 <DIO_enuSetPinValue+0xc0>
    2b6a:	80 95       	com	r24
    2b6c:	84 23       	and	r24, r20
    2b6e:	8c 93       	st	X, r24
    2b70:	83 c0       	rjmp	.+262    	; 0x2c78 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	88 23       	and	r24, r24
    2b76:	a1 f0       	breq	.+40     	; 0x2ba0 <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    2b78:	a8 e3       	ldi	r26, 0x38	; 56
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	e8 e3       	ldi	r30, 0x38	; 56
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	48 2f       	mov	r20, r24
    2b84:	8b 81       	ldd	r24, Y+3	; 0x03
    2b86:	28 2f       	mov	r18, r24
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	02 2e       	mov	r0, r18
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <DIO_enuSetPinValue+0xf4>
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	0a 94       	dec	r0
    2b98:	e2 f7       	brpl	.-8      	; 0x2b92 <DIO_enuSetPinValue+0xf0>
    2b9a:	84 2b       	or	r24, r20
    2b9c:	8c 93       	st	X, r24
    2b9e:	6c c0       	rjmp	.+216    	; 0x2c78 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    2ba0:	a8 e3       	ldi	r26, 0x38	; 56
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e8 e3       	ldi	r30, 0x38	; 56
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	48 2f       	mov	r20, r24
    2bac:	8b 81       	ldd	r24, Y+3	; 0x03
    2bae:	28 2f       	mov	r18, r24
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	02 2e       	mov	r0, r18
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <DIO_enuSetPinValue+0x11c>
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	0a 94       	dec	r0
    2bc0:	e2 f7       	brpl	.-8      	; 0x2bba <DIO_enuSetPinValue+0x118>
    2bc2:	80 95       	com	r24
    2bc4:	84 23       	and	r24, r20
    2bc6:	8c 93       	st	X, r24
    2bc8:	57 c0       	rjmp	.+174    	; 0x2c78 <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    2bca:	8c 81       	ldd	r24, Y+4	; 0x04
    2bcc:	88 23       	and	r24, r24
    2bce:	a1 f0       	breq	.+40     	; 0x2bf8 <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    2bd0:	a5 e3       	ldi	r26, 0x35	; 53
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e5 e3       	ldi	r30, 0x35	; 53
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	48 2f       	mov	r20, r24
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	02 2e       	mov	r0, r18
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <DIO_enuSetPinValue+0x14c>
    2bea:	88 0f       	add	r24, r24
    2bec:	99 1f       	adc	r25, r25
    2bee:	0a 94       	dec	r0
    2bf0:	e2 f7       	brpl	.-8      	; 0x2bea <DIO_enuSetPinValue+0x148>
    2bf2:	84 2b       	or	r24, r20
    2bf4:	8c 93       	st	X, r24
    2bf6:	40 c0       	rjmp	.+128    	; 0x2c78 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    2bf8:	a5 e3       	ldi	r26, 0x35	; 53
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e5 e3       	ldi	r30, 0x35	; 53
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	48 2f       	mov	r20, r24
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	02 2e       	mov	r0, r18
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <DIO_enuSetPinValue+0x174>
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	0a 94       	dec	r0
    2c18:	e2 f7       	brpl	.-8      	; 0x2c12 <DIO_enuSetPinValue+0x170>
    2c1a:	80 95       	com	r24
    2c1c:	84 23       	and	r24, r20
    2c1e:	8c 93       	st	X, r24
    2c20:	2b c0       	rjmp	.+86     	; 0x2c78 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    2c22:	8c 81       	ldd	r24, Y+4	; 0x04
    2c24:	88 23       	and	r24, r24
    2c26:	a1 f0       	breq	.+40     	; 0x2c50 <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    2c28:	a2 e3       	ldi	r26, 0x32	; 50
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	e2 e3       	ldi	r30, 0x32	; 50
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	80 81       	ld	r24, Z
    2c32:	48 2f       	mov	r20, r24
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	02 2e       	mov	r0, r18
    2c40:	02 c0       	rjmp	.+4      	; 0x2c46 <DIO_enuSetPinValue+0x1a4>
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	0a 94       	dec	r0
    2c48:	e2 f7       	brpl	.-8      	; 0x2c42 <DIO_enuSetPinValue+0x1a0>
    2c4a:	84 2b       	or	r24, r20
    2c4c:	8c 93       	st	X, r24
    2c4e:	14 c0       	rjmp	.+40     	; 0x2c78 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    2c50:	a2 e3       	ldi	r26, 0x32	; 50
    2c52:	b0 e0       	ldi	r27, 0x00	; 0
    2c54:	e2 e3       	ldi	r30, 0x32	; 50
    2c56:	f0 e0       	ldi	r31, 0x00	; 0
    2c58:	80 81       	ld	r24, Z
    2c5a:	48 2f       	mov	r20, r24
    2c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5e:	28 2f       	mov	r18, r24
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	02 2e       	mov	r0, r18
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <DIO_enuSetPinValue+0x1cc>
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	0a 94       	dec	r0
    2c70:	e2 f7       	brpl	.-8      	; 0x2c6a <DIO_enuSetPinValue+0x1c8>
    2c72:	80 95       	com	r24
    2c74:	84 23       	and	r24, r20
    2c76:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    2c7c:	99 81       	ldd	r25, Y+1	; 0x01
    2c7e:	9d 83       	std	Y+5, r25	; 0x05
    2c80:	02 c0       	rjmp	.+4      	; 0x2c86 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    2c82:	29 81       	ldd	r18, Y+1	; 0x01
    2c84:	2d 83       	std	Y+5, r18	; 0x05
    2c86:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    2c88:	27 96       	adiw	r28, 0x07	; 7
    2c8a:	0f b6       	in	r0, 0x3f	; 63
    2c8c:	f8 94       	cli
    2c8e:	de bf       	out	0x3e, r29	; 62
    2c90:	0f be       	out	0x3f, r0	; 63
    2c92:	cd bf       	out	0x3d, r28	; 61
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	28 97       	sbiw	r28, 0x08	; 8
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	8a 83       	std	Y+2, r24	; 0x02
    2cb0:	6b 83       	std	Y+3, r22	; 0x03
    2cb2:	5d 83       	std	Y+5, r21	; 0x05
    2cb4:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2cb6:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    2cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cba:	9d 81       	ldd	r25, Y+5	; 0x05
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	29 f4       	brne	.+10     	; 0x2cca <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    2cc0:	83 e0       	ldi	r24, 0x03	; 3
    2cc2:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    2cc4:	29 81       	ldd	r18, Y+1	; 0x01
    2cc6:	28 87       	std	Y+8, r18	; 0x08
    2cc8:	7f c0       	rjmp	.+254    	; 0x2dc8 <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	84 30       	cpi	r24, 0x04	; 4
    2cce:	08 f0       	brcs	.+2      	; 0x2cd2 <DIO_enuGetPinValue+0x38>
    2cd0:	79 c0       	rjmp	.+242    	; 0x2dc4 <DIO_enuGetPinValue+0x12a>
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	88 30       	cpi	r24, 0x08	; 8
    2cd6:	08 f0       	brcs	.+2      	; 0x2cda <DIO_enuGetPinValue+0x40>
    2cd8:	75 c0       	rjmp	.+234    	; 0x2dc4 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    2cda:	8a 81       	ldd	r24, Y+2	; 0x02
    2cdc:	48 2f       	mov	r20, r24
    2cde:	50 e0       	ldi	r21, 0x00	; 0
    2ce0:	5f 83       	std	Y+7, r21	; 0x07
    2ce2:	4e 83       	std	Y+6, r20	; 0x06
    2ce4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ce8:	81 30       	cpi	r24, 0x01	; 1
    2cea:	91 05       	cpc	r25, r1
    2cec:	59 f1       	breq	.+86     	; 0x2d44 <DIO_enuGetPinValue+0xaa>
    2cee:	2e 81       	ldd	r18, Y+6	; 0x06
    2cf0:	3f 81       	ldd	r19, Y+7	; 0x07
    2cf2:	22 30       	cpi	r18, 0x02	; 2
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	34 f4       	brge	.+12     	; 0x2d04 <DIO_enuGetPinValue+0x6a>
    2cf8:	4e 81       	ldd	r20, Y+6	; 0x06
    2cfa:	5f 81       	ldd	r21, Y+7	; 0x07
    2cfc:	41 15       	cp	r20, r1
    2cfe:	51 05       	cpc	r21, r1
    2d00:	69 f0       	breq	.+26     	; 0x2d1c <DIO_enuGetPinValue+0x82>
    2d02:	5b c0       	rjmp	.+182    	; 0x2dba <DIO_enuGetPinValue+0x120>
    2d04:	8e 81       	ldd	r24, Y+6	; 0x06
    2d06:	9f 81       	ldd	r25, Y+7	; 0x07
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	91 05       	cpc	r25, r1
    2d0c:	79 f1       	breq	.+94     	; 0x2d6c <DIO_enuGetPinValue+0xd2>
    2d0e:	2e 81       	ldd	r18, Y+6	; 0x06
    2d10:	3f 81       	ldd	r19, Y+7	; 0x07
    2d12:	23 30       	cpi	r18, 0x03	; 3
    2d14:	31 05       	cpc	r19, r1
    2d16:	09 f4       	brne	.+2      	; 0x2d1a <DIO_enuGetPinValue+0x80>
    2d18:	3d c0       	rjmp	.+122    	; 0x2d94 <DIO_enuGetPinValue+0xfa>
    2d1a:	4f c0       	rjmp	.+158    	; 0x2dba <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    2d1c:	e9 e3       	ldi	r30, 0x39	; 57
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	28 2f       	mov	r18, r24
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	8b 81       	ldd	r24, Y+3	; 0x03
    2d28:	88 2f       	mov	r24, r24
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	a9 01       	movw	r20, r18
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <DIO_enuGetPinValue+0x9a>
    2d30:	55 95       	asr	r21
    2d32:	47 95       	ror	r20
    2d34:	8a 95       	dec	r24
    2d36:	e2 f7       	brpl	.-8      	; 0x2d30 <DIO_enuGetPinValue+0x96>
    2d38:	ca 01       	movw	r24, r20
    2d3a:	81 70       	andi	r24, 0x01	; 1
    2d3c:	ec 81       	ldd	r30, Y+4	; 0x04
    2d3e:	fd 81       	ldd	r31, Y+5	; 0x05
    2d40:	80 83       	st	Z, r24
    2d42:	3b c0       	rjmp	.+118    	; 0x2dba <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    2d44:	e6 e3       	ldi	r30, 0x36	; 54
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d50:	88 2f       	mov	r24, r24
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	a9 01       	movw	r20, r18
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <DIO_enuGetPinValue+0xc2>
    2d58:	55 95       	asr	r21
    2d5a:	47 95       	ror	r20
    2d5c:	8a 95       	dec	r24
    2d5e:	e2 f7       	brpl	.-8      	; 0x2d58 <DIO_enuGetPinValue+0xbe>
    2d60:	ca 01       	movw	r24, r20
    2d62:	81 70       	andi	r24, 0x01	; 1
    2d64:	ec 81       	ldd	r30, Y+4	; 0x04
    2d66:	fd 81       	ldd	r31, Y+5	; 0x05
    2d68:	80 83       	st	Z, r24
    2d6a:	27 c0       	rjmp	.+78     	; 0x2dba <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    2d6c:	e3 e3       	ldi	r30, 0x33	; 51
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	80 81       	ld	r24, Z
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	8b 81       	ldd	r24, Y+3	; 0x03
    2d78:	88 2f       	mov	r24, r24
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	a9 01       	movw	r20, r18
    2d7e:	02 c0       	rjmp	.+4      	; 0x2d84 <DIO_enuGetPinValue+0xea>
    2d80:	55 95       	asr	r21
    2d82:	47 95       	ror	r20
    2d84:	8a 95       	dec	r24
    2d86:	e2 f7       	brpl	.-8      	; 0x2d80 <DIO_enuGetPinValue+0xe6>
    2d88:	ca 01       	movw	r24, r20
    2d8a:	81 70       	andi	r24, 0x01	; 1
    2d8c:	ec 81       	ldd	r30, Y+4	; 0x04
    2d8e:	fd 81       	ldd	r31, Y+5	; 0x05
    2d90:	80 83       	st	Z, r24
    2d92:	13 c0       	rjmp	.+38     	; 0x2dba <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    2d94:	e0 e3       	ldi	r30, 0x30	; 48
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	28 2f       	mov	r18, r24
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	88 2f       	mov	r24, r24
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	a9 01       	movw	r20, r18
    2da6:	02 c0       	rjmp	.+4      	; 0x2dac <DIO_enuGetPinValue+0x112>
    2da8:	55 95       	asr	r21
    2daa:	47 95       	ror	r20
    2dac:	8a 95       	dec	r24
    2dae:	e2 f7       	brpl	.-8      	; 0x2da8 <DIO_enuGetPinValue+0x10e>
    2db0:	ca 01       	movw	r24, r20
    2db2:	81 70       	andi	r24, 0x01	; 1
    2db4:	ec 81       	ldd	r30, Y+4	; 0x04
    2db6:	fd 81       	ldd	r31, Y+5	; 0x05
    2db8:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    2dbe:	59 81       	ldd	r21, Y+1	; 0x01
    2dc0:	58 87       	std	Y+8, r21	; 0x08
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	88 87       	std	Y+8, r24	; 0x08
    2dc8:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    2dca:	28 96       	adiw	r28, 0x08	; 8
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <DIO_enuTogglePinValue+0x6>
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <DIO_enuTogglePinValue+0x8>
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <DIO_enuTogglePinValue+0xa>
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	8a 83       	std	Y+2, r24	; 0x02
    2dec:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2dee:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	84 30       	cpi	r24, 0x04	; 4
    2df4:	08 f0       	brcs	.+2      	; 0x2df8 <DIO_enuTogglePinValue+0x1c>
    2df6:	77 c0       	rjmp	.+238    	; 0x2ee6 <DIO_enuTogglePinValue+0x10a>
    2df8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfa:	88 30       	cpi	r24, 0x08	; 8
    2dfc:	08 f0       	brcs	.+2      	; 0x2e00 <DIO_enuTogglePinValue+0x24>
    2dfe:	73 c0       	rjmp	.+230    	; 0x2ee6 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    2e00:	8a 81       	ldd	r24, Y+2	; 0x02
    2e02:	28 2f       	mov	r18, r24
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	3e 83       	std	Y+6, r19	; 0x06
    2e08:	2d 83       	std	Y+5, r18	; 0x05
    2e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0e:	81 30       	cpi	r24, 0x01	; 1
    2e10:	91 05       	cpc	r25, r1
    2e12:	49 f1       	breq	.+82     	; 0x2e66 <DIO_enuTogglePinValue+0x8a>
    2e14:	2d 81       	ldd	r18, Y+5	; 0x05
    2e16:	3e 81       	ldd	r19, Y+6	; 0x06
    2e18:	22 30       	cpi	r18, 0x02	; 2
    2e1a:	31 05       	cpc	r19, r1
    2e1c:	2c f4       	brge	.+10     	; 0x2e28 <DIO_enuTogglePinValue+0x4c>
    2e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e20:	9e 81       	ldd	r25, Y+6	; 0x06
    2e22:	00 97       	sbiw	r24, 0x00	; 0
    2e24:	61 f0       	breq	.+24     	; 0x2e3e <DIO_enuTogglePinValue+0x62>
    2e26:	5a c0       	rjmp	.+180    	; 0x2edc <DIO_enuTogglePinValue+0x100>
    2e28:	2d 81       	ldd	r18, Y+5	; 0x05
    2e2a:	3e 81       	ldd	r19, Y+6	; 0x06
    2e2c:	22 30       	cpi	r18, 0x02	; 2
    2e2e:	31 05       	cpc	r19, r1
    2e30:	71 f1       	breq	.+92     	; 0x2e8e <DIO_enuTogglePinValue+0xb2>
    2e32:	8d 81       	ldd	r24, Y+5	; 0x05
    2e34:	9e 81       	ldd	r25, Y+6	; 0x06
    2e36:	83 30       	cpi	r24, 0x03	; 3
    2e38:	91 05       	cpc	r25, r1
    2e3a:	e9 f1       	breq	.+122    	; 0x2eb6 <DIO_enuTogglePinValue+0xda>
    2e3c:	4f c0       	rjmp	.+158    	; 0x2edc <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    2e3e:	ab e3       	ldi	r26, 0x3B	; 59
    2e40:	b0 e0       	ldi	r27, 0x00	; 0
    2e42:	eb e3       	ldi	r30, 0x3B	; 59
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	80 81       	ld	r24, Z
    2e48:	48 2f       	mov	r20, r24
    2e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4c:	28 2f       	mov	r18, r24
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	02 2e       	mov	r0, r18
    2e56:	02 c0       	rjmp	.+4      	; 0x2e5c <DIO_enuTogglePinValue+0x80>
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	0a 94       	dec	r0
    2e5e:	e2 f7       	brpl	.-8      	; 0x2e58 <DIO_enuTogglePinValue+0x7c>
    2e60:	84 27       	eor	r24, r20
    2e62:	8c 93       	st	X, r24
    2e64:	3b c0       	rjmp	.+118    	; 0x2edc <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    2e66:	a8 e3       	ldi	r26, 0x38	; 56
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	e8 e3       	ldi	r30, 0x38	; 56
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	48 2f       	mov	r20, r24
    2e72:	8b 81       	ldd	r24, Y+3	; 0x03
    2e74:	28 2f       	mov	r18, r24
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	02 2e       	mov	r0, r18
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <DIO_enuTogglePinValue+0xa8>
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	0a 94       	dec	r0
    2e86:	e2 f7       	brpl	.-8      	; 0x2e80 <DIO_enuTogglePinValue+0xa4>
    2e88:	84 27       	eor	r24, r20
    2e8a:	8c 93       	st	X, r24
    2e8c:	27 c0       	rjmp	.+78     	; 0x2edc <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    2e8e:	a5 e3       	ldi	r26, 0x35	; 53
    2e90:	b0 e0       	ldi	r27, 0x00	; 0
    2e92:	e5 e3       	ldi	r30, 0x35	; 53
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	80 81       	ld	r24, Z
    2e98:	48 2f       	mov	r20, r24
    2e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	02 2e       	mov	r0, r18
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <DIO_enuTogglePinValue+0xd0>
    2ea8:	88 0f       	add	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	0a 94       	dec	r0
    2eae:	e2 f7       	brpl	.-8      	; 0x2ea8 <DIO_enuTogglePinValue+0xcc>
    2eb0:	84 27       	eor	r24, r20
    2eb2:	8c 93       	st	X, r24
    2eb4:	13 c0       	rjmp	.+38     	; 0x2edc <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    2eb6:	a2 e3       	ldi	r26, 0x32	; 50
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e2 e3       	ldi	r30, 0x32	; 50
    2ebc:	f0 e0       	ldi	r31, 0x00	; 0
    2ebe:	80 81       	ld	r24, Z
    2ec0:	48 2f       	mov	r20, r24
    2ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	02 2e       	mov	r0, r18
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <DIO_enuTogglePinValue+0xf8>
    2ed0:	88 0f       	add	r24, r24
    2ed2:	99 1f       	adc	r25, r25
    2ed4:	0a 94       	dec	r0
    2ed6:	e2 f7       	brpl	.-8      	; 0x2ed0 <DIO_enuTogglePinValue+0xf4>
    2ed8:	84 27       	eor	r24, r20
    2eda:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    2ee0:	99 81       	ldd	r25, Y+1	; 0x01
    2ee2:	9c 83       	std	Y+4, r25	; 0x04
    2ee4:	02 c0       	rjmp	.+4      	; 0x2eea <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    2ee6:	29 81       	ldd	r18, Y+1	; 0x01
    2ee8:	2c 83       	std	Y+4, r18	; 0x04
    2eea:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    2eec:	26 96       	adiw	r28, 0x06	; 6
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	cf 91       	pop	r28
    2efa:	df 91       	pop	r29
    2efc:	08 95       	ret

00002efe <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    2efe:	df 93       	push	r29
    2f00:	cf 93       	push	r28
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <DIO_enuSetPortDirection+0x6>
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <DIO_enuSetPortDirection+0x8>
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <DIO_enuSetPortDirection+0xa>
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	8a 83       	std	Y+2, r24	; 0x02
    2f0e:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2f10:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	84 30       	cpi	r24, 0x04	; 4
    2f16:	08 f0       	brcs	.+2      	; 0x2f1a <DIO_enuSetPortDirection+0x1c>
    2f18:	57 c0       	rjmp	.+174    	; 0x2fc8 <DIO_enuSetPortDirection+0xca>
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	82 30       	cpi	r24, 0x02	; 2
    2f1e:	08 f0       	brcs	.+2      	; 0x2f22 <DIO_enuSetPortDirection+0x24>
    2f20:	53 c0       	rjmp	.+166    	; 0x2fc8 <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	3e 83       	std	Y+6, r19	; 0x06
    2f2a:	2d 83       	std	Y+5, r18	; 0x05
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	81 30       	cpi	r24, 0x01	; 1
    2f32:	91 05       	cpc	r25, r1
    2f34:	09 f1       	breq	.+66     	; 0x2f78 <DIO_enuSetPortDirection+0x7a>
    2f36:	2d 81       	ldd	r18, Y+5	; 0x05
    2f38:	3e 81       	ldd	r19, Y+6	; 0x06
    2f3a:	22 30       	cpi	r18, 0x02	; 2
    2f3c:	31 05       	cpc	r19, r1
    2f3e:	2c f4       	brge	.+10     	; 0x2f4a <DIO_enuSetPortDirection+0x4c>
    2f40:	8d 81       	ldd	r24, Y+5	; 0x05
    2f42:	9e 81       	ldd	r25, Y+6	; 0x06
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	61 f0       	breq	.+24     	; 0x2f60 <DIO_enuSetPortDirection+0x62>
    2f48:	3a c0       	rjmp	.+116    	; 0x2fbe <DIO_enuSetPortDirection+0xc0>
    2f4a:	2d 81       	ldd	r18, Y+5	; 0x05
    2f4c:	3e 81       	ldd	r19, Y+6	; 0x06
    2f4e:	22 30       	cpi	r18, 0x02	; 2
    2f50:	31 05       	cpc	r19, r1
    2f52:	f1 f0       	breq	.+60     	; 0x2f90 <DIO_enuSetPortDirection+0x92>
    2f54:	8d 81       	ldd	r24, Y+5	; 0x05
    2f56:	9e 81       	ldd	r25, Y+6	; 0x06
    2f58:	83 30       	cpi	r24, 0x03	; 3
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	29 f1       	breq	.+74     	; 0x2fa8 <DIO_enuSetPortDirection+0xaa>
    2f5e:	2f c0       	rjmp	.+94     	; 0x2fbe <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2f60:	8b 81       	ldd	r24, Y+3	; 0x03
    2f62:	81 30       	cpi	r24, 0x01	; 1
    2f64:	29 f4       	brne	.+10     	; 0x2f70 <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    2f66:	ea e3       	ldi	r30, 0x3A	; 58
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	8f ef       	ldi	r24, 0xFF	; 255
    2f6c:	80 83       	st	Z, r24
    2f6e:	27 c0       	rjmp	.+78     	; 0x2fbe <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    2f70:	ea e3       	ldi	r30, 0x3A	; 58
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	10 82       	st	Z, r1
    2f76:	23 c0       	rjmp	.+70     	; 0x2fbe <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	81 30       	cpi	r24, 0x01	; 1
    2f7c:	29 f4       	brne	.+10     	; 0x2f88 <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    2f7e:	e7 e3       	ldi	r30, 0x37	; 55
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	8f ef       	ldi	r24, 0xFF	; 255
    2f84:	80 83       	st	Z, r24
    2f86:	1b c0       	rjmp	.+54     	; 0x2fbe <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    2f88:	e7 e3       	ldi	r30, 0x37	; 55
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	10 82       	st	Z, r1
    2f8e:	17 c0       	rjmp	.+46     	; 0x2fbe <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	81 30       	cpi	r24, 0x01	; 1
    2f94:	29 f4       	brne	.+10     	; 0x2fa0 <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    2f96:	e4 e3       	ldi	r30, 0x34	; 52
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	8f ef       	ldi	r24, 0xFF	; 255
    2f9c:	80 83       	st	Z, r24
    2f9e:	0f c0       	rjmp	.+30     	; 0x2fbe <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    2fa0:	e4 e3       	ldi	r30, 0x34	; 52
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	10 82       	st	Z, r1
    2fa6:	0b c0       	rjmp	.+22     	; 0x2fbe <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2faa:	81 30       	cpi	r24, 0x01	; 1
    2fac:	29 f4       	brne	.+10     	; 0x2fb8 <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    2fae:	e1 e3       	ldi	r30, 0x31	; 49
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	8f ef       	ldi	r24, 0xFF	; 255
    2fb4:	80 83       	st	Z, r24
    2fb6:	03 c0       	rjmp	.+6      	; 0x2fbe <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    2fb8:	e1 e3       	ldi	r30, 0x31	; 49
    2fba:	f0 e0       	ldi	r31, 0x00	; 0
    2fbc:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    2fc2:	99 81       	ldd	r25, Y+1	; 0x01
    2fc4:	9c 83       	std	Y+4, r25	; 0x04
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    2fc8:	29 81       	ldd	r18, Y+1	; 0x01
    2fca:	2c 83       	std	Y+4, r18	; 0x04
    2fcc:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    2fce:	26 96       	adiw	r28, 0x06	; 6
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	cf 91       	pop	r28
    2fdc:	df 91       	pop	r29
    2fde:	08 95       	ret

00002fe0 <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    2fe0:	df 93       	push	r29
    2fe2:	cf 93       	push	r28
    2fe4:	00 d0       	rcall	.+0      	; 0x2fe6 <DIO_enuSetPortValue+0x6>
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <DIO_enuSetPortValue+0x8>
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <DIO_enuSetPortValue+0xa>
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	8a 83       	std	Y+2, r24	; 0x02
    2ff0:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2ff2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	84 30       	cpi	r24, 0x04	; 4
    2ff8:	08 f0       	brcs	.+2      	; 0x2ffc <DIO_enuSetPortValue+0x1c>
    2ffa:	57 c0       	rjmp	.+174    	; 0x30aa <DIO_enuSetPortValue+0xca>
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	82 30       	cpi	r24, 0x02	; 2
    3000:	08 f0       	brcs	.+2      	; 0x3004 <DIO_enuSetPortValue+0x24>
    3002:	53 c0       	rjmp	.+166    	; 0x30aa <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	28 2f       	mov	r18, r24
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	3e 83       	std	Y+6, r19	; 0x06
    300c:	2d 83       	std	Y+5, r18	; 0x05
    300e:	8d 81       	ldd	r24, Y+5	; 0x05
    3010:	9e 81       	ldd	r25, Y+6	; 0x06
    3012:	81 30       	cpi	r24, 0x01	; 1
    3014:	91 05       	cpc	r25, r1
    3016:	09 f1       	breq	.+66     	; 0x305a <DIO_enuSetPortValue+0x7a>
    3018:	2d 81       	ldd	r18, Y+5	; 0x05
    301a:	3e 81       	ldd	r19, Y+6	; 0x06
    301c:	22 30       	cpi	r18, 0x02	; 2
    301e:	31 05       	cpc	r19, r1
    3020:	2c f4       	brge	.+10     	; 0x302c <DIO_enuSetPortValue+0x4c>
    3022:	8d 81       	ldd	r24, Y+5	; 0x05
    3024:	9e 81       	ldd	r25, Y+6	; 0x06
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	61 f0       	breq	.+24     	; 0x3042 <DIO_enuSetPortValue+0x62>
    302a:	3a c0       	rjmp	.+116    	; 0x30a0 <DIO_enuSetPortValue+0xc0>
    302c:	2d 81       	ldd	r18, Y+5	; 0x05
    302e:	3e 81       	ldd	r19, Y+6	; 0x06
    3030:	22 30       	cpi	r18, 0x02	; 2
    3032:	31 05       	cpc	r19, r1
    3034:	f1 f0       	breq	.+60     	; 0x3072 <DIO_enuSetPortValue+0x92>
    3036:	8d 81       	ldd	r24, Y+5	; 0x05
    3038:	9e 81       	ldd	r25, Y+6	; 0x06
    303a:	83 30       	cpi	r24, 0x03	; 3
    303c:	91 05       	cpc	r25, r1
    303e:	29 f1       	breq	.+74     	; 0x308a <DIO_enuSetPortValue+0xaa>
    3040:	2f c0       	rjmp	.+94     	; 0x30a0 <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	88 23       	and	r24, r24
    3046:	29 f0       	breq	.+10     	; 0x3052 <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    3048:	eb e3       	ldi	r30, 0x3B	; 59
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	8f ef       	ldi	r24, 0xFF	; 255
    304e:	80 83       	st	Z, r24
    3050:	27 c0       	rjmp	.+78     	; 0x30a0 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    3052:	eb e3       	ldi	r30, 0x3B	; 59
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	10 82       	st	Z, r1
    3058:	23 c0       	rjmp	.+70     	; 0x30a0 <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    305a:	8b 81       	ldd	r24, Y+3	; 0x03
    305c:	88 23       	and	r24, r24
    305e:	29 f0       	breq	.+10     	; 0x306a <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    3060:	e8 e3       	ldi	r30, 0x38	; 56
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	8f ef       	ldi	r24, 0xFF	; 255
    3066:	80 83       	st	Z, r24
    3068:	1b c0       	rjmp	.+54     	; 0x30a0 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    306a:	e8 e3       	ldi	r30, 0x38	; 56
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	10 82       	st	Z, r1
    3070:	17 c0       	rjmp	.+46     	; 0x30a0 <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    3072:	8b 81       	ldd	r24, Y+3	; 0x03
    3074:	88 23       	and	r24, r24
    3076:	29 f0       	breq	.+10     	; 0x3082 <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    3078:	e5 e3       	ldi	r30, 0x35	; 53
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	8f ef       	ldi	r24, 0xFF	; 255
    307e:	80 83       	st	Z, r24
    3080:	0f c0       	rjmp	.+30     	; 0x30a0 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    3082:	e5 e3       	ldi	r30, 0x35	; 53
    3084:	f0 e0       	ldi	r31, 0x00	; 0
    3086:	10 82       	st	Z, r1
    3088:	0b c0       	rjmp	.+22     	; 0x30a0 <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    308a:	8b 81       	ldd	r24, Y+3	; 0x03
    308c:	88 23       	and	r24, r24
    308e:	29 f0       	breq	.+10     	; 0x309a <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    3090:	e2 e3       	ldi	r30, 0x32	; 50
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	8f ef       	ldi	r24, 0xFF	; 255
    3096:	80 83       	st	Z, r24
    3098:	03 c0       	rjmp	.+6      	; 0x30a0 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    309a:	e2 e3       	ldi	r30, 0x32	; 50
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    30a4:	99 81       	ldd	r25, Y+1	; 0x01
    30a6:	9c 83       	std	Y+4, r25	; 0x04
    30a8:	02 c0       	rjmp	.+4      	; 0x30ae <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    30aa:	29 81       	ldd	r18, Y+1	; 0x01
    30ac:	2c 83       	std	Y+4, r18	; 0x04
    30ae:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    30b0:	26 96       	adiw	r28, 0x06	; 6
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	f8 94       	cli
    30b6:	de bf       	out	0x3e, r29	; 62
    30b8:	0f be       	out	0x3f, r0	; 63
    30ba:	cd bf       	out	0x3d, r28	; 61
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <ADC_enuInit>:


static void (*ADC_CallBackFunction)(void) = NULL;


void ADC_enuInit(){
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
    30ca:	2e 97       	sbiw	r28, 0x0e	; 14
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	de bf       	out	0x3e, r29	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	cd bf       	out	0x3d, r28	; 61
	 * 5. Enabling ADC
	 * */


	/*************************** Selecting  voltage reference ***************************/
		ADMUX_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    30d6:	a7 e2       	ldi	r26, 0x27	; 39
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e7 e2       	ldi	r30, 0x27	; 39
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	8f 71       	andi	r24, 0x1F	; 31
    30e2:	8c 93       	st	X, r24
		ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
    30e4:	a7 e2       	ldi	r26, 0x27	; 39
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	e7 e2       	ldi	r30, 0x27	; 39
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	80 64       	ori	r24, 0x40	; 64
    30f0:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************** Selecting ADC MODE ********************************/
		#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
			SET_BIT(ADCSRA_REG, ADCSRA_ADATE);
    30f2:	a6 e2       	ldi	r26, 0x26	; 38
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	e6 e2       	ldi	r30, 0x26	; 38
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	80 62       	ori	r24, 0x20	; 32
    30fe:	8c 93       	st	X, r24

			SFIOR_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    3100:	a0 e5       	ldi	r26, 0x50	; 80
    3102:	b0 e0       	ldi	r27, 0x00	; 0
    3104:	e0 e5       	ldi	r30, 0x50	; 80
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	80 81       	ld	r24, Z
    310a:	8f 71       	andi	r24, 0x1F	; 31
    310c:	8c 93       	st	X, r24
			SFIOR_REG |= ADC_AUTO_TRIG_SRCE_SELECTOR;
    310e:	a0 e5       	ldi	r26, 0x50	; 80
    3110:	b0 e0       	ldi	r27, 0x00	; 0
    3112:	e0 e5       	ldi	r30, 0x50	; 80
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	80 81       	ld	r24, Z
    3118:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* Selecting Adjustment *******************************/
		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			CLR_BIT(ADMUX_REG, ADMUX_ADLAR);
    311a:	a7 e2       	ldi	r26, 0x27	; 39
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e7 e2       	ldi	r30, 0x27	; 39
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	8f 7d       	andi	r24, 0xDF	; 223
    3126:	8c 93       	st	X, r24
	/***************************** Clearing  Interrupt Flag *****************************/
		//! Notice: that ADIF to be cleared we write logical one (from data sheet)
		//So in initialization of ADC we write 1 to ADIF bit to make sure that the
		//flag is cleared in order to make sure that ADC ready for upcoming conversation
		// clearing interrupt flag
		SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    3128:	a6 e2       	ldi	r26, 0x26	; 38
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	e6 e2       	ldi	r30, 0x26	; 38
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	80 61       	ori	r24, 0x10	; 16
    3134:	8c 93       	st	X, r24
	/************************************************************************************/


	/*********************************** Enabling ADC ***********************************/
		SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    3136:	a6 e2       	ldi	r26, 0x26	; 38
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	e6 e2       	ldi	r30, 0x26	; 38
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	80 68       	ori	r24, 0x80	; 128
    3142:	8c 93       	st	X, r24
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	a8 e4       	ldi	r26, 0x48	; 72
    314a:	b3 e4       	ldi	r27, 0x43	; 67
    314c:	8b 87       	std	Y+11, r24	; 0x0b
    314e:	9c 87       	std	Y+12, r25	; 0x0c
    3150:	ad 87       	std	Y+13, r26	; 0x0d
    3152:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3154:	6b 85       	ldd	r22, Y+11	; 0x0b
    3156:	7c 85       	ldd	r23, Y+12	; 0x0c
    3158:	8d 85       	ldd	r24, Y+13	; 0x0d
    315a:	9e 85       	ldd	r25, Y+14	; 0x0e
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	4a e7       	ldi	r20, 0x7A	; 122
    3162:	55 e4       	ldi	r21, 0x45	; 69
    3164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	8f 83       	std	Y+7, r24	; 0x07
    316e:	98 87       	std	Y+8, r25	; 0x08
    3170:	a9 87       	std	Y+9, r26	; 0x09
    3172:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3174:	6f 81       	ldd	r22, Y+7	; 0x07
    3176:	78 85       	ldd	r23, Y+8	; 0x08
    3178:	89 85       	ldd	r24, Y+9	; 0x09
    317a:	9a 85       	ldd	r25, Y+10	; 0x0a
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e8       	ldi	r20, 0x80	; 128
    3182:	5f e3       	ldi	r21, 0x3F	; 63
    3184:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3188:	88 23       	and	r24, r24
    318a:	2c f4       	brge	.+10     	; 0x3196 <ADC_enuInit+0xd4>
		__ticks = 1;
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	9e 83       	std	Y+6, r25	; 0x06
    3192:	8d 83       	std	Y+5, r24	; 0x05
    3194:	3f c0       	rjmp	.+126    	; 0x3214 <ADC_enuInit+0x152>
	else if (__tmp > 65535)
    3196:	6f 81       	ldd	r22, Y+7	; 0x07
    3198:	78 85       	ldd	r23, Y+8	; 0x08
    319a:	89 85       	ldd	r24, Y+9	; 0x09
    319c:	9a 85       	ldd	r25, Y+10	; 0x0a
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	3f ef       	ldi	r19, 0xFF	; 255
    31a2:	4f e7       	ldi	r20, 0x7F	; 127
    31a4:	57 e4       	ldi	r21, 0x47	; 71
    31a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31aa:	18 16       	cp	r1, r24
    31ac:	4c f5       	brge	.+82     	; 0x3200 <ADC_enuInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    31b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	40 e2       	ldi	r20, 0x20	; 32
    31bc:	51 e4       	ldi	r21, 0x41	; 65
    31be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c2:	dc 01       	movw	r26, r24
    31c4:	cb 01       	movw	r24, r22
    31c6:	bc 01       	movw	r22, r24
    31c8:	cd 01       	movw	r24, r26
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	9e 83       	std	Y+6, r25	; 0x06
    31d4:	8d 83       	std	Y+5, r24	; 0x05
    31d6:	0f c0       	rjmp	.+30     	; 0x31f6 <ADC_enuInit+0x134>
    31d8:	80 e9       	ldi	r24, 0x90	; 144
    31da:	91 e0       	ldi	r25, 0x01	; 1
    31dc:	9c 83       	std	Y+4, r25	; 0x04
    31de:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	9c 81       	ldd	r25, Y+4	; 0x04
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	f1 f7       	brne	.-4      	; 0x31e4 <ADC_enuInit+0x122>
    31e8:	9c 83       	std	Y+4, r25	; 0x04
    31ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ec:	8d 81       	ldd	r24, Y+5	; 0x05
    31ee:	9e 81       	ldd	r25, Y+6	; 0x06
    31f0:	01 97       	sbiw	r24, 0x01	; 1
    31f2:	9e 83       	std	Y+6, r25	; 0x06
    31f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f6:	8d 81       	ldd	r24, Y+5	; 0x05
    31f8:	9e 81       	ldd	r25, Y+6	; 0x06
    31fa:	00 97       	sbiw	r24, 0x00	; 0
    31fc:	69 f7       	brne	.-38     	; 0x31d8 <ADC_enuInit+0x116>
    31fe:	14 c0       	rjmp	.+40     	; 0x3228 <ADC_enuInit+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3200:	6f 81       	ldd	r22, Y+7	; 0x07
    3202:	78 85       	ldd	r23, Y+8	; 0x08
    3204:	89 85       	ldd	r24, Y+9	; 0x09
    3206:	9a 85       	ldd	r25, Y+10	; 0x0a
    3208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
    3216:	9e 81       	ldd	r25, Y+6	; 0x06
    3218:	9a 83       	std	Y+2, r25	; 0x02
    321a:	89 83       	std	Y+1, r24	; 0x01
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	f1 f7       	brne	.-4      	; 0x3220 <ADC_enuInit+0x15e>
    3224:	9a 83       	std	Y+2, r25	; 0x02
    3226:	89 83       	std	Y+1, r24	; 0x01


	// Waiting until ADC is stablized
	_delay_ms(200);

}
    3228:	2e 96       	adiw	r28, 0x0e	; 14
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	08 95       	ret

0000323a <ADC_enuStartConversion>:




ErrorStatus_t ADC_enuStartConversion(ADC_Channel_types ADC_channel_N){
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	00 d0       	rcall	.+0      	; 0x3240 <ADC_enuStartConversion+0x6>
    3240:	cd b7       	in	r28, 0x3d	; 61
    3242:	de b7       	in	r29, 0x3e	; 62
    3244:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3246:	19 82       	std	Y+1, r1	; 0x01


	/******************************** Select ADC Channel ********************************/
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_clr_msk;
    3248:	a7 e2       	ldi	r26, 0x27	; 39
    324a:	b0 e0       	ldi	r27, 0x00	; 0
    324c:	e7 e2       	ldi	r30, 0x27	; 39
    324e:	f0 e0       	ldi	r31, 0x00	; 0
    3250:	80 81       	ld	r24, Z
    3252:	80 7e       	andi	r24, 0xE0	; 224
    3254:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_channel_N;
    3256:	a7 e2       	ldi	r26, 0x27	; 39
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	e7 e2       	ldi	r30, 0x27	; 39
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	90 81       	ld	r25, Z
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	89 2b       	or	r24, r25
    3264:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* ADC Start Conversion *******************************/
	//!!!!!!!!!!!!!!
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    3266:	a6 e2       	ldi	r26, 0x26	; 38
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	e6 e2       	ldi	r30, 0x26	; 38
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	80 64       	ori	r24, 0x40	; 64
    3272:	8c 93       	st	X, r24
	/************************************************************************************/

	return Local_enuErrrorState;
    3274:	89 81       	ldd	r24, Y+1	; 0x01
}
    3276:	0f 90       	pop	r0
    3278:	0f 90       	pop	r0
    327a:	cf 91       	pop	r28
    327c:	df 91       	pop	r29
    327e:	08 95       	ret

00003280 <ADC_GetResult>:



uint16 ADC_GetResult(){
    3280:	df 93       	push	r29
    3282:	cf 93       	push	r28
    3284:	cd b7       	in	r28, 0x3d	; 61
    3286:	de b7       	in	r29, 0x3e	; 62
			Copy_u16ReadValue |= ((uint16)ADCH_REG<<2);
			return Copy_u16ReadValue;
		#endif

		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			return ADCLH_REG;
    3288:	e4 e2       	ldi	r30, 0x24	; 36
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	80 81       	ld	r24, Z
    328e:	91 81       	ldd	r25, Z+1	; 0x01





}
    3290:	cf 91       	pop	r28
    3292:	df 91       	pop	r29
    3294:	08 95       	ret

00003296 <ADC_enuSetCallBack>:




ErrorStatus_t ADC_enuSetCallBack(void(*Copy_pfunAppFun)(void)){
    3296:	df 93       	push	r29
    3298:	cf 93       	push	r28
    329a:	00 d0       	rcall	.+0      	; 0x329c <ADC_enuSetCallBack+0x6>
    329c:	00 d0       	rcall	.+0      	; 0x329e <ADC_enuSetCallBack+0x8>
    329e:	cd b7       	in	r28, 0x3d	; 61
    32a0:	de b7       	in	r29, 0x3e	; 62
    32a2:	9b 83       	std	Y+3, r25	; 0x03
    32a4:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    32a6:	19 82       	std	Y+1, r1	; 0x01

//	if(Copy_pfunAppFun == NULL ||  Copy_u8IntNumber> IN)

	if(Copy_pfunAppFun == NULL){
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	9b 81       	ldd	r25, Y+3	; 0x03
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	19 f4       	brne	.+6      	; 0x32b6 <ADC_enuSetCallBack+0x20>

		return Local_enuErrrorState;
    32b0:	89 81       	ldd	r24, Y+1	; 0x01
    32b2:	8c 83       	std	Y+4, r24	; 0x04
    32b4:	0a c0       	rjmp	.+20     	; 0x32ca <ADC_enuSetCallBack+0x34>
	}

	else{
		Local_enuErrrorState = ERROR_STATUS_OK;
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	89 83       	std	Y+1, r24	; 0x01

		ADC_CallBackFunction = Copy_pfunAppFun;
    32ba:	8a 81       	ldd	r24, Y+2	; 0x02
    32bc:	9b 81       	ldd	r25, Y+3	; 0x03
    32be:	90 93 a3 01 	sts	0x01A3, r25
    32c2:	80 93 a2 01 	sts	0x01A2, r24

	}



	return Local_enuErrrorState;
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	8c 83       	std	Y+4, r24	; 0x04
    32ca:	8c 81       	ldd	r24, Y+4	; 0x04
}
    32cc:	0f 90       	pop	r0
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	cf 91       	pop	r28
    32d6:	df 91       	pop	r29
    32d8:	08 95       	ret

000032da <__vector_16>:

ISR(__vector_16){
    32da:	1f 92       	push	r1
    32dc:	0f 92       	push	r0
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	0f 92       	push	r0
    32e2:	11 24       	eor	r1, r1
    32e4:	2f 93       	push	r18
    32e6:	3f 93       	push	r19
    32e8:	4f 93       	push	r20
    32ea:	5f 93       	push	r21
    32ec:	6f 93       	push	r22
    32ee:	7f 93       	push	r23
    32f0:	8f 93       	push	r24
    32f2:	9f 93       	push	r25
    32f4:	af 93       	push	r26
    32f6:	bf 93       	push	r27
    32f8:	ef 93       	push	r30
    32fa:	ff 93       	push	r31
    32fc:	df 93       	push	r29
    32fe:	cf 93       	push	r28
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CallBackFunction != NULL){
    3304:	80 91 a2 01 	lds	r24, 0x01A2
    3308:	90 91 a3 01 	lds	r25, 0x01A3
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	29 f0       	breq	.+10     	; 0x331a <__vector_16+0x40>
		ADC_CallBackFunction();
    3310:	e0 91 a2 01 	lds	r30, 0x01A2
    3314:	f0 91 a3 01 	lds	r31, 0x01A3
    3318:	09 95       	icall
	}

}
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	ff 91       	pop	r31
    3320:	ef 91       	pop	r30
    3322:	bf 91       	pop	r27
    3324:	af 91       	pop	r26
    3326:	9f 91       	pop	r25
    3328:	8f 91       	pop	r24
    332a:	7f 91       	pop	r23
    332c:	6f 91       	pop	r22
    332e:	5f 91       	pop	r21
    3330:	4f 91       	pop	r20
    3332:	3f 91       	pop	r19
    3334:	2f 91       	pop	r18
    3336:	0f 90       	pop	r0
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	0f 90       	pop	r0
    333c:	1f 90       	pop	r1
    333e:	18 95       	reti

00003340 <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	0f 92       	push	r0
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    334a:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	64 e0       	ldi	r22, 0x04	; 4
    3350:	41 e0       	ldi	r20, 0x01	; 1
    3352:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	65 e0       	ldi	r22, 0x05	; 5
    335a:	41 e0       	ldi	r20, 0x01	; 1
    335c:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    3360:	81 e0       	ldi	r24, 0x01	; 1
    3362:	66 e0       	ldi	r22, 0x06	; 6
    3364:	41 e0       	ldi	r20, 0x01	; 1
    3366:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    336a:	81 e0       	ldi	r24, 0x01	; 1
    336c:	67 e0       	ldi	r22, 0x07	; 7
    336e:	41 e0       	ldi	r20, 0x01	; 1
    3370:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	64 e0       	ldi	r22, 0x04	; 4
    3378:	41 e0       	ldi	r20, 0x01	; 1
    337a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	65 e0       	ldi	r22, 0x05	; 5
    3382:	41 e0       	ldi	r20, 0x01	; 1
    3384:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    3388:	81 e0       	ldi	r24, 0x01	; 1
    338a:	66 e0       	ldi	r22, 0x06	; 6
    338c:	41 e0       	ldi	r20, 0x01	; 1
    338e:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	67 e0       	ldi	r22, 0x07	; 7
    3396:	41 e0       	ldi	r20, 0x01	; 1
    3398:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    339c:	83 e0       	ldi	r24, 0x03	; 3
    339e:	60 e0       	ldi	r22, 0x00	; 0
    33a0:	40 e0       	ldi	r20, 0x00	; 0
    33a2:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    33a6:	83 e0       	ldi	r24, 0x03	; 3
    33a8:	61 e0       	ldi	r22, 0x01	; 1
    33aa:	40 e0       	ldi	r20, 0x00	; 0
    33ac:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    33b0:	83 e0       	ldi	r24, 0x03	; 3
    33b2:	64 e0       	ldi	r22, 0x04	; 4
    33b4:	40 e0       	ldi	r20, 0x00	; 0
    33b6:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    33ba:	83 e0       	ldi	r24, 0x03	; 3
    33bc:	65 e0       	ldi	r22, 0x05	; 5
    33be:	40 e0       	ldi	r20, 0x00	; 0
    33c0:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    33c4:	83 e0       	ldi	r24, 0x03	; 3
    33c6:	60 e0       	ldi	r22, 0x00	; 0
    33c8:	41 e0       	ldi	r20, 0x01	; 1
    33ca:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    33ce:	83 e0       	ldi	r24, 0x03	; 3
    33d0:	61 e0       	ldi	r22, 0x01	; 1
    33d2:	41 e0       	ldi	r20, 0x01	; 1
    33d4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    33d8:	83 e0       	ldi	r24, 0x03	; 3
    33da:	64 e0       	ldi	r22, 0x04	; 4
    33dc:	41 e0       	ldi	r20, 0x01	; 1
    33de:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    33e2:	83 e0       	ldi	r24, 0x03	; 3
    33e4:	65 e0       	ldi	r22, 0x05	; 5
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    33f2:	0f 90       	pop	r0
    33f4:	cf 91       	pop	r28
    33f6:	df 91       	pop	r29
    33f8:	08 95       	ret

000033fa <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    33fa:	df 93       	push	r29
    33fc:	cf 93       	push	r28
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	2a 97       	sbiw	r28, 0x0a	; 10
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    3410:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	8a 83       	std	Y+2, r24	; 0x02
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	8b 83       	std	Y+3, r24	; 0x03
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	8c 83       	std	Y+4, r24	; 0x04
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    3422:	84 e0       	ldi	r24, 0x04	; 4
    3424:	8e 83       	std	Y+6, r24	; 0x06
    3426:	85 e0       	ldi	r24, 0x05	; 5
    3428:	8f 83       	std	Y+7, r24	; 0x07
    342a:	86 e0       	ldi	r24, 0x06	; 6
    342c:	88 87       	std	Y+8, r24	; 0x08
    342e:	87 e0       	ldi	r24, 0x07	; 7
    3430:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3432:	19 82       	std	Y+1, r1	; 0x01
    3434:	36 c0       	rjmp	.+108    	; 0x34a2 <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    3436:	99 81       	ldd	r25, Y+1	; 0x01
    3438:	8a 85       	ldd	r24, Y+10	; 0x0a
    343a:	98 17       	cp	r25, r24
    343c:	c1 f4       	brne	.+48     	; 0x346e <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	28 2f       	mov	r18, r24
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	ce 01       	movw	r24, r28
    3446:	02 96       	adiw	r24, 0x02	; 2
    3448:	fc 01       	movw	r30, r24
    344a:	e2 0f       	add	r30, r18
    344c:	f3 1f       	adc	r31, r19
    344e:	40 81       	ld	r20, Z
    3450:	89 81       	ldd	r24, Y+1	; 0x01
    3452:	28 2f       	mov	r18, r24
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	ce 01       	movw	r24, r28
    3458:	06 96       	adiw	r24, 0x06	; 6
    345a:	fc 01       	movw	r30, r24
    345c:	e2 0f       	add	r30, r18
    345e:	f3 1f       	adc	r31, r19
    3460:	90 81       	ld	r25, Z
    3462:	84 2f       	mov	r24, r20
    3464:	69 2f       	mov	r22, r25
    3466:	40 e0       	ldi	r20, 0x00	; 0
    3468:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
    346c:	17 c0       	rjmp	.+46     	; 0x349c <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	28 2f       	mov	r18, r24
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	ce 01       	movw	r24, r28
    3476:	02 96       	adiw	r24, 0x02	; 2
    3478:	fc 01       	movw	r30, r24
    347a:	e2 0f       	add	r30, r18
    347c:	f3 1f       	adc	r31, r19
    347e:	40 81       	ld	r20, Z
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	28 2f       	mov	r18, r24
    3484:	30 e0       	ldi	r19, 0x00	; 0
    3486:	ce 01       	movw	r24, r28
    3488:	06 96       	adiw	r24, 0x06	; 6
    348a:	fc 01       	movw	r30, r24
    348c:	e2 0f       	add	r30, r18
    348e:	f3 1f       	adc	r31, r19
    3490:	90 81       	ld	r25, Z
    3492:	84 2f       	mov	r24, r20
    3494:	69 2f       	mov	r22, r25
    3496:	41 e0       	ldi	r20, 0x01	; 1
    3498:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	8f 5f       	subi	r24, 0xFF	; 255
    34a0:	89 83       	std	Y+1, r24	; 0x01
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	84 30       	cpi	r24, 0x04	; 4
    34a6:	38 f2       	brcs	.-114    	; 0x3436 <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    34a8:	2a 96       	adiw	r28, 0x0a	; 10
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    34ba:	df 93       	push	r29
    34bc:	cf 93       	push	r28
    34be:	cd b7       	in	r28, 0x3d	; 61
    34c0:	de b7       	in	r29, 0x3e	; 62
    34c2:	2f 97       	sbiw	r28, 0x0f	; 15
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	9e 87       	std	Y+14, r25	; 0x0e
    34d0:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    34d2:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    34d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34d8:	00 97       	sbiw	r24, 0x00	; 0
    34da:	19 f4       	brne	.+6      	; 0x34e2 <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    34dc:	8b 81       	ldd	r24, Y+3	; 0x03
    34de:	8f 87       	std	Y+15, r24	; 0x0f
    34e0:	7e c0       	rjmp	.+252    	; 0x35de <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    34e6:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    34e8:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    34ea:	83 e0       	ldi	r24, 0x03	; 3
    34ec:	8d 83       	std	Y+5, r24	; 0x05
    34ee:	83 e0       	ldi	r24, 0x03	; 3
    34f0:	8e 83       	std	Y+6, r24	; 0x06
    34f2:	83 e0       	ldi	r24, 0x03	; 3
    34f4:	8f 83       	std	Y+7, r24	; 0x07
    34f6:	83 e0       	ldi	r24, 0x03	; 3
    34f8:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    34fa:	19 86       	std	Y+9, r1	; 0x09
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	8a 87       	std	Y+10, r24	; 0x0a
    3500:	84 e0       	ldi	r24, 0x04	; 4
    3502:	8b 87       	std	Y+11, r24	; 0x0b
    3504:	85 e0       	ldi	r24, 0x05	; 5
    3506:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3508:	1a 82       	std	Y+2, r1	; 0x02
    350a:	63 c0       	rjmp	.+198    	; 0x35d2 <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    350c:	8a 81       	ldd	r24, Y+2	; 0x02
    350e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    3512:	19 82       	std	Y+1, r1	; 0x01
    3514:	57 c0       	rjmp	.+174    	; 0x35c4 <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    3516:	89 81       	ldd	r24, Y+1	; 0x01
    3518:	28 2f       	mov	r18, r24
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	ce 01       	movw	r24, r28
    351e:	05 96       	adiw	r24, 0x05	; 5
    3520:	fc 01       	movw	r30, r24
    3522:	e2 0f       	add	r30, r18
    3524:	f3 1f       	adc	r31, r19
    3526:	40 81       	ld	r20, Z
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	28 2f       	mov	r18, r24
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	ce 01       	movw	r24, r28
    3530:	09 96       	adiw	r24, 0x09	; 9
    3532:	fc 01       	movw	r30, r24
    3534:	e2 0f       	add	r30, r18
    3536:	f3 1f       	adc	r31, r19
    3538:	90 81       	ld	r25, Z
    353a:	9e 01       	movw	r18, r28
    353c:	2c 5f       	subi	r18, 0xFC	; 252
    353e:	3f 4f       	sbci	r19, 0xFF	; 255
    3540:	84 2f       	mov	r24, r20
    3542:	69 2f       	mov	r22, r25
    3544:	a9 01       	movw	r20, r18
    3546:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    354a:	8c 81       	ldd	r24, Y+4	; 0x04
    354c:	88 23       	and	r24, r24
    354e:	b9 f5       	brne	.+110    	; 0x35be <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    3550:	8a 81       	ldd	r24, Y+2	; 0x02
    3552:	88 2f       	mov	r24, r24
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	9c 01       	movw	r18, r24
    3558:	22 0f       	add	r18, r18
    355a:	33 1f       	adc	r19, r19
    355c:	22 0f       	add	r18, r18
    355e:	33 1f       	adc	r19, r19
    3560:	89 81       	ldd	r24, Y+1	; 0x01
    3562:	88 2f       	mov	r24, r24
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	82 0f       	add	r24, r18
    3568:	93 1f       	adc	r25, r19
    356a:	fc 01       	movw	r30, r24
    356c:	e2 59       	subi	r30, 0x92	; 146
    356e:	fe 4f       	sbci	r31, 0xFE	; 254
    3570:	80 81       	ld	r24, Z
    3572:	ed 85       	ldd	r30, Y+13	; 0x0d
    3574:	fe 85       	ldd	r31, Y+14	; 0x0e
    3576:	80 83       	st	Z, r24
    3578:	1a c0       	rjmp	.+52     	; 0x35ae <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	ce 01       	movw	r24, r28
    3582:	05 96       	adiw	r24, 0x05	; 5
    3584:	fc 01       	movw	r30, r24
    3586:	e2 0f       	add	r30, r18
    3588:	f3 1f       	adc	r31, r19
    358a:	40 81       	ld	r20, Z
    358c:	89 81       	ldd	r24, Y+1	; 0x01
    358e:	28 2f       	mov	r18, r24
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	ce 01       	movw	r24, r28
    3594:	09 96       	adiw	r24, 0x09	; 9
    3596:	fc 01       	movw	r30, r24
    3598:	e2 0f       	add	r30, r18
    359a:	f3 1f       	adc	r31, r19
    359c:	90 81       	ld	r25, Z
    359e:	9e 01       	movw	r18, r28
    35a0:	2c 5f       	subi	r18, 0xFC	; 252
    35a2:	3f 4f       	sbci	r19, 0xFF	; 255
    35a4:	84 2f       	mov	r24, r20
    35a6:	69 2f       	mov	r22, r25
    35a8:	a9 01       	movw	r20, r18
    35aa:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    35ae:	8c 81       	ldd	r24, Y+4	; 0x04
    35b0:	88 23       	and	r24, r24
    35b2:	19 f3       	breq	.-58     	; 0x357a <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    35b8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ba:	8f 87       	std	Y+15, r24	; 0x0f
    35bc:	10 c0       	rjmp	.+32     	; 0x35de <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	8f 5f       	subi	r24, 0xFF	; 255
    35c2:	89 83       	std	Y+1, r24	; 0x01
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	84 30       	cpi	r24, 0x04	; 4
    35c8:	08 f4       	brcc	.+2      	; 0x35cc <keypad_enuGetPressedKey+0x112>
    35ca:	a5 cf       	rjmp	.-182    	; 0x3516 <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    35cc:	8a 81       	ldd	r24, Y+2	; 0x02
    35ce:	8f 5f       	subi	r24, 0xFF	; 255
    35d0:	8a 83       	std	Y+2, r24	; 0x02
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	84 30       	cpi	r24, 0x04	; 4
    35d6:	08 f4       	brcc	.+2      	; 0x35da <keypad_enuGetPressedKey+0x120>
    35d8:	99 cf       	rjmp	.-206    	; 0x350c <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    35da:	8b 81       	ldd	r24, Y+3	; 0x03
    35dc:	8f 87       	std	Y+15, r24	; 0x0f
    35de:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    35e0:	2f 96       	adiw	r28, 0x0f	; 15
    35e2:	0f b6       	in	r0, 0x3f	; 63
    35e4:	f8 94       	cli
    35e6:	de bf       	out	0x3e, r29	; 62
    35e8:	0f be       	out	0x3f, r0	; 63
    35ea:	cd bf       	out	0x3d, r28	; 61
    35ec:	cf 91       	pop	r28
    35ee:	df 91       	pop	r29
    35f0:	08 95       	ret

000035f2 <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    35f2:	df 93       	push	r29
    35f4:	cf 93       	push	r28
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	e9 97       	sbiw	r28, 0x39	; 57
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3606:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	60 e0       	ldi	r22, 0x00	; 0
    360c:	41 e0       	ldi	r20, 0x01	; 1
    360e:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    3612:	80 e0       	ldi	r24, 0x00	; 0
    3614:	61 e0       	ldi	r22, 0x01	; 1
    3616:	41 e0       	ldi	r20, 0x01	; 1
    3618:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	62 e0       	ldi	r22, 0x02	; 2
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	63 e0       	ldi	r22, 0x03	; 3
    362a:	41 e0       	ldi	r20, 0x01	; 1
    362c:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    3630:	81 e0       	ldi	r24, 0x01	; 1
    3632:	62 e0       	ldi	r22, 0x02	; 2
    3634:	41 e0       	ldi	r20, 0x01	; 1
    3636:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	61 e0       	ldi	r22, 0x01	; 1
    363e:	41 e0       	ldi	r20, 0x01	; 1
    3640:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	60 e0       	ldi	r22, 0x00	; 0
    3648:	41 e0       	ldi	r20, 0x01	; 1
    364a:	0e 94 55 14 	call	0x28aa	; 0x28aa <DIO_enuSetPinDirection>
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	ac e0       	ldi	r26, 0x0C	; 12
    3654:	b2 e4       	ldi	r27, 0x42	; 66
    3656:	8d ab       	std	Y+53, r24	; 0x35
    3658:	9e ab       	std	Y+54, r25	; 0x36
    365a:	af ab       	std	Y+55, r26	; 0x37
    365c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    365e:	6d a9       	ldd	r22, Y+53	; 0x35
    3660:	7e a9       	ldd	r23, Y+54	; 0x36
    3662:	8f a9       	ldd	r24, Y+55	; 0x37
    3664:	98 ad       	ldd	r25, Y+56	; 0x38
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	4a e7       	ldi	r20, 0x7A	; 122
    366c:	55 e4       	ldi	r21, 0x45	; 69
    366e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	89 ab       	std	Y+49, r24	; 0x31
    3678:	9a ab       	std	Y+50, r25	; 0x32
    367a:	ab ab       	std	Y+51, r26	; 0x33
    367c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    367e:	69 a9       	ldd	r22, Y+49	; 0x31
    3680:	7a a9       	ldd	r23, Y+50	; 0x32
    3682:	8b a9       	ldd	r24, Y+51	; 0x33
    3684:	9c a9       	ldd	r25, Y+52	; 0x34
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	40 e8       	ldi	r20, 0x80	; 128
    368c:	5f e3       	ldi	r21, 0x3F	; 63
    368e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3692:	88 23       	and	r24, r24
    3694:	2c f4       	brge	.+10     	; 0x36a0 <LCD_enuInit+0xae>
		__ticks = 1;
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	98 ab       	std	Y+48, r25	; 0x30
    369c:	8f a7       	std	Y+47, r24	; 0x2f
    369e:	3f c0       	rjmp	.+126    	; 0x371e <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    36a0:	69 a9       	ldd	r22, Y+49	; 0x31
    36a2:	7a a9       	ldd	r23, Y+50	; 0x32
    36a4:	8b a9       	ldd	r24, Y+51	; 0x33
    36a6:	9c a9       	ldd	r25, Y+52	; 0x34
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	3f ef       	ldi	r19, 0xFF	; 255
    36ac:	4f e7       	ldi	r20, 0x7F	; 127
    36ae:	57 e4       	ldi	r21, 0x47	; 71
    36b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b4:	18 16       	cp	r1, r24
    36b6:	4c f5       	brge	.+82     	; 0x370a <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36b8:	6d a9       	ldd	r22, Y+53	; 0x35
    36ba:	7e a9       	ldd	r23, Y+54	; 0x36
    36bc:	8f a9       	ldd	r24, Y+55	; 0x37
    36be:	98 ad       	ldd	r25, Y+56	; 0x38
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	40 e2       	ldi	r20, 0x20	; 32
    36c6:	51 e4       	ldi	r21, 0x41	; 65
    36c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	bc 01       	movw	r22, r24
    36d2:	cd 01       	movw	r24, r26
    36d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	98 ab       	std	Y+48, r25	; 0x30
    36de:	8f a7       	std	Y+47, r24	; 0x2f
    36e0:	0f c0       	rjmp	.+30     	; 0x3700 <LCD_enuInit+0x10e>
    36e2:	80 e9       	ldi	r24, 0x90	; 144
    36e4:	91 e0       	ldi	r25, 0x01	; 1
    36e6:	9e a7       	std	Y+46, r25	; 0x2e
    36e8:	8d a7       	std	Y+45, r24	; 0x2d
    36ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    36ec:	9e a5       	ldd	r25, Y+46	; 0x2e
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <LCD_enuInit+0xfc>
    36f2:	9e a7       	std	Y+46, r25	; 0x2e
    36f4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    36f8:	98 a9       	ldd	r25, Y+48	; 0x30
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	98 ab       	std	Y+48, r25	; 0x30
    36fe:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3700:	8f a5       	ldd	r24, Y+47	; 0x2f
    3702:	98 a9       	ldd	r25, Y+48	; 0x30
    3704:	00 97       	sbiw	r24, 0x00	; 0
    3706:	69 f7       	brne	.-38     	; 0x36e2 <LCD_enuInit+0xf0>
    3708:	14 c0       	rjmp	.+40     	; 0x3732 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370a:	69 a9       	ldd	r22, Y+49	; 0x31
    370c:	7a a9       	ldd	r23, Y+50	; 0x32
    370e:	8b a9       	ldd	r24, Y+51	; 0x33
    3710:	9c a9       	ldd	r25, Y+52	; 0x34
    3712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	98 ab       	std	Y+48, r25	; 0x30
    371c:	8f a7       	std	Y+47, r24	; 0x2f
    371e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3720:	98 a9       	ldd	r25, Y+48	; 0x30
    3722:	9c a7       	std	Y+44, r25	; 0x2c
    3724:	8b a7       	std	Y+43, r24	; 0x2b
    3726:	8b a5       	ldd	r24, Y+43	; 0x2b
    3728:	9c a5       	ldd	r25, Y+44	; 0x2c
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	f1 f7       	brne	.-4      	; 0x372a <LCD_enuInit+0x138>
    372e:	9c a7       	std	Y+44, r25	; 0x2c
    3730:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    3732:	80 e2       	ldi	r24, 0x20	; 32
    3734:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    3738:	80 e2       	ldi	r24, 0x20	; 32
    373a:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    373e:	80 e8       	ldi	r24, 0x80	; 128
    3740:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
    3744:	80 e0       	ldi	r24, 0x00	; 0
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	a0 e8       	ldi	r26, 0x80	; 128
    374a:	bf e3       	ldi	r27, 0x3F	; 63
    374c:	8f a3       	std	Y+39, r24	; 0x27
    374e:	98 a7       	std	Y+40, r25	; 0x28
    3750:	a9 a7       	std	Y+41, r26	; 0x29
    3752:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3754:	6f a1       	ldd	r22, Y+39	; 0x27
    3756:	78 a5       	ldd	r23, Y+40	; 0x28
    3758:	89 a5       	ldd	r24, Y+41	; 0x29
    375a:	9a a5       	ldd	r25, Y+42	; 0x2a
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	4a e7       	ldi	r20, 0x7A	; 122
    3762:	55 e4       	ldi	r21, 0x45	; 69
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	8b a3       	std	Y+35, r24	; 0x23
    376e:	9c a3       	std	Y+36, r25	; 0x24
    3770:	ad a3       	std	Y+37, r26	; 0x25
    3772:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3774:	6b a1       	ldd	r22, Y+35	; 0x23
    3776:	7c a1       	ldd	r23, Y+36	; 0x24
    3778:	8d a1       	ldd	r24, Y+37	; 0x25
    377a:	9e a1       	ldd	r25, Y+38	; 0x26
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 e8       	ldi	r20, 0x80	; 128
    3782:	5f e3       	ldi	r21, 0x3F	; 63
    3784:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3788:	88 23       	and	r24, r24
    378a:	2c f4       	brge	.+10     	; 0x3796 <LCD_enuInit+0x1a4>
		__ticks = 1;
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	9a a3       	std	Y+34, r25	; 0x22
    3792:	89 a3       	std	Y+33, r24	; 0x21
    3794:	3f c0       	rjmp	.+126    	; 0x3814 <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    3796:	6b a1       	ldd	r22, Y+35	; 0x23
    3798:	7c a1       	ldd	r23, Y+36	; 0x24
    379a:	8d a1       	ldd	r24, Y+37	; 0x25
    379c:	9e a1       	ldd	r25, Y+38	; 0x26
    379e:	20 e0       	ldi	r18, 0x00	; 0
    37a0:	3f ef       	ldi	r19, 0xFF	; 255
    37a2:	4f e7       	ldi	r20, 0x7F	; 127
    37a4:	57 e4       	ldi	r21, 0x47	; 71
    37a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37aa:	18 16       	cp	r1, r24
    37ac:	4c f5       	brge	.+82     	; 0x3800 <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ae:	6f a1       	ldd	r22, Y+39	; 0x27
    37b0:	78 a5       	ldd	r23, Y+40	; 0x28
    37b2:	89 a5       	ldd	r24, Y+41	; 0x29
    37b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e2       	ldi	r20, 0x20	; 32
    37bc:	51 e4       	ldi	r21, 0x41	; 65
    37be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	bc 01       	movw	r22, r24
    37c8:	cd 01       	movw	r24, r26
    37ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ce:	dc 01       	movw	r26, r24
    37d0:	cb 01       	movw	r24, r22
    37d2:	9a a3       	std	Y+34, r25	; 0x22
    37d4:	89 a3       	std	Y+33, r24	; 0x21
    37d6:	0f c0       	rjmp	.+30     	; 0x37f6 <LCD_enuInit+0x204>
    37d8:	80 e9       	ldi	r24, 0x90	; 144
    37da:	91 e0       	ldi	r25, 0x01	; 1
    37dc:	98 a3       	std	Y+32, r25	; 0x20
    37de:	8f 8f       	std	Y+31, r24	; 0x1f
    37e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    37e2:	98 a1       	ldd	r25, Y+32	; 0x20
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	f1 f7       	brne	.-4      	; 0x37e4 <LCD_enuInit+0x1f2>
    37e8:	98 a3       	std	Y+32, r25	; 0x20
    37ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ec:	89 a1       	ldd	r24, Y+33	; 0x21
    37ee:	9a a1       	ldd	r25, Y+34	; 0x22
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	9a a3       	std	Y+34, r25	; 0x22
    37f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f6:	89 a1       	ldd	r24, Y+33	; 0x21
    37f8:	9a a1       	ldd	r25, Y+34	; 0x22
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	69 f7       	brne	.-38     	; 0x37d8 <LCD_enuInit+0x1e6>
    37fe:	14 c0       	rjmp	.+40     	; 0x3828 <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3800:	6b a1       	ldd	r22, Y+35	; 0x23
    3802:	7c a1       	ldd	r23, Y+36	; 0x24
    3804:	8d a1       	ldd	r24, Y+37	; 0x25
    3806:	9e a1       	ldd	r25, Y+38	; 0x26
    3808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	9a a3       	std	Y+34, r25	; 0x22
    3812:	89 a3       	std	Y+33, r24	; 0x21
    3814:	89 a1       	ldd	r24, Y+33	; 0x21
    3816:	9a a1       	ldd	r25, Y+34	; 0x22
    3818:	9e 8f       	std	Y+30, r25	; 0x1e
    381a:	8d 8f       	std	Y+29, r24	; 0x1d
    381c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    381e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3820:	01 97       	sbiw	r24, 0x01	; 1
    3822:	f1 f7       	brne	.-4      	; 0x3820 <LCD_enuInit+0x22e>
    3824:	9e 8f       	std	Y+30, r25	; 0x1e
    3826:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    382e:	80 ef       	ldi	r24, 0xF0	; 240
    3830:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	a0 e8       	ldi	r26, 0x80	; 128
    383a:	bf e3       	ldi	r27, 0x3F	; 63
    383c:	89 8f       	std	Y+25, r24	; 0x19
    383e:	9a 8f       	std	Y+26, r25	; 0x1a
    3840:	ab 8f       	std	Y+27, r26	; 0x1b
    3842:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3844:	69 8d       	ldd	r22, Y+25	; 0x19
    3846:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3848:	8b 8d       	ldd	r24, Y+27	; 0x1b
    384a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	4a e7       	ldi	r20, 0x7A	; 122
    3852:	55 e4       	ldi	r21, 0x45	; 69
    3854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	8d 8b       	std	Y+21, r24	; 0x15
    385e:	9e 8b       	std	Y+22, r25	; 0x16
    3860:	af 8b       	std	Y+23, r26	; 0x17
    3862:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3864:	6d 89       	ldd	r22, Y+21	; 0x15
    3866:	7e 89       	ldd	r23, Y+22	; 0x16
    3868:	8f 89       	ldd	r24, Y+23	; 0x17
    386a:	98 8d       	ldd	r25, Y+24	; 0x18
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e8       	ldi	r20, 0x80	; 128
    3872:	5f e3       	ldi	r21, 0x3F	; 63
    3874:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3878:	88 23       	and	r24, r24
    387a:	2c f4       	brge	.+10     	; 0x3886 <LCD_enuInit+0x294>
		__ticks = 1;
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	9c 8b       	std	Y+20, r25	; 0x14
    3882:	8b 8b       	std	Y+19, r24	; 0x13
    3884:	3f c0       	rjmp	.+126    	; 0x3904 <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    3886:	6d 89       	ldd	r22, Y+21	; 0x15
    3888:	7e 89       	ldd	r23, Y+22	; 0x16
    388a:	8f 89       	ldd	r24, Y+23	; 0x17
    388c:	98 8d       	ldd	r25, Y+24	; 0x18
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	3f ef       	ldi	r19, 0xFF	; 255
    3892:	4f e7       	ldi	r20, 0x7F	; 127
    3894:	57 e4       	ldi	r21, 0x47	; 71
    3896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389a:	18 16       	cp	r1, r24
    389c:	4c f5       	brge	.+82     	; 0x38f0 <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    389e:	69 8d       	ldd	r22, Y+25	; 0x19
    38a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	40 e2       	ldi	r20, 0x20	; 32
    38ac:	51 e4       	ldi	r21, 0x41	; 65
    38ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	bc 01       	movw	r22, r24
    38b8:	cd 01       	movw	r24, r26
    38ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	9c 8b       	std	Y+20, r25	; 0x14
    38c4:	8b 8b       	std	Y+19, r24	; 0x13
    38c6:	0f c0       	rjmp	.+30     	; 0x38e6 <LCD_enuInit+0x2f4>
    38c8:	80 e9       	ldi	r24, 0x90	; 144
    38ca:	91 e0       	ldi	r25, 0x01	; 1
    38cc:	9a 8b       	std	Y+18, r25	; 0x12
    38ce:	89 8b       	std	Y+17, r24	; 0x11
    38d0:	89 89       	ldd	r24, Y+17	; 0x11
    38d2:	9a 89       	ldd	r25, Y+18	; 0x12
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	f1 f7       	brne	.-4      	; 0x38d4 <LCD_enuInit+0x2e2>
    38d8:	9a 8b       	std	Y+18, r25	; 0x12
    38da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38dc:	8b 89       	ldd	r24, Y+19	; 0x13
    38de:	9c 89       	ldd	r25, Y+20	; 0x14
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	9c 8b       	std	Y+20, r25	; 0x14
    38e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e6:	8b 89       	ldd	r24, Y+19	; 0x13
    38e8:	9c 89       	ldd	r25, Y+20	; 0x14
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	69 f7       	brne	.-38     	; 0x38c8 <LCD_enuInit+0x2d6>
    38ee:	14 c0       	rjmp	.+40     	; 0x3918 <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f0:	6d 89       	ldd	r22, Y+21	; 0x15
    38f2:	7e 89       	ldd	r23, Y+22	; 0x16
    38f4:	8f 89       	ldd	r24, Y+23	; 0x17
    38f6:	98 8d       	ldd	r25, Y+24	; 0x18
    38f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	9c 8b       	std	Y+20, r25	; 0x14
    3902:	8b 8b       	std	Y+19, r24	; 0x13
    3904:	8b 89       	ldd	r24, Y+19	; 0x13
    3906:	9c 89       	ldd	r25, Y+20	; 0x14
    3908:	98 8b       	std	Y+16, r25	; 0x10
    390a:	8f 87       	std	Y+15, r24	; 0x0f
    390c:	8f 85       	ldd	r24, Y+15	; 0x0f
    390e:	98 89       	ldd	r25, Y+16	; 0x10
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <LCD_enuInit+0x31e>
    3914:	98 8b       	std	Y+16, r25	; 0x10
    3916:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	a0 e0       	ldi	r26, 0x00	; 0
    392a:	b0 e4       	ldi	r27, 0x40	; 64
    392c:	8b 87       	std	Y+11, r24	; 0x0b
    392e:	9c 87       	std	Y+12, r25	; 0x0c
    3930:	ad 87       	std	Y+13, r26	; 0x0d
    3932:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3934:	6b 85       	ldd	r22, Y+11	; 0x0b
    3936:	7c 85       	ldd	r23, Y+12	; 0x0c
    3938:	8d 85       	ldd	r24, Y+13	; 0x0d
    393a:	9e 85       	ldd	r25, Y+14	; 0x0e
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	4a e7       	ldi	r20, 0x7A	; 122
    3942:	55 e4       	ldi	r21, 0x45	; 69
    3944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	8f 83       	std	Y+7, r24	; 0x07
    394e:	98 87       	std	Y+8, r25	; 0x08
    3950:	a9 87       	std	Y+9, r26	; 0x09
    3952:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3954:	6f 81       	ldd	r22, Y+7	; 0x07
    3956:	78 85       	ldd	r23, Y+8	; 0x08
    3958:	89 85       	ldd	r24, Y+9	; 0x09
    395a:	9a 85       	ldd	r25, Y+10	; 0x0a
    395c:	20 e0       	ldi	r18, 0x00	; 0
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	40 e8       	ldi	r20, 0x80	; 128
    3962:	5f e3       	ldi	r21, 0x3F	; 63
    3964:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3968:	88 23       	and	r24, r24
    396a:	2c f4       	brge	.+10     	; 0x3976 <LCD_enuInit+0x384>
		__ticks = 1;
    396c:	81 e0       	ldi	r24, 0x01	; 1
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	9e 83       	std	Y+6, r25	; 0x06
    3972:	8d 83       	std	Y+5, r24	; 0x05
    3974:	3f c0       	rjmp	.+126    	; 0x39f4 <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    3976:	6f 81       	ldd	r22, Y+7	; 0x07
    3978:	78 85       	ldd	r23, Y+8	; 0x08
    397a:	89 85       	ldd	r24, Y+9	; 0x09
    397c:	9a 85       	ldd	r25, Y+10	; 0x0a
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	3f ef       	ldi	r19, 0xFF	; 255
    3982:	4f e7       	ldi	r20, 0x7F	; 127
    3984:	57 e4       	ldi	r21, 0x47	; 71
    3986:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    398a:	18 16       	cp	r1, r24
    398c:	4c f5       	brge	.+82     	; 0x39e0 <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    398e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3990:	7c 85       	ldd	r23, Y+12	; 0x0c
    3992:	8d 85       	ldd	r24, Y+13	; 0x0d
    3994:	9e 85       	ldd	r25, Y+14	; 0x0e
    3996:	20 e0       	ldi	r18, 0x00	; 0
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	40 e2       	ldi	r20, 0x20	; 32
    399c:	51 e4       	ldi	r21, 0x41	; 65
    399e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39a2:	dc 01       	movw	r26, r24
    39a4:	cb 01       	movw	r24, r22
    39a6:	bc 01       	movw	r22, r24
    39a8:	cd 01       	movw	r24, r26
    39aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	9e 83       	std	Y+6, r25	; 0x06
    39b4:	8d 83       	std	Y+5, r24	; 0x05
    39b6:	0f c0       	rjmp	.+30     	; 0x39d6 <LCD_enuInit+0x3e4>
    39b8:	80 e9       	ldi	r24, 0x90	; 144
    39ba:	91 e0       	ldi	r25, 0x01	; 1
    39bc:	9c 83       	std	Y+4, r25	; 0x04
    39be:	8b 83       	std	Y+3, r24	; 0x03
    39c0:	8b 81       	ldd	r24, Y+3	; 0x03
    39c2:	9c 81       	ldd	r25, Y+4	; 0x04
    39c4:	01 97       	sbiw	r24, 0x01	; 1
    39c6:	f1 f7       	brne	.-4      	; 0x39c4 <LCD_enuInit+0x3d2>
    39c8:	9c 83       	std	Y+4, r25	; 0x04
    39ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39cc:	8d 81       	ldd	r24, Y+5	; 0x05
    39ce:	9e 81       	ldd	r25, Y+6	; 0x06
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	9e 83       	std	Y+6, r25	; 0x06
    39d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d6:	8d 81       	ldd	r24, Y+5	; 0x05
    39d8:	9e 81       	ldd	r25, Y+6	; 0x06
    39da:	00 97       	sbiw	r24, 0x00	; 0
    39dc:	69 f7       	brne	.-38     	; 0x39b8 <LCD_enuInit+0x3c6>
    39de:	14 c0       	rjmp	.+40     	; 0x3a08 <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e0:	6f 81       	ldd	r22, Y+7	; 0x07
    39e2:	78 85       	ldd	r23, Y+8	; 0x08
    39e4:	89 85       	ldd	r24, Y+9	; 0x09
    39e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	9e 83       	std	Y+6, r25	; 0x06
    39f2:	8d 83       	std	Y+5, r24	; 0x05
    39f4:	8d 81       	ldd	r24, Y+5	; 0x05
    39f6:	9e 81       	ldd	r25, Y+6	; 0x06
    39f8:	9a 83       	std	Y+2, r25	; 0x02
    39fa:	89 83       	std	Y+1, r24	; 0x01
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3a00:	01 97       	sbiw	r24, 0x01	; 1
    3a02:	f1 f7       	brne	.-4      	; 0x3a00 <LCD_enuInit+0x40e>
    3a04:	9a 83       	std	Y+2, r25	; 0x02
    3a06:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    3a0e:	86 e0       	ldi	r24, 0x06	; 6
    3a10:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	80 93 a4 01 	sts	0x01A4, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    3a1e:	89 ad       	ldd	r24, Y+57	; 0x39
}
    3a20:	e9 96       	adiw	r28, 0x39	; 57
    3a22:	0f b6       	in	r0, 0x3f	; 63
    3a24:	f8 94       	cli
    3a26:	de bf       	out	0x3e, r29	; 62
    3a28:	0f be       	out	0x3f, r0	; 63
    3a2a:	cd bf       	out	0x3d, r28	; 61
    3a2c:	cf 91       	pop	r28
    3a2e:	df 91       	pop	r29
    3a30:	08 95       	ret

00003a32 <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    3a32:	df 93       	push	r29
    3a34:	cf 93       	push	r28
    3a36:	cd b7       	in	r28, 0x3d	; 61
    3a38:	de b7       	in	r29, 0x3e	; 62
    3a3a:	6e 97       	sbiw	r28, 0x1e	; 30
    3a3c:	0f b6       	in	r0, 0x3f	; 63
    3a3e:	f8 94       	cli
    3a40:	de bf       	out	0x3e, r29	; 62
    3a42:	0f be       	out	0x3f, r0	; 63
    3a44:	cd bf       	out	0x3d, r28	; 61
    3a46:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3a48:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    3a4a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a4c:	82 95       	swap	r24
    3a4e:	8f 70       	andi	r24, 0x0F	; 15
    3a50:	98 2f       	mov	r25, r24
    3a52:	91 70       	andi	r25, 0x01	; 1
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	60 e0       	ldi	r22, 0x00	; 0
    3a58:	49 2f       	mov	r20, r25
    3a5a:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    3a5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a60:	82 95       	swap	r24
    3a62:	86 95       	lsr	r24
    3a64:	87 70       	andi	r24, 0x07	; 7
    3a66:	98 2f       	mov	r25, r24
    3a68:	91 70       	andi	r25, 0x01	; 1
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	61 e0       	ldi	r22, 0x01	; 1
    3a6e:	49 2f       	mov	r20, r25
    3a70:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    3a74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a76:	82 95       	swap	r24
    3a78:	86 95       	lsr	r24
    3a7a:	86 95       	lsr	r24
    3a7c:	83 70       	andi	r24, 0x03	; 3
    3a7e:	98 2f       	mov	r25, r24
    3a80:	91 70       	andi	r25, 0x01	; 1
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	62 e0       	ldi	r22, 0x02	; 2
    3a86:	49 2f       	mov	r20, r25
    3a88:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    3a8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a8e:	98 2f       	mov	r25, r24
    3a90:	99 1f       	adc	r25, r25
    3a92:	99 27       	eor	r25, r25
    3a94:	99 1f       	adc	r25, r25
    3a96:	81 e0       	ldi	r24, 0x01	; 1
    3a98:	63 e0       	ldi	r22, 0x03	; 3
    3a9a:	49 2f       	mov	r20, r25
    3a9c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    3aa0:	80 e0       	ldi	r24, 0x00	; 0
    3aa2:	62 e0       	ldi	r22, 0x02	; 2
    3aa4:	41 e0       	ldi	r20, 0x01	; 1
    3aa6:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	a0 e0       	ldi	r26, 0x00	; 0
    3ab0:	b0 e4       	ldi	r27, 0x40	; 64
    3ab2:	89 8f       	std	Y+25, r24	; 0x19
    3ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    3ab6:	ab 8f       	std	Y+27, r26	; 0x1b
    3ab8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aba:	69 8d       	ldd	r22, Y+25	; 0x19
    3abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	4a e7       	ldi	r20, 0x7A	; 122
    3ac8:	55 e4       	ldi	r21, 0x45	; 69
    3aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	8d 8b       	std	Y+21, r24	; 0x15
    3ad4:	9e 8b       	std	Y+22, r25	; 0x16
    3ad6:	af 8b       	std	Y+23, r26	; 0x17
    3ad8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3ada:	6d 89       	ldd	r22, Y+21	; 0x15
    3adc:	7e 89       	ldd	r23, Y+22	; 0x16
    3ade:	8f 89       	ldd	r24, Y+23	; 0x17
    3ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    3ae2:	20 e0       	ldi	r18, 0x00	; 0
    3ae4:	30 e0       	ldi	r19, 0x00	; 0
    3ae6:	40 e8       	ldi	r20, 0x80	; 128
    3ae8:	5f e3       	ldi	r21, 0x3F	; 63
    3aea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aee:	88 23       	and	r24, r24
    3af0:	2c f4       	brge	.+10     	; 0x3afc <WriteNLatch+0xca>
		__ticks = 1;
    3af2:	81 e0       	ldi	r24, 0x01	; 1
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	9c 8b       	std	Y+20, r25	; 0x14
    3af8:	8b 8b       	std	Y+19, r24	; 0x13
    3afa:	3f c0       	rjmp	.+126    	; 0x3b7a <WriteNLatch+0x148>
	else if (__tmp > 65535)
    3afc:	6d 89       	ldd	r22, Y+21	; 0x15
    3afe:	7e 89       	ldd	r23, Y+22	; 0x16
    3b00:	8f 89       	ldd	r24, Y+23	; 0x17
    3b02:	98 8d       	ldd	r25, Y+24	; 0x18
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	3f ef       	ldi	r19, 0xFF	; 255
    3b08:	4f e7       	ldi	r20, 0x7F	; 127
    3b0a:	57 e4       	ldi	r21, 0x47	; 71
    3b0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b10:	18 16       	cp	r1, r24
    3b12:	4c f5       	brge	.+82     	; 0x3b66 <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b14:	69 8d       	ldd	r22, Y+25	; 0x19
    3b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b1c:	20 e0       	ldi	r18, 0x00	; 0
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	40 e2       	ldi	r20, 0x20	; 32
    3b22:	51 e4       	ldi	r21, 0x41	; 65
    3b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b28:	dc 01       	movw	r26, r24
    3b2a:	cb 01       	movw	r24, r22
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	cd 01       	movw	r24, r26
    3b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b34:	dc 01       	movw	r26, r24
    3b36:	cb 01       	movw	r24, r22
    3b38:	9c 8b       	std	Y+20, r25	; 0x14
    3b3a:	8b 8b       	std	Y+19, r24	; 0x13
    3b3c:	0f c0       	rjmp	.+30     	; 0x3b5c <WriteNLatch+0x12a>
    3b3e:	80 e9       	ldi	r24, 0x90	; 144
    3b40:	91 e0       	ldi	r25, 0x01	; 1
    3b42:	9a 8b       	std	Y+18, r25	; 0x12
    3b44:	89 8b       	std	Y+17, r24	; 0x11
    3b46:	89 89       	ldd	r24, Y+17	; 0x11
    3b48:	9a 89       	ldd	r25, Y+18	; 0x12
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	f1 f7       	brne	.-4      	; 0x3b4a <WriteNLatch+0x118>
    3b4e:	9a 8b       	std	Y+18, r25	; 0x12
    3b50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b52:	8b 89       	ldd	r24, Y+19	; 0x13
    3b54:	9c 89       	ldd	r25, Y+20	; 0x14
    3b56:	01 97       	sbiw	r24, 0x01	; 1
    3b58:	9c 8b       	std	Y+20, r25	; 0x14
    3b5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b60:	00 97       	sbiw	r24, 0x00	; 0
    3b62:	69 f7       	brne	.-38     	; 0x3b3e <WriteNLatch+0x10c>
    3b64:	14 c0       	rjmp	.+40     	; 0x3b8e <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b66:	6d 89       	ldd	r22, Y+21	; 0x15
    3b68:	7e 89       	ldd	r23, Y+22	; 0x16
    3b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    3b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b72:	dc 01       	movw	r26, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	9c 8b       	std	Y+20, r25	; 0x14
    3b78:	8b 8b       	std	Y+19, r24	; 0x13
    3b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    3b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    3b7e:	98 8b       	std	Y+16, r25	; 0x10
    3b80:	8f 87       	std	Y+15, r24	; 0x0f
    3b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b84:	98 89       	ldd	r25, Y+16	; 0x10
    3b86:	01 97       	sbiw	r24, 0x01	; 1
    3b88:	f1 f7       	brne	.-4      	; 0x3b86 <WriteNLatch+0x154>
    3b8a:	98 8b       	std	Y+16, r25	; 0x10
    3b8c:	8f 87       	std	Y+15, r24	; 0x0f
    3b8e:	80 e0       	ldi	r24, 0x00	; 0
    3b90:	62 e0       	ldi	r22, 0x02	; 2
    3b92:	40 e0       	ldi	r20, 0x00	; 0
    3b94:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    3b98:	80 91 a4 01 	lds	r24, 0x01A4
    3b9c:	88 23       	and	r24, r24
    3b9e:	09 f4       	brne	.+2      	; 0x3ba2 <WriteNLatch+0x170>
    3ba0:	a2 c0       	rjmp	.+324    	; 0x3ce6 <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    3ba2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ba4:	98 2f       	mov	r25, r24
    3ba6:	91 70       	andi	r25, 0x01	; 1
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	60 e0       	ldi	r22, 0x00	; 0
    3bac:	49 2f       	mov	r20, r25
    3bae:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    3bb2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bb4:	86 95       	lsr	r24
    3bb6:	98 2f       	mov	r25, r24
    3bb8:	91 70       	andi	r25, 0x01	; 1
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	61 e0       	ldi	r22, 0x01	; 1
    3bbe:	49 2f       	mov	r20, r25
    3bc0:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    3bc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bc6:	86 95       	lsr	r24
    3bc8:	86 95       	lsr	r24
    3bca:	98 2f       	mov	r25, r24
    3bcc:	91 70       	andi	r25, 0x01	; 1
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	62 e0       	ldi	r22, 0x02	; 2
    3bd2:	49 2f       	mov	r20, r25
    3bd4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    3bd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3bda:	86 95       	lsr	r24
    3bdc:	86 95       	lsr	r24
    3bde:	86 95       	lsr	r24
    3be0:	98 2f       	mov	r25, r24
    3be2:	91 70       	andi	r25, 0x01	; 1
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	63 e0       	ldi	r22, 0x03	; 3
    3be8:	49 2f       	mov	r20, r25
    3bea:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    3bee:	80 e0       	ldi	r24, 0x00	; 0
    3bf0:	62 e0       	ldi	r22, 0x02	; 2
    3bf2:	41 e0       	ldi	r20, 0x01	; 1
    3bf4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	a0 e0       	ldi	r26, 0x00	; 0
    3bfe:	b0 e4       	ldi	r27, 0x40	; 64
    3c00:	8b 87       	std	Y+11, r24	; 0x0b
    3c02:	9c 87       	std	Y+12, r25	; 0x0c
    3c04:	ad 87       	std	Y+13, r26	; 0x0d
    3c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c10:	20 e0       	ldi	r18, 0x00	; 0
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	4a e7       	ldi	r20, 0x7A	; 122
    3c16:	55 e4       	ldi	r21, 0x45	; 69
    3c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c1c:	dc 01       	movw	r26, r24
    3c1e:	cb 01       	movw	r24, r22
    3c20:	8f 83       	std	Y+7, r24	; 0x07
    3c22:	98 87       	std	Y+8, r25	; 0x08
    3c24:	a9 87       	std	Y+9, r26	; 0x09
    3c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c28:	6f 81       	ldd	r22, Y+7	; 0x07
    3c2a:	78 85       	ldd	r23, Y+8	; 0x08
    3c2c:	89 85       	ldd	r24, Y+9	; 0x09
    3c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c30:	20 e0       	ldi	r18, 0x00	; 0
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	40 e8       	ldi	r20, 0x80	; 128
    3c36:	5f e3       	ldi	r21, 0x3F	; 63
    3c38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c3c:	88 23       	and	r24, r24
    3c3e:	2c f4       	brge	.+10     	; 0x3c4a <WriteNLatch+0x218>
		__ticks = 1;
    3c40:	81 e0       	ldi	r24, 0x01	; 1
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	9e 83       	std	Y+6, r25	; 0x06
    3c46:	8d 83       	std	Y+5, r24	; 0x05
    3c48:	3f c0       	rjmp	.+126    	; 0x3cc8 <WriteNLatch+0x296>
	else if (__tmp > 65535)
    3c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c4c:	78 85       	ldd	r23, Y+8	; 0x08
    3c4e:	89 85       	ldd	r24, Y+9	; 0x09
    3c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c52:	20 e0       	ldi	r18, 0x00	; 0
    3c54:	3f ef       	ldi	r19, 0xFF	; 255
    3c56:	4f e7       	ldi	r20, 0x7F	; 127
    3c58:	57 e4       	ldi	r21, 0x47	; 71
    3c5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c5e:	18 16       	cp	r1, r24
    3c60:	4c f5       	brge	.+82     	; 0x3cb4 <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e2       	ldi	r20, 0x20	; 32
    3c70:	51 e4       	ldi	r21, 0x41	; 65
    3c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	bc 01       	movw	r22, r24
    3c7c:	cd 01       	movw	r24, r26
    3c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	9e 83       	std	Y+6, r25	; 0x06
    3c88:	8d 83       	std	Y+5, r24	; 0x05
    3c8a:	0f c0       	rjmp	.+30     	; 0x3caa <WriteNLatch+0x278>
    3c8c:	80 e9       	ldi	r24, 0x90	; 144
    3c8e:	91 e0       	ldi	r25, 0x01	; 1
    3c90:	9c 83       	std	Y+4, r25	; 0x04
    3c92:	8b 83       	std	Y+3, r24	; 0x03
    3c94:	8b 81       	ldd	r24, Y+3	; 0x03
    3c96:	9c 81       	ldd	r25, Y+4	; 0x04
    3c98:	01 97       	sbiw	r24, 0x01	; 1
    3c9a:	f1 f7       	brne	.-4      	; 0x3c98 <WriteNLatch+0x266>
    3c9c:	9c 83       	std	Y+4, r25	; 0x04
    3c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	9e 83       	std	Y+6, r25	; 0x06
    3ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3caa:	8d 81       	ldd	r24, Y+5	; 0x05
    3cac:	9e 81       	ldd	r25, Y+6	; 0x06
    3cae:	00 97       	sbiw	r24, 0x00	; 0
    3cb0:	69 f7       	brne	.-38     	; 0x3c8c <WriteNLatch+0x25a>
    3cb2:	14 c0       	rjmp	.+40     	; 0x3cdc <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb6:	78 85       	ldd	r23, Y+8	; 0x08
    3cb8:	89 85       	ldd	r24, Y+9	; 0x09
    3cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	9e 83       	std	Y+6, r25	; 0x06
    3cc6:	8d 83       	std	Y+5, r24	; 0x05
    3cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cca:	9e 81       	ldd	r25, Y+6	; 0x06
    3ccc:	9a 83       	std	Y+2, r25	; 0x02
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	89 81       	ldd	r24, Y+1	; 0x01
    3cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	f1 f7       	brne	.-4      	; 0x3cd4 <WriteNLatch+0x2a2>
    3cd8:	9a 83       	std	Y+2, r25	; 0x02
    3cda:	89 83       	std	Y+1, r24	; 0x01
    3cdc:	80 e0       	ldi	r24, 0x00	; 0
    3cde:	62 e0       	ldi	r22, 0x02	; 2
    3ce0:	40 e0       	ldi	r20, 0x00	; 0
    3ce2:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    3ce6:	81 e0       	ldi	r24, 0x01	; 1
    3ce8:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    3cea:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3cec:	6e 96       	adiw	r28, 0x1e	; 30
    3cee:	0f b6       	in	r0, 0x3f	; 63
    3cf0:	f8 94       	cli
    3cf2:	de bf       	out	0x3e, r29	; 62
    3cf4:	0f be       	out	0x3f, r0	; 63
    3cf6:	cd bf       	out	0x3d, r28	; 61
    3cf8:	cf 91       	pop	r28
    3cfa:	df 91       	pop	r29
    3cfc:	08 95       	ret

00003cfe <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    3cfe:	df 93       	push	r29
    3d00:	cf 93       	push	r28
    3d02:	00 d0       	rcall	.+0      	; 0x3d04 <LCD_enuSendData+0x6>
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
    3d08:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3d0a:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	60 e0       	ldi	r22, 0x00	; 0
    3d10:	41 e0       	ldi	r20, 0x01	; 1
    3d12:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	61 e0       	ldi	r22, 0x01	; 1
    3d1a:	40 e0       	ldi	r20, 0x00	; 0
    3d1c:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    3d20:	8a 81       	ldd	r24, Y+2	; 0x02
    3d22:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <WriteNLatch>



	return Local_enu_ErrorState;
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d28:	0f 90       	pop	r0
    3d2a:	0f 90       	pop	r0
    3d2c:	cf 91       	pop	r28
    3d2e:	df 91       	pop	r29
    3d30:	08 95       	ret

00003d32 <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    3d32:	df 93       	push	r29
    3d34:	cf 93       	push	r28
    3d36:	00 d0       	rcall	.+0      	; 0x3d38 <LCD_enuSendCommand+0x6>
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3d3e:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	60 e0       	ldi	r22, 0x00	; 0
    3d44:	40 e0       	ldi	r20, 0x00	; 0
    3d46:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	61 e0       	ldi	r22, 0x01	; 1
    3d4e:	40 e0       	ldi	r20, 0x00	; 0
    3d50:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    3d54:	8a 81       	ldd	r24, Y+2	; 0x02
    3d56:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d60:	0f 90       	pop	r0
    3d62:	0f 90       	pop	r0
    3d64:	cf 91       	pop	r28
    3d66:	df 91       	pop	r29
    3d68:	08 95       	ret

00003d6a <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    3d6a:	df 93       	push	r29
    3d6c:	cf 93       	push	r28
    3d6e:	00 d0       	rcall	.+0      	; 0x3d70 <LCD_u8SendString+0x6>
    3d70:	00 d0       	rcall	.+0      	; 0x3d72 <LCD_u8SendString+0x8>
    3d72:	0f 92       	push	r0
    3d74:	cd b7       	in	r28, 0x3d	; 61
    3d76:	de b7       	in	r29, 0x3e	; 62
    3d78:	9c 83       	std	Y+4, r25	; 0x04
    3d7a:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3d7c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    3d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d80:	9c 81       	ldd	r25, Y+4	; 0x04
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	f9 f0       	breq	.+62     	; 0x3dc4 <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    3d86:	19 82       	std	Y+1, r1	; 0x01
    3d88:	0f c0       	rjmp	.+30     	; 0x3da8 <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	28 2f       	mov	r18, r24
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
    3d92:	9c 81       	ldd	r25, Y+4	; 0x04
    3d94:	fc 01       	movw	r30, r24
    3d96:	e2 0f       	add	r30, r18
    3d98:	f3 1f       	adc	r31, r19
    3d9a:	90 81       	ld	r25, Z
    3d9c:	89 81       	ldd	r24, Y+1	; 0x01
    3d9e:	8f 5f       	subi	r24, 0xFF	; 255
    3da0:	89 83       	std	Y+1, r24	; 0x01
    3da2:	89 2f       	mov	r24, r25
    3da4:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	28 2f       	mov	r18, r24
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	8b 81       	ldd	r24, Y+3	; 0x03
    3db0:	9c 81       	ldd	r25, Y+4	; 0x04
    3db2:	fc 01       	movw	r30, r24
    3db4:	e2 0f       	add	r30, r18
    3db6:	f3 1f       	adc	r31, r19
    3db8:	80 81       	ld	r24, Z
    3dba:	88 23       	and	r24, r24
    3dbc:	31 f7       	brne	.-52     	; 0x3d8a <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    3dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc0:	8d 83       	std	Y+5, r24	; 0x05
    3dc2:	04 c0       	rjmp	.+8      	; 0x3dcc <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    3dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dca:	8d 83       	std	Y+5, r24	; 0x05
    3dcc:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    3dce:	0f 90       	pop	r0
    3dd0:	0f 90       	pop	r0
    3dd2:	0f 90       	pop	r0
    3dd4:	0f 90       	pop	r0
    3dd6:	0f 90       	pop	r0
    3dd8:	cf 91       	pop	r28
    3dda:	df 91       	pop	r29
    3ddc:	08 95       	ret

00003dde <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    3dde:	df 93       	push	r29
    3de0:	cf 93       	push	r28
    3de2:	cd b7       	in	r28, 0x3d	; 61
    3de4:	de b7       	in	r29, 0x3e	; 62
    3de6:	a0 97       	sbiw	r28, 0x20	; 32
    3de8:	0f b6       	in	r0, 0x3f	; 63
    3dea:	f8 94       	cli
    3dec:	de bf       	out	0x3e, r29	; 62
    3dee:	0f be       	out	0x3f, r0	; 63
    3df0:	cd bf       	out	0x3d, r28	; 61
    3df2:	6b 8f       	std	Y+27, r22	; 0x1b
    3df4:	7c 8f       	std	Y+28, r23	; 0x1c
    3df6:	8d 8f       	std	Y+29, r24	; 0x1d
    3df8:	9e 8f       	std	Y+30, r25	; 0x1e
    3dfa:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3dfc:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    3dfe:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    3e00:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    3e02:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    3e04:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    3e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e0a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3e0c:	be 8d       	ldd	r27, Y+30	; 0x1e
    3e0e:	bb 23       	and	r27, r27
    3e10:	94 f4       	brge	.+36     	; 0x3e36 <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    3e12:	8d e2       	ldi	r24, 0x2D	; 45
    3e14:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_enuSendData>
		Copy_u8data*=-1;
    3e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e1c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3e1e:	be 8d       	ldd	r27, Y+30	; 0x1e
    3e20:	b0 95       	com	r27
    3e22:	a0 95       	com	r26
    3e24:	90 95       	com	r25
    3e26:	81 95       	neg	r24
    3e28:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2a:	af 4f       	sbci	r26, 0xFF	; 255
    3e2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e2e:	8b 8f       	std	Y+27, r24	; 0x1b
    3e30:	9c 8f       	std	Y+28, r25	; 0x1c
    3e32:	ad 8f       	std	Y+29, r26	; 0x1d
    3e34:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    3e36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e3a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3e3c:	be 8d       	ldd	r27, Y+30	; 0x1e
    3e3e:	00 97       	sbiw	r24, 0x00	; 0
    3e40:	a1 05       	cpc	r26, r1
    3e42:	b1 05       	cpc	r27, r1
    3e44:	09 f0       	breq	.+2      	; 0x3e48 <LCD_enuIntegerToString+0x6a>
    3e46:	4b c0       	rjmp	.+150    	; 0x3ede <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    3e48:	8d 81       	ldd	r24, Y+5	; 0x05
    3e4a:	28 2f       	mov	r18, r24
    3e4c:	30 e0       	ldi	r19, 0x00	; 0
    3e4e:	ce 01       	movw	r24, r28
    3e50:	07 96       	adiw	r24, 0x07	; 7
    3e52:	fc 01       	movw	r30, r24
    3e54:	e2 0f       	add	r30, r18
    3e56:	f3 1f       	adc	r31, r19
    3e58:	80 e3       	ldi	r24, 0x30	; 48
    3e5a:	80 83       	st	Z, r24
    3e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5e:	8f 5f       	subi	r24, 0xFF	; 255
    3e60:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    3e62:	8d 81       	ldd	r24, Y+5	; 0x05
    3e64:	28 2f       	mov	r18, r24
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	ce 01       	movw	r24, r28
    3e6a:	07 96       	adiw	r24, 0x07	; 7
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	e2 0f       	add	r30, r18
    3e70:	f3 1f       	adc	r31, r19
    3e72:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    3e74:	8e 81       	ldd	r24, Y+6	; 0x06
    3e76:	88 a3       	std	Y+32, r24	; 0x20
    3e78:	7f c0       	rjmp	.+254    	; 0x3f78 <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    3e7a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e7c:	28 2f       	mov	r18, r24
    3e7e:	30 e0       	ldi	r19, 0x00	; 0
    3e80:	40 e0       	ldi	r20, 0x00	; 0
    3e82:	50 e0       	ldi	r21, 0x00	; 0
    3e84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e88:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3e8a:	be 8d       	ldd	r27, Y+30	; 0x1e
    3e8c:	bc 01       	movw	r22, r24
    3e8e:	cd 01       	movw	r24, r26
    3e90:	0e 94 6f 21 	call	0x42de	; 0x42de <__divmodsi4>
    3e94:	dc 01       	movw	r26, r24
    3e96:	cb 01       	movw	r24, r22
    3e98:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    3e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e9c:	28 2f       	mov	r18, r24
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea2:	48 2f       	mov	r20, r24
    3ea4:	40 5d       	subi	r20, 0xD0	; 208
    3ea6:	ce 01       	movw	r24, r28
    3ea8:	07 96       	adiw	r24, 0x07	; 7
    3eaa:	fc 01       	movw	r30, r24
    3eac:	e2 0f       	add	r30, r18
    3eae:	f3 1f       	adc	r31, r19
    3eb0:	40 83       	st	Z, r20
    3eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3eb4:	8f 5f       	subi	r24, 0xFF	; 255
    3eb6:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    3eb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3eba:	28 2f       	mov	r18, r24
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	40 e0       	ldi	r20, 0x00	; 0
    3ec0:	50 e0       	ldi	r21, 0x00	; 0
    3ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ec4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ec6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3ec8:	be 8d       	ldd	r27, Y+30	; 0x1e
    3eca:	bc 01       	movw	r22, r24
    3ecc:	cd 01       	movw	r24, r26
    3ece:	0e 94 6f 21 	call	0x42de	; 0x42de <__divmodsi4>
    3ed2:	da 01       	movw	r26, r20
    3ed4:	c9 01       	movw	r24, r18
    3ed6:	8b 8f       	std	Y+27, r24	; 0x1b
    3ed8:	9c 8f       	std	Y+28, r25	; 0x1c
    3eda:	ad 8f       	std	Y+29, r26	; 0x1d
    3edc:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    3ede:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ee0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ee2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3ee4:	be 8d       	ldd	r27, Y+30	; 0x1e
    3ee6:	00 97       	sbiw	r24, 0x00	; 0
    3ee8:	a1 05       	cpc	r26, r1
    3eea:	b1 05       	cpc	r27, r1
    3eec:	31 f6       	brne	.-116    	; 0x3e7a <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    3eee:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef0:	28 2f       	mov	r18, r24
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	ce 01       	movw	r24, r28
    3ef6:	07 96       	adiw	r24, 0x07	; 7
    3ef8:	fc 01       	movw	r30, r24
    3efa:	e2 0f       	add	r30, r18
    3efc:	f3 1f       	adc	r31, r19
    3efe:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    3f00:	8d 81       	ldd	r24, Y+5	; 0x05
    3f02:	81 50       	subi	r24, 0x01	; 1
    3f04:	8a 83       	std	Y+2, r24	; 0x02
    3f06:	2c c0       	rjmp	.+88     	; 0x3f60 <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    3f08:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0a:	28 2f       	mov	r18, r24
    3f0c:	30 e0       	ldi	r19, 0x00	; 0
    3f0e:	ce 01       	movw	r24, r28
    3f10:	07 96       	adiw	r24, 0x07	; 7
    3f12:	fc 01       	movw	r30, r24
    3f14:	e2 0f       	add	r30, r18
    3f16:	f3 1f       	adc	r31, r19
    3f18:	80 81       	ld	r24, Z
    3f1a:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    3f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1e:	48 2f       	mov	r20, r24
    3f20:	50 e0       	ldi	r21, 0x00	; 0
    3f22:	8a 81       	ldd	r24, Y+2	; 0x02
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	ce 01       	movw	r24, r28
    3f2a:	07 96       	adiw	r24, 0x07	; 7
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	e2 0f       	add	r30, r18
    3f30:	f3 1f       	adc	r31, r19
    3f32:	20 81       	ld	r18, Z
    3f34:	ce 01       	movw	r24, r28
    3f36:	07 96       	adiw	r24, 0x07	; 7
    3f38:	fc 01       	movw	r30, r24
    3f3a:	e4 0f       	add	r30, r20
    3f3c:	f5 1f       	adc	r31, r21
    3f3e:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    3f40:	8a 81       	ldd	r24, Y+2	; 0x02
    3f42:	28 2f       	mov	r18, r24
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	ce 01       	movw	r24, r28
    3f48:	07 96       	adiw	r24, 0x07	; 7
    3f4a:	fc 01       	movw	r30, r24
    3f4c:	e2 0f       	add	r30, r18
    3f4e:	f3 1f       	adc	r31, r19
    3f50:	89 81       	ldd	r24, Y+1	; 0x01
    3f52:	80 83       	st	Z, r24

        Local_u8Start++;
    3f54:	8b 81       	ldd	r24, Y+3	; 0x03
    3f56:	8f 5f       	subi	r24, 0xFF	; 255
    3f58:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    3f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f5c:	81 50       	subi	r24, 0x01	; 1
    3f5e:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    3f60:	9b 81       	ldd	r25, Y+3	; 0x03
    3f62:	8a 81       	ldd	r24, Y+2	; 0x02
    3f64:	98 17       	cp	r25, r24
    3f66:	80 f2       	brcs	.-96     	; 0x3f08 <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    3f68:	ce 01       	movw	r24, r28
    3f6a:	07 96       	adiw	r24, 0x07	; 7
    3f6c:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    3f74:	8e 81       	ldd	r24, Y+6	; 0x06
    3f76:	88 a3       	std	Y+32, r24	; 0x20
    3f78:	88 a1       	ldd	r24, Y+32	; 0x20
}
    3f7a:	a0 96       	adiw	r28, 0x20	; 32
    3f7c:	0f b6       	in	r0, 0x3f	; 63
    3f7e:	f8 94       	cli
    3f80:	de bf       	out	0x3e, r29	; 62
    3f82:	0f be       	out	0x3f, r0	; 63
    3f84:	cd bf       	out	0x3d, r28	; 61
    3f86:	cf 91       	pop	r28
    3f88:	df 91       	pop	r29
    3f8a:	08 95       	ret

00003f8c <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    3f8c:	df 93       	push	r29
    3f8e:	cf 93       	push	r28
    3f90:	cd b7       	in	r28, 0x3d	; 61
    3f92:	de b7       	in	r29, 0x3e	; 62
    3f94:	27 97       	sbiw	r28, 0x07	; 7
    3f96:	0f b6       	in	r0, 0x3f	; 63
    3f98:	f8 94       	cli
    3f9a:	de bf       	out	0x3e, r29	; 62
    3f9c:	0f be       	out	0x3f, r0	; 63
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	8b 83       	std	Y+3, r24	; 0x03
    3fa2:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    3fa4:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    3fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa8:	81 31       	cpi	r24, 0x11	; 17
    3faa:	18 f4       	brcc	.+6      	; 0x3fb2 <LCD_u8SetPosXY+0x26>
    3fac:	8c 81       	ldd	r24, Y+4	; 0x04
    3fae:	83 30       	cpi	r24, 0x03	; 3
    3fb0:	18 f0       	brcs	.+6      	; 0x3fb8 <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    3fb2:	2a 81       	ldd	r18, Y+2	; 0x02
    3fb4:	2f 83       	std	Y+7, r18	; 0x07
    3fb6:	23 c0       	rjmp	.+70     	; 0x3ffe <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    3fb8:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    3fba:	8c 81       	ldd	r24, Y+4	; 0x04
    3fbc:	28 2f       	mov	r18, r24
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	3e 83       	std	Y+6, r19	; 0x06
    3fc2:	2d 83       	std	Y+5, r18	; 0x05
    3fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc8:	81 30       	cpi	r24, 0x01	; 1
    3fca:	91 05       	cpc	r25, r1
    3fcc:	31 f0       	breq	.+12     	; 0x3fda <LCD_u8SetPosXY+0x4e>
    3fce:	2d 81       	ldd	r18, Y+5	; 0x05
    3fd0:	3e 81       	ldd	r19, Y+6	; 0x06
    3fd2:	22 30       	cpi	r18, 0x02	; 2
    3fd4:	31 05       	cpc	r19, r1
    3fd6:	21 f0       	breq	.+8      	; 0x3fe0 <LCD_u8SetPosXY+0x54>
    3fd8:	07 c0       	rjmp	.+14     	; 0x3fe8 <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    3fda:	8b 81       	ldd	r24, Y+3	; 0x03
    3fdc:	89 83       	std	Y+1, r24	; 0x01
    3fde:	05 c0       	rjmp	.+10     	; 0x3fea <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    3fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe2:	80 5c       	subi	r24, 0xC0	; 192
    3fe4:	89 83       	std	Y+1, r24	; 0x01
    3fe6:	01 c0       	rjmp	.+2      	; 0x3fea <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    3fe8:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	80 68       	ori	r24, 0x80	; 128
    3fee:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    3ff0:	89 81       	ldd	r24, Y+1	; 0x01
    3ff2:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    3ffa:	3a 81       	ldd	r19, Y+2	; 0x02
    3ffc:	3f 83       	std	Y+7, r19	; 0x07
    3ffe:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4000:	27 96       	adiw	r28, 0x07	; 7
    4002:	0f b6       	in	r0, 0x3f	; 63
    4004:	f8 94       	cli
    4006:	de bf       	out	0x3e, r29	; 62
    4008:	0f be       	out	0x3f, r0	; 63
    400a:	cd bf       	out	0x3d, r28	; 61
    400c:	cf 91       	pop	r28
    400e:	df 91       	pop	r29
    4010:	08 95       	ret

00004012 <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    4012:	df 93       	push	r29
    4014:	cf 93       	push	r28
    4016:	cd b7       	in	r28, 0x3d	; 61
    4018:	de b7       	in	r29, 0x3e	; 62
    401a:	27 97       	sbiw	r28, 0x07	; 7
    401c:	0f b6       	in	r0, 0x3f	; 63
    401e:	f8 94       	cli
    4020:	de bf       	out	0x3e, r29	; 62
    4022:	0f be       	out	0x3f, r0	; 63
    4024:	cd bf       	out	0x3d, r28	; 61
    4026:	9d 83       	std	Y+5, r25	; 0x05
    4028:	8c 83       	std	Y+4, r24	; 0x04
    402a:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    402c:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    402e:	8c 81       	ldd	r24, Y+4	; 0x04
    4030:	9d 81       	ldd	r25, Y+5	; 0x05
    4032:	00 97       	sbiw	r24, 0x00	; 0
    4034:	19 f0       	breq	.+6      	; 0x403c <LCD_u8StoreCustomChar+0x2a>
    4036:	8e 81       	ldd	r24, Y+6	; 0x06
    4038:	89 30       	cpi	r24, 0x09	; 9
    403a:	18 f0       	brcs	.+6      	; 0x4042 <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    403c:	8b 81       	ldd	r24, Y+3	; 0x03
    403e:	8f 83       	std	Y+7, r24	; 0x07
    4040:	2a c0       	rjmp	.+84     	; 0x4096 <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    4042:	8e 81       	ldd	r24, Y+6	; 0x06
    4044:	88 2f       	mov	r24, r24
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	88 0f       	add	r24, r24
    404a:	99 1f       	adc	r25, r25
    404c:	88 0f       	add	r24, r24
    404e:	99 1f       	adc	r25, r25
    4050:	88 0f       	add	r24, r24
    4052:	99 1f       	adc	r25, r25
    4054:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    4056:	8a 81       	ldd	r24, Y+2	; 0x02
    4058:	80 64       	ori	r24, 0x40	; 64
    405a:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    405c:	8a 81       	ldd	r24, Y+2	; 0x02
    405e:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    4062:	19 82       	std	Y+1, r1	; 0x01
    4064:	0e c0       	rjmp	.+28     	; 0x4082 <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    4066:	89 81       	ldd	r24, Y+1	; 0x01
    4068:	28 2f       	mov	r18, r24
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	8c 81       	ldd	r24, Y+4	; 0x04
    406e:	9d 81       	ldd	r25, Y+5	; 0x05
    4070:	fc 01       	movw	r30, r24
    4072:	e2 0f       	add	r30, r18
    4074:	f3 1f       	adc	r31, r19
    4076:	80 81       	ld	r24, Z
    4078:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	8f 5f       	subi	r24, 0xFF	; 255
    4080:	89 83       	std	Y+1, r24	; 0x01
    4082:	89 81       	ldd	r24, Y+1	; 0x01
    4084:	88 30       	cpi	r24, 0x08	; 8
    4086:	78 f3       	brcs	.-34     	; 0x4066 <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    4088:	82 e0       	ldi	r24, 0x02	; 2
    408a:	0e 94 99 1e 	call	0x3d32	; 0x3d32 <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    4092:	8b 81       	ldd	r24, Y+3	; 0x03
    4094:	8f 83       	std	Y+7, r24	; 0x07
    4096:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4098:	27 96       	adiw	r28, 0x07	; 7
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
    40a4:	cf 91       	pop	r28
    40a6:	df 91       	pop	r29
    40a8:	08 95       	ret

000040aa <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    40aa:	df 93       	push	r29
    40ac:	cf 93       	push	r28
    40ae:	00 d0       	rcall	.+0      	; 0x40b0 <LCD_u8DisplayCustomChar+0x6>
    40b0:	00 d0       	rcall	.+0      	; 0x40b2 <LCD_u8DisplayCustomChar+0x8>
    40b2:	cd b7       	in	r28, 0x3d	; 61
    40b4:	de b7       	in	r29, 0x3e	; 62
    40b6:	8a 83       	std	Y+2, r24	; 0x02
    40b8:	6b 83       	std	Y+3, r22	; 0x03
    40ba:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    40bc:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    40be:	8c 81       	ldd	r24, Y+4	; 0x04
    40c0:	6b 81       	ldd	r22, Y+3	; 0x03
    40c2:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    40c6:	8a 81       	ldd	r24, Y+2	; 0x02
    40c8:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    40d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    40d2:	0f 90       	pop	r0
    40d4:	0f 90       	pop	r0
    40d6:	0f 90       	pop	r0
    40d8:	0f 90       	pop	r0
    40da:	cf 91       	pop	r28
    40dc:	df 91       	pop	r29
    40de:	08 95       	ret

000040e0 <EEPROM_enuInit>:
#include "EEPROM_interface.h"
/**************************************************************/



ErrorStatus_t EEPROM_enuInit(void){
    40e0:	df 93       	push	r29
    40e2:	cf 93       	push	r28
    40e4:	0f 92       	push	r0
    40e6:	cd b7       	in	r28, 0x3d	; 61
    40e8:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enuErrorState = TWI_enuInit();
    40ea:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TWI_enuInit>
    40ee:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    40f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    40f2:	0f 90       	pop	r0
    40f4:	cf 91       	pop	r28
    40f6:	df 91       	pop	r29
    40f8:	08 95       	ret

000040fa <EEPROM_enuWriteData>:


ErrorStatus_t EEPROM_enuWriteData(EEPROM_Input_t* eepromInstance) {
    40fa:	df 93       	push	r29
    40fc:	cf 93       	push	r28
    40fe:	00 d0       	rcall	.+0      	; 0x4100 <EEPROM_enuWriteData+0x6>
    4100:	00 d0       	rcall	.+0      	; 0x4102 <EEPROM_enuWriteData+0x8>
    4102:	cd b7       	in	r28, 0x3d	; 61
    4104:	de b7       	in	r29, 0x3e	; 62
    4106:	9c 83       	std	Y+4, r25	; 0x04
    4108:	8b 83       	std	Y+3, r24	; 0x03
    ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    410a:	1a 82       	std	Y+2, r1	; 0x02

    	uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 3) | (eepromInstance->A1 << 2) | (eepromInstance->A0);

	#elif(EEPROM_TYPE == EEPROM_NM24C08 || EEPROM_TYPE == EEPROM_NM24C08F )

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 2) | (eepromInstance->A1 << 1) | (eepromInstance->A0);
    410c:	eb 81       	ldd	r30, Y+3	; 0x03
    410e:	fc 81       	ldd	r31, Y+4	; 0x04
    4110:	82 81       	ldd	r24, Z+2	; 0x02
    4112:	81 70       	andi	r24, 0x01	; 1
    4114:	88 2f       	mov	r24, r24
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	88 0f       	add	r24, r24
    411a:	99 1f       	adc	r25, r25
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	28 2f       	mov	r18, r24
    4122:	20 6a       	ori	r18, 0xA0	; 160
    4124:	eb 81       	ldd	r30, Y+3	; 0x03
    4126:	fc 81       	ldd	r31, Y+4	; 0x04
    4128:	82 81       	ldd	r24, Z+2	; 0x02
    412a:	86 95       	lsr	r24
    412c:	81 70       	andi	r24, 0x01	; 1
    412e:	88 2f       	mov	r24, r24
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	88 0f       	add	r24, r24
    4134:	99 1f       	adc	r25, r25
    4136:	92 2f       	mov	r25, r18
    4138:	98 2b       	or	r25, r24
    413a:	eb 81       	ldd	r30, Y+3	; 0x03
    413c:	fc 81       	ldd	r31, Y+4	; 0x04
    413e:	82 81       	ldd	r24, Z+2	; 0x02
    4140:	86 95       	lsr	r24
    4142:	86 95       	lsr	r24
    4144:	81 70       	andi	r24, 0x01	; 1
    4146:	89 2b       	or	r24, r25
    4148:	89 83       	std	Y+1, r24	; 0x01
		#error "Unsupported EEPROM type!"
	#endif


    // Send start condition
    if( TWI_enuStartCondition() == TWI_STATUS_OK){
    414a:	0e 94 89 08 	call	0x1112	; 0x1112 <TWI_enuStartCondition>
    414e:	81 30       	cpi	r24, 0x01	; 1
    4150:	79 f4       	brne	.+30     	; 0x4170 <EEPROM_enuWriteData+0x76>

		// Send EEPROM address with write operation
		TWI_enuWriteData(Local_u8Address | TWI_WriteOperation);
    4152:	89 81       	ldd	r24, Y+1	; 0x01
    4154:	0e 94 1d 09 	call	0x123a	; 0x123a <TWI_enuWriteData>

		// Send memory address within EEPROM
		TWI_enuWriteData(eepromInstance->address);
    4158:	eb 81       	ldd	r30, Y+3	; 0x03
    415a:	fc 81       	ldd	r31, Y+4	; 0x04
    415c:	80 81       	ld	r24, Z
    415e:	0e 94 1d 09 	call	0x123a	; 0x123a <TWI_enuWriteData>

		// Write data to EEPROM
		TWI_enuWriteData(eepromInstance->data);
    4162:	eb 81       	ldd	r30, Y+3	; 0x03
    4164:	fc 81       	ldd	r31, Y+4	; 0x04
    4166:	81 81       	ldd	r24, Z+1	; 0x01
    4168:	0e 94 1d 09 	call	0x123a	; 0x123a <TWI_enuWriteData>

		// Send stop condition
		TWI_enuStopCondition();
    416c:	0e 94 c9 08 	call	0x1192	; 0x1192 <TWI_enuStopCondition>

    }

    Local_enuErrorState = ERROR_STATUS_OK;
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	8a 83       	std	Y+2, r24	; 0x02
    return Local_enuErrorState;
    4174:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4176:	0f 90       	pop	r0
    4178:	0f 90       	pop	r0
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
    417e:	cf 91       	pop	r28
    4180:	df 91       	pop	r29
    4182:	08 95       	ret

00004184 <EEPROM_enuReadData>:


ErrorStatus_t EEPROM_enuReadData(EEPROM_Input_t* eepromInstance) {
    4184:	df 93       	push	r29
    4186:	cf 93       	push	r28
    4188:	00 d0       	rcall	.+0      	; 0x418a <EEPROM_enuReadData+0x6>
    418a:	00 d0       	rcall	.+0      	; 0x418c <EEPROM_enuReadData+0x8>
    418c:	cd b7       	in	r28, 0x3d	; 61
    418e:	de b7       	in	r29, 0x3e	; 62
    4190:	9c 83       	std	Y+4, r25	; 0x04
    4192:	8b 83       	std	Y+3, r24	; 0x03
    ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    4194:	1a 82       	std	Y+2, r1	; 0x02

    eepromInstance->data = 0;
    4196:	eb 81       	ldd	r30, Y+3	; 0x03
    4198:	fc 81       	ldd	r31, Y+4	; 0x04
    419a:	11 82       	std	Z+1, r1	; 0x01

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 3) | (eepromInstance->A1 << 2) | (eepromInstance->A0);

	#elif(EEPROM_TYPE == EEPROM_NM24C08 || EEPROM_TYPE == EEPROM_NM24C08F )

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 2) | (eepromInstance->A1 << 1) | (eepromInstance->A0);
    419c:	eb 81       	ldd	r30, Y+3	; 0x03
    419e:	fc 81       	ldd	r31, Y+4	; 0x04
    41a0:	82 81       	ldd	r24, Z+2	; 0x02
    41a2:	81 70       	andi	r24, 0x01	; 1
    41a4:	88 2f       	mov	r24, r24
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	88 0f       	add	r24, r24
    41aa:	99 1f       	adc	r25, r25
    41ac:	88 0f       	add	r24, r24
    41ae:	99 1f       	adc	r25, r25
    41b0:	28 2f       	mov	r18, r24
    41b2:	20 6a       	ori	r18, 0xA0	; 160
    41b4:	eb 81       	ldd	r30, Y+3	; 0x03
    41b6:	fc 81       	ldd	r31, Y+4	; 0x04
    41b8:	82 81       	ldd	r24, Z+2	; 0x02
    41ba:	86 95       	lsr	r24
    41bc:	81 70       	andi	r24, 0x01	; 1
    41be:	88 2f       	mov	r24, r24
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	88 0f       	add	r24, r24
    41c4:	99 1f       	adc	r25, r25
    41c6:	92 2f       	mov	r25, r18
    41c8:	98 2b       	or	r25, r24
    41ca:	eb 81       	ldd	r30, Y+3	; 0x03
    41cc:	fc 81       	ldd	r31, Y+4	; 0x04
    41ce:	82 81       	ldd	r24, Z+2	; 0x02
    41d0:	86 95       	lsr	r24
    41d2:	86 95       	lsr	r24
    41d4:	81 70       	andi	r24, 0x01	; 1
    41d6:	89 2b       	or	r24, r25
    41d8:	89 83       	std	Y+1, r24	; 0x01
	#if( EEPROM_TYPE == EEPROM_NM24C09 || EEPROM_TYPE == EEPROM_NM24C09F )
		uint8_t Local_u8Address = (0xA0) | (EEPROM_A2_STATE << 2);
	#endif

	// Send start condition
    if( TWI_enuStartCondition() == TWI_STATUS_OK){
    41da:	0e 94 89 08 	call	0x1112	; 0x1112 <TWI_enuStartCondition>
    41de:	81 30       	cpi	r24, 0x01	; 1
    41e0:	a9 f4       	brne	.+42     	; 0x420c <EEPROM_enuReadData+0x88>

		// Send EEPROM address with write operation
		TWI_enuWriteData(Local_u8Address);
    41e2:	89 81       	ldd	r24, Y+1	; 0x01
    41e4:	0e 94 1d 09 	call	0x123a	; 0x123a <TWI_enuWriteData>

		// Send memory address within EEPROM
		TWI_enuWriteData(eepromInstance->address);
    41e8:	eb 81       	ldd	r30, Y+3	; 0x03
    41ea:	fc 81       	ldd	r31, Y+4	; 0x04
    41ec:	80 81       	ld	r24, Z
    41ee:	0e 94 1d 09 	call	0x123a	; 0x123a <TWI_enuWriteData>

		// Send repeated start condition
		TWI_enuStartCondition();
    41f2:	0e 94 89 08 	call	0x1112	; 0x1112 <TWI_enuStartCondition>

		// Send EEPROM address with read operation
		TWI_enuWriteData(Local_u8Address | TWI_ReadOperation);
    41f6:	89 81       	ldd	r24, Y+1	; 0x01
    41f8:	81 60       	ori	r24, 0x01	; 1
    41fa:	0e 94 1d 09 	call	0x123a	; 0x123a <TWI_enuWriteData>

		// Read data from EEPROM
		TWI_enuReadData(&(eepromInstance->data));
    41fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4200:	9c 81       	ldd	r25, Y+4	; 0x04
    4202:	01 96       	adiw	r24, 0x01	; 1
    4204:	0e 94 43 09 	call	0x1286	; 0x1286 <TWI_enuReadData>

		// Send stop condition
		TWI_enuStopCondition();
    4208:	0e 94 c9 08 	call	0x1192	; 0x1192 <TWI_enuStopCondition>

    }

    Local_enuErrorState = ERROR_STATUS_OK;
    420c:	81 e0       	ldi	r24, 0x01	; 1
    420e:	8a 83       	std	Y+2, r24	; 0x02
    return Local_enuErrorState;
    4210:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4212:	0f 90       	pop	r0
    4214:	0f 90       	pop	r0
    4216:	0f 90       	pop	r0
    4218:	0f 90       	pop	r0
    421a:	cf 91       	pop	r28
    421c:	df 91       	pop	r29
    421e:	08 95       	ret

00004220 <main>:

#include "MCAL/TIMER/TIMER_interface.h"
/****************************************************************/


int main(){
    4220:	df 93       	push	r29
    4222:	cf 93       	push	r28
    4224:	cd b7       	in	r28, 0x3d	; 61
    4226:	de b7       	in	r29, 0x3e	; 62


	TIMER1_voidInit();
    4228:	0e 94 b7 0a 	call	0x156e	; 0x156e <TIMER1_voidInit>


	TIMER1_voidSetPWM(10);
    422c:	8a e0       	ldi	r24, 0x0A	; 10
    422e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <TIMER1_voidSetPWM>
    4232:	ff cf       	rjmp	.-2      	; 0x4232 <main+0x12>

00004234 <__mulsi3>:
    4234:	62 9f       	mul	r22, r18
    4236:	d0 01       	movw	r26, r0
    4238:	73 9f       	mul	r23, r19
    423a:	f0 01       	movw	r30, r0
    423c:	82 9f       	mul	r24, r18
    423e:	e0 0d       	add	r30, r0
    4240:	f1 1d       	adc	r31, r1
    4242:	64 9f       	mul	r22, r20
    4244:	e0 0d       	add	r30, r0
    4246:	f1 1d       	adc	r31, r1
    4248:	92 9f       	mul	r25, r18
    424a:	f0 0d       	add	r31, r0
    424c:	83 9f       	mul	r24, r19
    424e:	f0 0d       	add	r31, r0
    4250:	74 9f       	mul	r23, r20
    4252:	f0 0d       	add	r31, r0
    4254:	65 9f       	mul	r22, r21
    4256:	f0 0d       	add	r31, r0
    4258:	99 27       	eor	r25, r25
    425a:	72 9f       	mul	r23, r18
    425c:	b0 0d       	add	r27, r0
    425e:	e1 1d       	adc	r30, r1
    4260:	f9 1f       	adc	r31, r25
    4262:	63 9f       	mul	r22, r19
    4264:	b0 0d       	add	r27, r0
    4266:	e1 1d       	adc	r30, r1
    4268:	f9 1f       	adc	r31, r25
    426a:	bd 01       	movw	r22, r26
    426c:	cf 01       	movw	r24, r30
    426e:	11 24       	eor	r1, r1
    4270:	08 95       	ret

00004272 <__udivmodhi4>:
    4272:	aa 1b       	sub	r26, r26
    4274:	bb 1b       	sub	r27, r27
    4276:	51 e1       	ldi	r21, 0x11	; 17
    4278:	07 c0       	rjmp	.+14     	; 0x4288 <__udivmodhi4_ep>

0000427a <__udivmodhi4_loop>:
    427a:	aa 1f       	adc	r26, r26
    427c:	bb 1f       	adc	r27, r27
    427e:	a6 17       	cp	r26, r22
    4280:	b7 07       	cpc	r27, r23
    4282:	10 f0       	brcs	.+4      	; 0x4288 <__udivmodhi4_ep>
    4284:	a6 1b       	sub	r26, r22
    4286:	b7 0b       	sbc	r27, r23

00004288 <__udivmodhi4_ep>:
    4288:	88 1f       	adc	r24, r24
    428a:	99 1f       	adc	r25, r25
    428c:	5a 95       	dec	r21
    428e:	a9 f7       	brne	.-22     	; 0x427a <__udivmodhi4_loop>
    4290:	80 95       	com	r24
    4292:	90 95       	com	r25
    4294:	bc 01       	movw	r22, r24
    4296:	cd 01       	movw	r24, r26
    4298:	08 95       	ret

0000429a <__udivmodsi4>:
    429a:	a1 e2       	ldi	r26, 0x21	; 33
    429c:	1a 2e       	mov	r1, r26
    429e:	aa 1b       	sub	r26, r26
    42a0:	bb 1b       	sub	r27, r27
    42a2:	fd 01       	movw	r30, r26
    42a4:	0d c0       	rjmp	.+26     	; 0x42c0 <__udivmodsi4_ep>

000042a6 <__udivmodsi4_loop>:
    42a6:	aa 1f       	adc	r26, r26
    42a8:	bb 1f       	adc	r27, r27
    42aa:	ee 1f       	adc	r30, r30
    42ac:	ff 1f       	adc	r31, r31
    42ae:	a2 17       	cp	r26, r18
    42b0:	b3 07       	cpc	r27, r19
    42b2:	e4 07       	cpc	r30, r20
    42b4:	f5 07       	cpc	r31, r21
    42b6:	20 f0       	brcs	.+8      	; 0x42c0 <__udivmodsi4_ep>
    42b8:	a2 1b       	sub	r26, r18
    42ba:	b3 0b       	sbc	r27, r19
    42bc:	e4 0b       	sbc	r30, r20
    42be:	f5 0b       	sbc	r31, r21

000042c0 <__udivmodsi4_ep>:
    42c0:	66 1f       	adc	r22, r22
    42c2:	77 1f       	adc	r23, r23
    42c4:	88 1f       	adc	r24, r24
    42c6:	99 1f       	adc	r25, r25
    42c8:	1a 94       	dec	r1
    42ca:	69 f7       	brne	.-38     	; 0x42a6 <__udivmodsi4_loop>
    42cc:	60 95       	com	r22
    42ce:	70 95       	com	r23
    42d0:	80 95       	com	r24
    42d2:	90 95       	com	r25
    42d4:	9b 01       	movw	r18, r22
    42d6:	ac 01       	movw	r20, r24
    42d8:	bd 01       	movw	r22, r26
    42da:	cf 01       	movw	r24, r30
    42dc:	08 95       	ret

000042de <__divmodsi4>:
    42de:	97 fb       	bst	r25, 7
    42e0:	09 2e       	mov	r0, r25
    42e2:	05 26       	eor	r0, r21
    42e4:	0e d0       	rcall	.+28     	; 0x4302 <__divmodsi4_neg1>
    42e6:	57 fd       	sbrc	r21, 7
    42e8:	04 d0       	rcall	.+8      	; 0x42f2 <__divmodsi4_neg2>
    42ea:	d7 df       	rcall	.-82     	; 0x429a <__udivmodsi4>
    42ec:	0a d0       	rcall	.+20     	; 0x4302 <__divmodsi4_neg1>
    42ee:	00 1c       	adc	r0, r0
    42f0:	38 f4       	brcc	.+14     	; 0x4300 <__divmodsi4_exit>

000042f2 <__divmodsi4_neg2>:
    42f2:	50 95       	com	r21
    42f4:	40 95       	com	r20
    42f6:	30 95       	com	r19
    42f8:	21 95       	neg	r18
    42fa:	3f 4f       	sbci	r19, 0xFF	; 255
    42fc:	4f 4f       	sbci	r20, 0xFF	; 255
    42fe:	5f 4f       	sbci	r21, 0xFF	; 255

00004300 <__divmodsi4_exit>:
    4300:	08 95       	ret

00004302 <__divmodsi4_neg1>:
    4302:	f6 f7       	brtc	.-4      	; 0x4300 <__divmodsi4_exit>
    4304:	90 95       	com	r25
    4306:	80 95       	com	r24
    4308:	70 95       	com	r23
    430a:	61 95       	neg	r22
    430c:	7f 4f       	sbci	r23, 0xFF	; 255
    430e:	8f 4f       	sbci	r24, 0xFF	; 255
    4310:	9f 4f       	sbci	r25, 0xFF	; 255
    4312:	08 95       	ret

00004314 <__prologue_saves__>:
    4314:	2f 92       	push	r2
    4316:	3f 92       	push	r3
    4318:	4f 92       	push	r4
    431a:	5f 92       	push	r5
    431c:	6f 92       	push	r6
    431e:	7f 92       	push	r7
    4320:	8f 92       	push	r8
    4322:	9f 92       	push	r9
    4324:	af 92       	push	r10
    4326:	bf 92       	push	r11
    4328:	cf 92       	push	r12
    432a:	df 92       	push	r13
    432c:	ef 92       	push	r14
    432e:	ff 92       	push	r15
    4330:	0f 93       	push	r16
    4332:	1f 93       	push	r17
    4334:	cf 93       	push	r28
    4336:	df 93       	push	r29
    4338:	cd b7       	in	r28, 0x3d	; 61
    433a:	de b7       	in	r29, 0x3e	; 62
    433c:	ca 1b       	sub	r28, r26
    433e:	db 0b       	sbc	r29, r27
    4340:	0f b6       	in	r0, 0x3f	; 63
    4342:	f8 94       	cli
    4344:	de bf       	out	0x3e, r29	; 62
    4346:	0f be       	out	0x3f, r0	; 63
    4348:	cd bf       	out	0x3d, r28	; 61
    434a:	09 94       	ijmp

0000434c <__epilogue_restores__>:
    434c:	2a 88       	ldd	r2, Y+18	; 0x12
    434e:	39 88       	ldd	r3, Y+17	; 0x11
    4350:	48 88       	ldd	r4, Y+16	; 0x10
    4352:	5f 84       	ldd	r5, Y+15	; 0x0f
    4354:	6e 84       	ldd	r6, Y+14	; 0x0e
    4356:	7d 84       	ldd	r7, Y+13	; 0x0d
    4358:	8c 84       	ldd	r8, Y+12	; 0x0c
    435a:	9b 84       	ldd	r9, Y+11	; 0x0b
    435c:	aa 84       	ldd	r10, Y+10	; 0x0a
    435e:	b9 84       	ldd	r11, Y+9	; 0x09
    4360:	c8 84       	ldd	r12, Y+8	; 0x08
    4362:	df 80       	ldd	r13, Y+7	; 0x07
    4364:	ee 80       	ldd	r14, Y+6	; 0x06
    4366:	fd 80       	ldd	r15, Y+5	; 0x05
    4368:	0c 81       	ldd	r16, Y+4	; 0x04
    436a:	1b 81       	ldd	r17, Y+3	; 0x03
    436c:	aa 81       	ldd	r26, Y+2	; 0x02
    436e:	b9 81       	ldd	r27, Y+1	; 0x01
    4370:	ce 0f       	add	r28, r30
    4372:	d1 1d       	adc	r29, r1
    4374:	0f b6       	in	r0, 0x3f	; 63
    4376:	f8 94       	cli
    4378:	de bf       	out	0x3e, r29	; 62
    437a:	0f be       	out	0x3f, r0	; 63
    437c:	cd bf       	out	0x3d, r28	; 61
    437e:	ed 01       	movw	r28, r26
    4380:	08 95       	ret

00004382 <_exit>:
    4382:	f8 94       	cli

00004384 <__stop_program>:
    4384:	ff cf       	rjmp	.-2      	; 0x4384 <__stop_program>
