
Avr32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000455e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  0000455e  000045f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  0080018c  0080018c  0000471e  2**0
                  ALLOC
  3 .stab         00005574  00000000  00000000  00004720  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002b6d  00000000  00000000  00009c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000c801  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000c9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000cbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000f25b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0001073b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000119e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  00011bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  00011ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001286c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__vector_1>
       8:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__vector_2>
       c:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__vector_3>
      10:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__vector_4>
      14:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_10>
      2c:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 cb 18 	jmp	0x3196	; 0x3196 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <main>
      8a:	0c 94 ad 22 	jmp	0x455a	; 0x455a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9b 21 	jmp	0x4336	; 0x4336 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e6       	ldi	r26, 0x6E	; 110
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b7 21 	jmp	0x436e	; 0x436e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c3 21 	jmp	0x4386	; 0x4386 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c3 21 	jmp	0x4386	; 0x4386 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9b 21 	jmp	0x4336	; 0x4336 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e6       	ldi	r24, 0x6E	; 110
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b7 21 	jmp	0x436e	; 0x436e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e6       	ldi	r22, 0x6E	; 110
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bf 21 	jmp	0x437e	; 0x437e <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c3 21 	jmp	0x4386	; 0x4386 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c3 21 	jmp	0x4386	; 0x4386 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c3 21 	jmp	0x4386	; 0x4386 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 c3 21 	jmp	0x4386	; 0x4386 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 ab 21 	jmp	0x4356	; 0x4356 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 c7 21 	jmp	0x438e	; 0x438e <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 a3 21 	jmp	0x4346	; 0x4346 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 bf 21 	jmp	0x437e	; 0x437e <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	ea 58       	subi	r30, 0x8A	; 138
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <UART_vidInit>:
#include "UART_priv.h"
#include "UART_config.h"
/************************************************************************************/


void UART_vidInit(uint16 copy_u8UART_BaudRate){
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <UART_vidInit+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01


	/********************** Setting  Baud Rate **********************/
	UART_setBaudRate(copy_u8UART_BaudRate);
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	0e 94 49 08 	call	0x1092	; 0x1092 <UART_setBaudRate>
	/***************************************************************/
    SET_BIT(UCSRC_REG, UCSRC_URSEL);
     ea4:	a0 e4       	ldi	r26, 0x40	; 64
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 68       	ori	r24, 0x80	; 128
     eb0:	8c 93       	st	X, r24


	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)

		CLR_BIT(UCSRC_REG, UCSRC_UMSEL);
     eb2:	a0 e4       	ldi	r26, 0x40	; 64
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e0 e4       	ldi	r30, 0x40	; 64
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8f 7b       	andi	r24, 0xBF	; 191
     ebe:	8c 93       	st	X, r24

		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)
			CLR_BIT(UCSRA_REG, UCSRA_U2X);
     ec0:	ab e2       	ldi	r26, 0x2B	; 43
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	eb e2       	ldi	r30, 0x2B	; 43
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8d 7f       	andi	r24, 0xFD	; 253
     ecc:	8c 93       	st	X, r24
			SET_BIT(UCSRC_REG, UCSRC_UMSEL);
	#endif


	#if(UART_MPCM_OPERATION == UART_SINGLE_MODE)
			CLR_BIT(UCSRA_REG, UCSRA_MPCM);
     ece:	ab e2       	ldi	r26, 0x2B	; 43
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	eb e2       	ldi	r30, 0x2B	; 43
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8e 7f       	andi	r24, 0xFE	; 254
     eda:	8c 93       	st	X, r24
			SET_BIT(UCSRA_REG, UCSRA_MPCM);
	#endif


	// Receiver Enable
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
     edc:	aa e2       	ldi	r26, 0x2A	; 42
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ea e2       	ldi	r30, 0x2A	; 42
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 61       	ori	r24, 0x10	; 16
     ee8:	8c 93       	st	X, r24

	// Transmitter Enable
	SET_BIT(UCSRB_REG, UCSRB_TXEN);
     eea:	aa e2       	ldi	r26, 0x2A	; 42
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e2       	ldi	r30, 0x2A	; 42
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 60       	ori	r24, 0x08	; 8
     ef6:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
		SET_BIT(UCSRB_REG, UCSRB_UCSZ2);

	#elif(UART_DATA_BIT == UART_DATA_8bit)

		SET_BIT(UCSRC_REG, UCSRC_UCSZ0);
     ef8:	a0 e4       	ldi	r26, 0x40	; 64
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e0 e4       	ldi	r30, 0x40	; 64
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	82 60       	ori	r24, 0x02	; 2
     f04:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
     f06:	a0 e4       	ldi	r26, 0x40	; 64
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e0 e4       	ldi	r30, 0x40	; 64
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	84 60       	ori	r24, 0x04	; 4
     f12:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     f14:	aa e2       	ldi	r26, 0x2A	; 42
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ea e2       	ldi	r30, 0x2A	; 42
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8b 7f       	andi	r24, 0xFB	; 251
     f20:	8c 93       	st	X, r24


	/********************* Setting No Stop Bits *********************/
	#if(UART_STOP_BIT == UART_STOP_1bit)

		CLR_BIT(UCSRC_REG, UCSRC_USBS);
     f22:	a0 e4       	ldi	r26, 0x40	; 64
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e0 e4       	ldi	r30, 0x40	; 64
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	87 7f       	andi	r24, 0xF7	; 247
     f2e:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSRC_UPM0);
		SET_BIT(UCSRC_REG, UCSRC_UPM1);

	#elif(UART_PARITY_MODE == UART_PARITY_ODD)

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     f30:	a0 e4       	ldi	r26, 0x40	; 64
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e0 e4       	ldi	r30, 0x40	; 64
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 62       	ori	r24, 0x20	; 32
     f3c:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     f3e:	a0 e4       	ldi	r26, 0x40	; 64
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e0 e4       	ldi	r30, 0x40	; 64
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 61       	ori	r24, 0x10	; 16
     f4a:	8c 93       	st	X, r24
	/**************************************************************/




}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <UART_enuSendChar>:


ErrorStatus_t UART_enuSendChar(uint8_t copy_u8Data){
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <UART_enuSendChar+0x6>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     f62:	19 82       	std	Y+1, r1	; 0x01


	// Wait until transmit buffer is empty
	while(GET_BIT(UCSRA_REG, UCSRA_URDE) == 0);
     f64:	eb e2       	ldi	r30, 0x2B	; 43
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	82 95       	swap	r24
     f6c:	86 95       	lsr	r24
     f6e:	87 70       	andi	r24, 0x07	; 7
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	a1 f3       	breq	.-24     	; 0xf64 <UART_enuSendChar+0xe>

	UDR_REG = copy_u8Data;
     f7c:	ec e2       	ldi	r30, 0x2C	; 44
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	80 83       	st	Z, r24


	Local_enuErrrorState = ERROR_STATUS_OK;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     f88:	89 81       	ldd	r24, Y+1	; 0x01
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <UART_enuSendString>:


ErrorStatus_t UART_enuSendString(uint8_t* copy_pu8Data){
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <UART_enuSendString+0x6>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <UART_enuSendString+0x8>
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	9b 83       	std	Y+3, r25	; 0x03
     fa2:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     fa4:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	69 f4       	brne	.+26     	; 0xfc8 <UART_enuSendString+0x34>
		return Local_enuErrrorState;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	8c 83       	std	Y+4, r24	; 0x04
     fb2:	16 c0       	rjmp	.+44     	; 0xfe0 <UART_enuSendString+0x4c>
	}

	else{

		while(*copy_pu8Data != '\0'){
			UART_enuSendChar(*copy_pu8Data);
     fb4:	ea 81       	ldd	r30, Y+2	; 0x02
     fb6:	fb 81       	ldd	r31, Y+3	; 0x03
     fb8:	80 81       	ld	r24, Z
     fba:	0e 94 ab 07 	call	0xf56	; 0xf56 <UART_enuSendChar>
			copy_pu8Data++;
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	9b 83       	std	Y+3, r25	; 0x03
     fc6:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
	}

	else{

		while(*copy_pu8Data != '\0'){
     fc8:	ea 81       	ldd	r30, Y+2	; 0x02
     fca:	fb 81       	ldd	r31, Y+3	; 0x03
     fcc:	80 81       	ld	r24, Z
     fce:	88 23       	and	r24, r24
     fd0:	89 f7       	brne	.-30     	; 0xfb4 <UART_enuSendString+0x20>
			UART_enuSendChar(*copy_pu8Data);
			copy_pu8Data++;
		}
		UART_enuSendChar('\0');
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 ab 07 	call	0xf56	; 0xf56 <UART_enuSendChar>
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	8c 83       	std	Y+4, r24	; 0x04
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <UART_enuRecieveChar>:

ErrorStatus_t UART_enuRecieveChar(uint8_t* copy_pu8Data){
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <UART_enuRecieveChar+0x6>
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <UART_enuRecieveChar+0x8>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1000:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	9b 81       	ldd	r25, Y+3	; 0x03
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	19 f4       	brne	.+6      	; 0x1010 <UART_enuRecieveChar+0x20>
		return Local_enuErrrorState;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	8c 83       	std	Y+4, r24	; 0x04
    100e:	0f c0       	rjmp	.+30     	; 0x102e <UART_enuRecieveChar+0x3e>
	}

	else{

		// Receive Complete
		while(GET_BIT(UCSRA_REG, UCSRA_RXC) == 0);
    1010:	eb e2       	ldi	r30, 0x2B	; 43
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	88 23       	and	r24, r24
    1018:	dc f7       	brge	.-10     	; 0x1010 <UART_enuRecieveChar+0x20>

		*copy_pu8Data = UDR_REG;
    101a:	ec e2       	ldi	r30, 0x2C	; 44
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	ea 81       	ldd	r30, Y+2	; 0x02
    1022:	fb 81       	ldd	r31, Y+3	; 0x03
    1024:	80 83       	st	Z, r24
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	8c 83       	std	Y+4, r24	; 0x04
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <UART_enuRecieveString>:



ErrorStatus_t UART_enuRecieveString(uint8_t* copy_pu8Data){
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <UART_enuRecieveString+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <UART_enuRecieveString+0x8>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9b 83       	std	Y+3, r25	; 0x03
    104c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    104e:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	9b 81       	ldd	r25, Y+3	; 0x03
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	61 f4       	brne	.+24     	; 0x1070 <UART_enuRecieveString+0x32>
		return Local_enuErrrorState;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	8c 83       	std	Y+4, r24	; 0x04
    105c:	12 c0       	rjmp	.+36     	; 0x1082 <UART_enuRecieveString+0x44>
	}

	else{
		while(*copy_pu8Data != '\0'){
			UART_enuRecieveChar(copy_pu8Data);
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	0e 94 f8 07 	call	0xff0	; 0xff0 <UART_enuRecieveChar>
			copy_pu8Data+=1;
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	9b 83       	std	Y+3, r25	; 0x03
    106e:	8a 83       	std	Y+2, r24	; 0x02
	if(copy_pu8Data == NULL){
		return Local_enuErrrorState;
	}

	else{
		while(*copy_pu8Data != '\0'){
    1070:	ea 81       	ldd	r30, Y+2	; 0x02
    1072:	fb 81       	ldd	r31, Y+3	; 0x03
    1074:	80 81       	ld	r24, Z
    1076:	88 23       	and	r24, r24
    1078:	91 f7       	brne	.-28     	; 0x105e <UART_enuRecieveString+0x20>
			copy_pu8Data+=1;
		}
	}


	Local_enuErrrorState = ERROR_STATUS_OK;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	8c 83       	std	Y+4, r24	; 0x04
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	cf 91       	pop	r28
    108e:	df 91       	pop	r29
    1090:	08 95       	ret

00001092 <UART_setBaudRate>:


//!
void UART_setBaudRate(uint16 copy_u8UART_BaudRate){
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	00 d0       	rcall	.+0      	; 0x1098 <UART_setBaudRate+0x6>
    1098:	00 d0       	rcall	.+0      	; 0x109a <UART_setBaudRate+0x8>
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int copy_u16Temp = 0;
    10a2:	1a 82       	std	Y+2, r1	; 0x02
    10a4:	19 82       	std	Y+1, r1	; 0x01

    #if (UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)
        #if (UART_SPEED_MODE == UART_NORMAL_SPEED)


    			copy_u16Temp = ((UART_MC_OSC_FREQ / (16UL*copy_u8UART_BaudRate) ) - 1);
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	cc 01       	movw	r24, r24
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	aa 1f       	adc	r26, r26
    10b6:	bb 1f       	adc	r27, r27
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	aa 1f       	adc	r26, r26
    10be:	bb 1f       	adc	r27, r27
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	aa 1f       	adc	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	aa 1f       	adc	r26, r26
    10ce:	bb 1f       	adc	r27, r27
    10d0:	9c 01       	movw	r18, r24
    10d2:	ad 01       	movw	r20, r26
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	92 e1       	ldi	r25, 0x12	; 18
    10d8:	aa e7       	ldi	r26, 0x7A	; 122
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	0e 94 5e 21 	call	0x42bc	; 0x42bc <__udivmodsi4>
    10e4:	da 01       	movw	r26, r20
    10e6:	c9 01       	movw	r24, r18
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01

    			copy_u16Temp = ((UART_MC_OSC_FREQ / (2UL*copy_u8UART_BaudRate) ) - 1);
    #endif


    CLR_BIT(UCSRC_REG, UCSRC_URSEL);
    10ee:	a0 e4       	ldi	r26, 0x40	; 64
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e0 e4       	ldi	r30, 0x40	; 64
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 77       	andi	r24, 0x7F	; 127
    10fa:	8c 93       	st	X, r24

    UBRRH_REG = (uint8_t)(copy_u16Temp >> 8);
    10fc:	e0 e4       	ldi	r30, 0x40	; 64
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	89 2f       	mov	r24, r25
    1106:	99 27       	eor	r25, r25
    1108:	80 83       	st	Z, r24
    UBRRL_REG = (uint8_t)copy_u16Temp;
    110a:	e9 e2       	ldi	r30, 0x29	; 41
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	80 83       	st	Z, r24
}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <TWI_enuInit>:

#include <util/delay.h>

/**************************************************************************/

TWIStatus_t TWI_enuInit(void){
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	0f 92       	push	r0
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t Local_enuErrorState = TWI_STATUS_FAILURE;
    112a:	19 82       	std	Y+1, r1	; 0x01


	#if(TWI_MODE_M_or_S == TWI_MASTER_MODE)
		// Set Value for Bit Rate            (should only be when we working with master)
		TWBR_REG = TWBR_VALUE;
    112c:	e0 e2       	ldi	r30, 0x20	; 32
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	8c e0       	ldi	r24, 0x0C	; 12
    1132:	80 83       	st	Z, r24
	#endif


	// Enable TWI Interrupt
	GIE_enuEnable();
    1134:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <GIE_enuEnable>
	SET_BIT(TWCR_REG, TWCR_TWIE);
    1138:	a6 e5       	ldi	r26, 0x56	; 86
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e6 e5       	ldi	r30, 0x56	; 86
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	81 60       	ori	r24, 0x01	; 1
    1144:	8c 93       	st	X, r24


	// Enable TWI Peripheral
	SET_BIT(TWCR_REG, TWCR_TWEN);
    1146:	a6 e5       	ldi	r26, 0x56	; 86
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e6 e5       	ldi	r30, 0x56	; 86
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	84 60       	ori	r24, 0x04	; 4
    1152:	8c 93       	st	X, r24


	#if(TWI_ACK_CONFIG == TWI_ACK_ENABLE)
		SET_BIT(TWCR_REG, TWCR_TWEA);
    1154:	a6 e5       	ldi	r26, 0x56	; 86
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e6 e5       	ldi	r30, 0x56	; 86
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	80 64       	ori	r24, 0x40	; 64
    1160:	8c 93       	st	X, r24
	#endif



	#if(TWI_GCE_CONFIG == TWI_GCE_ENABLE)
		SET_BIT(TWAR_REG, TWAR_TWGCE);
    1162:	a2 e2       	ldi	r26, 0x22	; 34
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e2 e2       	ldi	r30, 0x22	; 34
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	8c 93       	st	X, r24

	#endif


   // Set Address for MC
   TWAR_REG = (TWAR_REG&0x01)  | TWI_SET_ADDR;
    1170:	a2 e2       	ldi	r26, 0x22	; 34
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e2 e2       	ldi	r30, 0x22	; 34
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	88 60       	ori	r24, 0x08	; 8
    117e:	8c 93       	st	X, r24



   Local_enuErrorState = TWI_STATUS_OK;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	89 83       	std	Y+1, r24	; 0x01
   return Local_enuErrorState;
    1184:	89 81       	ldd	r24, Y+1	; 0x01
}
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <TWI_enuStartCondition>:



TWIStatus_t TWI_enuStartCondition(void){
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	0f 92       	push	r0
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1198:	19 82       	std	Y+1, r1	; 0x01

	// Start condition
	SET_BIT(TWCR_REG, TWCR_TWSTA);
    119a:	a6 e5       	ldi	r26, 0x56	; 86
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e6 e5       	ldi	r30, 0x56	; 86
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	80 62       	ori	r24, 0x20	; 32
    11a6:	8c 93       	st	X, r24


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    11a8:	a6 e5       	ldi	r26, 0x56	; 86
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e6 e5       	ldi	r30, 0x56	; 86
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	80 68       	ori	r24, 0x80	; 128
    11b4:	8c 93       	st	X, r24


	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    11b6:	e6 e5       	ldi	r30, 0x56	; 86
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	88 23       	and	r24, r24
    11be:	dc f7       	brge	.-10     	; 0x11b6 <TWI_enuStartCondition+0x28>
	 *
	 * 0xF8
	 * */

//	DDRA = (TWSR_REG &0xF8);
	if( (TWSR_REG &0xF8) == 0x08){
    11c0:	e1 e2       	ldi	r30, 0x21	; 33
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	88 2f       	mov	r24, r24
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	88 7f       	andi	r24, 0xF8	; 248
    11cc:	90 70       	andi	r25, 0x00	; 0
    11ce:	88 30       	cpi	r24, 0x08	; 8
    11d0:	91 05       	cpc	r25, r1
    11d2:	11 f4       	brne	.+4      	; 0x11d8 <TWI_enuStartCondition+0x4a>
		Local_enu_ErrorState = TWI_STATUS_OK;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	89 83       	std	Y+1, r24	; 0x01
	}


	Local_enu_ErrorState = TWI_STATUS_OK;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11de:	0f 90       	pop	r0
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <TWI_enuRepeatStartCondition>:

TWIStatus_t TWI_enuRepeatStartCondition(void){
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	0f 92       	push	r0
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    11f0:	19 82       	std	Y+1, r1	; 0x01

	// Start condition
	SET_BIT(TWCR_REG, TWCR_TWSTA);
    11f2:	a6 e5       	ldi	r26, 0x56	; 86
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e6 e5       	ldi	r30, 0x56	; 86
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	80 62       	ori	r24, 0x20	; 32
    11fe:	8c 93       	st	X, r24


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    1200:	a6 e5       	ldi	r26, 0x56	; 86
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e6 e5       	ldi	r30, 0x56	; 86
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 68       	ori	r24, 0x80	; 128
    120c:	8c 93       	st	X, r24


	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    120e:	e6 e5       	ldi	r30, 0x56	; 86
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	88 23       	and	r24, r24
    1216:	dc f7       	brge	.-10     	; 0x120e <TWI_enuRepeatStartCondition+0x28>
	 * 0xF8
	 * */



	if( (TWSR_REG &0xF8) == TWI_RSTART_SUCCESS_CODE){
    1218:	e1 e2       	ldi	r30, 0x21	; 33
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	88 7f       	andi	r24, 0xF8	; 248
    1224:	90 70       	andi	r25, 0x00	; 0
    1226:	80 31       	cpi	r24, 0x10	; 16
    1228:	91 05       	cpc	r25, r1
    122a:	11 f4       	brne	.+4      	; 0x1230 <TWI_enuRepeatStartCondition+0x4a>
		Local_enu_ErrorState = TWI_STATUS_OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enu_ErrorState;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
}
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <TWI_enuStopCondition>:


//! since there no status code why not doing macro like function
// IDEAS for feature development
TWIStatus_t TWI_enuStopCondition(void){
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	0f 92       	push	r0
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1244:	19 82       	std	Y+1, r1	; 0x01


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    1246:	a6 e5       	ldi	r26, 0x56	; 86
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	e6 e5       	ldi	r30, 0x56	; 86
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	80 68       	ori	r24, 0x80	; 128
    1252:	8c 93       	st	X, r24

	// Stop Condition
	SET_BIT(TWCR_REG, TWCR_TWSTO);
    1254:	a6 e5       	ldi	r26, 0x56	; 86
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e6 e5       	ldi	r30, 0x56	; 86
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	80 61       	ori	r24, 0x10	; 16
    1260:	8c 93       	st	X, r24



	Local_enu_ErrorState = TWI_STATUS_OK;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
}
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <TWI_enuSetSlaveOperation>:


TWIStatus_t TWI_enuSetSlaveOperation(
		uint8_t copy_u8SlaveAddress, uint8_t copy_u8Operation){
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <TWI_enuSetSlaveOperation+0x6>
    1276:	0f 92       	push	r0
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	6b 83       	std	Y+3, r22	; 0x03

	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1280:	19 82       	std	Y+1, r1	; 0x01


	TWDR_REG = (copy_u8SlaveAddress<<1) | (copy_u8Operation);
    1282:	e3 e2       	ldi	r30, 0x23	; 35
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	98 2f       	mov	r25, r24
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	89 2b       	or	r24, r25
    1296:	80 83       	st	Z, r24

	// Since we should have already send START condition
	// we have to clear TWSTA
	CLR_BIT(TWCR_REG, TWCR_TWSTA);
    1298:	a6 e5       	ldi	r26, 0x56	; 86
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e6 e5       	ldi	r30, 0x56	; 86
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 7d       	andi	r24, 0xDF	; 223
    12a4:	8c 93       	st	X, r24


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    12a6:	a6 e5       	ldi	r26, 0x56	; 86
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e6 e5       	ldi	r30, 0x56	; 86
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 68       	ori	r24, 0x80	; 128
    12b2:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    12b4:	e6 e5       	ldi	r30, 0x56	; 86
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	88 23       	and	r24, r24
    12bc:	dc f7       	brge	.-10     	; 0x12b4 <TWI_enuSetSlaveOperation+0x44>


    // Check for operation success based on requested operation
    if(copy_u8Operation == TWI_SLA_WR_ACK_TSUCCESS_CODE ){
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 31       	cpi	r24, 0x18	; 24
    12c2:	19 f4       	brne	.+6      	; 0x12ca <TWI_enuSetSlaveOperation+0x5a>
        Local_enu_ErrorState = TWI_STATUS_OK;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <TWI_enuSetSlaveOperation+0x64>


    } else if(copy_u8Operation == TWI_SLA_RD_ACK_TSUCCESS_CODE ){
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	80 34       	cpi	r24, 0x40	; 64
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <TWI_enuSetSlaveOperation+0x64>
        Local_enu_ErrorState = TWI_STATUS_OK;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01

    }


	return Local_enu_ErrorState;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <TWI_enuWriteData>:


TWIStatus_t	TWI_enuWriteData(uint8_t copy_u8Data){
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <TWI_enuWriteData+0x6>
    12e8:	0f 92       	push	r0
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    12f0:	19 82       	std	Y+1, r1	; 0x01

	TWDR_REG = copy_u8Data;
    12f2:	e3 e2       	ldi	r30, 0x23	; 35
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	80 83       	st	Z, r24

	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    12fa:	a6 e5       	ldi	r26, 0x56	; 86
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e6 e5       	ldi	r30, 0x56	; 86
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 68       	ori	r24, 0x80	; 128
    1306:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    1308:	e6 e5       	ldi	r30, 0x56	; 86
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	88 23       	and	r24, r24
    1310:	dc f7       	brge	.-10     	; 0x1308 <TWI_enuWriteData+0x26>



	// 0x28 -(master) data byte has been transmitted ack has been received
	// 0xB8	- (slave) data byte has been transmitted ack has been received
	if( ((TWSR_REG & 0xF8) != TWI_M_TSUCCESS_CODE_withACK) || ((TWSR_REG & 0xF8) != TWI_S_TSUCCESS_CODE_withACK) ){
    1312:	e1 e2       	ldi	r30, 0x21	; 33
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	88 2f       	mov	r24, r24
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	88 7f       	andi	r24, 0xF8	; 248
    131e:	90 70       	andi	r25, 0x00	; 0
    1320:	88 32       	cpi	r24, 0x28	; 40
    1322:	91 05       	cpc	r25, r1
    1324:	51 f4       	brne	.+20     	; 0x133a <TWI_enuWriteData+0x58>
    1326:	e1 e2       	ldi	r30, 0x21	; 33
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	88 7f       	andi	r24, 0xF8	; 248
    1332:	90 70       	andi	r25, 0x00	; 0
    1334:	88 3b       	cpi	r24, 0xB8	; 184
    1336:	91 05       	cpc	r25, r1
    1338:	19 f0       	breq	.+6      	; 0x1340 <TWI_enuWriteData+0x5e>
		return Local_enu_ErrorState;
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	8b 83       	std	Y+3, r24	; 0x03
    133e:	1b c0       	rjmp	.+54     	; 0x1376 <TWI_enuWriteData+0x94>
	}


	if( (TWSR_REG & 0xF8) == TWI_M_TSUCCESS_CODE_withACK ){
    1340:	e1 e2       	ldi	r30, 0x21	; 33
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	88 2f       	mov	r24, r24
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	88 7f       	andi	r24, 0xF8	; 248
    134c:	90 70       	andi	r25, 0x00	; 0
    134e:	88 32       	cpi	r24, 0x28	; 40
    1350:	91 05       	cpc	r25, r1
    1352:	19 f4       	brne	.+6      	; 0x135a <TWI_enuWriteData+0x78>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	0c c0       	rjmp	.+24     	; 0x1372 <TWI_enuWriteData+0x90>
	}

	else if((TWSR_REG & 0xF8) == TWI_S_TSUCCESS_CODE_withACK){
    135a:	e1 e2       	ldi	r30, 0x21	; 33
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	88 2f       	mov	r24, r24
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	88 7f       	andi	r24, 0xF8	; 248
    1366:	90 70       	andi	r25, 0x00	; 0
    1368:	88 3b       	cpi	r24, 0xB8	; 184
    136a:	91 05       	cpc	r25, r1
    136c:	11 f4       	brne	.+4      	; 0x1372 <TWI_enuWriteData+0x90>
		Local_enu_ErrorState = TWI_STATUS_OK;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	8b 83       	std	Y+3, r24	; 0x03
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <TWI_enuReadData>:



TWIStatus_t	TWI_enuReadData(uint8_t  *copy_pu8Data){
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <TWI_enuReadData+0x6>
    138a:	0f 92       	push	r0
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    1390:	9b 83       	std	Y+3, r25	; 0x03
    1392:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1394:	19 82       	std	Y+1, r1	; 0x01

	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    1396:	a6 e5       	ldi	r26, 0x56	; 86
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e6 e5       	ldi	r30, 0x56	; 86
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	80 68       	ori	r24, 0x80	; 128
    13a2:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    13a4:	e6 e5       	ldi	r30, 0x56	; 86
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	88 23       	and	r24, r24
    13ac:	dc f7       	brge	.-10     	; 0x13a4 <TWI_enuReadData+0x20>
	// 0x88 - (slave)  data has been received not ack has been returned

	#if(TWI_ACK_CONFIG == TWI_ACK_ENABLE)

		// Master Receive
		if( ((TWSR_REG & 0xF8) == TWI_M_RSUCCESS_CODE_withAck) ){
    13ae:	e1 e2       	ldi	r30, 0x21	; 33
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 7f       	andi	r24, 0xF8	; 248
    13ba:	90 70       	andi	r25, 0x00	; 0
    13bc:	80 35       	cpi	r24, 0x50	; 80
    13be:	91 05       	cpc	r25, r1
    13c0:	19 f4       	brne	.+6      	; 0x13c8 <TWI_enuReadData+0x44>
			Local_enu_ErrorState = TWI_STATUS_OK;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	0c c0       	rjmp	.+24     	; 0x13e0 <TWI_enuReadData+0x5c>

		}

		// Slave Receive
		else if(((TWSR_REG & 0xF8) == TWI_S_RSUCCESS_CODE_withACK)){
    13c8:	e1 e2       	ldi	r30, 0x21	; 33
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	88 2f       	mov	r24, r24
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	88 7f       	andi	r24, 0xF8	; 248
    13d4:	90 70       	andi	r25, 0x00	; 0
    13d6:	80 38       	cpi	r24, 0x80	; 128
    13d8:	91 05       	cpc	r25, r1
    13da:	11 f4       	brne	.+4      	; 0x13e0 <TWI_enuReadData+0x5c>
			Local_enu_ErrorState = TWI_STATUS_OK;
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	89 83       	std	Y+1, r24	; 0x01
			Local_enu_ErrorState = TWI_STATUS_OK;
		}
	#endif

	// Read data from TWDR Register
	*copy_pu8Data = TWDR_REG;
    13e0:	e3 e2       	ldi	r30, 0x23	; 35
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	ea 81       	ldd	r30, Y+2	; 0x02
    13e8:	fb 81       	ldd	r31, Y+3	; 0x03
    13ea:	80 83       	st	Z, r24

	return Local_enu_ErrorState;
    13ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <TWI_enuCheckMyAddress>:


ErrorStatus_t TWI_enuCheckMyAddress(void){
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	0f 92       	push	r0
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1404:	19 82       	std	Y+1, r1	; 0x01


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    1406:	a6 e5       	ldi	r26, 0x56	; 86
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e6 e5       	ldi	r30, 0x56	; 86
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	80 68       	ori	r24, 0x80	; 128
    1412:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    1414:	e6 e5       	ldi	r30, 0x56	; 86
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	88 23       	and	r24, r24
    141c:	dc f7       	brge	.-10     	; 0x1414 <TWI_enuCheckMyAddress+0x1a>


	// 0x60 - SLA+W has been received, ACK has been returned
	// 0xA8 - SLA+R has been received, ACK has been returned

	if((TWSR_REG & 0xF8) == TWI_SLA_WR_ACK_RSUCCESS_CODE){
    141e:	e1 e2       	ldi	r30, 0x21	; 33
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	88 2f       	mov	r24, r24
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	88 7f       	andi	r24, 0xF8	; 248
    142a:	90 70       	andi	r25, 0x00	; 0
    142c:	80 36       	cpi	r24, 0x60	; 96
    142e:	91 05       	cpc	r25, r1
    1430:	19 f4       	brne	.+6      	; 0x1438 <TWI_enuCheckMyAddress+0x3e>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	0c c0       	rjmp	.+24     	; 0x1450 <TWI_enuCheckMyAddress+0x56>
	}


	else if((TWSR_REG & 0xF8) == TWI_SLA_RD_ACK_RSUCCESS_CODE){
    1438:	e1 e2       	ldi	r30, 0x21	; 33
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	88 7f       	andi	r24, 0xF8	; 248
    1444:	90 70       	andi	r25, 0x00	; 0
    1446:	88 3a       	cpi	r24, 0xA8	; 168
    1448:	91 05       	cpc	r25, r1
    144a:	11 f4       	brne	.+4      	; 0x1450 <TWI_enuCheckMyAddress+0x56>
		Local_enu_ErrorState = TWI_STATUS_OK;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    1450:	89 81       	ldd	r24, Y+1	; 0x01
}
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <TIMER0_voidInit>:
/*******************************************************************************************************/



/****************************************** TIMER0 FUNCTIONS ******************************************/
void TIMER0_voidInit(void){
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	 * 3. Enable Interrupt (Compre Match Interrupt - OverFlow Interrupt)
	 *
	 * */

	/** Active global interrupt **/
	GIE_enuEnable();
    1462:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <GIE_enuEnable>
	#if(TIMER0_MODE_SELECT == TIMER_MODE_NORMALovf)
		SET_BIT(TCCR0_REG, TCCR0_WGM01);
		SET_BIT(TCCR0_REG, TCCR0_WGM00);

	#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
		CLR_BIT(TCCR0_REG, TCCR0_WGM00);
    1466:	a3 e5       	ldi	r26, 0x53	; 83
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e3 e5       	ldi	r30, 0x53	; 83
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8f 7b       	andi	r24, 0xBF	; 191
    1472:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_WGM01);
    1474:	a3 e5       	ldi	r26, 0x53	; 83
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e3 e5       	ldi	r30, 0x53	; 83
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	88 60       	ori	r24, 0x08	; 8
    1480:	8c 93       	st	X, r24

		/** Set compare output mode **/

		#if(TIMER0_OC0_OUTPUT_STATE == TIMER0_OC0_OUTPUT_ENABLE)
		DIO_enuSetPinDirection(TIMER_OC0_PORT, TIMER_OC0_PIN, DIO_u8OUTPUT);
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	63 e0       	ldi	r22, 0x03	; 3
    1486:	41 e0       	ldi	r20, 0x01	; 1
    1488:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
			#elif(TIMER_OC0_OUTPUT_MODE == TIMER_CLR_OC0)
				CLR_BIT(TCCR0_REG, TCCR0_COM00);
				SET_BIT(TCCR0_REG, TCCR0_COM01);

			#elif(TIMER_OC0_OUTPUT_MODE == TIMER_TOGGLE_OC0)
				SET_BIT(TCCR0_REG, TCCR0_COM00);
    148c:	a3 e5       	ldi	r26, 0x53	; 83
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e3 e5       	ldi	r30, 0x53	; 83
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	80 61       	ori	r24, 0x10	; 16
    1498:	8c 93       	st	X, r24
				CLR_BIT(TCCR0_REG, TCCR0_COM01);
    149a:	a3 e5       	ldi	r26, 0x53	; 83
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e3 e5       	ldi	r30, 0x53	; 83
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 7d       	andi	r24, 0xDF	; 223
    14a6:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_CS00);
		SET_BIT(TCCR0_REG, TCCR0_CS01);
		CLR_BIT(TCCR0_REG, TCCR0_CS02);

	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_64)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
    14a8:	a3 e5       	ldi	r26, 0x53	; 83
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e3 e5       	ldi	r30, 0x53	; 83
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	81 60       	ori	r24, 0x01	; 1
    14b4:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_CS01);
    14b6:	a3 e5       	ldi	r26, 0x53	; 83
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e3 e5       	ldi	r30, 0x53	; 83
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	82 60       	ori	r24, 0x02	; 2
    14c2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_CS02);
    14c4:	a3 e5       	ldi	r26, 0x53	; 83
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e3 e5       	ldi	r30, 0x53	; 83
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8b 7f       	andi	r24, 0xFB	; 251
    14d0:	8c 93       	st	X, r24
	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_1024)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
		CLR_BIT(TCCR0_REG, TCCR0_CS01);
		SET_BIT(TCCR0_REG, TCCR0_CS02);
	#endif
}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	08 95       	ret

000014d8 <TIMER0_voidStart>:

void TIMER0_voidStart(void){
    14d8:	df 93       	push	r29
    14da:	cf 93       	push	r28
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
		#if(TIMER0_MODE_SELECT == TIMER_MODE_NORMALovf)
			SET_BIT(TIMSK_REG, TIMSK_TOIE0);

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			SET_BIT(TIMSK_REG, TIMSK_OCIE0);
    14e0:	a9 e5       	ldi	r26, 0x59	; 89
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e9 e5       	ldi	r30, 0x59	; 89
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	82 60       	ori	r24, 0x02	; 2
    14ec:	8c 93       	st	X, r24

		#endif
}
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <TIMER0_voidStop>:

void TIMER0_voidStop(void){
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
		#if(TIMER0_MODE_SELECT == TIMER_MODE_NORMALovf)
			CLR_BIT(TIMSK_REG, TIMSK_TOIE0);

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			CLR_BIT(TIMSK_REG, TIMSK_OCIE0);
    14fc:	a9 e5       	ldi	r26, 0x59	; 89
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e9 e5       	ldi	r30, 0x59	; 89
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8d 7f       	andi	r24, 0xFD	; 253
    1508:	8c 93       	st	X, r24

		#endif
}
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <TIMER0_voidScheduleTask>:

uint8_t TIMER0_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	df 93       	push	r29
    151a:	cf 93       	push	r28
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	60 97       	sbiw	r28, 0x10	; 16
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	9a 87       	std	Y+10, r25	; 0x0a
    152e:	89 87       	std	Y+9, r24	; 0x09
    1530:	4b 87       	std	Y+11, r20	; 0x0b
    1532:	5c 87       	std	Y+12, r21	; 0x0c
    1534:	6d 87       	std	Y+13, r22	; 0x0d
    1536:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    1538:	1d 82       	std	Y+5, r1	; 0x05
    153a:	1e 82       	std	Y+6, r1	; 0x06
    153c:	1f 82       	std	Y+7, r1	; 0x07
    153e:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR0 & 0x07){
    1540:	e3 e5       	ldi	r30, 0x53	; 83
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9c 01       	movw	r18, r24
    154c:	27 70       	andi	r18, 0x07	; 7
    154e:	30 70       	andi	r19, 0x00	; 0
    1550:	38 8b       	std	Y+16, r19	; 0x10
    1552:	2f 87       	std	Y+15, r18	; 0x0f
    1554:	8f 85       	ldd	r24, Y+15	; 0x0f
    1556:	98 89       	ldd	r25, Y+16	; 0x10
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	69 f1       	breq	.+90     	; 0x15b8 <TIMER0_voidScheduleTask+0xa8>
    155e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1560:	f8 89       	ldd	r31, Y+16	; 0x10
    1562:	e4 30       	cpi	r30, 0x04	; 4
    1564:	f1 05       	cpc	r31, r1
    1566:	5c f4       	brge	.+22     	; 0x157e <TIMER0_voidScheduleTask+0x6e>
    1568:	2f 85       	ldd	r18, Y+15	; 0x0f
    156a:	38 89       	ldd	r19, Y+16	; 0x10
    156c:	21 30       	cpi	r18, 0x01	; 1
    156e:	31 05       	cpc	r19, r1
    1570:	89 f0       	breq	.+34     	; 0x1594 <TIMER0_voidScheduleTask+0x84>
    1572:	8f 85       	ldd	r24, Y+15	; 0x0f
    1574:	98 89       	ldd	r25, Y+16	; 0x10
    1576:	82 30       	cpi	r24, 0x02	; 2
    1578:	91 05       	cpc	r25, r1
    157a:	a9 f0       	breq	.+42     	; 0x15a6 <TIMER0_voidScheduleTask+0x96>
    157c:	37 c0       	rjmp	.+110    	; 0x15ec <TIMER0_voidScheduleTask+0xdc>
    157e:	ef 85       	ldd	r30, Y+15	; 0x0f
    1580:	f8 89       	ldd	r31, Y+16	; 0x10
    1582:	e4 30       	cpi	r30, 0x04	; 4
    1584:	f1 05       	cpc	r31, r1
    1586:	09 f1       	breq	.+66     	; 0x15ca <TIMER0_voidScheduleTask+0xba>
    1588:	2f 85       	ldd	r18, Y+15	; 0x0f
    158a:	38 89       	ldd	r19, Y+16	; 0x10
    158c:	25 30       	cpi	r18, 0x05	; 5
    158e:	31 05       	cpc	r19, r1
    1590:	29 f1       	breq	.+74     	; 0x15dc <TIMER0_voidScheduleTask+0xcc>
    1592:	2c c0       	rjmp	.+88     	; 0x15ec <TIMER0_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 e0       	ldi	r26, 0x00	; 0
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	af 83       	std	Y+7, r26	; 0x07
    15a2:	b8 87       	std	Y+8, r27	; 0x08
    15a4:	23 c0       	rjmp	.+70     	; 0x15ec <TIMER0_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    15a6:	88 e0       	ldi	r24, 0x08	; 8
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	8d 83       	std	Y+5, r24	; 0x05
    15b0:	9e 83       	std	Y+6, r25	; 0x06
    15b2:	af 83       	std	Y+7, r26	; 0x07
    15b4:	b8 87       	std	Y+8, r27	; 0x08
    15b6:	1a c0       	rjmp	.+52     	; 0x15ec <TIMER0_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    15b8:	80 e4       	ldi	r24, 0x40	; 64
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a0 e0       	ldi	r26, 0x00	; 0
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	8d 83       	std	Y+5, r24	; 0x05
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	af 83       	std	Y+7, r26	; 0x07
    15c6:	b8 87       	std	Y+8, r27	; 0x08
    15c8:	11 c0       	rjmp	.+34     	; 0x15ec <TIMER0_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	a0 e0       	ldi	r26, 0x00	; 0
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	8d 83       	std	Y+5, r24	; 0x05
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	af 83       	std	Y+7, r26	; 0x07
    15d8:	b8 87       	std	Y+8, r27	; 0x08
    15da:	08 c0       	rjmp	.+16     	; 0x15ec <TIMER0_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	94 e0       	ldi	r25, 0x04	; 4
    15e0:	a0 e0       	ldi	r26, 0x00	; 0
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	8d 83       	std	Y+5, r24	; 0x05
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	af 83       	std	Y+7, r26	; 0x07
    15ea:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    15ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	34 e2       	ldi	r19, 0x24	; 36
    15f8:	44 ef       	ldi	r20, 0xF4	; 244
    15fa:	5a e4       	ldi	r21, 0x4A	; 74
    15fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	7c 01       	movw	r14, r24
    1606:	8d 01       	movw	r16, r26
    1608:	6d 81       	ldd	r22, Y+5	; 0x05
    160a:	7e 81       	ldd	r23, Y+6	; 0x06
    160c:	8f 81       	ldd	r24, Y+7	; 0x07
    160e:	98 85       	ldd	r25, Y+8	; 0x08
    1610:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1614:	9b 01       	movw	r18, r22
    1616:	ac 01       	movw	r20, r24
    1618:	c8 01       	movw	r24, r16
    161a:	b7 01       	movw	r22, r14
    161c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	ab 83       	std	Y+3, r26	; 0x03
    162a:	bc 83       	std	Y+4, r27	; 0x04


	#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)


		if(Local_f64Totalticks > 255){
    162c:	69 81       	ldd	r22, Y+1	; 0x01
    162e:	7a 81       	ldd	r23, Y+2	; 0x02
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	53 e4       	ldi	r21, 0x43	; 67
    163c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1640:	18 16       	cp	r1, r24
    1642:	2c f5       	brge	.+74     	; 0x168e <TIMER0_voidScheduleTask+0x17e>
			OCR0_REG = 255;
    1644:	ec e5       	ldi	r30, 0x5C	; 92
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	80 83       	st	Z, r24
	        TIMER0_TARGET_NTICKS = ceil((double)Local_f64Totalticks / 255.0); // How many times timer should reach 255
    164c:	69 81       	ldd	r22, Y+1	; 0x01
    164e:	7a 81       	ldd	r23, Y+2	; 0x02
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	4f e7       	ldi	r20, 0x7F	; 127
    165a:	53 e4       	ldi	r21, 0x43	; 67
    165c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	bc 01       	movw	r22, r24
    1666:	cd 01       	movw	r24, r26
    1668:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <ceil>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	80 93 9a 01 	sts	0x019A, r24
    1680:	90 93 9b 01 	sts	0x019B, r25
    1684:	a0 93 9c 01 	sts	0x019C, r26
    1688:	b0 93 9d 01 	sts	0x019D, r27
    168c:	22 c0       	rjmp	.+68     	; 0x16d2 <TIMER0_voidScheduleTask+0x1c2>

		}else{
			OCR0_REG = Local_f64Totalticks-1;
    168e:	0c e5       	ldi	r16, 0x5C	; 92
    1690:	10 e0       	ldi	r17, 0x00	; 0
    1692:	69 81       	ldd	r22, Y+1	; 0x01
    1694:	7a 81       	ldd	r23, Y+2	; 0x02
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	9c 81       	ldd	r25, Y+4	; 0x04
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e8       	ldi	r20, 0x80	; 128
    16a0:	5f e3       	ldi	r21, 0x3F	; 63
    16a2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	f8 01       	movw	r30, r16
    16b8:	80 83       	st	Z, r24
			TIMER0_TARGET_NTICKS  = 1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 e0       	ldi	r26, 0x00	; 0
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	80 93 9a 01 	sts	0x019A, r24
    16c6:	90 93 9b 01 	sts	0x019B, r25
    16ca:	a0 93 9c 01 	sts	0x019C, r26
    16ce:	b0 93 9d 01 	sts	0x019D, r27
		}

	#endif


		TIMERS_ISR_Functions[0] = TaskCallback;
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	90 93 95 01 	sts	0x0195, r25
    16da:	80 93 94 01 	sts	0x0194, r24
		TIMER0_voidStart();
    16de:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TIMER0_voidStart>
	return 0;
    16e2:	80 e0       	ldi	r24, 0x00	; 0
}
    16e4:	60 96       	adiw	r28, 0x10	; 16
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	ff 90       	pop	r15
    16fa:	ef 90       	pop	r14
    16fc:	08 95       	ret

000016fe <TIMER2_voidInit>:




/****************************************** TIMER2 FUNCTIONS ******************************************/
void TIMER2_voidInit(void){
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
	 * */


	/**************************** Set  mode for TIMER2 ****************************/
	#if(TIMER2_MODE_SELECT == TIMER_MODE_NORMALovf)
		CLR_BIT(TCCR2_REG, TCCR2_WGM20);
    1706:	a5 e4       	ldi	r26, 0x45	; 69
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e5 e4       	ldi	r30, 0x45	; 69
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	8f 7b       	andi	r24, 0xBF	; 191
    1712:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_WGM21);
    1714:	a5 e4       	ldi	r26, 0x45	; 69
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e5 e4       	ldi	r30, 0x45	; 69
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	87 7f       	andi	r24, 0xF7	; 247
    1720:	8c 93       	st	X, r24
	#endif
	/******************************************************************************/

	/***************************** TIMER2  PRE SELECT *****************************/
	#if(TIMER2_CLK_PRE_SELECT == TIMER_PRES_01)
		SET_BIT(TCCR2_REG, TCCR2_CS20);
    1722:	a5 e4       	ldi	r26, 0x45	; 69
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e5 e4       	ldi	r30, 0x45	; 69
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	81 60       	ori	r24, 0x01	; 1
    172e:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_CS21);
    1730:	a5 e4       	ldi	r26, 0x45	; 69
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	e5 e4       	ldi	r30, 0x45	; 69
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	8d 7f       	andi	r24, 0xFD	; 253
    173c:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_CS22);
    173e:	a5 e4       	ldi	r26, 0x45	; 69
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	e5 e4       	ldi	r30, 0x45	; 69
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8b 7f       	andi	r24, 0xFB	; 251
    174a:	8c 93       	st	X, r24
	#endif
	/******************************************************************************/


	// Turn Global Interrupt ON
	GIE_enuEnable();
    174c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <GIE_enuEnable>

}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <TIMER2_voidStart>:

void TIMER2_voidStart(void){
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	#if(TIMER2_MODE_SELECT == TIMER_MODE_NORMALovf)
		SET_BIT(TIMSK_REG, TIMSK_TOIE2);
    175e:	a9 e5       	ldi	r26, 0x59	; 89
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e9 e5       	ldi	r30, 0x59	; 89
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	80 64       	ori	r24, 0x40	; 64
    176a:	8c 93       	st	X, r24

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		SET_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <TIMER2_voidStop>:

void TIMER2_voidStop(void){
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
	#if(TIMER2_MODE_SELECT == TIMER_MODE_NORMALovf)
		CLR_BIT(TIMSK_REG, TIMSK_TOIE2);
    177a:	a9 e5       	ldi	r26, 0x59	; 89
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e9 e5       	ldi	r30, 0x59	; 89
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	8f 7b       	andi	r24, 0xBF	; 191
    1786:	8c 93       	st	X, r24

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		CLR_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <TIMER2_voidScheduleTask>:

uint8_t TIMER2_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	62 97       	sbiw	r28, 0x12	; 18
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	9a 87       	std	Y+10, r25	; 0x0a
    17ac:	89 87       	std	Y+9, r24	; 0x09
    17ae:	4b 87       	std	Y+11, r20	; 0x0b
    17b0:	5c 87       	std	Y+12, r21	; 0x0c
    17b2:	6d 87       	std	Y+13, r22	; 0x0d
    17b4:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    17b6:	1d 82       	std	Y+5, r1	; 0x05
    17b8:	1e 82       	std	Y+6, r1	; 0x06
    17ba:	1f 82       	std	Y+7, r1	; 0x07
    17bc:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR2 & 0x07){
    17be:	e5 e4       	ldi	r30, 0x45	; 69
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	88 2f       	mov	r24, r24
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9c 01       	movw	r18, r24
    17ca:	27 70       	andi	r18, 0x07	; 7
    17cc:	30 70       	andi	r19, 0x00	; 0
    17ce:	3a 8b       	std	Y+18, r19	; 0x12
    17d0:	29 8b       	std	Y+17, r18	; 0x11
    17d2:	89 89       	ldd	r24, Y+17	; 0x11
    17d4:	9a 89       	ldd	r25, Y+18	; 0x12
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	91 05       	cpc	r25, r1
    17da:	69 f1       	breq	.+90     	; 0x1836 <TIMER2_voidScheduleTask+0xa8>
    17dc:	e9 89       	ldd	r30, Y+17	; 0x11
    17de:	fa 89       	ldd	r31, Y+18	; 0x12
    17e0:	e4 30       	cpi	r30, 0x04	; 4
    17e2:	f1 05       	cpc	r31, r1
    17e4:	5c f4       	brge	.+22     	; 0x17fc <TIMER2_voidScheduleTask+0x6e>
    17e6:	29 89       	ldd	r18, Y+17	; 0x11
    17e8:	3a 89       	ldd	r19, Y+18	; 0x12
    17ea:	21 30       	cpi	r18, 0x01	; 1
    17ec:	31 05       	cpc	r19, r1
    17ee:	89 f0       	breq	.+34     	; 0x1812 <TIMER2_voidScheduleTask+0x84>
    17f0:	89 89       	ldd	r24, Y+17	; 0x11
    17f2:	9a 89       	ldd	r25, Y+18	; 0x12
    17f4:	82 30       	cpi	r24, 0x02	; 2
    17f6:	91 05       	cpc	r25, r1
    17f8:	a9 f0       	breq	.+42     	; 0x1824 <TIMER2_voidScheduleTask+0x96>
    17fa:	37 c0       	rjmp	.+110    	; 0x186a <TIMER2_voidScheduleTask+0xdc>
    17fc:	e9 89       	ldd	r30, Y+17	; 0x11
    17fe:	fa 89       	ldd	r31, Y+18	; 0x12
    1800:	e4 30       	cpi	r30, 0x04	; 4
    1802:	f1 05       	cpc	r31, r1
    1804:	09 f1       	breq	.+66     	; 0x1848 <TIMER2_voidScheduleTask+0xba>
    1806:	29 89       	ldd	r18, Y+17	; 0x11
    1808:	3a 89       	ldd	r19, Y+18	; 0x12
    180a:	25 30       	cpi	r18, 0x05	; 5
    180c:	31 05       	cpc	r19, r1
    180e:	29 f1       	breq	.+74     	; 0x185a <TIMER2_voidScheduleTask+0xcc>
    1810:	2c c0       	rjmp	.+88     	; 0x186a <TIMER2_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a0 e0       	ldi	r26, 0x00	; 0
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	8d 83       	std	Y+5, r24	; 0x05
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	af 83       	std	Y+7, r26	; 0x07
    1820:	b8 87       	std	Y+8, r27	; 0x08
    1822:	23 c0       	rjmp	.+70     	; 0x186a <TIMER2_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    1824:	88 e0       	ldi	r24, 0x08	; 8
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a0 e0       	ldi	r26, 0x00	; 0
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	9e 83       	std	Y+6, r25	; 0x06
    1830:	af 83       	std	Y+7, r26	; 0x07
    1832:	b8 87       	std	Y+8, r27	; 0x08
    1834:	1a c0       	rjmp	.+52     	; 0x186a <TIMER2_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    1836:	80 e4       	ldi	r24, 0x40	; 64
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a0 e0       	ldi	r26, 0x00	; 0
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	8d 83       	std	Y+5, r24	; 0x05
    1840:	9e 83       	std	Y+6, r25	; 0x06
    1842:	af 83       	std	Y+7, r26	; 0x07
    1844:	b8 87       	std	Y+8, r27	; 0x08
    1846:	11 c0       	rjmp	.+34     	; 0x186a <TIMER2_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	91 e0       	ldi	r25, 0x01	; 1
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	af 83       	std	Y+7, r26	; 0x07
    1856:	b8 87       	std	Y+8, r27	; 0x08
    1858:	08 c0       	rjmp	.+16     	; 0x186a <TIMER2_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	94 e0       	ldi	r25, 0x04	; 4
    185e:	a0 e0       	ldi	r26, 0x00	; 0
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	8d 83       	std	Y+5, r24	; 0x05
    1864:	9e 83       	std	Y+6, r25	; 0x06
    1866:	af 83       	std	Y+7, r26	; 0x07
    1868:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    186a:	6b 85       	ldd	r22, Y+11	; 0x0b
    186c:	7c 85       	ldd	r23, Y+12	; 0x0c
    186e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1870:	9e 85       	ldd	r25, Y+14	; 0x0e
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	34 e2       	ldi	r19, 0x24	; 36
    1876:	44 ef       	ldi	r20, 0xF4	; 244
    1878:	5a e4       	ldi	r21, 0x4A	; 74
    187a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	7c 01       	movw	r14, r24
    1884:	8d 01       	movw	r16, r26
    1886:	6d 81       	ldd	r22, Y+5	; 0x05
    1888:	7e 81       	ldd	r23, Y+6	; 0x06
    188a:	8f 81       	ldd	r24, Y+7	; 0x07
    188c:	98 85       	ldd	r25, Y+8	; 0x08
    188e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1892:	9b 01       	movw	r18, r22
    1894:	ac 01       	movw	r20, r24
    1896:	c8 01       	movw	r24, r16
    1898:	b7 01       	movw	r22, r14
    189a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	9a 83       	std	Y+2, r25	; 0x02
    18a6:	ab 83       	std	Y+3, r26	; 0x03
    18a8:	bc 83       	std	Y+4, r27	; 0x04
		 *  fmod - function similar to modulus operator but designed to work
		 *  with floating point numbers, not just integers. it computes the
		 *  remainder of the diviion of one floating-point number by another.
		 * */

		if( (fmod(Local_f64Totalticks, 1.00) == 0.0)  &&  fmod(Local_f64Totalticks, 256.0) == 0.0){
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	9a 81       	ldd	r25, Y+2	; 0x02
    18ae:	ab 81       	ldd	r26, Y+3	; 0x03
    18b0:	bc 81       	ldd	r27, Y+4	; 0x04
    18b2:	bc 01       	movw	r22, r24
    18b4:	cd 01       	movw	r24, r26
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e8       	ldi	r20, 0x80	; 128
    18bc:	5f e3       	ldi	r21, 0x3F	; 63
    18be:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <fmod>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	18 8a       	std	Y+16, r1	; 0x10
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e0       	ldi	r20, 0x00	; 0
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    18d8:	88 23       	and	r24, r24
    18da:	11 f4       	brne	.+4      	; 0x18e0 <TIMER2_voidScheduleTask+0x152>
    18dc:	31 e0       	ldi	r19, 0x01	; 1
    18de:	38 8b       	std	Y+16, r19	; 0x10
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	98 89       	ldd	r25, Y+16	; 0x10
    18e4:	89 27       	eor	r24, r25
    18e6:	88 23       	and	r24, r24
    18e8:	d9 f5       	brne	.+118    	; 0x1960 <TIMER2_voidScheduleTask+0x1d2>
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
    18ee:	ab 81       	ldd	r26, Y+3	; 0x03
    18f0:	bc 81       	ldd	r27, Y+4	; 0x04
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	40 e8       	ldi	r20, 0x80	; 128
    18fc:	53 e4       	ldi	r21, 0x43	; 67
    18fe:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <fmod>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	1f 86       	std	Y+15, r1	; 0x0f
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	50 e0       	ldi	r21, 0x00	; 0
    1914:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1918:	88 23       	and	r24, r24
    191a:	11 f4       	brne	.+4      	; 0x1920 <TIMER2_voidScheduleTask+0x192>
    191c:	e1 e0       	ldi	r30, 0x01	; 1
    191e:	ef 87       	std	Y+15, r30	; 0x0f
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	ff 85       	ldd	r31, Y+15	; 0x0f
    1924:	8f 27       	eor	r24, r31
    1926:	88 23       	and	r24, r24
    1928:	d9 f4       	brne	.+54     	; 0x1960 <TIMER2_voidScheduleTask+0x1d2>
			TIMER2_TARGET_NTICKS = (uint32_t)(Local_f64Totalticks/256);
    192a:	69 81       	ldd	r22, Y+1	; 0x01
    192c:	7a 81       	ldd	r23, Y+2	; 0x02
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e8       	ldi	r20, 0x80	; 128
    1938:	53 e4       	ldi	r21, 0x43	; 67
    193a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	bc 01       	movw	r22, r24
    1944:	cd 01       	movw	r24, r26
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	80 93 9e 01 	sts	0x019E, r24
    1952:	90 93 9f 01 	sts	0x019F, r25
    1956:	a0 93 a0 01 	sts	0x01A0, r26
    195a:	b0 93 a1 01 	sts	0x01A1, r27
    195e:	39 c0       	rjmp	.+114    	; 0x19d2 <TIMER2_voidScheduleTask+0x244>
		}else{
			// It's floating Number, setting preload value

			TCNT2_REG = 256 - (uint32_t)(fmod(Local_f64Totalticks, 256.0));
    1960:	04 e4       	ldi	r16, 0x44	; 68
    1962:	10 e0       	ldi	r17, 0x00	; 0
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	9a 81       	ldd	r25, Y+2	; 0x02
    1968:	ab 81       	ldd	r26, Y+3	; 0x03
    196a:	bc 81       	ldd	r27, Y+4	; 0x04
    196c:	bc 01       	movw	r22, r24
    196e:	cd 01       	movw	r24, r26
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	53 e4       	ldi	r21, 0x43	; 67
    1978:	0e 94 ec 21 	call	0x43d8	; 0x43d8 <fmod>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	81 95       	neg	r24
    198e:	f8 01       	movw	r30, r16
    1990:	80 83       	st	Z, r24

			TIMER2_TARGET_NTICKS = (uint32_t)ceil(Local_f64Totalticks/256);
    1992:	69 81       	ldd	r22, Y+1	; 0x01
    1994:	7a 81       	ldd	r23, Y+2	; 0x02
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e8       	ldi	r20, 0x80	; 128
    19a0:	53 e4       	ldi	r21, 0x43	; 67
    19a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	bc 01       	movw	r22, r24
    19ac:	cd 01       	movw	r24, r26
    19ae:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <ceil>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	80 93 9e 01 	sts	0x019E, r24
    19c6:	90 93 9f 01 	sts	0x019F, r25
    19ca:	a0 93 a0 01 	sts	0x01A0, r26
    19ce:	b0 93 a1 01 	sts	0x01A1, r27
		}

	#endif


		TIMERS_ISR_Functions[2] = TaskCallback;
    19d2:	89 85       	ldd	r24, Y+9	; 0x09
    19d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d6:	90 93 99 01 	sts	0x0199, r25
    19da:	80 93 98 01 	sts	0x0198, r24
		TIMER2_voidStart();
    19de:	0e 94 ab 0b 	call	0x1756	; 0x1756 <TIMER2_voidStart>
	return 0;
    19e2:	80 e0       	ldi	r24, 0x00	; 0

}
    19e4:	62 96       	adiw	r28, 0x12	; 18
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	f8 94       	cli
    19ea:	de bf       	out	0x3e, r29	; 62
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	cd bf       	out	0x3d, r28	; 61
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	1f 91       	pop	r17
    19f6:	0f 91       	pop	r16
    19f8:	ff 90       	pop	r15
    19fa:	ef 90       	pop	r14
    19fc:	08 95       	ret

000019fe <__vector_11>:
/*******************************************************************************************************/

ISR(TIMER0_OVF_vect){
    19fe:	1f 92       	push	r1
    1a00:	0f 92       	push	r0
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	0f 92       	push	r0
    1a06:	11 24       	eor	r1, r1
    1a08:	2f 93       	push	r18
    1a0a:	3f 93       	push	r19
    1a0c:	4f 93       	push	r20
    1a0e:	5f 93       	push	r21
    1a10:	6f 93       	push	r22
    1a12:	7f 93       	push	r23
    1a14:	8f 93       	push	r24
    1a16:	9f 93       	push	r25
    1a18:	af 93       	push	r26
    1a1a:	bf 93       	push	r27
    1a1c:	ef 93       	push	r30
    1a1e:	ff 93       	push	r31
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    1a28:	80 91 8c 01 	lds	r24, 0x018C
    1a2c:	90 91 8d 01 	lds	r25, 0x018D
    1a30:	a0 91 8e 01 	lds	r26, 0x018E
    1a34:	b0 91 8f 01 	lds	r27, 0x018F
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	a1 1d       	adc	r26, r1
    1a3c:	b1 1d       	adc	r27, r1
    1a3e:	80 93 8c 01 	sts	0x018C, r24
    1a42:	90 93 8d 01 	sts	0x018D, r25
    1a46:	a0 93 8e 01 	sts	0x018E, r26
    1a4a:	b0 93 8f 01 	sts	0x018F, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    1a4e:	20 91 8c 01 	lds	r18, 0x018C
    1a52:	30 91 8d 01 	lds	r19, 0x018D
    1a56:	40 91 8e 01 	lds	r20, 0x018E
    1a5a:	50 91 8f 01 	lds	r21, 0x018F
    1a5e:	80 91 9a 01 	lds	r24, 0x019A
    1a62:	90 91 9b 01 	lds	r25, 0x019B
    1a66:	a0 91 9c 01 	lds	r26, 0x019C
    1a6a:	b0 91 9d 01 	lds	r27, 0x019D
    1a6e:	28 17       	cp	r18, r24
    1a70:	39 07       	cpc	r19, r25
    1a72:	4a 07       	cpc	r20, r26
    1a74:	5b 07       	cpc	r21, r27
    1a76:	68 f0       	brcs	.+26     	; 0x1a92 <__vector_11+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    1a78:	10 92 8c 01 	sts	0x018C, r1
    1a7c:	10 92 8d 01 	sts	0x018D, r1
    1a80:	10 92 8e 01 	sts	0x018E, r1
    1a84:	10 92 8f 01 	sts	0x018F, r1
		TIMERS_ISR_Functions[0]();
    1a88:	e0 91 94 01 	lds	r30, 0x0194
    1a8c:	f0 91 95 01 	lds	r31, 0x0195
    1a90:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	ff 91       	pop	r31
    1a98:	ef 91       	pop	r30
    1a9a:	bf 91       	pop	r27
    1a9c:	af 91       	pop	r26
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	7f 91       	pop	r23
    1aa4:	6f 91       	pop	r22
    1aa6:	5f 91       	pop	r21
    1aa8:	4f 91       	pop	r20
    1aaa:	3f 91       	pop	r19
    1aac:	2f 91       	pop	r18
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	0f 90       	pop	r0
    1ab4:	1f 90       	pop	r1
    1ab6:	18 95       	reti

00001ab8 <__vector_10>:

ISR(TIMER0_COMP_vect){
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	2f 93       	push	r18
    1ac4:	3f 93       	push	r19
    1ac6:	4f 93       	push	r20
    1ac8:	5f 93       	push	r21
    1aca:	6f 93       	push	r22
    1acc:	7f 93       	push	r23
    1ace:	8f 93       	push	r24
    1ad0:	9f 93       	push	r25
    1ad2:	af 93       	push	r26
    1ad4:	bf 93       	push	r27
    1ad6:	ef 93       	push	r30
    1ad8:	ff 93       	push	r31
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    1ae2:	80 91 8c 01 	lds	r24, 0x018C
    1ae6:	90 91 8d 01 	lds	r25, 0x018D
    1aea:	a0 91 8e 01 	lds	r26, 0x018E
    1aee:	b0 91 8f 01 	lds	r27, 0x018F
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	a1 1d       	adc	r26, r1
    1af6:	b1 1d       	adc	r27, r1
    1af8:	80 93 8c 01 	sts	0x018C, r24
    1afc:	90 93 8d 01 	sts	0x018D, r25
    1b00:	a0 93 8e 01 	sts	0x018E, r26
    1b04:	b0 93 8f 01 	sts	0x018F, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    1b08:	20 91 8c 01 	lds	r18, 0x018C
    1b0c:	30 91 8d 01 	lds	r19, 0x018D
    1b10:	40 91 8e 01 	lds	r20, 0x018E
    1b14:	50 91 8f 01 	lds	r21, 0x018F
    1b18:	80 91 9a 01 	lds	r24, 0x019A
    1b1c:	90 91 9b 01 	lds	r25, 0x019B
    1b20:	a0 91 9c 01 	lds	r26, 0x019C
    1b24:	b0 91 9d 01 	lds	r27, 0x019D
    1b28:	28 17       	cp	r18, r24
    1b2a:	39 07       	cpc	r19, r25
    1b2c:	4a 07       	cpc	r20, r26
    1b2e:	5b 07       	cpc	r21, r27
    1b30:	68 f0       	brcs	.+26     	; 0x1b4c <__vector_10+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    1b32:	10 92 8c 01 	sts	0x018C, r1
    1b36:	10 92 8d 01 	sts	0x018D, r1
    1b3a:	10 92 8e 01 	sts	0x018E, r1
    1b3e:	10 92 8f 01 	sts	0x018F, r1
		TIMERS_ISR_Functions[0]();
    1b42:	e0 91 94 01 	lds	r30, 0x0194
    1b46:	f0 91 95 01 	lds	r31, 0x0195
    1b4a:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	ff 91       	pop	r31
    1b52:	ef 91       	pop	r30
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	7f 91       	pop	r23
    1b5e:	6f 91       	pop	r22
    1b60:	5f 91       	pop	r21
    1b62:	4f 91       	pop	r20
    1b64:	3f 91       	pop	r19
    1b66:	2f 91       	pop	r18
    1b68:	0f 90       	pop	r0
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	0f 90       	pop	r0
    1b6e:	1f 90       	pop	r1
    1b70:	18 95       	reti

00001b72 <__vector_5>:

ISR(TIMER2_OVF_vect){
    1b72:	1f 92       	push	r1
    1b74:	0f 92       	push	r0
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	0f 92       	push	r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	2f 93       	push	r18
    1b7e:	3f 93       	push	r19
    1b80:	4f 93       	push	r20
    1b82:	5f 93       	push	r21
    1b84:	6f 93       	push	r22
    1b86:	7f 93       	push	r23
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	af 93       	push	r26
    1b8e:	bf 93       	push	r27
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    1b9c:	80 91 90 01 	lds	r24, 0x0190
    1ba0:	90 91 91 01 	lds	r25, 0x0191
    1ba4:	a0 91 92 01 	lds	r26, 0x0192
    1ba8:	b0 91 93 01 	lds	r27, 0x0193
    1bac:	01 96       	adiw	r24, 0x01	; 1
    1bae:	a1 1d       	adc	r26, r1
    1bb0:	b1 1d       	adc	r27, r1
    1bb2:	80 93 90 01 	sts	0x0190, r24
    1bb6:	90 93 91 01 	sts	0x0191, r25
    1bba:	a0 93 92 01 	sts	0x0192, r26
    1bbe:	b0 93 93 01 	sts	0x0193, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    1bc2:	20 91 90 01 	lds	r18, 0x0190
    1bc6:	30 91 91 01 	lds	r19, 0x0191
    1bca:	40 91 92 01 	lds	r20, 0x0192
    1bce:	50 91 93 01 	lds	r21, 0x0193
    1bd2:	80 91 9e 01 	lds	r24, 0x019E
    1bd6:	90 91 9f 01 	lds	r25, 0x019F
    1bda:	a0 91 a0 01 	lds	r26, 0x01A0
    1bde:	b0 91 a1 01 	lds	r27, 0x01A1
    1be2:	28 17       	cp	r18, r24
    1be4:	39 07       	cpc	r19, r25
    1be6:	4a 07       	cpc	r20, r26
    1be8:	5b 07       	cpc	r21, r27
    1bea:	68 f0       	brcs	.+26     	; 0x1c06 <__vector_5+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    1bec:	10 92 90 01 	sts	0x0190, r1
    1bf0:	10 92 91 01 	sts	0x0191, r1
    1bf4:	10 92 92 01 	sts	0x0192, r1
    1bf8:	10 92 93 01 	sts	0x0193, r1
		TIMERS_ISR_Functions[2]();
    1bfc:	e0 91 98 01 	lds	r30, 0x0198
    1c00:	f0 91 99 01 	lds	r31, 0x0199
    1c04:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything
}
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	bf 91       	pop	r27
    1c10:	af 91       	pop	r26
    1c12:	9f 91       	pop	r25
    1c14:	8f 91       	pop	r24
    1c16:	7f 91       	pop	r23
    1c18:	6f 91       	pop	r22
    1c1a:	5f 91       	pop	r21
    1c1c:	4f 91       	pop	r20
    1c1e:	3f 91       	pop	r19
    1c20:	2f 91       	pop	r18
    1c22:	0f 90       	pop	r0
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	0f 90       	pop	r0
    1c28:	1f 90       	pop	r1
    1c2a:	18 95       	reti

00001c2c <__vector_4>:

ISR(TIMER2_COMP_vect){
    1c2c:	1f 92       	push	r1
    1c2e:	0f 92       	push	r0
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	0f 92       	push	r0
    1c34:	11 24       	eor	r1, r1
    1c36:	2f 93       	push	r18
    1c38:	3f 93       	push	r19
    1c3a:	4f 93       	push	r20
    1c3c:	5f 93       	push	r21
    1c3e:	6f 93       	push	r22
    1c40:	7f 93       	push	r23
    1c42:	8f 93       	push	r24
    1c44:	9f 93       	push	r25
    1c46:	af 93       	push	r26
    1c48:	bf 93       	push	r27
    1c4a:	ef 93       	push	r30
    1c4c:	ff 93       	push	r31
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    1c56:	80 91 90 01 	lds	r24, 0x0190
    1c5a:	90 91 91 01 	lds	r25, 0x0191
    1c5e:	a0 91 92 01 	lds	r26, 0x0192
    1c62:	b0 91 93 01 	lds	r27, 0x0193
    1c66:	01 96       	adiw	r24, 0x01	; 1
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	b1 1d       	adc	r27, r1
    1c6c:	80 93 90 01 	sts	0x0190, r24
    1c70:	90 93 91 01 	sts	0x0191, r25
    1c74:	a0 93 92 01 	sts	0x0192, r26
    1c78:	b0 93 93 01 	sts	0x0193, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    1c7c:	20 91 90 01 	lds	r18, 0x0190
    1c80:	30 91 91 01 	lds	r19, 0x0191
    1c84:	40 91 92 01 	lds	r20, 0x0192
    1c88:	50 91 93 01 	lds	r21, 0x0193
    1c8c:	80 91 9e 01 	lds	r24, 0x019E
    1c90:	90 91 9f 01 	lds	r25, 0x019F
    1c94:	a0 91 a0 01 	lds	r26, 0x01A0
    1c98:	b0 91 a1 01 	lds	r27, 0x01A1
    1c9c:	28 17       	cp	r18, r24
    1c9e:	39 07       	cpc	r19, r25
    1ca0:	4a 07       	cpc	r20, r26
    1ca2:	5b 07       	cpc	r21, r27
    1ca4:	68 f0       	brcs	.+26     	; 0x1cc0 <__vector_4+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    1ca6:	10 92 90 01 	sts	0x0190, r1
    1caa:	10 92 91 01 	sts	0x0191, r1
    1cae:	10 92 92 01 	sts	0x0192, r1
    1cb2:	10 92 93 01 	sts	0x0193, r1
		TIMERS_ISR_Functions[2]();
    1cb6:	e0 91 98 01 	lds	r30, 0x0198
    1cba:	f0 91 99 01 	lds	r31, 0x0199
    1cbe:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything

}
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	ff 91       	pop	r31
    1cc6:	ef 91       	pop	r30
    1cc8:	bf 91       	pop	r27
    1cca:	af 91       	pop	r26
    1ccc:	9f 91       	pop	r25
    1cce:	8f 91       	pop	r24
    1cd0:	7f 91       	pop	r23
    1cd2:	6f 91       	pop	r22
    1cd4:	5f 91       	pop	r21
    1cd6:	4f 91       	pop	r20
    1cd8:	3f 91       	pop	r19
    1cda:	2f 91       	pop	r18
    1cdc:	0f 90       	pop	r0
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	0f 90       	pop	r0
    1ce2:	1f 90       	pop	r1
    1ce4:	18 95       	reti

00001ce6 <SPI_vidInit>:
#include "SPI_priv.h"
/************************************************************************************/



void SPI_vidInit(void){
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62

		SET_BIT(SPCR_REG, SPCR_MSTR);

	#elif(SPI_MODE == SPI_SLAVE_MODE)

		DIO_enuSetPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, DIO_u8OUTPUT);
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	66 e0       	ldi	r22, 0x06	; 6
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, DIO_u8INPUT);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	65 e0       	ldi	r22, 0x05	; 5
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>

		DIO_enuSetPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, DIO_u8INPUT);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	67 e0       	ldi	r22, 0x07	; 7
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_SS_PORT, SPI_SS_PIN, DIO_u8INPUT);
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	64 e0       	ldi	r22, 0x04	; 4
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>

		CLR_BIT(SPCR_REG, SPCR_MSTR);
    1d16:	ad e2       	ldi	r26, 0x2D	; 45
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	ed e2       	ldi	r30, 0x2D	; 45
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	8f 7e       	andi	r24, 0xEF	; 239
    1d22:	8c 93       	st	X, r24
	#endif


	//! Data order
	#if(SPI_DORD == SPI_DORD_MSB)
		SET_BIT(SPCR_REG, SPCR_DORD);
    1d24:	ad e2       	ldi	r26, 0x2D	; 45
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	ed e2       	ldi	r30, 0x2D	; 45
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	80 62       	ori	r24, 0x20	; 32
    1d30:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR0 );
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
		CLR_BIT(SPSR_REG, SPSR_SPI2x);

	#elif(SPI_PRES_SELECT == SPI_PRES_16)
		SET_BIT(SPCR_REG, SPCR_SPR0 );
    1d32:	ad e2       	ldi	r26, 0x2D	; 45
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	ed e2       	ldi	r30, 0x2D	; 45
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	81 60       	ori	r24, 0x01	; 1
    1d3e:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
    1d40:	ad e2       	ldi	r26, 0x2D	; 45
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	ed e2       	ldi	r30, 0x2D	; 45
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	8d 7f       	andi	r24, 0xFD	; 253
    1d4c:	8c 93       	st	X, r24
		CLR_BIT(SPSR_REG, SPSR_SPI2x);
    1d4e:	ae e2       	ldi	r26, 0x2E	; 46
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	ee e2       	ldi	r30, 0x2E	; 46
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	8e 7f       	andi	r24, 0xFE	; 254
    1d5a:	8c 93       	st	X, r24

	#endif


	/*	Enable SPI	*/
	SET_BIT(SPCR_REG, SPCR_SPE);
    1d5c:	ad e2       	ldi	r26, 0x2D	; 45
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	ed e2       	ldi	r30, 0x2D	; 45
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	80 64       	ori	r24, 0x40	; 64
    1d68:	8c 93       	st	X, r24
}
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <SPI_enuMasterTransmit_Char>:



ErrorStatus_t SPI_enuMasterTransmit_Char(uint8_t copy_u8Data){
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <SPI_enuMasterTransmit_Char+0xa>
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1d80:	19 82       	std	Y+1, r1	; 0x01
		SPDR_REG = copy_u8Data;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		SPDR_REG = flipBits(copy_u8Data);
    1d82:	0f e2       	ldi	r16, 0x2F	; 47
    1d84:	10 e0       	ldi	r17, 0x00	; 0
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <flipBits>
    1d8c:	f8 01       	movw	r30, r16
    1d8e:	80 83       	st	Z, r24
	#endif


	/*! Wait for transmission complete */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    1d90:	ee e2       	ldi	r30, 0x2E	; 46
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	88 23       	and	r24, r24
    1d98:	dc f7       	brge	.-10     	; 0x1d90 <SPI_enuMasterTransmit_Char+0x20>


	Local_enu_ErrorState = ERROR_STATUS_OK;
    1d9a:	81 e0       	ldi	r24, 0x01	; 1
    1d9c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	08 95       	ret

00001dae <SPI_enuMasterTransmit_String>:



ErrorStatus_t SPI_enuMasterTransmit_String(uint8_t* copy_pu8Data){
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <SPI_enuMasterTransmit_String+0x6>
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <SPI_enuMasterTransmit_String+0x8>
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	9b 83       	std	Y+3, r25	; 0x03
    1dbc:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1dbe:	19 82       	std	Y+1, r1	; 0x01


	if(copy_pu8Data == NULL){
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	19 f4       	brne	.+6      	; 0x1dce <SPI_enuMasterTransmit_String+0x20>
		return Local_enu_ErrorState;
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	8c 83       	std	Y+4, r24	; 0x04
    1dcc:	13 c0       	rjmp	.+38     	; 0x1df4 <SPI_enuMasterTransmit_String+0x46>

	}else{

		do{
			SPI_enuMasterTransmit_Char(*copy_pu8Data);
    1dce:	ea 81       	ldd	r30, Y+2	; 0x02
    1dd0:	fb 81       	ldd	r31, Y+3	; 0x03
    1dd2:	80 81       	ld	r24, Z
    1dd4:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <SPI_enuMasterTransmit_Char>
			copy_pu8Data++;
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	9b 83       	std	Y+3, r25	; 0x03
    1de0:	8a 83       	std	Y+2, r24	; 0x02
		}while(*copy_pu8Data != '\0');
    1de2:	ea 81       	ldd	r30, Y+2	; 0x02
    1de4:	fb 81       	ldd	r31, Y+3	; 0x03
    1de6:	80 81       	ld	r24, Z
    1de8:	88 23       	and	r24, r24
    1dea:	89 f7       	brne	.-30     	; 0x1dce <SPI_enuMasterTransmit_String+0x20>
	}

	Local_enu_ErrorState = ERROR_STATUS_OK;
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	8c 83       	std	Y+4, r24	; 0x04
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <SPI_enuSlaveReceive_Char>:



ErrorStatus_t SPI_enuSlaveReceive_Char(uint8_t* copy_pu8Data){
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <SPI_enuSlaveReceive_Char+0x6>
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	9b 83       	std	Y+3, r25	; 0x03
    1e12:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1e14:	19 82       	std	Y+1, r1	; 0x01


	/* Wait for successful reception of data from master */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    1e16:	ee e2       	ldi	r30, 0x2E	; 46
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	88 23       	and	r24, r24
    1e1e:	dc f7       	brge	.-10     	; 0x1e16 <SPI_enuSlaveReceive_Char+0x12>

	*copy_pu8Data = SPDR_REG;
    1e20:	ef e2       	ldi	r30, 0x2F	; 47
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	ea 81       	ldd	r30, Y+2	; 0x02
    1e28:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2a:	80 83       	st	Z, r24
		*copy_pu8Data = SPDR_REG;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		*copy_pu8Data= flipBits(SPDR_REG);
    1e2c:	ef e2       	ldi	r30, 0x2F	; 47
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <flipBits>
    1e36:	ea 81       	ldd	r30, Y+2	; 0x02
    1e38:	fb 81       	ldd	r31, Y+3	; 0x03
    1e3a:	80 83       	st	Z, r24
	#endif




	Local_enu_ErrorState = ERROR_STATUS_OK;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <SPI_enuSlaveReceive_String>:



ErrorStatus_t SPI_enuSlaveReceive_String(uint8_t* copy_pu8Data){
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	27 97       	sbiw	r28, 0x07	; 7
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	9d 83       	std	Y+5, r25	; 0x05
    1e64:	8c 83       	std	Y+4, r24	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1e66:	1b 82       	std	Y+3, r1	; 0x03


	if(copy_pu8Data == NULL){
    1e68:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	19 f4       	brne	.+6      	; 0x1e76 <SPI_enuSlaveReceive_String+0x28>
		return Local_enu_ErrorState;
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	8e 83       	std	Y+6, r24	; 0x06
    1e74:	1e c0       	rjmp	.+60     	; 0x1eb2 <SPI_enuSlaveReceive_String+0x64>
	}else{

		// Intiate head of buffer similar to linked-list idea
		uint8_t *Local_u8Temp = copy_pu8Data;
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7a:	9a 83       	std	Y+2, r25	; 0x02
    1e7c:	89 83       	std	Y+1, r24	; 0x01

		do{
			SPI_enuSlaveReceive_Char(Local_u8Temp);
    1e7e:	89 81       	ldd	r24, Y+1	; 0x01
    1e80:	9a 81       	ldd	r25, Y+2	; 0x02
    1e82:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <SPI_enuSlaveReceive_Char>


		}while(*(Local_u8Temp++) != '\0');
    1e86:	e9 81       	ldd	r30, Y+1	; 0x01
    1e88:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8a:	80 81       	ld	r24, Z
    1e8c:	8f 83       	std	Y+7, r24	; 0x07
    1e8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e90:	88 23       	and	r24, r24
    1e92:	11 f0       	breq	.+4      	; 0x1e98 <SPI_enuSlaveReceive_String+0x4a>
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	8f 83       	std	Y+7, r24	; 0x07
    1e98:	8f 81       	ldd	r24, Y+7	; 0x07
    1e9a:	29 81       	ldd	r18, Y+1	; 0x01
    1e9c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e9e:	2f 5f       	subi	r18, 0xFF	; 255
    1ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea2:	3a 83       	std	Y+2, r19	; 0x02
    1ea4:	29 83       	std	Y+1, r18	; 0x01
    1ea6:	88 23       	and	r24, r24
    1ea8:	51 f7       	brne	.-44     	; 0x1e7e <SPI_enuSlaveReceive_String+0x30>
	}


	Local_enu_ErrorState = ERROR_STATUS_OK;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enu_ErrorState;
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	8e 83       	std	Y+6, r24	; 0x06
    1eb2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1eb4:	27 96       	adiw	r28, 0x07	; 7
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <flipBits>:

static inline uint8_t flipBits(uint8_t byte) {
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	0f 92       	push	r0
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	82 95       	swap	r24
    1ed6:	8f 70       	andi	r24, 0x0F	; 15
    1ed8:	28 2f       	mov	r18, r24
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	82 95       	swap	r24
    1ee2:	92 95       	swap	r25
    1ee4:	90 7f       	andi	r25, 0xF0	; 240
    1ee6:	98 27       	eor	r25, r24
    1ee8:	80 7f       	andi	r24, 0xF0	; 240
    1eea:	98 27       	eor	r25, r24
    1eec:	82 2b       	or	r24, r18
    1eee:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	8c 7c       	andi	r24, 0xCC	; 204
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	95 95       	asr	r25
    1efc:	87 95       	ror	r24
    1efe:	95 95       	asr	r25
    1f00:	87 95       	ror	r24
    1f02:	28 2f       	mov	r18, r24
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	83 73       	andi	r24, 0x33	; 51
    1f0c:	90 70       	andi	r25, 0x00	; 0
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	82 2b       	or	r24, r18
    1f18:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	88 2f       	mov	r24, r24
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	8a 7a       	andi	r24, 0xAA	; 170
    1f22:	90 70       	andi	r25, 0x00	; 0
    1f24:	95 95       	asr	r25
    1f26:	87 95       	ror	r24
    1f28:	28 2f       	mov	r18, r24
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	85 75       	andi	r24, 0x55	; 85
    1f32:	90 70       	andi	r25, 0x00	; 0
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	82 2b       	or	r24, r18
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    return byte;
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	0f 92       	push	r0
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1f50:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
    1f52:	ef e5       	ldi	r30, 0x5F	; 95
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	88 23       	and	r24, r24
    1f5a:	4c f0       	brlt	.+18     	; 0x1f6e <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
    1f5c:	af e5       	ldi	r26, 0x5F	; 95
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	ef e5       	ldi	r30, 0x5F	; 95
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	80 68       	ori	r24, 0x80	; 128
    1f68:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f70:	0f 90       	pop	r0
    1f72:	cf 91       	pop	r28
    1f74:	df 91       	pop	r29
    1f76:	08 95       	ret

00001f78 <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	0f 92       	push	r0
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    1f82:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
    1f84:	ef e5       	ldi	r30, 0x5F	; 95
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	88 23       	and	r24, r24
    1f8c:	4c f4       	brge	.+18     	; 0x1fa0 <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
    1f8e:	af e5       	ldi	r26, 0x5F	; 95
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	ef e5       	ldi	r30, 0x5F	; 95
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	8f 77       	andi	r24, 0x7F	; 127
    1f9a:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa2:	0f 90       	pop	r0
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	2a 97       	sbiw	r28, 0x0a	; 10
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	9b 83       	std	Y+3, r25	; 0x03
    1fc0:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    1fc2:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	19 f4       	brne	.+6      	; 0x1fd2 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
    1fcc:	29 81       	ldd	r18, Y+1	; 0x01
    1fce:	2a 87       	std	Y+10, r18	; 0x0a
    1fd0:	36 c1       	rjmp	.+620    	; 0x223e <EXTI_enuInit+0x294>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_ENABLED){
    1fd2:	ea 81       	ldd	r30, Y+2	; 0x02
    1fd4:	fb 81       	ldd	r31, Y+3	; 0x03
    1fd6:	80 81       	ld	r24, Z
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	09 f0       	breq	.+2      	; 0x1fde <EXTI_enuInit+0x34>
    1fdc:	64 c0       	rjmp	.+200    	; 0x20a6 <EXTI_enuInit+0xfc>

			SET_BIT(GICR, INT0_switch);
    1fde:	ab e5       	ldi	r26, 0x5B	; 91
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	eb e5       	ldi	r30, 0x5B	; 91
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	80 64       	ori	r24, 0x40	; 64
    1fea:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_0].Sence_Level){
    1fec:	ea 81       	ldd	r30, Y+2	; 0x02
    1fee:	fb 81       	ldd	r31, Y+3	; 0x03
    1ff0:	81 81       	ldd	r24, Z+1	; 0x01
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	39 87       	std	Y+9, r19	; 0x09
    1ff8:	28 87       	std	Y+8, r18	; 0x08
    1ffa:	88 85       	ldd	r24, Y+8	; 0x08
    1ffc:	99 85       	ldd	r25, Y+9	; 0x09
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	91 05       	cpc	r25, r1
    2002:	21 f1       	breq	.+72     	; 0x204c <EXTI_enuInit+0xa2>
    2004:	28 85       	ldd	r18, Y+8	; 0x08
    2006:	39 85       	ldd	r19, Y+9	; 0x09
    2008:	22 30       	cpi	r18, 0x02	; 2
    200a:	31 05       	cpc	r19, r1
    200c:	2c f4       	brge	.+10     	; 0x2018 <EXTI_enuInit+0x6e>
    200e:	88 85       	ldd	r24, Y+8	; 0x08
    2010:	99 85       	ldd	r25, Y+9	; 0x09
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	61 f0       	breq	.+24     	; 0x202e <EXTI_enuInit+0x84>
    2016:	53 c0       	rjmp	.+166    	; 0x20be <EXTI_enuInit+0x114>
    2018:	28 85       	ldd	r18, Y+8	; 0x08
    201a:	39 85       	ldd	r19, Y+9	; 0x09
    201c:	22 30       	cpi	r18, 0x02	; 2
    201e:	31 05       	cpc	r19, r1
    2020:	21 f1       	breq	.+72     	; 0x206a <EXTI_enuInit+0xc0>
    2022:	88 85       	ldd	r24, Y+8	; 0x08
    2024:	99 85       	ldd	r25, Y+9	; 0x09
    2026:	83 30       	cpi	r24, 0x03	; 3
    2028:	91 05       	cpc	r25, r1
    202a:	71 f1       	breq	.+92     	; 0x2088 <EXTI_enuInit+0xde>
    202c:	48 c0       	rjmp	.+144    	; 0x20be <EXTI_enuInit+0x114>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
    202e:	a5 e5       	ldi	r26, 0x55	; 85
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e5 e5       	ldi	r30, 0x55	; 85
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	8e 7f       	andi	r24, 0xFE	; 254
    203a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    203c:	a5 e5       	ldi	r26, 0x55	; 85
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	e5 e5       	ldi	r30, 0x55	; 85
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	8d 7f       	andi	r24, 0xFD	; 253
    2048:	8c 93       	st	X, r24
    204a:	39 c0       	rjmp	.+114    	; 0x20be <EXTI_enuInit+0x114>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
    204c:	a5 e5       	ldi	r26, 0x55	; 85
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e5 e5       	ldi	r30, 0x55	; 85
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	81 60       	ori	r24, 0x01	; 1
    2058:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    205a:	a5 e5       	ldi	r26, 0x55	; 85
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e5 e5       	ldi	r30, 0x55	; 85
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	8d 7f       	andi	r24, 0xFD	; 253
    2066:	8c 93       	st	X, r24
    2068:	2a c0       	rjmp	.+84     	; 0x20be <EXTI_enuInit+0x114>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
    206a:	a5 e5       	ldi	r26, 0x55	; 85
    206c:	b0 e0       	ldi	r27, 0x00	; 0
    206e:	e5 e5       	ldi	r30, 0x55	; 85
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z
    2074:	8e 7f       	andi	r24, 0xFE	; 254
    2076:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    2078:	a5 e5       	ldi	r26, 0x55	; 85
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e5 e5       	ldi	r30, 0x55	; 85
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	82 60       	ori	r24, 0x02	; 2
    2084:	8c 93       	st	X, r24
    2086:	1b c0       	rjmp	.+54     	; 0x20be <EXTI_enuInit+0x114>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
    2088:	a5 e5       	ldi	r26, 0x55	; 85
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	e5 e5       	ldi	r30, 0x55	; 85
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	80 81       	ld	r24, Z
    2092:	81 60       	ori	r24, 0x01	; 1
    2094:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    2096:	a5 e5       	ldi	r26, 0x55	; 85
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e5 e5       	ldi	r30, 0x55	; 85
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	82 60       	ori	r24, 0x02	; 2
    20a2:	8c 93       	st	X, r24
    20a4:	0c c0       	rjmp	.+24     	; 0x20be <EXTI_enuInit+0x114>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_DISABLED){
    20a6:	ea 81       	ldd	r30, Y+2	; 0x02
    20a8:	fb 81       	ldd	r31, Y+3	; 0x03
    20aa:	80 81       	ld	r24, Z
    20ac:	88 23       	and	r24, r24
    20ae:	39 f4       	brne	.+14     	; 0x20be <EXTI_enuInit+0x114>

			CLR_BIT(GICR, INT0_switch);
    20b0:	ab e5       	ldi	r26, 0x5B	; 91
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	eb e5       	ldi	r30, 0x5B	; 91
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	8f 7b       	andi	r24, 0xBF	; 191
    20bc:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_ENABLED){
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	9b 81       	ldd	r25, Y+3	; 0x03
    20c2:	fc 01       	movw	r30, r24
    20c4:	32 96       	adiw	r30, 0x02	; 2
    20c6:	80 81       	ld	r24, Z
    20c8:	81 30       	cpi	r24, 0x01	; 1
    20ca:	09 f0       	breq	.+2      	; 0x20ce <EXTI_enuInit+0x124>
    20cc:	66 c0       	rjmp	.+204    	; 0x219a <EXTI_enuInit+0x1f0>

			SET_BIT(GICR, INT1_switch);
    20ce:	ab e5       	ldi	r26, 0x5B	; 91
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	eb e5       	ldi	r30, 0x5B	; 91
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	80 68       	ori	r24, 0x80	; 128
    20da:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT_NO_1].Sence_Level){
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	fc 01       	movw	r30, r24
    20e2:	32 96       	adiw	r30, 0x02	; 2
    20e4:	81 81       	ldd	r24, Z+1	; 0x01
    20e6:	28 2f       	mov	r18, r24
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	3f 83       	std	Y+7, r19	; 0x07
    20ec:	2e 83       	std	Y+6, r18	; 0x06
    20ee:	8e 81       	ldd	r24, Y+6	; 0x06
    20f0:	9f 81       	ldd	r25, Y+7	; 0x07
    20f2:	81 30       	cpi	r24, 0x01	; 1
    20f4:	91 05       	cpc	r25, r1
    20f6:	21 f1       	breq	.+72     	; 0x2140 <EXTI_enuInit+0x196>
    20f8:	2e 81       	ldd	r18, Y+6	; 0x06
    20fa:	3f 81       	ldd	r19, Y+7	; 0x07
    20fc:	22 30       	cpi	r18, 0x02	; 2
    20fe:	31 05       	cpc	r19, r1
    2100:	2c f4       	brge	.+10     	; 0x210c <EXTI_enuInit+0x162>
    2102:	8e 81       	ldd	r24, Y+6	; 0x06
    2104:	9f 81       	ldd	r25, Y+7	; 0x07
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	61 f0       	breq	.+24     	; 0x2122 <EXTI_enuInit+0x178>
    210a:	55 c0       	rjmp	.+170    	; 0x21b6 <EXTI_enuInit+0x20c>
    210c:	2e 81       	ldd	r18, Y+6	; 0x06
    210e:	3f 81       	ldd	r19, Y+7	; 0x07
    2110:	22 30       	cpi	r18, 0x02	; 2
    2112:	31 05       	cpc	r19, r1
    2114:	21 f1       	breq	.+72     	; 0x215e <EXTI_enuInit+0x1b4>
    2116:	8e 81       	ldd	r24, Y+6	; 0x06
    2118:	9f 81       	ldd	r25, Y+7	; 0x07
    211a:	83 30       	cpi	r24, 0x03	; 3
    211c:	91 05       	cpc	r25, r1
    211e:	71 f1       	breq	.+92     	; 0x217c <EXTI_enuInit+0x1d2>
    2120:	4a c0       	rjmp	.+148    	; 0x21b6 <EXTI_enuInit+0x20c>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
    2122:	a5 e5       	ldi	r26, 0x55	; 85
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e5 e5       	ldi	r30, 0x55	; 85
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	8b 7f       	andi	r24, 0xFB	; 251
    212e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    2130:	a5 e5       	ldi	r26, 0x55	; 85
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e5 e5       	ldi	r30, 0x55	; 85
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	87 7f       	andi	r24, 0xF7	; 247
    213c:	8c 93       	st	X, r24
    213e:	3b c0       	rjmp	.+118    	; 0x21b6 <EXTI_enuInit+0x20c>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
    2140:	a5 e5       	ldi	r26, 0x55	; 85
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e5 e5       	ldi	r30, 0x55	; 85
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	84 60       	ori	r24, 0x04	; 4
    214c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    214e:	a5 e5       	ldi	r26, 0x55	; 85
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e5 e5       	ldi	r30, 0x55	; 85
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	87 7f       	andi	r24, 0xF7	; 247
    215a:	8c 93       	st	X, r24
    215c:	2c c0       	rjmp	.+88     	; 0x21b6 <EXTI_enuInit+0x20c>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
    215e:	a5 e5       	ldi	r26, 0x55	; 85
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e5 e5       	ldi	r30, 0x55	; 85
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	8b 7f       	andi	r24, 0xFB	; 251
    216a:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    216c:	a5 e5       	ldi	r26, 0x55	; 85
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e5 e5       	ldi	r30, 0x55	; 85
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	88 60       	ori	r24, 0x08	; 8
    2178:	8c 93       	st	X, r24
    217a:	1d c0       	rjmp	.+58     	; 0x21b6 <EXTI_enuInit+0x20c>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
    217c:	a5 e5       	ldi	r26, 0x55	; 85
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e5 e5       	ldi	r30, 0x55	; 85
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	84 60       	ori	r24, 0x04	; 4
    2188:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    218a:	a5 e5       	ldi	r26, 0x55	; 85
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e5 e5       	ldi	r30, 0x55	; 85
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	88 60       	ori	r24, 0x08	; 8
    2196:	8c 93       	st	X, r24
    2198:	0e c0       	rjmp	.+28     	; 0x21b6 <EXTI_enuInit+0x20c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_DISABLED){
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	9b 81       	ldd	r25, Y+3	; 0x03
    219e:	fc 01       	movw	r30, r24
    21a0:	32 96       	adiw	r30, 0x02	; 2
    21a2:	80 81       	ld	r24, Z
    21a4:	88 23       	and	r24, r24
    21a6:	39 f4       	brne	.+14     	; 0x21b6 <EXTI_enuInit+0x20c>

			CLR_BIT(GICR, INT1_switch);
    21a8:	ab e5       	ldi	r26, 0x5B	; 91
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	eb e5       	ldi	r30, 0x5B	; 91
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	8f 77       	andi	r24, 0x7F	; 127
    21b4:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_ENABLED){
    21b6:	8a 81       	ldd	r24, Y+2	; 0x02
    21b8:	9b 81       	ldd	r25, Y+3	; 0x03
    21ba:	fc 01       	movw	r30, r24
    21bc:	34 96       	adiw	r30, 0x04	; 4
    21be:	80 81       	ld	r24, Z
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	59 f5       	brne	.+86     	; 0x221a <EXTI_enuInit+0x270>

			SET_BIT(GICR, INT2_switch);
    21c4:	ab e5       	ldi	r26, 0x5B	; 91
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	eb e5       	ldi	r30, 0x5B	; 91
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	80 62       	ori	r24, 0x20	; 32
    21d0:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_2].Sence_Level){
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	fc 01       	movw	r30, r24
    21d8:	34 96       	adiw	r30, 0x04	; 4
    21da:	81 81       	ldd	r24, Z+1	; 0x01
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	3d 83       	std	Y+5, r19	; 0x05
    21e2:	2c 83       	std	Y+4, r18	; 0x04
    21e4:	8c 81       	ldd	r24, Y+4	; 0x04
    21e6:	9d 81       	ldd	r25, Y+5	; 0x05
    21e8:	82 30       	cpi	r24, 0x02	; 2
    21ea:	91 05       	cpc	r25, r1
    21ec:	31 f0       	breq	.+12     	; 0x21fa <EXTI_enuInit+0x250>
    21ee:	2c 81       	ldd	r18, Y+4	; 0x04
    21f0:	3d 81       	ldd	r19, Y+5	; 0x05
    21f2:	23 30       	cpi	r18, 0x03	; 3
    21f4:	31 05       	cpc	r19, r1
    21f6:	49 f0       	breq	.+18     	; 0x220a <EXTI_enuInit+0x260>
    21f8:	1e c0       	rjmp	.+60     	; 0x2236 <EXTI_enuInit+0x28c>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
    21fa:	a4 e5       	ldi	r26, 0x54	; 84
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e4 e5       	ldi	r30, 0x54	; 84
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
    2204:	8f 7b       	andi	r24, 0xBF	; 191
    2206:	8c 93       	st	X, r24
    2208:	16 c0       	rjmp	.+44     	; 0x2236 <EXTI_enuInit+0x28c>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
    220a:	a4 e5       	ldi	r26, 0x54	; 84
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e4 e5       	ldi	r30, 0x54	; 84
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 64       	ori	r24, 0x40	; 64
    2216:	8c 93       	st	X, r24
    2218:	0e c0       	rjmp	.+28     	; 0x2236 <EXTI_enuInit+0x28c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_DISABLED){
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	9b 81       	ldd	r25, Y+3	; 0x03
    221e:	fc 01       	movw	r30, r24
    2220:	34 96       	adiw	r30, 0x04	; 4
    2222:	80 81       	ld	r24, Z
    2224:	88 23       	and	r24, r24
    2226:	39 f4       	brne	.+14     	; 0x2236 <EXTI_enuInit+0x28c>

			CLR_BIT(GICR, INT2_switch);
    2228:	ab e5       	ldi	r26, 0x5B	; 91
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	eb e5       	ldi	r30, 0x5B	; 91
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	8f 7d       	andi	r24, 0xDF	; 223
    2234:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    223a:	39 81       	ldd	r19, Y+1	; 0x01
    223c:	3a 87       	std	Y+10, r19	; 0x0a
    223e:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2240:	2a 96       	adiw	r28, 0x0a	; 10
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <EXTI_enuEnableInterrupt>:

ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
    2252:	df 93       	push	r29
    2254:	cf 93       	push	r28
    2256:	00 d0       	rcall	.+0      	; 0x2258 <EXTI_enuEnableInterrupt+0x6>
    2258:	00 d0       	rcall	.+0      	; 0x225a <EXTI_enuEnableInterrupt+0x8>
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2260:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	3c 83       	std	Y+4, r19	; 0x04
    226a:	2b 83       	std	Y+3, r18	; 0x03
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	81 30       	cpi	r24, 0x01	; 1
    2272:	91 05       	cpc	r25, r1
    2274:	89 f0       	breq	.+34     	; 0x2298 <EXTI_enuEnableInterrupt+0x46>
    2276:	2b 81       	ldd	r18, Y+3	; 0x03
    2278:	3c 81       	ldd	r19, Y+4	; 0x04
    227a:	22 30       	cpi	r18, 0x02	; 2
    227c:	31 05       	cpc	r19, r1
    227e:	a1 f0       	breq	.+40     	; 0x22a8 <EXTI_enuEnableInterrupt+0x56>
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	9c 81       	ldd	r25, Y+4	; 0x04
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	b9 f4       	brne	.+46     	; 0x22b6 <EXTI_enuEnableInterrupt+0x64>
			case INT_NO_0:

				SET_BIT(GICR, INT0_switch);
    2288:	ab e5       	ldi	r26, 0x5B	; 91
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	eb e5       	ldi	r30, 0x5B	; 91
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	80 64       	ori	r24, 0x40	; 64
    2294:	8c 93       	st	X, r24
    2296:	0f c0       	rjmp	.+30     	; 0x22b6 <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_1:

				SET_BIT(GICR, INT1_switch);
    2298:	ab e5       	ldi	r26, 0x5B	; 91
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	eb e5       	ldi	r30, 0x5B	; 91
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	80 68       	ori	r24, 0x80	; 128
    22a4:	8c 93       	st	X, r24
    22a6:	07 c0       	rjmp	.+14     	; 0x22b6 <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_2:

				SET_BIT(GICR, INT2_switch);
    22a8:	ab e5       	ldi	r26, 0x5B	; 91
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	eb e5       	ldi	r30, 0x5B	; 91
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	80 62       	ori	r24, 0x20	; 32
    22b4:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <EXTI_enuDisableInterrupt>:

ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <EXTI_enuDisableInterrupt+0x6>
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <EXTI_enuDisableInterrupt+0x8>
    22d2:	0f 92       	push	r0
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    22da:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT_NO_2){
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	83 30       	cpi	r24, 0x03	; 3
    22e0:	18 f0       	brcs	.+6      	; 0x22e8 <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
    22e2:	29 81       	ldd	r18, Y+1	; 0x01
    22e4:	2d 83       	std	Y+5, r18	; 0x05
    22e6:	2e c0       	rjmp	.+92     	; 0x2344 <EXTI_enuDisableInterrupt+0x7a>
	}

	else{

		switch(Copy_u8IntNumber){
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	3c 83       	std	Y+4, r19	; 0x04
    22f0:	2b 83       	std	Y+3, r18	; 0x03
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	91 05       	cpc	r25, r1
    22fa:	89 f0       	breq	.+34     	; 0x231e <EXTI_enuDisableInterrupt+0x54>
    22fc:	2b 81       	ldd	r18, Y+3	; 0x03
    22fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2300:	22 30       	cpi	r18, 0x02	; 2
    2302:	31 05       	cpc	r19, r1
    2304:	a1 f0       	breq	.+40     	; 0x232e <EXTI_enuDisableInterrupt+0x64>
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	b9 f4       	brne	.+46     	; 0x233c <EXTI_enuDisableInterrupt+0x72>
		case INT_NO_0:

			
			GICR &= ~(1<<INT0_switch);
    230e:	ab e5       	ldi	r26, 0x5B	; 91
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	eb e5       	ldi	r30, 0x5B	; 91
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	8f 7b       	andi	r24, 0xBF	; 191
    231a:	8c 93       	st	X, r24
    231c:	0f c0       	rjmp	.+30     	; 0x233c <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_1:

			GICR &= ~(1<<INT1_switch);
    231e:	ab e5       	ldi	r26, 0x5B	; 91
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	eb e5       	ldi	r30, 0x5B	; 91
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	8f 77       	andi	r24, 0x7F	; 127
    232a:	8c 93       	st	X, r24
    232c:	07 c0       	rjmp	.+14     	; 0x233c <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_2:

			GICR &= ~(1<<INT2_switch);
    232e:	ab e5       	ldi	r26, 0x5B	; 91
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	eb e5       	ldi	r30, 0x5B	; 91
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	8f 7d       	andi	r24, 0xDF	; 223
    233a:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    2340:	99 81       	ldd	r25, Y+1	; 0x01
    2342:	9d 83       	std	Y+5, r25	; 0x05
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	2c 97       	sbiw	r28, 0x0c	; 12
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    236e:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT_NO_2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	83 30       	cpi	r24, 0x03	; 3
    2374:	18 f4       	brcc	.+6      	; 0x237c <EXTI_enuSetSenseLevel+0x26>
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	84 30       	cpi	r24, 0x04	; 4
    237a:	18 f0       	brcs	.+6      	; 0x2382 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
    237c:	29 81       	ldd	r18, Y+1	; 0x01
    237e:	2c 87       	std	Y+12, r18	; 0x0c
    2380:	ef c0       	rjmp	.+478    	; 0x2560 <EXTI_enuSetSenseLevel+0x20a>
	}

	else{

		switch(Copy_u8IntNumber){
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	28 2f       	mov	r18, r24
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	3b 87       	std	Y+11, r19	; 0x0b
    238a:	2a 87       	std	Y+10, r18	; 0x0a
    238c:	8a 85       	ldd	r24, Y+10	; 0x0a
    238e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2390:	81 30       	cpi	r24, 0x01	; 1
    2392:	91 05       	cpc	r25, r1
    2394:	09 f4       	brne	.+2      	; 0x2398 <EXTI_enuSetSenseLevel+0x42>
    2396:	66 c0       	rjmp	.+204    	; 0x2464 <EXTI_enuSetSenseLevel+0x10e>
    2398:	2a 85       	ldd	r18, Y+10	; 0x0a
    239a:	3b 85       	ldd	r19, Y+11	; 0x0b
    239c:	22 30       	cpi	r18, 0x02	; 2
    239e:	31 05       	cpc	r19, r1
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <EXTI_enuSetSenseLevel+0x4e>
    23a2:	bb c0       	rjmp	.+374    	; 0x251a <EXTI_enuSetSenseLevel+0x1c4>
    23a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    23a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	09 f0       	breq	.+2      	; 0x23ae <EXTI_enuSetSenseLevel+0x58>
    23ac:	d5 c0       	rjmp	.+426    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>
		case INT_NO_0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	39 87       	std	Y+9, r19	; 0x09
    23b6:	28 87       	std	Y+8, r18	; 0x08
    23b8:	88 85       	ldd	r24, Y+8	; 0x08
    23ba:	99 85       	ldd	r25, Y+9	; 0x09
    23bc:	81 30       	cpi	r24, 0x01	; 1
    23be:	91 05       	cpc	r25, r1
    23c0:	a9 f0       	breq	.+42     	; 0x23ec <EXTI_enuSetSenseLevel+0x96>
    23c2:	28 85       	ldd	r18, Y+8	; 0x08
    23c4:	39 85       	ldd	r19, Y+9	; 0x09
    23c6:	22 30       	cpi	r18, 0x02	; 2
    23c8:	31 05       	cpc	r19, r1
    23ca:	2c f4       	brge	.+10     	; 0x23d6 <EXTI_enuSetSenseLevel+0x80>
    23cc:	88 85       	ldd	r24, Y+8	; 0x08
    23ce:	99 85       	ldd	r25, Y+9	; 0x09
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	d9 f0       	breq	.+54     	; 0x240a <EXTI_enuSetSenseLevel+0xb4>
    23d4:	c1 c0       	rjmp	.+386    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>
    23d6:	28 85       	ldd	r18, Y+8	; 0x08
    23d8:	39 85       	ldd	r19, Y+9	; 0x09
    23da:	22 30       	cpi	r18, 0x02	; 2
    23dc:	31 05       	cpc	r19, r1
    23de:	21 f1       	breq	.+72     	; 0x2428 <EXTI_enuSetSenseLevel+0xd2>
    23e0:	88 85       	ldd	r24, Y+8	; 0x08
    23e2:	99 85       	ldd	r25, Y+9	; 0x09
    23e4:	83 30       	cpi	r24, 0x03	; 3
    23e6:	91 05       	cpc	r25, r1
    23e8:	71 f1       	breq	.+92     	; 0x2446 <EXTI_enuSetSenseLevel+0xf0>
    23ea:	b6 c0       	rjmp	.+364    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
    23ec:	a5 e5       	ldi	r26, 0x55	; 85
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e5 e5       	ldi	r30, 0x55	; 85
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	81 60       	ori	r24, 0x01	; 1
    23f8:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    23fa:	a5 e5       	ldi	r26, 0x55	; 85
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e5 e5       	ldi	r30, 0x55	; 85
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	8d 7f       	andi	r24, 0xFD	; 253
    2406:	8c 93       	st	X, r24
    2408:	a7 c0       	rjmp	.+334    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    240a:	a5 e5       	ldi	r26, 0x55	; 85
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e5 e5       	ldi	r30, 0x55	; 85
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	8e 7f       	andi	r24, 0xFE	; 254
    2416:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    2418:	a5 e5       	ldi	r26, 0x55	; 85
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e5 e5       	ldi	r30, 0x55	; 85
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	8d 7f       	andi	r24, 0xFD	; 253
    2424:	8c 93       	st	X, r24
    2426:	98 c0       	rjmp	.+304    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    2428:	a5 e5       	ldi	r26, 0x55	; 85
    242a:	b0 e0       	ldi	r27, 0x00	; 0
    242c:	e5 e5       	ldi	r30, 0x55	; 85
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	80 81       	ld	r24, Z
    2432:	8e 7f       	andi	r24, 0xFE	; 254
    2434:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    2436:	a5 e5       	ldi	r26, 0x55	; 85
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e5 e5       	ldi	r30, 0x55	; 85
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	82 60       	ori	r24, 0x02	; 2
    2442:	8c 93       	st	X, r24
    2444:	89 c0       	rjmp	.+274    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    2446:	a5 e5       	ldi	r26, 0x55	; 85
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e5 e5       	ldi	r30, 0x55	; 85
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	81 60       	ori	r24, 0x01	; 1
    2452:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    2454:	a5 e5       	ldi	r26, 0x55	; 85
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e5 e5       	ldi	r30, 0x55	; 85
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	82 60       	ori	r24, 0x02	; 2
    2460:	8c 93       	st	X, r24
    2462:	7a c0       	rjmp	.+244    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>
			/**************************************************/

		case INT_NO_1:

			/**************** 1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	3f 83       	std	Y+7, r19	; 0x07
    246c:	2e 83       	std	Y+6, r18	; 0x06
    246e:	8e 81       	ldd	r24, Y+6	; 0x06
    2470:	9f 81       	ldd	r25, Y+7	; 0x07
    2472:	81 30       	cpi	r24, 0x01	; 1
    2474:	91 05       	cpc	r25, r1
    2476:	a9 f0       	breq	.+42     	; 0x24a2 <EXTI_enuSetSenseLevel+0x14c>
    2478:	2e 81       	ldd	r18, Y+6	; 0x06
    247a:	3f 81       	ldd	r19, Y+7	; 0x07
    247c:	22 30       	cpi	r18, 0x02	; 2
    247e:	31 05       	cpc	r19, r1
    2480:	2c f4       	brge	.+10     	; 0x248c <EXTI_enuSetSenseLevel+0x136>
    2482:	8e 81       	ldd	r24, Y+6	; 0x06
    2484:	9f 81       	ldd	r25, Y+7	; 0x07
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	d9 f0       	breq	.+54     	; 0x24c0 <EXTI_enuSetSenseLevel+0x16a>
    248a:	66 c0       	rjmp	.+204    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>
    248c:	2e 81       	ldd	r18, Y+6	; 0x06
    248e:	3f 81       	ldd	r19, Y+7	; 0x07
    2490:	22 30       	cpi	r18, 0x02	; 2
    2492:	31 05       	cpc	r19, r1
    2494:	21 f1       	breq	.+72     	; 0x24de <EXTI_enuSetSenseLevel+0x188>
    2496:	8e 81       	ldd	r24, Y+6	; 0x06
    2498:	9f 81       	ldd	r25, Y+7	; 0x07
    249a:	83 30       	cpi	r24, 0x03	; 3
    249c:	91 05       	cpc	r25, r1
    249e:	71 f1       	breq	.+92     	; 0x24fc <EXTI_enuSetSenseLevel+0x1a6>
    24a0:	5b c0       	rjmp	.+182    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    24a2:	a5 e5       	ldi	r26, 0x55	; 85
    24a4:	b0 e0       	ldi	r27, 0x00	; 0
    24a6:	e5 e5       	ldi	r30, 0x55	; 85
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	80 81       	ld	r24, Z
    24ac:	84 60       	ori	r24, 0x04	; 4
    24ae:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    24b0:	a5 e5       	ldi	r26, 0x55	; 85
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e5 e5       	ldi	r30, 0x55	; 85
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	87 7f       	andi	r24, 0xF7	; 247
    24bc:	8c 93       	st	X, r24
    24be:	4c c0       	rjmp	.+152    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    24c0:	a5 e5       	ldi	r26, 0x55	; 85
    24c2:	b0 e0       	ldi	r27, 0x00	; 0
    24c4:	e5 e5       	ldi	r30, 0x55	; 85
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	8b 7f       	andi	r24, 0xFB	; 251
    24cc:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    24ce:	a5 e5       	ldi	r26, 0x55	; 85
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	e5 e5       	ldi	r30, 0x55	; 85
    24d4:	f0 e0       	ldi	r31, 0x00	; 0
    24d6:	80 81       	ld	r24, Z
    24d8:	87 7f       	andi	r24, 0xF7	; 247
    24da:	8c 93       	st	X, r24
    24dc:	3d c0       	rjmp	.+122    	; 0x2558 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    24de:	a5 e5       	ldi	r26, 0x55	; 85
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e5 e5       	ldi	r30, 0x55	; 85
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	8b 7f       	andi	r24, 0xFB	; 251
    24ea:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    24ec:	a5 e5       	ldi	r26, 0x55	; 85
    24ee:	b0 e0       	ldi	r27, 0x00	; 0
    24f0:	e5 e5       	ldi	r30, 0x55	; 85
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	88 60       	ori	r24, 0x08	; 8
    24f8:	8c 93       	st	X, r24
    24fa:	2e c0       	rjmp	.+92     	; 0x2558 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    24fc:	a5 e5       	ldi	r26, 0x55	; 85
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e5 e5       	ldi	r30, 0x55	; 85
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	84 60       	ori	r24, 0x04	; 4
    2508:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    250a:	a5 e5       	ldi	r26, 0x55	; 85
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e5 e5       	ldi	r30, 0x55	; 85
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	88 60       	ori	r24, 0x08	; 8
    2516:	8c 93       	st	X, r24
    2518:	1f c0       	rjmp	.+62     	; 0x2558 <EXTI_enuSetSenseLevel+0x202>


		case INT_NO_2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	28 2f       	mov	r18, r24
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	3d 83       	std	Y+5, r19	; 0x05
    2522:	2c 83       	std	Y+4, r18	; 0x04
    2524:	8c 81       	ldd	r24, Y+4	; 0x04
    2526:	9d 81       	ldd	r25, Y+5	; 0x05
    2528:	82 30       	cpi	r24, 0x02	; 2
    252a:	91 05       	cpc	r25, r1
    252c:	31 f0       	breq	.+12     	; 0x253a <EXTI_enuSetSenseLevel+0x1e4>
    252e:	2c 81       	ldd	r18, Y+4	; 0x04
    2530:	3d 81       	ldd	r19, Y+5	; 0x05
    2532:	23 30       	cpi	r18, 0x03	; 3
    2534:	31 05       	cpc	r19, r1
    2536:	49 f0       	breq	.+18     	; 0x254a <EXTI_enuSetSenseLevel+0x1f4>
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <EXTI_enuSetSenseLevel+0x202>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    253a:	a4 e5       	ldi	r26, 0x54	; 84
    253c:	b0 e0       	ldi	r27, 0x00	; 0
    253e:	e4 e5       	ldi	r30, 0x54	; 84
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	8f 7b       	andi	r24, 0xBF	; 191
    2546:	8c 93       	st	X, r24
    2548:	07 c0       	rjmp	.+14     	; 0x2558 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    254a:	a4 e5       	ldi	r26, 0x54	; 84
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e4 e5       	ldi	r30, 0x54	; 84
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	80 64       	ori	r24, 0x40	; 64
    2556:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    255c:	39 81       	ldd	r19, Y+1	; 0x01
    255e:	3c 87       	std	Y+12, r19	; 0x0c
    2560:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2562:	2c 96       	adiw	r28, 0x0c	; 12
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	00 d0       	rcall	.+0      	; 0x257a <EXTI_enuSetCallBack+0x6>
    257a:	00 d0       	rcall	.+0      	; 0x257c <EXTI_enuSetCallBack+0x8>
    257c:	0f 92       	push	r0
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	9b 83       	std	Y+3, r25	; 0x03
    2584:	8a 83       	std	Y+2, r24	; 0x02
    2586:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2588:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	9b 81       	ldd	r25, Y+3	; 0x03
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	29 f4       	brne	.+10     	; 0x259c <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	18 c0       	rjmp	.+48     	; 0x25cc <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT_NO_2){
    259c:	8c 81       	ldd	r24, Y+4	; 0x04
    259e:	83 30       	cpi	r24, 0x03	; 3
    25a0:	28 f0       	brcs	.+10     	; 0x25ac <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    25a2:	84 e0       	ldi	r24, 0x04	; 4
    25a4:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	10 c0       	rjmp	.+32     	; 0x25cc <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    25ac:	8c 81       	ldd	r24, Y+4	; 0x04
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	fc 01       	movw	r30, r24
    25b8:	ee 55       	subi	r30, 0x5E	; 94
    25ba:	fe 4f       	sbci	r31, 0xFE	; 254
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	8d 83       	std	Y+5, r24	; 0x05
    25cc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <__vector_1>:


ISR(INT0_vect){
    25de:	1f 92       	push	r1
    25e0:	0f 92       	push	r0
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	0f 92       	push	r0
    25e6:	11 24       	eor	r1, r1
    25e8:	2f 93       	push	r18
    25ea:	3f 93       	push	r19
    25ec:	4f 93       	push	r20
    25ee:	5f 93       	push	r21
    25f0:	6f 93       	push	r22
    25f2:	7f 93       	push	r23
    25f4:	8f 93       	push	r24
    25f6:	9f 93       	push	r25
    25f8:	af 93       	push	r26
    25fa:	bf 93       	push	r27
    25fc:	ef 93       	push	r30
    25fe:	ff 93       	push	r31
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_0] != NULL){
    2608:	80 91 a2 01 	lds	r24, 0x01A2
    260c:	90 91 a3 01 	lds	r25, 0x01A3
    2610:	00 97       	sbiw	r24, 0x00	; 0
    2612:	29 f0       	breq	.+10     	; 0x261e <__vector_1+0x40>
			EXTI_pfunISRFun[INT_NO_0]();
    2614:	e0 91 a2 01 	lds	r30, 0x01A2
    2618:	f0 91 a3 01 	lds	r31, 0x01A3
    261c:	09 95       	icall
		}
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	ff 91       	pop	r31
    2624:	ef 91       	pop	r30
    2626:	bf 91       	pop	r27
    2628:	af 91       	pop	r26
    262a:	9f 91       	pop	r25
    262c:	8f 91       	pop	r24
    262e:	7f 91       	pop	r23
    2630:	6f 91       	pop	r22
    2632:	5f 91       	pop	r21
    2634:	4f 91       	pop	r20
    2636:	3f 91       	pop	r19
    2638:	2f 91       	pop	r18
    263a:	0f 90       	pop	r0
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	0f 90       	pop	r0
    2640:	1f 90       	pop	r1
    2642:	18 95       	reti

00002644 <__vector_2>:




ISR(INT1_vect){
    2644:	1f 92       	push	r1
    2646:	0f 92       	push	r0
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	0f 92       	push	r0
    264c:	11 24       	eor	r1, r1
    264e:	2f 93       	push	r18
    2650:	3f 93       	push	r19
    2652:	4f 93       	push	r20
    2654:	5f 93       	push	r21
    2656:	6f 93       	push	r22
    2658:	7f 93       	push	r23
    265a:	8f 93       	push	r24
    265c:	9f 93       	push	r25
    265e:	af 93       	push	r26
    2660:	bf 93       	push	r27
    2662:	ef 93       	push	r30
    2664:	ff 93       	push	r31
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	cd b7       	in	r28, 0x3d	; 61
    266c:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_1] != NULL){
    266e:	80 91 a4 01 	lds	r24, 0x01A4
    2672:	90 91 a5 01 	lds	r25, 0x01A5
    2676:	00 97       	sbiw	r24, 0x00	; 0
    2678:	29 f0       	breq	.+10     	; 0x2684 <__vector_2+0x40>
			EXTI_pfunISRFun[INT_NO_1]();
    267a:	e0 91 a4 01 	lds	r30, 0x01A4
    267e:	f0 91 a5 01 	lds	r31, 0x01A5
    2682:	09 95       	icall
		}
}
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	ff 91       	pop	r31
    268a:	ef 91       	pop	r30
    268c:	bf 91       	pop	r27
    268e:	af 91       	pop	r26
    2690:	9f 91       	pop	r25
    2692:	8f 91       	pop	r24
    2694:	7f 91       	pop	r23
    2696:	6f 91       	pop	r22
    2698:	5f 91       	pop	r21
    269a:	4f 91       	pop	r20
    269c:	3f 91       	pop	r19
    269e:	2f 91       	pop	r18
    26a0:	0f 90       	pop	r0
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	0f 90       	pop	r0
    26a6:	1f 90       	pop	r1
    26a8:	18 95       	reti

000026aa <__vector_3>:



ISR(INT2_vect){
    26aa:	1f 92       	push	r1
    26ac:	0f 92       	push	r0
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	0f 92       	push	r0
    26b2:	11 24       	eor	r1, r1
    26b4:	2f 93       	push	r18
    26b6:	3f 93       	push	r19
    26b8:	4f 93       	push	r20
    26ba:	5f 93       	push	r21
    26bc:	6f 93       	push	r22
    26be:	7f 93       	push	r23
    26c0:	8f 93       	push	r24
    26c2:	9f 93       	push	r25
    26c4:	af 93       	push	r26
    26c6:	bf 93       	push	r27
    26c8:	ef 93       	push	r30
    26ca:	ff 93       	push	r31
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_2] != NULL){
    26d4:	80 91 a6 01 	lds	r24, 0x01A6
    26d8:	90 91 a7 01 	lds	r25, 0x01A7
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	29 f0       	breq	.+10     	; 0x26ea <__vector_3+0x40>
			EXTI_pfunISRFun[INT_NO_2]();
    26e0:	e0 91 a6 01 	lds	r30, 0x01A6
    26e4:	f0 91 a7 01 	lds	r31, 0x01A7
    26e8:	09 95       	icall
		}
}
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	ff 91       	pop	r31
    26f0:	ef 91       	pop	r30
    26f2:	bf 91       	pop	r27
    26f4:	af 91       	pop	r26
    26f6:	9f 91       	pop	r25
    26f8:	8f 91       	pop	r24
    26fa:	7f 91       	pop	r23
    26fc:	6f 91       	pop	r22
    26fe:	5f 91       	pop	r21
    2700:	4f 91       	pop	r20
    2702:	3f 91       	pop	r19
    2704:	2f 91       	pop	r18
    2706:	0f 90       	pop	r0
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	0f 90       	pop	r0
    270c:	1f 90       	pop	r1
    270e:	18 95       	reti

00002710 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	0f 92       	push	r0
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    271a:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    271c:	ea e3       	ldi	r30, 0x3A	; 58
    271e:	f0 e0       	ldi	r31, 0x00	; 0
    2720:	80 ef       	ldi	r24, 0xF0	; 240
    2722:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    2724:	eb e3       	ldi	r30, 0x3B	; 59
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	83 ec       	ldi	r24, 0xC3	; 195
    272a:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    272c:	e7 e3       	ldi	r30, 0x37	; 55
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 ef       	ldi	r24, 0xF0	; 240
    2732:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    2734:	e8 e3       	ldi	r30, 0x38	; 56
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	83 ec       	ldi	r24, 0xC3	; 195
    273a:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    273c:	e4 e3       	ldi	r30, 0x34	; 52
    273e:	f0 e0       	ldi	r31, 0x00	; 0
    2740:	80 ef       	ldi	r24, 0xF0	; 240
    2742:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    2744:	e5 e3       	ldi	r30, 0x35	; 53
    2746:	f0 e0       	ldi	r31, 0x00	; 0
    2748:	83 ec       	ldi	r24, 0xC3	; 195
    274a:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    274c:	e1 e3       	ldi	r30, 0x31	; 49
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 ef       	ldi	r24, 0xF0	; 240
    2752:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    2754:	e2 e3       	ldi	r30, 0x32	; 50
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	83 ec       	ldi	r24, 0xC3	; 195
    275a:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    275c:	89 81       	ldd	r24, Y+1	; 0x01
}
    275e:	0f 90       	pop	r0
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	27 97       	sbiw	r28, 0x07	; 7
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	8a 83       	std	Y+2, r24	; 0x02
    277c:	6b 83       	std	Y+3, r22	; 0x03
    277e:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2780:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	84 30       	cpi	r24, 0x04	; 4
    2786:	08 f0       	brcs	.+2      	; 0x278a <DIO_enuSetPinDirection+0x24>
    2788:	de c0       	rjmp	.+444    	; 0x2946 <DIO_enuSetPinDirection+0x1e0>
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	88 30       	cpi	r24, 0x08	; 8
    278e:	08 f0       	brcs	.+2      	; 0x2792 <DIO_enuSetPinDirection+0x2c>
    2790:	da c0       	rjmp	.+436    	; 0x2946 <DIO_enuSetPinDirection+0x1e0>
    2792:	8c 81       	ldd	r24, Y+4	; 0x04
    2794:	82 30       	cpi	r24, 0x02	; 2
    2796:	08 f0       	brcs	.+2      	; 0x279a <DIO_enuSetPinDirection+0x34>
    2798:	d6 c0       	rjmp	.+428    	; 0x2946 <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    279a:	8a 81       	ldd	r24, Y+2	; 0x02
    279c:	28 2f       	mov	r18, r24
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	3f 83       	std	Y+7, r19	; 0x07
    27a2:	2e 83       	std	Y+6, r18	; 0x06
    27a4:	8e 81       	ldd	r24, Y+6	; 0x06
    27a6:	9f 81       	ldd	r25, Y+7	; 0x07
    27a8:	81 30       	cpi	r24, 0x01	; 1
    27aa:	91 05       	cpc	r25, r1
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <DIO_enuSetPinDirection+0x4a>
    27ae:	43 c0       	rjmp	.+134    	; 0x2836 <DIO_enuSetPinDirection+0xd0>
    27b0:	2e 81       	ldd	r18, Y+6	; 0x06
    27b2:	3f 81       	ldd	r19, Y+7	; 0x07
    27b4:	22 30       	cpi	r18, 0x02	; 2
    27b6:	31 05       	cpc	r19, r1
    27b8:	2c f4       	brge	.+10     	; 0x27c4 <DIO_enuSetPinDirection+0x5e>
    27ba:	8e 81       	ldd	r24, Y+6	; 0x06
    27bc:	9f 81       	ldd	r25, Y+7	; 0x07
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	71 f0       	breq	.+28     	; 0x27de <DIO_enuSetPinDirection+0x78>
    27c2:	bc c0       	rjmp	.+376    	; 0x293c <DIO_enuSetPinDirection+0x1d6>
    27c4:	2e 81       	ldd	r18, Y+6	; 0x06
    27c6:	3f 81       	ldd	r19, Y+7	; 0x07
    27c8:	22 30       	cpi	r18, 0x02	; 2
    27ca:	31 05       	cpc	r19, r1
    27cc:	09 f4       	brne	.+2      	; 0x27d0 <DIO_enuSetPinDirection+0x6a>
    27ce:	5f c0       	rjmp	.+190    	; 0x288e <DIO_enuSetPinDirection+0x128>
    27d0:	8e 81       	ldd	r24, Y+6	; 0x06
    27d2:	9f 81       	ldd	r25, Y+7	; 0x07
    27d4:	83 30       	cpi	r24, 0x03	; 3
    27d6:	91 05       	cpc	r25, r1
    27d8:	09 f4       	brne	.+2      	; 0x27dc <DIO_enuSetPinDirection+0x76>
    27da:	85 c0       	rjmp	.+266    	; 0x28e6 <DIO_enuSetPinDirection+0x180>
    27dc:	af c0       	rjmp	.+350    	; 0x293c <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    27de:	8c 81       	ldd	r24, Y+4	; 0x04
    27e0:	81 30       	cpi	r24, 0x01	; 1
    27e2:	a1 f4       	brne	.+40     	; 0x280c <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    27e4:	aa e3       	ldi	r26, 0x3A	; 58
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	ea e3       	ldi	r30, 0x3A	; 58
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	48 2f       	mov	r20, r24
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	02 2e       	mov	r0, r18
    27fc:	02 c0       	rjmp	.+4      	; 0x2802 <DIO_enuSetPinDirection+0x9c>
    27fe:	88 0f       	add	r24, r24
    2800:	99 1f       	adc	r25, r25
    2802:	0a 94       	dec	r0
    2804:	e2 f7       	brpl	.-8      	; 0x27fe <DIO_enuSetPinDirection+0x98>
    2806:	84 2b       	or	r24, r20
    2808:	8c 93       	st	X, r24
    280a:	98 c0       	rjmp	.+304    	; 0x293c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    280c:	aa e3       	ldi	r26, 0x3A	; 58
    280e:	b0 e0       	ldi	r27, 0x00	; 0
    2810:	ea e3       	ldi	r30, 0x3A	; 58
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	48 2f       	mov	r20, r24
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	02 2e       	mov	r0, r18
    2824:	02 c0       	rjmp	.+4      	; 0x282a <DIO_enuSetPinDirection+0xc4>
    2826:	88 0f       	add	r24, r24
    2828:	99 1f       	adc	r25, r25
    282a:	0a 94       	dec	r0
    282c:	e2 f7       	brpl	.-8      	; 0x2826 <DIO_enuSetPinDirection+0xc0>
    282e:	80 95       	com	r24
    2830:	84 23       	and	r24, r20
    2832:	8c 93       	st	X, r24
    2834:	83 c0       	rjmp	.+262    	; 0x293c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2836:	8c 81       	ldd	r24, Y+4	; 0x04
    2838:	81 30       	cpi	r24, 0x01	; 1
    283a:	a1 f4       	brne	.+40     	; 0x2864 <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    283c:	a7 e3       	ldi	r26, 0x37	; 55
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e7 e3       	ldi	r30, 0x37	; 55
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	48 2f       	mov	r20, r24
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	02 2e       	mov	r0, r18
    2854:	02 c0       	rjmp	.+4      	; 0x285a <DIO_enuSetPinDirection+0xf4>
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	0a 94       	dec	r0
    285c:	e2 f7       	brpl	.-8      	; 0x2856 <DIO_enuSetPinDirection+0xf0>
    285e:	84 2b       	or	r24, r20
    2860:	8c 93       	st	X, r24
    2862:	6c c0       	rjmp	.+216    	; 0x293c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    2864:	a7 e3       	ldi	r26, 0x37	; 55
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e7 e3       	ldi	r30, 0x37	; 55
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	48 2f       	mov	r20, r24
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	02 2e       	mov	r0, r18
    287c:	02 c0       	rjmp	.+4      	; 0x2882 <DIO_enuSetPinDirection+0x11c>
    287e:	88 0f       	add	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	0a 94       	dec	r0
    2884:	e2 f7       	brpl	.-8      	; 0x287e <DIO_enuSetPinDirection+0x118>
    2886:	80 95       	com	r24
    2888:	84 23       	and	r24, r20
    288a:	8c 93       	st	X, r24
    288c:	57 c0       	rjmp	.+174    	; 0x293c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    288e:	8c 81       	ldd	r24, Y+4	; 0x04
    2890:	81 30       	cpi	r24, 0x01	; 1
    2892:	a1 f4       	brne	.+40     	; 0x28bc <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    2894:	a4 e3       	ldi	r26, 0x34	; 52
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e4 e3       	ldi	r30, 0x34	; 52
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	48 2f       	mov	r20, r24
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	28 2f       	mov	r18, r24
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	02 2e       	mov	r0, r18
    28ac:	02 c0       	rjmp	.+4      	; 0x28b2 <DIO_enuSetPinDirection+0x14c>
    28ae:	88 0f       	add	r24, r24
    28b0:	99 1f       	adc	r25, r25
    28b2:	0a 94       	dec	r0
    28b4:	e2 f7       	brpl	.-8      	; 0x28ae <DIO_enuSetPinDirection+0x148>
    28b6:	84 2b       	or	r24, r20
    28b8:	8c 93       	st	X, r24
    28ba:	40 c0       	rjmp	.+128    	; 0x293c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    28bc:	a4 e3       	ldi	r26, 0x34	; 52
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e4 e3       	ldi	r30, 0x34	; 52
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	48 2f       	mov	r20, r24
    28c8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ca:	28 2f       	mov	r18, r24
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	02 2e       	mov	r0, r18
    28d4:	02 c0       	rjmp	.+4      	; 0x28da <DIO_enuSetPinDirection+0x174>
    28d6:	88 0f       	add	r24, r24
    28d8:	99 1f       	adc	r25, r25
    28da:	0a 94       	dec	r0
    28dc:	e2 f7       	brpl	.-8      	; 0x28d6 <DIO_enuSetPinDirection+0x170>
    28de:	80 95       	com	r24
    28e0:	84 23       	and	r24, r20
    28e2:	8c 93       	st	X, r24
    28e4:	2b c0       	rjmp	.+86     	; 0x293c <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    28e6:	8c 81       	ldd	r24, Y+4	; 0x04
    28e8:	81 30       	cpi	r24, 0x01	; 1
    28ea:	a1 f4       	brne	.+40     	; 0x2914 <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    28ec:	a1 e3       	ldi	r26, 0x31	; 49
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e1 e3       	ldi	r30, 0x31	; 49
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	48 2f       	mov	r20, r24
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	28 2f       	mov	r18, r24
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	81 e0       	ldi	r24, 0x01	; 1
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	02 2e       	mov	r0, r18
    2904:	02 c0       	rjmp	.+4      	; 0x290a <DIO_enuSetPinDirection+0x1a4>
    2906:	88 0f       	add	r24, r24
    2908:	99 1f       	adc	r25, r25
    290a:	0a 94       	dec	r0
    290c:	e2 f7       	brpl	.-8      	; 0x2906 <DIO_enuSetPinDirection+0x1a0>
    290e:	84 2b       	or	r24, r20
    2910:	8c 93       	st	X, r24
    2912:	14 c0       	rjmp	.+40     	; 0x293c <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    2914:	a1 e3       	ldi	r26, 0x31	; 49
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e1 e3       	ldi	r30, 0x31	; 49
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	48 2f       	mov	r20, r24
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	28 2f       	mov	r18, r24
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	81 e0       	ldi	r24, 0x01	; 1
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	02 2e       	mov	r0, r18
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <DIO_enuSetPinDirection+0x1cc>
    292e:	88 0f       	add	r24, r24
    2930:	99 1f       	adc	r25, r25
    2932:	0a 94       	dec	r0
    2934:	e2 f7       	brpl	.-8      	; 0x292e <DIO_enuSetPinDirection+0x1c8>
    2936:	80 95       	com	r24
    2938:	84 23       	and	r24, r20
    293a:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    2940:	99 81       	ldd	r25, Y+1	; 0x01
    2942:	9d 83       	std	Y+5, r25	; 0x05
    2944:	02 c0       	rjmp	.+4      	; 0x294a <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    2946:	29 81       	ldd	r18, Y+1	; 0x01
    2948:	2d 83       	std	Y+5, r18	; 0x05
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    294c:	27 96       	adiw	r28, 0x07	; 7
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	27 97       	sbiw	r28, 0x07	; 7
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	8a 83       	std	Y+2, r24	; 0x02
    2974:	6b 83       	std	Y+3, r22	; 0x03
    2976:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2978:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	84 30       	cpi	r24, 0x04	; 4
    297e:	08 f0       	brcs	.+2      	; 0x2982 <DIO_enuSetPinValue+0x24>
    2980:	de c0       	rjmp	.+444    	; 0x2b3e <DIO_enuSetPinValue+0x1e0>
    2982:	8b 81       	ldd	r24, Y+3	; 0x03
    2984:	88 30       	cpi	r24, 0x08	; 8
    2986:	08 f0       	brcs	.+2      	; 0x298a <DIO_enuSetPinValue+0x2c>
    2988:	da c0       	rjmp	.+436    	; 0x2b3e <DIO_enuSetPinValue+0x1e0>
    298a:	8c 81       	ldd	r24, Y+4	; 0x04
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	08 f0       	brcs	.+2      	; 0x2992 <DIO_enuSetPinValue+0x34>
    2990:	d6 c0       	rjmp	.+428    	; 0x2b3e <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    2992:	8a 81       	ldd	r24, Y+2	; 0x02
    2994:	28 2f       	mov	r18, r24
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	3f 83       	std	Y+7, r19	; 0x07
    299a:	2e 83       	std	Y+6, r18	; 0x06
    299c:	8e 81       	ldd	r24, Y+6	; 0x06
    299e:	9f 81       	ldd	r25, Y+7	; 0x07
    29a0:	81 30       	cpi	r24, 0x01	; 1
    29a2:	91 05       	cpc	r25, r1
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <DIO_enuSetPinValue+0x4a>
    29a6:	43 c0       	rjmp	.+134    	; 0x2a2e <DIO_enuSetPinValue+0xd0>
    29a8:	2e 81       	ldd	r18, Y+6	; 0x06
    29aa:	3f 81       	ldd	r19, Y+7	; 0x07
    29ac:	22 30       	cpi	r18, 0x02	; 2
    29ae:	31 05       	cpc	r19, r1
    29b0:	2c f4       	brge	.+10     	; 0x29bc <DIO_enuSetPinValue+0x5e>
    29b2:	8e 81       	ldd	r24, Y+6	; 0x06
    29b4:	9f 81       	ldd	r25, Y+7	; 0x07
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	71 f0       	breq	.+28     	; 0x29d6 <DIO_enuSetPinValue+0x78>
    29ba:	bc c0       	rjmp	.+376    	; 0x2b34 <DIO_enuSetPinValue+0x1d6>
    29bc:	2e 81       	ldd	r18, Y+6	; 0x06
    29be:	3f 81       	ldd	r19, Y+7	; 0x07
    29c0:	22 30       	cpi	r18, 0x02	; 2
    29c2:	31 05       	cpc	r19, r1
    29c4:	09 f4       	brne	.+2      	; 0x29c8 <DIO_enuSetPinValue+0x6a>
    29c6:	5f c0       	rjmp	.+190    	; 0x2a86 <DIO_enuSetPinValue+0x128>
    29c8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ca:	9f 81       	ldd	r25, Y+7	; 0x07
    29cc:	83 30       	cpi	r24, 0x03	; 3
    29ce:	91 05       	cpc	r25, r1
    29d0:	09 f4       	brne	.+2      	; 0x29d4 <DIO_enuSetPinValue+0x76>
    29d2:	85 c0       	rjmp	.+266    	; 0x2ade <DIO_enuSetPinValue+0x180>
    29d4:	af c0       	rjmp	.+350    	; 0x2b34 <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    29d6:	8c 81       	ldd	r24, Y+4	; 0x04
    29d8:	88 23       	and	r24, r24
    29da:	a1 f0       	breq	.+40     	; 0x2a04 <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    29dc:	ab e3       	ldi	r26, 0x3B	; 59
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	eb e3       	ldi	r30, 0x3B	; 59
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	48 2f       	mov	r20, r24
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	02 2e       	mov	r0, r18
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <DIO_enuSetPinValue+0x9c>
    29f6:	88 0f       	add	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	0a 94       	dec	r0
    29fc:	e2 f7       	brpl	.-8      	; 0x29f6 <DIO_enuSetPinValue+0x98>
    29fe:	84 2b       	or	r24, r20
    2a00:	8c 93       	st	X, r24
    2a02:	98 c0       	rjmp	.+304    	; 0x2b34 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    2a04:	ab e3       	ldi	r26, 0x3B	; 59
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	eb e3       	ldi	r30, 0x3B	; 59
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	48 2f       	mov	r20, r24
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	28 2f       	mov	r18, r24
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	02 2e       	mov	r0, r18
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <DIO_enuSetPinValue+0xc4>
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	0a 94       	dec	r0
    2a24:	e2 f7       	brpl	.-8      	; 0x2a1e <DIO_enuSetPinValue+0xc0>
    2a26:	80 95       	com	r24
    2a28:	84 23       	and	r24, r20
    2a2a:	8c 93       	st	X, r24
    2a2c:	83 c0       	rjmp	.+262    	; 0x2b34 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    2a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a30:	88 23       	and	r24, r24
    2a32:	a1 f0       	breq	.+40     	; 0x2a5c <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    2a34:	a8 e3       	ldi	r26, 0x38	; 56
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e8 e3       	ldi	r30, 0x38	; 56
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	48 2f       	mov	r20, r24
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	02 2e       	mov	r0, r18
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <DIO_enuSetPinValue+0xf4>
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	0a 94       	dec	r0
    2a54:	e2 f7       	brpl	.-8      	; 0x2a4e <DIO_enuSetPinValue+0xf0>
    2a56:	84 2b       	or	r24, r20
    2a58:	8c 93       	st	X, r24
    2a5a:	6c c0       	rjmp	.+216    	; 0x2b34 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    2a5c:	a8 e3       	ldi	r26, 0x38	; 56
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e8 e3       	ldi	r30, 0x38	; 56
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	48 2f       	mov	r20, r24
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	02 2e       	mov	r0, r18
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <DIO_enuSetPinValue+0x11c>
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	0a 94       	dec	r0
    2a7c:	e2 f7       	brpl	.-8      	; 0x2a76 <DIO_enuSetPinValue+0x118>
    2a7e:	80 95       	com	r24
    2a80:	84 23       	and	r24, r20
    2a82:	8c 93       	st	X, r24
    2a84:	57 c0       	rjmp	.+174    	; 0x2b34 <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    2a86:	8c 81       	ldd	r24, Y+4	; 0x04
    2a88:	88 23       	and	r24, r24
    2a8a:	a1 f0       	breq	.+40     	; 0x2ab4 <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    2a8c:	a5 e3       	ldi	r26, 0x35	; 53
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e5 e3       	ldi	r30, 0x35	; 53
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	48 2f       	mov	r20, r24
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	02 2e       	mov	r0, r18
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <DIO_enuSetPinValue+0x14c>
    2aa6:	88 0f       	add	r24, r24
    2aa8:	99 1f       	adc	r25, r25
    2aaa:	0a 94       	dec	r0
    2aac:	e2 f7       	brpl	.-8      	; 0x2aa6 <DIO_enuSetPinValue+0x148>
    2aae:	84 2b       	or	r24, r20
    2ab0:	8c 93       	st	X, r24
    2ab2:	40 c0       	rjmp	.+128    	; 0x2b34 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    2ab4:	a5 e3       	ldi	r26, 0x35	; 53
    2ab6:	b0 e0       	ldi	r27, 0x00	; 0
    2ab8:	e5 e3       	ldi	r30, 0x35	; 53
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	48 2f       	mov	r20, r24
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	28 2f       	mov	r18, r24
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	02 2e       	mov	r0, r18
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <DIO_enuSetPinValue+0x174>
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	0a 94       	dec	r0
    2ad4:	e2 f7       	brpl	.-8      	; 0x2ace <DIO_enuSetPinValue+0x170>
    2ad6:	80 95       	com	r24
    2ad8:	84 23       	and	r24, r20
    2ada:	8c 93       	st	X, r24
    2adc:	2b c0       	rjmp	.+86     	; 0x2b34 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    2ade:	8c 81       	ldd	r24, Y+4	; 0x04
    2ae0:	88 23       	and	r24, r24
    2ae2:	a1 f0       	breq	.+40     	; 0x2b0c <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    2ae4:	a2 e3       	ldi	r26, 0x32	; 50
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e2 e3       	ldi	r30, 0x32	; 50
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	80 81       	ld	r24, Z
    2aee:	48 2f       	mov	r20, r24
    2af0:	8b 81       	ldd	r24, Y+3	; 0x03
    2af2:	28 2f       	mov	r18, r24
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	02 2e       	mov	r0, r18
    2afc:	02 c0       	rjmp	.+4      	; 0x2b02 <DIO_enuSetPinValue+0x1a4>
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	0a 94       	dec	r0
    2b04:	e2 f7       	brpl	.-8      	; 0x2afe <DIO_enuSetPinValue+0x1a0>
    2b06:	84 2b       	or	r24, r20
    2b08:	8c 93       	st	X, r24
    2b0a:	14 c0       	rjmp	.+40     	; 0x2b34 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    2b0c:	a2 e3       	ldi	r26, 0x32	; 50
    2b0e:	b0 e0       	ldi	r27, 0x00	; 0
    2b10:	e2 e3       	ldi	r30, 0x32	; 50
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	48 2f       	mov	r20, r24
    2b18:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	02 2e       	mov	r0, r18
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <DIO_enuSetPinValue+0x1cc>
    2b26:	88 0f       	add	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	0a 94       	dec	r0
    2b2c:	e2 f7       	brpl	.-8      	; 0x2b26 <DIO_enuSetPinValue+0x1c8>
    2b2e:	80 95       	com	r24
    2b30:	84 23       	and	r24, r20
    2b32:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    2b38:	99 81       	ldd	r25, Y+1	; 0x01
    2b3a:	9d 83       	std	Y+5, r25	; 0x05
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    2b3e:	29 81       	ldd	r18, Y+1	; 0x01
    2b40:	2d 83       	std	Y+5, r18	; 0x05
    2b42:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    2b44:	27 96       	adiw	r28, 0x07	; 7
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	cf 91       	pop	r28
    2b52:	df 91       	pop	r29
    2b54:	08 95       	ret

00002b56 <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    2b56:	df 93       	push	r29
    2b58:	cf 93       	push	r28
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	28 97       	sbiw	r28, 0x08	; 8
    2b60:	0f b6       	in	r0, 0x3f	; 63
    2b62:	f8 94       	cli
    2b64:	de bf       	out	0x3e, r29	; 62
    2b66:	0f be       	out	0x3f, r0	; 63
    2b68:	cd bf       	out	0x3d, r28	; 61
    2b6a:	8a 83       	std	Y+2, r24	; 0x02
    2b6c:	6b 83       	std	Y+3, r22	; 0x03
    2b6e:	5d 83       	std	Y+5, r21	; 0x05
    2b70:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2b72:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    2b74:	8c 81       	ldd	r24, Y+4	; 0x04
    2b76:	9d 81       	ldd	r25, Y+5	; 0x05
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	29 f4       	brne	.+10     	; 0x2b86 <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    2b7c:	83 e0       	ldi	r24, 0x03	; 3
    2b7e:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    2b80:	29 81       	ldd	r18, Y+1	; 0x01
    2b82:	28 87       	std	Y+8, r18	; 0x08
    2b84:	7f c0       	rjmp	.+254    	; 0x2c84 <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	84 30       	cpi	r24, 0x04	; 4
    2b8a:	08 f0       	brcs	.+2      	; 0x2b8e <DIO_enuGetPinValue+0x38>
    2b8c:	79 c0       	rjmp	.+242    	; 0x2c80 <DIO_enuGetPinValue+0x12a>
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	88 30       	cpi	r24, 0x08	; 8
    2b92:	08 f0       	brcs	.+2      	; 0x2b96 <DIO_enuGetPinValue+0x40>
    2b94:	75 c0       	rjmp	.+234    	; 0x2c80 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	48 2f       	mov	r20, r24
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	5f 83       	std	Y+7, r21	; 0x07
    2b9e:	4e 83       	std	Y+6, r20	; 0x06
    2ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba4:	81 30       	cpi	r24, 0x01	; 1
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	59 f1       	breq	.+86     	; 0x2c00 <DIO_enuGetPinValue+0xaa>
    2baa:	2e 81       	ldd	r18, Y+6	; 0x06
    2bac:	3f 81       	ldd	r19, Y+7	; 0x07
    2bae:	22 30       	cpi	r18, 0x02	; 2
    2bb0:	31 05       	cpc	r19, r1
    2bb2:	34 f4       	brge	.+12     	; 0x2bc0 <DIO_enuGetPinValue+0x6a>
    2bb4:	4e 81       	ldd	r20, Y+6	; 0x06
    2bb6:	5f 81       	ldd	r21, Y+7	; 0x07
    2bb8:	41 15       	cp	r20, r1
    2bba:	51 05       	cpc	r21, r1
    2bbc:	69 f0       	breq	.+26     	; 0x2bd8 <DIO_enuGetPinValue+0x82>
    2bbe:	5b c0       	rjmp	.+182    	; 0x2c76 <DIO_enuGetPinValue+0x120>
    2bc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc4:	82 30       	cpi	r24, 0x02	; 2
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	79 f1       	breq	.+94     	; 0x2c28 <DIO_enuGetPinValue+0xd2>
    2bca:	2e 81       	ldd	r18, Y+6	; 0x06
    2bcc:	3f 81       	ldd	r19, Y+7	; 0x07
    2bce:	23 30       	cpi	r18, 0x03	; 3
    2bd0:	31 05       	cpc	r19, r1
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <DIO_enuGetPinValue+0x80>
    2bd4:	3d c0       	rjmp	.+122    	; 0x2c50 <DIO_enuGetPinValue+0xfa>
    2bd6:	4f c0       	rjmp	.+158    	; 0x2c76 <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    2bd8:	e9 e3       	ldi	r30, 0x39	; 57
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	8b 81       	ldd	r24, Y+3	; 0x03
    2be4:	88 2f       	mov	r24, r24
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a9 01       	movw	r20, r18
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <DIO_enuGetPinValue+0x9a>
    2bec:	55 95       	asr	r21
    2bee:	47 95       	ror	r20
    2bf0:	8a 95       	dec	r24
    2bf2:	e2 f7       	brpl	.-8      	; 0x2bec <DIO_enuGetPinValue+0x96>
    2bf4:	ca 01       	movw	r24, r20
    2bf6:	81 70       	andi	r24, 0x01	; 1
    2bf8:	ec 81       	ldd	r30, Y+4	; 0x04
    2bfa:	fd 81       	ldd	r31, Y+5	; 0x05
    2bfc:	80 83       	st	Z, r24
    2bfe:	3b c0       	rjmp	.+118    	; 0x2c76 <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    2c00:	e6 e3       	ldi	r30, 0x36	; 54
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	a9 01       	movw	r20, r18
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <DIO_enuGetPinValue+0xc2>
    2c14:	55 95       	asr	r21
    2c16:	47 95       	ror	r20
    2c18:	8a 95       	dec	r24
    2c1a:	e2 f7       	brpl	.-8      	; 0x2c14 <DIO_enuGetPinValue+0xbe>
    2c1c:	ca 01       	movw	r24, r20
    2c1e:	81 70       	andi	r24, 0x01	; 1
    2c20:	ec 81       	ldd	r30, Y+4	; 0x04
    2c22:	fd 81       	ldd	r31, Y+5	; 0x05
    2c24:	80 83       	st	Z, r24
    2c26:	27 c0       	rjmp	.+78     	; 0x2c76 <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    2c28:	e3 e3       	ldi	r30, 0x33	; 51
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	a9 01       	movw	r20, r18
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <DIO_enuGetPinValue+0xea>
    2c3c:	55 95       	asr	r21
    2c3e:	47 95       	ror	r20
    2c40:	8a 95       	dec	r24
    2c42:	e2 f7       	brpl	.-8      	; 0x2c3c <DIO_enuGetPinValue+0xe6>
    2c44:	ca 01       	movw	r24, r20
    2c46:	81 70       	andi	r24, 0x01	; 1
    2c48:	ec 81       	ldd	r30, Y+4	; 0x04
    2c4a:	fd 81       	ldd	r31, Y+5	; 0x05
    2c4c:	80 83       	st	Z, r24
    2c4e:	13 c0       	rjmp	.+38     	; 0x2c76 <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    2c50:	e0 e3       	ldi	r30, 0x30	; 48
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	28 2f       	mov	r18, r24
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	88 2f       	mov	r24, r24
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	a9 01       	movw	r20, r18
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <DIO_enuGetPinValue+0x112>
    2c64:	55 95       	asr	r21
    2c66:	47 95       	ror	r20
    2c68:	8a 95       	dec	r24
    2c6a:	e2 f7       	brpl	.-8      	; 0x2c64 <DIO_enuGetPinValue+0x10e>
    2c6c:	ca 01       	movw	r24, r20
    2c6e:	81 70       	andi	r24, 0x01	; 1
    2c70:	ec 81       	ldd	r30, Y+4	; 0x04
    2c72:	fd 81       	ldd	r31, Y+5	; 0x05
    2c74:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    2c7a:	59 81       	ldd	r21, Y+1	; 0x01
    2c7c:	58 87       	std	Y+8, r21	; 0x08
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	88 87       	std	Y+8, r24	; 0x08
    2c84:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    2c86:	28 96       	adiw	r28, 0x08	; 8
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	de bf       	out	0x3e, r29	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	cd bf       	out	0x3d, r28	; 61
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	00 d0       	rcall	.+0      	; 0x2c9e <DIO_enuTogglePinValue+0x6>
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <DIO_enuTogglePinValue+0x8>
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <DIO_enuTogglePinValue+0xa>
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	8a 83       	std	Y+2, r24	; 0x02
    2ca8:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2caa:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    2cac:	8a 81       	ldd	r24, Y+2	; 0x02
    2cae:	84 30       	cpi	r24, 0x04	; 4
    2cb0:	08 f0       	brcs	.+2      	; 0x2cb4 <DIO_enuTogglePinValue+0x1c>
    2cb2:	77 c0       	rjmp	.+238    	; 0x2da2 <DIO_enuTogglePinValue+0x10a>
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	88 30       	cpi	r24, 0x08	; 8
    2cb8:	08 f0       	brcs	.+2      	; 0x2cbc <DIO_enuTogglePinValue+0x24>
    2cba:	73 c0       	rjmp	.+230    	; 0x2da2 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	3e 83       	std	Y+6, r19	; 0x06
    2cc4:	2d 83       	std	Y+5, r18	; 0x05
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	81 30       	cpi	r24, 0x01	; 1
    2ccc:	91 05       	cpc	r25, r1
    2cce:	49 f1       	breq	.+82     	; 0x2d22 <DIO_enuTogglePinValue+0x8a>
    2cd0:	2d 81       	ldd	r18, Y+5	; 0x05
    2cd2:	3e 81       	ldd	r19, Y+6	; 0x06
    2cd4:	22 30       	cpi	r18, 0x02	; 2
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <DIO_enuTogglePinValue+0x4c>
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	61 f0       	breq	.+24     	; 0x2cfa <DIO_enuTogglePinValue+0x62>
    2ce2:	5a c0       	rjmp	.+180    	; 0x2d98 <DIO_enuTogglePinValue+0x100>
    2ce4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ce6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ce8:	22 30       	cpi	r18, 0x02	; 2
    2cea:	31 05       	cpc	r19, r1
    2cec:	71 f1       	breq	.+92     	; 0x2d4a <DIO_enuTogglePinValue+0xb2>
    2cee:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf2:	83 30       	cpi	r24, 0x03	; 3
    2cf4:	91 05       	cpc	r25, r1
    2cf6:	e9 f1       	breq	.+122    	; 0x2d72 <DIO_enuTogglePinValue+0xda>
    2cf8:	4f c0       	rjmp	.+158    	; 0x2d98 <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    2cfa:	ab e3       	ldi	r26, 0x3B	; 59
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	eb e3       	ldi	r30, 0x3B	; 59
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	48 2f       	mov	r20, r24
    2d06:	8b 81       	ldd	r24, Y+3	; 0x03
    2d08:	28 2f       	mov	r18, r24
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	02 2e       	mov	r0, r18
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <DIO_enuTogglePinValue+0x80>
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	0a 94       	dec	r0
    2d1a:	e2 f7       	brpl	.-8      	; 0x2d14 <DIO_enuTogglePinValue+0x7c>
    2d1c:	84 27       	eor	r24, r20
    2d1e:	8c 93       	st	X, r24
    2d20:	3b c0       	rjmp	.+118    	; 0x2d98 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    2d22:	a8 e3       	ldi	r26, 0x38	; 56
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	e8 e3       	ldi	r30, 0x38	; 56
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	48 2f       	mov	r20, r24
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	02 2e       	mov	r0, r18
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <DIO_enuTogglePinValue+0xa8>
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	0a 94       	dec	r0
    2d42:	e2 f7       	brpl	.-8      	; 0x2d3c <DIO_enuTogglePinValue+0xa4>
    2d44:	84 27       	eor	r24, r20
    2d46:	8c 93       	st	X, r24
    2d48:	27 c0       	rjmp	.+78     	; 0x2d98 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    2d4a:	a5 e3       	ldi	r26, 0x35	; 53
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e5 e3       	ldi	r30, 0x35	; 53
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	48 2f       	mov	r20, r24
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	02 2e       	mov	r0, r18
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <DIO_enuTogglePinValue+0xd0>
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	0a 94       	dec	r0
    2d6a:	e2 f7       	brpl	.-8      	; 0x2d64 <DIO_enuTogglePinValue+0xcc>
    2d6c:	84 27       	eor	r24, r20
    2d6e:	8c 93       	st	X, r24
    2d70:	13 c0       	rjmp	.+38     	; 0x2d98 <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    2d72:	a2 e3       	ldi	r26, 0x32	; 50
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
    2d76:	e2 e3       	ldi	r30, 0x32	; 50
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	80 81       	ld	r24, Z
    2d7c:	48 2f       	mov	r20, r24
    2d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	02 2e       	mov	r0, r18
    2d8a:	02 c0       	rjmp	.+4      	; 0x2d90 <DIO_enuTogglePinValue+0xf8>
    2d8c:	88 0f       	add	r24, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	0a 94       	dec	r0
    2d92:	e2 f7       	brpl	.-8      	; 0x2d8c <DIO_enuTogglePinValue+0xf4>
    2d94:	84 27       	eor	r24, r20
    2d96:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    2d98:	81 e0       	ldi	r24, 0x01	; 1
    2d9a:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    2d9c:	99 81       	ldd	r25, Y+1	; 0x01
    2d9e:	9c 83       	std	Y+4, r25	; 0x04
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    2da2:	29 81       	ldd	r18, Y+1	; 0x01
    2da4:	2c 83       	std	Y+4, r18	; 0x04
    2da6:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    2da8:	26 96       	adiw	r28, 0x06	; 6
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	08 95       	ret

00002dba <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	00 d0       	rcall	.+0      	; 0x2dc0 <DIO_enuSetPortDirection+0x6>
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <DIO_enuSetPortDirection+0x8>
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <DIO_enuSetPortDirection+0xa>
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	8a 83       	std	Y+2, r24	; 0x02
    2dca:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2dcc:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    2dce:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd0:	84 30       	cpi	r24, 0x04	; 4
    2dd2:	08 f0       	brcs	.+2      	; 0x2dd6 <DIO_enuSetPortDirection+0x1c>
    2dd4:	57 c0       	rjmp	.+174    	; 0x2e84 <DIO_enuSetPortDirection+0xca>
    2dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd8:	82 30       	cpi	r24, 0x02	; 2
    2dda:	08 f0       	brcs	.+2      	; 0x2dde <DIO_enuSetPortDirection+0x24>
    2ddc:	53 c0       	rjmp	.+166    	; 0x2e84 <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    2dde:	8a 81       	ldd	r24, Y+2	; 0x02
    2de0:	28 2f       	mov	r18, r24
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	3e 83       	std	Y+6, r19	; 0x06
    2de6:	2d 83       	std	Y+5, r18	; 0x05
    2de8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dea:	9e 81       	ldd	r25, Y+6	; 0x06
    2dec:	81 30       	cpi	r24, 0x01	; 1
    2dee:	91 05       	cpc	r25, r1
    2df0:	09 f1       	breq	.+66     	; 0x2e34 <DIO_enuSetPortDirection+0x7a>
    2df2:	2d 81       	ldd	r18, Y+5	; 0x05
    2df4:	3e 81       	ldd	r19, Y+6	; 0x06
    2df6:	22 30       	cpi	r18, 0x02	; 2
    2df8:	31 05       	cpc	r19, r1
    2dfa:	2c f4       	brge	.+10     	; 0x2e06 <DIO_enuSetPortDirection+0x4c>
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	61 f0       	breq	.+24     	; 0x2e1c <DIO_enuSetPortDirection+0x62>
    2e04:	3a c0       	rjmp	.+116    	; 0x2e7a <DIO_enuSetPortDirection+0xc0>
    2e06:	2d 81       	ldd	r18, Y+5	; 0x05
    2e08:	3e 81       	ldd	r19, Y+6	; 0x06
    2e0a:	22 30       	cpi	r18, 0x02	; 2
    2e0c:	31 05       	cpc	r19, r1
    2e0e:	f1 f0       	breq	.+60     	; 0x2e4c <DIO_enuSetPortDirection+0x92>
    2e10:	8d 81       	ldd	r24, Y+5	; 0x05
    2e12:	9e 81       	ldd	r25, Y+6	; 0x06
    2e14:	83 30       	cpi	r24, 0x03	; 3
    2e16:	91 05       	cpc	r25, r1
    2e18:	29 f1       	breq	.+74     	; 0x2e64 <DIO_enuSetPortDirection+0xaa>
    2e1a:	2f c0       	rjmp	.+94     	; 0x2e7a <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1e:	81 30       	cpi	r24, 0x01	; 1
    2e20:	29 f4       	brne	.+10     	; 0x2e2c <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    2e22:	ea e3       	ldi	r30, 0x3A	; 58
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	8f ef       	ldi	r24, 0xFF	; 255
    2e28:	80 83       	st	Z, r24
    2e2a:	27 c0       	rjmp	.+78     	; 0x2e7a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    2e2c:	ea e3       	ldi	r30, 0x3A	; 58
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	10 82       	st	Z, r1
    2e32:	23 c0       	rjmp	.+70     	; 0x2e7a <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	81 30       	cpi	r24, 0x01	; 1
    2e38:	29 f4       	brne	.+10     	; 0x2e44 <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    2e3a:	e7 e3       	ldi	r30, 0x37	; 55
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	8f ef       	ldi	r24, 0xFF	; 255
    2e40:	80 83       	st	Z, r24
    2e42:	1b c0       	rjmp	.+54     	; 0x2e7a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    2e44:	e7 e3       	ldi	r30, 0x37	; 55
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	10 82       	st	Z, r1
    2e4a:	17 c0       	rjmp	.+46     	; 0x2e7a <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	81 30       	cpi	r24, 0x01	; 1
    2e50:	29 f4       	brne	.+10     	; 0x2e5c <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    2e52:	e4 e3       	ldi	r30, 0x34	; 52
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	8f ef       	ldi	r24, 0xFF	; 255
    2e58:	80 83       	st	Z, r24
    2e5a:	0f c0       	rjmp	.+30     	; 0x2e7a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    2e5c:	e4 e3       	ldi	r30, 0x34	; 52
    2e5e:	f0 e0       	ldi	r31, 0x00	; 0
    2e60:	10 82       	st	Z, r1
    2e62:	0b c0       	rjmp	.+22     	; 0x2e7a <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
    2e66:	81 30       	cpi	r24, 0x01	; 1
    2e68:	29 f4       	brne	.+10     	; 0x2e74 <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    2e6a:	e1 e3       	ldi	r30, 0x31	; 49
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	8f ef       	ldi	r24, 0xFF	; 255
    2e70:	80 83       	st	Z, r24
    2e72:	03 c0       	rjmp	.+6      	; 0x2e7a <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    2e74:	e1 e3       	ldi	r30, 0x31	; 49
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    2e7e:	99 81       	ldd	r25, Y+1	; 0x01
    2e80:	9c 83       	std	Y+4, r25	; 0x04
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    2e84:	29 81       	ldd	r18, Y+1	; 0x01
    2e86:	2c 83       	std	Y+4, r18	; 0x04
    2e88:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    2e8a:	26 96       	adiw	r28, 0x06	; 6
    2e8c:	0f b6       	in	r0, 0x3f	; 63
    2e8e:	f8 94       	cli
    2e90:	de bf       	out	0x3e, r29	; 62
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	cd bf       	out	0x3d, r28	; 61
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	08 95       	ret

00002e9c <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <DIO_enuSetPortValue+0x6>
    2ea2:	00 d0       	rcall	.+0      	; 0x2ea4 <DIO_enuSetPortValue+0x8>
    2ea4:	00 d0       	rcall	.+0      	; 0x2ea6 <DIO_enuSetPortValue+0xa>
    2ea6:	cd b7       	in	r28, 0x3d	; 61
    2ea8:	de b7       	in	r29, 0x3e	; 62
    2eaa:	8a 83       	std	Y+2, r24	; 0x02
    2eac:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2eae:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	84 30       	cpi	r24, 0x04	; 4
    2eb4:	08 f0       	brcs	.+2      	; 0x2eb8 <DIO_enuSetPortValue+0x1c>
    2eb6:	57 c0       	rjmp	.+174    	; 0x2f66 <DIO_enuSetPortValue+0xca>
    2eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eba:	82 30       	cpi	r24, 0x02	; 2
    2ebc:	08 f0       	brcs	.+2      	; 0x2ec0 <DIO_enuSetPortValue+0x24>
    2ebe:	53 c0       	rjmp	.+166    	; 0x2f66 <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    2ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec2:	28 2f       	mov	r18, r24
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	3e 83       	std	Y+6, r19	; 0x06
    2ec8:	2d 83       	std	Y+5, r18	; 0x05
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	81 30       	cpi	r24, 0x01	; 1
    2ed0:	91 05       	cpc	r25, r1
    2ed2:	09 f1       	breq	.+66     	; 0x2f16 <DIO_enuSetPortValue+0x7a>
    2ed4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ed6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ed8:	22 30       	cpi	r18, 0x02	; 2
    2eda:	31 05       	cpc	r19, r1
    2edc:	2c f4       	brge	.+10     	; 0x2ee8 <DIO_enuSetPortValue+0x4c>
    2ede:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	61 f0       	breq	.+24     	; 0x2efe <DIO_enuSetPortValue+0x62>
    2ee6:	3a c0       	rjmp	.+116    	; 0x2f5c <DIO_enuSetPortValue+0xc0>
    2ee8:	2d 81       	ldd	r18, Y+5	; 0x05
    2eea:	3e 81       	ldd	r19, Y+6	; 0x06
    2eec:	22 30       	cpi	r18, 0x02	; 2
    2eee:	31 05       	cpc	r19, r1
    2ef0:	f1 f0       	breq	.+60     	; 0x2f2e <DIO_enuSetPortValue+0x92>
    2ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef6:	83 30       	cpi	r24, 0x03	; 3
    2ef8:	91 05       	cpc	r25, r1
    2efa:	29 f1       	breq	.+74     	; 0x2f46 <DIO_enuSetPortValue+0xaa>
    2efc:	2f c0       	rjmp	.+94     	; 0x2f5c <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    2efe:	8b 81       	ldd	r24, Y+3	; 0x03
    2f00:	88 23       	and	r24, r24
    2f02:	29 f0       	breq	.+10     	; 0x2f0e <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    2f04:	eb e3       	ldi	r30, 0x3B	; 59
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	8f ef       	ldi	r24, 0xFF	; 255
    2f0a:	80 83       	st	Z, r24
    2f0c:	27 c0       	rjmp	.+78     	; 0x2f5c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    2f0e:	eb e3       	ldi	r30, 0x3B	; 59
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	10 82       	st	Z, r1
    2f14:	23 c0       	rjmp	.+70     	; 0x2f5c <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	88 23       	and	r24, r24
    2f1a:	29 f0       	breq	.+10     	; 0x2f26 <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    2f1c:	e8 e3       	ldi	r30, 0x38	; 56
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	8f ef       	ldi	r24, 0xFF	; 255
    2f22:	80 83       	st	Z, r24
    2f24:	1b c0       	rjmp	.+54     	; 0x2f5c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    2f26:	e8 e3       	ldi	r30, 0x38	; 56
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	10 82       	st	Z, r1
    2f2c:	17 c0       	rjmp	.+46     	; 0x2f5c <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    2f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f30:	88 23       	and	r24, r24
    2f32:	29 f0       	breq	.+10     	; 0x2f3e <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    2f34:	e5 e3       	ldi	r30, 0x35	; 53
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	8f ef       	ldi	r24, 0xFF	; 255
    2f3a:	80 83       	st	Z, r24
    2f3c:	0f c0       	rjmp	.+30     	; 0x2f5c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    2f3e:	e5 e3       	ldi	r30, 0x35	; 53
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	10 82       	st	Z, r1
    2f44:	0b c0       	rjmp	.+22     	; 0x2f5c <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	88 23       	and	r24, r24
    2f4a:	29 f0       	breq	.+10     	; 0x2f56 <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    2f4c:	e2 e3       	ldi	r30, 0x32	; 50
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	8f ef       	ldi	r24, 0xFF	; 255
    2f52:	80 83       	st	Z, r24
    2f54:	03 c0       	rjmp	.+6      	; 0x2f5c <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    2f56:	e2 e3       	ldi	r30, 0x32	; 50
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    2f60:	99 81       	ldd	r25, Y+1	; 0x01
    2f62:	9c 83       	std	Y+4, r25	; 0x04
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    2f66:	29 81       	ldd	r18, Y+1	; 0x01
    2f68:	2c 83       	std	Y+4, r18	; 0x04
    2f6a:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    2f6c:	26 96       	adiw	r28, 0x06	; 6
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	cf 91       	pop	r28
    2f7a:	df 91       	pop	r29
    2f7c:	08 95       	ret

00002f7e <ADC_enuInit>:


static void (*ADC_CallBackFunction)(void) = NULL;


void ADC_enuInit(){
    2f7e:	df 93       	push	r29
    2f80:	cf 93       	push	r28
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	2e 97       	sbiw	r28, 0x0e	; 14
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	f8 94       	cli
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	0f be       	out	0x3f, r0	; 63
    2f90:	cd bf       	out	0x3d, r28	; 61
	 * 5. Enabling ADC
	 * */


	/*************************** Selecting  voltage reference ***************************/
		ADMUX_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    2f92:	a7 e2       	ldi	r26, 0x27	; 39
    2f94:	b0 e0       	ldi	r27, 0x00	; 0
    2f96:	e7 e2       	ldi	r30, 0x27	; 39
    2f98:	f0 e0       	ldi	r31, 0x00	; 0
    2f9a:	80 81       	ld	r24, Z
    2f9c:	8f 71       	andi	r24, 0x1F	; 31
    2f9e:	8c 93       	st	X, r24
		ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
    2fa0:	a7 e2       	ldi	r26, 0x27	; 39
    2fa2:	b0 e0       	ldi	r27, 0x00	; 0
    2fa4:	e7 e2       	ldi	r30, 0x27	; 39
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	80 81       	ld	r24, Z
    2faa:	80 64       	ori	r24, 0x40	; 64
    2fac:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************** Selecting ADC MODE ********************************/
		#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
			SET_BIT(ADCSRA_REG, ADCSRA_ADATE);
    2fae:	a6 e2       	ldi	r26, 0x26	; 38
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	e6 e2       	ldi	r30, 0x26	; 38
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	80 62       	ori	r24, 0x20	; 32
    2fba:	8c 93       	st	X, r24

			SFIOR_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    2fbc:	a0 e5       	ldi	r26, 0x50	; 80
    2fbe:	b0 e0       	ldi	r27, 0x00	; 0
    2fc0:	e0 e5       	ldi	r30, 0x50	; 80
    2fc2:	f0 e0       	ldi	r31, 0x00	; 0
    2fc4:	80 81       	ld	r24, Z
    2fc6:	8f 71       	andi	r24, 0x1F	; 31
    2fc8:	8c 93       	st	X, r24
			SFIOR_REG |= ADC_AUTO_TRIG_SRCE_SELECTOR;
    2fca:	a0 e5       	ldi	r26, 0x50	; 80
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	e0 e5       	ldi	r30, 0x50	; 80
    2fd0:	f0 e0       	ldi	r31, 0x00	; 0
    2fd2:	80 81       	ld	r24, Z
    2fd4:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* Selecting Adjustment *******************************/
		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			CLR_BIT(ADMUX_REG, ADMUX_ADLAR);
    2fd6:	a7 e2       	ldi	r26, 0x27	; 39
    2fd8:	b0 e0       	ldi	r27, 0x00	; 0
    2fda:	e7 e2       	ldi	r30, 0x27	; 39
    2fdc:	f0 e0       	ldi	r31, 0x00	; 0
    2fde:	80 81       	ld	r24, Z
    2fe0:	8f 7d       	andi	r24, 0xDF	; 223
    2fe2:	8c 93       	st	X, r24
	/***************************** Clearing  Interrupt Flag *****************************/
		//! Notice: that ADIF to be cleared we write logical one (from data sheet)
		//So in initialization of ADC we write 1 to ADIF bit to make sure that the
		//flag is cleared in order to make sure that ADC ready for upcoming conversation
		// clearing interrupt flag
		SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    2fe4:	a6 e2       	ldi	r26, 0x26	; 38
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	e6 e2       	ldi	r30, 0x26	; 38
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	80 81       	ld	r24, Z
    2fee:	80 61       	ori	r24, 0x10	; 16
    2ff0:	8c 93       	st	X, r24
	/************************************************************************************/


	/*********************************** Enabling ADC ***********************************/
		SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    2ff2:	a6 e2       	ldi	r26, 0x26	; 38
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	e6 e2       	ldi	r30, 0x26	; 38
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	80 81       	ld	r24, Z
    2ffc:	80 68       	ori	r24, 0x80	; 128
    2ffe:	8c 93       	st	X, r24
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a8 e4       	ldi	r26, 0x48	; 72
    3006:	b3 e4       	ldi	r27, 0x43	; 67
    3008:	8b 87       	std	Y+11, r24	; 0x0b
    300a:	9c 87       	std	Y+12, r25	; 0x0c
    300c:	ad 87       	std	Y+13, r26	; 0x0d
    300e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3010:	6b 85       	ldd	r22, Y+11	; 0x0b
    3012:	7c 85       	ldd	r23, Y+12	; 0x0c
    3014:	8d 85       	ldd	r24, Y+13	; 0x0d
    3016:	9e 85       	ldd	r25, Y+14	; 0x0e
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	4a e7       	ldi	r20, 0x7A	; 122
    301e:	55 e4       	ldi	r21, 0x45	; 69
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	8f 83       	std	Y+7, r24	; 0x07
    302a:	98 87       	std	Y+8, r25	; 0x08
    302c:	a9 87       	std	Y+9, r26	; 0x09
    302e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3030:	6f 81       	ldd	r22, Y+7	; 0x07
    3032:	78 85       	ldd	r23, Y+8	; 0x08
    3034:	89 85       	ldd	r24, Y+9	; 0x09
    3036:	9a 85       	ldd	r25, Y+10	; 0x0a
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e8       	ldi	r20, 0x80	; 128
    303e:	5f e3       	ldi	r21, 0x3F	; 63
    3040:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3044:	88 23       	and	r24, r24
    3046:	2c f4       	brge	.+10     	; 0x3052 <ADC_enuInit+0xd4>
		__ticks = 1;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
    3050:	3f c0       	rjmp	.+126    	; 0x30d0 <ADC_enuInit+0x152>
	else if (__tmp > 65535)
    3052:	6f 81       	ldd	r22, Y+7	; 0x07
    3054:	78 85       	ldd	r23, Y+8	; 0x08
    3056:	89 85       	ldd	r24, Y+9	; 0x09
    3058:	9a 85       	ldd	r25, Y+10	; 0x0a
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	3f ef       	ldi	r19, 0xFF	; 255
    305e:	4f e7       	ldi	r20, 0x7F	; 127
    3060:	57 e4       	ldi	r21, 0x47	; 71
    3062:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3066:	18 16       	cp	r1, r24
    3068:	4c f5       	brge	.+82     	; 0x30bc <ADC_enuInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306a:	6b 85       	ldd	r22, Y+11	; 0x0b
    306c:	7c 85       	ldd	r23, Y+12	; 0x0c
    306e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3070:	9e 85       	ldd	r25, Y+14	; 0x0e
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e2       	ldi	r20, 0x20	; 32
    3078:	51 e4       	ldi	r21, 0x41	; 65
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
    3092:	0f c0       	rjmp	.+30     	; 0x30b2 <ADC_enuInit+0x134>
    3094:	80 e9       	ldi	r24, 0x90	; 144
    3096:	91 e0       	ldi	r25, 0x01	; 1
    3098:	9c 83       	std	Y+4, r25	; 0x04
    309a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	9c 81       	ldd	r25, Y+4	; 0x04
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <ADC_enuInit+0x122>
    30a4:	9c 83       	std	Y+4, r25	; 0x04
    30a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a8:	8d 81       	ldd	r24, Y+5	; 0x05
    30aa:	9e 81       	ldd	r25, Y+6	; 0x06
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	9e 83       	std	Y+6, r25	; 0x06
    30b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b2:	8d 81       	ldd	r24, Y+5	; 0x05
    30b4:	9e 81       	ldd	r25, Y+6	; 0x06
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	69 f7       	brne	.-38     	; 0x3094 <ADC_enuInit+0x116>
    30ba:	14 c0       	rjmp	.+40     	; 0x30e4 <ADC_enuInit+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30bc:	6f 81       	ldd	r22, Y+7	; 0x07
    30be:	78 85       	ldd	r23, Y+8	; 0x08
    30c0:	89 85       	ldd	r24, Y+9	; 0x09
    30c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9e 83       	std	Y+6, r25	; 0x06
    30ce:	8d 83       	std	Y+5, r24	; 0x05
    30d0:	8d 81       	ldd	r24, Y+5	; 0x05
    30d2:	9e 81       	ldd	r25, Y+6	; 0x06
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <ADC_enuInit+0x15e>
    30e0:	9a 83       	std	Y+2, r25	; 0x02
    30e2:	89 83       	std	Y+1, r24	; 0x01


	// Waiting until ADC is stablized
	_delay_ms(200);

}
    30e4:	2e 96       	adiw	r28, 0x0e	; 14
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <ADC_enuStartConversion>:




ErrorStatus_t ADC_enuStartConversion(ADC_Channel_types ADC_channel_N){
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <ADC_enuStartConversion+0x6>
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3102:	19 82       	std	Y+1, r1	; 0x01


	/******************************** Select ADC Channel ********************************/
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_clr_msk;
    3104:	a7 e2       	ldi	r26, 0x27	; 39
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	e7 e2       	ldi	r30, 0x27	; 39
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	80 81       	ld	r24, Z
    310e:	80 7e       	andi	r24, 0xE0	; 224
    3110:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_channel_N;
    3112:	a7 e2       	ldi	r26, 0x27	; 39
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	e7 e2       	ldi	r30, 0x27	; 39
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	90 81       	ld	r25, Z
    311c:	8a 81       	ldd	r24, Y+2	; 0x02
    311e:	89 2b       	or	r24, r25
    3120:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* ADC Start Conversion *******************************/
	//!!!!!!!!!!!!!!
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    3122:	a6 e2       	ldi	r26, 0x26	; 38
    3124:	b0 e0       	ldi	r27, 0x00	; 0
    3126:	e6 e2       	ldi	r30, 0x26	; 38
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	80 81       	ld	r24, Z
    312c:	80 64       	ori	r24, 0x40	; 64
    312e:	8c 93       	st	X, r24
	/************************************************************************************/

	return Local_enuErrrorState;
    3130:	89 81       	ldd	r24, Y+1	; 0x01
}
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <ADC_GetResult>:



uint16 ADC_GetResult(){
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
			Copy_u16ReadValue |= ((uint16)ADCH_REG<<2);
			return Copy_u16ReadValue;
		#endif

		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			return ADCLH_REG;
    3144:	e4 e2       	ldi	r30, 0x24	; 36
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	80 81       	ld	r24, Z
    314a:	91 81       	ldd	r25, Z+1	; 0x01





}
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret

00003152 <ADC_enuSetCallBack>:




ErrorStatus_t ADC_enuSetCallBack(void(*Copy_pfunAppFun)(void)){
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	00 d0       	rcall	.+0      	; 0x3158 <ADC_enuSetCallBack+0x6>
    3158:	00 d0       	rcall	.+0      	; 0x315a <ADC_enuSetCallBack+0x8>
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	9b 83       	std	Y+3, r25	; 0x03
    3160:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3162:	19 82       	std	Y+1, r1	; 0x01

//	if(Copy_pfunAppFun == NULL ||  Copy_u8IntNumber> IN)

	if(Copy_pfunAppFun == NULL){
    3164:	8a 81       	ldd	r24, Y+2	; 0x02
    3166:	9b 81       	ldd	r25, Y+3	; 0x03
    3168:	00 97       	sbiw	r24, 0x00	; 0
    316a:	19 f4       	brne	.+6      	; 0x3172 <ADC_enuSetCallBack+0x20>

		return Local_enuErrrorState;
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	8c 83       	std	Y+4, r24	; 0x04
    3170:	0a c0       	rjmp	.+20     	; 0x3186 <ADC_enuSetCallBack+0x34>
	}

	else{
		Local_enuErrrorState = ERROR_STATUS_OK;
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	89 83       	std	Y+1, r24	; 0x01

		ADC_CallBackFunction = Copy_pfunAppFun;
    3176:	8a 81       	ldd	r24, Y+2	; 0x02
    3178:	9b 81       	ldd	r25, Y+3	; 0x03
    317a:	90 93 a9 01 	sts	0x01A9, r25
    317e:	80 93 a8 01 	sts	0x01A8, r24

	}



	return Local_enuErrrorState;
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	8c 83       	std	Y+4, r24	; 0x04
    3186:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <__vector_16>:

ISR(__vector_16){
    3196:	1f 92       	push	r1
    3198:	0f 92       	push	r0
    319a:	0f b6       	in	r0, 0x3f	; 63
    319c:	0f 92       	push	r0
    319e:	11 24       	eor	r1, r1
    31a0:	2f 93       	push	r18
    31a2:	3f 93       	push	r19
    31a4:	4f 93       	push	r20
    31a6:	5f 93       	push	r21
    31a8:	6f 93       	push	r22
    31aa:	7f 93       	push	r23
    31ac:	8f 93       	push	r24
    31ae:	9f 93       	push	r25
    31b0:	af 93       	push	r26
    31b2:	bf 93       	push	r27
    31b4:	ef 93       	push	r30
    31b6:	ff 93       	push	r31
    31b8:	df 93       	push	r29
    31ba:	cf 93       	push	r28
    31bc:	cd b7       	in	r28, 0x3d	; 61
    31be:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CallBackFunction != NULL){
    31c0:	80 91 a8 01 	lds	r24, 0x01A8
    31c4:	90 91 a9 01 	lds	r25, 0x01A9
    31c8:	00 97       	sbiw	r24, 0x00	; 0
    31ca:	29 f0       	breq	.+10     	; 0x31d6 <__vector_16+0x40>
		ADC_CallBackFunction();
    31cc:	e0 91 a8 01 	lds	r30, 0x01A8
    31d0:	f0 91 a9 01 	lds	r31, 0x01A9
    31d4:	09 95       	icall
	}

}
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	ff 91       	pop	r31
    31dc:	ef 91       	pop	r30
    31de:	bf 91       	pop	r27
    31e0:	af 91       	pop	r26
    31e2:	9f 91       	pop	r25
    31e4:	8f 91       	pop	r24
    31e6:	7f 91       	pop	r23
    31e8:	6f 91       	pop	r22
    31ea:	5f 91       	pop	r21
    31ec:	4f 91       	pop	r20
    31ee:	3f 91       	pop	r19
    31f0:	2f 91       	pop	r18
    31f2:	0f 90       	pop	r0
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	0f 90       	pop	r0
    31f8:	1f 90       	pop	r1
    31fa:	18 95       	reti

000031fc <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    31fc:	df 93       	push	r29
    31fe:	cf 93       	push	r28
    3200:	0f 92       	push	r0
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3206:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	64 e0       	ldi	r22, 0x04	; 4
    320c:	41 e0       	ldi	r20, 0x01	; 1
    320e:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	65 e0       	ldi	r22, 0x05	; 5
    3216:	41 e0       	ldi	r20, 0x01	; 1
    3218:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	66 e0       	ldi	r22, 0x06	; 6
    3220:	41 e0       	ldi	r20, 0x01	; 1
    3222:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	67 e0       	ldi	r22, 0x07	; 7
    322a:	41 e0       	ldi	r20, 0x01	; 1
    322c:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	64 e0       	ldi	r22, 0x04	; 4
    3234:	41 e0       	ldi	r20, 0x01	; 1
    3236:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	65 e0       	ldi	r22, 0x05	; 5
    323e:	41 e0       	ldi	r20, 0x01	; 1
    3240:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	66 e0       	ldi	r22, 0x06	; 6
    3248:	41 e0       	ldi	r20, 0x01	; 1
    324a:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	67 e0       	ldi	r22, 0x07	; 7
    3252:	41 e0       	ldi	r20, 0x01	; 1
    3254:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    3258:	83 e0       	ldi	r24, 0x03	; 3
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    3262:	83 e0       	ldi	r24, 0x03	; 3
    3264:	61 e0       	ldi	r22, 0x01	; 1
    3266:	40 e0       	ldi	r20, 0x00	; 0
    3268:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    326c:	83 e0       	ldi	r24, 0x03	; 3
    326e:	64 e0       	ldi	r22, 0x04	; 4
    3270:	40 e0       	ldi	r20, 0x00	; 0
    3272:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    3276:	83 e0       	ldi	r24, 0x03	; 3
    3278:	65 e0       	ldi	r22, 0x05	; 5
    327a:	40 e0       	ldi	r20, 0x00	; 0
    327c:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    3280:	83 e0       	ldi	r24, 0x03	; 3
    3282:	60 e0       	ldi	r22, 0x00	; 0
    3284:	41 e0       	ldi	r20, 0x01	; 1
    3286:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    328a:	83 e0       	ldi	r24, 0x03	; 3
    328c:	61 e0       	ldi	r22, 0x01	; 1
    328e:	41 e0       	ldi	r20, 0x01	; 1
    3290:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    3294:	83 e0       	ldi	r24, 0x03	; 3
    3296:	64 e0       	ldi	r22, 0x04	; 4
    3298:	41 e0       	ldi	r20, 0x01	; 1
    329a:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    329e:	83 e0       	ldi	r24, 0x03	; 3
    32a0:	65 e0       	ldi	r22, 0x05	; 5
    32a2:	41 e0       	ldi	r20, 0x01	; 1
    32a4:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    32ae:	0f 90       	pop	r0
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	08 95       	ret

000032b6 <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
    32be:	2a 97       	sbiw	r28, 0x0a	; 10
    32c0:	0f b6       	in	r0, 0x3f	; 63
    32c2:	f8 94       	cli
    32c4:	de bf       	out	0x3e, r29	; 62
    32c6:	0f be       	out	0x3f, r0	; 63
    32c8:	cd bf       	out	0x3d, r28	; 61
    32ca:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    32cc:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	8a 83       	std	Y+2, r24	; 0x02
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	8b 83       	std	Y+3, r24	; 0x03
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	8c 83       	std	Y+4, r24	; 0x04
    32da:	81 e0       	ldi	r24, 0x01	; 1
    32dc:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    32de:	84 e0       	ldi	r24, 0x04	; 4
    32e0:	8e 83       	std	Y+6, r24	; 0x06
    32e2:	85 e0       	ldi	r24, 0x05	; 5
    32e4:	8f 83       	std	Y+7, r24	; 0x07
    32e6:	86 e0       	ldi	r24, 0x06	; 6
    32e8:	88 87       	std	Y+8, r24	; 0x08
    32ea:	87 e0       	ldi	r24, 0x07	; 7
    32ec:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    32ee:	19 82       	std	Y+1, r1	; 0x01
    32f0:	36 c0       	rjmp	.+108    	; 0x335e <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    32f2:	99 81       	ldd	r25, Y+1	; 0x01
    32f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    32f6:	98 17       	cp	r25, r24
    32f8:	c1 f4       	brne	.+48     	; 0x332a <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	28 2f       	mov	r18, r24
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	ce 01       	movw	r24, r28
    3302:	02 96       	adiw	r24, 0x02	; 2
    3304:	fc 01       	movw	r30, r24
    3306:	e2 0f       	add	r30, r18
    3308:	f3 1f       	adc	r31, r19
    330a:	40 81       	ld	r20, Z
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	28 2f       	mov	r18, r24
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	ce 01       	movw	r24, r28
    3314:	06 96       	adiw	r24, 0x06	; 6
    3316:	fc 01       	movw	r30, r24
    3318:	e2 0f       	add	r30, r18
    331a:	f3 1f       	adc	r31, r19
    331c:	90 81       	ld	r25, Z
    331e:	84 2f       	mov	r24, r20
    3320:	69 2f       	mov	r22, r25
    3322:	40 e0       	ldi	r20, 0x00	; 0
    3324:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
    3328:	17 c0       	rjmp	.+46     	; 0x3358 <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    332a:	89 81       	ldd	r24, Y+1	; 0x01
    332c:	28 2f       	mov	r18, r24
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	ce 01       	movw	r24, r28
    3332:	02 96       	adiw	r24, 0x02	; 2
    3334:	fc 01       	movw	r30, r24
    3336:	e2 0f       	add	r30, r18
    3338:	f3 1f       	adc	r31, r19
    333a:	40 81       	ld	r20, Z
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	28 2f       	mov	r18, r24
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	ce 01       	movw	r24, r28
    3344:	06 96       	adiw	r24, 0x06	; 6
    3346:	fc 01       	movw	r30, r24
    3348:	e2 0f       	add	r30, r18
    334a:	f3 1f       	adc	r31, r19
    334c:	90 81       	ld	r25, Z
    334e:	84 2f       	mov	r24, r20
    3350:	69 2f       	mov	r22, r25
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3358:	89 81       	ldd	r24, Y+1	; 0x01
    335a:	8f 5f       	subi	r24, 0xFF	; 255
    335c:	89 83       	std	Y+1, r24	; 0x01
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	84 30       	cpi	r24, 0x04	; 4
    3362:	38 f2       	brcs	.-114    	; 0x32f2 <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    3364:	2a 96       	adiw	r28, 0x0a	; 10
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	cd bf       	out	0x3d, r28	; 61
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	08 95       	ret

00003376 <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    3376:	df 93       	push	r29
    3378:	cf 93       	push	r28
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	2f 97       	sbiw	r28, 0x0f	; 15
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	9e 87       	std	Y+14, r25	; 0x0e
    338c:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    338e:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    3390:	8d 85       	ldd	r24, Y+13	; 0x0d
    3392:	9e 85       	ldd	r25, Y+14	; 0x0e
    3394:	00 97       	sbiw	r24, 0x00	; 0
    3396:	19 f4       	brne	.+6      	; 0x339e <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    3398:	8b 81       	ldd	r24, Y+3	; 0x03
    339a:	8f 87       	std	Y+15, r24	; 0x0f
    339c:	7e c0       	rjmp	.+252    	; 0x349a <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    33a2:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    33a4:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    33a6:	83 e0       	ldi	r24, 0x03	; 3
    33a8:	8d 83       	std	Y+5, r24	; 0x05
    33aa:	83 e0       	ldi	r24, 0x03	; 3
    33ac:	8e 83       	std	Y+6, r24	; 0x06
    33ae:	83 e0       	ldi	r24, 0x03	; 3
    33b0:	8f 83       	std	Y+7, r24	; 0x07
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    33b6:	19 86       	std	Y+9, r1	; 0x09
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	8a 87       	std	Y+10, r24	; 0x0a
    33bc:	84 e0       	ldi	r24, 0x04	; 4
    33be:	8b 87       	std	Y+11, r24	; 0x0b
    33c0:	85 e0       	ldi	r24, 0x05	; 5
    33c2:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    33c4:	1a 82       	std	Y+2, r1	; 0x02
    33c6:	63 c0       	rjmp	.+198    	; 0x348e <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    33c8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ca:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    33ce:	19 82       	std	Y+1, r1	; 0x01
    33d0:	57 c0       	rjmp	.+174    	; 0x3480 <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    33d2:	89 81       	ldd	r24, Y+1	; 0x01
    33d4:	28 2f       	mov	r18, r24
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	ce 01       	movw	r24, r28
    33da:	05 96       	adiw	r24, 0x05	; 5
    33dc:	fc 01       	movw	r30, r24
    33de:	e2 0f       	add	r30, r18
    33e0:	f3 1f       	adc	r31, r19
    33e2:	40 81       	ld	r20, Z
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	28 2f       	mov	r18, r24
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	ce 01       	movw	r24, r28
    33ec:	09 96       	adiw	r24, 0x09	; 9
    33ee:	fc 01       	movw	r30, r24
    33f0:	e2 0f       	add	r30, r18
    33f2:	f3 1f       	adc	r31, r19
    33f4:	90 81       	ld	r25, Z
    33f6:	9e 01       	movw	r18, r28
    33f8:	2c 5f       	subi	r18, 0xFC	; 252
    33fa:	3f 4f       	sbci	r19, 0xFF	; 255
    33fc:	84 2f       	mov	r24, r20
    33fe:	69 2f       	mov	r22, r25
    3400:	a9 01       	movw	r20, r18
    3402:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    3406:	8c 81       	ldd	r24, Y+4	; 0x04
    3408:	88 23       	and	r24, r24
    340a:	b9 f5       	brne	.+110    	; 0x347a <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    340c:	8a 81       	ldd	r24, Y+2	; 0x02
    340e:	88 2f       	mov	r24, r24
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	9c 01       	movw	r18, r24
    3414:	22 0f       	add	r18, r18
    3416:	33 1f       	adc	r19, r19
    3418:	22 0f       	add	r18, r18
    341a:	33 1f       	adc	r19, r19
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	88 2f       	mov	r24, r24
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	82 0f       	add	r24, r18
    3424:	93 1f       	adc	r25, r19
    3426:	fc 01       	movw	r30, r24
    3428:	e4 58       	subi	r30, 0x84	; 132
    342a:	fe 4f       	sbci	r31, 0xFE	; 254
    342c:	80 81       	ld	r24, Z
    342e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3430:	fe 85       	ldd	r31, Y+14	; 0x0e
    3432:	80 83       	st	Z, r24
    3434:	1a c0       	rjmp	.+52     	; 0x346a <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	28 2f       	mov	r18, r24
    343a:	30 e0       	ldi	r19, 0x00	; 0
    343c:	ce 01       	movw	r24, r28
    343e:	05 96       	adiw	r24, 0x05	; 5
    3440:	fc 01       	movw	r30, r24
    3442:	e2 0f       	add	r30, r18
    3444:	f3 1f       	adc	r31, r19
    3446:	40 81       	ld	r20, Z
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	28 2f       	mov	r18, r24
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	ce 01       	movw	r24, r28
    3450:	09 96       	adiw	r24, 0x09	; 9
    3452:	fc 01       	movw	r30, r24
    3454:	e2 0f       	add	r30, r18
    3456:	f3 1f       	adc	r31, r19
    3458:	90 81       	ld	r25, Z
    345a:	9e 01       	movw	r18, r28
    345c:	2c 5f       	subi	r18, 0xFC	; 252
    345e:	3f 4f       	sbci	r19, 0xFF	; 255
    3460:	84 2f       	mov	r24, r20
    3462:	69 2f       	mov	r22, r25
    3464:	a9 01       	movw	r20, r18
    3466:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    346a:	8c 81       	ldd	r24, Y+4	; 0x04
    346c:	88 23       	and	r24, r24
    346e:	19 f3       	breq	.-58     	; 0x3436 <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    3474:	8b 81       	ldd	r24, Y+3	; 0x03
    3476:	8f 87       	std	Y+15, r24	; 0x0f
    3478:	10 c0       	rjmp	.+32     	; 0x349a <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	8f 5f       	subi	r24, 0xFF	; 255
    347e:	89 83       	std	Y+1, r24	; 0x01
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	84 30       	cpi	r24, 0x04	; 4
    3484:	08 f4       	brcc	.+2      	; 0x3488 <keypad_enuGetPressedKey+0x112>
    3486:	a5 cf       	rjmp	.-182    	; 0x33d2 <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3488:	8a 81       	ldd	r24, Y+2	; 0x02
    348a:	8f 5f       	subi	r24, 0xFF	; 255
    348c:	8a 83       	std	Y+2, r24	; 0x02
    348e:	8a 81       	ldd	r24, Y+2	; 0x02
    3490:	84 30       	cpi	r24, 0x04	; 4
    3492:	08 f4       	brcc	.+2      	; 0x3496 <keypad_enuGetPressedKey+0x120>
    3494:	99 cf       	rjmp	.-206    	; 0x33c8 <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	8f 87       	std	Y+15, r24	; 0x0f
    349a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    349c:	2f 96       	adiw	r28, 0x0f	; 15
    349e:	0f b6       	in	r0, 0x3f	; 63
    34a0:	f8 94       	cli
    34a2:	de bf       	out	0x3e, r29	; 62
    34a4:	0f be       	out	0x3f, r0	; 63
    34a6:	cd bf       	out	0x3d, r28	; 61
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	cd b7       	in	r28, 0x3d	; 61
    34b4:	de b7       	in	r29, 0x3e	; 62
    34b6:	e9 97       	sbiw	r28, 0x39	; 57
    34b8:	0f b6       	in	r0, 0x3f	; 63
    34ba:	f8 94       	cli
    34bc:	de bf       	out	0x3e, r29	; 62
    34be:	0f be       	out	0x3f, r0	; 63
    34c0:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    34c2:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	60 e0       	ldi	r22, 0x00	; 0
    34c8:	41 e0       	ldi	r20, 0x01	; 1
    34ca:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    34ce:	80 e0       	ldi	r24, 0x00	; 0
    34d0:	61 e0       	ldi	r22, 0x01	; 1
    34d2:	41 e0       	ldi	r20, 0x01	; 1
    34d4:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	62 e0       	ldi	r22, 0x02	; 2
    34dc:	41 e0       	ldi	r20, 0x01	; 1
    34de:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	63 e0       	ldi	r22, 0x03	; 3
    34e6:	41 e0       	ldi	r20, 0x01	; 1
    34e8:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    34ec:	81 e0       	ldi	r24, 0x01	; 1
    34ee:	62 e0       	ldi	r22, 0x02	; 2
    34f0:	41 e0       	ldi	r20, 0x01	; 1
    34f2:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	61 e0       	ldi	r22, 0x01	; 1
    34fa:	41 e0       	ldi	r20, 0x01	; 1
    34fc:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	60 e0       	ldi	r22, 0x00	; 0
    3504:	41 e0       	ldi	r20, 0x01	; 1
    3506:	0e 94 b3 13 	call	0x2766	; 0x2766 <DIO_enuSetPinDirection>
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	ac e0       	ldi	r26, 0x0C	; 12
    3510:	b2 e4       	ldi	r27, 0x42	; 66
    3512:	8d ab       	std	Y+53, r24	; 0x35
    3514:	9e ab       	std	Y+54, r25	; 0x36
    3516:	af ab       	std	Y+55, r26	; 0x37
    3518:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    351a:	6d a9       	ldd	r22, Y+53	; 0x35
    351c:	7e a9       	ldd	r23, Y+54	; 0x36
    351e:	8f a9       	ldd	r24, Y+55	; 0x37
    3520:	98 ad       	ldd	r25, Y+56	; 0x38
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	4a e7       	ldi	r20, 0x7A	; 122
    3528:	55 e4       	ldi	r21, 0x45	; 69
    352a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	89 ab       	std	Y+49, r24	; 0x31
    3534:	9a ab       	std	Y+50, r25	; 0x32
    3536:	ab ab       	std	Y+51, r26	; 0x33
    3538:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    353a:	69 a9       	ldd	r22, Y+49	; 0x31
    353c:	7a a9       	ldd	r23, Y+50	; 0x32
    353e:	8b a9       	ldd	r24, Y+51	; 0x33
    3540:	9c a9       	ldd	r25, Y+52	; 0x34
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	40 e8       	ldi	r20, 0x80	; 128
    3548:	5f e3       	ldi	r21, 0x3F	; 63
    354a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    354e:	88 23       	and	r24, r24
    3550:	2c f4       	brge	.+10     	; 0x355c <LCD_enuInit+0xae>
		__ticks = 1;
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	98 ab       	std	Y+48, r25	; 0x30
    3558:	8f a7       	std	Y+47, r24	; 0x2f
    355a:	3f c0       	rjmp	.+126    	; 0x35da <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    355c:	69 a9       	ldd	r22, Y+49	; 0x31
    355e:	7a a9       	ldd	r23, Y+50	; 0x32
    3560:	8b a9       	ldd	r24, Y+51	; 0x33
    3562:	9c a9       	ldd	r25, Y+52	; 0x34
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	3f ef       	ldi	r19, 0xFF	; 255
    3568:	4f e7       	ldi	r20, 0x7F	; 127
    356a:	57 e4       	ldi	r21, 0x47	; 71
    356c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3570:	18 16       	cp	r1, r24
    3572:	4c f5       	brge	.+82     	; 0x35c6 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3574:	6d a9       	ldd	r22, Y+53	; 0x35
    3576:	7e a9       	ldd	r23, Y+54	; 0x36
    3578:	8f a9       	ldd	r24, Y+55	; 0x37
    357a:	98 ad       	ldd	r25, Y+56	; 0x38
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e2       	ldi	r20, 0x20	; 32
    3582:	51 e4       	ldi	r21, 0x41	; 65
    3584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	bc 01       	movw	r22, r24
    358e:	cd 01       	movw	r24, r26
    3590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	98 ab       	std	Y+48, r25	; 0x30
    359a:	8f a7       	std	Y+47, r24	; 0x2f
    359c:	0f c0       	rjmp	.+30     	; 0x35bc <LCD_enuInit+0x10e>
    359e:	80 e9       	ldi	r24, 0x90	; 144
    35a0:	91 e0       	ldi	r25, 0x01	; 1
    35a2:	9e a7       	std	Y+46, r25	; 0x2e
    35a4:	8d a7       	std	Y+45, r24	; 0x2d
    35a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    35a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	f1 f7       	brne	.-4      	; 0x35aa <LCD_enuInit+0xfc>
    35ae:	9e a7       	std	Y+46, r25	; 0x2e
    35b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    35b4:	98 a9       	ldd	r25, Y+48	; 0x30
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	98 ab       	std	Y+48, r25	; 0x30
    35ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    35be:	98 a9       	ldd	r25, Y+48	; 0x30
    35c0:	00 97       	sbiw	r24, 0x00	; 0
    35c2:	69 f7       	brne	.-38     	; 0x359e <LCD_enuInit+0xf0>
    35c4:	14 c0       	rjmp	.+40     	; 0x35ee <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c6:	69 a9       	ldd	r22, Y+49	; 0x31
    35c8:	7a a9       	ldd	r23, Y+50	; 0x32
    35ca:	8b a9       	ldd	r24, Y+51	; 0x33
    35cc:	9c a9       	ldd	r25, Y+52	; 0x34
    35ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	98 ab       	std	Y+48, r25	; 0x30
    35d8:	8f a7       	std	Y+47, r24	; 0x2f
    35da:	8f a5       	ldd	r24, Y+47	; 0x2f
    35dc:	98 a9       	ldd	r25, Y+48	; 0x30
    35de:	9c a7       	std	Y+44, r25	; 0x2c
    35e0:	8b a7       	std	Y+43, r24	; 0x2b
    35e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    35e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <LCD_enuInit+0x138>
    35ea:	9c a7       	std	Y+44, r25	; 0x2c
    35ec:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    35ee:	80 e2       	ldi	r24, 0x20	; 32
    35f0:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    35f4:	80 e2       	ldi	r24, 0x20	; 32
    35f6:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    35fa:	80 e8       	ldi	r24, 0x80	; 128
    35fc:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
    3600:	80 e0       	ldi	r24, 0x00	; 0
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	a0 e8       	ldi	r26, 0x80	; 128
    3606:	bf e3       	ldi	r27, 0x3F	; 63
    3608:	8f a3       	std	Y+39, r24	; 0x27
    360a:	98 a7       	std	Y+40, r25	; 0x28
    360c:	a9 a7       	std	Y+41, r26	; 0x29
    360e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3610:	6f a1       	ldd	r22, Y+39	; 0x27
    3612:	78 a5       	ldd	r23, Y+40	; 0x28
    3614:	89 a5       	ldd	r24, Y+41	; 0x29
    3616:	9a a5       	ldd	r25, Y+42	; 0x2a
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	4a e7       	ldi	r20, 0x7A	; 122
    361e:	55 e4       	ldi	r21, 0x45	; 69
    3620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	8b a3       	std	Y+35, r24	; 0x23
    362a:	9c a3       	std	Y+36, r25	; 0x24
    362c:	ad a3       	std	Y+37, r26	; 0x25
    362e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3630:	6b a1       	ldd	r22, Y+35	; 0x23
    3632:	7c a1       	ldd	r23, Y+36	; 0x24
    3634:	8d a1       	ldd	r24, Y+37	; 0x25
    3636:	9e a1       	ldd	r25, Y+38	; 0x26
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	40 e8       	ldi	r20, 0x80	; 128
    363e:	5f e3       	ldi	r21, 0x3F	; 63
    3640:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3644:	88 23       	and	r24, r24
    3646:	2c f4       	brge	.+10     	; 0x3652 <LCD_enuInit+0x1a4>
		__ticks = 1;
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	9a a3       	std	Y+34, r25	; 0x22
    364e:	89 a3       	std	Y+33, r24	; 0x21
    3650:	3f c0       	rjmp	.+126    	; 0x36d0 <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    3652:	6b a1       	ldd	r22, Y+35	; 0x23
    3654:	7c a1       	ldd	r23, Y+36	; 0x24
    3656:	8d a1       	ldd	r24, Y+37	; 0x25
    3658:	9e a1       	ldd	r25, Y+38	; 0x26
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	3f ef       	ldi	r19, 0xFF	; 255
    365e:	4f e7       	ldi	r20, 0x7F	; 127
    3660:	57 e4       	ldi	r21, 0x47	; 71
    3662:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3666:	18 16       	cp	r1, r24
    3668:	4c f5       	brge	.+82     	; 0x36bc <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366a:	6f a1       	ldd	r22, Y+39	; 0x27
    366c:	78 a5       	ldd	r23, Y+40	; 0x28
    366e:	89 a5       	ldd	r24, Y+41	; 0x29
    3670:	9a a5       	ldd	r25, Y+42	; 0x2a
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	40 e2       	ldi	r20, 0x20	; 32
    3678:	51 e4       	ldi	r21, 0x41	; 65
    367a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	bc 01       	movw	r22, r24
    3684:	cd 01       	movw	r24, r26
    3686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	9a a3       	std	Y+34, r25	; 0x22
    3690:	89 a3       	std	Y+33, r24	; 0x21
    3692:	0f c0       	rjmp	.+30     	; 0x36b2 <LCD_enuInit+0x204>
    3694:	80 e9       	ldi	r24, 0x90	; 144
    3696:	91 e0       	ldi	r25, 0x01	; 1
    3698:	98 a3       	std	Y+32, r25	; 0x20
    369a:	8f 8f       	std	Y+31, r24	; 0x1f
    369c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    369e:	98 a1       	ldd	r25, Y+32	; 0x20
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	f1 f7       	brne	.-4      	; 0x36a0 <LCD_enuInit+0x1f2>
    36a4:	98 a3       	std	Y+32, r25	; 0x20
    36a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a8:	89 a1       	ldd	r24, Y+33	; 0x21
    36aa:	9a a1       	ldd	r25, Y+34	; 0x22
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	9a a3       	std	Y+34, r25	; 0x22
    36b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b2:	89 a1       	ldd	r24, Y+33	; 0x21
    36b4:	9a a1       	ldd	r25, Y+34	; 0x22
    36b6:	00 97       	sbiw	r24, 0x00	; 0
    36b8:	69 f7       	brne	.-38     	; 0x3694 <LCD_enuInit+0x1e6>
    36ba:	14 c0       	rjmp	.+40     	; 0x36e4 <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36bc:	6b a1       	ldd	r22, Y+35	; 0x23
    36be:	7c a1       	ldd	r23, Y+36	; 0x24
    36c0:	8d a1       	ldd	r24, Y+37	; 0x25
    36c2:	9e a1       	ldd	r25, Y+38	; 0x26
    36c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c8:	dc 01       	movw	r26, r24
    36ca:	cb 01       	movw	r24, r22
    36cc:	9a a3       	std	Y+34, r25	; 0x22
    36ce:	89 a3       	std	Y+33, r24	; 0x21
    36d0:	89 a1       	ldd	r24, Y+33	; 0x21
    36d2:	9a a1       	ldd	r25, Y+34	; 0x22
    36d4:	9e 8f       	std	Y+30, r25	; 0x1e
    36d6:	8d 8f       	std	Y+29, r24	; 0x1d
    36d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    36da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    36dc:	01 97       	sbiw	r24, 0x01	; 1
    36de:	f1 f7       	brne	.-4      	; 0x36dc <LCD_enuInit+0x22e>
    36e0:	9e 8f       	std	Y+30, r25	; 0x1e
    36e2:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    36ea:	80 ef       	ldi	r24, 0xF0	; 240
    36ec:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	a0 e8       	ldi	r26, 0x80	; 128
    36f6:	bf e3       	ldi	r27, 0x3F	; 63
    36f8:	89 8f       	std	Y+25, r24	; 0x19
    36fa:	9a 8f       	std	Y+26, r25	; 0x1a
    36fc:	ab 8f       	std	Y+27, r26	; 0x1b
    36fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3700:	69 8d       	ldd	r22, Y+25	; 0x19
    3702:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3704:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3706:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	4a e7       	ldi	r20, 0x7A	; 122
    370e:	55 e4       	ldi	r21, 0x45	; 69
    3710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	8d 8b       	std	Y+21, r24	; 0x15
    371a:	9e 8b       	std	Y+22, r25	; 0x16
    371c:	af 8b       	std	Y+23, r26	; 0x17
    371e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3720:	6d 89       	ldd	r22, Y+21	; 0x15
    3722:	7e 89       	ldd	r23, Y+22	; 0x16
    3724:	8f 89       	ldd	r24, Y+23	; 0x17
    3726:	98 8d       	ldd	r25, Y+24	; 0x18
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e8       	ldi	r20, 0x80	; 128
    372e:	5f e3       	ldi	r21, 0x3F	; 63
    3730:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3734:	88 23       	and	r24, r24
    3736:	2c f4       	brge	.+10     	; 0x3742 <LCD_enuInit+0x294>
		__ticks = 1;
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	9c 8b       	std	Y+20, r25	; 0x14
    373e:	8b 8b       	std	Y+19, r24	; 0x13
    3740:	3f c0       	rjmp	.+126    	; 0x37c0 <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    3742:	6d 89       	ldd	r22, Y+21	; 0x15
    3744:	7e 89       	ldd	r23, Y+22	; 0x16
    3746:	8f 89       	ldd	r24, Y+23	; 0x17
    3748:	98 8d       	ldd	r25, Y+24	; 0x18
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	3f ef       	ldi	r19, 0xFF	; 255
    374e:	4f e7       	ldi	r20, 0x7F	; 127
    3750:	57 e4       	ldi	r21, 0x47	; 71
    3752:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3756:	18 16       	cp	r1, r24
    3758:	4c f5       	brge	.+82     	; 0x37ac <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    375a:	69 8d       	ldd	r22, Y+25	; 0x19
    375c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    375e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3760:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e2       	ldi	r20, 0x20	; 32
    3768:	51 e4       	ldi	r21, 0x41	; 65
    376a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	bc 01       	movw	r22, r24
    3774:	cd 01       	movw	r24, r26
    3776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	9c 8b       	std	Y+20, r25	; 0x14
    3780:	8b 8b       	std	Y+19, r24	; 0x13
    3782:	0f c0       	rjmp	.+30     	; 0x37a2 <LCD_enuInit+0x2f4>
    3784:	80 e9       	ldi	r24, 0x90	; 144
    3786:	91 e0       	ldi	r25, 0x01	; 1
    3788:	9a 8b       	std	Y+18, r25	; 0x12
    378a:	89 8b       	std	Y+17, r24	; 0x11
    378c:	89 89       	ldd	r24, Y+17	; 0x11
    378e:	9a 89       	ldd	r25, Y+18	; 0x12
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <LCD_enuInit+0x2e2>
    3794:	9a 8b       	std	Y+18, r25	; 0x12
    3796:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3798:	8b 89       	ldd	r24, Y+19	; 0x13
    379a:	9c 89       	ldd	r25, Y+20	; 0x14
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	9c 8b       	std	Y+20, r25	; 0x14
    37a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a2:	8b 89       	ldd	r24, Y+19	; 0x13
    37a4:	9c 89       	ldd	r25, Y+20	; 0x14
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	69 f7       	brne	.-38     	; 0x3784 <LCD_enuInit+0x2d6>
    37aa:	14 c0       	rjmp	.+40     	; 0x37d4 <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ac:	6d 89       	ldd	r22, Y+21	; 0x15
    37ae:	7e 89       	ldd	r23, Y+22	; 0x16
    37b0:	8f 89       	ldd	r24, Y+23	; 0x17
    37b2:	98 8d       	ldd	r25, Y+24	; 0x18
    37b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	9c 8b       	std	Y+20, r25	; 0x14
    37be:	8b 8b       	std	Y+19, r24	; 0x13
    37c0:	8b 89       	ldd	r24, Y+19	; 0x13
    37c2:	9c 89       	ldd	r25, Y+20	; 0x14
    37c4:	98 8b       	std	Y+16, r25	; 0x10
    37c6:	8f 87       	std	Y+15, r24	; 0x0f
    37c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    37ca:	98 89       	ldd	r25, Y+16	; 0x10
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <LCD_enuInit+0x31e>
    37d0:	98 8b       	std	Y+16, r25	; 0x10
    37d2:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	a0 e0       	ldi	r26, 0x00	; 0
    37e6:	b0 e4       	ldi	r27, 0x40	; 64
    37e8:	8b 87       	std	Y+11, r24	; 0x0b
    37ea:	9c 87       	std	Y+12, r25	; 0x0c
    37ec:	ad 87       	std	Y+13, r26	; 0x0d
    37ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    37f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    37f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	4a e7       	ldi	r20, 0x7A	; 122
    37fe:	55 e4       	ldi	r21, 0x45	; 69
    3800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	8f 83       	std	Y+7, r24	; 0x07
    380a:	98 87       	std	Y+8, r25	; 0x08
    380c:	a9 87       	std	Y+9, r26	; 0x09
    380e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3810:	6f 81       	ldd	r22, Y+7	; 0x07
    3812:	78 85       	ldd	r23, Y+8	; 0x08
    3814:	89 85       	ldd	r24, Y+9	; 0x09
    3816:	9a 85       	ldd	r25, Y+10	; 0x0a
    3818:	20 e0       	ldi	r18, 0x00	; 0
    381a:	30 e0       	ldi	r19, 0x00	; 0
    381c:	40 e8       	ldi	r20, 0x80	; 128
    381e:	5f e3       	ldi	r21, 0x3F	; 63
    3820:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3824:	88 23       	and	r24, r24
    3826:	2c f4       	brge	.+10     	; 0x3832 <LCD_enuInit+0x384>
		__ticks = 1;
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	9e 83       	std	Y+6, r25	; 0x06
    382e:	8d 83       	std	Y+5, r24	; 0x05
    3830:	3f c0       	rjmp	.+126    	; 0x38b0 <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    3832:	6f 81       	ldd	r22, Y+7	; 0x07
    3834:	78 85       	ldd	r23, Y+8	; 0x08
    3836:	89 85       	ldd	r24, Y+9	; 0x09
    3838:	9a 85       	ldd	r25, Y+10	; 0x0a
    383a:	20 e0       	ldi	r18, 0x00	; 0
    383c:	3f ef       	ldi	r19, 0xFF	; 255
    383e:	4f e7       	ldi	r20, 0x7F	; 127
    3840:	57 e4       	ldi	r21, 0x47	; 71
    3842:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3846:	18 16       	cp	r1, r24
    3848:	4c f5       	brge	.+82     	; 0x389c <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    384a:	6b 85       	ldd	r22, Y+11	; 0x0b
    384c:	7c 85       	ldd	r23, Y+12	; 0x0c
    384e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3850:	9e 85       	ldd	r25, Y+14	; 0x0e
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	40 e2       	ldi	r20, 0x20	; 32
    3858:	51 e4       	ldi	r21, 0x41	; 65
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	bc 01       	movw	r22, r24
    3864:	cd 01       	movw	r24, r26
    3866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    386a:	dc 01       	movw	r26, r24
    386c:	cb 01       	movw	r24, r22
    386e:	9e 83       	std	Y+6, r25	; 0x06
    3870:	8d 83       	std	Y+5, r24	; 0x05
    3872:	0f c0       	rjmp	.+30     	; 0x3892 <LCD_enuInit+0x3e4>
    3874:	80 e9       	ldi	r24, 0x90	; 144
    3876:	91 e0       	ldi	r25, 0x01	; 1
    3878:	9c 83       	std	Y+4, r25	; 0x04
    387a:	8b 83       	std	Y+3, r24	; 0x03
    387c:	8b 81       	ldd	r24, Y+3	; 0x03
    387e:	9c 81       	ldd	r25, Y+4	; 0x04
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	f1 f7       	brne	.-4      	; 0x3880 <LCD_enuInit+0x3d2>
    3884:	9c 83       	std	Y+4, r25	; 0x04
    3886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3888:	8d 81       	ldd	r24, Y+5	; 0x05
    388a:	9e 81       	ldd	r25, Y+6	; 0x06
    388c:	01 97       	sbiw	r24, 0x01	; 1
    388e:	9e 83       	std	Y+6, r25	; 0x06
    3890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3892:	8d 81       	ldd	r24, Y+5	; 0x05
    3894:	9e 81       	ldd	r25, Y+6	; 0x06
    3896:	00 97       	sbiw	r24, 0x00	; 0
    3898:	69 f7       	brne	.-38     	; 0x3874 <LCD_enuInit+0x3c6>
    389a:	14 c0       	rjmp	.+40     	; 0x38c4 <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    389c:	6f 81       	ldd	r22, Y+7	; 0x07
    389e:	78 85       	ldd	r23, Y+8	; 0x08
    38a0:	89 85       	ldd	r24, Y+9	; 0x09
    38a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	9e 83       	std	Y+6, r25	; 0x06
    38ae:	8d 83       	std	Y+5, r24	; 0x05
    38b0:	8d 81       	ldd	r24, Y+5	; 0x05
    38b2:	9e 81       	ldd	r25, Y+6	; 0x06
    38b4:	9a 83       	std	Y+2, r25	; 0x02
    38b6:	89 83       	std	Y+1, r24	; 0x01
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	9a 81       	ldd	r25, Y+2	; 0x02
    38bc:	01 97       	sbiw	r24, 0x01	; 1
    38be:	f1 f7       	brne	.-4      	; 0x38bc <LCD_enuInit+0x40e>
    38c0:	9a 83       	std	Y+2, r25	; 0x02
    38c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    38ca:	86 e0       	ldi	r24, 0x06	; 6
    38cc:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	80 93 aa 01 	sts	0x01AA, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    38da:	89 ad       	ldd	r24, Y+57	; 0x39
}
    38dc:	e9 96       	adiw	r28, 0x39	; 57
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	de bf       	out	0x3e, r29	; 62
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	cf 91       	pop	r28
    38ea:	df 91       	pop	r29
    38ec:	08 95       	ret

000038ee <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    38ee:	df 93       	push	r29
    38f0:	cf 93       	push	r28
    38f2:	cd b7       	in	r28, 0x3d	; 61
    38f4:	de b7       	in	r29, 0x3e	; 62
    38f6:	6e 97       	sbiw	r28, 0x1e	; 30
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	de bf       	out	0x3e, r29	; 62
    38fe:	0f be       	out	0x3f, r0	; 63
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3904:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    3906:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3908:	82 95       	swap	r24
    390a:	8f 70       	andi	r24, 0x0F	; 15
    390c:	98 2f       	mov	r25, r24
    390e:	91 70       	andi	r25, 0x01	; 1
    3910:	81 e0       	ldi	r24, 0x01	; 1
    3912:	60 e0       	ldi	r22, 0x00	; 0
    3914:	49 2f       	mov	r20, r25
    3916:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    391a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    391c:	82 95       	swap	r24
    391e:	86 95       	lsr	r24
    3920:	87 70       	andi	r24, 0x07	; 7
    3922:	98 2f       	mov	r25, r24
    3924:	91 70       	andi	r25, 0x01	; 1
    3926:	81 e0       	ldi	r24, 0x01	; 1
    3928:	61 e0       	ldi	r22, 0x01	; 1
    392a:	49 2f       	mov	r20, r25
    392c:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    3930:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3932:	82 95       	swap	r24
    3934:	86 95       	lsr	r24
    3936:	86 95       	lsr	r24
    3938:	83 70       	andi	r24, 0x03	; 3
    393a:	98 2f       	mov	r25, r24
    393c:	91 70       	andi	r25, 0x01	; 1
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	62 e0       	ldi	r22, 0x02	; 2
    3942:	49 2f       	mov	r20, r25
    3944:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    3948:	8e 8d       	ldd	r24, Y+30	; 0x1e
    394a:	98 2f       	mov	r25, r24
    394c:	99 1f       	adc	r25, r25
    394e:	99 27       	eor	r25, r25
    3950:	99 1f       	adc	r25, r25
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	63 e0       	ldi	r22, 0x03	; 3
    3956:	49 2f       	mov	r20, r25
    3958:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	62 e0       	ldi	r22, 0x02	; 2
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	a0 e0       	ldi	r26, 0x00	; 0
    396c:	b0 e4       	ldi	r27, 0x40	; 64
    396e:	89 8f       	std	Y+25, r24	; 0x19
    3970:	9a 8f       	std	Y+26, r25	; 0x1a
    3972:	ab 8f       	std	Y+27, r26	; 0x1b
    3974:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3976:	69 8d       	ldd	r22, Y+25	; 0x19
    3978:	7a 8d       	ldd	r23, Y+26	; 0x1a
    397a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    397c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    397e:	20 e0       	ldi	r18, 0x00	; 0
    3980:	30 e0       	ldi	r19, 0x00	; 0
    3982:	4a e7       	ldi	r20, 0x7A	; 122
    3984:	55 e4       	ldi	r21, 0x45	; 69
    3986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	8d 8b       	std	Y+21, r24	; 0x15
    3990:	9e 8b       	std	Y+22, r25	; 0x16
    3992:	af 8b       	std	Y+23, r26	; 0x17
    3994:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3996:	6d 89       	ldd	r22, Y+21	; 0x15
    3998:	7e 89       	ldd	r23, Y+22	; 0x16
    399a:	8f 89       	ldd	r24, Y+23	; 0x17
    399c:	98 8d       	ldd	r25, Y+24	; 0x18
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e8       	ldi	r20, 0x80	; 128
    39a4:	5f e3       	ldi	r21, 0x3F	; 63
    39a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    39aa:	88 23       	and	r24, r24
    39ac:	2c f4       	brge	.+10     	; 0x39b8 <WriteNLatch+0xca>
		__ticks = 1;
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	9c 8b       	std	Y+20, r25	; 0x14
    39b4:	8b 8b       	std	Y+19, r24	; 0x13
    39b6:	3f c0       	rjmp	.+126    	; 0x3a36 <WriteNLatch+0x148>
	else if (__tmp > 65535)
    39b8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ba:	7e 89       	ldd	r23, Y+22	; 0x16
    39bc:	8f 89       	ldd	r24, Y+23	; 0x17
    39be:	98 8d       	ldd	r25, Y+24	; 0x18
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	3f ef       	ldi	r19, 0xFF	; 255
    39c4:	4f e7       	ldi	r20, 0x7F	; 127
    39c6:	57 e4       	ldi	r21, 0x47	; 71
    39c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39cc:	18 16       	cp	r1, r24
    39ce:	4c f5       	brge	.+82     	; 0x3a22 <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d0:	69 8d       	ldd	r22, Y+25	; 0x19
    39d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	40 e2       	ldi	r20, 0x20	; 32
    39de:	51 e4       	ldi	r21, 0x41	; 65
    39e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	bc 01       	movw	r22, r24
    39ea:	cd 01       	movw	r24, r26
    39ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f0:	dc 01       	movw	r26, r24
    39f2:	cb 01       	movw	r24, r22
    39f4:	9c 8b       	std	Y+20, r25	; 0x14
    39f6:	8b 8b       	std	Y+19, r24	; 0x13
    39f8:	0f c0       	rjmp	.+30     	; 0x3a18 <WriteNLatch+0x12a>
    39fa:	80 e9       	ldi	r24, 0x90	; 144
    39fc:	91 e0       	ldi	r25, 0x01	; 1
    39fe:	9a 8b       	std	Y+18, r25	; 0x12
    3a00:	89 8b       	std	Y+17, r24	; 0x11
    3a02:	89 89       	ldd	r24, Y+17	; 0x11
    3a04:	9a 89       	ldd	r25, Y+18	; 0x12
    3a06:	01 97       	sbiw	r24, 0x01	; 1
    3a08:	f1 f7       	brne	.-4      	; 0x3a06 <WriteNLatch+0x118>
    3a0a:	9a 8b       	std	Y+18, r25	; 0x12
    3a0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    3a10:	9c 89       	ldd	r25, Y+20	; 0x14
    3a12:	01 97       	sbiw	r24, 0x01	; 1
    3a14:	9c 8b       	std	Y+20, r25	; 0x14
    3a16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a18:	8b 89       	ldd	r24, Y+19	; 0x13
    3a1a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a1c:	00 97       	sbiw	r24, 0x00	; 0
    3a1e:	69 f7       	brne	.-38     	; 0x39fa <WriteNLatch+0x10c>
    3a20:	14 c0       	rjmp	.+40     	; 0x3a4a <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a22:	6d 89       	ldd	r22, Y+21	; 0x15
    3a24:	7e 89       	ldd	r23, Y+22	; 0x16
    3a26:	8f 89       	ldd	r24, Y+23	; 0x17
    3a28:	98 8d       	ldd	r25, Y+24	; 0x18
    3a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	9c 8b       	std	Y+20, r25	; 0x14
    3a34:	8b 8b       	std	Y+19, r24	; 0x13
    3a36:	8b 89       	ldd	r24, Y+19	; 0x13
    3a38:	9c 89       	ldd	r25, Y+20	; 0x14
    3a3a:	98 8b       	std	Y+16, r25	; 0x10
    3a3c:	8f 87       	std	Y+15, r24	; 0x0f
    3a3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a40:	98 89       	ldd	r25, Y+16	; 0x10
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	f1 f7       	brne	.-4      	; 0x3a42 <WriteNLatch+0x154>
    3a46:	98 8b       	std	Y+16, r25	; 0x10
    3a48:	8f 87       	std	Y+15, r24	; 0x0f
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	62 e0       	ldi	r22, 0x02	; 2
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    3a54:	80 91 aa 01 	lds	r24, 0x01AA
    3a58:	88 23       	and	r24, r24
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <WriteNLatch+0x170>
    3a5c:	a2 c0       	rjmp	.+324    	; 0x3ba2 <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    3a5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a60:	98 2f       	mov	r25, r24
    3a62:	91 70       	andi	r25, 0x01	; 1
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	60 e0       	ldi	r22, 0x00	; 0
    3a68:	49 2f       	mov	r20, r25
    3a6a:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    3a6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a70:	86 95       	lsr	r24
    3a72:	98 2f       	mov	r25, r24
    3a74:	91 70       	andi	r25, 0x01	; 1
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	61 e0       	ldi	r22, 0x01	; 1
    3a7a:	49 2f       	mov	r20, r25
    3a7c:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    3a80:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a82:	86 95       	lsr	r24
    3a84:	86 95       	lsr	r24
    3a86:	98 2f       	mov	r25, r24
    3a88:	91 70       	andi	r25, 0x01	; 1
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	62 e0       	ldi	r22, 0x02	; 2
    3a8e:	49 2f       	mov	r20, r25
    3a90:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    3a94:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3a96:	86 95       	lsr	r24
    3a98:	86 95       	lsr	r24
    3a9a:	86 95       	lsr	r24
    3a9c:	98 2f       	mov	r25, r24
    3a9e:	91 70       	andi	r25, 0x01	; 1
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	63 e0       	ldi	r22, 0x03	; 3
    3aa4:	49 2f       	mov	r20, r25
    3aa6:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
    3aac:	62 e0       	ldi	r22, 0x02	; 2
    3aae:	41 e0       	ldi	r20, 0x01	; 1
    3ab0:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
    3ab4:	80 e0       	ldi	r24, 0x00	; 0
    3ab6:	90 e0       	ldi	r25, 0x00	; 0
    3ab8:	a0 e0       	ldi	r26, 0x00	; 0
    3aba:	b0 e4       	ldi	r27, 0x40	; 64
    3abc:	8b 87       	std	Y+11, r24	; 0x0b
    3abe:	9c 87       	std	Y+12, r25	; 0x0c
    3ac0:	ad 87       	std	Y+13, r26	; 0x0d
    3ac2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3acc:	20 e0       	ldi	r18, 0x00	; 0
    3ace:	30 e0       	ldi	r19, 0x00	; 0
    3ad0:	4a e7       	ldi	r20, 0x7A	; 122
    3ad2:	55 e4       	ldi	r21, 0x45	; 69
    3ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ad8:	dc 01       	movw	r26, r24
    3ada:	cb 01       	movw	r24, r22
    3adc:	8f 83       	std	Y+7, r24	; 0x07
    3ade:	98 87       	std	Y+8, r25	; 0x08
    3ae0:	a9 87       	std	Y+9, r26	; 0x09
    3ae2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae6:	78 85       	ldd	r23, Y+8	; 0x08
    3ae8:	89 85       	ldd	r24, Y+9	; 0x09
    3aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	30 e0       	ldi	r19, 0x00	; 0
    3af0:	40 e8       	ldi	r20, 0x80	; 128
    3af2:	5f e3       	ldi	r21, 0x3F	; 63
    3af4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3af8:	88 23       	and	r24, r24
    3afa:	2c f4       	brge	.+10     	; 0x3b06 <WriteNLatch+0x218>
		__ticks = 1;
    3afc:	81 e0       	ldi	r24, 0x01	; 1
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	9e 83       	std	Y+6, r25	; 0x06
    3b02:	8d 83       	std	Y+5, r24	; 0x05
    3b04:	3f c0       	rjmp	.+126    	; 0x3b84 <WriteNLatch+0x296>
	else if (__tmp > 65535)
    3b06:	6f 81       	ldd	r22, Y+7	; 0x07
    3b08:	78 85       	ldd	r23, Y+8	; 0x08
    3b0a:	89 85       	ldd	r24, Y+9	; 0x09
    3b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	3f ef       	ldi	r19, 0xFF	; 255
    3b12:	4f e7       	ldi	r20, 0x7F	; 127
    3b14:	57 e4       	ldi	r21, 0x47	; 71
    3b16:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b1a:	18 16       	cp	r1, r24
    3b1c:	4c f5       	brge	.+82     	; 0x3b70 <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 e2       	ldi	r20, 0x20	; 32
    3b2c:	51 e4       	ldi	r21, 0x41	; 65
    3b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	bc 01       	movw	r22, r24
    3b38:	cd 01       	movw	r24, r26
    3b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	9e 83       	std	Y+6, r25	; 0x06
    3b44:	8d 83       	std	Y+5, r24	; 0x05
    3b46:	0f c0       	rjmp	.+30     	; 0x3b66 <WriteNLatch+0x278>
    3b48:	80 e9       	ldi	r24, 0x90	; 144
    3b4a:	91 e0       	ldi	r25, 0x01	; 1
    3b4c:	9c 83       	std	Y+4, r25	; 0x04
    3b4e:	8b 83       	std	Y+3, r24	; 0x03
    3b50:	8b 81       	ldd	r24, Y+3	; 0x03
    3b52:	9c 81       	ldd	r25, Y+4	; 0x04
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <WriteNLatch+0x266>
    3b58:	9c 83       	std	Y+4, r25	; 0x04
    3b5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	9e 83       	std	Y+6, r25	; 0x06
    3b64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b66:	8d 81       	ldd	r24, Y+5	; 0x05
    3b68:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6a:	00 97       	sbiw	r24, 0x00	; 0
    3b6c:	69 f7       	brne	.-38     	; 0x3b48 <WriteNLatch+0x25a>
    3b6e:	14 c0       	rjmp	.+40     	; 0x3b98 <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b70:	6f 81       	ldd	r22, Y+7	; 0x07
    3b72:	78 85       	ldd	r23, Y+8	; 0x08
    3b74:	89 85       	ldd	r24, Y+9	; 0x09
    3b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	9e 83       	std	Y+6, r25	; 0x06
    3b82:	8d 83       	std	Y+5, r24	; 0x05
    3b84:	8d 81       	ldd	r24, Y+5	; 0x05
    3b86:	9e 81       	ldd	r25, Y+6	; 0x06
    3b88:	9a 83       	std	Y+2, r25	; 0x02
    3b8a:	89 83       	std	Y+1, r24	; 0x01
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <WriteNLatch+0x2a2>
    3b94:	9a 83       	std	Y+2, r25	; 0x02
    3b96:	89 83       	std	Y+1, r24	; 0x01
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	62 e0       	ldi	r22, 0x02	; 2
    3b9c:	40 e0       	ldi	r20, 0x00	; 0
    3b9e:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    3ba6:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    3ba8:	6e 96       	adiw	r28, 0x1e	; 30
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	cf 91       	pop	r28
    3bb6:	df 91       	pop	r29
    3bb8:	08 95       	ret

00003bba <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    3bba:	df 93       	push	r29
    3bbc:	cf 93       	push	r28
    3bbe:	00 d0       	rcall	.+0      	; 0x3bc0 <LCD_enuSendData+0x6>
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3bc6:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	60 e0       	ldi	r22, 0x00	; 0
    3bcc:	41 e0       	ldi	r20, 0x01	; 1
    3bce:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	61 e0       	ldi	r22, 0x01	; 1
    3bd6:	40 e0       	ldi	r20, 0x00	; 0
    3bd8:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    3bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bde:	0e 94 77 1c 	call	0x38ee	; 0x38ee <WriteNLatch>



	return Local_enu_ErrorState;
    3be2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3be4:	0f 90       	pop	r0
    3be6:	0f 90       	pop	r0
    3be8:	cf 91       	pop	r28
    3bea:	df 91       	pop	r29
    3bec:	08 95       	ret

00003bee <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    3bee:	df 93       	push	r29
    3bf0:	cf 93       	push	r28
    3bf2:	00 d0       	rcall	.+0      	; 0x3bf4 <LCD_enuSendCommand+0x6>
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
    3bf8:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3bfa:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	60 e0       	ldi	r22, 0x00	; 0
    3c00:	40 e0       	ldi	r20, 0x00	; 0
    3c02:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    3c06:	80 e0       	ldi	r24, 0x00	; 0
    3c08:	61 e0       	ldi	r22, 0x01	; 1
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	0e 94 af 14 	call	0x295e	; 0x295e <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    3c10:	8a 81       	ldd	r24, Y+2	; 0x02
    3c12:	0e 94 77 1c 	call	0x38ee	; 0x38ee <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    3c1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c1c:	0f 90       	pop	r0
    3c1e:	0f 90       	pop	r0
    3c20:	cf 91       	pop	r28
    3c22:	df 91       	pop	r29
    3c24:	08 95       	ret

00003c26 <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    3c26:	df 93       	push	r29
    3c28:	cf 93       	push	r28
    3c2a:	00 d0       	rcall	.+0      	; 0x3c2c <LCD_u8SendString+0x6>
    3c2c:	00 d0       	rcall	.+0      	; 0x3c2e <LCD_u8SendString+0x8>
    3c2e:	0f 92       	push	r0
    3c30:	cd b7       	in	r28, 0x3d	; 61
    3c32:	de b7       	in	r29, 0x3e	; 62
    3c34:	9c 83       	std	Y+4, r25	; 0x04
    3c36:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3c38:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    3c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3e:	00 97       	sbiw	r24, 0x00	; 0
    3c40:	f9 f0       	breq	.+62     	; 0x3c80 <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    3c42:	19 82       	std	Y+1, r1	; 0x01
    3c44:	0f c0       	rjmp	.+30     	; 0x3c64 <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	28 2f       	mov	r18, r24
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c50:	fc 01       	movw	r30, r24
    3c52:	e2 0f       	add	r30, r18
    3c54:	f3 1f       	adc	r31, r19
    3c56:	90 81       	ld	r25, Z
    3c58:	89 81       	ldd	r24, Y+1	; 0x01
    3c5a:	8f 5f       	subi	r24, 0xFF	; 255
    3c5c:	89 83       	std	Y+1, r24	; 0x01
    3c5e:	89 2f       	mov	r24, r25
    3c60:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	28 2f       	mov	r18, r24
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6e:	fc 01       	movw	r30, r24
    3c70:	e2 0f       	add	r30, r18
    3c72:	f3 1f       	adc	r31, r19
    3c74:	80 81       	ld	r24, Z
    3c76:	88 23       	and	r24, r24
    3c78:	31 f7       	brne	.-52     	; 0x3c46 <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    3c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7c:	8d 83       	std	Y+5, r24	; 0x05
    3c7e:	04 c0       	rjmp	.+8      	; 0x3c88 <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    3c84:	8a 81       	ldd	r24, Y+2	; 0x02
    3c86:	8d 83       	std	Y+5, r24	; 0x05
    3c88:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    3c8a:	0f 90       	pop	r0
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	0f 90       	pop	r0
    3c94:	cf 91       	pop	r28
    3c96:	df 91       	pop	r29
    3c98:	08 95       	ret

00003c9a <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    3c9a:	df 93       	push	r29
    3c9c:	cf 93       	push	r28
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
    3ca2:	a0 97       	sbiw	r28, 0x20	; 32
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
    3cae:	6b 8f       	std	Y+27, r22	; 0x1b
    3cb0:	7c 8f       	std	Y+28, r23	; 0x1c
    3cb2:	8d 8f       	std	Y+29, r24	; 0x1d
    3cb4:	9e 8f       	std	Y+30, r25	; 0x1e
    3cb6:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3cb8:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    3cba:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    3cbc:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    3cbe:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    3cc0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    3cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cc6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3cc8:	be 8d       	ldd	r27, Y+30	; 0x1e
    3cca:	bb 23       	and	r27, r27
    3ccc:	94 f4       	brge	.+36     	; 0x3cf2 <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    3cce:	8d e2       	ldi	r24, 0x2D	; 45
    3cd0:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <LCD_enuSendData>
		Copy_u8data*=-1;
    3cd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cd8:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3cda:	be 8d       	ldd	r27, Y+30	; 0x1e
    3cdc:	b0 95       	com	r27
    3cde:	a0 95       	com	r26
    3ce0:	90 95       	com	r25
    3ce2:	81 95       	neg	r24
    3ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce6:	af 4f       	sbci	r26, 0xFF	; 255
    3ce8:	bf 4f       	sbci	r27, 0xFF	; 255
    3cea:	8b 8f       	std	Y+27, r24	; 0x1b
    3cec:	9c 8f       	std	Y+28, r25	; 0x1c
    3cee:	ad 8f       	std	Y+29, r26	; 0x1d
    3cf0:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    3cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cf6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3cf8:	be 8d       	ldd	r27, Y+30	; 0x1e
    3cfa:	00 97       	sbiw	r24, 0x00	; 0
    3cfc:	a1 05       	cpc	r26, r1
    3cfe:	b1 05       	cpc	r27, r1
    3d00:	09 f0       	breq	.+2      	; 0x3d04 <LCD_enuIntegerToString+0x6a>
    3d02:	4b c0       	rjmp	.+150    	; 0x3d9a <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    3d04:	8d 81       	ldd	r24, Y+5	; 0x05
    3d06:	28 2f       	mov	r18, r24
    3d08:	30 e0       	ldi	r19, 0x00	; 0
    3d0a:	ce 01       	movw	r24, r28
    3d0c:	07 96       	adiw	r24, 0x07	; 7
    3d0e:	fc 01       	movw	r30, r24
    3d10:	e2 0f       	add	r30, r18
    3d12:	f3 1f       	adc	r31, r19
    3d14:	80 e3       	ldi	r24, 0x30	; 48
    3d16:	80 83       	st	Z, r24
    3d18:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1a:	8f 5f       	subi	r24, 0xFF	; 255
    3d1c:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    3d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d20:	28 2f       	mov	r18, r24
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	ce 01       	movw	r24, r28
    3d26:	07 96       	adiw	r24, 0x07	; 7
    3d28:	fc 01       	movw	r30, r24
    3d2a:	e2 0f       	add	r30, r18
    3d2c:	f3 1f       	adc	r31, r19
    3d2e:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    3d30:	8e 81       	ldd	r24, Y+6	; 0x06
    3d32:	88 a3       	std	Y+32, r24	; 0x20
    3d34:	7f c0       	rjmp	.+254    	; 0x3e34 <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    3d36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d38:	28 2f       	mov	r18, r24
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	50 e0       	ldi	r21, 0x00	; 0
    3d40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d44:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3d46:	be 8d       	ldd	r27, Y+30	; 0x1e
    3d48:	bc 01       	movw	r22, r24
    3d4a:	cd 01       	movw	r24, r26
    3d4c:	0e 94 80 21 	call	0x4300	; 0x4300 <__divmodsi4>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    3d56:	8d 81       	ldd	r24, Y+5	; 0x05
    3d58:	28 2f       	mov	r18, r24
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d5e:	48 2f       	mov	r20, r24
    3d60:	40 5d       	subi	r20, 0xD0	; 208
    3d62:	ce 01       	movw	r24, r28
    3d64:	07 96       	adiw	r24, 0x07	; 7
    3d66:	fc 01       	movw	r30, r24
    3d68:	e2 0f       	add	r30, r18
    3d6a:	f3 1f       	adc	r31, r19
    3d6c:	40 83       	st	Z, r20
    3d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d70:	8f 5f       	subi	r24, 0xFF	; 255
    3d72:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    3d74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d76:	28 2f       	mov	r18, r24
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	40 e0       	ldi	r20, 0x00	; 0
    3d7c:	50 e0       	ldi	r21, 0x00	; 0
    3d7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d82:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3d84:	be 8d       	ldd	r27, Y+30	; 0x1e
    3d86:	bc 01       	movw	r22, r24
    3d88:	cd 01       	movw	r24, r26
    3d8a:	0e 94 80 21 	call	0x4300	; 0x4300 <__divmodsi4>
    3d8e:	da 01       	movw	r26, r20
    3d90:	c9 01       	movw	r24, r18
    3d92:	8b 8f       	std	Y+27, r24	; 0x1b
    3d94:	9c 8f       	std	Y+28, r25	; 0x1c
    3d96:	ad 8f       	std	Y+29, r26	; 0x1d
    3d98:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    3d9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d9e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    3da0:	be 8d       	ldd	r27, Y+30	; 0x1e
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	a1 05       	cpc	r26, r1
    3da6:	b1 05       	cpc	r27, r1
    3da8:	31 f6       	brne	.-116    	; 0x3d36 <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    3daa:	8d 81       	ldd	r24, Y+5	; 0x05
    3dac:	28 2f       	mov	r18, r24
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	ce 01       	movw	r24, r28
    3db2:	07 96       	adiw	r24, 0x07	; 7
    3db4:	fc 01       	movw	r30, r24
    3db6:	e2 0f       	add	r30, r18
    3db8:	f3 1f       	adc	r31, r19
    3dba:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    3dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dbe:	81 50       	subi	r24, 0x01	; 1
    3dc0:	8a 83       	std	Y+2, r24	; 0x02
    3dc2:	2c c0       	rjmp	.+88     	; 0x3e1c <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    3dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc6:	28 2f       	mov	r18, r24
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	ce 01       	movw	r24, r28
    3dcc:	07 96       	adiw	r24, 0x07	; 7
    3dce:	fc 01       	movw	r30, r24
    3dd0:	e2 0f       	add	r30, r18
    3dd2:	f3 1f       	adc	r31, r19
    3dd4:	80 81       	ld	r24, Z
    3dd6:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    3dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3dda:	48 2f       	mov	r20, r24
    3ddc:	50 e0       	ldi	r21, 0x00	; 0
    3dde:	8a 81       	ldd	r24, Y+2	; 0x02
    3de0:	28 2f       	mov	r18, r24
    3de2:	30 e0       	ldi	r19, 0x00	; 0
    3de4:	ce 01       	movw	r24, r28
    3de6:	07 96       	adiw	r24, 0x07	; 7
    3de8:	fc 01       	movw	r30, r24
    3dea:	e2 0f       	add	r30, r18
    3dec:	f3 1f       	adc	r31, r19
    3dee:	20 81       	ld	r18, Z
    3df0:	ce 01       	movw	r24, r28
    3df2:	07 96       	adiw	r24, 0x07	; 7
    3df4:	fc 01       	movw	r30, r24
    3df6:	e4 0f       	add	r30, r20
    3df8:	f5 1f       	adc	r31, r21
    3dfa:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    3dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfe:	28 2f       	mov	r18, r24
    3e00:	30 e0       	ldi	r19, 0x00	; 0
    3e02:	ce 01       	movw	r24, r28
    3e04:	07 96       	adiw	r24, 0x07	; 7
    3e06:	fc 01       	movw	r30, r24
    3e08:	e2 0f       	add	r30, r18
    3e0a:	f3 1f       	adc	r31, r19
    3e0c:	89 81       	ldd	r24, Y+1	; 0x01
    3e0e:	80 83       	st	Z, r24

        Local_u8Start++;
    3e10:	8b 81       	ldd	r24, Y+3	; 0x03
    3e12:	8f 5f       	subi	r24, 0xFF	; 255
    3e14:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    3e16:	8a 81       	ldd	r24, Y+2	; 0x02
    3e18:	81 50       	subi	r24, 0x01	; 1
    3e1a:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    3e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e20:	98 17       	cp	r25, r24
    3e22:	80 f2       	brcs	.-96     	; 0x3dc4 <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    3e24:	ce 01       	movw	r24, r28
    3e26:	07 96       	adiw	r24, 0x07	; 7
    3e28:	0e 94 13 1e 	call	0x3c26	; 0x3c26 <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    3e30:	8e 81       	ldd	r24, Y+6	; 0x06
    3e32:	88 a3       	std	Y+32, r24	; 0x20
    3e34:	88 a1       	ldd	r24, Y+32	; 0x20
}
    3e36:	a0 96       	adiw	r28, 0x20	; 32
    3e38:	0f b6       	in	r0, 0x3f	; 63
    3e3a:	f8 94       	cli
    3e3c:	de bf       	out	0x3e, r29	; 62
    3e3e:	0f be       	out	0x3f, r0	; 63
    3e40:	cd bf       	out	0x3d, r28	; 61
    3e42:	cf 91       	pop	r28
    3e44:	df 91       	pop	r29
    3e46:	08 95       	ret

00003e48 <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    3e48:	df 93       	push	r29
    3e4a:	cf 93       	push	r28
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	27 97       	sbiw	r28, 0x07	; 7
    3e52:	0f b6       	in	r0, 0x3f	; 63
    3e54:	f8 94       	cli
    3e56:	de bf       	out	0x3e, r29	; 62
    3e58:	0f be       	out	0x3f, r0	; 63
    3e5a:	cd bf       	out	0x3d, r28	; 61
    3e5c:	8b 83       	std	Y+3, r24	; 0x03
    3e5e:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    3e60:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    3e62:	8b 81       	ldd	r24, Y+3	; 0x03
    3e64:	81 31       	cpi	r24, 0x11	; 17
    3e66:	18 f4       	brcc	.+6      	; 0x3e6e <LCD_u8SetPosXY+0x26>
    3e68:	8c 81       	ldd	r24, Y+4	; 0x04
    3e6a:	83 30       	cpi	r24, 0x03	; 3
    3e6c:	18 f0       	brcs	.+6      	; 0x3e74 <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    3e6e:	2a 81       	ldd	r18, Y+2	; 0x02
    3e70:	2f 83       	std	Y+7, r18	; 0x07
    3e72:	23 c0       	rjmp	.+70     	; 0x3eba <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    3e74:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    3e76:	8c 81       	ldd	r24, Y+4	; 0x04
    3e78:	28 2f       	mov	r18, r24
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	3e 83       	std	Y+6, r19	; 0x06
    3e7e:	2d 83       	std	Y+5, r18	; 0x05
    3e80:	8d 81       	ldd	r24, Y+5	; 0x05
    3e82:	9e 81       	ldd	r25, Y+6	; 0x06
    3e84:	81 30       	cpi	r24, 0x01	; 1
    3e86:	91 05       	cpc	r25, r1
    3e88:	31 f0       	breq	.+12     	; 0x3e96 <LCD_u8SetPosXY+0x4e>
    3e8a:	2d 81       	ldd	r18, Y+5	; 0x05
    3e8c:	3e 81       	ldd	r19, Y+6	; 0x06
    3e8e:	22 30       	cpi	r18, 0x02	; 2
    3e90:	31 05       	cpc	r19, r1
    3e92:	21 f0       	breq	.+8      	; 0x3e9c <LCD_u8SetPosXY+0x54>
    3e94:	07 c0       	rjmp	.+14     	; 0x3ea4 <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    3e96:	8b 81       	ldd	r24, Y+3	; 0x03
    3e98:	89 83       	std	Y+1, r24	; 0x01
    3e9a:	05 c0       	rjmp	.+10     	; 0x3ea6 <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    3e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9e:	80 5c       	subi	r24, 0xC0	; 192
    3ea0:	89 83       	std	Y+1, r24	; 0x01
    3ea2:	01 c0       	rjmp	.+2      	; 0x3ea6 <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    3ea4:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    3ea6:	89 81       	ldd	r24, Y+1	; 0x01
    3ea8:	80 68       	ori	r24, 0x80	; 128
    3eaa:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    3eac:	89 81       	ldd	r24, Y+1	; 0x01
    3eae:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    3eb2:	81 e0       	ldi	r24, 0x01	; 1
    3eb4:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    3eb6:	3a 81       	ldd	r19, Y+2	; 0x02
    3eb8:	3f 83       	std	Y+7, r19	; 0x07
    3eba:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3ebc:	27 96       	adiw	r28, 0x07	; 7
    3ebe:	0f b6       	in	r0, 0x3f	; 63
    3ec0:	f8 94       	cli
    3ec2:	de bf       	out	0x3e, r29	; 62
    3ec4:	0f be       	out	0x3f, r0	; 63
    3ec6:	cd bf       	out	0x3d, r28	; 61
    3ec8:	cf 91       	pop	r28
    3eca:	df 91       	pop	r29
    3ecc:	08 95       	ret

00003ece <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    3ece:	df 93       	push	r29
    3ed0:	cf 93       	push	r28
    3ed2:	cd b7       	in	r28, 0x3d	; 61
    3ed4:	de b7       	in	r29, 0x3e	; 62
    3ed6:	27 97       	sbiw	r28, 0x07	; 7
    3ed8:	0f b6       	in	r0, 0x3f	; 63
    3eda:	f8 94       	cli
    3edc:	de bf       	out	0x3e, r29	; 62
    3ede:	0f be       	out	0x3f, r0	; 63
    3ee0:	cd bf       	out	0x3d, r28	; 61
    3ee2:	9d 83       	std	Y+5, r25	; 0x05
    3ee4:	8c 83       	std	Y+4, r24	; 0x04
    3ee6:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3ee8:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    3eea:	8c 81       	ldd	r24, Y+4	; 0x04
    3eec:	9d 81       	ldd	r25, Y+5	; 0x05
    3eee:	00 97       	sbiw	r24, 0x00	; 0
    3ef0:	19 f0       	breq	.+6      	; 0x3ef8 <LCD_u8StoreCustomChar+0x2a>
    3ef2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ef4:	89 30       	cpi	r24, 0x09	; 9
    3ef6:	18 f0       	brcs	.+6      	; 0x3efe <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    3ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    3efa:	8f 83       	std	Y+7, r24	; 0x07
    3efc:	2a c0       	rjmp	.+84     	; 0x3f52 <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    3efe:	8e 81       	ldd	r24, Y+6	; 0x06
    3f00:	88 2f       	mov	r24, r24
    3f02:	90 e0       	ldi	r25, 0x00	; 0
    3f04:	88 0f       	add	r24, r24
    3f06:	99 1f       	adc	r25, r25
    3f08:	88 0f       	add	r24, r24
    3f0a:	99 1f       	adc	r25, r25
    3f0c:	88 0f       	add	r24, r24
    3f0e:	99 1f       	adc	r25, r25
    3f10:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    3f12:	8a 81       	ldd	r24, Y+2	; 0x02
    3f14:	80 64       	ori	r24, 0x40	; 64
    3f16:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    3f18:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1a:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    3f1e:	19 82       	std	Y+1, r1	; 0x01
    3f20:	0e c0       	rjmp	.+28     	; 0x3f3e <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    3f22:	89 81       	ldd	r24, Y+1	; 0x01
    3f24:	28 2f       	mov	r18, r24
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	8c 81       	ldd	r24, Y+4	; 0x04
    3f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    3f2c:	fc 01       	movw	r30, r24
    3f2e:	e2 0f       	add	r30, r18
    3f30:	f3 1f       	adc	r31, r19
    3f32:	80 81       	ld	r24, Z
    3f34:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	8f 5f       	subi	r24, 0xFF	; 255
    3f3c:	89 83       	std	Y+1, r24	; 0x01
    3f3e:	89 81       	ldd	r24, Y+1	; 0x01
    3f40:	88 30       	cpi	r24, 0x08	; 8
    3f42:	78 f3       	brcs	.-34     	; 0x3f22 <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    3f44:	82 e0       	ldi	r24, 0x02	; 2
    3f46:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    3f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f50:	8f 83       	std	Y+7, r24	; 0x07
    3f52:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3f54:	27 96       	adiw	r28, 0x07	; 7
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	f8 94       	cli
    3f5a:	de bf       	out	0x3e, r29	; 62
    3f5c:	0f be       	out	0x3f, r0	; 63
    3f5e:	cd bf       	out	0x3d, r28	; 61
    3f60:	cf 91       	pop	r28
    3f62:	df 91       	pop	r29
    3f64:	08 95       	ret

00003f66 <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    3f66:	df 93       	push	r29
    3f68:	cf 93       	push	r28
    3f6a:	00 d0       	rcall	.+0      	; 0x3f6c <LCD_u8DisplayCustomChar+0x6>
    3f6c:	00 d0       	rcall	.+0      	; 0x3f6e <LCD_u8DisplayCustomChar+0x8>
    3f6e:	cd b7       	in	r28, 0x3d	; 61
    3f70:	de b7       	in	r29, 0x3e	; 62
    3f72:	8a 83       	std	Y+2, r24	; 0x02
    3f74:	6b 83       	std	Y+3, r22	; 0x03
    3f76:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3f78:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    3f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f7c:	6b 81       	ldd	r22, Y+3	; 0x03
    3f7e:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    3f82:	8a 81       	ldd	r24, Y+2	; 0x02
    3f84:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	0f 90       	pop	r0
    3f94:	0f 90       	pop	r0
    3f96:	cf 91       	pop	r28
    3f98:	df 91       	pop	r29
    3f9a:	08 95       	ret

00003f9c <EEPROM_enuInit>:

#include "EEPROM_interface.h"
/**************************************************************/


ErrorStatus_t EEPROM_enuInit(void){
    3f9c:	df 93       	push	r29
    3f9e:	cf 93       	push	r28
    3fa0:	cd b7       	in	r28, 0x3d	; 61
    3fa2:	de b7       	in	r29, 0x3e	; 62
//	ErrorStatus_t Local_enuErrorState = TWI_enuInit();

	TWI_enuInit();
    3fa4:	0e 94 90 08 	call	0x1120	; 0x1120 <TWI_enuInit>
	return 1;
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
}
    3faa:	cf 91       	pop	r28
    3fac:	df 91       	pop	r29
    3fae:	08 95       	ret

00003fb0 <EEPROM_enuWriteData>:



ErrorStatus_t EEPROM_enuWriteData(EEPROM_Input_t* eepromInstance){
    3fb0:	df 93       	push	r29
    3fb2:	cf 93       	push	r28
    3fb4:	00 d0       	rcall	.+0      	; 0x3fb6 <EEPROM_enuWriteData+0x6>
    3fb6:	00 d0       	rcall	.+0      	; 0x3fb8 <EEPROM_enuWriteData+0x8>
    3fb8:	0f 92       	push	r0
    3fba:	cd b7       	in	r28, 0x3d	; 61
    3fbc:	de b7       	in	r29, 0x3e	; 62
    3fbe:	9d 83       	std	Y+5, r25	; 0x05
    3fc0:	8c 83       	std	Y+4, r24	; 0x04
	ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    3fc2:	1b 82       	std	Y+3, r1	; 0x03

	///////////////////////////////////////////////////////////////////////////////////////////////
	uint8_t Local_u8Address = (0xA0) | (EEPROM_A2_STATE<<2) | (eepromInstance->A1 << 1) | (eepromInstance->A0)| 0x00;
    3fc4:	ec 81       	ldd	r30, Y+4	; 0x04
    3fc6:	fd 81       	ldd	r31, Y+5	; 0x05
    3fc8:	81 81       	ldd	r24, Z+1	; 0x01
    3fca:	81 70       	andi	r24, 0x01	; 1
    3fcc:	88 2f       	mov	r24, r24
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	88 0f       	add	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	98 2f       	mov	r25, r24
    3fd6:	90 6a       	ori	r25, 0xA0	; 160
    3fd8:	ec 81       	ldd	r30, Y+4	; 0x04
    3fda:	fd 81       	ldd	r31, Y+5	; 0x05
    3fdc:	81 81       	ldd	r24, Z+1	; 0x01
    3fde:	86 95       	lsr	r24
    3fe0:	81 70       	andi	r24, 0x01	; 1
    3fe2:	89 2b       	or	r24, r25
    3fe4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8ByteAddress = eepromInstance->address;
    3fe6:	ec 81       	ldd	r30, Y+4	; 0x04
    3fe8:	fd 81       	ldd	r31, Y+5	; 0x05
    3fea:	80 81       	ld	r24, Z
    3fec:	89 83       	std	Y+1, r24	; 0x01
	///////////////////////////////////////////////////////////////////////////////////////////////

	if(TWI_enuStartCondition() == TWI_STATUS_OK){
    3fee:	0e 94 c7 08 	call	0x118e	; 0x118e <TWI_enuStartCondition>
    3ff2:	81 30       	cpi	r24, 0x01	; 1
    3ff4:	71 f4       	brne	.+28     	; 0x4012 <EEPROM_enuWriteData+0x62>
		TWI_enuSetSlaveOperation(Local_u8Address, TWI_WriteOperation);
    3ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff8:	60 e0       	ldi	r22, 0x00	; 0
    3ffa:	0e 94 38 09 	call	0x1270	; 0x1270 <TWI_enuSetSlaveOperation>
		TWI_enuWriteData(Local_u8ByteAddress);
    3ffe:	89 81       	ldd	r24, Y+1	; 0x01
    4000:	0e 94 71 09 	call	0x12e2	; 0x12e2 <TWI_enuWriteData>



		TWI_enuWriteData(eepromInstance->data);
    4004:	ec 81       	ldd	r30, Y+4	; 0x04
    4006:	fd 81       	ldd	r31, Y+5	; 0x05
    4008:	82 81       	ldd	r24, Z+2	; 0x02
    400a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <TWI_enuWriteData>
		TWI_enuStopCondition();
    400e:	0e 94 1d 09 	call	0x123a	; 0x123a <TWI_enuStopCondition>


	}


	Local_enuErrorState = ERROR_STATUS_OK;
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrorState;
    4016:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4018:	0f 90       	pop	r0
    401a:	0f 90       	pop	r0
    401c:	0f 90       	pop	r0
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	cf 91       	pop	r28
    4024:	df 91       	pop	r29
    4026:	08 95       	ret

00004028 <EEPROM_enuReadData>:



ErrorStatus_t EEPROM_enuReadData(EEPROM_Input_t* eepromInstance){
    4028:	df 93       	push	r29
    402a:	cf 93       	push	r28
    402c:	00 d0       	rcall	.+0      	; 0x402e <EEPROM_enuReadData+0x6>
    402e:	00 d0       	rcall	.+0      	; 0x4030 <EEPROM_enuReadData+0x8>
    4030:	0f 92       	push	r0
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	9d 83       	std	Y+5, r25	; 0x05
    4038:	8c 83       	std	Y+4, r24	; 0x04
	ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    403a:	1b 82       	std	Y+3, r1	; 0x03


	//To Ensure any residual data from a previous write operation will be cleared
	eepromInstance->data = 0;
    403c:	ec 81       	ldd	r30, Y+4	; 0x04
    403e:	fd 81       	ldd	r31, Y+5	; 0x05
    4040:	12 82       	std	Z+2, r1	; 0x02

	///////////////////////////////////////////////////////////////////////////////////////////////
	uint8_t Local_u8Address = (0xA0) | (EEPROM_A2_STATE<<2) | ((eepromInstance->A1) << 1) | (eepromInstance->A0)| 0x01;
    4042:	ec 81       	ldd	r30, Y+4	; 0x04
    4044:	fd 81       	ldd	r31, Y+5	; 0x05
    4046:	81 81       	ldd	r24, Z+1	; 0x01
    4048:	81 70       	andi	r24, 0x01	; 1
    404a:	88 2f       	mov	r24, r24
    404c:	90 e0       	ldi	r25, 0x00	; 0
    404e:	88 0f       	add	r24, r24
    4050:	99 1f       	adc	r25, r25
    4052:	98 2f       	mov	r25, r24
    4054:	90 6a       	ori	r25, 0xA0	; 160
    4056:	ec 81       	ldd	r30, Y+4	; 0x04
    4058:	fd 81       	ldd	r31, Y+5	; 0x05
    405a:	81 81       	ldd	r24, Z+1	; 0x01
    405c:	86 95       	lsr	r24
    405e:	81 70       	andi	r24, 0x01	; 1
    4060:	89 2b       	or	r24, r25
    4062:	81 60       	ori	r24, 0x01	; 1
    4064:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t Local_u8ByteAddress = eepromInstance->address;
    4066:	ec 81       	ldd	r30, Y+4	; 0x04
    4068:	fd 81       	ldd	r31, Y+5	; 0x05
    406a:	80 81       	ld	r24, Z
    406c:	89 83       	std	Y+1, r24	; 0x01
	///////////////////////////////////////////////////////////////////////////////////////////////


	if(TWI_enuStartCondition() == TWI_STATUS_OK){
    406e:	0e 94 c7 08 	call	0x118e	; 0x118e <TWI_enuStartCondition>
    4072:	81 30       	cpi	r24, 0x01	; 1
    4074:	b1 f4       	brne	.+44     	; 0x40a2 <EEPROM_enuReadData+0x7a>

		TWI_enuSetSlaveOperation(Local_u8Address, TWI_WriteOperation);
    4076:	8a 81       	ldd	r24, Y+2	; 0x02
    4078:	60 e0       	ldi	r22, 0x00	; 0
    407a:	0e 94 38 09 	call	0x1270	; 0x1270 <TWI_enuSetSlaveOperation>

		TWI_enuWriteData(Local_u8ByteAddress);
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	0e 94 71 09 	call	0x12e2	; 0x12e2 <TWI_enuWriteData>

		if(TWI_enuRepeatStartCondition() == TWI_STATUS_OK){
    4084:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <TWI_enuRepeatStartCondition>
    4088:	81 30       	cpi	r24, 0x01	; 1
    408a:	59 f4       	brne	.+22     	; 0x40a2 <EEPROM_enuReadData+0x7a>
			TWI_enuSetSlaveOperation(Local_u8Address, TWI_ReadOperation);
    408c:	8a 81       	ldd	r24, Y+2	; 0x02
    408e:	61 e0       	ldi	r22, 0x01	; 1
    4090:	0e 94 38 09 	call	0x1270	; 0x1270 <TWI_enuSetSlaveOperation>
			TWI_enuReadData(&(eepromInstance->data));
    4094:	8c 81       	ldd	r24, Y+4	; 0x04
    4096:	9d 81       	ldd	r25, Y+5	; 0x05
    4098:	02 96       	adiw	r24, 0x02	; 2
    409a:	0e 94 c2 09 	call	0x1384	; 0x1384 <TWI_enuReadData>
			TWI_enuStopCondition();
    409e:	0e 94 1d 09 	call	0x123a	; 0x123a <TWI_enuStopCondition>
		}
	}


	Local_enuErrorState = ERROR_STATUS_OK;
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrorState;
    40a6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    40a8:	0f 90       	pop	r0
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	cf 91       	pop	r28
    40b4:	df 91       	pop	r29
    40b6:	08 95       	ret

000040b8 <main>:
#include <avr/io.h>
/****************************************************************/



int main(){
    40b8:	df 93       	push	r29
    40ba:	cf 93       	push	r28
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	6c 97       	sbiw	r28, 0x1c	; 28
    40c2:	0f b6       	in	r0, 0x3f	; 63
    40c4:	f8 94       	cli
    40c6:	de bf       	out	0x3e, r29	; 62
    40c8:	0f be       	out	0x3f, r0	; 63
    40ca:	cd bf       	out	0x3d, r28	; 61
//    unsigned int ubrr = UART_MC_OSC_FREQ/16/9600-1;
//	UBRRH = (unsigned char)(ubrr>>8);
//	UBRRL = (unsigned char)ubrr;


	UART_setBaudRate(9600);
    40cc:	80 e8       	ldi	r24, 0x80	; 128
    40ce:	95 e2       	ldi	r25, 0x25	; 37
    40d0:	0e 94 49 08 	call	0x1092	; 0x1092 <UART_setBaudRate>
    UCSRB |= (1<<RXEN) | (1<<TXEN); // Enable receiver and transmitter
    40d4:	aa e2       	ldi	r26, 0x2A	; 42
    40d6:	b0 e0       	ldi	r27, 0x00	; 0
    40d8:	ea e2       	ldi	r30, 0x2A	; 42
    40da:	f0 e0       	ldi	r31, 0x00	; 0
    40dc:	80 81       	ld	r24, Z
    40de:	88 61       	ori	r24, 0x18	; 24
    40e0:	8c 93       	st	X, r24


	//////////////////////////////////////////////////////////////////


    UART_vidInit(9600);
    40e2:	80 e8       	ldi	r24, 0x80	; 128
    40e4:	95 e2       	ldi	r25, 0x25	; 37
    40e6:	0e 94 47 07 	call	0xe8e	; 0xe8e <UART_vidInit>
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	aa e7       	ldi	r26, 0x7A	; 122
    40f0:	b4 e4       	ldi	r27, 0x44	; 68
    40f2:	89 8f       	std	Y+25, r24	; 0x19
    40f4:	9a 8f       	std	Y+26, r25	; 0x1a
    40f6:	ab 8f       	std	Y+27, r26	; 0x1b
    40f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40fa:	69 8d       	ldd	r22, Y+25	; 0x19
    40fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4102:	20 e0       	ldi	r18, 0x00	; 0
    4104:	30 e0       	ldi	r19, 0x00	; 0
    4106:	4a e7       	ldi	r20, 0x7A	; 122
    4108:	55 e4       	ldi	r21, 0x45	; 69
    410a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	8d 8b       	std	Y+21, r24	; 0x15
    4114:	9e 8b       	std	Y+22, r25	; 0x16
    4116:	af 8b       	std	Y+23, r26	; 0x17
    4118:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    411a:	6d 89       	ldd	r22, Y+21	; 0x15
    411c:	7e 89       	ldd	r23, Y+22	; 0x16
    411e:	8f 89       	ldd	r24, Y+23	; 0x17
    4120:	98 8d       	ldd	r25, Y+24	; 0x18
    4122:	20 e0       	ldi	r18, 0x00	; 0
    4124:	30 e0       	ldi	r19, 0x00	; 0
    4126:	40 e8       	ldi	r20, 0x80	; 128
    4128:	5f e3       	ldi	r21, 0x3F	; 63
    412a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    412e:	88 23       	and	r24, r24
    4130:	2c f4       	brge	.+10     	; 0x413c <main+0x84>
		__ticks = 1;
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	9c 8b       	std	Y+20, r25	; 0x14
    4138:	8b 8b       	std	Y+19, r24	; 0x13
    413a:	3f c0       	rjmp	.+126    	; 0x41ba <main+0x102>
	else if (__tmp > 65535)
    413c:	6d 89       	ldd	r22, Y+21	; 0x15
    413e:	7e 89       	ldd	r23, Y+22	; 0x16
    4140:	8f 89       	ldd	r24, Y+23	; 0x17
    4142:	98 8d       	ldd	r25, Y+24	; 0x18
    4144:	20 e0       	ldi	r18, 0x00	; 0
    4146:	3f ef       	ldi	r19, 0xFF	; 255
    4148:	4f e7       	ldi	r20, 0x7F	; 127
    414a:	57 e4       	ldi	r21, 0x47	; 71
    414c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4150:	18 16       	cp	r1, r24
    4152:	4c f5       	brge	.+82     	; 0x41a6 <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4154:	69 8d       	ldd	r22, Y+25	; 0x19
    4156:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4158:	8b 8d       	ldd	r24, Y+27	; 0x1b
    415a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	30 e0       	ldi	r19, 0x00	; 0
    4160:	40 e2       	ldi	r20, 0x20	; 32
    4162:	51 e4       	ldi	r21, 0x41	; 65
    4164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	bc 01       	movw	r22, r24
    416e:	cd 01       	movw	r24, r26
    4170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4174:	dc 01       	movw	r26, r24
    4176:	cb 01       	movw	r24, r22
    4178:	9c 8b       	std	Y+20, r25	; 0x14
    417a:	8b 8b       	std	Y+19, r24	; 0x13
    417c:	0f c0       	rjmp	.+30     	; 0x419c <main+0xe4>
    417e:	80 e9       	ldi	r24, 0x90	; 144
    4180:	91 e0       	ldi	r25, 0x01	; 1
    4182:	9a 8b       	std	Y+18, r25	; 0x12
    4184:	89 8b       	std	Y+17, r24	; 0x11
    4186:	89 89       	ldd	r24, Y+17	; 0x11
    4188:	9a 89       	ldd	r25, Y+18	; 0x12
    418a:	01 97       	sbiw	r24, 0x01	; 1
    418c:	f1 f7       	brne	.-4      	; 0x418a <main+0xd2>
    418e:	9a 8b       	std	Y+18, r25	; 0x12
    4190:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4192:	8b 89       	ldd	r24, Y+19	; 0x13
    4194:	9c 89       	ldd	r25, Y+20	; 0x14
    4196:	01 97       	sbiw	r24, 0x01	; 1
    4198:	9c 8b       	std	Y+20, r25	; 0x14
    419a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    419c:	8b 89       	ldd	r24, Y+19	; 0x13
    419e:	9c 89       	ldd	r25, Y+20	; 0x14
    41a0:	00 97       	sbiw	r24, 0x00	; 0
    41a2:	69 f7       	brne	.-38     	; 0x417e <main+0xc6>
    41a4:	14 c0       	rjmp	.+40     	; 0x41ce <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41a6:	6d 89       	ldd	r22, Y+21	; 0x15
    41a8:	7e 89       	ldd	r23, Y+22	; 0x16
    41aa:	8f 89       	ldd	r24, Y+23	; 0x17
    41ac:	98 8d       	ldd	r25, Y+24	; 0x18
    41ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b2:	dc 01       	movw	r26, r24
    41b4:	cb 01       	movw	r24, r22
    41b6:	9c 8b       	std	Y+20, r25	; 0x14
    41b8:	8b 8b       	std	Y+19, r24	; 0x13
    41ba:	8b 89       	ldd	r24, Y+19	; 0x13
    41bc:	9c 89       	ldd	r25, Y+20	; 0x14
    41be:	98 8b       	std	Y+16, r25	; 0x10
    41c0:	8f 87       	std	Y+15, r24	; 0x0f
    41c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    41c4:	98 89       	ldd	r25, Y+16	; 0x10
    41c6:	01 97       	sbiw	r24, 0x01	; 1
    41c8:	f1 f7       	brne	.-4      	; 0x41c6 <main+0x10e>
    41ca:	98 8b       	std	Y+16, r25	; 0x10
    41cc:	8f 87       	std	Y+15, r24	; 0x0f



    while (1) {

        UART_enuSendString((uint8_t*)"Hello World\r\n");
    41ce:	80 e6       	ldi	r24, 0x60	; 96
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0e 94 ca 07 	call	0xf94	; 0xf94 <UART_enuSendString>
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	aa e7       	ldi	r26, 0x7A	; 122
    41dc:	b4 e4       	ldi	r27, 0x44	; 68
    41de:	8b 87       	std	Y+11, r24	; 0x0b
    41e0:	9c 87       	std	Y+12, r25	; 0x0c
    41e2:	ad 87       	std	Y+13, r26	; 0x0d
    41e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    41e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    41ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    41ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    41ee:	20 e0       	ldi	r18, 0x00	; 0
    41f0:	30 e0       	ldi	r19, 0x00	; 0
    41f2:	4a e7       	ldi	r20, 0x7A	; 122
    41f4:	55 e4       	ldi	r21, 0x45	; 69
    41f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41fa:	dc 01       	movw	r26, r24
    41fc:	cb 01       	movw	r24, r22
    41fe:	8f 83       	std	Y+7, r24	; 0x07
    4200:	98 87       	std	Y+8, r25	; 0x08
    4202:	a9 87       	std	Y+9, r26	; 0x09
    4204:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4206:	6f 81       	ldd	r22, Y+7	; 0x07
    4208:	78 85       	ldd	r23, Y+8	; 0x08
    420a:	89 85       	ldd	r24, Y+9	; 0x09
    420c:	9a 85       	ldd	r25, Y+10	; 0x0a
    420e:	20 e0       	ldi	r18, 0x00	; 0
    4210:	30 e0       	ldi	r19, 0x00	; 0
    4212:	40 e8       	ldi	r20, 0x80	; 128
    4214:	5f e3       	ldi	r21, 0x3F	; 63
    4216:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    421a:	88 23       	and	r24, r24
    421c:	2c f4       	brge	.+10     	; 0x4228 <main+0x170>
		__ticks = 1;
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	9e 83       	std	Y+6, r25	; 0x06
    4224:	8d 83       	std	Y+5, r24	; 0x05
    4226:	3f c0       	rjmp	.+126    	; 0x42a6 <main+0x1ee>
	else if (__tmp > 65535)
    4228:	6f 81       	ldd	r22, Y+7	; 0x07
    422a:	78 85       	ldd	r23, Y+8	; 0x08
    422c:	89 85       	ldd	r24, Y+9	; 0x09
    422e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4230:	20 e0       	ldi	r18, 0x00	; 0
    4232:	3f ef       	ldi	r19, 0xFF	; 255
    4234:	4f e7       	ldi	r20, 0x7F	; 127
    4236:	57 e4       	ldi	r21, 0x47	; 71
    4238:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    423c:	18 16       	cp	r1, r24
    423e:	4c f5       	brge	.+82     	; 0x4292 <main+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4240:	6b 85       	ldd	r22, Y+11	; 0x0b
    4242:	7c 85       	ldd	r23, Y+12	; 0x0c
    4244:	8d 85       	ldd	r24, Y+13	; 0x0d
    4246:	9e 85       	ldd	r25, Y+14	; 0x0e
    4248:	20 e0       	ldi	r18, 0x00	; 0
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	40 e2       	ldi	r20, 0x20	; 32
    424e:	51 e4       	ldi	r21, 0x41	; 65
    4250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4254:	dc 01       	movw	r26, r24
    4256:	cb 01       	movw	r24, r22
    4258:	bc 01       	movw	r22, r24
    425a:	cd 01       	movw	r24, r26
    425c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	9e 83       	std	Y+6, r25	; 0x06
    4266:	8d 83       	std	Y+5, r24	; 0x05
    4268:	0f c0       	rjmp	.+30     	; 0x4288 <main+0x1d0>
    426a:	80 e9       	ldi	r24, 0x90	; 144
    426c:	91 e0       	ldi	r25, 0x01	; 1
    426e:	9c 83       	std	Y+4, r25	; 0x04
    4270:	8b 83       	std	Y+3, r24	; 0x03
    4272:	8b 81       	ldd	r24, Y+3	; 0x03
    4274:	9c 81       	ldd	r25, Y+4	; 0x04
    4276:	01 97       	sbiw	r24, 0x01	; 1
    4278:	f1 f7       	brne	.-4      	; 0x4276 <main+0x1be>
    427a:	9c 83       	std	Y+4, r25	; 0x04
    427c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    427e:	8d 81       	ldd	r24, Y+5	; 0x05
    4280:	9e 81       	ldd	r25, Y+6	; 0x06
    4282:	01 97       	sbiw	r24, 0x01	; 1
    4284:	9e 83       	std	Y+6, r25	; 0x06
    4286:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4288:	8d 81       	ldd	r24, Y+5	; 0x05
    428a:	9e 81       	ldd	r25, Y+6	; 0x06
    428c:	00 97       	sbiw	r24, 0x00	; 0
    428e:	69 f7       	brne	.-38     	; 0x426a <main+0x1b2>
    4290:	9e cf       	rjmp	.-196    	; 0x41ce <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4292:	6f 81       	ldd	r22, Y+7	; 0x07
    4294:	78 85       	ldd	r23, Y+8	; 0x08
    4296:	89 85       	ldd	r24, Y+9	; 0x09
    4298:	9a 85       	ldd	r25, Y+10	; 0x0a
    429a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	9e 83       	std	Y+6, r25	; 0x06
    42a4:	8d 83       	std	Y+5, r24	; 0x05
    42a6:	8d 81       	ldd	r24, Y+5	; 0x05
    42a8:	9e 81       	ldd	r25, Y+6	; 0x06
    42aa:	9a 83       	std	Y+2, r25	; 0x02
    42ac:	89 83       	std	Y+1, r24	; 0x01
    42ae:	89 81       	ldd	r24, Y+1	; 0x01
    42b0:	9a 81       	ldd	r25, Y+2	; 0x02
    42b2:	01 97       	sbiw	r24, 0x01	; 1
    42b4:	f1 f7       	brne	.-4      	; 0x42b2 <main+0x1fa>
    42b6:	9a 83       	std	Y+2, r25	; 0x02
    42b8:	89 83       	std	Y+1, r24	; 0x01
    42ba:	89 cf       	rjmp	.-238    	; 0x41ce <main+0x116>

000042bc <__udivmodsi4>:
    42bc:	a1 e2       	ldi	r26, 0x21	; 33
    42be:	1a 2e       	mov	r1, r26
    42c0:	aa 1b       	sub	r26, r26
    42c2:	bb 1b       	sub	r27, r27
    42c4:	fd 01       	movw	r30, r26
    42c6:	0d c0       	rjmp	.+26     	; 0x42e2 <__udivmodsi4_ep>

000042c8 <__udivmodsi4_loop>:
    42c8:	aa 1f       	adc	r26, r26
    42ca:	bb 1f       	adc	r27, r27
    42cc:	ee 1f       	adc	r30, r30
    42ce:	ff 1f       	adc	r31, r31
    42d0:	a2 17       	cp	r26, r18
    42d2:	b3 07       	cpc	r27, r19
    42d4:	e4 07       	cpc	r30, r20
    42d6:	f5 07       	cpc	r31, r21
    42d8:	20 f0       	brcs	.+8      	; 0x42e2 <__udivmodsi4_ep>
    42da:	a2 1b       	sub	r26, r18
    42dc:	b3 0b       	sbc	r27, r19
    42de:	e4 0b       	sbc	r30, r20
    42e0:	f5 0b       	sbc	r31, r21

000042e2 <__udivmodsi4_ep>:
    42e2:	66 1f       	adc	r22, r22
    42e4:	77 1f       	adc	r23, r23
    42e6:	88 1f       	adc	r24, r24
    42e8:	99 1f       	adc	r25, r25
    42ea:	1a 94       	dec	r1
    42ec:	69 f7       	brne	.-38     	; 0x42c8 <__udivmodsi4_loop>
    42ee:	60 95       	com	r22
    42f0:	70 95       	com	r23
    42f2:	80 95       	com	r24
    42f4:	90 95       	com	r25
    42f6:	9b 01       	movw	r18, r22
    42f8:	ac 01       	movw	r20, r24
    42fa:	bd 01       	movw	r22, r26
    42fc:	cf 01       	movw	r24, r30
    42fe:	08 95       	ret

00004300 <__divmodsi4>:
    4300:	97 fb       	bst	r25, 7
    4302:	09 2e       	mov	r0, r25
    4304:	05 26       	eor	r0, r21
    4306:	0e d0       	rcall	.+28     	; 0x4324 <__divmodsi4_neg1>
    4308:	57 fd       	sbrc	r21, 7
    430a:	04 d0       	rcall	.+8      	; 0x4314 <__divmodsi4_neg2>
    430c:	d7 df       	rcall	.-82     	; 0x42bc <__udivmodsi4>
    430e:	0a d0       	rcall	.+20     	; 0x4324 <__divmodsi4_neg1>
    4310:	00 1c       	adc	r0, r0
    4312:	38 f4       	brcc	.+14     	; 0x4322 <__divmodsi4_exit>

00004314 <__divmodsi4_neg2>:
    4314:	50 95       	com	r21
    4316:	40 95       	com	r20
    4318:	30 95       	com	r19
    431a:	21 95       	neg	r18
    431c:	3f 4f       	sbci	r19, 0xFF	; 255
    431e:	4f 4f       	sbci	r20, 0xFF	; 255
    4320:	5f 4f       	sbci	r21, 0xFF	; 255

00004322 <__divmodsi4_exit>:
    4322:	08 95       	ret

00004324 <__divmodsi4_neg1>:
    4324:	f6 f7       	brtc	.-4      	; 0x4322 <__divmodsi4_exit>
    4326:	90 95       	com	r25
    4328:	80 95       	com	r24
    432a:	70 95       	com	r23
    432c:	61 95       	neg	r22
    432e:	7f 4f       	sbci	r23, 0xFF	; 255
    4330:	8f 4f       	sbci	r24, 0xFF	; 255
    4332:	9f 4f       	sbci	r25, 0xFF	; 255
    4334:	08 95       	ret

00004336 <__prologue_saves__>:
    4336:	2f 92       	push	r2
    4338:	3f 92       	push	r3
    433a:	4f 92       	push	r4
    433c:	5f 92       	push	r5
    433e:	6f 92       	push	r6
    4340:	7f 92       	push	r7
    4342:	8f 92       	push	r8
    4344:	9f 92       	push	r9
    4346:	af 92       	push	r10
    4348:	bf 92       	push	r11
    434a:	cf 92       	push	r12
    434c:	df 92       	push	r13
    434e:	ef 92       	push	r14
    4350:	ff 92       	push	r15
    4352:	0f 93       	push	r16
    4354:	1f 93       	push	r17
    4356:	cf 93       	push	r28
    4358:	df 93       	push	r29
    435a:	cd b7       	in	r28, 0x3d	; 61
    435c:	de b7       	in	r29, 0x3e	; 62
    435e:	ca 1b       	sub	r28, r26
    4360:	db 0b       	sbc	r29, r27
    4362:	0f b6       	in	r0, 0x3f	; 63
    4364:	f8 94       	cli
    4366:	de bf       	out	0x3e, r29	; 62
    4368:	0f be       	out	0x3f, r0	; 63
    436a:	cd bf       	out	0x3d, r28	; 61
    436c:	09 94       	ijmp

0000436e <__epilogue_restores__>:
    436e:	2a 88       	ldd	r2, Y+18	; 0x12
    4370:	39 88       	ldd	r3, Y+17	; 0x11
    4372:	48 88       	ldd	r4, Y+16	; 0x10
    4374:	5f 84       	ldd	r5, Y+15	; 0x0f
    4376:	6e 84       	ldd	r6, Y+14	; 0x0e
    4378:	7d 84       	ldd	r7, Y+13	; 0x0d
    437a:	8c 84       	ldd	r8, Y+12	; 0x0c
    437c:	9b 84       	ldd	r9, Y+11	; 0x0b
    437e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4380:	b9 84       	ldd	r11, Y+9	; 0x09
    4382:	c8 84       	ldd	r12, Y+8	; 0x08
    4384:	df 80       	ldd	r13, Y+7	; 0x07
    4386:	ee 80       	ldd	r14, Y+6	; 0x06
    4388:	fd 80       	ldd	r15, Y+5	; 0x05
    438a:	0c 81       	ldd	r16, Y+4	; 0x04
    438c:	1b 81       	ldd	r17, Y+3	; 0x03
    438e:	aa 81       	ldd	r26, Y+2	; 0x02
    4390:	b9 81       	ldd	r27, Y+1	; 0x01
    4392:	ce 0f       	add	r28, r30
    4394:	d1 1d       	adc	r29, r1
    4396:	0f b6       	in	r0, 0x3f	; 63
    4398:	f8 94       	cli
    439a:	de bf       	out	0x3e, r29	; 62
    439c:	0f be       	out	0x3f, r0	; 63
    439e:	cd bf       	out	0x3d, r28	; 61
    43a0:	ed 01       	movw	r28, r26
    43a2:	08 95       	ret

000043a4 <ceil>:
    43a4:	bc d0       	rcall	.+376    	; 0x451e <__fp_trunc>
    43a6:	80 f0       	brcs	.+32     	; 0x43c8 <ceil+0x24>
    43a8:	9f 37       	cpi	r25, 0x7F	; 127
    43aa:	40 f4       	brcc	.+16     	; 0x43bc <ceil+0x18>
    43ac:	91 11       	cpse	r25, r1
    43ae:	0e f4       	brtc	.+2      	; 0x43b2 <ceil+0xe>
    43b0:	ce c0       	rjmp	.+412    	; 0x454e <__fp_szero>
    43b2:	60 e0       	ldi	r22, 0x00	; 0
    43b4:	70 e0       	ldi	r23, 0x00	; 0
    43b6:	80 e8       	ldi	r24, 0x80	; 128
    43b8:	9f e3       	ldi	r25, 0x3F	; 63
    43ba:	08 95       	ret
    43bc:	26 f0       	brts	.+8      	; 0x43c6 <ceil+0x22>
    43be:	1b 16       	cp	r1, r27
    43c0:	61 1d       	adc	r22, r1
    43c2:	71 1d       	adc	r23, r1
    43c4:	81 1d       	adc	r24, r1
    43c6:	4f c0       	rjmp	.+158    	; 0x4466 <__fp_mintl>
    43c8:	69 c0       	rjmp	.+210    	; 0x449c <__fp_mpack>
    43ca:	79 d0       	rcall	.+242    	; 0x44be <__fp_pscA>
    43cc:	18 f0       	brcs	.+6      	; 0x43d4 <ceil+0x30>
    43ce:	11 f0       	breq	.+4      	; 0x43d4 <ceil+0x30>
    43d0:	7d d0       	rcall	.+250    	; 0x44cc <__fp_pscB>
    43d2:	38 f4       	brcc	.+14     	; 0x43e2 <fmod+0xa>
    43d4:	71 c0       	rjmp	.+226    	; 0x44b8 <__fp_nan>
    43d6:	bb c0       	rjmp	.+374    	; 0x454e <__fp_szero>

000043d8 <fmod>:
    43d8:	e9 2f       	mov	r30, r25
    43da:	7f d0       	rcall	.+254    	; 0x44da <__fp_split3>
    43dc:	b0 f3       	brcs	.-20     	; 0x43ca <ceil+0x26>
    43de:	55 23       	and	r21, r21
    43e0:	c9 f3       	breq	.-14     	; 0x43d4 <ceil+0x30>
    43e2:	e7 fb       	bst	r30, 7
    43e4:	62 17       	cp	r22, r18
    43e6:	73 07       	cpc	r23, r19
    43e8:	84 07       	cpc	r24, r20
    43ea:	95 07       	cpc	r25, r21
    43ec:	a8 f1       	brcs	.+106    	; 0x4458 <fmod+0x80>
    43ee:	99 f3       	breq	.-26     	; 0x43d6 <ceil+0x32>
    43f0:	e9 2f       	mov	r30, r25
    43f2:	ff 27       	eor	r31, r31
    43f4:	88 23       	and	r24, r24
    43f6:	2a f0       	brmi	.+10     	; 0x4402 <fmod+0x2a>
    43f8:	31 97       	sbiw	r30, 0x01	; 1
    43fa:	66 0f       	add	r22, r22
    43fc:	77 1f       	adc	r23, r23
    43fe:	88 1f       	adc	r24, r24
    4400:	da f7       	brpl	.-10     	; 0x43f8 <fmod+0x20>
    4402:	95 2f       	mov	r25, r21
    4404:	55 27       	eor	r21, r21
    4406:	44 23       	and	r20, r20
    4408:	32 f0       	brmi	.+12     	; 0x4416 <fmod+0x3e>
    440a:	91 50       	subi	r25, 0x01	; 1
    440c:	50 40       	sbci	r21, 0x00	; 0
    440e:	22 0f       	add	r18, r18
    4410:	33 1f       	adc	r19, r19
    4412:	44 1f       	adc	r20, r20
    4414:	d2 f7       	brpl	.-12     	; 0x440a <fmod+0x32>
    4416:	bb 27       	eor	r27, r27
    4418:	e9 1b       	sub	r30, r25
    441a:	f5 0b       	sbc	r31, r21
    441c:	62 1b       	sub	r22, r18
    441e:	73 0b       	sbc	r23, r19
    4420:	84 0b       	sbc	r24, r20
    4422:	b1 09       	sbc	r27, r1
    4424:	c1 f2       	breq	.-80     	; 0x43d6 <ceil+0x32>
    4426:	22 f4       	brpl	.+8      	; 0x4430 <fmod+0x58>
    4428:	62 0f       	add	r22, r18
    442a:	73 1f       	adc	r23, r19
    442c:	84 1f       	adc	r24, r20
    442e:	b1 1d       	adc	r27, r1
    4430:	31 97       	sbiw	r30, 0x01	; 1
    4432:	2a f0       	brmi	.+10     	; 0x443e <fmod+0x66>
    4434:	66 0f       	add	r22, r22
    4436:	77 1f       	adc	r23, r23
    4438:	88 1f       	adc	r24, r24
    443a:	bb 1f       	adc	r27, r27
    443c:	ef cf       	rjmp	.-34     	; 0x441c <fmod+0x44>
    443e:	91 50       	subi	r25, 0x01	; 1
    4440:	50 40       	sbci	r21, 0x00	; 0
    4442:	5a f0       	brmi	.+22     	; 0x445a <fmod+0x82>
    4444:	41 f0       	breq	.+16     	; 0x4456 <fmod+0x7e>
    4446:	88 23       	and	r24, r24
    4448:	32 f0       	brmi	.+12     	; 0x4456 <fmod+0x7e>
    444a:	66 0f       	add	r22, r22
    444c:	77 1f       	adc	r23, r23
    444e:	88 1f       	adc	r24, r24
    4450:	91 50       	subi	r25, 0x01	; 1
    4452:	50 40       	sbci	r21, 0x00	; 0
    4454:	c1 f7       	brne	.-16     	; 0x4446 <fmod+0x6e>
    4456:	93 95       	inc	r25
    4458:	21 c0       	rjmp	.+66     	; 0x449c <__fp_mpack>
    445a:	86 95       	lsr	r24
    445c:	77 95       	ror	r23
    445e:	67 95       	ror	r22
    4460:	9f 5f       	subi	r25, 0xFF	; 255
    4462:	d9 f7       	brne	.-10     	; 0x445a <fmod+0x82>
    4464:	f8 cf       	rjmp	.-16     	; 0x4456 <fmod+0x7e>

00004466 <__fp_mintl>:
    4466:	88 23       	and	r24, r24
    4468:	71 f4       	brne	.+28     	; 0x4486 <__fp_mintl+0x20>
    446a:	77 23       	and	r23, r23
    446c:	21 f0       	breq	.+8      	; 0x4476 <__fp_mintl+0x10>
    446e:	98 50       	subi	r25, 0x08	; 8
    4470:	87 2b       	or	r24, r23
    4472:	76 2f       	mov	r23, r22
    4474:	07 c0       	rjmp	.+14     	; 0x4484 <__fp_mintl+0x1e>
    4476:	66 23       	and	r22, r22
    4478:	11 f4       	brne	.+4      	; 0x447e <__fp_mintl+0x18>
    447a:	99 27       	eor	r25, r25
    447c:	0d c0       	rjmp	.+26     	; 0x4498 <__fp_mintl+0x32>
    447e:	90 51       	subi	r25, 0x10	; 16
    4480:	86 2b       	or	r24, r22
    4482:	70 e0       	ldi	r23, 0x00	; 0
    4484:	60 e0       	ldi	r22, 0x00	; 0
    4486:	2a f0       	brmi	.+10     	; 0x4492 <__fp_mintl+0x2c>
    4488:	9a 95       	dec	r25
    448a:	66 0f       	add	r22, r22
    448c:	77 1f       	adc	r23, r23
    448e:	88 1f       	adc	r24, r24
    4490:	da f7       	brpl	.-10     	; 0x4488 <__fp_mintl+0x22>
    4492:	88 0f       	add	r24, r24
    4494:	96 95       	lsr	r25
    4496:	87 95       	ror	r24
    4498:	97 f9       	bld	r25, 7
    449a:	08 95       	ret

0000449c <__fp_mpack>:
    449c:	9f 3f       	cpi	r25, 0xFF	; 255
    449e:	31 f0       	breq	.+12     	; 0x44ac <__fp_mpack_finite+0xc>

000044a0 <__fp_mpack_finite>:
    44a0:	91 50       	subi	r25, 0x01	; 1
    44a2:	20 f4       	brcc	.+8      	; 0x44ac <__fp_mpack_finite+0xc>
    44a4:	87 95       	ror	r24
    44a6:	77 95       	ror	r23
    44a8:	67 95       	ror	r22
    44aa:	b7 95       	ror	r27
    44ac:	88 0f       	add	r24, r24
    44ae:	91 1d       	adc	r25, r1
    44b0:	96 95       	lsr	r25
    44b2:	87 95       	ror	r24
    44b4:	97 f9       	bld	r25, 7
    44b6:	08 95       	ret

000044b8 <__fp_nan>:
    44b8:	9f ef       	ldi	r25, 0xFF	; 255
    44ba:	80 ec       	ldi	r24, 0xC0	; 192
    44bc:	08 95       	ret

000044be <__fp_pscA>:
    44be:	00 24       	eor	r0, r0
    44c0:	0a 94       	dec	r0
    44c2:	16 16       	cp	r1, r22
    44c4:	17 06       	cpc	r1, r23
    44c6:	18 06       	cpc	r1, r24
    44c8:	09 06       	cpc	r0, r25
    44ca:	08 95       	ret

000044cc <__fp_pscB>:
    44cc:	00 24       	eor	r0, r0
    44ce:	0a 94       	dec	r0
    44d0:	12 16       	cp	r1, r18
    44d2:	13 06       	cpc	r1, r19
    44d4:	14 06       	cpc	r1, r20
    44d6:	05 06       	cpc	r0, r21
    44d8:	08 95       	ret

000044da <__fp_split3>:
    44da:	57 fd       	sbrc	r21, 7
    44dc:	90 58       	subi	r25, 0x80	; 128
    44de:	44 0f       	add	r20, r20
    44e0:	55 1f       	adc	r21, r21
    44e2:	59 f0       	breq	.+22     	; 0x44fa <__fp_splitA+0x10>
    44e4:	5f 3f       	cpi	r21, 0xFF	; 255
    44e6:	71 f0       	breq	.+28     	; 0x4504 <__fp_splitA+0x1a>
    44e8:	47 95       	ror	r20

000044ea <__fp_splitA>:
    44ea:	88 0f       	add	r24, r24
    44ec:	97 fb       	bst	r25, 7
    44ee:	99 1f       	adc	r25, r25
    44f0:	61 f0       	breq	.+24     	; 0x450a <__fp_splitA+0x20>
    44f2:	9f 3f       	cpi	r25, 0xFF	; 255
    44f4:	79 f0       	breq	.+30     	; 0x4514 <__fp_splitA+0x2a>
    44f6:	87 95       	ror	r24
    44f8:	08 95       	ret
    44fa:	12 16       	cp	r1, r18
    44fc:	13 06       	cpc	r1, r19
    44fe:	14 06       	cpc	r1, r20
    4500:	55 1f       	adc	r21, r21
    4502:	f2 cf       	rjmp	.-28     	; 0x44e8 <__fp_split3+0xe>
    4504:	46 95       	lsr	r20
    4506:	f1 df       	rcall	.-30     	; 0x44ea <__fp_splitA>
    4508:	08 c0       	rjmp	.+16     	; 0x451a <__fp_splitA+0x30>
    450a:	16 16       	cp	r1, r22
    450c:	17 06       	cpc	r1, r23
    450e:	18 06       	cpc	r1, r24
    4510:	99 1f       	adc	r25, r25
    4512:	f1 cf       	rjmp	.-30     	; 0x44f6 <__fp_splitA+0xc>
    4514:	86 95       	lsr	r24
    4516:	71 05       	cpc	r23, r1
    4518:	61 05       	cpc	r22, r1
    451a:	08 94       	sec
    451c:	08 95       	ret

0000451e <__fp_trunc>:
    451e:	e5 df       	rcall	.-54     	; 0x44ea <__fp_splitA>
    4520:	a0 f0       	brcs	.+40     	; 0x454a <__fp_trunc+0x2c>
    4522:	be e7       	ldi	r27, 0x7E	; 126
    4524:	b9 17       	cp	r27, r25
    4526:	88 f4       	brcc	.+34     	; 0x454a <__fp_trunc+0x2c>
    4528:	bb 27       	eor	r27, r27
    452a:	9f 38       	cpi	r25, 0x8F	; 143
    452c:	60 f4       	brcc	.+24     	; 0x4546 <__fp_trunc+0x28>
    452e:	16 16       	cp	r1, r22
    4530:	b1 1d       	adc	r27, r1
    4532:	67 2f       	mov	r22, r23
    4534:	78 2f       	mov	r23, r24
    4536:	88 27       	eor	r24, r24
    4538:	98 5f       	subi	r25, 0xF8	; 248
    453a:	f7 cf       	rjmp	.-18     	; 0x452a <__fp_trunc+0xc>
    453c:	86 95       	lsr	r24
    453e:	77 95       	ror	r23
    4540:	67 95       	ror	r22
    4542:	b1 1d       	adc	r27, r1
    4544:	93 95       	inc	r25
    4546:	96 39       	cpi	r25, 0x96	; 150
    4548:	c8 f3       	brcs	.-14     	; 0x453c <__fp_trunc+0x1e>
    454a:	08 95       	ret

0000454c <__fp_zero>:
    454c:	e8 94       	clt

0000454e <__fp_szero>:
    454e:	bb 27       	eor	r27, r27
    4550:	66 27       	eor	r22, r22
    4552:	77 27       	eor	r23, r23
    4554:	cb 01       	movw	r24, r22
    4556:	97 f9       	bld	r25, 7
    4558:	08 95       	ret

0000455a <_exit>:
    455a:	f8 94       	cli

0000455c <__stop_program>:
    455c:	ff cf       	rjmp	.-2      	; 0x455c <__stop_program>
