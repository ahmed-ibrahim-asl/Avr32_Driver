
Avr32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000051c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011e  00800060  000051c0  00005254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080017e  0080017e  00005372  2**0
                  ALLOC
  3 .stab         0000693c  00000000  00000000  00005374  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003712  00000000  00000000  0000bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f3c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000f582  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000f792  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00011e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  000132fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000145a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  00014788  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  00014a86  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00015430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__vector_1>
       8:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <__vector_2>
       c:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <__vector_3>
      10:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <__vector_4>
      14:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 df 10 	jmp	0x21be	; 0x21be <__vector_9>
      28:	0c 94 82 10 	jmp	0x2104	; 0x2104 <__vector_10>
      2c:	0c 94 25 10 	jmp	0x204a	; 0x204a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b2 1c 	jmp	0x3964	; 0x3964 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	f1 e5       	ldi	r31, 0x51	; 81
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b6 27 	call	0x4f6c	; 0x4f6c <main>
      8a:	0c 94 de 28 	jmp	0x51bc	; 0x51bc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 35 28 	jmp	0x506a	; 0x506a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 35 28 	jmp	0x506a	; 0x506a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 51 28 	jmp	0x50a2	; 0x50a2 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 59 28 	jmp	0x50b2	; 0x50b2 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 5d 28 	jmp	0x50ba	; 0x50ba <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 45 28 	jmp	0x508a	; 0x508a <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 61 28 	jmp	0x50c2	; 0x50c2 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 3d 28 	jmp	0x507a	; 0x507a <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 59 28 	jmp	0x50b2	; 0x50b2 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e8 59       	subi	r30, 0x98	; 152
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <UART_vidInit>:
#include "UART_priv.h"
#include "UART_config.h"
/************************************************************************************/


void UART_vidInit(uint16 copy_u8UART_BaudRate){
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <UART_vidInit+0x6>
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9a 83       	std	Y+2, r25	; 0x02
     e9a:	89 83       	std	Y+1, r24	; 0x01


	/********************** Setting  Baud Rate **********************/
	UART_setBaudRate(copy_u8UART_BaudRate);
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	0e 94 4b 08 	call	0x1096	; 0x1096 <UART_setBaudRate>
	/***************************************************************/
    SET_BIT(UCSRC_REG, UCSRC_URSEL);
     ea4:	a0 e4       	ldi	r26, 0x40	; 64
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e0 e4       	ldi	r30, 0x40	; 64
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 68       	ori	r24, 0x80	; 128
     eb0:	8c 93       	st	X, r24


	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)

		CLR_BIT(UCSRC_REG, UCSRC_UMSEL);
     eb2:	a0 e4       	ldi	r26, 0x40	; 64
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e0 e4       	ldi	r30, 0x40	; 64
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8f 7b       	andi	r24, 0xBF	; 191
     ebe:	8c 93       	st	X, r24

		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)
			CLR_BIT(UCSRA_REG, UCSRA_U2X);
     ec0:	ab e2       	ldi	r26, 0x2B	; 43
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	eb e2       	ldi	r30, 0x2B	; 43
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	8d 7f       	andi	r24, 0xFD	; 253
     ecc:	8c 93       	st	X, r24
			SET_BIT(UCSRC_REG, UCSRC_UMSEL);
	#endif


	#if(UART_MPCM_OPERATION == UART_SINGLE_MODE)
			CLR_BIT(UCSRA_REG, UCSRA_MPCM);
     ece:	ab e2       	ldi	r26, 0x2B	; 43
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	eb e2       	ldi	r30, 0x2B	; 43
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	8e 7f       	andi	r24, 0xFE	; 254
     eda:	8c 93       	st	X, r24
			SET_BIT(UCSRA_REG, UCSRA_MPCM);
	#endif


	// Receiver Enable
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
     edc:	aa e2       	ldi	r26, 0x2A	; 42
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	ea e2       	ldi	r30, 0x2A	; 42
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 61       	ori	r24, 0x10	; 16
     ee8:	8c 93       	st	X, r24

	// Transmitter Enable
	SET_BIT(UCSRB_REG, UCSRB_TXEN);
     eea:	aa e2       	ldi	r26, 0x2A	; 42
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea e2       	ldi	r30, 0x2A	; 42
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	88 60       	ori	r24, 0x08	; 8
     ef6:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
		SET_BIT(UCSRB_REG, UCSRB_UCSZ2);

	#elif(UART_DATA_BIT == UART_DATA_8bit)

		SET_BIT(UCSRC_REG, UCSRC_UCSZ0);
     ef8:	a0 e4       	ldi	r26, 0x40	; 64
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e0 e4       	ldi	r30, 0x40	; 64
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	82 60       	ori	r24, 0x02	; 2
     f04:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
     f06:	a0 e4       	ldi	r26, 0x40	; 64
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e0 e4       	ldi	r30, 0x40	; 64
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	84 60       	ori	r24, 0x04	; 4
     f12:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     f14:	aa e2       	ldi	r26, 0x2A	; 42
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ea e2       	ldi	r30, 0x2A	; 42
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8b 7f       	andi	r24, 0xFB	; 251
     f20:	8c 93       	st	X, r24


	/********************* Setting No Stop Bits *********************/
	#if(UART_STOP_BIT == UART_STOP_1bit)

		CLR_BIT(UCSRC_REG, UCSRC_USBS);
     f22:	a0 e4       	ldi	r26, 0x40	; 64
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e0 e4       	ldi	r30, 0x40	; 64
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	87 7f       	andi	r24, 0xF7	; 247
     f2e:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSRC_UPM0);
		SET_BIT(UCSRC_REG, UCSRC_UPM1);

	#elif(UART_PARITY_MODE == UART_PARITY_ODD)

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     f30:	a0 e4       	ldi	r26, 0x40	; 64
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e0 e4       	ldi	r30, 0x40	; 64
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 62       	ori	r24, 0x20	; 32
     f3c:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     f3e:	a0 e4       	ldi	r26, 0x40	; 64
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e0 e4       	ldi	r30, 0x40	; 64
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 61       	ori	r24, 0x10	; 16
     f4a:	8c 93       	st	X, r24
	/**************************************************************/




}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <UART_enuSendChar>:


ErrorStatus_t UART_enuSendChar(uint8_t copy_u8Data){
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <UART_enuSendChar+0x6>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     f62:	19 82       	std	Y+1, r1	; 0x01


	// Wait until transmit buffer is empty
	while(GET_BIT(UCSRA_REG, UCSRA_URDE) == 0);
     f64:	eb e2       	ldi	r30, 0x2B	; 43
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	82 95       	swap	r24
     f6c:	86 95       	lsr	r24
     f6e:	87 70       	andi	r24, 0x07	; 7
     f70:	88 2f       	mov	r24, r24
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	a1 f3       	breq	.-24     	; 0xf64 <UART_enuSendChar+0xe>

	UDR_REG = copy_u8Data;
     f7c:	ec e2       	ldi	r30, 0x2C	; 44
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	80 83       	st	Z, r24


	Local_enuErrrorState = ERROR_STATUS_OK;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     f88:	89 81       	ldd	r24, Y+1	; 0x01
}
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	cf 91       	pop	r28
     f90:	df 91       	pop	r29
     f92:	08 95       	ret

00000f94 <UART_enuSendString>:


ErrorStatus_t UART_enuSendString(uint8_t* copy_pu8Data){
     f94:	df 93       	push	r29
     f96:	cf 93       	push	r28
     f98:	00 d0       	rcall	.+0      	; 0xf9a <UART_enuSendString+0x6>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <UART_enuSendString+0x8>
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	9b 83       	std	Y+3, r25	; 0x03
     fa2:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
     fa4:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	69 f4       	brne	.+26     	; 0xfc8 <UART_enuSendString+0x34>
		return Local_enuErrrorState;
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	8c 83       	std	Y+4, r24	; 0x04
     fb2:	16 c0       	rjmp	.+44     	; 0xfe0 <UART_enuSendString+0x4c>
	}

	else{

		while(*copy_pu8Data != '\0'){
			UART_enuSendChar(*copy_pu8Data);
     fb4:	ea 81       	ldd	r30, Y+2	; 0x02
     fb6:	fb 81       	ldd	r31, Y+3	; 0x03
     fb8:	80 81       	ld	r24, Z
     fba:	0e 94 ab 07 	call	0xf56	; 0xf56 <UART_enuSendChar>
			copy_pu8Data++;
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	9b 83       	std	Y+3, r25	; 0x03
     fc6:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
	}

	else{

		while(*copy_pu8Data != '\0'){
     fc8:	ea 81       	ldd	r30, Y+2	; 0x02
     fca:	fb 81       	ldd	r31, Y+3	; 0x03
     fcc:	80 81       	ld	r24, Z
     fce:	88 23       	and	r24, r24
     fd0:	89 f7       	brne	.-30     	; 0xfb4 <UART_enuSendString+0x20>
			UART_enuSendChar(*copy_pu8Data);
			copy_pu8Data++;
		}
		UART_enuSendChar('\0');
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	0e 94 ab 07 	call	0xf56	; 0xf56 <UART_enuSendChar>
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	8c 83       	std	Y+4, r24	; 0x04
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     fe2:	0f 90       	pop	r0
     fe4:	0f 90       	pop	r0
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <UART_enuRecieveChar>:

ErrorStatus_t UART_enuRecieveChar(uint8_t* copy_pu8Data){
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <UART_enuRecieveChar+0x6>
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <UART_enuRecieveChar+0x8>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1000:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	9b 81       	ldd	r25, Y+3	; 0x03
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	19 f4       	brne	.+6      	; 0x1010 <UART_enuRecieveChar+0x20>
		return Local_enuErrrorState;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	8c 83       	std	Y+4, r24	; 0x04
    100e:	0f c0       	rjmp	.+30     	; 0x102e <UART_enuRecieveChar+0x3e>
	}

	else{

		// Receive Complete
		while(GET_BIT(UCSRA_REG, UCSRA_RXC) == 0);
    1010:	eb e2       	ldi	r30, 0x2B	; 43
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	88 23       	and	r24, r24
    1018:	dc f7       	brge	.-10     	; 0x1010 <UART_enuRecieveChar+0x20>

		*copy_pu8Data = UDR_REG;
    101a:	ec e2       	ldi	r30, 0x2C	; 44
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	ea 81       	ldd	r30, Y+2	; 0x02
    1022:	fb 81       	ldd	r31, Y+3	; 0x03
    1024:	80 83       	st	Z, r24
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	8c 83       	std	Y+4, r24	; 0x04
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <UART_enuRecieveString>:



ErrorStatus_t UART_enuRecieveString(uint8_t* copy_pu8Data) {
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <UART_enuRecieveString+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <UART_enuRecieveString+0x8>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	9b 83       	std	Y+3, r25	; 0x03
    104c:	8a 83       	std	Y+2, r24	; 0x02
    if (copy_pu8Data == NULL) {
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	9b 81       	ldd	r25, Y+3	; 0x03
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	11 f4       	brne	.+4      	; 0x105a <UART_enuRecieveString+0x1c>
        return ERROR_STATUS_FAILURE;
    1056:	1c 82       	std	Y+4, r1	; 0x04
    1058:	16 c0       	rjmp	.+44     	; 0x1086 <UART_enuRecieveString+0x48>
    }

    uint8_t receivedChar;
    while (1) {
        // Receive a character from UART
        UART_enuRecieveChar(&receivedChar);
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	0e 94 f8 07 	call	0xff0	; 0xff0 <UART_enuRecieveChar>

        // Store the received character in the buffer
        *copy_pu8Data = receivedChar;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	ea 81       	ldd	r30, Y+2	; 0x02
    1066:	fb 81       	ldd	r31, Y+3	; 0x03
    1068:	80 83       	st	Z, r24

        // Check if the received character is the null terminator
        if (receivedChar == '\0') {
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 23       	and	r24, r24
    106e:	31 f0       	breq	.+12     	; 0x107c <UART_enuRecieveString+0x3e>
            break; // Exit the loop if end of string is detected
        }

        // Move to the next position in the buffer
        copy_pu8Data++;
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	9b 81       	ldd	r25, Y+3	; 0x03
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	9b 83       	std	Y+3, r25	; 0x03
    1078:	8a 83       	std	Y+2, r24	; 0x02
    107a:	ef cf       	rjmp	.-34     	; 0x105a <UART_enuRecieveString+0x1c>
    }

    // Null-terminate the string
    *copy_pu8Data = '\0';
    107c:	ea 81       	ldd	r30, Y+2	; 0x02
    107e:	fb 81       	ldd	r31, Y+3	; 0x03
    1080:	10 82       	st	Z, r1

    return ERROR_STATUS_OK;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	8c 83       	std	Y+4, r24	; 0x04
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <UART_setBaudRate>:

//!
void UART_setBaudRate(uint16 copy_u8UART_BaudRate){
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	00 d0       	rcall	.+0      	; 0x109c <UART_setBaudRate+0x6>
    109c:	00 d0       	rcall	.+0      	; 0x109e <UART_setBaudRate+0x8>
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	9c 83       	std	Y+4, r25	; 0x04
    10a4:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int copy_u16Temp = 0;
    10a6:	1a 82       	std	Y+2, r1	; 0x02
    10a8:	19 82       	std	Y+1, r1	; 0x01

    #if (UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)
        #if (UART_SPEED_MODE == UART_NORMAL_SPEED)


    			copy_u16Temp = ((UART_MC_OSC_FREQ / (16UL*copy_u8UART_BaudRate) ) - 1);
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	cc 01       	movw	r24, r24
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	aa 1f       	adc	r26, r26
    10ba:	bb 1f       	adc	r27, r27
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	aa 1f       	adc	r26, r26
    10c2:	bb 1f       	adc	r27, r27
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	aa 1f       	adc	r26, r26
    10ca:	bb 1f       	adc	r27, r27
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	aa 1f       	adc	r26, r26
    10d2:	bb 1f       	adc	r27, r27
    10d4:	9c 01       	movw	r18, r24
    10d6:	ad 01       	movw	r20, r26
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	92 e1       	ldi	r25, 0x12	; 18
    10dc:	aa e7       	ldi	r26, 0x7A	; 122
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	bc 01       	movw	r22, r24
    10e2:	cd 01       	movw	r24, r26
    10e4:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__udivmodsi4>
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	9a 83       	std	Y+2, r25	; 0x02
    10f0:	89 83       	std	Y+1, r24	; 0x01

    			copy_u16Temp = ((UART_MC_OSC_FREQ / (2UL*copy_u8UART_BaudRate) ) - 1);
    #endif


    CLR_BIT(UCSRC_REG, UCSRC_URSEL);
    10f2:	a0 e4       	ldi	r26, 0x40	; 64
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e0 e4       	ldi	r30, 0x40	; 64
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 77       	andi	r24, 0x7F	; 127
    10fe:	8c 93       	st	X, r24

    UBRRH_REG = (uint8_t)(copy_u16Temp >> 8);
    1100:	e0 e4       	ldi	r30, 0x40	; 64
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	89 81       	ldd	r24, Y+1	; 0x01
    1106:	9a 81       	ldd	r25, Y+2	; 0x02
    1108:	89 2f       	mov	r24, r25
    110a:	99 27       	eor	r25, r25
    110c:	80 83       	st	Z, r24
    UBRRL_REG = (uint8_t)copy_u16Temp;
    110e:	e9 e2       	ldi	r30, 0x29	; 41
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	80 83       	st	Z, r24
}
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <TWI_enuInit>:





TWIStatus_t TWI_enuInit(void) {
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    TWIStatus_t Local_enuErrorState = TWI_STATUS_FAILURE;
    112e:	19 82       	std	Y+1, r1	; 0x01

    #if (TWI_MODE_M_or_S == TWI_MASTER_MODE)
        // Set Value for Bit Rate (should only be when we working with master)
        TWBR_REG = TWBR_VALUE;
    1130:	e0 e2       	ldi	r30, 0x20	; 32
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	80 83       	st	Z, r24
        TWSR_REG = TWI_PRESCALER_VALUE; // Set prescaler bits
    1138:	e1 e2       	ldi	r30, 0x21	; 33
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	10 82       	st	Z, r1
    #endif

    // Enable TWI Interrupt
    GIE_enuEnable();
    113e:	0e 94 8a 13 	call	0x2714	; 0x2714 <GIE_enuEnable>

    // Configure TWCR register based on ACK configuration
    #if (TWI_ACK_CONFIG == TWI_ACK_ENABLE)
        TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWEA) | (1 << TWCR_TWIE);
    1142:	e6 e5       	ldi	r30, 0x56	; 86
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	85 e4       	ldi	r24, 0x45	; 69
    1148:	80 83       	st	Z, r24
        TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWIE);
    #endif

    // Configure General Call Enable (GCE)
    #if (TWI_GCE_CONFIG == TWI_GCE_ENABLE)
        SET_BIT(TWAR_REG, TWAR_TWGCE);
    114a:	a2 e2       	ldi	r26, 0x22	; 34
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e2 e2       	ldi	r30, 0x22	; 34
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	81 60       	ori	r24, 0x01	; 1
    1156:	8c 93       	st	X, r24
    #elif (TWI_GCE_CONFIG == TWI_GCE_DISABLE)
        CLR_BIT(TWAR_REG, TWAR_TWGCE);
    #endif

    // Set Address for MC
    TWAR_REG = (TWAR_REG & 0x01) | TWI_SET_ADDR;
    1158:	a2 e2       	ldi	r26, 0x22	; 34
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e2 e2       	ldi	r30, 0x22	; 34
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	81 70       	andi	r24, 0x01	; 1
    1164:	88 60       	ori	r24, 0x08	; 8
    1166:	8c 93       	st	X, r24

    Local_enuErrorState = TWI_STATUS_OK;
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorState;
    116c:	89 81       	ldd	r24, Y+1	; 0x01
}
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <TWI_enuStartCondition>:



TWIStatus_t TWI_enuStartCondition(void){
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	0f 92       	push	r0
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1180:	19 82       	std	Y+1, r1	; 0x01
	 * TWEN bit must be set whenever you want to intiate a TWI operation.
	 * To send start condition enable TWI by setting TWSTA, TWINT, and TWEN in one operation.
	 * This ensures that TWI modules receives a consistent command and avoids intermediate states.
	 * */

	TWCR_REG = (1 << TWCR_TWSTA) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1182:	e6 e5       	ldi	r30, 0x56	; 86
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	84 ea       	ldi	r24, 0xA4	; 164
    1188:	80 83       	st	Z, r24



	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    118a:	e6 e5       	ldi	r30, 0x56	; 86
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	88 23       	and	r24, r24
    1192:	dc f7       	brge	.-10     	; 0x118a <TWI_enuStartCondition+0x14>
	 * 1  1  1  1  {1 0 0   0}
	 *
	 * 0xF8
	 * */

	if( (TWSR_REG & 0xF8) == TWI_START_SUCCESS_CODE){
    1194:	e1 e2       	ldi	r30, 0x21	; 33
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	88 7f       	andi	r24, 0xF8	; 248
    11a0:	90 70       	andi	r25, 0x00	; 0
    11a2:	88 30       	cpi	r24, 0x08	; 8
    11a4:	91 05       	cpc	r25, r1
    11a6:	11 f4       	brne	.+4      	; 0x11ac <TWI_enuStartCondition+0x36>
		Local_enu_ErrorState = TWI_STATUS_OK;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <TWI_enuRepeatStartCondition>:

TWIStatus_t TWI_enuRepeatStartCondition(void){
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	0f 92       	push	r0
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    11c0:	19 82       	std	Y+1, r1	; 0x01
	 * TWEN bit must be set whenever you want to intiate a TWI operation.
	 * To send start condition enable TWI by setting TWSTA, TWINT, and TWEN in one operation.
	 * This ensures that TWI modules receives a consistent command and avoids intermediate states.
	 * */

	TWCR_REG = (1 << TWCR_TWSTA) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    11c2:	e6 e5       	ldi	r30, 0x56	; 86
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	84 ea       	ldi	r24, 0xA4	; 164
    11c8:	80 83       	st	Z, r24


	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    11ca:	e6 e5       	ldi	r30, 0x56	; 86
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	88 23       	and	r24, r24
    11d2:	dc f7       	brge	.-10     	; 0x11ca <TWI_enuRepeatStartCondition+0x14>
	 * 0xF8
	 * */



	if( (TWSR_REG &0xF8) == TWI_RSTART_SUCCESS_CODE){
    11d4:	e1 e2       	ldi	r30, 0x21	; 33
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	88 7f       	andi	r24, 0xF8	; 248
    11e0:	90 70       	andi	r25, 0x00	; 0
    11e2:	80 31       	cpi	r24, 0x10	; 16
    11e4:	91 05       	cpc	r25, r1
    11e6:	11 f4       	brne	.+4      	; 0x11ec <TWI_enuRepeatStartCondition+0x36>
		Local_enu_ErrorState = TWI_STATUS_OK;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enu_ErrorState;
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ee:	0f 90       	pop	r0
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <TWI_enuStopCondition>:


//! since there no status code why not doing macro like function
// IDEAS for feature development
TWIStatus_t TWI_enuStopCondition(void){
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	0f 92       	push	r0
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1200:	19 82       	std	Y+1, r1	; 0x01
	 * TWCR_TWINT & TWCR_TWEN - essential to start TWI action
	 *
	 * */


    TWCR_REG = (1 << TWCR_TWSTO) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1202:	e6 e5       	ldi	r30, 0x56	; 86
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	84 e9       	ldi	r24, 0x94	; 148
    1208:	80 83       	st	Z, r24


	Local_enu_ErrorState = TWI_STATUS_OK;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <TWI_enuSetSlaveOperation>:


TWIStatus_t TWI_enuSetSlaveOperation(
		uint8_t copy_u8SlaveAddress, uint8_t copy_u8Operation){
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <TWI_enuSetSlaveOperation+0x6>
    121e:	0f 92       	push	r0
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	6b 83       	std	Y+3, r22	; 0x03

	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1228:	19 82       	std	Y+1, r1	; 0x01

    // Load the slave address and operation (read/write) into the data register
	TWDR_REG = (copy_u8SlaveAddress << 1) | (copy_u8Operation);
    122a:	e3 e2       	ldi	r30, 0x23	; 35
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	88 2f       	mov	r24, r24
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	98 2f       	mov	r25, r24
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	89 2b       	or	r24, r25
    123e:	80 83       	st	Z, r24

    TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1240:	e6 e5       	ldi	r30, 0x56	; 86
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	84 e8       	ldi	r24, 0x84	; 132
    1246:	80 83       	st	Z, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    1248:	e6 e5       	ldi	r30, 0x56	; 86
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	88 23       	and	r24, r24
    1250:	dc f7       	brge	.-10     	; 0x1248 <TWI_enuSetSlaveOperation+0x30>




	if(copy_u8Operation == TWI_WriteOperation){
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	88 23       	and	r24, r24
    1256:	69 f4       	brne	.+26     	; 0x1272 <TWI_enuSetSlaveOperation+0x5a>

		if((TWSR_REG &0xF8) == TWI_SLA_WR_ACK_TSUCCESS_CODE){
    1258:	e1 e2       	ldi	r30, 0x21	; 33
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	88 7f       	andi	r24, 0xF8	; 248
    1264:	90 70       	andi	r25, 0x00	; 0
    1266:	88 31       	cpi	r24, 0x18	; 24
    1268:	91 05       	cpc	r25, r1
    126a:	91 f4       	brne	.+36     	; 0x1290 <TWI_enuSetSlaveOperation+0x78>
			Local_enu_ErrorState = TWI_STATUS_OK;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	0f c0       	rjmp	.+30     	; 0x1290 <TWI_enuSetSlaveOperation+0x78>
		}

	} else if(copy_u8Operation == TWI_ReadOperation){
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	61 f4       	brne	.+24     	; 0x1290 <TWI_enuSetSlaveOperation+0x78>

		if((TWSR_REG &0xF8) == TWI_SLA_RD_ACK_TSUCCESS_CODE){
    1278:	e1 e2       	ldi	r30, 0x21	; 33
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	88 7f       	andi	r24, 0xF8	; 248
    1284:	90 70       	andi	r25, 0x00	; 0
    1286:	80 34       	cpi	r24, 0x40	; 64
    1288:	91 05       	cpc	r25, r1
    128a:	11 f4       	brne	.+4      	; 0x1290 <TWI_enuSetSlaveOperation+0x78>
			Local_enu_ErrorState = TWI_STATUS_OK;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	89 83       	std	Y+1, r24	; 0x01
		}
	}



	return Local_enu_ErrorState;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <TWI_enuWriteData>:

TWIStatus_t	TWI_enuWriteData(uint8_t copy_u8Data){
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <TWI_enuWriteData+0x6>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    12aa:	19 82       	std	Y+1, r1	; 0x01

	TWDR_REG = copy_u8Data;
    12ac:	e3 e2       	ldi	r30, 0x23	; 35
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24


    // Clear the TWINT flag and set TWEN to start the operation
    TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    12b4:	e6 e5       	ldi	r30, 0x56	; 86
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	84 e8       	ldi	r24, 0x84	; 132
    12ba:	80 83       	st	Z, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    12bc:	e6 e5       	ldi	r30, 0x56	; 86
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	88 23       	and	r24, r24
    12c4:	dc f7       	brge	.-10     	; 0x12bc <TWI_enuWriteData+0x1e>
		#if(TWI_MODE_M_or_S == TWI_MASTER_MODE)




			if((TWSR_REG & 0xF8) == 0x28){
    12c6:	e1 e2       	ldi	r30, 0x21	; 33
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	88 7f       	andi	r24, 0xF8	; 248
    12d2:	90 70       	andi	r25, 0x00	; 0
    12d4:	88 32       	cpi	r24, 0x28	; 40
    12d6:	91 05       	cpc	r25, r1
    12d8:	11 f4       	brne	.+4      	; 0x12de <TWI_enuWriteData+0x40>


				Local_enu_ErrorState = TWI_STATUS_OK;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
		#endif

	#endif


	return Local_enu_ErrorState;
    12de:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <TWI_enuReadData>:


//!{works fine with status checking}
TWIStatus_t	TWI_enuReadData(uint8_t  *copy_pu8Data){
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <TWI_enuReadData+0x6>
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	9b 83       	std	Y+3, r25	; 0x03
    12f8:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    12fa:	19 82       	std	Y+1, r1	; 0x01

	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    12fc:	a6 e5       	ldi	r26, 0x56	; 86
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e6 e5       	ldi	r30, 0x56	; 86
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	80 68       	ori	r24, 0x80	; 128
    1308:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    130a:	e6 e5       	ldi	r30, 0x56	; 86
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	88 23       	and	r24, r24
    1312:	dc f7       	brge	.-10     	; 0x130a <TWI_enuReadData+0x20>
	// 0x88 - (slave)  data has been received not ack has been returned

	#if(TWI_ACK_CONFIG == TWI_ACK_ENABLE)

		// Master Receive
		if( ((TWSR_REG & 0xF8) == TWI_M_RSUCCESS_CODE_withAck) ){
    1314:	e1 e2       	ldi	r30, 0x21	; 33
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	88 7f       	andi	r24, 0xF8	; 248
    1320:	90 70       	andi	r25, 0x00	; 0
    1322:	80 35       	cpi	r24, 0x50	; 80
    1324:	91 05       	cpc	r25, r1
    1326:	19 f4       	brne	.+6      	; 0x132e <TWI_enuReadData+0x44>
			Local_enu_ErrorState = TWI_STATUS_OK;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	0c c0       	rjmp	.+24     	; 0x1346 <TWI_enuReadData+0x5c>

		}

		// Slave Receive
		else if(((TWSR_REG & 0xF8) == TWI_S_RSUCCESS_CODE_withACK)){
    132e:	e1 e2       	ldi	r30, 0x21	; 33
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	88 7f       	andi	r24, 0xF8	; 248
    133a:	90 70       	andi	r25, 0x00	; 0
    133c:	80 38       	cpi	r24, 0x80	; 128
    133e:	91 05       	cpc	r25, r1
    1340:	11 f4       	brne	.+4      	; 0x1346 <TWI_enuReadData+0x5c>
			Local_enu_ErrorState = TWI_STATUS_OK;
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	89 83       	std	Y+1, r24	; 0x01
			Local_enu_ErrorState = TWI_STATUS_OK;
		}
	#endif

	// Read data from TWDR Register
	*copy_pu8Data = TWDR_REG;
    1346:	e3 e2       	ldi	r30, 0x23	; 35
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	ea 81       	ldd	r30, Y+2	; 0x02
    134e:	fb 81       	ldd	r31, Y+3	; 0x03
    1350:	80 83       	st	Z, r24

	return Local_enu_ErrorState;
    1352:	89 81       	ldd	r24, Y+1	; 0x01
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <TWI_enuCheckMyAddress>:


//!{works fine with status checking}
ErrorStatus_t TWI_enuCheckMyAddress(void){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    136a:	19 82       	std	Y+1, r1	; 0x01


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    136c:	a6 e5       	ldi	r26, 0x56	; 86
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e6 e5       	ldi	r30, 0x56	; 86
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	80 68       	ori	r24, 0x80	; 128
    1378:	8c 93       	st	X, r24


	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    137a:	e6 e5       	ldi	r30, 0x56	; 86
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	88 23       	and	r24, r24
    1382:	dc f7       	brge	.-10     	; 0x137a <TWI_enuCheckMyAddress+0x1a>


	// 0x60 - SLA+W has been received, ACK has been returned
	// 0xA8 - SLA+R has been received, ACK has been returned

	if((TWSR_REG & 0xF8) == TWI_SLA_WR_ACK_RSUCCESS_CODE){
    1384:	e1 e2       	ldi	r30, 0x21	; 33
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	88 7f       	andi	r24, 0xF8	; 248
    1390:	90 70       	andi	r25, 0x00	; 0
    1392:	80 36       	cpi	r24, 0x60	; 96
    1394:	91 05       	cpc	r25, r1
    1396:	19 f4       	brne	.+6      	; 0x139e <TWI_enuCheckMyAddress+0x3e>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	0c c0       	rjmp	.+24     	; 0x13b6 <TWI_enuCheckMyAddress+0x56>
	}


	else if((TWSR_REG & 0xF8) == TWI_SLA_RD_ACK_RSUCCESS_CODE){
    139e:	e1 e2       	ldi	r30, 0x21	; 33
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	88 7f       	andi	r24, 0xF8	; 248
    13aa:	90 70       	andi	r25, 0x00	; 0
    13ac:	88 3a       	cpi	r24, 0xA8	; 168
    13ae:	91 05       	cpc	r25, r1
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <TWI_enuCheckMyAddress+0x56>
		Local_enu_ErrorState = TWI_STATUS_OK;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <TIMER0_voidInit>:
/*******************************************************************************************************/



/****************************************** TIMER0 FUNCTIONS ******************************************/
void TIMER0_voidInit(void){
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
	 * 3. Enable Interrupt (Compre Match Interrupt - OverFlow Interrupt)
	 *
	 * */

	/** Active global interrupt **/
	GIE_enuEnable();
    13c8:	0e 94 8a 13 	call	0x2714	; 0x2714 <GIE_enuEnable>
			#endif
		#endif


	#elif(TIMER0_MODE_SELECT == TIMER_MODE_FastPWM)
		SET_BIT(TCCR0_REG, TCCR0_WGM00);
    13cc:	a3 e5       	ldi	r26, 0x53	; 83
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e3 e5       	ldi	r30, 0x53	; 83
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	80 64       	ori	r24, 0x40	; 64
    13d8:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_WGM01);
    13da:	a3 e5       	ldi	r26, 0x53	; 83
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e3 e5       	ldi	r30, 0x53	; 83
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	88 60       	ori	r24, 0x08	; 8
    13e6:	8c 93       	st	X, r24

		#if(TIMER0_FastPwm_Type == TIMER_FastPwmType_Inverted)
			CLR_BIT(TCCR0_REG, TCCR0_COM00);
    13e8:	a3 e5       	ldi	r26, 0x53	; 83
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e3 e5       	ldi	r30, 0x53	; 83
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8f 7e       	andi	r24, 0xEF	; 239
    13f4:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, TCCR0_COM01);
    13f6:	a3 e5       	ldi	r26, 0x53	; 83
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e3 e5       	ldi	r30, 0x53	; 83
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 62       	ori	r24, 0x20	; 32
    1402:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, TCCR0_COM01);

		#endif

		// By default, OC0 pin is default output pin for Timer0's PWM signal
		DIO_enuSetPinDirection(TIMER_OC0_PORT, TIMER_OC0_PIN, DIO_u8OUTPUT);
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	63 e0       	ldi	r22, 0x03	; 3
    1408:	41 e0       	ldi	r20, 0x01	; 1
    140a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
		CLR_BIT(TCCR0_REG, TCCR0_CS00);
		SET_BIT(TCCR0_REG, TCCR0_CS01);
		CLR_BIT(TCCR0_REG, TCCR0_CS02);

	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_64)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
    140e:	a3 e5       	ldi	r26, 0x53	; 83
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e3 e5       	ldi	r30, 0x53	; 83
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	81 60       	ori	r24, 0x01	; 1
    141a:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_CS01);
    141c:	a3 e5       	ldi	r26, 0x53	; 83
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e3 e5       	ldi	r30, 0x53	; 83
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	82 60       	ori	r24, 0x02	; 2
    1428:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_CS02);
    142a:	a3 e5       	ldi	r26, 0x53	; 83
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e3 e5       	ldi	r30, 0x53	; 83
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8b 7f       	andi	r24, 0xFB	; 251
    1436:	8c 93       	st	X, r24
	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_1024)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
		CLR_BIT(TCCR0_REG, TCCR0_CS01);
		SET_BIT(TCCR0_REG, TCCR0_CS02);
	#endif
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <TIMER0_voidStart>:

void TIMER0_voidStart(void){
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			SET_BIT(TIMSK_REG, TIMSK_OCIE0);

		#endif
}
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	08 95       	ret

0000144c <TIMER0_voidStop>:

void TIMER0_voidStop(void){
    144c:	df 93       	push	r29
    144e:	cf 93       	push	r28
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			CLR_BIT(TIMSK_REG, TIMSK_OCIE0);

		#endif
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <TIMER0_voidScheduleTask>:

uint8_t TIMER0_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	60 97       	sbiw	r28, 0x10	; 16
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	9a 87       	std	Y+10, r25	; 0x0a
    1478:	89 87       	std	Y+9, r24	; 0x09
    147a:	4b 87       	std	Y+11, r20	; 0x0b
    147c:	5c 87       	std	Y+12, r21	; 0x0c
    147e:	6d 87       	std	Y+13, r22	; 0x0d
    1480:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    1482:	1d 82       	std	Y+5, r1	; 0x05
    1484:	1e 82       	std	Y+6, r1	; 0x06
    1486:	1f 82       	std	Y+7, r1	; 0x07
    1488:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR0_REG & 0x07){
    148a:	e3 e5       	ldi	r30, 0x53	; 83
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9c 01       	movw	r18, r24
    1496:	27 70       	andi	r18, 0x07	; 7
    1498:	30 70       	andi	r19, 0x00	; 0
    149a:	38 8b       	std	Y+16, r19	; 0x10
    149c:	2f 87       	std	Y+15, r18	; 0x0f
    149e:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a0:	98 89       	ldd	r25, Y+16	; 0x10
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	91 05       	cpc	r25, r1
    14a6:	69 f1       	breq	.+90     	; 0x1502 <TIMER0_voidScheduleTask+0xa8>
    14a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    14aa:	38 89       	ldd	r19, Y+16	; 0x10
    14ac:	24 30       	cpi	r18, 0x04	; 4
    14ae:	31 05       	cpc	r19, r1
    14b0:	5c f4       	brge	.+22     	; 0x14c8 <TIMER0_voidScheduleTask+0x6e>
    14b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b4:	98 89       	ldd	r25, Y+16	; 0x10
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	89 f0       	breq	.+34     	; 0x14de <TIMER0_voidScheduleTask+0x84>
    14bc:	2f 85       	ldd	r18, Y+15	; 0x0f
    14be:	38 89       	ldd	r19, Y+16	; 0x10
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	a9 f0       	breq	.+42     	; 0x14f0 <TIMER0_voidScheduleTask+0x96>
    14c6:	37 c0       	rjmp	.+110    	; 0x1536 <TIMER0_voidScheduleTask+0xdc>
    14c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ca:	98 89       	ldd	r25, Y+16	; 0x10
    14cc:	84 30       	cpi	r24, 0x04	; 4
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f1       	breq	.+66     	; 0x1514 <TIMER0_voidScheduleTask+0xba>
    14d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    14d4:	38 89       	ldd	r19, Y+16	; 0x10
    14d6:	25 30       	cpi	r18, 0x05	; 5
    14d8:	31 05       	cpc	r19, r1
    14da:	29 f1       	breq	.+74     	; 0x1526 <TIMER0_voidScheduleTask+0xcc>
    14dc:	2c c0       	rjmp	.+88     	; 0x1536 <TIMER0_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	a0 e0       	ldi	r26, 0x00	; 0
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	8d 83       	std	Y+5, r24	; 0x05
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	af 83       	std	Y+7, r26	; 0x07
    14ec:	b8 87       	std	Y+8, r27	; 0x08
    14ee:	23 c0       	rjmp	.+70     	; 0x1536 <TIMER0_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    14f0:	88 e0       	ldi	r24, 0x08	; 8
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a0 e0       	ldi	r26, 0x00	; 0
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	af 83       	std	Y+7, r26	; 0x07
    14fe:	b8 87       	std	Y+8, r27	; 0x08
    1500:	1a c0       	rjmp	.+52     	; 0x1536 <TIMER0_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    1502:	80 e4       	ldi	r24, 0x40	; 64
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e0       	ldi	r26, 0x00	; 0
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	8d 83       	std	Y+5, r24	; 0x05
    150c:	9e 83       	std	Y+6, r25	; 0x06
    150e:	af 83       	std	Y+7, r26	; 0x07
    1510:	b8 87       	std	Y+8, r27	; 0x08
    1512:	11 c0       	rjmp	.+34     	; 0x1536 <TIMER0_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	a0 e0       	ldi	r26, 0x00	; 0
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	8d 83       	std	Y+5, r24	; 0x05
    151e:	9e 83       	std	Y+6, r25	; 0x06
    1520:	af 83       	std	Y+7, r26	; 0x07
    1522:	b8 87       	std	Y+8, r27	; 0x08
    1524:	08 c0       	rjmp	.+16     	; 0x1536 <TIMER0_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	94 e0       	ldi	r25, 0x04	; 4
    152a:	a0 e0       	ldi	r26, 0x00	; 0
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	8d 83       	std	Y+5, r24	; 0x05
    1530:	9e 83       	std	Y+6, r25	; 0x06
    1532:	af 83       	std	Y+7, r26	; 0x07
    1534:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    1536:	6b 85       	ldd	r22, Y+11	; 0x0b
    1538:	7c 85       	ldd	r23, Y+12	; 0x0c
    153a:	8d 85       	ldd	r24, Y+13	; 0x0d
    153c:	9e 85       	ldd	r25, Y+14	; 0x0e
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	34 e2       	ldi	r19, 0x24	; 36
    1542:	44 e7       	ldi	r20, 0x74	; 116
    1544:	5b e4       	ldi	r21, 0x4B	; 75
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	7c 01       	movw	r14, r24
    1550:	8d 01       	movw	r16, r26
    1552:	6d 81       	ldd	r22, Y+5	; 0x05
    1554:	7e 81       	ldd	r23, Y+6	; 0x06
    1556:	8f 81       	ldd	r24, Y+7	; 0x07
    1558:	98 85       	ldd	r25, Y+8	; 0x08
    155a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    155e:	9b 01       	movw	r18, r22
    1560:	ac 01       	movw	r20, r24
    1562:	c8 01       	movw	r24, r16
    1564:	b7 01       	movw	r22, r14
    1566:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	89 83       	std	Y+1, r24	; 0x01
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	ab 83       	std	Y+3, r26	; 0x03
    1574:	bc 83       	std	Y+4, r27	; 0x04
		}

	#endif


		TIMERS_ISR_Functions[0] = TaskCallback;
    1576:	89 85       	ldd	r24, Y+9	; 0x09
    1578:	9a 85       	ldd	r25, Y+10	; 0x0a
    157a:	90 93 8b 01 	sts	0x018B, r25
    157e:	80 93 8a 01 	sts	0x018A, r24
		TIMER0_voidStart();
    1582:	0e 94 1f 0a 	call	0x143e	; 0x143e <TIMER0_voidStart>
	return 0;
    1586:	80 e0       	ldi	r24, 0x00	; 0
}
    1588:	60 96       	adiw	r28, 0x10	; 16
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	ff 90       	pop	r15
    159e:	ef 90       	pop	r14
    15a0:	08 95       	ret

000015a2 <TIMER0_voidSetPWM>:

void  TIMER0_voidSetPWM(uint8_t copy_u8DutyCycle){
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	0f 92       	push	r0
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Avr32 does has floating point operation
	 * **/


	OCR0_REG = (uint8_t)(((uint16_t)copy_u8DutyCycle * 256) / 100);
    15ae:	ec e5       	ldi	r30, 0x5C	; 92
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	98 2f       	mov	r25, r24
    15ba:	88 27       	eor	r24, r24
    15bc:	24 e6       	ldi	r18, 0x64	; 100
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	b9 01       	movw	r22, r18
    15c2:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__udivmodhi4>
    15c6:	cb 01       	movw	r24, r22
    15c8:	80 83       	st	Z, r24
}
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <TIMER1_voidInit>:
/******************************************************************************************************/


/****************************************** TIMER1 FUNCTIONS ******************************************/

void TIMER1_voidInit(void) {
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	cd b7       	in	r28, 0x3d	; 61
    15d8:	de b7       	in	r29, 0x3e	; 62
	 *
	 */


	/** Active global interrupt **/
	GIE_enuEnable();
    15da:	0e 94 8a 13 	call	0x2714	; 0x2714 <GIE_enuEnable>


	#if(TIMER1_OC1A_OUTPUT_STATE == TIMER1_OC1_OUTPUT_ENABLE)
		DIO_enuSetPinDirection(TIMER_OC1A_PORT, TIMER_OC1A_PIN, DIO_u8OUTPUT);
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	65 e0       	ldi	r22, 0x05	; 5
    15e2:	41 e0       	ldi	r20, 0x01	; 1
    15e4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
		#elif(TIMER_OC1A_OUTPUT_MODE == TIMER_SET_OC1A)
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A0);
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A1);

		#elif(TIMER_OC1A_OUTPUT_MODE == TIMER_CLR_OC1A)
			CLR_BIT(TCCR1A_REG, TCCR1A_COM1A0);
    15e8:	af e4       	ldi	r26, 0x4F	; 79
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	ef e4       	ldi	r30, 0x4F	; 79
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8f 7b       	andi	r24, 0xBF	; 191
    15f4:	8c 93       	st	X, r24
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A1);
    15f6:	af e4       	ldi	r26, 0x4F	; 79
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	ef e4       	ldi	r30, 0x4F	; 79
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	80 68       	ori	r24, 0x80	; 128
    1602:	8c 93       	st	X, r24

		#endif
	#endif

	#if(TIMER1_OC1B_OUTPUT_STATE == TIMER1_OC1_OUTPUT_ENABLE)
		DIO_enuSetPinDirection(TIMER_OC1B_PORT, TIMER_OC1B_PIN, DIO_u8OUTPUT);
    1604:	83 e0       	ldi	r24, 0x03	; 3
    1606:	64 e0       	ldi	r22, 0x04	; 4
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
		#elif(TIMER_OC1B_OUTPUT_MODE == TIMER_SET_OC1B)
			SET_BIT(TCCR1A_REG, TCCR1A_COM1B0);
			SET_BIT(TCCR1A_REG, TCCR1A_COM1B1);

		#elif(TIMER_OC1A_OUTPUT_MODE == TIMER_CLR_OC1A)
			CLR_BIT(TCCR1A_REG, TCCR1A_COM1B0);
    160e:	af e4       	ldi	r26, 0x4F	; 79
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ef e4       	ldi	r30, 0x4F	; 79
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	8f 7e       	andi	r24, 0xEF	; 239
    161a:	8c 93       	st	X, r24
			SET_BIT(TCCR1A_REG, TCCR1A_COM1B1);
    161c:	af e4       	ldi	r26, 0x4F	; 79
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	ef e4       	ldi	r30, 0x4F	; 79
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	80 62       	ori	r24, 0x20	; 32
    1628:	8c 93       	st	X, r24

		CLR_BIT(TCCR1B_REG, TCCR1B_WGM12);
		SET_BIT(TCCR1B_REG, TCCR1B_WGM13);

	#elif(TIMER1_MODE_SELECT == TIMER1_MODE_FastPWM_16bit_FREQ)
		CLR_BIT(TCCR1A_REG, TCCR1A_WGM10);
    162a:	af e4       	ldi	r26, 0x4F	; 79
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	ef e4       	ldi	r30, 0x4F	; 79
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	8e 7f       	andi	r24, 0xFE	; 254
    1636:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG, TCCR1A_WGM11);
    1638:	af e4       	ldi	r26, 0x4F	; 79
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	ef e4       	ldi	r30, 0x4F	; 79
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	82 60       	ori	r24, 0x02	; 2
    1644:	8c 93       	st	X, r24

		SET_BIT(TCCR1B_REG, TCCR1B_WGM12);
    1646:	ae e4       	ldi	r26, 0x4E	; 78
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	ee e4       	ldi	r30, 0x4E	; 78
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	88 60       	ori	r24, 0x08	; 8
    1652:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_WGM13);
    1654:	ae e4       	ldi	r26, 0x4E	; 78
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ee e4       	ldi	r30, 0x4E	; 78
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	80 61       	ori	r24, 0x10	; 16
    1660:	8c 93       	st	X, r24


/***************************************************************************/
	/**2. Set Prescaller clock **/
	#if(TIMER1_CLK_PRE_SELECT == TIMER_PRES_01)
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    1662:	ae e4       	ldi	r26, 0x4E	; 78
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	ee e4       	ldi	r30, 0x4E	; 78
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	81 60       	ori	r24, 0x01	; 1
    166e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    1670:	ae e4       	ldi	r26, 0x4E	; 78
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ee e4       	ldi	r30, 0x4E	; 78
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	8d 7f       	andi	r24, 0xFD	; 253
    167c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    167e:	ae e4       	ldi	r26, 0x4E	; 78
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	ee e4       	ldi	r30, 0x4E	; 78
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	8c 93       	st	X, r24
	#elif(TIMER1_CLK_PRE_SELECT == TIMER_PRES_1024)
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
	#endif
}
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <Timer1_SetupForTimeMeasurement>:



ErrorStatus_t Timer1_SetupForTimeMeasurement(uint16 copy_u16prescaler){
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <Timer1_SetupForTimeMeasurement+0x6>
    1698:	00 d0       	rcall	.+0      	; 0x169a <Timer1_SetupForTimeMeasurement+0x8>
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	9b 83       	std	Y+3, r25	; 0x03
    16a0:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    16a2:	19 82       	std	Y+1, r1	; 0x01


	// Setup Prescaler
	if(copy_u16prescaler == 1){
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	9b 81       	ldd	r25, Y+3	; 0x03
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	91 05       	cpc	r25, r1
    16ac:	b1 f4       	brne	.+44     	; 0x16da <Timer1_SetupForTimeMeasurement+0x48>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    16ae:	ae e4       	ldi	r26, 0x4E	; 78
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ee e4       	ldi	r30, 0x4E	; 78
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	81 60       	ori	r24, 0x01	; 1
    16ba:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    16bc:	ae e4       	ldi	r26, 0x4E	; 78
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	ee e4       	ldi	r30, 0x4E	; 78
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	8d 7f       	andi	r24, 0xFD	; 253
    16c8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    16ca:	ae e4       	ldi	r26, 0x4E	; 78
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ee e4       	ldi	r30, 0x4E	; 78
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	8b 7f       	andi	r24, 0xFB	; 251
    16d6:	8c 93       	st	X, r24
    16d8:	71 c0       	rjmp	.+226    	; 0x17bc <Timer1_SetupForTimeMeasurement+0x12a>

	} else if (copy_u16prescaler == 8){
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	88 30       	cpi	r24, 0x08	; 8
    16e0:	91 05       	cpc	r25, r1
    16e2:	b1 f4       	brne	.+44     	; 0x1710 <Timer1_SetupForTimeMeasurement+0x7e>
		CLR_BIT(TCCR1B_REG, TCCR1B_CS10);
    16e4:	ae e4       	ldi	r26, 0x4E	; 78
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	ee e4       	ldi	r30, 0x4E	; 78
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8e 7f       	andi	r24, 0xFE	; 254
    16f0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS11);
    16f2:	ae e4       	ldi	r26, 0x4E	; 78
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	ee e4       	ldi	r30, 0x4E	; 78
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	82 60       	ori	r24, 0x02	; 2
    16fe:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    1700:	ae e4       	ldi	r26, 0x4E	; 78
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	ee e4       	ldi	r30, 0x4E	; 78
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8b 7f       	andi	r24, 0xFB	; 251
    170c:	8c 93       	st	X, r24
    170e:	56 c0       	rjmp	.+172    	; 0x17bc <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 64){
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	80 34       	cpi	r24, 0x40	; 64
    1716:	91 05       	cpc	r25, r1
    1718:	b1 f4       	brne	.+44     	; 0x1746 <Timer1_SetupForTimeMeasurement+0xb4>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    171a:	ae e4       	ldi	r26, 0x4E	; 78
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ee e4       	ldi	r30, 0x4E	; 78
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	81 60       	ori	r24, 0x01	; 1
    1726:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS11);
    1728:	ae e4       	ldi	r26, 0x4E	; 78
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ee e4       	ldi	r30, 0x4E	; 78
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	82 60       	ori	r24, 0x02	; 2
    1734:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    1736:	ae e4       	ldi	r26, 0x4E	; 78
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ee e4       	ldi	r30, 0x4E	; 78
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8b 7f       	andi	r24, 0xFB	; 251
    1742:	8c 93       	st	X, r24
    1744:	3b c0       	rjmp	.+118    	; 0x17bc <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 256){
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	9b 81       	ldd	r25, Y+3	; 0x03
    174a:	21 e0       	ldi	r18, 0x01	; 1
    174c:	80 30       	cpi	r24, 0x00	; 0
    174e:	92 07       	cpc	r25, r18
    1750:	b1 f4       	brne	.+44     	; 0x177e <Timer1_SetupForTimeMeasurement+0xec>
		CLR_BIT(TCCR1B_REG, TCCR1B_CS10);
    1752:	ae e4       	ldi	r26, 0x4E	; 78
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ee e4       	ldi	r30, 0x4E	; 78
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	8e 7f       	andi	r24, 0xFE	; 254
    175e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    1760:	ae e4       	ldi	r26, 0x4E	; 78
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ee e4       	ldi	r30, 0x4E	; 78
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	8d 7f       	andi	r24, 0xFD	; 253
    176c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
    176e:	ae e4       	ldi	r26, 0x4E	; 78
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ee e4       	ldi	r30, 0x4E	; 78
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	84 60       	ori	r24, 0x04	; 4
    177a:	8c 93       	st	X, r24
    177c:	1f c0       	rjmp	.+62     	; 0x17bc <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 1024){
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	9b 81       	ldd	r25, Y+3	; 0x03
    1782:	24 e0       	ldi	r18, 0x04	; 4
    1784:	80 30       	cpi	r24, 0x00	; 0
    1786:	92 07       	cpc	r25, r18
    1788:	b1 f4       	brne	.+44     	; 0x17b6 <Timer1_SetupForTimeMeasurement+0x124>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    178a:	ae e4       	ldi	r26, 0x4E	; 78
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ee e4       	ldi	r30, 0x4E	; 78
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	81 60       	ori	r24, 0x01	; 1
    1796:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    1798:	ae e4       	ldi	r26, 0x4E	; 78
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	ee e4       	ldi	r30, 0x4E	; 78
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	8d 7f       	andi	r24, 0xFD	; 253
    17a4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
    17a6:	ae e4       	ldi	r26, 0x4E	; 78
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	ee e4       	ldi	r30, 0x4E	; 78
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	84 60       	ori	r24, 0x04	; 4
    17b2:	8c 93       	st	X, r24
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <Timer1_SetupForTimeMeasurement+0x12a>

	} else{
		return Local_enuErrrorState;
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	8c 83       	std	Y+4, r24	; 0x04
    17ba:	0b c0       	rjmp	.+22     	; 0x17d2 <Timer1_SetupForTimeMeasurement+0x140>
	}


	// Setup normal mode without no pwm
	TCCR1A_REG = 0x00;
    17bc:	ef e4       	ldi	r30, 0x4F	; 79
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	10 82       	st	Z, r1

	// Reset the timer counter
	RESET_TIMER1();
    17c2:	ec e4       	ldi	r30, 0x4C	; 76
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	11 82       	std	Z+1, r1	; 0x01
    17c8:	10 82       	st	Z, r1

	Local_enuErrrorState = ERROR_STATUS_OK;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    17ce:	29 81       	ldd	r18, Y+1	; 0x01
    17d0:	2c 83       	std	Y+4, r18	; 0x04
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <TIMER1_u16ReadCount>:


uint16 TIMER1_u16ReadCount(void){
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    17ea:	ec e4       	ldi	r30, 0x4C	; 76
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	91 81       	ldd	r25, Z+1	; 0x01
}
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <TIMER1_voidStart>:


void TIMER1_voidStart(void) {
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        SET_BIT(TIMSK_REG, TIMSK_OCIE1A);

    #endif
}
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <TIMER1_voidStop>:


void TIMER1_voidStop(void) {
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        CLR_BIT(TIMSK_REG, TIMSK_OCIE1A);

    #endif
}
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <TIMER1_voidScheduleTask>:

uint8_t TIMER1_voidScheduleTask(void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds) {
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	61 97       	sbiw	r28, 0x11	; 17
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	9a 87       	std	Y+10, r25	; 0x0a
    1832:	89 87       	std	Y+9, r24	; 0x09
    1834:	4b 87       	std	Y+11, r20	; 0x0b
    1836:	5c 87       	std	Y+12, r21	; 0x0c
    1838:	6d 87       	std	Y+13, r22	; 0x0d
    183a:	7e 87       	std	Y+14, r23	; 0x0e
    uint32_t Local_u32PrescalerValue = 0;
    183c:	1d 82       	std	Y+5, r1	; 0x05
    183e:	1e 82       	std	Y+6, r1	; 0x06
    1840:	1f 82       	std	Y+7, r1	; 0x07
    1842:	18 86       	std	Y+8, r1	; 0x08

    switch(TCCR1B & 0x07) {
    1844:	ee e4       	ldi	r30, 0x4E	; 78
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	88 2f       	mov	r24, r24
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9c 01       	movw	r18, r24
    1850:	27 70       	andi	r18, 0x07	; 7
    1852:	30 70       	andi	r19, 0x00	; 0
    1854:	39 8b       	std	Y+17, r19	; 0x11
    1856:	28 8b       	std	Y+16, r18	; 0x10
    1858:	88 89       	ldd	r24, Y+16	; 0x10
    185a:	99 89       	ldd	r25, Y+17	; 0x11
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	69 f1       	breq	.+90     	; 0x18bc <TIMER1_voidScheduleTask+0xa8>
    1862:	28 89       	ldd	r18, Y+16	; 0x10
    1864:	39 89       	ldd	r19, Y+17	; 0x11
    1866:	24 30       	cpi	r18, 0x04	; 4
    1868:	31 05       	cpc	r19, r1
    186a:	5c f4       	brge	.+22     	; 0x1882 <TIMER1_voidScheduleTask+0x6e>
    186c:	88 89       	ldd	r24, Y+16	; 0x10
    186e:	99 89       	ldd	r25, Y+17	; 0x11
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	91 05       	cpc	r25, r1
    1874:	89 f0       	breq	.+34     	; 0x1898 <TIMER1_voidScheduleTask+0x84>
    1876:	28 89       	ldd	r18, Y+16	; 0x10
    1878:	39 89       	ldd	r19, Y+17	; 0x11
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	a9 f0       	breq	.+42     	; 0x18aa <TIMER1_voidScheduleTask+0x96>
    1880:	38 c0       	rjmp	.+112    	; 0x18f2 <TIMER1_voidScheduleTask+0xde>
    1882:	88 89       	ldd	r24, Y+16	; 0x10
    1884:	99 89       	ldd	r25, Y+17	; 0x11
    1886:	84 30       	cpi	r24, 0x04	; 4
    1888:	91 05       	cpc	r25, r1
    188a:	09 f1       	breq	.+66     	; 0x18ce <TIMER1_voidScheduleTask+0xba>
    188c:	28 89       	ldd	r18, Y+16	; 0x10
    188e:	39 89       	ldd	r19, Y+17	; 0x11
    1890:	25 30       	cpi	r18, 0x05	; 5
    1892:	31 05       	cpc	r19, r1
    1894:	29 f1       	breq	.+74     	; 0x18e0 <TIMER1_voidScheduleTask+0xcc>
    1896:	2d c0       	rjmp	.+90     	; 0x18f2 <TIMER1_voidScheduleTask+0xde>
        case 0x01: Local_u32PrescalerValue = 1; break;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e0       	ldi	r26, 0x00	; 0
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	8d 83       	std	Y+5, r24	; 0x05
    18a2:	9e 83       	std	Y+6, r25	; 0x06
    18a4:	af 83       	std	Y+7, r26	; 0x07
    18a6:	b8 87       	std	Y+8, r27	; 0x08
    18a8:	27 c0       	rjmp	.+78     	; 0x18f8 <TIMER1_voidScheduleTask+0xe4>
        case 0x02: Local_u32PrescalerValue = 8; break;
    18aa:	88 e0       	ldi	r24, 0x08	; 8
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a0 e0       	ldi	r26, 0x00	; 0
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	8d 83       	std	Y+5, r24	; 0x05
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	af 83       	std	Y+7, r26	; 0x07
    18b8:	b8 87       	std	Y+8, r27	; 0x08
    18ba:	1e c0       	rjmp	.+60     	; 0x18f8 <TIMER1_voidScheduleTask+0xe4>
        case 0x03: Local_u32PrescalerValue = 64; break;
    18bc:	80 e4       	ldi	r24, 0x40	; 64
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	a0 e0       	ldi	r26, 0x00	; 0
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	9e 83       	std	Y+6, r25	; 0x06
    18c8:	af 83       	std	Y+7, r26	; 0x07
    18ca:	b8 87       	std	Y+8, r27	; 0x08
    18cc:	15 c0       	rjmp	.+42     	; 0x18f8 <TIMER1_voidScheduleTask+0xe4>
        case 0x04: Local_u32PrescalerValue = 256; break;
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	a0 e0       	ldi	r26, 0x00	; 0
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	8d 83       	std	Y+5, r24	; 0x05
    18d8:	9e 83       	std	Y+6, r25	; 0x06
    18da:	af 83       	std	Y+7, r26	; 0x07
    18dc:	b8 87       	std	Y+8, r27	; 0x08
    18de:	0c c0       	rjmp	.+24     	; 0x18f8 <TIMER1_voidScheduleTask+0xe4>
        case 0x05: Local_u32PrescalerValue = 1024; break;
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	94 e0       	ldi	r25, 0x04	; 4
    18e4:	a0 e0       	ldi	r26, 0x00	; 0
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	af 83       	std	Y+7, r26	; 0x07
    18ee:	b8 87       	std	Y+8, r27	; 0x08
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <TIMER1_voidScheduleTask+0xe4>
        default: return 1; // Invalid prescaler setting
    18f2:	31 e0       	ldi	r19, 0x01	; 1
    18f4:	3f 87       	std	Y+15, r19	; 0x0f
    18f6:	31 c0       	rjmp	.+98     	; 0x195a <TIMER1_voidScheduleTask+0x146>
    }

    float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU) / Local_u32PrescalerValue;
    18f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	34 e2       	ldi	r19, 0x24	; 36
    1904:	44 e7       	ldi	r20, 0x74	; 116
    1906:	5b e4       	ldi	r21, 0x4B	; 75
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	7c 01       	movw	r14, r24
    1912:	8d 01       	movw	r16, r26
    1914:	6d 81       	ldd	r22, Y+5	; 0x05
    1916:	7e 81       	ldd	r23, Y+6	; 0x06
    1918:	8f 81       	ldd	r24, Y+7	; 0x07
    191a:	98 85       	ldd	r25, Y+8	; 0x08
    191c:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1920:	9b 01       	movw	r18, r22
    1922:	ac 01       	movw	r20, r24
    1924:	c8 01       	movw	r24, r16
    1926:	b7 01       	movw	r22, r14
    1928:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	9a 83       	std	Y+2, r25	; 0x02
    1934:	ab 83       	std	Y+3, r26	; 0x03
    1936:	bc 83       	std	Y+4, r27	; 0x04
            OCR1A = 65535;
            TIMER1_TARGET_NTICKS = (uint32_t)(Local_f64Totalticks / 65535.0);
        }
    #endif

    TIMER1_CURRENT_NTICKS = 0;
    1938:	10 92 82 01 	sts	0x0182, r1
    193c:	10 92 83 01 	sts	0x0183, r1
    1940:	10 92 84 01 	sts	0x0184, r1
    1944:	10 92 85 01 	sts	0x0185, r1
    TIMERS_ISR_Functions[1] = TaskCallback;
    1948:	89 85       	ldd	r24, Y+9	; 0x09
    194a:	9a 85       	ldd	r25, Y+10	; 0x0a
    194c:	90 93 8d 01 	sts	0x018D, r25
    1950:	80 93 8c 01 	sts	0x018C, r24
    TIMER1_voidStart();
    1954:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TIMER1_voidStart>
    return 0;
    1958:	1f 86       	std	Y+15, r1	; 0x0f
    195a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	08 95       	ret

00001976 <TIMER1_voidSetPWM>:


void TIMER1_voidSetPWM(uint8_t copy_u8DutyCycle, uint8_t copy_u8Channel) {
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	00 d0       	rcall	.+0      	; 0x1988 <TIMER1_voidSetPWM+0x12>
    1988:	00 d0       	rcall	.+0      	; 0x198a <TIMER1_voidSetPWM+0x14>
    198a:	00 d0       	rcall	.+0      	; 0x198c <TIMER1_voidSetPWM+0x16>
    198c:	cd b7       	in	r28, 0x3d	; 61
    198e:	de b7       	in	r29, 0x3e	; 62
    1990:	8b 83       	std	Y+3, r24	; 0x03
    1992:	6c 83       	std	Y+4, r22	; 0x04

		uint16_t Local_u16TopValue = 0;
    1994:	1a 82       	std	Y+2, r1	; 0x02
    1996:	19 82       	std	Y+1, r1	; 0x01
			// Ensure ICR1 is already set correctly during initialization
			Local_u16TopValue = ICR1;  // ICR1 for Phase and Frequency Correct

		#endif

		switch(copy_u8Channel){
    1998:	8c 81       	ldd	r24, Y+4	; 0x04
    199a:	28 2f       	mov	r18, r24
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	3e 83       	std	Y+6, r19	; 0x06
    19a0:	2d 83       	std	Y+5, r18	; 0x05
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	9e 81       	ldd	r25, Y+6	; 0x06
    19a6:	82 34       	cpi	r24, 0x42	; 66
    19a8:	91 05       	cpc	r25, r1
    19aa:	c9 f1       	breq	.+114    	; 0x1a1e <TIMER1_voidSetPWM+0xa8>
    19ac:	ed 81       	ldd	r30, Y+5	; 0x05
    19ae:	fe 81       	ldd	r31, Y+6	; 0x06
    19b0:	e3 34       	cpi	r30, 0x43	; 67
    19b2:	f1 05       	cpc	r31, r1
    19b4:	34 f4       	brge	.+12     	; 0x19c2 <TIMER1_voidSetPWM+0x4c>
    19b6:	2d 81       	ldd	r18, Y+5	; 0x05
    19b8:	3e 81       	ldd	r19, Y+6	; 0x06
    19ba:	21 34       	cpi	r18, 0x41	; 65
    19bc:	31 05       	cpc	r19, r1
    19be:	61 f0       	breq	.+24     	; 0x19d8 <TIMER1_voidSetPWM+0x62>
    19c0:	50 c0       	rjmp	.+160    	; 0x1a62 <TIMER1_voidSetPWM+0xec>
    19c2:	8d 81       	ldd	r24, Y+5	; 0x05
    19c4:	9e 81       	ldd	r25, Y+6	; 0x06
    19c6:	81 36       	cpi	r24, 0x61	; 97
    19c8:	91 05       	cpc	r25, r1
    19ca:	31 f0       	breq	.+12     	; 0x19d8 <TIMER1_voidSetPWM+0x62>
    19cc:	ed 81       	ldd	r30, Y+5	; 0x05
    19ce:	fe 81       	ldd	r31, Y+6	; 0x06
    19d0:	e2 36       	cpi	r30, 0x62	; 98
    19d2:	f1 05       	cpc	r31, r1
    19d4:	21 f1       	breq	.+72     	; 0x1a1e <TIMER1_voidSetPWM+0xa8>
    19d6:	45 c0       	rjmp	.+138    	; 0x1a62 <TIMER1_voidSetPWM+0xec>

			case 'A': case 'a':

				OCR1A_REG = (uint16_t)(((uint32_t)copy_u8DutyCycle * Local_u16TopValue) / 100);
    19d8:	0f 2e       	mov	r0, r31
    19da:	fa e4       	ldi	r31, 0x4A	; 74
    19dc:	cf 2e       	mov	r12, r31
    19de:	dd 24       	eor	r13, r13
    19e0:	f0 2d       	mov	r31, r0
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	e8 2e       	mov	r14, r24
    19e6:	ff 24       	eor	r15, r15
    19e8:	00 e0       	ldi	r16, 0x00	; 0
    19ea:	10 e0       	ldi	r17, 0x00	; 0
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	9c 01       	movw	r18, r24
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	50 e0       	ldi	r21, 0x00	; 0
    19f6:	c8 01       	movw	r24, r16
    19f8:	b7 01       	movw	r22, r14
    19fa:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <__mulsi3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	24 e6       	ldi	r18, 0x64	; 100
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e0       	ldi	r20, 0x00	; 0
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	bc 01       	movw	r22, r24
    1a0c:	cd 01       	movw	r24, r26
    1a0e:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__udivmodsi4>
    1a12:	da 01       	movw	r26, r20
    1a14:	c9 01       	movw	r24, r18
    1a16:	f6 01       	movw	r30, r12
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
    1a1c:	22 c0       	rjmp	.+68     	; 0x1a62 <TIMER1_voidSetPWM+0xec>
			break;

			case 'B': case 'b':
				OCR1B_REG = (uint16_t)(((uint32_t)copy_u8DutyCycle * Local_u16TopValue) / 100);
    1a1e:	0f 2e       	mov	r0, r31
    1a20:	f8 e4       	ldi	r31, 0x48	; 72
    1a22:	cf 2e       	mov	r12, r31
    1a24:	dd 24       	eor	r13, r13
    1a26:	f0 2d       	mov	r31, r0
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	e8 2e       	mov	r14, r24
    1a2c:	ff 24       	eor	r15, r15
    1a2e:	00 e0       	ldi	r16, 0x00	; 0
    1a30:	10 e0       	ldi	r17, 0x00	; 0
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
    1a36:	9c 01       	movw	r18, r24
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	50 e0       	ldi	r21, 0x00	; 0
    1a3c:	c8 01       	movw	r24, r16
    1a3e:	b7 01       	movw	r22, r14
    1a40:	0e 94 c5 27 	call	0x4f8a	; 0x4f8a <__mulsi3>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	24 e6       	ldi	r18, 0x64	; 100
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	40 e0       	ldi	r20, 0x00	; 0
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	bc 01       	movw	r22, r24
    1a52:	cd 01       	movw	r24, r26
    1a54:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__udivmodsi4>
    1a58:	da 01       	movw	r26, r20
    1a5a:	c9 01       	movw	r24, r18
    1a5c:	f6 01       	movw	r30, r12
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
		}

}
    1a62:	26 96       	adiw	r28, 0x06	; 6
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	1f 91       	pop	r17
    1a74:	0f 91       	pop	r16
    1a76:	ff 90       	pop	r15
    1a78:	ef 90       	pop	r14
    1a7a:	df 90       	pop	r13
    1a7c:	cf 90       	pop	r12
    1a7e:	08 95       	ret

00001a80 <TIMER1_voidSetPWM_16bit>:

#if(TIMER1_MODE_SELECT == TIMER1_MODE_FastPWM_16bit_FREQ || TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit_FREQ )
void TIMER1_voidSetPWM_16bit(double copy_u8DutyCycle, uint32_t copy_u32Frequency, uint8_t copy_u8Channel) {
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	69 97       	sbiw	r28, 0x19	; 25
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
    1a98:	6d 87       	std	Y+13, r22	; 0x0d
    1a9a:	7e 87       	std	Y+14, r23	; 0x0e
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f
    1a9e:	98 8b       	std	Y+16, r25	; 0x10
    1aa0:	29 8b       	std	Y+17, r18	; 0x11
    1aa2:	3a 8b       	std	Y+18, r19	; 0x12
    1aa4:	4b 8b       	std	Y+19, r20	; 0x13
    1aa6:	5c 8b       	std	Y+20, r21	; 0x14
    1aa8:	0d 8b       	std	Y+21, r16	; 0x15
    double Local_u32PrescalerValue = 0;
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a0 e0       	ldi	r26, 0x00	; 0
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	89 87       	std	Y+9, r24	; 0x09
    1ab4:	9a 87       	std	Y+10, r25	; 0x0a
    1ab6:	ab 87       	std	Y+11, r26	; 0x0b
    1ab8:	bc 87       	std	Y+12, r27	; 0x0c
    switch (TCCR1B_REG & 0x07) {
    1aba:	ee e4       	ldi	r30, 0x4E	; 78
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9c 01       	movw	r18, r24
    1ac6:	27 70       	andi	r18, 0x07	; 7
    1ac8:	30 70       	andi	r19, 0x00	; 0
    1aca:	39 8f       	std	Y+25, r19	; 0x19
    1acc:	28 8f       	std	Y+24, r18	; 0x18
    1ace:	88 8d       	ldd	r24, Y+24	; 0x18
    1ad0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ad2:	83 30       	cpi	r24, 0x03	; 3
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	69 f1       	breq	.+90     	; 0x1b32 <TIMER1_voidSetPWM_16bit+0xb2>
    1ad8:	e8 8d       	ldd	r30, Y+24	; 0x18
    1ada:	f9 8d       	ldd	r31, Y+25	; 0x19
    1adc:	e4 30       	cpi	r30, 0x04	; 4
    1ade:	f1 05       	cpc	r31, r1
    1ae0:	5c f4       	brge	.+22     	; 0x1af8 <TIMER1_voidSetPWM_16bit+0x78>
    1ae2:	28 8d       	ldd	r18, Y+24	; 0x18
    1ae4:	39 8d       	ldd	r19, Y+25	; 0x19
    1ae6:	21 30       	cpi	r18, 0x01	; 1
    1ae8:	31 05       	cpc	r19, r1
    1aea:	89 f0       	breq	.+34     	; 0x1b0e <TIMER1_voidSetPWM_16bit+0x8e>
    1aec:	88 8d       	ldd	r24, Y+24	; 0x18
    1aee:	99 8d       	ldd	r25, Y+25	; 0x19
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	91 05       	cpc	r25, r1
    1af4:	a9 f0       	breq	.+42     	; 0x1b20 <TIMER1_voidSetPWM_16bit+0xa0>
    1af6:	38 c0       	rjmp	.+112    	; 0x1b68 <TIMER1_voidSetPWM_16bit+0xe8>
    1af8:	e8 8d       	ldd	r30, Y+24	; 0x18
    1afa:	f9 8d       	ldd	r31, Y+25	; 0x19
    1afc:	e4 30       	cpi	r30, 0x04	; 4
    1afe:	f1 05       	cpc	r31, r1
    1b00:	09 f1       	breq	.+66     	; 0x1b44 <TIMER1_voidSetPWM_16bit+0xc4>
    1b02:	28 8d       	ldd	r18, Y+24	; 0x18
    1b04:	39 8d       	ldd	r19, Y+25	; 0x19
    1b06:	25 30       	cpi	r18, 0x05	; 5
    1b08:	31 05       	cpc	r19, r1
    1b0a:	29 f1       	breq	.+74     	; 0x1b56 <TIMER1_voidSetPWM_16bit+0xd6>
    1b0c:	2d c0       	rjmp	.+90     	; 0x1b68 <TIMER1_voidSetPWM_16bit+0xe8>
        case 0x01: Local_u32PrescalerValue = 1; break;
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	a0 e8       	ldi	r26, 0x80	; 128
    1b14:	bf e3       	ldi	r27, 0x3F	; 63
    1b16:	89 87       	std	Y+9, r24	; 0x09
    1b18:	9a 87       	std	Y+10, r25	; 0x0a
    1b1a:	ab 87       	std	Y+11, r26	; 0x0b
    1b1c:	bc 87       	std	Y+12, r27	; 0x0c
    1b1e:	2c c0       	rjmp	.+88     	; 0x1b78 <TIMER1_voidSetPWM_16bit+0xf8>
        case 0x02: Local_u32PrescalerValue = 8; break;
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	a0 e0       	ldi	r26, 0x00	; 0
    1b26:	b1 e4       	ldi	r27, 0x41	; 65
    1b28:	89 87       	std	Y+9, r24	; 0x09
    1b2a:	9a 87       	std	Y+10, r25	; 0x0a
    1b2c:	ab 87       	std	Y+11, r26	; 0x0b
    1b2e:	bc 87       	std	Y+12, r27	; 0x0c
    1b30:	23 c0       	rjmp	.+70     	; 0x1b78 <TIMER1_voidSetPWM_16bit+0xf8>
        case 0x03: Local_u32PrescalerValue = 64; break;
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a0 e8       	ldi	r26, 0x80	; 128
    1b38:	b2 e4       	ldi	r27, 0x42	; 66
    1b3a:	89 87       	std	Y+9, r24	; 0x09
    1b3c:	9a 87       	std	Y+10, r25	; 0x0a
    1b3e:	ab 87       	std	Y+11, r26	; 0x0b
    1b40:	bc 87       	std	Y+12, r27	; 0x0c
    1b42:	1a c0       	rjmp	.+52     	; 0x1b78 <TIMER1_voidSetPWM_16bit+0xf8>
        case 0x04: Local_u32PrescalerValue = 256; break;
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e8       	ldi	r26, 0x80	; 128
    1b4a:	b3 e4       	ldi	r27, 0x43	; 67
    1b4c:	89 87       	std	Y+9, r24	; 0x09
    1b4e:	9a 87       	std	Y+10, r25	; 0x0a
    1b50:	ab 87       	std	Y+11, r26	; 0x0b
    1b52:	bc 87       	std	Y+12, r27	; 0x0c
    1b54:	11 c0       	rjmp	.+34     	; 0x1b78 <TIMER1_voidSetPWM_16bit+0xf8>
        case 0x05: Local_u32PrescalerValue = 1024; break;
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 e8       	ldi	r26, 0x80	; 128
    1b5c:	b4 e4       	ldi	r27, 0x44	; 68
    1b5e:	89 87       	std	Y+9, r24	; 0x09
    1b60:	9a 87       	std	Y+10, r25	; 0x0a
    1b62:	ab 87       	std	Y+11, r26	; 0x0b
    1b64:	bc 87       	std	Y+12, r27	; 0x0c
    1b66:	08 c0       	rjmp	.+16     	; 0x1b78 <TIMER1_voidSetPWM_16bit+0xf8>
        default: Local_u32PrescalerValue = 8; // Default to prescaler 8
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e0       	ldi	r26, 0x00	; 0
    1b6e:	b1 e4       	ldi	r27, 0x41	; 65
    1b70:	89 87       	std	Y+9, r24	; 0x09
    1b72:	9a 87       	std	Y+10, r25	; 0x0a
    1b74:	ab 87       	std	Y+11, r26	; 0x0b
    1b76:	bc 87       	std	Y+12, r27	; 0x0c
    }

    // Calculate TOP value based on desired frequency
    double icr1Double = (double)(F_CPU) / (Local_u32PrescalerValue * copy_u32Frequency) - 1;
    1b78:	69 89       	ldd	r22, Y+17	; 0x11
    1b7a:	7a 89       	ldd	r23, Y+18	; 0x12
    1b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b80:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	29 85       	ldd	r18, Y+9	; 0x09
    1b8e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b90:	4b 85       	ldd	r20, Y+11	; 0x0b
    1b92:	5c 85       	ldd	r21, Y+12	; 0x0c
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	9c 01       	movw	r18, r24
    1b9e:	ad 01       	movw	r20, r26
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	74 e2       	ldi	r23, 0x24	; 36
    1ba4:	84 e7       	ldi	r24, 0x74	; 116
    1ba6:	9b e4       	ldi	r25, 0x4B	; 75
    1ba8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	bc 01       	movw	r22, r24
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	af 83       	std	Y+7, r26	; 0x07
    1bca:	b8 87       	std	Y+8, r27	; 0x08
    ICR1 = (uint32_t)icr1Double;
    1bcc:	06 e4       	ldi	r16, 0x46	; 70
    1bce:	10 e0       	ldi	r17, 0x00	; 0
    1bd0:	6d 81       	ldd	r22, Y+5	; 0x05
    1bd2:	7e 81       	ldd	r23, Y+6	; 0x06
    1bd4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd6:	98 85       	ldd	r25, Y+8	; 0x08
    1bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	f8 01       	movw	r30, r16
    1be2:	91 83       	std	Z+1, r25	; 0x01
    1be4:	80 83       	st	Z, r24

    // Calculate OCR1A value based on desired duty cycle percentage with rounding
    double dutyCycleValue = (copy_u8DutyCycle * icr1Double) / 100.0;
    1be6:	6d 85       	ldd	r22, Y+13	; 0x0d
    1be8:	7e 85       	ldd	r23, Y+14	; 0x0e
    1bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bec:	98 89       	ldd	r25, Y+16	; 0x10
    1bee:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf0:	3e 81       	ldd	r19, Y+6	; 0x06
    1bf2:	4f 81       	ldd	r20, Y+7	; 0x07
    1bf4:	58 85       	ldd	r21, Y+8	; 0x08
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	48 ec       	ldi	r20, 0xC8	; 200
    1c08:	52 e4       	ldi	r21, 0x42	; 66
    1c0a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	ab 83       	std	Y+3, r26	; 0x03
    1c18:	bc 83       	std	Y+4, r27	; 0x04


    switch(copy_u8Channel){
    1c1a:	8d 89       	ldd	r24, Y+21	; 0x15
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	3f 8b       	std	Y+23, r19	; 0x17
    1c22:	2e 8b       	std	Y+22, r18	; 0x16
    1c24:	8e 89       	ldd	r24, Y+22	; 0x16
    1c26:	9f 89       	ldd	r25, Y+23	; 0x17
    1c28:	82 34       	cpi	r24, 0x42	; 66
    1c2a:	91 05       	cpc	r25, r1
    1c2c:	61 f1       	breq	.+88     	; 0x1c86 <TIMER1_voidSetPWM_16bit+0x206>
    1c2e:	ee 89       	ldd	r30, Y+22	; 0x16
    1c30:	ff 89       	ldd	r31, Y+23	; 0x17
    1c32:	e3 34       	cpi	r30, 0x43	; 67
    1c34:	f1 05       	cpc	r31, r1
    1c36:	34 f4       	brge	.+12     	; 0x1c44 <TIMER1_voidSetPWM_16bit+0x1c4>
    1c38:	2e 89       	ldd	r18, Y+22	; 0x16
    1c3a:	3f 89       	ldd	r19, Y+23	; 0x17
    1c3c:	21 34       	cpi	r18, 0x41	; 65
    1c3e:	31 05       	cpc	r19, r1
    1c40:	61 f0       	breq	.+24     	; 0x1c5a <TIMER1_voidSetPWM_16bit+0x1da>
    1c42:	36 c0       	rjmp	.+108    	; 0x1cb0 <TIMER1_voidSetPWM_16bit+0x230>
    1c44:	8e 89       	ldd	r24, Y+22	; 0x16
    1c46:	9f 89       	ldd	r25, Y+23	; 0x17
    1c48:	81 36       	cpi	r24, 0x61	; 97
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	31 f0       	breq	.+12     	; 0x1c5a <TIMER1_voidSetPWM_16bit+0x1da>
    1c4e:	ee 89       	ldd	r30, Y+22	; 0x16
    1c50:	ff 89       	ldd	r31, Y+23	; 0x17
    1c52:	e2 36       	cpi	r30, 0x62	; 98
    1c54:	f1 05       	cpc	r31, r1
    1c56:	b9 f0       	breq	.+46     	; 0x1c86 <TIMER1_voidSetPWM_16bit+0x206>
    1c58:	2b c0       	rjmp	.+86     	; 0x1cb0 <TIMER1_voidSetPWM_16bit+0x230>

    	case 'A': case 'a':
    		OCR1A_REG = (uint16_t)round(dutyCycleValue);
    1c5a:	0a e4       	ldi	r16, 0x4A	; 74
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	ab 81       	ldd	r26, Y+3	; 0x03
    1c64:	bc 81       	ldd	r27, Y+4	; 0x04
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <round>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	f8 01       	movw	r30, r16
    1c80:	91 83       	std	Z+1, r25	; 0x01
    1c82:	80 83       	st	Z, r24
    1c84:	15 c0       	rjmp	.+42     	; 0x1cb0 <TIMER1_voidSetPWM_16bit+0x230>
    	break;

    	case 'B': case 'b':
    		OCR1B_REG = (uint16_t)round(dutyCycleValue);
    1c86:	08 e4       	ldi	r16, 0x48	; 72
    1c88:	10 e0       	ldi	r17, 0x00	; 0
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c90:	bc 81       	ldd	r27, Y+4	; 0x04
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <round>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	f8 01       	movw	r30, r16
    1cac:	91 83       	std	Z+1, r25	; 0x01
    1cae:	80 83       	st	Z, r24
    	break;
    }

}
    1cb0:	69 96       	adiw	r28, 0x19	; 25
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	1f 91       	pop	r17
    1cc2:	0f 91       	pop	r16
    1cc4:	08 95       	ret

00001cc6 <TIMER1_CalculateDutyCycleFromTon>:

double TIMER1_CalculateDutyCycleFromTon(double copy_f64HighTimeMilliseconds, uint32_t copy_u32Frequency){
    1cc6:	ef 92       	push	r14
    1cc8:	ff 92       	push	r15
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	2c 97       	sbiw	r28, 0x0c	; 12
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	69 83       	std	Y+1, r22	; 0x01
    1ce4:	7a 83       	std	Y+2, r23	; 0x02
    1ce6:	8b 83       	std	Y+3, r24	; 0x03
    1ce8:	9c 83       	std	Y+4, r25	; 0x04
    1cea:	2d 83       	std	Y+5, r18	; 0x05
    1cec:	3e 83       	std	Y+6, r19	; 0x06
    1cee:	4f 83       	std	Y+7, r20	; 0x07
    1cf0:	58 87       	std	Y+8, r21	; 0x08


	if(copy_f64HighTimeMilliseconds != 0 && copy_u32Frequency != 0){
    1cf2:	69 81       	ldd	r22, Y+1	; 0x01
    1cf4:	7a 81       	ldd	r23, Y+2	; 0x02
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1d06:	88 23       	and	r24, r24
    1d08:	e9 f1       	breq	.+122    	; 0x1d84 <TIMER1_CalculateDutyCycleFromTon+0xbe>
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	af 81       	ldd	r26, Y+7	; 0x07
    1d10:	b8 85       	ldd	r27, Y+8	; 0x08
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	a1 05       	cpc	r26, r1
    1d16:	b1 05       	cpc	r27, r1
    1d18:	a9 f1       	breq	.+106    	; 0x1d84 <TIMER1_CalculateDutyCycleFromTon+0xbe>


		return ( (copy_f64HighTimeMilliseconds /1000.0) / (1.0 / copy_u32Frequency) ) * 100.0;
    1d1a:	69 81       	ldd	r22, Y+1	; 0x01
    1d1c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	4a e7       	ldi	r20, 0x7A	; 122
    1d28:	54 e4       	ldi	r21, 0x44	; 68
    1d2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	7c 01       	movw	r14, r24
    1d34:	8d 01       	movw	r16, r26
    1d36:	6d 81       	ldd	r22, Y+5	; 0x05
    1d38:	7e 81       	ldd	r23, Y+6	; 0x06
    1d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3c:	98 85       	ldd	r25, Y+8	; 0x08
    1d3e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1d42:	9b 01       	movw	r18, r22
    1d44:	ac 01       	movw	r20, r24
    1d46:	60 e0       	ldi	r22, 0x00	; 0
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	80 e8       	ldi	r24, 0x80	; 128
    1d4c:	9f e3       	ldi	r25, 0x3F	; 63
    1d4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	9c 01       	movw	r18, r24
    1d58:	ad 01       	movw	r20, r26
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	b7 01       	movw	r22, r14
    1d5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	48 ec       	ldi	r20, 0xC8	; 200
    1d70:	52 e4       	ldi	r21, 0x42	; 66
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	89 87       	std	Y+9, r24	; 0x09
    1d7c:	9a 87       	std	Y+10, r25	; 0x0a
    1d7e:	ab 87       	std	Y+11, r26	; 0x0b
    1d80:	bc 87       	std	Y+12, r27	; 0x0c
    1d82:	08 c0       	rjmp	.+16     	; 0x1d94 <TIMER1_CalculateDutyCycleFromTon+0xce>
	}

	return 0;
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a0 e0       	ldi	r26, 0x00	; 0
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	89 87       	std	Y+9, r24	; 0x09
    1d8e:	9a 87       	std	Y+10, r25	; 0x0a
    1d90:	ab 87       	std	Y+11, r26	; 0x0b
    1d92:	bc 87       	std	Y+12, r27	; 0x0c
    1d94:	89 85       	ldd	r24, Y+9	; 0x09
    1d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d98:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d9a:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	2c 96       	adiw	r28, 0x0c	; 12
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	ff 90       	pop	r15
    1db6:	ef 90       	pop	r14
    1db8:	08 95       	ret

00001dba <TIMER2_voidInit>:
#endif
/******************************************************************************************************/


/****************************************** TIMER2 FUNCTIONS ******************************************/
void TIMER2_voidInit(void){
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
			#endif

		#endif

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_FastPWM)
		SET_BIT(TCCR2_REG, TCCR2_WGM20);
    1dc2:	a5 e4       	ldi	r26, 0x45	; 69
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e4       	ldi	r30, 0x45	; 69
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 64       	ori	r24, 0x40	; 64
    1dce:	8c 93       	st	X, r24
		SET_BIT(TCCR2_REG, TCCR2_WGM21);
    1dd0:	a5 e4       	ldi	r26, 0x45	; 69
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e5 e4       	ldi	r30, 0x45	; 69
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	88 60       	ori	r24, 0x08	; 8
    1ddc:	8c 93       	st	X, r24

		#if(TIMER2_FastPwm_Type == TIMER_FastPwmType_Inverted)
			CLR_BIT(TCCR2_REG, TCCR2_COM20);
    1dde:	a5 e4       	ldi	r26, 0x45	; 69
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e5 e4       	ldi	r30, 0x45	; 69
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	8f 7e       	andi	r24, 0xEF	; 239
    1dea:	8c 93       	st	X, r24
			SET_BIT(TCCR2_REG, TCCR2_COM21);
    1dec:	a5 e4       	ldi	r26, 0x45	; 69
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e5 e4       	ldi	r30, 0x45	; 69
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	80 62       	ori	r24, 0x20	; 32
    1df8:	8c 93       	st	X, r24
		#elif(TIMER2_FastPwm_Type == TIMER_FastPwmType_NonInverted)
			SET_BIT(TCCR2_REG, TCCR2_COM20);
			SET_BIT(TCCR2_REG, TCCR2_COM21);
		#endif
		DIO_enuSetPinDirection(TIMER_OC2_PORT, TIMER_OC2_PIN, DIO_u8OUTPUT);
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	67 e0       	ldi	r22, 0x07	; 7
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
		SET_BIT(TCCR2_REG, TCCR2_CS20);
		SET_BIT(TCCR2_REG, TCCR2_CS21);
		CLR_BIT(TCCR2_REG, TCCR2_CS22);

	#elif(TIMER2_CLK_PRE_SELECT == TIMER_PRES_64)
		CLR_BIT(TCCR2_REG, TCCR2_CS20);
    1e04:	a5 e4       	ldi	r26, 0x45	; 69
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e5 e4       	ldi	r30, 0x45	; 69
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8e 7f       	andi	r24, 0xFE	; 254
    1e10:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_CS21);
    1e12:	a5 e4       	ldi	r26, 0x45	; 69
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e5 e4       	ldi	r30, 0x45	; 69
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	8d 7f       	andi	r24, 0xFD	; 253
    1e1e:	8c 93       	st	X, r24
		SET_BIT(TCCR2_REG, TCCR2_CS22);
    1e20:	a5 e4       	ldi	r26, 0x45	; 69
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e5 e4       	ldi	r30, 0x45	; 69
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	84 60       	ori	r24, 0x04	; 4
    1e2c:	8c 93       	st	X, r24
	#endif
	/******************************************************************************/


	// Turn Global Interrupt ON
	GIE_enuEnable();
    1e2e:	0e 94 8a 13 	call	0x2714	; 0x2714 <GIE_enuEnable>


}
    1e32:	cf 91       	pop	r28
    1e34:	df 91       	pop	r29
    1e36:	08 95       	ret

00001e38 <TIMER2_voidStart>:

void TIMER2_voidStart(void){
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		SET_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <TIMER2_voidStop>:

void TIMER2_voidStop(void){
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		CLR_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <TIMER2_voidScheduleTask>:

uint8_t TIMER2_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    1e54:	ef 92       	push	r14
    1e56:	ff 92       	push	r15
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	df 93       	push	r29
    1e5e:	cf 93       	push	r28
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	60 97       	sbiw	r28, 0x10	; 16
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	9a 87       	std	Y+10, r25	; 0x0a
    1e72:	89 87       	std	Y+9, r24	; 0x09
    1e74:	4b 87       	std	Y+11, r20	; 0x0b
    1e76:	5c 87       	std	Y+12, r21	; 0x0c
    1e78:	6d 87       	std	Y+13, r22	; 0x0d
    1e7a:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    1e7c:	1d 82       	std	Y+5, r1	; 0x05
    1e7e:	1e 82       	std	Y+6, r1	; 0x06
    1e80:	1f 82       	std	Y+7, r1	; 0x07
    1e82:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR2 & 0x07){
    1e84:	e5 e4       	ldi	r30, 0x45	; 69
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	9c 01       	movw	r18, r24
    1e90:	27 70       	andi	r18, 0x07	; 7
    1e92:	30 70       	andi	r19, 0x00	; 0
    1e94:	38 8b       	std	Y+16, r19	; 0x10
    1e96:	2f 87       	std	Y+15, r18	; 0x0f
    1e98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e9a:	98 89       	ldd	r25, Y+16	; 0x10
    1e9c:	83 30       	cpi	r24, 0x03	; 3
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	69 f1       	breq	.+90     	; 0x1efc <TIMER2_voidScheduleTask+0xa8>
    1ea2:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ea4:	38 89       	ldd	r19, Y+16	; 0x10
    1ea6:	24 30       	cpi	r18, 0x04	; 4
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	5c f4       	brge	.+22     	; 0x1ec2 <TIMER2_voidScheduleTask+0x6e>
    1eac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eae:	98 89       	ldd	r25, Y+16	; 0x10
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	89 f0       	breq	.+34     	; 0x1ed8 <TIMER2_voidScheduleTask+0x84>
    1eb6:	2f 85       	ldd	r18, Y+15	; 0x0f
    1eb8:	38 89       	ldd	r19, Y+16	; 0x10
    1eba:	22 30       	cpi	r18, 0x02	; 2
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	a9 f0       	breq	.+42     	; 0x1eea <TIMER2_voidScheduleTask+0x96>
    1ec0:	37 c0       	rjmp	.+110    	; 0x1f30 <TIMER2_voidScheduleTask+0xdc>
    1ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ec4:	98 89       	ldd	r25, Y+16	; 0x10
    1ec6:	84 30       	cpi	r24, 0x04	; 4
    1ec8:	91 05       	cpc	r25, r1
    1eca:	09 f1       	breq	.+66     	; 0x1f0e <TIMER2_voidScheduleTask+0xba>
    1ecc:	2f 85       	ldd	r18, Y+15	; 0x0f
    1ece:	38 89       	ldd	r19, Y+16	; 0x10
    1ed0:	25 30       	cpi	r18, 0x05	; 5
    1ed2:	31 05       	cpc	r19, r1
    1ed4:	29 f1       	breq	.+74     	; 0x1f20 <TIMER2_voidScheduleTask+0xcc>
    1ed6:	2c c0       	rjmp	.+88     	; 0x1f30 <TIMER2_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	a0 e0       	ldi	r26, 0x00	; 0
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	8d 83       	std	Y+5, r24	; 0x05
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	af 83       	std	Y+7, r26	; 0x07
    1ee6:	b8 87       	std	Y+8, r27	; 0x08
    1ee8:	23 c0       	rjmp	.+70     	; 0x1f30 <TIMER2_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    1eea:	88 e0       	ldi	r24, 0x08	; 8
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a0 e0       	ldi	r26, 0x00	; 0
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
    1ef4:	9e 83       	std	Y+6, r25	; 0x06
    1ef6:	af 83       	std	Y+7, r26	; 0x07
    1ef8:	b8 87       	std	Y+8, r27	; 0x08
    1efa:	1a c0       	rjmp	.+52     	; 0x1f30 <TIMER2_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    1efc:	80 e4       	ldi	r24, 0x40	; 64
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a0 e0       	ldi	r26, 0x00	; 0
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	8d 83       	std	Y+5, r24	; 0x05
    1f06:	9e 83       	std	Y+6, r25	; 0x06
    1f08:	af 83       	std	Y+7, r26	; 0x07
    1f0a:	b8 87       	std	Y+8, r27	; 0x08
    1f0c:	11 c0       	rjmp	.+34     	; 0x1f30 <TIMER2_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	a0 e0       	ldi	r26, 0x00	; 0
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	af 83       	std	Y+7, r26	; 0x07
    1f1c:	b8 87       	std	Y+8, r27	; 0x08
    1f1e:	08 c0       	rjmp	.+16     	; 0x1f30 <TIMER2_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	94 e0       	ldi	r25, 0x04	; 4
    1f24:	a0 e0       	ldi	r26, 0x00	; 0
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	af 83       	std	Y+7, r26	; 0x07
    1f2e:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    1f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	34 e2       	ldi	r19, 0x24	; 36
    1f3c:	44 e7       	ldi	r20, 0x74	; 116
    1f3e:	5b e4       	ldi	r21, 0x4B	; 75
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	7c 01       	movw	r14, r24
    1f4a:	8d 01       	movw	r16, r26
    1f4c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f4e:	7e 81       	ldd	r23, Y+6	; 0x06
    1f50:	8f 81       	ldd	r24, Y+7	; 0x07
    1f52:	98 85       	ldd	r25, Y+8	; 0x08
    1f54:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1f58:	9b 01       	movw	r18, r22
    1f5a:	ac 01       	movw	r20, r24
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	b7 01       	movw	r22, r14
    1f60:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	89 83       	std	Y+1, r24	; 0x01
    1f6a:	9a 83       	std	Y+2, r25	; 0x02
    1f6c:	ab 83       	std	Y+3, r26	; 0x03
    1f6e:	bc 83       	std	Y+4, r27	; 0x04
		}

	#endif


		TIMERS_ISR_Functions[2] = TaskCallback;
    1f70:	89 85       	ldd	r24, Y+9	; 0x09
    1f72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f74:	90 93 8f 01 	sts	0x018F, r25
    1f78:	80 93 8e 01 	sts	0x018E, r24
		TIMER2_voidStart();
    1f7c:	0e 94 1c 0f 	call	0x1e38	; 0x1e38 <TIMER2_voidStart>
	return 0;
    1f80:	80 e0       	ldi	r24, 0x00	; 0

}
    1f82:	60 96       	adiw	r28, 0x10	; 16
    1f84:	0f b6       	in	r0, 0x3f	; 63
    1f86:	f8 94       	cli
    1f88:	de bf       	out	0x3e, r29	; 62
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	cd bf       	out	0x3d, r28	; 61
    1f8e:	cf 91       	pop	r28
    1f90:	df 91       	pop	r29
    1f92:	1f 91       	pop	r17
    1f94:	0f 91       	pop	r16
    1f96:	ff 90       	pop	r15
    1f98:	ef 90       	pop	r14
    1f9a:	08 95       	ret

00001f9c <TIMER2_voidSetPWM>:


void  TIMER2_voidSetPWM(uint8_t copy_u8DutyCycle){
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	0f 92       	push	r0
    1fa2:	cd b7       	in	r28, 0x3d	; 61
    1fa4:	de b7       	in	r29, 0x3e	; 62
    1fa6:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Avr32 does has floating point operation
	 * **/


	OCR2_REG = (uint8_t)(((uint16_t)copy_u8DutyCycle * 256) / 100);
    1fa8:	e3 e4       	ldi	r30, 0x43	; 67
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	88 2f       	mov	r24, r24
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	98 2f       	mov	r25, r24
    1fb4:	88 27       	eor	r24, r24
    1fb6:	24 e6       	ldi	r18, 0x64	; 100
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	b9 01       	movw	r22, r18
    1fbc:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__udivmodhi4>
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	80 83       	st	Z, r24
}
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <TIMER_voidWDTSleep>:
/*******************************************************************************************************/



/****************************************** WATCH DOG TIMER INTERFACE ******************************************/
void TIMER_voidWDTSleep(uint8_t copy_u8WdtPeriod){
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	0f 92       	push	r0
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	89 83       	std	Y+1, r24	; 0x01
    // Reset watchdog timer using macro
    WDT_voidRestart();
    1fd8:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    1fda:	a1 e4       	ldi	r26, 0x41	; 65
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e1 e4       	ldi	r30, 0x41	; 65
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 61       	ori	r24, 0x18	; 24
    1fe6:	8c 93       	st	X, r24

    // Set watchdog timer prescaler and enable watchdog timer
    WDTCSR_REG = (1 << WDTCSR_WDE) | copy_u8WdtPeriod;
    1fe8:	e1 e4       	ldi	r30, 0x41	; 65
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	88 60       	ori	r24, 0x08	; 8
    1ff0:	80 83       	st	Z, r24

}
    1ff2:	0f 90       	pop	r0
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <TIMER_voidWDTEnable>:

void TIMER_voidWDTEnable (void){
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
    // Reset watchdog timer using macro
    WDT_voidRestart();
    2002:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    2004:	a1 e4       	ldi	r26, 0x41	; 65
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e1 e4       	ldi	r30, 0x41	; 65
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	88 61       	ori	r24, 0x18	; 24
    2010:	8c 93       	st	X, r24

    // Enable watchdog timer with the previously set period
    SET_BIT(WDTCSR_REG, WDTCSR_WDE);
    2012:	a1 e4       	ldi	r26, 0x41	; 65
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e1 e4       	ldi	r30, 0x41	; 65
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	88 60       	ori	r24, 0x08	; 8
    201e:	8c 93       	st	X, r24

}
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <TIMER_voidWDTDisable>:


void TIMER_voidWDTDisable(void) {
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    // Reset watchdog timer using macro
    WDT_voidRestart();
    202e:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    2030:	a1 e4       	ldi	r26, 0x41	; 65
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e1 e4       	ldi	r30, 0x41	; 65
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	88 61       	ori	r24, 0x18	; 24
    203c:	8c 93       	st	X, r24

    // Disable watchdog timer
    WDTCSR_REG = 0x00;
    203e:	e1 e4       	ldi	r30, 0x41	; 65
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	10 82       	st	Z, r1
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <__vector_11>:





ISR(TIMER0_OVF_vect){
    204a:	1f 92       	push	r1
    204c:	0f 92       	push	r0
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	0f 92       	push	r0
    2052:	11 24       	eor	r1, r1
    2054:	2f 93       	push	r18
    2056:	3f 93       	push	r19
    2058:	4f 93       	push	r20
    205a:	5f 93       	push	r21
    205c:	6f 93       	push	r22
    205e:	7f 93       	push	r23
    2060:	8f 93       	push	r24
    2062:	9f 93       	push	r25
    2064:	af 93       	push	r26
    2066:	bf 93       	push	r27
    2068:	ef 93       	push	r30
    206a:	ff 93       	push	r31
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    2074:	80 91 7e 01 	lds	r24, 0x017E
    2078:	90 91 7f 01 	lds	r25, 0x017F
    207c:	a0 91 80 01 	lds	r26, 0x0180
    2080:	b0 91 81 01 	lds	r27, 0x0181
    2084:	01 96       	adiw	r24, 0x01	; 1
    2086:	a1 1d       	adc	r26, r1
    2088:	b1 1d       	adc	r27, r1
    208a:	80 93 7e 01 	sts	0x017E, r24
    208e:	90 93 7f 01 	sts	0x017F, r25
    2092:	a0 93 80 01 	sts	0x0180, r26
    2096:	b0 93 81 01 	sts	0x0181, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    209a:	20 91 7e 01 	lds	r18, 0x017E
    209e:	30 91 7f 01 	lds	r19, 0x017F
    20a2:	40 91 80 01 	lds	r20, 0x0180
    20a6:	50 91 81 01 	lds	r21, 0x0181
    20aa:	80 91 90 01 	lds	r24, 0x0190
    20ae:	90 91 91 01 	lds	r25, 0x0191
    20b2:	a0 91 92 01 	lds	r26, 0x0192
    20b6:	b0 91 93 01 	lds	r27, 0x0193
    20ba:	28 17       	cp	r18, r24
    20bc:	39 07       	cpc	r19, r25
    20be:	4a 07       	cpc	r20, r26
    20c0:	5b 07       	cpc	r21, r27
    20c2:	68 f0       	brcs	.+26     	; 0x20de <__vector_11+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    20c4:	10 92 7e 01 	sts	0x017E, r1
    20c8:	10 92 7f 01 	sts	0x017F, r1
    20cc:	10 92 80 01 	sts	0x0180, r1
    20d0:	10 92 81 01 	sts	0x0181, r1
		TIMERS_ISR_Functions[0]();
    20d4:	e0 91 8a 01 	lds	r30, 0x018A
    20d8:	f0 91 8b 01 	lds	r31, 0x018B
    20dc:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	ff 91       	pop	r31
    20e4:	ef 91       	pop	r30
    20e6:	bf 91       	pop	r27
    20e8:	af 91       	pop	r26
    20ea:	9f 91       	pop	r25
    20ec:	8f 91       	pop	r24
    20ee:	7f 91       	pop	r23
    20f0:	6f 91       	pop	r22
    20f2:	5f 91       	pop	r21
    20f4:	4f 91       	pop	r20
    20f6:	3f 91       	pop	r19
    20f8:	2f 91       	pop	r18
    20fa:	0f 90       	pop	r0
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	0f 90       	pop	r0
    2100:	1f 90       	pop	r1
    2102:	18 95       	reti

00002104 <__vector_10>:

ISR(TIMER0_COMP_vect){
    2104:	1f 92       	push	r1
    2106:	0f 92       	push	r0
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	0f 92       	push	r0
    210c:	11 24       	eor	r1, r1
    210e:	2f 93       	push	r18
    2110:	3f 93       	push	r19
    2112:	4f 93       	push	r20
    2114:	5f 93       	push	r21
    2116:	6f 93       	push	r22
    2118:	7f 93       	push	r23
    211a:	8f 93       	push	r24
    211c:	9f 93       	push	r25
    211e:	af 93       	push	r26
    2120:	bf 93       	push	r27
    2122:	ef 93       	push	r30
    2124:	ff 93       	push	r31
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	cd b7       	in	r28, 0x3d	; 61
    212c:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    212e:	80 91 7e 01 	lds	r24, 0x017E
    2132:	90 91 7f 01 	lds	r25, 0x017F
    2136:	a0 91 80 01 	lds	r26, 0x0180
    213a:	b0 91 81 01 	lds	r27, 0x0181
    213e:	01 96       	adiw	r24, 0x01	; 1
    2140:	a1 1d       	adc	r26, r1
    2142:	b1 1d       	adc	r27, r1
    2144:	80 93 7e 01 	sts	0x017E, r24
    2148:	90 93 7f 01 	sts	0x017F, r25
    214c:	a0 93 80 01 	sts	0x0180, r26
    2150:	b0 93 81 01 	sts	0x0181, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    2154:	20 91 7e 01 	lds	r18, 0x017E
    2158:	30 91 7f 01 	lds	r19, 0x017F
    215c:	40 91 80 01 	lds	r20, 0x0180
    2160:	50 91 81 01 	lds	r21, 0x0181
    2164:	80 91 90 01 	lds	r24, 0x0190
    2168:	90 91 91 01 	lds	r25, 0x0191
    216c:	a0 91 92 01 	lds	r26, 0x0192
    2170:	b0 91 93 01 	lds	r27, 0x0193
    2174:	28 17       	cp	r18, r24
    2176:	39 07       	cpc	r19, r25
    2178:	4a 07       	cpc	r20, r26
    217a:	5b 07       	cpc	r21, r27
    217c:	68 f0       	brcs	.+26     	; 0x2198 <__vector_10+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    217e:	10 92 7e 01 	sts	0x017E, r1
    2182:	10 92 7f 01 	sts	0x017F, r1
    2186:	10 92 80 01 	sts	0x0180, r1
    218a:	10 92 81 01 	sts	0x0181, r1
		TIMERS_ISR_Functions[0]();
    218e:	e0 91 8a 01 	lds	r30, 0x018A
    2192:	f0 91 8b 01 	lds	r31, 0x018B
    2196:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	ff 91       	pop	r31
    219e:	ef 91       	pop	r30
    21a0:	bf 91       	pop	r27
    21a2:	af 91       	pop	r26
    21a4:	9f 91       	pop	r25
    21a6:	8f 91       	pop	r24
    21a8:	7f 91       	pop	r23
    21aa:	6f 91       	pop	r22
    21ac:	5f 91       	pop	r21
    21ae:	4f 91       	pop	r20
    21b0:	3f 91       	pop	r19
    21b2:	2f 91       	pop	r18
    21b4:	0f 90       	pop	r0
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	0f 90       	pop	r0
    21ba:	1f 90       	pop	r1
    21bc:	18 95       	reti

000021be <__vector_9>:

ISR(TIMER1_OVF_vect){
    21be:	1f 92       	push	r1
    21c0:	0f 92       	push	r0
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	0f 92       	push	r0
    21c6:	11 24       	eor	r1, r1
    21c8:	2f 93       	push	r18
    21ca:	3f 93       	push	r19
    21cc:	4f 93       	push	r20
    21ce:	5f 93       	push	r21
    21d0:	6f 93       	push	r22
    21d2:	7f 93       	push	r23
    21d4:	8f 93       	push	r24
    21d6:	9f 93       	push	r25
    21d8:	af 93       	push	r26
    21da:	bf 93       	push	r27
    21dc:	ef 93       	push	r30
    21de:	ff 93       	push	r31
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62

	TIMER1_CURRENT_NTICKS++;
    21e8:	80 91 82 01 	lds	r24, 0x0182
    21ec:	90 91 83 01 	lds	r25, 0x0183
    21f0:	a0 91 84 01 	lds	r26, 0x0184
    21f4:	b0 91 85 01 	lds	r27, 0x0185
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	a1 1d       	adc	r26, r1
    21fc:	b1 1d       	adc	r27, r1
    21fe:	80 93 82 01 	sts	0x0182, r24
    2202:	90 93 83 01 	sts	0x0183, r25
    2206:	a0 93 84 01 	sts	0x0184, r26
    220a:	b0 93 85 01 	sts	0x0185, r27

	if(TIMER1_CURRENT_NTICKS >= TIMER1_TARGET_NTICKS){
    220e:	20 91 82 01 	lds	r18, 0x0182
    2212:	30 91 83 01 	lds	r19, 0x0183
    2216:	40 91 84 01 	lds	r20, 0x0184
    221a:	50 91 85 01 	lds	r21, 0x0185
    221e:	80 91 94 01 	lds	r24, 0x0194
    2222:	90 91 95 01 	lds	r25, 0x0195
    2226:	a0 91 96 01 	lds	r26, 0x0196
    222a:	b0 91 97 01 	lds	r27, 0x0197
    222e:	28 17       	cp	r18, r24
    2230:	39 07       	cpc	r19, r25
    2232:	4a 07       	cpc	r20, r26
    2234:	5b 07       	cpc	r21, r27
    2236:	68 f0       	brcs	.+26     	; 0x2252 <__vector_9+0x94>
		TIMER1_CURRENT_NTICKS = 0;
    2238:	10 92 82 01 	sts	0x0182, r1
    223c:	10 92 83 01 	sts	0x0183, r1
    2240:	10 92 84 01 	sts	0x0184, r1
    2244:	10 92 85 01 	sts	0x0185, r1
		TIMERS_ISR_Functions[1]();
    2248:	e0 91 8c 01 	lds	r30, 0x018C
    224c:	f0 91 8d 01 	lds	r31, 0x018D
    2250:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	ff 91       	pop	r31
    2258:	ef 91       	pop	r30
    225a:	bf 91       	pop	r27
    225c:	af 91       	pop	r26
    225e:	9f 91       	pop	r25
    2260:	8f 91       	pop	r24
    2262:	7f 91       	pop	r23
    2264:	6f 91       	pop	r22
    2266:	5f 91       	pop	r21
    2268:	4f 91       	pop	r20
    226a:	3f 91       	pop	r19
    226c:	2f 91       	pop	r18
    226e:	0f 90       	pop	r0
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	0f 90       	pop	r0
    2274:	1f 90       	pop	r1
    2276:	18 95       	reti

00002278 <__vector_7>:

ISR(TIMER1_COMPA_vect){
    2278:	1f 92       	push	r1
    227a:	0f 92       	push	r0
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	0f 92       	push	r0
    2280:	11 24       	eor	r1, r1
    2282:	2f 93       	push	r18
    2284:	3f 93       	push	r19
    2286:	4f 93       	push	r20
    2288:	5f 93       	push	r21
    228a:	6f 93       	push	r22
    228c:	7f 93       	push	r23
    228e:	8f 93       	push	r24
    2290:	9f 93       	push	r25
    2292:	af 93       	push	r26
    2294:	bf 93       	push	r27
    2296:	ef 93       	push	r30
    2298:	ff 93       	push	r31
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62


	#if(TIMER1_MODE_SELECT == TIMER1_MODE_ANY_PIN_PWM)
		DIO_enuTogglePinValue(global_u8PortID, global_u8PinID);
	#else
		TIMER1_CURRENT_NTICKS++;
    22a2:	80 91 82 01 	lds	r24, 0x0182
    22a6:	90 91 83 01 	lds	r25, 0x0183
    22aa:	a0 91 84 01 	lds	r26, 0x0184
    22ae:	b0 91 85 01 	lds	r27, 0x0185
    22b2:	01 96       	adiw	r24, 0x01	; 1
    22b4:	a1 1d       	adc	r26, r1
    22b6:	b1 1d       	adc	r27, r1
    22b8:	80 93 82 01 	sts	0x0182, r24
    22bc:	90 93 83 01 	sts	0x0183, r25
    22c0:	a0 93 84 01 	sts	0x0184, r26
    22c4:	b0 93 85 01 	sts	0x0185, r27

		if(TIMER1_CURRENT_NTICKS >= TIMER1_TARGET_NTICKS){
    22c8:	20 91 82 01 	lds	r18, 0x0182
    22cc:	30 91 83 01 	lds	r19, 0x0183
    22d0:	40 91 84 01 	lds	r20, 0x0184
    22d4:	50 91 85 01 	lds	r21, 0x0185
    22d8:	80 91 94 01 	lds	r24, 0x0194
    22dc:	90 91 95 01 	lds	r25, 0x0195
    22e0:	a0 91 96 01 	lds	r26, 0x0196
    22e4:	b0 91 97 01 	lds	r27, 0x0197
    22e8:	28 17       	cp	r18, r24
    22ea:	39 07       	cpc	r19, r25
    22ec:	4a 07       	cpc	r20, r26
    22ee:	5b 07       	cpc	r21, r27
    22f0:	68 f0       	brcs	.+26     	; 0x230c <__vector_7+0x94>
			TIMER1_CURRENT_NTICKS = 0;
    22f2:	10 92 82 01 	sts	0x0182, r1
    22f6:	10 92 83 01 	sts	0x0183, r1
    22fa:	10 92 84 01 	sts	0x0184, r1
    22fe:	10 92 85 01 	sts	0x0185, r1
			TIMERS_ISR_Functions[1]();
    2302:	e0 91 8c 01 	lds	r30, 0x018C
    2306:	f0 91 8d 01 	lds	r31, 0x018D
    230a:	09 95       	icall
		}
	#endif


}
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	ff 91       	pop	r31
    2312:	ef 91       	pop	r30
    2314:	bf 91       	pop	r27
    2316:	af 91       	pop	r26
    2318:	9f 91       	pop	r25
    231a:	8f 91       	pop	r24
    231c:	7f 91       	pop	r23
    231e:	6f 91       	pop	r22
    2320:	5f 91       	pop	r21
    2322:	4f 91       	pop	r20
    2324:	3f 91       	pop	r19
    2326:	2f 91       	pop	r18
    2328:	0f 90       	pop	r0
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	0f 90       	pop	r0
    232e:	1f 90       	pop	r1
    2330:	18 95       	reti

00002332 <__vector_5>:


ISR(TIMER2_OVF_vect){
    2332:	1f 92       	push	r1
    2334:	0f 92       	push	r0
    2336:	0f b6       	in	r0, 0x3f	; 63
    2338:	0f 92       	push	r0
    233a:	11 24       	eor	r1, r1
    233c:	2f 93       	push	r18
    233e:	3f 93       	push	r19
    2340:	4f 93       	push	r20
    2342:	5f 93       	push	r21
    2344:	6f 93       	push	r22
    2346:	7f 93       	push	r23
    2348:	8f 93       	push	r24
    234a:	9f 93       	push	r25
    234c:	af 93       	push	r26
    234e:	bf 93       	push	r27
    2350:	ef 93       	push	r30
    2352:	ff 93       	push	r31
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    235c:	80 91 86 01 	lds	r24, 0x0186
    2360:	90 91 87 01 	lds	r25, 0x0187
    2364:	a0 91 88 01 	lds	r26, 0x0188
    2368:	b0 91 89 01 	lds	r27, 0x0189
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	a1 1d       	adc	r26, r1
    2370:	b1 1d       	adc	r27, r1
    2372:	80 93 86 01 	sts	0x0186, r24
    2376:	90 93 87 01 	sts	0x0187, r25
    237a:	a0 93 88 01 	sts	0x0188, r26
    237e:	b0 93 89 01 	sts	0x0189, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    2382:	20 91 86 01 	lds	r18, 0x0186
    2386:	30 91 87 01 	lds	r19, 0x0187
    238a:	40 91 88 01 	lds	r20, 0x0188
    238e:	50 91 89 01 	lds	r21, 0x0189
    2392:	80 91 98 01 	lds	r24, 0x0198
    2396:	90 91 99 01 	lds	r25, 0x0199
    239a:	a0 91 9a 01 	lds	r26, 0x019A
    239e:	b0 91 9b 01 	lds	r27, 0x019B
    23a2:	28 17       	cp	r18, r24
    23a4:	39 07       	cpc	r19, r25
    23a6:	4a 07       	cpc	r20, r26
    23a8:	5b 07       	cpc	r21, r27
    23aa:	68 f0       	brcs	.+26     	; 0x23c6 <__vector_5+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    23ac:	10 92 86 01 	sts	0x0186, r1
    23b0:	10 92 87 01 	sts	0x0187, r1
    23b4:	10 92 88 01 	sts	0x0188, r1
    23b8:	10 92 89 01 	sts	0x0189, r1
		TIMERS_ISR_Functions[2]();
    23bc:	e0 91 8e 01 	lds	r30, 0x018E
    23c0:	f0 91 8f 01 	lds	r31, 0x018F
    23c4:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything
}
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	ff 91       	pop	r31
    23cc:	ef 91       	pop	r30
    23ce:	bf 91       	pop	r27
    23d0:	af 91       	pop	r26
    23d2:	9f 91       	pop	r25
    23d4:	8f 91       	pop	r24
    23d6:	7f 91       	pop	r23
    23d8:	6f 91       	pop	r22
    23da:	5f 91       	pop	r21
    23dc:	4f 91       	pop	r20
    23de:	3f 91       	pop	r19
    23e0:	2f 91       	pop	r18
    23e2:	0f 90       	pop	r0
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	0f 90       	pop	r0
    23e8:	1f 90       	pop	r1
    23ea:	18 95       	reti

000023ec <__vector_4>:

ISR(TIMER2_COMP_vect){
    23ec:	1f 92       	push	r1
    23ee:	0f 92       	push	r0
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	0f 92       	push	r0
    23f4:	11 24       	eor	r1, r1
    23f6:	2f 93       	push	r18
    23f8:	3f 93       	push	r19
    23fa:	4f 93       	push	r20
    23fc:	5f 93       	push	r21
    23fe:	6f 93       	push	r22
    2400:	7f 93       	push	r23
    2402:	8f 93       	push	r24
    2404:	9f 93       	push	r25
    2406:	af 93       	push	r26
    2408:	bf 93       	push	r27
    240a:	ef 93       	push	r30
    240c:	ff 93       	push	r31
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    2416:	80 91 86 01 	lds	r24, 0x0186
    241a:	90 91 87 01 	lds	r25, 0x0187
    241e:	a0 91 88 01 	lds	r26, 0x0188
    2422:	b0 91 89 01 	lds	r27, 0x0189
    2426:	01 96       	adiw	r24, 0x01	; 1
    2428:	a1 1d       	adc	r26, r1
    242a:	b1 1d       	adc	r27, r1
    242c:	80 93 86 01 	sts	0x0186, r24
    2430:	90 93 87 01 	sts	0x0187, r25
    2434:	a0 93 88 01 	sts	0x0188, r26
    2438:	b0 93 89 01 	sts	0x0189, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    243c:	20 91 86 01 	lds	r18, 0x0186
    2440:	30 91 87 01 	lds	r19, 0x0187
    2444:	40 91 88 01 	lds	r20, 0x0188
    2448:	50 91 89 01 	lds	r21, 0x0189
    244c:	80 91 98 01 	lds	r24, 0x0198
    2450:	90 91 99 01 	lds	r25, 0x0199
    2454:	a0 91 9a 01 	lds	r26, 0x019A
    2458:	b0 91 9b 01 	lds	r27, 0x019B
    245c:	28 17       	cp	r18, r24
    245e:	39 07       	cpc	r19, r25
    2460:	4a 07       	cpc	r20, r26
    2462:	5b 07       	cpc	r21, r27
    2464:	68 f0       	brcs	.+26     	; 0x2480 <__vector_4+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    2466:	10 92 86 01 	sts	0x0186, r1
    246a:	10 92 87 01 	sts	0x0187, r1
    246e:	10 92 88 01 	sts	0x0188, r1
    2472:	10 92 89 01 	sts	0x0189, r1
		TIMERS_ISR_Functions[2]();
    2476:	e0 91 8e 01 	lds	r30, 0x018E
    247a:	f0 91 8f 01 	lds	r31, 0x018F
    247e:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything

}
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	ff 91       	pop	r31
    2486:	ef 91       	pop	r30
    2488:	bf 91       	pop	r27
    248a:	af 91       	pop	r26
    248c:	9f 91       	pop	r25
    248e:	8f 91       	pop	r24
    2490:	7f 91       	pop	r23
    2492:	6f 91       	pop	r22
    2494:	5f 91       	pop	r21
    2496:	4f 91       	pop	r20
    2498:	3f 91       	pop	r19
    249a:	2f 91       	pop	r18
    249c:	0f 90       	pop	r0
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	0f 90       	pop	r0
    24a2:	1f 90       	pop	r1
    24a4:	18 95       	reti

000024a6 <SPI_vidInit>:
#include "SPI_priv.h"
/************************************************************************************/



void SPI_vidInit(void){
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62

		SET_BIT(SPCR_REG, SPCR_MSTR);

	#elif(SPI_MODE == SPI_SLAVE_MODE)

		DIO_enuSetPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, DIO_u8OUTPUT);
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	66 e0       	ldi	r22, 0x06	; 6
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, DIO_u8INPUT);
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	65 e0       	ldi	r22, 0x05	; 5
    24bc:	40 e0       	ldi	r20, 0x00	; 0
    24be:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>

		DIO_enuSetPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, DIO_u8INPUT);
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	67 e0       	ldi	r22, 0x07	; 7
    24c6:	40 e0       	ldi	r20, 0x00	; 0
    24c8:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_SS_PORT, SPI_SS_PIN, DIO_u8INPUT);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	64 e0       	ldi	r22, 0x04	; 4
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>

		CLR_BIT(SPCR_REG, SPCR_MSTR);
    24d6:	ad e2       	ldi	r26, 0x2D	; 45
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ed e2       	ldi	r30, 0x2D	; 45
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8f 7e       	andi	r24, 0xEF	; 239
    24e2:	8c 93       	st	X, r24
	#endif


	//! Data order
	#if(SPI_DORD == SPI_DORD_MSB)
		SET_BIT(SPCR_REG, SPCR_DORD);
    24e4:	ad e2       	ldi	r26, 0x2D	; 45
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	ed e2       	ldi	r30, 0x2D	; 45
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	80 62       	ori	r24, 0x20	; 32
    24f0:	8c 93       	st	X, r24


	//! Clock Polarity
	#if(SPI_CPOL == SPI_LRising_TFalling)
		// SCK is high when idle
		CLR_BIT(SPCR_REG, SPCR_CPOL);
    24f2:	ad e2       	ldi	r26, 0x2D	; 45
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	ed e2       	ldi	r30, 0x2D	; 45
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	87 7f       	andi	r24, 0xF7	; 247
    24fe:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR0 );
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
		CLR_BIT(SPSR_REG, SPSR_SPI2x);

	#elif(SPI_PRES_SELECT == SPI_PRES_16)
		SET_BIT(SPCR_REG, SPCR_SPR0 );
    2500:	ad e2       	ldi	r26, 0x2D	; 45
    2502:	b0 e0       	ldi	r27, 0x00	; 0
    2504:	ed e2       	ldi	r30, 0x2D	; 45
    2506:	f0 e0       	ldi	r31, 0x00	; 0
    2508:	80 81       	ld	r24, Z
    250a:	81 60       	ori	r24, 0x01	; 1
    250c:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
    250e:	ad e2       	ldi	r26, 0x2D	; 45
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	ed e2       	ldi	r30, 0x2D	; 45
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	8d 7f       	andi	r24, 0xFD	; 253
    251a:	8c 93       	st	X, r24
		CLR_BIT(SPSR_REG, SPSR_SPI2x);
    251c:	ae e2       	ldi	r26, 0x2E	; 46
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	ee e2       	ldi	r30, 0x2E	; 46
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	8e 7f       	andi	r24, 0xFE	; 254
    2528:	8c 93       	st	X, r24

	#endif


	/*	Enable SPI	*/
	SET_BIT(SPCR_REG, SPCR_SPE);
    252a:	ad e2       	ldi	r26, 0x2D	; 45
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	ed e2       	ldi	r30, 0x2D	; 45
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	80 64       	ori	r24, 0x40	; 64
    2536:	8c 93       	st	X, r24
}
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <SPI_enuMasterTransmit_Char>:



ErrorStatus_t SPI_enuMasterTransmit_Char(uint8_t copy_u8Data){
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	00 d0       	rcall	.+0      	; 0x2548 <SPI_enuMasterTransmit_Char+0xa>
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    254e:	19 82       	std	Y+1, r1	; 0x01
		SPDR_REG = copy_u8Data;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		SPDR_REG = flipBits(copy_u8Data);
    2550:	0f e2       	ldi	r16, 0x2F	; 47
    2552:	10 e0       	ldi	r17, 0x00	; 0
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	0e 94 4a 13 	call	0x2694	; 0x2694 <flipBits>
    255a:	f8 01       	movw	r30, r16
    255c:	80 83       	st	Z, r24
	#endif


	/*! Wait for transmission complete */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    255e:	ee e2       	ldi	r30, 0x2E	; 46
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	88 23       	and	r24, r24
    2566:	dc f7       	brge	.-10     	; 0x255e <SPI_enuMasterTransmit_Char+0x20>


	Local_enu_ErrorState = ERROR_STATUS_OK;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    256c:	89 81       	ldd	r24, Y+1	; 0x01
}
    256e:	0f 90       	pop	r0
    2570:	0f 90       	pop	r0
    2572:	cf 91       	pop	r28
    2574:	df 91       	pop	r29
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	08 95       	ret

0000257c <SPI_enuMasterTransmit_String>:



ErrorStatus_t SPI_enuMasterTransmit_String(uint8_t* copy_pu8Data){
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <SPI_enuMasterTransmit_String+0x6>
    2582:	00 d0       	rcall	.+0      	; 0x2584 <SPI_enuMasterTransmit_String+0x8>
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	9b 83       	std	Y+3, r25	; 0x03
    258a:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    258c:	19 82       	std	Y+1, r1	; 0x01


	if(copy_pu8Data == NULL){
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	9b 81       	ldd	r25, Y+3	; 0x03
    2592:	00 97       	sbiw	r24, 0x00	; 0
    2594:	19 f4       	brne	.+6      	; 0x259c <SPI_enuMasterTransmit_String+0x20>
		return Local_enu_ErrorState;
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	8c 83       	std	Y+4, r24	; 0x04
    259a:	13 c0       	rjmp	.+38     	; 0x25c2 <SPI_enuMasterTransmit_String+0x46>

	}else{

		do{
			SPI_enuMasterTransmit_Char(*copy_pu8Data);
    259c:	ea 81       	ldd	r30, Y+2	; 0x02
    259e:	fb 81       	ldd	r31, Y+3	; 0x03
    25a0:	80 81       	ld	r24, Z
    25a2:	0e 94 9f 12 	call	0x253e	; 0x253e <SPI_enuMasterTransmit_Char>
			copy_pu8Data++;
    25a6:	8a 81       	ldd	r24, Y+2	; 0x02
    25a8:	9b 81       	ldd	r25, Y+3	; 0x03
    25aa:	01 96       	adiw	r24, 0x01	; 1
    25ac:	9b 83       	std	Y+3, r25	; 0x03
    25ae:	8a 83       	std	Y+2, r24	; 0x02
		}while(*copy_pu8Data != '\0');
    25b0:	ea 81       	ldd	r30, Y+2	; 0x02
    25b2:	fb 81       	ldd	r31, Y+3	; 0x03
    25b4:	80 81       	ld	r24, Z
    25b6:	88 23       	and	r24, r24
    25b8:	89 f7       	brne	.-30     	; 0x259c <SPI_enuMasterTransmit_String+0x20>
	}

	Local_enu_ErrorState = ERROR_STATUS_OK;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	8c 83       	std	Y+4, r24	; 0x04
    25c2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <SPI_enuSlaveReceive_Char>:



ErrorStatus_t SPI_enuSlaveReceive_Char(uint8_t* copy_pu8Data){
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <SPI_enuSlaveReceive_Char+0x6>
    25d8:	0f 92       	push	r0
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	9b 83       	std	Y+3, r25	; 0x03
    25e0:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    25e2:	19 82       	std	Y+1, r1	; 0x01


	/* Wait for successful reception of data from master */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    25e4:	ee e2       	ldi	r30, 0x2E	; 46
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	88 23       	and	r24, r24
    25ec:	dc f7       	brge	.-10     	; 0x25e4 <SPI_enuSlaveReceive_Char+0x12>

	*copy_pu8Data = SPDR_REG;
    25ee:	ef e2       	ldi	r30, 0x2F	; 47
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	ea 81       	ldd	r30, Y+2	; 0x02
    25f6:	fb 81       	ldd	r31, Y+3	; 0x03
    25f8:	80 83       	st	Z, r24
		*copy_pu8Data = SPDR_REG;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		*copy_pu8Data= flipBits(SPDR_REG);
    25fa:	ef e2       	ldi	r30, 0x2F	; 47
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	0e 94 4a 13 	call	0x2694	; 0x2694 <flipBits>
    2604:	ea 81       	ldd	r30, Y+2	; 0x02
    2606:	fb 81       	ldd	r31, Y+3	; 0x03
    2608:	80 83       	st	Z, r24
	#endif




	Local_enu_ErrorState = ERROR_STATUS_OK;
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    260e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <SPI_enuSlaveReceive_String>:



ErrorStatus_t SPI_enuSlaveReceive_String(uint8_t* copy_pu8Data){
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	cd b7       	in	r28, 0x3d	; 61
    2622:	de b7       	in	r29, 0x3e	; 62
    2624:	27 97       	sbiw	r28, 0x07	; 7
    2626:	0f b6       	in	r0, 0x3f	; 63
    2628:	f8 94       	cli
    262a:	de bf       	out	0x3e, r29	; 62
    262c:	0f be       	out	0x3f, r0	; 63
    262e:	cd bf       	out	0x3d, r28	; 61
    2630:	9d 83       	std	Y+5, r25	; 0x05
    2632:	8c 83       	std	Y+4, r24	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2634:	1b 82       	std	Y+3, r1	; 0x03


	if(copy_pu8Data == NULL){
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	19 f4       	brne	.+6      	; 0x2644 <SPI_enuSlaveReceive_String+0x28>
		return Local_enu_ErrorState;
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	8e 83       	std	Y+6, r24	; 0x06
    2642:	1e c0       	rjmp	.+60     	; 0x2680 <SPI_enuSlaveReceive_String+0x64>
	}else{

		// Intiate head of buffer similar to linked-list idea
		uint8_t *Local_u8Temp = copy_pu8Data;
    2644:	8c 81       	ldd	r24, Y+4	; 0x04
    2646:	9d 81       	ldd	r25, Y+5	; 0x05
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01

		do{
			SPI_enuSlaveReceive_Char(Local_u8Temp);
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <SPI_enuSlaveReceive_Char>


		}while(*(Local_u8Temp++) != '\0');
    2654:	e9 81       	ldd	r30, Y+1	; 0x01
    2656:	fa 81       	ldd	r31, Y+2	; 0x02
    2658:	80 81       	ld	r24, Z
    265a:	8f 83       	std	Y+7, r24	; 0x07
    265c:	8f 81       	ldd	r24, Y+7	; 0x07
    265e:	88 23       	and	r24, r24
    2660:	11 f0       	breq	.+4      	; 0x2666 <SPI_enuSlaveReceive_String+0x4a>
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	8f 83       	std	Y+7, r24	; 0x07
    2666:	8f 81       	ldd	r24, Y+7	; 0x07
    2668:	29 81       	ldd	r18, Y+1	; 0x01
    266a:	3a 81       	ldd	r19, Y+2	; 0x02
    266c:	2f 5f       	subi	r18, 0xFF	; 255
    266e:	3f 4f       	sbci	r19, 0xFF	; 255
    2670:	3a 83       	std	Y+2, r19	; 0x02
    2672:	29 83       	std	Y+1, r18	; 0x01
    2674:	88 23       	and	r24, r24
    2676:	51 f7       	brne	.-44     	; 0x264c <SPI_enuSlaveReceive_String+0x30>
	}


	Local_enu_ErrorState = ERROR_STATUS_OK;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enu_ErrorState;
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	8e 83       	std	Y+6, r24	; 0x06
    2680:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2682:	27 96       	adiw	r28, 0x07	; 7
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	de bf       	out	0x3e, r29	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	cd bf       	out	0x3d, r28	; 61
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <flipBits>:

static inline uint8_t flipBits(uint8_t byte) {
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	0f 92       	push	r0
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	82 95       	swap	r24
    26a4:	8f 70       	andi	r24, 0x0F	; 15
    26a6:	28 2f       	mov	r18, r24
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	82 95       	swap	r24
    26b0:	92 95       	swap	r25
    26b2:	90 7f       	andi	r25, 0xF0	; 240
    26b4:	98 27       	eor	r25, r24
    26b6:	80 7f       	andi	r24, 0xF0	; 240
    26b8:	98 27       	eor	r25, r24
    26ba:	82 2b       	or	r24, r18
    26bc:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	88 2f       	mov	r24, r24
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	8c 7c       	andi	r24, 0xCC	; 204
    26c6:	90 70       	andi	r25, 0x00	; 0
    26c8:	95 95       	asr	r25
    26ca:	87 95       	ror	r24
    26cc:	95 95       	asr	r25
    26ce:	87 95       	ror	r24
    26d0:	28 2f       	mov	r18, r24
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	88 2f       	mov	r24, r24
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	83 73       	andi	r24, 0x33	; 51
    26da:	90 70       	andi	r25, 0x00	; 0
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	88 0f       	add	r24, r24
    26e2:	99 1f       	adc	r25, r25
    26e4:	82 2b       	or	r24, r18
    26e6:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	8a 7a       	andi	r24, 0xAA	; 170
    26f0:	90 70       	andi	r25, 0x00	; 0
    26f2:	95 95       	asr	r25
    26f4:	87 95       	ror	r24
    26f6:	28 2f       	mov	r18, r24
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	85 75       	andi	r24, 0x55	; 85
    2700:	90 70       	andi	r25, 0x00	; 0
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	82 2b       	or	r24, r18
    2708:	89 83       	std	Y+1, r24	; 0x01
    return byte;
    270a:	89 81       	ldd	r24, Y+1	; 0x01
}
    270c:	0f 90       	pop	r0
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	0f 92       	push	r0
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    271e:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
    2720:	ef e5       	ldi	r30, 0x5F	; 95
    2722:	f0 e0       	ldi	r31, 0x00	; 0
    2724:	80 81       	ld	r24, Z
    2726:	88 23       	and	r24, r24
    2728:	4c f0       	brlt	.+18     	; 0x273c <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
    272a:	af e5       	ldi	r26, 0x5F	; 95
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	ef e5       	ldi	r30, 0x5F	; 95
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	80 68       	ori	r24, 0x80	; 128
    2736:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    273c:	89 81       	ldd	r24, Y+1	; 0x01
}
    273e:	0f 90       	pop	r0
    2740:	cf 91       	pop	r28
    2742:	df 91       	pop	r29
    2744:	08 95       	ret

00002746 <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
    2746:	df 93       	push	r29
    2748:	cf 93       	push	r28
    274a:	0f 92       	push	r0
    274c:	cd b7       	in	r28, 0x3d	; 61
    274e:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2750:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
    2752:	ef e5       	ldi	r30, 0x5F	; 95
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	88 23       	and	r24, r24
    275a:	4c f4       	brge	.+18     	; 0x276e <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
    275c:	af e5       	ldi	r26, 0x5F	; 95
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	ef e5       	ldi	r30, 0x5F	; 95
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	8f 77       	andi	r24, 0x7F	; 127
    2768:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    276e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2770:	0f 90       	pop	r0
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	2a 97       	sbiw	r28, 0x0a	; 10
    2782:	0f b6       	in	r0, 0x3f	; 63
    2784:	f8 94       	cli
    2786:	de bf       	out	0x3e, r29	; 62
    2788:	0f be       	out	0x3f, r0	; 63
    278a:	cd bf       	out	0x3d, r28	; 61
    278c:	9b 83       	std	Y+3, r25	; 0x03
    278e:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2790:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	9b 81       	ldd	r25, Y+3	; 0x03
    2796:	00 97       	sbiw	r24, 0x00	; 0
    2798:	19 f4       	brne	.+6      	; 0x27a0 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
    279a:	29 81       	ldd	r18, Y+1	; 0x01
    279c:	2a 87       	std	Y+10, r18	; 0x0a
    279e:	36 c1       	rjmp	.+620    	; 0x2a0c <EXTI_enuInit+0x294>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_ENABLED){
    27a0:	ea 81       	ldd	r30, Y+2	; 0x02
    27a2:	fb 81       	ldd	r31, Y+3	; 0x03
    27a4:	80 81       	ld	r24, Z
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	09 f0       	breq	.+2      	; 0x27ac <EXTI_enuInit+0x34>
    27aa:	64 c0       	rjmp	.+200    	; 0x2874 <EXTI_enuInit+0xfc>

			SET_BIT(GICR, INT0_switch);
    27ac:	ab e5       	ldi	r26, 0x5B	; 91
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	eb e5       	ldi	r30, 0x5B	; 91
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	80 64       	ori	r24, 0x40	; 64
    27b8:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_0].Sence_Level){
    27ba:	ea 81       	ldd	r30, Y+2	; 0x02
    27bc:	fb 81       	ldd	r31, Y+3	; 0x03
    27be:	81 81       	ldd	r24, Z+1	; 0x01
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	39 87       	std	Y+9, r19	; 0x09
    27c6:	28 87       	std	Y+8, r18	; 0x08
    27c8:	88 85       	ldd	r24, Y+8	; 0x08
    27ca:	99 85       	ldd	r25, Y+9	; 0x09
    27cc:	81 30       	cpi	r24, 0x01	; 1
    27ce:	91 05       	cpc	r25, r1
    27d0:	21 f1       	breq	.+72     	; 0x281a <EXTI_enuInit+0xa2>
    27d2:	28 85       	ldd	r18, Y+8	; 0x08
    27d4:	39 85       	ldd	r19, Y+9	; 0x09
    27d6:	22 30       	cpi	r18, 0x02	; 2
    27d8:	31 05       	cpc	r19, r1
    27da:	2c f4       	brge	.+10     	; 0x27e6 <EXTI_enuInit+0x6e>
    27dc:	88 85       	ldd	r24, Y+8	; 0x08
    27de:	99 85       	ldd	r25, Y+9	; 0x09
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	61 f0       	breq	.+24     	; 0x27fc <EXTI_enuInit+0x84>
    27e4:	53 c0       	rjmp	.+166    	; 0x288c <EXTI_enuInit+0x114>
    27e6:	28 85       	ldd	r18, Y+8	; 0x08
    27e8:	39 85       	ldd	r19, Y+9	; 0x09
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	31 05       	cpc	r19, r1
    27ee:	21 f1       	breq	.+72     	; 0x2838 <EXTI_enuInit+0xc0>
    27f0:	88 85       	ldd	r24, Y+8	; 0x08
    27f2:	99 85       	ldd	r25, Y+9	; 0x09
    27f4:	83 30       	cpi	r24, 0x03	; 3
    27f6:	91 05       	cpc	r25, r1
    27f8:	71 f1       	breq	.+92     	; 0x2856 <EXTI_enuInit+0xde>
    27fa:	48 c0       	rjmp	.+144    	; 0x288c <EXTI_enuInit+0x114>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
    27fc:	a5 e5       	ldi	r26, 0x55	; 85
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e5 e5       	ldi	r30, 0x55	; 85
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	8e 7f       	andi	r24, 0xFE	; 254
    2808:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    280a:	a5 e5       	ldi	r26, 0x55	; 85
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	e5 e5       	ldi	r30, 0x55	; 85
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	8d 7f       	andi	r24, 0xFD	; 253
    2816:	8c 93       	st	X, r24
    2818:	39 c0       	rjmp	.+114    	; 0x288c <EXTI_enuInit+0x114>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
    281a:	a5 e5       	ldi	r26, 0x55	; 85
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e5 e5       	ldi	r30, 0x55	; 85
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	81 60       	ori	r24, 0x01	; 1
    2826:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    2828:	a5 e5       	ldi	r26, 0x55	; 85
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	e5 e5       	ldi	r30, 0x55	; 85
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	8d 7f       	andi	r24, 0xFD	; 253
    2834:	8c 93       	st	X, r24
    2836:	2a c0       	rjmp	.+84     	; 0x288c <EXTI_enuInit+0x114>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
    2838:	a5 e5       	ldi	r26, 0x55	; 85
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e5 e5       	ldi	r30, 0x55	; 85
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	8e 7f       	andi	r24, 0xFE	; 254
    2844:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    2846:	a5 e5       	ldi	r26, 0x55	; 85
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e5 e5       	ldi	r30, 0x55	; 85
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	80 81       	ld	r24, Z
    2850:	82 60       	ori	r24, 0x02	; 2
    2852:	8c 93       	st	X, r24
    2854:	1b c0       	rjmp	.+54     	; 0x288c <EXTI_enuInit+0x114>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
    2856:	a5 e5       	ldi	r26, 0x55	; 85
    2858:	b0 e0       	ldi	r27, 0x00	; 0
    285a:	e5 e5       	ldi	r30, 0x55	; 85
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	81 60       	ori	r24, 0x01	; 1
    2862:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    2864:	a5 e5       	ldi	r26, 0x55	; 85
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e5 e5       	ldi	r30, 0x55	; 85
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	82 60       	ori	r24, 0x02	; 2
    2870:	8c 93       	st	X, r24
    2872:	0c c0       	rjmp	.+24     	; 0x288c <EXTI_enuInit+0x114>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_DISABLED){
    2874:	ea 81       	ldd	r30, Y+2	; 0x02
    2876:	fb 81       	ldd	r31, Y+3	; 0x03
    2878:	80 81       	ld	r24, Z
    287a:	88 23       	and	r24, r24
    287c:	39 f4       	brne	.+14     	; 0x288c <EXTI_enuInit+0x114>

			CLR_BIT(GICR, INT0_switch);
    287e:	ab e5       	ldi	r26, 0x5B	; 91
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	eb e5       	ldi	r30, 0x5B	; 91
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	8f 7b       	andi	r24, 0xBF	; 191
    288a:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_ENABLED){
    288c:	8a 81       	ldd	r24, Y+2	; 0x02
    288e:	9b 81       	ldd	r25, Y+3	; 0x03
    2890:	fc 01       	movw	r30, r24
    2892:	32 96       	adiw	r30, 0x02	; 2
    2894:	80 81       	ld	r24, Z
    2896:	81 30       	cpi	r24, 0x01	; 1
    2898:	09 f0       	breq	.+2      	; 0x289c <EXTI_enuInit+0x124>
    289a:	66 c0       	rjmp	.+204    	; 0x2968 <EXTI_enuInit+0x1f0>

			SET_BIT(GICR, INT1_switch);
    289c:	ab e5       	ldi	r26, 0x5B	; 91
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	eb e5       	ldi	r30, 0x5B	; 91
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	80 68       	ori	r24, 0x80	; 128
    28a8:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT_NO_1].Sence_Level){
    28aa:	8a 81       	ldd	r24, Y+2	; 0x02
    28ac:	9b 81       	ldd	r25, Y+3	; 0x03
    28ae:	fc 01       	movw	r30, r24
    28b0:	32 96       	adiw	r30, 0x02	; 2
    28b2:	81 81       	ldd	r24, Z+1	; 0x01
    28b4:	28 2f       	mov	r18, r24
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	3f 83       	std	Y+7, r19	; 0x07
    28ba:	2e 83       	std	Y+6, r18	; 0x06
    28bc:	8e 81       	ldd	r24, Y+6	; 0x06
    28be:	9f 81       	ldd	r25, Y+7	; 0x07
    28c0:	81 30       	cpi	r24, 0x01	; 1
    28c2:	91 05       	cpc	r25, r1
    28c4:	21 f1       	breq	.+72     	; 0x290e <EXTI_enuInit+0x196>
    28c6:	2e 81       	ldd	r18, Y+6	; 0x06
    28c8:	3f 81       	ldd	r19, Y+7	; 0x07
    28ca:	22 30       	cpi	r18, 0x02	; 2
    28cc:	31 05       	cpc	r19, r1
    28ce:	2c f4       	brge	.+10     	; 0x28da <EXTI_enuInit+0x162>
    28d0:	8e 81       	ldd	r24, Y+6	; 0x06
    28d2:	9f 81       	ldd	r25, Y+7	; 0x07
    28d4:	00 97       	sbiw	r24, 0x00	; 0
    28d6:	61 f0       	breq	.+24     	; 0x28f0 <EXTI_enuInit+0x178>
    28d8:	55 c0       	rjmp	.+170    	; 0x2984 <EXTI_enuInit+0x20c>
    28da:	2e 81       	ldd	r18, Y+6	; 0x06
    28dc:	3f 81       	ldd	r19, Y+7	; 0x07
    28de:	22 30       	cpi	r18, 0x02	; 2
    28e0:	31 05       	cpc	r19, r1
    28e2:	21 f1       	breq	.+72     	; 0x292c <EXTI_enuInit+0x1b4>
    28e4:	8e 81       	ldd	r24, Y+6	; 0x06
    28e6:	9f 81       	ldd	r25, Y+7	; 0x07
    28e8:	83 30       	cpi	r24, 0x03	; 3
    28ea:	91 05       	cpc	r25, r1
    28ec:	71 f1       	breq	.+92     	; 0x294a <EXTI_enuInit+0x1d2>
    28ee:	4a c0       	rjmp	.+148    	; 0x2984 <EXTI_enuInit+0x20c>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
    28f0:	a5 e5       	ldi	r26, 0x55	; 85
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	e5 e5       	ldi	r30, 0x55	; 85
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	8b 7f       	andi	r24, 0xFB	; 251
    28fc:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    28fe:	a5 e5       	ldi	r26, 0x55	; 85
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e5 e5       	ldi	r30, 0x55	; 85
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	87 7f       	andi	r24, 0xF7	; 247
    290a:	8c 93       	st	X, r24
    290c:	3b c0       	rjmp	.+118    	; 0x2984 <EXTI_enuInit+0x20c>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
    290e:	a5 e5       	ldi	r26, 0x55	; 85
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	e5 e5       	ldi	r30, 0x55	; 85
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	84 60       	ori	r24, 0x04	; 4
    291a:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    291c:	a5 e5       	ldi	r26, 0x55	; 85
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e5 e5       	ldi	r30, 0x55	; 85
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	87 7f       	andi	r24, 0xF7	; 247
    2928:	8c 93       	st	X, r24
    292a:	2c c0       	rjmp	.+88     	; 0x2984 <EXTI_enuInit+0x20c>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
    292c:	a5 e5       	ldi	r26, 0x55	; 85
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e5 e5       	ldi	r30, 0x55	; 85
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	8b 7f       	andi	r24, 0xFB	; 251
    2938:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    293a:	a5 e5       	ldi	r26, 0x55	; 85
    293c:	b0 e0       	ldi	r27, 0x00	; 0
    293e:	e5 e5       	ldi	r30, 0x55	; 85
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	88 60       	ori	r24, 0x08	; 8
    2946:	8c 93       	st	X, r24
    2948:	1d c0       	rjmp	.+58     	; 0x2984 <EXTI_enuInit+0x20c>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
    294a:	a5 e5       	ldi	r26, 0x55	; 85
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e5 e5       	ldi	r30, 0x55	; 85
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	84 60       	ori	r24, 0x04	; 4
    2956:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    2958:	a5 e5       	ldi	r26, 0x55	; 85
    295a:	b0 e0       	ldi	r27, 0x00	; 0
    295c:	e5 e5       	ldi	r30, 0x55	; 85
    295e:	f0 e0       	ldi	r31, 0x00	; 0
    2960:	80 81       	ld	r24, Z
    2962:	88 60       	ori	r24, 0x08	; 8
    2964:	8c 93       	st	X, r24
    2966:	0e c0       	rjmp	.+28     	; 0x2984 <EXTI_enuInit+0x20c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_DISABLED){
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	9b 81       	ldd	r25, Y+3	; 0x03
    296c:	fc 01       	movw	r30, r24
    296e:	32 96       	adiw	r30, 0x02	; 2
    2970:	80 81       	ld	r24, Z
    2972:	88 23       	and	r24, r24
    2974:	39 f4       	brne	.+14     	; 0x2984 <EXTI_enuInit+0x20c>

			CLR_BIT(GICR, INT1_switch);
    2976:	ab e5       	ldi	r26, 0x5B	; 91
    2978:	b0 e0       	ldi	r27, 0x00	; 0
    297a:	eb e5       	ldi	r30, 0x5B	; 91
    297c:	f0 e0       	ldi	r31, 0x00	; 0
    297e:	80 81       	ld	r24, Z
    2980:	8f 77       	andi	r24, 0x7F	; 127
    2982:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_ENABLED){
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	9b 81       	ldd	r25, Y+3	; 0x03
    2988:	fc 01       	movw	r30, r24
    298a:	34 96       	adiw	r30, 0x04	; 4
    298c:	80 81       	ld	r24, Z
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	59 f5       	brne	.+86     	; 0x29e8 <EXTI_enuInit+0x270>

			SET_BIT(GICR, INT2_switch);
    2992:	ab e5       	ldi	r26, 0x5B	; 91
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	eb e5       	ldi	r30, 0x5B	; 91
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	80 62       	ori	r24, 0x20	; 32
    299e:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_2].Sence_Level){
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	9b 81       	ldd	r25, Y+3	; 0x03
    29a4:	fc 01       	movw	r30, r24
    29a6:	34 96       	adiw	r30, 0x04	; 4
    29a8:	81 81       	ldd	r24, Z+1	; 0x01
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	3d 83       	std	Y+5, r19	; 0x05
    29b0:	2c 83       	std	Y+4, r18	; 0x04
    29b2:	8c 81       	ldd	r24, Y+4	; 0x04
    29b4:	9d 81       	ldd	r25, Y+5	; 0x05
    29b6:	82 30       	cpi	r24, 0x02	; 2
    29b8:	91 05       	cpc	r25, r1
    29ba:	31 f0       	breq	.+12     	; 0x29c8 <EXTI_enuInit+0x250>
    29bc:	2c 81       	ldd	r18, Y+4	; 0x04
    29be:	3d 81       	ldd	r19, Y+5	; 0x05
    29c0:	23 30       	cpi	r18, 0x03	; 3
    29c2:	31 05       	cpc	r19, r1
    29c4:	49 f0       	breq	.+18     	; 0x29d8 <EXTI_enuInit+0x260>
    29c6:	1e c0       	rjmp	.+60     	; 0x2a04 <EXTI_enuInit+0x28c>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
    29c8:	a4 e5       	ldi	r26, 0x54	; 84
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	e4 e5       	ldi	r30, 0x54	; 84
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	8f 7b       	andi	r24, 0xBF	; 191
    29d4:	8c 93       	st	X, r24
    29d6:	16 c0       	rjmp	.+44     	; 0x2a04 <EXTI_enuInit+0x28c>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
    29d8:	a4 e5       	ldi	r26, 0x54	; 84
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e4 e5       	ldi	r30, 0x54	; 84
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	80 64       	ori	r24, 0x40	; 64
    29e4:	8c 93       	st	X, r24
    29e6:	0e c0       	rjmp	.+28     	; 0x2a04 <EXTI_enuInit+0x28c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_DISABLED){
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	9b 81       	ldd	r25, Y+3	; 0x03
    29ec:	fc 01       	movw	r30, r24
    29ee:	34 96       	adiw	r30, 0x04	; 4
    29f0:	80 81       	ld	r24, Z
    29f2:	88 23       	and	r24, r24
    29f4:	39 f4       	brne	.+14     	; 0x2a04 <EXTI_enuInit+0x28c>

			CLR_BIT(GICR, INT2_switch);
    29f6:	ab e5       	ldi	r26, 0x5B	; 91
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	eb e5       	ldi	r30, 0x5B	; 91
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	8f 7d       	andi	r24, 0xDF	; 223
    2a02:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    2a08:	39 81       	ldd	r19, Y+1	; 0x01
    2a0a:	3a 87       	std	Y+10, r19	; 0x0a
    2a0c:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2a0e:	2a 96       	adiw	r28, 0x0a	; 10
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	f8 94       	cli
    2a14:	de bf       	out	0x3e, r29	; 62
    2a16:	0f be       	out	0x3f, r0	; 63
    2a18:	cd bf       	out	0x3d, r28	; 61
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <EXTI_enuEnableInterrupt>:

ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <EXTI_enuEnableInterrupt+0x6>
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <EXTI_enuEnableInterrupt+0x8>
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
    2a2c:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2a2e:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	28 2f       	mov	r18, r24
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	3c 83       	std	Y+4, r19	; 0x04
    2a38:	2b 83       	std	Y+3, r18	; 0x03
    2a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	91 05       	cpc	r25, r1
    2a42:	89 f0       	breq	.+34     	; 0x2a66 <EXTI_enuEnableInterrupt+0x46>
    2a44:	2b 81       	ldd	r18, Y+3	; 0x03
    2a46:	3c 81       	ldd	r19, Y+4	; 0x04
    2a48:	22 30       	cpi	r18, 0x02	; 2
    2a4a:	31 05       	cpc	r19, r1
    2a4c:	a1 f0       	breq	.+40     	; 0x2a76 <EXTI_enuEnableInterrupt+0x56>
    2a4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a50:	9c 81       	ldd	r25, Y+4	; 0x04
    2a52:	00 97       	sbiw	r24, 0x00	; 0
    2a54:	b9 f4       	brne	.+46     	; 0x2a84 <EXTI_enuEnableInterrupt+0x64>
			case INT_NO_0:

				SET_BIT(GICR, INT0_switch);
    2a56:	ab e5       	ldi	r26, 0x5B	; 91
    2a58:	b0 e0       	ldi	r27, 0x00	; 0
    2a5a:	eb e5       	ldi	r30, 0x5B	; 91
    2a5c:	f0 e0       	ldi	r31, 0x00	; 0
    2a5e:	80 81       	ld	r24, Z
    2a60:	80 64       	ori	r24, 0x40	; 64
    2a62:	8c 93       	st	X, r24
    2a64:	0f c0       	rjmp	.+30     	; 0x2a84 <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_1:

				SET_BIT(GICR, INT1_switch);
    2a66:	ab e5       	ldi	r26, 0x5B	; 91
    2a68:	b0 e0       	ldi	r27, 0x00	; 0
    2a6a:	eb e5       	ldi	r30, 0x5B	; 91
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
    2a70:	80 68       	ori	r24, 0x80	; 128
    2a72:	8c 93       	st	X, r24
    2a74:	07 c0       	rjmp	.+14     	; 0x2a84 <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_2:

				SET_BIT(GICR, INT2_switch);
    2a76:	ab e5       	ldi	r26, 0x5B	; 91
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	eb e5       	ldi	r30, 0x5B	; 91
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	80 81       	ld	r24, Z
    2a80:	80 62       	ori	r24, 0x20	; 32
    2a82:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <EXTI_enuDisableInterrupt>:

ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <EXTI_enuDisableInterrupt+0x6>
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <EXTI_enuDisableInterrupt+0x8>
    2aa0:	0f 92       	push	r0
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2aa8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT_NO_2){
    2aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    2aac:	83 30       	cpi	r24, 0x03	; 3
    2aae:	18 f0       	brcs	.+6      	; 0x2ab6 <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
    2ab0:	29 81       	ldd	r18, Y+1	; 0x01
    2ab2:	2d 83       	std	Y+5, r18	; 0x05
    2ab4:	2e c0       	rjmp	.+92     	; 0x2b12 <EXTI_enuDisableInterrupt+0x7a>
	}

	else{

		switch(Copy_u8IntNumber){
    2ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	3c 83       	std	Y+4, r19	; 0x04
    2abe:	2b 83       	std	Y+3, r18	; 0x03
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac4:	81 30       	cpi	r24, 0x01	; 1
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	89 f0       	breq	.+34     	; 0x2aec <EXTI_enuDisableInterrupt+0x54>
    2aca:	2b 81       	ldd	r18, Y+3	; 0x03
    2acc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ace:	22 30       	cpi	r18, 0x02	; 2
    2ad0:	31 05       	cpc	r19, r1
    2ad2:	a1 f0       	breq	.+40     	; 0x2afc <EXTI_enuDisableInterrupt+0x64>
    2ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad8:	00 97       	sbiw	r24, 0x00	; 0
    2ada:	b9 f4       	brne	.+46     	; 0x2b0a <EXTI_enuDisableInterrupt+0x72>
		case INT_NO_0:

			
			GICR &= ~(1<<INT0_switch);
    2adc:	ab e5       	ldi	r26, 0x5B	; 91
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	eb e5       	ldi	r30, 0x5B	; 91
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	80 81       	ld	r24, Z
    2ae6:	8f 7b       	andi	r24, 0xBF	; 191
    2ae8:	8c 93       	st	X, r24
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_1:

			GICR &= ~(1<<INT1_switch);
    2aec:	ab e5       	ldi	r26, 0x5B	; 91
    2aee:	b0 e0       	ldi	r27, 0x00	; 0
    2af0:	eb e5       	ldi	r30, 0x5B	; 91
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	80 81       	ld	r24, Z
    2af6:	8f 77       	andi	r24, 0x7F	; 127
    2af8:	8c 93       	st	X, r24
    2afa:	07 c0       	rjmp	.+14     	; 0x2b0a <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_2:

			GICR &= ~(1<<INT2_switch);
    2afc:	ab e5       	ldi	r26, 0x5B	; 91
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	eb e5       	ldi	r30, 0x5B	; 91
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	8f 7d       	andi	r24, 0xDF	; 223
    2b08:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    2b0e:	99 81       	ldd	r25, Y+1	; 0x01
    2b10:	9d 83       	std	Y+5, r25	; 0x05
    2b12:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2b14:	0f 90       	pop	r0
    2b16:	0f 90       	pop	r0
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	cf 91       	pop	r28
    2b20:	df 91       	pop	r29
    2b22:	08 95       	ret

00002b24 <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
    2b24:	df 93       	push	r29
    2b26:	cf 93       	push	r28
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	2c 97       	sbiw	r28, 0x0c	; 12
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	8a 83       	std	Y+2, r24	; 0x02
    2b3a:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2b3c:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT_NO_2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
    2b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b40:	83 30       	cpi	r24, 0x03	; 3
    2b42:	18 f4       	brcc	.+6      	; 0x2b4a <EXTI_enuSetSenseLevel+0x26>
    2b44:	8b 81       	ldd	r24, Y+3	; 0x03
    2b46:	84 30       	cpi	r24, 0x04	; 4
    2b48:	18 f0       	brcs	.+6      	; 0x2b50 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
    2b4a:	29 81       	ldd	r18, Y+1	; 0x01
    2b4c:	2c 87       	std	Y+12, r18	; 0x0c
    2b4e:	ef c0       	rjmp	.+478    	; 0x2d2e <EXTI_enuSetSenseLevel+0x20a>
	}

	else{

		switch(Copy_u8IntNumber){
    2b50:	8a 81       	ldd	r24, Y+2	; 0x02
    2b52:	28 2f       	mov	r18, r24
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	3b 87       	std	Y+11, r19	; 0x0b
    2b58:	2a 87       	std	Y+10, r18	; 0x0a
    2b5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b5e:	81 30       	cpi	r24, 0x01	; 1
    2b60:	91 05       	cpc	r25, r1
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <EXTI_enuSetSenseLevel+0x42>
    2b64:	66 c0       	rjmp	.+204    	; 0x2c32 <EXTI_enuSetSenseLevel+0x10e>
    2b66:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b68:	3b 85       	ldd	r19, Y+11	; 0x0b
    2b6a:	22 30       	cpi	r18, 0x02	; 2
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <EXTI_enuSetSenseLevel+0x4e>
    2b70:	bb c0       	rjmp	.+374    	; 0x2ce8 <EXTI_enuSetSenseLevel+0x1c4>
    2b72:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b74:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	09 f0       	breq	.+2      	; 0x2b7c <EXTI_enuSetSenseLevel+0x58>
    2b7a:	d5 c0       	rjmp	.+426    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>
		case INT_NO_0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	28 2f       	mov	r18, r24
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	39 87       	std	Y+9, r19	; 0x09
    2b84:	28 87       	std	Y+8, r18	; 0x08
    2b86:	88 85       	ldd	r24, Y+8	; 0x08
    2b88:	99 85       	ldd	r25, Y+9	; 0x09
    2b8a:	81 30       	cpi	r24, 0x01	; 1
    2b8c:	91 05       	cpc	r25, r1
    2b8e:	a9 f0       	breq	.+42     	; 0x2bba <EXTI_enuSetSenseLevel+0x96>
    2b90:	28 85       	ldd	r18, Y+8	; 0x08
    2b92:	39 85       	ldd	r19, Y+9	; 0x09
    2b94:	22 30       	cpi	r18, 0x02	; 2
    2b96:	31 05       	cpc	r19, r1
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <EXTI_enuSetSenseLevel+0x80>
    2b9a:	88 85       	ldd	r24, Y+8	; 0x08
    2b9c:	99 85       	ldd	r25, Y+9	; 0x09
    2b9e:	00 97       	sbiw	r24, 0x00	; 0
    2ba0:	d9 f0       	breq	.+54     	; 0x2bd8 <EXTI_enuSetSenseLevel+0xb4>
    2ba2:	c1 c0       	rjmp	.+386    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>
    2ba4:	28 85       	ldd	r18, Y+8	; 0x08
    2ba6:	39 85       	ldd	r19, Y+9	; 0x09
    2ba8:	22 30       	cpi	r18, 0x02	; 2
    2baa:	31 05       	cpc	r19, r1
    2bac:	21 f1       	breq	.+72     	; 0x2bf6 <EXTI_enuSetSenseLevel+0xd2>
    2bae:	88 85       	ldd	r24, Y+8	; 0x08
    2bb0:	99 85       	ldd	r25, Y+9	; 0x09
    2bb2:	83 30       	cpi	r24, 0x03	; 3
    2bb4:	91 05       	cpc	r25, r1
    2bb6:	71 f1       	breq	.+92     	; 0x2c14 <EXTI_enuSetSenseLevel+0xf0>
    2bb8:	b6 c0       	rjmp	.+364    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
    2bba:	a5 e5       	ldi	r26, 0x55	; 85
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e5 e5       	ldi	r30, 0x55	; 85
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	81 60       	ori	r24, 0x01	; 1
    2bc6:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    2bc8:	a5 e5       	ldi	r26, 0x55	; 85
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e5 e5       	ldi	r30, 0x55	; 85
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8d 7f       	andi	r24, 0xFD	; 253
    2bd4:	8c 93       	st	X, r24
    2bd6:	a7 c0       	rjmp	.+334    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    2bd8:	a5 e5       	ldi	r26, 0x55	; 85
    2bda:	b0 e0       	ldi	r27, 0x00	; 0
    2bdc:	e5 e5       	ldi	r30, 0x55	; 85
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	8e 7f       	andi	r24, 0xFE	; 254
    2be4:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    2be6:	a5 e5       	ldi	r26, 0x55	; 85
    2be8:	b0 e0       	ldi	r27, 0x00	; 0
    2bea:	e5 e5       	ldi	r30, 0x55	; 85
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	80 81       	ld	r24, Z
    2bf0:	8d 7f       	andi	r24, 0xFD	; 253
    2bf2:	8c 93       	st	X, r24
    2bf4:	98 c0       	rjmp	.+304    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    2bf6:	a5 e5       	ldi	r26, 0x55	; 85
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e5 e5       	ldi	r30, 0x55	; 85
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	8e 7f       	andi	r24, 0xFE	; 254
    2c02:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    2c04:	a5 e5       	ldi	r26, 0x55	; 85
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	e5 e5       	ldi	r30, 0x55	; 85
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	82 60       	ori	r24, 0x02	; 2
    2c10:	8c 93       	st	X, r24
    2c12:	89 c0       	rjmp	.+274    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    2c14:	a5 e5       	ldi	r26, 0x55	; 85
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	e5 e5       	ldi	r30, 0x55	; 85
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	80 81       	ld	r24, Z
    2c1e:	81 60       	ori	r24, 0x01	; 1
    2c20:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    2c22:	a5 e5       	ldi	r26, 0x55	; 85
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e5 e5       	ldi	r30, 0x55	; 85
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	82 60       	ori	r24, 0x02	; 2
    2c2e:	8c 93       	st	X, r24
    2c30:	7a c0       	rjmp	.+244    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>
			/**************************************************/

		case INT_NO_1:

			/**************** 1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2c32:	8b 81       	ldd	r24, Y+3	; 0x03
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	3f 83       	std	Y+7, r19	; 0x07
    2c3a:	2e 83       	std	Y+6, r18	; 0x06
    2c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c40:	81 30       	cpi	r24, 0x01	; 1
    2c42:	91 05       	cpc	r25, r1
    2c44:	a9 f0       	breq	.+42     	; 0x2c70 <EXTI_enuSetSenseLevel+0x14c>
    2c46:	2e 81       	ldd	r18, Y+6	; 0x06
    2c48:	3f 81       	ldd	r19, Y+7	; 0x07
    2c4a:	22 30       	cpi	r18, 0x02	; 2
    2c4c:	31 05       	cpc	r19, r1
    2c4e:	2c f4       	brge	.+10     	; 0x2c5a <EXTI_enuSetSenseLevel+0x136>
    2c50:	8e 81       	ldd	r24, Y+6	; 0x06
    2c52:	9f 81       	ldd	r25, Y+7	; 0x07
    2c54:	00 97       	sbiw	r24, 0x00	; 0
    2c56:	d9 f0       	breq	.+54     	; 0x2c8e <EXTI_enuSetSenseLevel+0x16a>
    2c58:	66 c0       	rjmp	.+204    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>
    2c5a:	2e 81       	ldd	r18, Y+6	; 0x06
    2c5c:	3f 81       	ldd	r19, Y+7	; 0x07
    2c5e:	22 30       	cpi	r18, 0x02	; 2
    2c60:	31 05       	cpc	r19, r1
    2c62:	21 f1       	breq	.+72     	; 0x2cac <EXTI_enuSetSenseLevel+0x188>
    2c64:	8e 81       	ldd	r24, Y+6	; 0x06
    2c66:	9f 81       	ldd	r25, Y+7	; 0x07
    2c68:	83 30       	cpi	r24, 0x03	; 3
    2c6a:	91 05       	cpc	r25, r1
    2c6c:	71 f1       	breq	.+92     	; 0x2cca <EXTI_enuSetSenseLevel+0x1a6>
    2c6e:	5b c0       	rjmp	.+182    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    2c70:	a5 e5       	ldi	r26, 0x55	; 85
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	e5 e5       	ldi	r30, 0x55	; 85
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	84 60       	ori	r24, 0x04	; 4
    2c7c:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    2c7e:	a5 e5       	ldi	r26, 0x55	; 85
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e5 e5       	ldi	r30, 0x55	; 85
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	87 7f       	andi	r24, 0xF7	; 247
    2c8a:	8c 93       	st	X, r24
    2c8c:	4c c0       	rjmp	.+152    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    2c8e:	a5 e5       	ldi	r26, 0x55	; 85
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	e5 e5       	ldi	r30, 0x55	; 85
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	8b 7f       	andi	r24, 0xFB	; 251
    2c9a:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    2c9c:	a5 e5       	ldi	r26, 0x55	; 85
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e5 e5       	ldi	r30, 0x55	; 85
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	87 7f       	andi	r24, 0xF7	; 247
    2ca8:	8c 93       	st	X, r24
    2caa:	3d c0       	rjmp	.+122    	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    2cac:	a5 e5       	ldi	r26, 0x55	; 85
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e5 e5       	ldi	r30, 0x55	; 85
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	8b 7f       	andi	r24, 0xFB	; 251
    2cb8:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    2cba:	a5 e5       	ldi	r26, 0x55	; 85
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e5 e5       	ldi	r30, 0x55	; 85
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	88 60       	ori	r24, 0x08	; 8
    2cc6:	8c 93       	st	X, r24
    2cc8:	2e c0       	rjmp	.+92     	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    2cca:	a5 e5       	ldi	r26, 0x55	; 85
    2ccc:	b0 e0       	ldi	r27, 0x00	; 0
    2cce:	e5 e5       	ldi	r30, 0x55	; 85
    2cd0:	f0 e0       	ldi	r31, 0x00	; 0
    2cd2:	80 81       	ld	r24, Z
    2cd4:	84 60       	ori	r24, 0x04	; 4
    2cd6:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    2cd8:	a5 e5       	ldi	r26, 0x55	; 85
    2cda:	b0 e0       	ldi	r27, 0x00	; 0
    2cdc:	e5 e5       	ldi	r30, 0x55	; 85
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	88 60       	ori	r24, 0x08	; 8
    2ce4:	8c 93       	st	X, r24
    2ce6:	1f c0       	rjmp	.+62     	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>


		case INT_NO_2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	3d 83       	std	Y+5, r19	; 0x05
    2cf0:	2c 83       	std	Y+4, r18	; 0x04
    2cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf4:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf6:	82 30       	cpi	r24, 0x02	; 2
    2cf8:	91 05       	cpc	r25, r1
    2cfa:	31 f0       	breq	.+12     	; 0x2d08 <EXTI_enuSetSenseLevel+0x1e4>
    2cfc:	2c 81       	ldd	r18, Y+4	; 0x04
    2cfe:	3d 81       	ldd	r19, Y+5	; 0x05
    2d00:	23 30       	cpi	r18, 0x03	; 3
    2d02:	31 05       	cpc	r19, r1
    2d04:	49 f0       	breq	.+18     	; 0x2d18 <EXTI_enuSetSenseLevel+0x1f4>
    2d06:	0f c0       	rjmp	.+30     	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    2d08:	a4 e5       	ldi	r26, 0x54	; 84
    2d0a:	b0 e0       	ldi	r27, 0x00	; 0
    2d0c:	e4 e5       	ldi	r30, 0x54	; 84
    2d0e:	f0 e0       	ldi	r31, 0x00	; 0
    2d10:	80 81       	ld	r24, Z
    2d12:	8f 7b       	andi	r24, 0xBF	; 191
    2d14:	8c 93       	st	X, r24
    2d16:	07 c0       	rjmp	.+14     	; 0x2d26 <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    2d18:	a4 e5       	ldi	r26, 0x54	; 84
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	e4 e5       	ldi	r30, 0x54	; 84
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	80 64       	ori	r24, 0x40	; 64
    2d24:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    2d2a:	39 81       	ldd	r19, Y+1	; 0x01
    2d2c:	3c 87       	std	Y+12, r19	; 0x0c
    2d2e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2d30:	2c 96       	adiw	r28, 0x0c	; 12
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	f8 94       	cli
    2d36:	de bf       	out	0x3e, r29	; 62
    2d38:	0f be       	out	0x3f, r0	; 63
    2d3a:	cd bf       	out	0x3d, r28	; 61
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <EXTI_enuSetCallBack+0x6>
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <EXTI_enuSetCallBack+0x8>
    2d4a:	0f 92       	push	r0
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	9b 83       	std	Y+3, r25	; 0x03
    2d52:	8a 83       	std	Y+2, r24	; 0x02
    2d54:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2d56:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    2d58:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	29 f4       	brne	.+10     	; 0x2d6a <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	8d 83       	std	Y+5, r24	; 0x05
    2d68:	18 c0       	rjmp	.+48     	; 0x2d9a <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT_NO_2){
    2d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6c:	83 30       	cpi	r24, 0x03	; 3
    2d6e:	28 f0       	brcs	.+10     	; 0x2d7a <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    2d70:	84 e0       	ldi	r24, 0x04	; 4
    2d72:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	8d 83       	std	Y+5, r24	; 0x05
    2d78:	10 c0       	rjmp	.+32     	; 0x2d9a <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    2d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	88 0f       	add	r24, r24
    2d82:	99 1f       	adc	r25, r25
    2d84:	fc 01       	movw	r30, r24
    2d86:	e4 56       	subi	r30, 0x64	; 100
    2d88:	fe 4f       	sbci	r31, 0xFE	; 254
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	08 95       	ret

00002dac <__vector_1>:


ISR(INT0_vect){
    2dac:	1f 92       	push	r1
    2dae:	0f 92       	push	r0
    2db0:	0f b6       	in	r0, 0x3f	; 63
    2db2:	0f 92       	push	r0
    2db4:	11 24       	eor	r1, r1
    2db6:	2f 93       	push	r18
    2db8:	3f 93       	push	r19
    2dba:	4f 93       	push	r20
    2dbc:	5f 93       	push	r21
    2dbe:	6f 93       	push	r22
    2dc0:	7f 93       	push	r23
    2dc2:	8f 93       	push	r24
    2dc4:	9f 93       	push	r25
    2dc6:	af 93       	push	r26
    2dc8:	bf 93       	push	r27
    2dca:	ef 93       	push	r30
    2dcc:	ff 93       	push	r31
    2dce:	df 93       	push	r29
    2dd0:	cf 93       	push	r28
    2dd2:	cd b7       	in	r28, 0x3d	; 61
    2dd4:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_0] != NULL){
    2dd6:	80 91 9c 01 	lds	r24, 0x019C
    2dda:	90 91 9d 01 	lds	r25, 0x019D
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	29 f0       	breq	.+10     	; 0x2dec <__vector_1+0x40>
			EXTI_pfunISRFun[INT_NO_0]();
    2de2:	e0 91 9c 01 	lds	r30, 0x019C
    2de6:	f0 91 9d 01 	lds	r31, 0x019D
    2dea:	09 95       	icall
		}
}
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	ff 91       	pop	r31
    2df2:	ef 91       	pop	r30
    2df4:	bf 91       	pop	r27
    2df6:	af 91       	pop	r26
    2df8:	9f 91       	pop	r25
    2dfa:	8f 91       	pop	r24
    2dfc:	7f 91       	pop	r23
    2dfe:	6f 91       	pop	r22
    2e00:	5f 91       	pop	r21
    2e02:	4f 91       	pop	r20
    2e04:	3f 91       	pop	r19
    2e06:	2f 91       	pop	r18
    2e08:	0f 90       	pop	r0
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	0f 90       	pop	r0
    2e0e:	1f 90       	pop	r1
    2e10:	18 95       	reti

00002e12 <__vector_2>:




ISR(INT1_vect){
    2e12:	1f 92       	push	r1
    2e14:	0f 92       	push	r0
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	0f 92       	push	r0
    2e1a:	11 24       	eor	r1, r1
    2e1c:	2f 93       	push	r18
    2e1e:	3f 93       	push	r19
    2e20:	4f 93       	push	r20
    2e22:	5f 93       	push	r21
    2e24:	6f 93       	push	r22
    2e26:	7f 93       	push	r23
    2e28:	8f 93       	push	r24
    2e2a:	9f 93       	push	r25
    2e2c:	af 93       	push	r26
    2e2e:	bf 93       	push	r27
    2e30:	ef 93       	push	r30
    2e32:	ff 93       	push	r31
    2e34:	df 93       	push	r29
    2e36:	cf 93       	push	r28
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_1] != NULL){
    2e3c:	80 91 9e 01 	lds	r24, 0x019E
    2e40:	90 91 9f 01 	lds	r25, 0x019F
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	29 f0       	breq	.+10     	; 0x2e52 <__vector_2+0x40>
			EXTI_pfunISRFun[INT_NO_1]();
    2e48:	e0 91 9e 01 	lds	r30, 0x019E
    2e4c:	f0 91 9f 01 	lds	r31, 0x019F
    2e50:	09 95       	icall
		}
}
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	ff 91       	pop	r31
    2e58:	ef 91       	pop	r30
    2e5a:	bf 91       	pop	r27
    2e5c:	af 91       	pop	r26
    2e5e:	9f 91       	pop	r25
    2e60:	8f 91       	pop	r24
    2e62:	7f 91       	pop	r23
    2e64:	6f 91       	pop	r22
    2e66:	5f 91       	pop	r21
    2e68:	4f 91       	pop	r20
    2e6a:	3f 91       	pop	r19
    2e6c:	2f 91       	pop	r18
    2e6e:	0f 90       	pop	r0
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	0f 90       	pop	r0
    2e74:	1f 90       	pop	r1
    2e76:	18 95       	reti

00002e78 <__vector_3>:



ISR(INT2_vect){
    2e78:	1f 92       	push	r1
    2e7a:	0f 92       	push	r0
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	0f 92       	push	r0
    2e80:	11 24       	eor	r1, r1
    2e82:	2f 93       	push	r18
    2e84:	3f 93       	push	r19
    2e86:	4f 93       	push	r20
    2e88:	5f 93       	push	r21
    2e8a:	6f 93       	push	r22
    2e8c:	7f 93       	push	r23
    2e8e:	8f 93       	push	r24
    2e90:	9f 93       	push	r25
    2e92:	af 93       	push	r26
    2e94:	bf 93       	push	r27
    2e96:	ef 93       	push	r30
    2e98:	ff 93       	push	r31
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_2] != NULL){
    2ea2:	80 91 a0 01 	lds	r24, 0x01A0
    2ea6:	90 91 a1 01 	lds	r25, 0x01A1
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	29 f0       	breq	.+10     	; 0x2eb8 <__vector_3+0x40>
			EXTI_pfunISRFun[INT_NO_2]();
    2eae:	e0 91 a0 01 	lds	r30, 0x01A0
    2eb2:	f0 91 a1 01 	lds	r31, 0x01A1
    2eb6:	09 95       	icall
		}
}
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	ff 91       	pop	r31
    2ebe:	ef 91       	pop	r30
    2ec0:	bf 91       	pop	r27
    2ec2:	af 91       	pop	r26
    2ec4:	9f 91       	pop	r25
    2ec6:	8f 91       	pop	r24
    2ec8:	7f 91       	pop	r23
    2eca:	6f 91       	pop	r22
    2ecc:	5f 91       	pop	r21
    2ece:	4f 91       	pop	r20
    2ed0:	3f 91       	pop	r19
    2ed2:	2f 91       	pop	r18
    2ed4:	0f 90       	pop	r0
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	0f 90       	pop	r0
    2eda:	1f 90       	pop	r1
    2edc:	18 95       	reti

00002ede <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	0f 92       	push	r0
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2ee8:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    2eea:	ea e3       	ldi	r30, 0x3A	; 58
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 ef       	ldi	r24, 0xF0	; 240
    2ef0:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    2ef2:	eb e3       	ldi	r30, 0x3B	; 59
    2ef4:	f0 e0       	ldi	r31, 0x00	; 0
    2ef6:	83 ec       	ldi	r24, 0xC3	; 195
    2ef8:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    2efa:	e7 e3       	ldi	r30, 0x37	; 55
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 ef       	ldi	r24, 0xF0	; 240
    2f00:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    2f02:	e8 e3       	ldi	r30, 0x38	; 56
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	83 ec       	ldi	r24, 0xC3	; 195
    2f08:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    2f0a:	e4 e3       	ldi	r30, 0x34	; 52
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 ef       	ldi	r24, 0xF0	; 240
    2f10:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    2f12:	e5 e3       	ldi	r30, 0x35	; 53
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	83 ec       	ldi	r24, 0xC3	; 195
    2f18:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    2f1a:	e1 e3       	ldi	r30, 0x31	; 49
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 ef       	ldi	r24, 0xF0	; 240
    2f20:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    2f22:	e2 e3       	ldi	r30, 0x32	; 50
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	83 ec       	ldi	r24, 0xC3	; 195
    2f28:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f2c:	0f 90       	pop	r0
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	27 97       	sbiw	r28, 0x07	; 7
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	de bf       	out	0x3e, r29	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	cd bf       	out	0x3d, r28	; 61
    2f48:	8a 83       	std	Y+2, r24	; 0x02
    2f4a:	6b 83       	std	Y+3, r22	; 0x03
    2f4c:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2f4e:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	84 30       	cpi	r24, 0x04	; 4
    2f54:	08 f0       	brcs	.+2      	; 0x2f58 <DIO_enuSetPinDirection+0x24>
    2f56:	de c0       	rjmp	.+444    	; 0x3114 <DIO_enuSetPinDirection+0x1e0>
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	88 30       	cpi	r24, 0x08	; 8
    2f5c:	08 f0       	brcs	.+2      	; 0x2f60 <DIO_enuSetPinDirection+0x2c>
    2f5e:	da c0       	rjmp	.+436    	; 0x3114 <DIO_enuSetPinDirection+0x1e0>
    2f60:	8c 81       	ldd	r24, Y+4	; 0x04
    2f62:	82 30       	cpi	r24, 0x02	; 2
    2f64:	08 f0       	brcs	.+2      	; 0x2f68 <DIO_enuSetPinDirection+0x34>
    2f66:	d6 c0       	rjmp	.+428    	; 0x3114 <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	28 2f       	mov	r18, r24
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	3f 83       	std	Y+7, r19	; 0x07
    2f70:	2e 83       	std	Y+6, r18	; 0x06
    2f72:	8e 81       	ldd	r24, Y+6	; 0x06
    2f74:	9f 81       	ldd	r25, Y+7	; 0x07
    2f76:	81 30       	cpi	r24, 0x01	; 1
    2f78:	91 05       	cpc	r25, r1
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <DIO_enuSetPinDirection+0x4a>
    2f7c:	43 c0       	rjmp	.+134    	; 0x3004 <DIO_enuSetPinDirection+0xd0>
    2f7e:	2e 81       	ldd	r18, Y+6	; 0x06
    2f80:	3f 81       	ldd	r19, Y+7	; 0x07
    2f82:	22 30       	cpi	r18, 0x02	; 2
    2f84:	31 05       	cpc	r19, r1
    2f86:	2c f4       	brge	.+10     	; 0x2f92 <DIO_enuSetPinDirection+0x5e>
    2f88:	8e 81       	ldd	r24, Y+6	; 0x06
    2f8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	71 f0       	breq	.+28     	; 0x2fac <DIO_enuSetPinDirection+0x78>
    2f90:	bc c0       	rjmp	.+376    	; 0x310a <DIO_enuSetPinDirection+0x1d6>
    2f92:	2e 81       	ldd	r18, Y+6	; 0x06
    2f94:	3f 81       	ldd	r19, Y+7	; 0x07
    2f96:	22 30       	cpi	r18, 0x02	; 2
    2f98:	31 05       	cpc	r19, r1
    2f9a:	09 f4       	brne	.+2      	; 0x2f9e <DIO_enuSetPinDirection+0x6a>
    2f9c:	5f c0       	rjmp	.+190    	; 0x305c <DIO_enuSetPinDirection+0x128>
    2f9e:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa0:	9f 81       	ldd	r25, Y+7	; 0x07
    2fa2:	83 30       	cpi	r24, 0x03	; 3
    2fa4:	91 05       	cpc	r25, r1
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <DIO_enuSetPinDirection+0x76>
    2fa8:	85 c0       	rjmp	.+266    	; 0x30b4 <DIO_enuSetPinDirection+0x180>
    2faa:	af c0       	rjmp	.+350    	; 0x310a <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    2fac:	8c 81       	ldd	r24, Y+4	; 0x04
    2fae:	81 30       	cpi	r24, 0x01	; 1
    2fb0:	a1 f4       	brne	.+40     	; 0x2fda <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    2fb2:	aa e3       	ldi	r26, 0x3A	; 58
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	ea e3       	ldi	r30, 0x3A	; 58
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	48 2f       	mov	r20, r24
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	02 2e       	mov	r0, r18
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <DIO_enuSetPinDirection+0x9c>
    2fcc:	88 0f       	add	r24, r24
    2fce:	99 1f       	adc	r25, r25
    2fd0:	0a 94       	dec	r0
    2fd2:	e2 f7       	brpl	.-8      	; 0x2fcc <DIO_enuSetPinDirection+0x98>
    2fd4:	84 2b       	or	r24, r20
    2fd6:	8c 93       	st	X, r24
    2fd8:	98 c0       	rjmp	.+304    	; 0x310a <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    2fda:	aa e3       	ldi	r26, 0x3A	; 58
    2fdc:	b0 e0       	ldi	r27, 0x00	; 0
    2fde:	ea e3       	ldi	r30, 0x3A	; 58
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	80 81       	ld	r24, Z
    2fe4:	48 2f       	mov	r20, r24
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	02 2e       	mov	r0, r18
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <DIO_enuSetPinDirection+0xc4>
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	0a 94       	dec	r0
    2ffa:	e2 f7       	brpl	.-8      	; 0x2ff4 <DIO_enuSetPinDirection+0xc0>
    2ffc:	80 95       	com	r24
    2ffe:	84 23       	and	r24, r20
    3000:	8c 93       	st	X, r24
    3002:	83 c0       	rjmp	.+262    	; 0x310a <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    3004:	8c 81       	ldd	r24, Y+4	; 0x04
    3006:	81 30       	cpi	r24, 0x01	; 1
    3008:	a1 f4       	brne	.+40     	; 0x3032 <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    300a:	a7 e3       	ldi	r26, 0x37	; 55
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e7 e3       	ldi	r30, 0x37	; 55
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	48 2f       	mov	r20, r24
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	02 2e       	mov	r0, r18
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <DIO_enuSetPinDirection+0xf4>
    3024:	88 0f       	add	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	0a 94       	dec	r0
    302a:	e2 f7       	brpl	.-8      	; 0x3024 <DIO_enuSetPinDirection+0xf0>
    302c:	84 2b       	or	r24, r20
    302e:	8c 93       	st	X, r24
    3030:	6c c0       	rjmp	.+216    	; 0x310a <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    3032:	a7 e3       	ldi	r26, 0x37	; 55
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	e7 e3       	ldi	r30, 0x37	; 55
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	48 2f       	mov	r20, r24
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	28 2f       	mov	r18, r24
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	02 2e       	mov	r0, r18
    304a:	02 c0       	rjmp	.+4      	; 0x3050 <DIO_enuSetPinDirection+0x11c>
    304c:	88 0f       	add	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	0a 94       	dec	r0
    3052:	e2 f7       	brpl	.-8      	; 0x304c <DIO_enuSetPinDirection+0x118>
    3054:	80 95       	com	r24
    3056:	84 23       	and	r24, r20
    3058:	8c 93       	st	X, r24
    305a:	57 c0       	rjmp	.+174    	; 0x310a <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    305c:	8c 81       	ldd	r24, Y+4	; 0x04
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	a1 f4       	brne	.+40     	; 0x308a <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    3062:	a4 e3       	ldi	r26, 0x34	; 52
    3064:	b0 e0       	ldi	r27, 0x00	; 0
    3066:	e4 e3       	ldi	r30, 0x34	; 52
    3068:	f0 e0       	ldi	r31, 0x00	; 0
    306a:	80 81       	ld	r24, Z
    306c:	48 2f       	mov	r20, r24
    306e:	8b 81       	ldd	r24, Y+3	; 0x03
    3070:	28 2f       	mov	r18, r24
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	81 e0       	ldi	r24, 0x01	; 1
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	02 2e       	mov	r0, r18
    307a:	02 c0       	rjmp	.+4      	; 0x3080 <DIO_enuSetPinDirection+0x14c>
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	0a 94       	dec	r0
    3082:	e2 f7       	brpl	.-8      	; 0x307c <DIO_enuSetPinDirection+0x148>
    3084:	84 2b       	or	r24, r20
    3086:	8c 93       	st	X, r24
    3088:	40 c0       	rjmp	.+128    	; 0x310a <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    308a:	a4 e3       	ldi	r26, 0x34	; 52
    308c:	b0 e0       	ldi	r27, 0x00	; 0
    308e:	e4 e3       	ldi	r30, 0x34	; 52
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
    3094:	48 2f       	mov	r20, r24
    3096:	8b 81       	ldd	r24, Y+3	; 0x03
    3098:	28 2f       	mov	r18, r24
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	02 2e       	mov	r0, r18
    30a2:	02 c0       	rjmp	.+4      	; 0x30a8 <DIO_enuSetPinDirection+0x174>
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	0a 94       	dec	r0
    30aa:	e2 f7       	brpl	.-8      	; 0x30a4 <DIO_enuSetPinDirection+0x170>
    30ac:	80 95       	com	r24
    30ae:	84 23       	and	r24, r20
    30b0:	8c 93       	st	X, r24
    30b2:	2b c0       	rjmp	.+86     	; 0x310a <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    30b4:	8c 81       	ldd	r24, Y+4	; 0x04
    30b6:	81 30       	cpi	r24, 0x01	; 1
    30b8:	a1 f4       	brne	.+40     	; 0x30e2 <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    30ba:	a1 e3       	ldi	r26, 0x31	; 49
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	e1 e3       	ldi	r30, 0x31	; 49
    30c0:	f0 e0       	ldi	r31, 0x00	; 0
    30c2:	80 81       	ld	r24, Z
    30c4:	48 2f       	mov	r20, r24
    30c6:	8b 81       	ldd	r24, Y+3	; 0x03
    30c8:	28 2f       	mov	r18, r24
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	02 2e       	mov	r0, r18
    30d2:	02 c0       	rjmp	.+4      	; 0x30d8 <DIO_enuSetPinDirection+0x1a4>
    30d4:	88 0f       	add	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	0a 94       	dec	r0
    30da:	e2 f7       	brpl	.-8      	; 0x30d4 <DIO_enuSetPinDirection+0x1a0>
    30dc:	84 2b       	or	r24, r20
    30de:	8c 93       	st	X, r24
    30e0:	14 c0       	rjmp	.+40     	; 0x310a <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    30e2:	a1 e3       	ldi	r26, 0x31	; 49
    30e4:	b0 e0       	ldi	r27, 0x00	; 0
    30e6:	e1 e3       	ldi	r30, 0x31	; 49
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	80 81       	ld	r24, Z
    30ec:	48 2f       	mov	r20, r24
    30ee:	8b 81       	ldd	r24, Y+3	; 0x03
    30f0:	28 2f       	mov	r18, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	81 e0       	ldi	r24, 0x01	; 1
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	02 2e       	mov	r0, r18
    30fa:	02 c0       	rjmp	.+4      	; 0x3100 <DIO_enuSetPinDirection+0x1cc>
    30fc:	88 0f       	add	r24, r24
    30fe:	99 1f       	adc	r25, r25
    3100:	0a 94       	dec	r0
    3102:	e2 f7       	brpl	.-8      	; 0x30fc <DIO_enuSetPinDirection+0x1c8>
    3104:	80 95       	com	r24
    3106:	84 23       	and	r24, r20
    3108:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    310a:	81 e0       	ldi	r24, 0x01	; 1
    310c:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    310e:	99 81       	ldd	r25, Y+1	; 0x01
    3110:	9d 83       	std	Y+5, r25	; 0x05
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    3114:	29 81       	ldd	r18, Y+1	; 0x01
    3116:	2d 83       	std	Y+5, r18	; 0x05
    3118:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    311a:	27 96       	adiw	r28, 0x07	; 7
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
    3126:	cf 91       	pop	r28
    3128:	df 91       	pop	r29
    312a:	08 95       	ret

0000312c <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	27 97       	sbiw	r28, 0x07	; 7
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	f8 94       	cli
    313a:	de bf       	out	0x3e, r29	; 62
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	cd bf       	out	0x3d, r28	; 61
    3140:	8a 83       	std	Y+2, r24	; 0x02
    3142:	6b 83       	std	Y+3, r22	; 0x03
    3144:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3146:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	84 30       	cpi	r24, 0x04	; 4
    314c:	08 f0       	brcs	.+2      	; 0x3150 <DIO_enuSetPinValue+0x24>
    314e:	de c0       	rjmp	.+444    	; 0x330c <DIO_enuSetPinValue+0x1e0>
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	88 30       	cpi	r24, 0x08	; 8
    3154:	08 f0       	brcs	.+2      	; 0x3158 <DIO_enuSetPinValue+0x2c>
    3156:	da c0       	rjmp	.+436    	; 0x330c <DIO_enuSetPinValue+0x1e0>
    3158:	8c 81       	ldd	r24, Y+4	; 0x04
    315a:	82 30       	cpi	r24, 0x02	; 2
    315c:	08 f0       	brcs	.+2      	; 0x3160 <DIO_enuSetPinValue+0x34>
    315e:	d6 c0       	rjmp	.+428    	; 0x330c <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	3f 83       	std	Y+7, r19	; 0x07
    3168:	2e 83       	std	Y+6, r18	; 0x06
    316a:	8e 81       	ldd	r24, Y+6	; 0x06
    316c:	9f 81       	ldd	r25, Y+7	; 0x07
    316e:	81 30       	cpi	r24, 0x01	; 1
    3170:	91 05       	cpc	r25, r1
    3172:	09 f4       	brne	.+2      	; 0x3176 <DIO_enuSetPinValue+0x4a>
    3174:	43 c0       	rjmp	.+134    	; 0x31fc <DIO_enuSetPinValue+0xd0>
    3176:	2e 81       	ldd	r18, Y+6	; 0x06
    3178:	3f 81       	ldd	r19, Y+7	; 0x07
    317a:	22 30       	cpi	r18, 0x02	; 2
    317c:	31 05       	cpc	r19, r1
    317e:	2c f4       	brge	.+10     	; 0x318a <DIO_enuSetPinValue+0x5e>
    3180:	8e 81       	ldd	r24, Y+6	; 0x06
    3182:	9f 81       	ldd	r25, Y+7	; 0x07
    3184:	00 97       	sbiw	r24, 0x00	; 0
    3186:	71 f0       	breq	.+28     	; 0x31a4 <DIO_enuSetPinValue+0x78>
    3188:	bc c0       	rjmp	.+376    	; 0x3302 <DIO_enuSetPinValue+0x1d6>
    318a:	2e 81       	ldd	r18, Y+6	; 0x06
    318c:	3f 81       	ldd	r19, Y+7	; 0x07
    318e:	22 30       	cpi	r18, 0x02	; 2
    3190:	31 05       	cpc	r19, r1
    3192:	09 f4       	brne	.+2      	; 0x3196 <DIO_enuSetPinValue+0x6a>
    3194:	5f c0       	rjmp	.+190    	; 0x3254 <DIO_enuSetPinValue+0x128>
    3196:	8e 81       	ldd	r24, Y+6	; 0x06
    3198:	9f 81       	ldd	r25, Y+7	; 0x07
    319a:	83 30       	cpi	r24, 0x03	; 3
    319c:	91 05       	cpc	r25, r1
    319e:	09 f4       	brne	.+2      	; 0x31a2 <DIO_enuSetPinValue+0x76>
    31a0:	85 c0       	rjmp	.+266    	; 0x32ac <DIO_enuSetPinValue+0x180>
    31a2:	af c0       	rjmp	.+350    	; 0x3302 <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    31a4:	8c 81       	ldd	r24, Y+4	; 0x04
    31a6:	88 23       	and	r24, r24
    31a8:	a1 f0       	breq	.+40     	; 0x31d2 <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    31aa:	ab e3       	ldi	r26, 0x3B	; 59
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	eb e3       	ldi	r30, 0x3B	; 59
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	48 2f       	mov	r20, r24
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	02 2e       	mov	r0, r18
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <DIO_enuSetPinValue+0x9c>
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	0a 94       	dec	r0
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <DIO_enuSetPinValue+0x98>
    31cc:	84 2b       	or	r24, r20
    31ce:	8c 93       	st	X, r24
    31d0:	98 c0       	rjmp	.+304    	; 0x3302 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    31d2:	ab e3       	ldi	r26, 0x3B	; 59
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	eb e3       	ldi	r30, 0x3B	; 59
    31d8:	f0 e0       	ldi	r31, 0x00	; 0
    31da:	80 81       	ld	r24, Z
    31dc:	48 2f       	mov	r20, r24
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	28 2f       	mov	r18, r24
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	02 2e       	mov	r0, r18
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <DIO_enuSetPinValue+0xc4>
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	0a 94       	dec	r0
    31f2:	e2 f7       	brpl	.-8      	; 0x31ec <DIO_enuSetPinValue+0xc0>
    31f4:	80 95       	com	r24
    31f6:	84 23       	and	r24, r20
    31f8:	8c 93       	st	X, r24
    31fa:	83 c0       	rjmp	.+262    	; 0x3302 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    31fc:	8c 81       	ldd	r24, Y+4	; 0x04
    31fe:	88 23       	and	r24, r24
    3200:	a1 f0       	breq	.+40     	; 0x322a <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    3202:	a8 e3       	ldi	r26, 0x38	; 56
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e8 e3       	ldi	r30, 0x38	; 56
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	48 2f       	mov	r20, r24
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	02 2e       	mov	r0, r18
    321a:	02 c0       	rjmp	.+4      	; 0x3220 <DIO_enuSetPinValue+0xf4>
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	0a 94       	dec	r0
    3222:	e2 f7       	brpl	.-8      	; 0x321c <DIO_enuSetPinValue+0xf0>
    3224:	84 2b       	or	r24, r20
    3226:	8c 93       	st	X, r24
    3228:	6c c0       	rjmp	.+216    	; 0x3302 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    322a:	a8 e3       	ldi	r26, 0x38	; 56
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	e8 e3       	ldi	r30, 0x38	; 56
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	48 2f       	mov	r20, r24
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	02 2e       	mov	r0, r18
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <DIO_enuSetPinValue+0x11c>
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	0a 94       	dec	r0
    324a:	e2 f7       	brpl	.-8      	; 0x3244 <DIO_enuSetPinValue+0x118>
    324c:	80 95       	com	r24
    324e:	84 23       	and	r24, r20
    3250:	8c 93       	st	X, r24
    3252:	57 c0       	rjmp	.+174    	; 0x3302 <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    3254:	8c 81       	ldd	r24, Y+4	; 0x04
    3256:	88 23       	and	r24, r24
    3258:	a1 f0       	breq	.+40     	; 0x3282 <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    325a:	a5 e3       	ldi	r26, 0x35	; 53
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	e5 e3       	ldi	r30, 0x35	; 53
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	48 2f       	mov	r20, r24
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	28 2f       	mov	r18, r24
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	02 2e       	mov	r0, r18
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <DIO_enuSetPinValue+0x14c>
    3274:	88 0f       	add	r24, r24
    3276:	99 1f       	adc	r25, r25
    3278:	0a 94       	dec	r0
    327a:	e2 f7       	brpl	.-8      	; 0x3274 <DIO_enuSetPinValue+0x148>
    327c:	84 2b       	or	r24, r20
    327e:	8c 93       	st	X, r24
    3280:	40 c0       	rjmp	.+128    	; 0x3302 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    3282:	a5 e3       	ldi	r26, 0x35	; 53
    3284:	b0 e0       	ldi	r27, 0x00	; 0
    3286:	e5 e3       	ldi	r30, 0x35	; 53
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	80 81       	ld	r24, Z
    328c:	48 2f       	mov	r20, r24
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	02 2e       	mov	r0, r18
    329a:	02 c0       	rjmp	.+4      	; 0x32a0 <DIO_enuSetPinValue+0x174>
    329c:	88 0f       	add	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	0a 94       	dec	r0
    32a2:	e2 f7       	brpl	.-8      	; 0x329c <DIO_enuSetPinValue+0x170>
    32a4:	80 95       	com	r24
    32a6:	84 23       	and	r24, r20
    32a8:	8c 93       	st	X, r24
    32aa:	2b c0       	rjmp	.+86     	; 0x3302 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    32ac:	8c 81       	ldd	r24, Y+4	; 0x04
    32ae:	88 23       	and	r24, r24
    32b0:	a1 f0       	breq	.+40     	; 0x32da <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    32b2:	a2 e3       	ldi	r26, 0x32	; 50
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	e2 e3       	ldi	r30, 0x32	; 50
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	48 2f       	mov	r20, r24
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	02 2e       	mov	r0, r18
    32ca:	02 c0       	rjmp	.+4      	; 0x32d0 <DIO_enuSetPinValue+0x1a4>
    32cc:	88 0f       	add	r24, r24
    32ce:	99 1f       	adc	r25, r25
    32d0:	0a 94       	dec	r0
    32d2:	e2 f7       	brpl	.-8      	; 0x32cc <DIO_enuSetPinValue+0x1a0>
    32d4:	84 2b       	or	r24, r20
    32d6:	8c 93       	st	X, r24
    32d8:	14 c0       	rjmp	.+40     	; 0x3302 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    32da:	a2 e3       	ldi	r26, 0x32	; 50
    32dc:	b0 e0       	ldi	r27, 0x00	; 0
    32de:	e2 e3       	ldi	r30, 0x32	; 50
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	80 81       	ld	r24, Z
    32e4:	48 2f       	mov	r20, r24
    32e6:	8b 81       	ldd	r24, Y+3	; 0x03
    32e8:	28 2f       	mov	r18, r24
    32ea:	30 e0       	ldi	r19, 0x00	; 0
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	02 2e       	mov	r0, r18
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <DIO_enuSetPinValue+0x1cc>
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	0a 94       	dec	r0
    32fa:	e2 f7       	brpl	.-8      	; 0x32f4 <DIO_enuSetPinValue+0x1c8>
    32fc:	80 95       	com	r24
    32fe:	84 23       	and	r24, r20
    3300:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    3306:	99 81       	ldd	r25, Y+1	; 0x01
    3308:	9d 83       	std	Y+5, r25	; 0x05
    330a:	02 c0       	rjmp	.+4      	; 0x3310 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    330c:	29 81       	ldd	r18, Y+1	; 0x01
    330e:	2d 83       	std	Y+5, r18	; 0x05
    3310:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    3312:	27 96       	adiw	r28, 0x07	; 7
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
    331e:	cf 91       	pop	r28
    3320:	df 91       	pop	r29
    3322:	08 95       	ret

00003324 <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	28 97       	sbiw	r28, 0x08	; 8
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	de bf       	out	0x3e, r29	; 62
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	cd bf       	out	0x3d, r28	; 61
    3338:	8a 83       	std	Y+2, r24	; 0x02
    333a:	6b 83       	std	Y+3, r22	; 0x03
    333c:	5d 83       	std	Y+5, r21	; 0x05
    333e:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3340:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    3342:	8c 81       	ldd	r24, Y+4	; 0x04
    3344:	9d 81       	ldd	r25, Y+5	; 0x05
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	29 f4       	brne	.+10     	; 0x3354 <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    334a:	83 e0       	ldi	r24, 0x03	; 3
    334c:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    334e:	29 81       	ldd	r18, Y+1	; 0x01
    3350:	28 87       	std	Y+8, r18	; 0x08
    3352:	7f c0       	rjmp	.+254    	; 0x3452 <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	84 30       	cpi	r24, 0x04	; 4
    3358:	08 f0       	brcs	.+2      	; 0x335c <DIO_enuGetPinValue+0x38>
    335a:	79 c0       	rjmp	.+242    	; 0x344e <DIO_enuGetPinValue+0x12a>
    335c:	8b 81       	ldd	r24, Y+3	; 0x03
    335e:	88 30       	cpi	r24, 0x08	; 8
    3360:	08 f0       	brcs	.+2      	; 0x3364 <DIO_enuGetPinValue+0x40>
    3362:	75 c0       	rjmp	.+234    	; 0x344e <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    3364:	8a 81       	ldd	r24, Y+2	; 0x02
    3366:	48 2f       	mov	r20, r24
    3368:	50 e0       	ldi	r21, 0x00	; 0
    336a:	5f 83       	std	Y+7, r21	; 0x07
    336c:	4e 83       	std	Y+6, r20	; 0x06
    336e:	8e 81       	ldd	r24, Y+6	; 0x06
    3370:	9f 81       	ldd	r25, Y+7	; 0x07
    3372:	81 30       	cpi	r24, 0x01	; 1
    3374:	91 05       	cpc	r25, r1
    3376:	59 f1       	breq	.+86     	; 0x33ce <DIO_enuGetPinValue+0xaa>
    3378:	2e 81       	ldd	r18, Y+6	; 0x06
    337a:	3f 81       	ldd	r19, Y+7	; 0x07
    337c:	22 30       	cpi	r18, 0x02	; 2
    337e:	31 05       	cpc	r19, r1
    3380:	34 f4       	brge	.+12     	; 0x338e <DIO_enuGetPinValue+0x6a>
    3382:	4e 81       	ldd	r20, Y+6	; 0x06
    3384:	5f 81       	ldd	r21, Y+7	; 0x07
    3386:	41 15       	cp	r20, r1
    3388:	51 05       	cpc	r21, r1
    338a:	69 f0       	breq	.+26     	; 0x33a6 <DIO_enuGetPinValue+0x82>
    338c:	5b c0       	rjmp	.+182    	; 0x3444 <DIO_enuGetPinValue+0x120>
    338e:	8e 81       	ldd	r24, Y+6	; 0x06
    3390:	9f 81       	ldd	r25, Y+7	; 0x07
    3392:	82 30       	cpi	r24, 0x02	; 2
    3394:	91 05       	cpc	r25, r1
    3396:	79 f1       	breq	.+94     	; 0x33f6 <DIO_enuGetPinValue+0xd2>
    3398:	2e 81       	ldd	r18, Y+6	; 0x06
    339a:	3f 81       	ldd	r19, Y+7	; 0x07
    339c:	23 30       	cpi	r18, 0x03	; 3
    339e:	31 05       	cpc	r19, r1
    33a0:	09 f4       	brne	.+2      	; 0x33a4 <DIO_enuGetPinValue+0x80>
    33a2:	3d c0       	rjmp	.+122    	; 0x341e <DIO_enuGetPinValue+0xfa>
    33a4:	4f c0       	rjmp	.+158    	; 0x3444 <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    33a6:	e9 e3       	ldi	r30, 0x39	; 57
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	80 81       	ld	r24, Z
    33ac:	28 2f       	mov	r18, r24
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	8b 81       	ldd	r24, Y+3	; 0x03
    33b2:	88 2f       	mov	r24, r24
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	a9 01       	movw	r20, r18
    33b8:	02 c0       	rjmp	.+4      	; 0x33be <DIO_enuGetPinValue+0x9a>
    33ba:	55 95       	asr	r21
    33bc:	47 95       	ror	r20
    33be:	8a 95       	dec	r24
    33c0:	e2 f7       	brpl	.-8      	; 0x33ba <DIO_enuGetPinValue+0x96>
    33c2:	ca 01       	movw	r24, r20
    33c4:	81 70       	andi	r24, 0x01	; 1
    33c6:	ec 81       	ldd	r30, Y+4	; 0x04
    33c8:	fd 81       	ldd	r31, Y+5	; 0x05
    33ca:	80 83       	st	Z, r24
    33cc:	3b c0       	rjmp	.+118    	; 0x3444 <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    33ce:	e6 e3       	ldi	r30, 0x36	; 54
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	80 81       	ld	r24, Z
    33d4:	28 2f       	mov	r18, r24
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	8b 81       	ldd	r24, Y+3	; 0x03
    33da:	88 2f       	mov	r24, r24
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	a9 01       	movw	r20, r18
    33e0:	02 c0       	rjmp	.+4      	; 0x33e6 <DIO_enuGetPinValue+0xc2>
    33e2:	55 95       	asr	r21
    33e4:	47 95       	ror	r20
    33e6:	8a 95       	dec	r24
    33e8:	e2 f7       	brpl	.-8      	; 0x33e2 <DIO_enuGetPinValue+0xbe>
    33ea:	ca 01       	movw	r24, r20
    33ec:	81 70       	andi	r24, 0x01	; 1
    33ee:	ec 81       	ldd	r30, Y+4	; 0x04
    33f0:	fd 81       	ldd	r31, Y+5	; 0x05
    33f2:	80 83       	st	Z, r24
    33f4:	27 c0       	rjmp	.+78     	; 0x3444 <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    33f6:	e3 e3       	ldi	r30, 0x33	; 51
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	80 81       	ld	r24, Z
    33fc:	28 2f       	mov	r18, r24
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	88 2f       	mov	r24, r24
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	a9 01       	movw	r20, r18
    3408:	02 c0       	rjmp	.+4      	; 0x340e <DIO_enuGetPinValue+0xea>
    340a:	55 95       	asr	r21
    340c:	47 95       	ror	r20
    340e:	8a 95       	dec	r24
    3410:	e2 f7       	brpl	.-8      	; 0x340a <DIO_enuGetPinValue+0xe6>
    3412:	ca 01       	movw	r24, r20
    3414:	81 70       	andi	r24, 0x01	; 1
    3416:	ec 81       	ldd	r30, Y+4	; 0x04
    3418:	fd 81       	ldd	r31, Y+5	; 0x05
    341a:	80 83       	st	Z, r24
    341c:	13 c0       	rjmp	.+38     	; 0x3444 <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    341e:	e0 e3       	ldi	r30, 0x30	; 48
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	28 2f       	mov	r18, r24
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	88 2f       	mov	r24, r24
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	a9 01       	movw	r20, r18
    3430:	02 c0       	rjmp	.+4      	; 0x3436 <DIO_enuGetPinValue+0x112>
    3432:	55 95       	asr	r21
    3434:	47 95       	ror	r20
    3436:	8a 95       	dec	r24
    3438:	e2 f7       	brpl	.-8      	; 0x3432 <DIO_enuGetPinValue+0x10e>
    343a:	ca 01       	movw	r24, r20
    343c:	81 70       	andi	r24, 0x01	; 1
    343e:	ec 81       	ldd	r30, Y+4	; 0x04
    3440:	fd 81       	ldd	r31, Y+5	; 0x05
    3442:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    3448:	59 81       	ldd	r21, Y+1	; 0x01
    344a:	58 87       	std	Y+8, r21	; 0x08
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	88 87       	std	Y+8, r24	; 0x08
    3452:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    3454:	28 96       	adiw	r28, 0x08	; 8
    3456:	0f b6       	in	r0, 0x3f	; 63
    3458:	f8 94       	cli
    345a:	de bf       	out	0x3e, r29	; 62
    345c:	0f be       	out	0x3f, r0	; 63
    345e:	cd bf       	out	0x3d, r28	; 61
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	08 95       	ret

00003466 <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	00 d0       	rcall	.+0      	; 0x346c <DIO_enuTogglePinValue+0x6>
    346c:	00 d0       	rcall	.+0      	; 0x346e <DIO_enuTogglePinValue+0x8>
    346e:	00 d0       	rcall	.+0      	; 0x3470 <DIO_enuTogglePinValue+0xa>
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    3474:	8a 83       	std	Y+2, r24	; 0x02
    3476:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3478:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    347a:	8a 81       	ldd	r24, Y+2	; 0x02
    347c:	84 30       	cpi	r24, 0x04	; 4
    347e:	08 f0       	brcs	.+2      	; 0x3482 <DIO_enuTogglePinValue+0x1c>
    3480:	77 c0       	rjmp	.+238    	; 0x3570 <DIO_enuTogglePinValue+0x10a>
    3482:	8b 81       	ldd	r24, Y+3	; 0x03
    3484:	88 30       	cpi	r24, 0x08	; 8
    3486:	08 f0       	brcs	.+2      	; 0x348a <DIO_enuTogglePinValue+0x24>
    3488:	73 c0       	rjmp	.+230    	; 0x3570 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	3e 83       	std	Y+6, r19	; 0x06
    3492:	2d 83       	std	Y+5, r18	; 0x05
    3494:	8d 81       	ldd	r24, Y+5	; 0x05
    3496:	9e 81       	ldd	r25, Y+6	; 0x06
    3498:	81 30       	cpi	r24, 0x01	; 1
    349a:	91 05       	cpc	r25, r1
    349c:	49 f1       	breq	.+82     	; 0x34f0 <DIO_enuTogglePinValue+0x8a>
    349e:	2d 81       	ldd	r18, Y+5	; 0x05
    34a0:	3e 81       	ldd	r19, Y+6	; 0x06
    34a2:	22 30       	cpi	r18, 0x02	; 2
    34a4:	31 05       	cpc	r19, r1
    34a6:	2c f4       	brge	.+10     	; 0x34b2 <DIO_enuTogglePinValue+0x4c>
    34a8:	8d 81       	ldd	r24, Y+5	; 0x05
    34aa:	9e 81       	ldd	r25, Y+6	; 0x06
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	61 f0       	breq	.+24     	; 0x34c8 <DIO_enuTogglePinValue+0x62>
    34b0:	5a c0       	rjmp	.+180    	; 0x3566 <DIO_enuTogglePinValue+0x100>
    34b2:	2d 81       	ldd	r18, Y+5	; 0x05
    34b4:	3e 81       	ldd	r19, Y+6	; 0x06
    34b6:	22 30       	cpi	r18, 0x02	; 2
    34b8:	31 05       	cpc	r19, r1
    34ba:	71 f1       	breq	.+92     	; 0x3518 <DIO_enuTogglePinValue+0xb2>
    34bc:	8d 81       	ldd	r24, Y+5	; 0x05
    34be:	9e 81       	ldd	r25, Y+6	; 0x06
    34c0:	83 30       	cpi	r24, 0x03	; 3
    34c2:	91 05       	cpc	r25, r1
    34c4:	e9 f1       	breq	.+122    	; 0x3540 <DIO_enuTogglePinValue+0xda>
    34c6:	4f c0       	rjmp	.+158    	; 0x3566 <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    34c8:	ab e3       	ldi	r26, 0x3B	; 59
    34ca:	b0 e0       	ldi	r27, 0x00	; 0
    34cc:	eb e3       	ldi	r30, 0x3B	; 59
    34ce:	f0 e0       	ldi	r31, 0x00	; 0
    34d0:	80 81       	ld	r24, Z
    34d2:	48 2f       	mov	r20, r24
    34d4:	8b 81       	ldd	r24, Y+3	; 0x03
    34d6:	28 2f       	mov	r18, r24
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	02 2e       	mov	r0, r18
    34e0:	02 c0       	rjmp	.+4      	; 0x34e6 <DIO_enuTogglePinValue+0x80>
    34e2:	88 0f       	add	r24, r24
    34e4:	99 1f       	adc	r25, r25
    34e6:	0a 94       	dec	r0
    34e8:	e2 f7       	brpl	.-8      	; 0x34e2 <DIO_enuTogglePinValue+0x7c>
    34ea:	84 27       	eor	r24, r20
    34ec:	8c 93       	st	X, r24
    34ee:	3b c0       	rjmp	.+118    	; 0x3566 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    34f0:	a8 e3       	ldi	r26, 0x38	; 56
    34f2:	b0 e0       	ldi	r27, 0x00	; 0
    34f4:	e8 e3       	ldi	r30, 0x38	; 56
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	48 2f       	mov	r20, r24
    34fc:	8b 81       	ldd	r24, Y+3	; 0x03
    34fe:	28 2f       	mov	r18, r24
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	02 2e       	mov	r0, r18
    3508:	02 c0       	rjmp	.+4      	; 0x350e <DIO_enuTogglePinValue+0xa8>
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	0a 94       	dec	r0
    3510:	e2 f7       	brpl	.-8      	; 0x350a <DIO_enuTogglePinValue+0xa4>
    3512:	84 27       	eor	r24, r20
    3514:	8c 93       	st	X, r24
    3516:	27 c0       	rjmp	.+78     	; 0x3566 <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    3518:	a5 e3       	ldi	r26, 0x35	; 53
    351a:	b0 e0       	ldi	r27, 0x00	; 0
    351c:	e5 e3       	ldi	r30, 0x35	; 53
    351e:	f0 e0       	ldi	r31, 0x00	; 0
    3520:	80 81       	ld	r24, Z
    3522:	48 2f       	mov	r20, r24
    3524:	8b 81       	ldd	r24, Y+3	; 0x03
    3526:	28 2f       	mov	r18, r24
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	81 e0       	ldi	r24, 0x01	; 1
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	02 2e       	mov	r0, r18
    3530:	02 c0       	rjmp	.+4      	; 0x3536 <DIO_enuTogglePinValue+0xd0>
    3532:	88 0f       	add	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	0a 94       	dec	r0
    3538:	e2 f7       	brpl	.-8      	; 0x3532 <DIO_enuTogglePinValue+0xcc>
    353a:	84 27       	eor	r24, r20
    353c:	8c 93       	st	X, r24
    353e:	13 c0       	rjmp	.+38     	; 0x3566 <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    3540:	a2 e3       	ldi	r26, 0x32	; 50
    3542:	b0 e0       	ldi	r27, 0x00	; 0
    3544:	e2 e3       	ldi	r30, 0x32	; 50
    3546:	f0 e0       	ldi	r31, 0x00	; 0
    3548:	80 81       	ld	r24, Z
    354a:	48 2f       	mov	r20, r24
    354c:	8b 81       	ldd	r24, Y+3	; 0x03
    354e:	28 2f       	mov	r18, r24
    3550:	30 e0       	ldi	r19, 0x00	; 0
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	02 2e       	mov	r0, r18
    3558:	02 c0       	rjmp	.+4      	; 0x355e <DIO_enuTogglePinValue+0xf8>
    355a:	88 0f       	add	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	0a 94       	dec	r0
    3560:	e2 f7       	brpl	.-8      	; 0x355a <DIO_enuTogglePinValue+0xf4>
    3562:	84 27       	eor	r24, r20
    3564:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    356a:	99 81       	ldd	r25, Y+1	; 0x01
    356c:	9c 83       	std	Y+4, r25	; 0x04
    356e:	02 c0       	rjmp	.+4      	; 0x3574 <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    3570:	29 81       	ldd	r18, Y+1	; 0x01
    3572:	2c 83       	std	Y+4, r18	; 0x04
    3574:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    3576:	26 96       	adiw	r28, 0x06	; 6
    3578:	0f b6       	in	r0, 0x3f	; 63
    357a:	f8 94       	cli
    357c:	de bf       	out	0x3e, r29	; 62
    357e:	0f be       	out	0x3f, r0	; 63
    3580:	cd bf       	out	0x3d, r28	; 61
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	00 d0       	rcall	.+0      	; 0x358e <DIO_enuSetPortDirection+0x6>
    358e:	00 d0       	rcall	.+0      	; 0x3590 <DIO_enuSetPortDirection+0x8>
    3590:	00 d0       	rcall	.+0      	; 0x3592 <DIO_enuSetPortDirection+0xa>
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
    3596:	8a 83       	std	Y+2, r24	; 0x02
    3598:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    359a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    359c:	8a 81       	ldd	r24, Y+2	; 0x02
    359e:	84 30       	cpi	r24, 0x04	; 4
    35a0:	08 f0       	brcs	.+2      	; 0x35a4 <DIO_enuSetPortDirection+0x1c>
    35a2:	57 c0       	rjmp	.+174    	; 0x3652 <DIO_enuSetPortDirection+0xca>
    35a4:	8b 81       	ldd	r24, Y+3	; 0x03
    35a6:	82 30       	cpi	r24, 0x02	; 2
    35a8:	08 f0       	brcs	.+2      	; 0x35ac <DIO_enuSetPortDirection+0x24>
    35aa:	53 c0       	rjmp	.+166    	; 0x3652 <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    35ac:	8a 81       	ldd	r24, Y+2	; 0x02
    35ae:	28 2f       	mov	r18, r24
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	3e 83       	std	Y+6, r19	; 0x06
    35b4:	2d 83       	std	Y+5, r18	; 0x05
    35b6:	8d 81       	ldd	r24, Y+5	; 0x05
    35b8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ba:	81 30       	cpi	r24, 0x01	; 1
    35bc:	91 05       	cpc	r25, r1
    35be:	09 f1       	breq	.+66     	; 0x3602 <DIO_enuSetPortDirection+0x7a>
    35c0:	2d 81       	ldd	r18, Y+5	; 0x05
    35c2:	3e 81       	ldd	r19, Y+6	; 0x06
    35c4:	22 30       	cpi	r18, 0x02	; 2
    35c6:	31 05       	cpc	r19, r1
    35c8:	2c f4       	brge	.+10     	; 0x35d4 <DIO_enuSetPortDirection+0x4c>
    35ca:	8d 81       	ldd	r24, Y+5	; 0x05
    35cc:	9e 81       	ldd	r25, Y+6	; 0x06
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	61 f0       	breq	.+24     	; 0x35ea <DIO_enuSetPortDirection+0x62>
    35d2:	3a c0       	rjmp	.+116    	; 0x3648 <DIO_enuSetPortDirection+0xc0>
    35d4:	2d 81       	ldd	r18, Y+5	; 0x05
    35d6:	3e 81       	ldd	r19, Y+6	; 0x06
    35d8:	22 30       	cpi	r18, 0x02	; 2
    35da:	31 05       	cpc	r19, r1
    35dc:	f1 f0       	breq	.+60     	; 0x361a <DIO_enuSetPortDirection+0x92>
    35de:	8d 81       	ldd	r24, Y+5	; 0x05
    35e0:	9e 81       	ldd	r25, Y+6	; 0x06
    35e2:	83 30       	cpi	r24, 0x03	; 3
    35e4:	91 05       	cpc	r25, r1
    35e6:	29 f1       	breq	.+74     	; 0x3632 <DIO_enuSetPortDirection+0xaa>
    35e8:	2f c0       	rjmp	.+94     	; 0x3648 <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    35ea:	8b 81       	ldd	r24, Y+3	; 0x03
    35ec:	81 30       	cpi	r24, 0x01	; 1
    35ee:	29 f4       	brne	.+10     	; 0x35fa <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    35f0:	ea e3       	ldi	r30, 0x3A	; 58
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	8f ef       	ldi	r24, 0xFF	; 255
    35f6:	80 83       	st	Z, r24
    35f8:	27 c0       	rjmp	.+78     	; 0x3648 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    35fa:	ea e3       	ldi	r30, 0x3A	; 58
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	10 82       	st	Z, r1
    3600:	23 c0       	rjmp	.+70     	; 0x3648 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    3602:	8b 81       	ldd	r24, Y+3	; 0x03
    3604:	81 30       	cpi	r24, 0x01	; 1
    3606:	29 f4       	brne	.+10     	; 0x3612 <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    3608:	e7 e3       	ldi	r30, 0x37	; 55
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	8f ef       	ldi	r24, 0xFF	; 255
    360e:	80 83       	st	Z, r24
    3610:	1b c0       	rjmp	.+54     	; 0x3648 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    3612:	e7 e3       	ldi	r30, 0x37	; 55
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	10 82       	st	Z, r1
    3618:	17 c0       	rjmp	.+46     	; 0x3648 <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    361a:	8b 81       	ldd	r24, Y+3	; 0x03
    361c:	81 30       	cpi	r24, 0x01	; 1
    361e:	29 f4       	brne	.+10     	; 0x362a <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    3620:	e4 e3       	ldi	r30, 0x34	; 52
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	8f ef       	ldi	r24, 0xFF	; 255
    3626:	80 83       	st	Z, r24
    3628:	0f c0       	rjmp	.+30     	; 0x3648 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    362a:	e4 e3       	ldi	r30, 0x34	; 52
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	10 82       	st	Z, r1
    3630:	0b c0       	rjmp	.+22     	; 0x3648 <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    3632:	8b 81       	ldd	r24, Y+3	; 0x03
    3634:	81 30       	cpi	r24, 0x01	; 1
    3636:	29 f4       	brne	.+10     	; 0x3642 <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    3638:	e1 e3       	ldi	r30, 0x31	; 49
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	8f ef       	ldi	r24, 0xFF	; 255
    363e:	80 83       	st	Z, r24
    3640:	03 c0       	rjmp	.+6      	; 0x3648 <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    3642:	e1 e3       	ldi	r30, 0x31	; 49
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    364c:	99 81       	ldd	r25, Y+1	; 0x01
    364e:	9c 83       	std	Y+4, r25	; 0x04
    3650:	02 c0       	rjmp	.+4      	; 0x3656 <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    3652:	29 81       	ldd	r18, Y+1	; 0x01
    3654:	2c 83       	std	Y+4, r18	; 0x04
    3656:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    3658:	26 96       	adiw	r28, 0x06	; 6
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	cf 91       	pop	r28
    3666:	df 91       	pop	r29
    3668:	08 95       	ret

0000366a <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    366a:	df 93       	push	r29
    366c:	cf 93       	push	r28
    366e:	00 d0       	rcall	.+0      	; 0x3670 <DIO_enuSetPortValue+0x6>
    3670:	00 d0       	rcall	.+0      	; 0x3672 <DIO_enuSetPortValue+0x8>
    3672:	00 d0       	rcall	.+0      	; 0x3674 <DIO_enuSetPortValue+0xa>
    3674:	cd b7       	in	r28, 0x3d	; 61
    3676:	de b7       	in	r29, 0x3e	; 62
    3678:	8a 83       	std	Y+2, r24	; 0x02
    367a:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    367c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    367e:	8a 81       	ldd	r24, Y+2	; 0x02
    3680:	84 30       	cpi	r24, 0x04	; 4
    3682:	08 f0       	brcs	.+2      	; 0x3686 <DIO_enuSetPortValue+0x1c>
    3684:	57 c0       	rjmp	.+174    	; 0x3734 <DIO_enuSetPortValue+0xca>
    3686:	8b 81       	ldd	r24, Y+3	; 0x03
    3688:	82 30       	cpi	r24, 0x02	; 2
    368a:	08 f0       	brcs	.+2      	; 0x368e <DIO_enuSetPortValue+0x24>
    368c:	53 c0       	rjmp	.+166    	; 0x3734 <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    368e:	8a 81       	ldd	r24, Y+2	; 0x02
    3690:	28 2f       	mov	r18, r24
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	3e 83       	std	Y+6, r19	; 0x06
    3696:	2d 83       	std	Y+5, r18	; 0x05
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	81 30       	cpi	r24, 0x01	; 1
    369e:	91 05       	cpc	r25, r1
    36a0:	09 f1       	breq	.+66     	; 0x36e4 <DIO_enuSetPortValue+0x7a>
    36a2:	2d 81       	ldd	r18, Y+5	; 0x05
    36a4:	3e 81       	ldd	r19, Y+6	; 0x06
    36a6:	22 30       	cpi	r18, 0x02	; 2
    36a8:	31 05       	cpc	r19, r1
    36aa:	2c f4       	brge	.+10     	; 0x36b6 <DIO_enuSetPortValue+0x4c>
    36ac:	8d 81       	ldd	r24, Y+5	; 0x05
    36ae:	9e 81       	ldd	r25, Y+6	; 0x06
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	61 f0       	breq	.+24     	; 0x36cc <DIO_enuSetPortValue+0x62>
    36b4:	3a c0       	rjmp	.+116    	; 0x372a <DIO_enuSetPortValue+0xc0>
    36b6:	2d 81       	ldd	r18, Y+5	; 0x05
    36b8:	3e 81       	ldd	r19, Y+6	; 0x06
    36ba:	22 30       	cpi	r18, 0x02	; 2
    36bc:	31 05       	cpc	r19, r1
    36be:	f1 f0       	breq	.+60     	; 0x36fc <DIO_enuSetPortValue+0x92>
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	9e 81       	ldd	r25, Y+6	; 0x06
    36c4:	83 30       	cpi	r24, 0x03	; 3
    36c6:	91 05       	cpc	r25, r1
    36c8:	29 f1       	breq	.+74     	; 0x3714 <DIO_enuSetPortValue+0xaa>
    36ca:	2f c0       	rjmp	.+94     	; 0x372a <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	88 23       	and	r24, r24
    36d0:	29 f0       	breq	.+10     	; 0x36dc <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    36d2:	eb e3       	ldi	r30, 0x3B	; 59
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	8f ef       	ldi	r24, 0xFF	; 255
    36d8:	80 83       	st	Z, r24
    36da:	27 c0       	rjmp	.+78     	; 0x372a <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    36dc:	eb e3       	ldi	r30, 0x3B	; 59
    36de:	f0 e0       	ldi	r31, 0x00	; 0
    36e0:	10 82       	st	Z, r1
    36e2:	23 c0       	rjmp	.+70     	; 0x372a <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	88 23       	and	r24, r24
    36e8:	29 f0       	breq	.+10     	; 0x36f4 <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    36ea:	e8 e3       	ldi	r30, 0x38	; 56
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	8f ef       	ldi	r24, 0xFF	; 255
    36f0:	80 83       	st	Z, r24
    36f2:	1b c0       	rjmp	.+54     	; 0x372a <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    36f4:	e8 e3       	ldi	r30, 0x38	; 56
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	10 82       	st	Z, r1
    36fa:	17 c0       	rjmp	.+46     	; 0x372a <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    36fc:	8b 81       	ldd	r24, Y+3	; 0x03
    36fe:	88 23       	and	r24, r24
    3700:	29 f0       	breq	.+10     	; 0x370c <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    3702:	e5 e3       	ldi	r30, 0x35	; 53
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	8f ef       	ldi	r24, 0xFF	; 255
    3708:	80 83       	st	Z, r24
    370a:	0f c0       	rjmp	.+30     	; 0x372a <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    370c:	e5 e3       	ldi	r30, 0x35	; 53
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	10 82       	st	Z, r1
    3712:	0b c0       	rjmp	.+22     	; 0x372a <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    3714:	8b 81       	ldd	r24, Y+3	; 0x03
    3716:	88 23       	and	r24, r24
    3718:	29 f0       	breq	.+10     	; 0x3724 <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    371a:	e2 e3       	ldi	r30, 0x32	; 50
    371c:	f0 e0       	ldi	r31, 0x00	; 0
    371e:	8f ef       	ldi	r24, 0xFF	; 255
    3720:	80 83       	st	Z, r24
    3722:	03 c0       	rjmp	.+6      	; 0x372a <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    3724:	e2 e3       	ldi	r30, 0x32	; 50
    3726:	f0 e0       	ldi	r31, 0x00	; 0
    3728:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    372e:	99 81       	ldd	r25, Y+1	; 0x01
    3730:	9c 83       	std	Y+4, r25	; 0x04
    3732:	02 c0       	rjmp	.+4      	; 0x3738 <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    3734:	29 81       	ldd	r18, Y+1	; 0x01
    3736:	2c 83       	std	Y+4, r18	; 0x04
    3738:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    373a:	26 96       	adiw	r28, 0x06	; 6
    373c:	0f b6       	in	r0, 0x3f	; 63
    373e:	f8 94       	cli
    3740:	de bf       	out	0x3e, r29	; 62
    3742:	0f be       	out	0x3f, r0	; 63
    3744:	cd bf       	out	0x3d, r28	; 61
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <ADC_enuInit>:


static void (*ADC_CallBackFunction)(void) = NULL;


void ADC_enuInit(){
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	cd b7       	in	r28, 0x3d	; 61
    3752:	de b7       	in	r29, 0x3e	; 62
    3754:	2e 97       	sbiw	r28, 0x0e	; 14
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
	 * 5. Enabling ADC
	 * */


	/*************************** Selecting  voltage reference ***************************/
		ADMUX_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    3760:	a7 e2       	ldi	r26, 0x27	; 39
    3762:	b0 e0       	ldi	r27, 0x00	; 0
    3764:	e7 e2       	ldi	r30, 0x27	; 39
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
    376a:	8f 71       	andi	r24, 0x1F	; 31
    376c:	8c 93       	st	X, r24
		ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
    376e:	a7 e2       	ldi	r26, 0x27	; 39
    3770:	b0 e0       	ldi	r27, 0x00	; 0
    3772:	e7 e2       	ldi	r30, 0x27	; 39
    3774:	f0 e0       	ldi	r31, 0x00	; 0
    3776:	80 81       	ld	r24, Z
    3778:	80 64       	ori	r24, 0x40	; 64
    377a:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************** Selecting ADC MODE ********************************/
		#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
			SET_BIT(ADCSRA_REG, ADCSRA_ADATE);
    377c:	a6 e2       	ldi	r26, 0x26	; 38
    377e:	b0 e0       	ldi	r27, 0x00	; 0
    3780:	e6 e2       	ldi	r30, 0x26	; 38
    3782:	f0 e0       	ldi	r31, 0x00	; 0
    3784:	80 81       	ld	r24, Z
    3786:	80 62       	ori	r24, 0x20	; 32
    3788:	8c 93       	st	X, r24

			SFIOR_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    378a:	a0 e5       	ldi	r26, 0x50	; 80
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	e0 e5       	ldi	r30, 0x50	; 80
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	80 81       	ld	r24, Z
    3794:	8f 71       	andi	r24, 0x1F	; 31
    3796:	8c 93       	st	X, r24
			SFIOR_REG |= ADC_AUTO_TRIG_SRCE_SELECTOR;
    3798:	a0 e5       	ldi	r26, 0x50	; 80
    379a:	b0 e0       	ldi	r27, 0x00	; 0
    379c:	e0 e5       	ldi	r30, 0x50	; 80
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	80 81       	ld	r24, Z
    37a2:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* Selecting Adjustment *******************************/
		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			CLR_BIT(ADMUX_REG, ADMUX_ADLAR);
    37a4:	a7 e2       	ldi	r26, 0x27	; 39
    37a6:	b0 e0       	ldi	r27, 0x00	; 0
    37a8:	e7 e2       	ldi	r30, 0x27	; 39
    37aa:	f0 e0       	ldi	r31, 0x00	; 0
    37ac:	80 81       	ld	r24, Z
    37ae:	8f 7d       	andi	r24, 0xDF	; 223
    37b0:	8c 93       	st	X, r24
	/***************************** Clearing  Interrupt Flag *****************************/
		//! Notice: that ADIF to be cleared we write logical one (from data sheet)
		//So in initialization of ADC we write 1 to ADIF bit to make sure that the
		//flag is cleared in order to make sure that ADC ready for upcoming conversation
		// clearing interrupt flag
		SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    37b2:	a6 e2       	ldi	r26, 0x26	; 38
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	e6 e2       	ldi	r30, 0x26	; 38
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	80 81       	ld	r24, Z
    37bc:	80 61       	ori	r24, 0x10	; 16
    37be:	8c 93       	st	X, r24
	/************************************************************************************/


	/*********************************** Enabling ADC ***********************************/
		SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    37c0:	a6 e2       	ldi	r26, 0x26	; 38
    37c2:	b0 e0       	ldi	r27, 0x00	; 0
    37c4:	e6 e2       	ldi	r30, 0x26	; 38
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
    37ca:	80 68       	ori	r24, 0x80	; 128
    37cc:	8c 93       	st	X, r24
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	a8 e4       	ldi	r26, 0x48	; 72
    37d4:	b3 e4       	ldi	r27, 0x43	; 67
    37d6:	8b 87       	std	Y+11, r24	; 0x0b
    37d8:	9c 87       	std	Y+12, r25	; 0x0c
    37da:	ad 87       	std	Y+13, r26	; 0x0d
    37dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37de:	6b 85       	ldd	r22, Y+11	; 0x0b
    37e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	4a e7       	ldi	r20, 0x7A	; 122
    37ec:	55 e4       	ldi	r21, 0x45	; 69
    37ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f2:	dc 01       	movw	r26, r24
    37f4:	cb 01       	movw	r24, r22
    37f6:	8f 83       	std	Y+7, r24	; 0x07
    37f8:	98 87       	std	Y+8, r25	; 0x08
    37fa:	a9 87       	std	Y+9, r26	; 0x09
    37fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3800:	78 85       	ldd	r23, Y+8	; 0x08
    3802:	89 85       	ldd	r24, Y+9	; 0x09
    3804:	9a 85       	ldd	r25, Y+10	; 0x0a
    3806:	20 e0       	ldi	r18, 0x00	; 0
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	40 e8       	ldi	r20, 0x80	; 128
    380c:	5f e3       	ldi	r21, 0x3F	; 63
    380e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3812:	88 23       	and	r24, r24
    3814:	2c f4       	brge	.+10     	; 0x3820 <ADC_enuInit+0xd4>
		__ticks = 1;
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	9e 83       	std	Y+6, r25	; 0x06
    381c:	8d 83       	std	Y+5, r24	; 0x05
    381e:	3f c0       	rjmp	.+126    	; 0x389e <ADC_enuInit+0x152>
	else if (__tmp > 65535)
    3820:	6f 81       	ldd	r22, Y+7	; 0x07
    3822:	78 85       	ldd	r23, Y+8	; 0x08
    3824:	89 85       	ldd	r24, Y+9	; 0x09
    3826:	9a 85       	ldd	r25, Y+10	; 0x0a
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	3f ef       	ldi	r19, 0xFF	; 255
    382c:	4f e7       	ldi	r20, 0x7F	; 127
    382e:	57 e4       	ldi	r21, 0x47	; 71
    3830:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3834:	18 16       	cp	r1, r24
    3836:	4c f5       	brge	.+82     	; 0x388a <ADC_enuInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3838:	6b 85       	ldd	r22, Y+11	; 0x0b
    383a:	7c 85       	ldd	r23, Y+12	; 0x0c
    383c:	8d 85       	ldd	r24, Y+13	; 0x0d
    383e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	40 e2       	ldi	r20, 0x20	; 32
    3846:	51 e4       	ldi	r21, 0x41	; 65
    3848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    384c:	dc 01       	movw	r26, r24
    384e:	cb 01       	movw	r24, r22
    3850:	bc 01       	movw	r22, r24
    3852:	cd 01       	movw	r24, r26
    3854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	9e 83       	std	Y+6, r25	; 0x06
    385e:	8d 83       	std	Y+5, r24	; 0x05
    3860:	0f c0       	rjmp	.+30     	; 0x3880 <ADC_enuInit+0x134>
    3862:	80 e9       	ldi	r24, 0x90	; 144
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	9c 83       	std	Y+4, r25	; 0x04
    3868:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    386a:	8b 81       	ldd	r24, Y+3	; 0x03
    386c:	9c 81       	ldd	r25, Y+4	; 0x04
    386e:	01 97       	sbiw	r24, 0x01	; 1
    3870:	f1 f7       	brne	.-4      	; 0x386e <ADC_enuInit+0x122>
    3872:	9c 83       	std	Y+4, r25	; 0x04
    3874:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3876:	8d 81       	ldd	r24, Y+5	; 0x05
    3878:	9e 81       	ldd	r25, Y+6	; 0x06
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	9e 83       	std	Y+6, r25	; 0x06
    387e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3880:	8d 81       	ldd	r24, Y+5	; 0x05
    3882:	9e 81       	ldd	r25, Y+6	; 0x06
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	69 f7       	brne	.-38     	; 0x3862 <ADC_enuInit+0x116>
    3888:	14 c0       	rjmp	.+40     	; 0x38b2 <ADC_enuInit+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388a:	6f 81       	ldd	r22, Y+7	; 0x07
    388c:	78 85       	ldd	r23, Y+8	; 0x08
    388e:	89 85       	ldd	r24, Y+9	; 0x09
    3890:	9a 85       	ldd	r25, Y+10	; 0x0a
    3892:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3896:	dc 01       	movw	r26, r24
    3898:	cb 01       	movw	r24, r22
    389a:	9e 83       	std	Y+6, r25	; 0x06
    389c:	8d 83       	std	Y+5, r24	; 0x05
    389e:	8d 81       	ldd	r24, Y+5	; 0x05
    38a0:	9e 81       	ldd	r25, Y+6	; 0x06
    38a2:	9a 83       	std	Y+2, r25	; 0x02
    38a4:	89 83       	std	Y+1, r24	; 0x01
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	9a 81       	ldd	r25, Y+2	; 0x02
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	f1 f7       	brne	.-4      	; 0x38aa <ADC_enuInit+0x15e>
    38ae:	9a 83       	std	Y+2, r25	; 0x02
    38b0:	89 83       	std	Y+1, r24	; 0x01


	// Waiting until ADC is stablized
	_delay_ms(200);

}
    38b2:	2e 96       	adiw	r28, 0x0e	; 14
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	de bf       	out	0x3e, r29	; 62
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	cd bf       	out	0x3d, r28	; 61
    38be:	cf 91       	pop	r28
    38c0:	df 91       	pop	r29
    38c2:	08 95       	ret

000038c4 <ADC_enuStartConversion>:




ErrorStatus_t ADC_enuStartConversion(ADC_Channel_types ADC_channel_N){
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	00 d0       	rcall	.+0      	; 0x38ca <ADC_enuStartConversion+0x6>
    38ca:	cd b7       	in	r28, 0x3d	; 61
    38cc:	de b7       	in	r29, 0x3e	; 62
    38ce:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    38d0:	19 82       	std	Y+1, r1	; 0x01


	/******************************** Select ADC Channel ********************************/
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_clr_msk;
    38d2:	a7 e2       	ldi	r26, 0x27	; 39
    38d4:	b0 e0       	ldi	r27, 0x00	; 0
    38d6:	e7 e2       	ldi	r30, 0x27	; 39
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	80 81       	ld	r24, Z
    38dc:	80 7e       	andi	r24, 0xE0	; 224
    38de:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_channel_N;
    38e0:	a7 e2       	ldi	r26, 0x27	; 39
    38e2:	b0 e0       	ldi	r27, 0x00	; 0
    38e4:	e7 e2       	ldi	r30, 0x27	; 39
    38e6:	f0 e0       	ldi	r31, 0x00	; 0
    38e8:	90 81       	ld	r25, Z
    38ea:	8a 81       	ldd	r24, Y+2	; 0x02
    38ec:	89 2b       	or	r24, r25
    38ee:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* ADC Start Conversion *******************************/
	//!!!!!!!!!!!!!!
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    38f0:	a6 e2       	ldi	r26, 0x26	; 38
    38f2:	b0 e0       	ldi	r27, 0x00	; 0
    38f4:	e6 e2       	ldi	r30, 0x26	; 38
    38f6:	f0 e0       	ldi	r31, 0x00	; 0
    38f8:	80 81       	ld	r24, Z
    38fa:	80 64       	ori	r24, 0x40	; 64
    38fc:	8c 93       	st	X, r24
	/************************************************************************************/

	return Local_enuErrrorState;
    38fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	cf 91       	pop	r28
    3906:	df 91       	pop	r29
    3908:	08 95       	ret

0000390a <ADC_GetResult>:



uint16 ADC_GetResult(){
    390a:	df 93       	push	r29
    390c:	cf 93       	push	r28
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
			Copy_u16ReadValue |= ((uint16)ADCH_REG<<2);
			return Copy_u16ReadValue;
		#endif

		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			return ADCLH_REG;
    3912:	e4 e2       	ldi	r30, 0x24	; 36
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	80 81       	ld	r24, Z
    3918:	91 81       	ldd	r25, Z+1	; 0x01





}
    391a:	cf 91       	pop	r28
    391c:	df 91       	pop	r29
    391e:	08 95       	ret

00003920 <ADC_enuSetCallBack>:




ErrorStatus_t ADC_enuSetCallBack(void(*Copy_pfunAppFun)(void)){
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	00 d0       	rcall	.+0      	; 0x3926 <ADC_enuSetCallBack+0x6>
    3926:	00 d0       	rcall	.+0      	; 0x3928 <ADC_enuSetCallBack+0x8>
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
    392c:	9b 83       	std	Y+3, r25	; 0x03
    392e:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3930:	19 82       	std	Y+1, r1	; 0x01

//	if(Copy_pfunAppFun == NULL ||  Copy_u8IntNumber> IN)

	if(Copy_pfunAppFun == NULL){
    3932:	8a 81       	ldd	r24, Y+2	; 0x02
    3934:	9b 81       	ldd	r25, Y+3	; 0x03
    3936:	00 97       	sbiw	r24, 0x00	; 0
    3938:	19 f4       	brne	.+6      	; 0x3940 <ADC_enuSetCallBack+0x20>

		return Local_enuErrrorState;
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	8c 83       	std	Y+4, r24	; 0x04
    393e:	0a c0       	rjmp	.+20     	; 0x3954 <ADC_enuSetCallBack+0x34>
	}

	else{
		Local_enuErrrorState = ERROR_STATUS_OK;
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	89 83       	std	Y+1, r24	; 0x01

		ADC_CallBackFunction = Copy_pfunAppFun;
    3944:	8a 81       	ldd	r24, Y+2	; 0x02
    3946:	9b 81       	ldd	r25, Y+3	; 0x03
    3948:	90 93 a3 01 	sts	0x01A3, r25
    394c:	80 93 a2 01 	sts	0x01A2, r24

	}



	return Local_enuErrrorState;
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	8c 83       	std	Y+4, r24	; 0x04
    3954:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
    395a:	0f 90       	pop	r0
    395c:	0f 90       	pop	r0
    395e:	cf 91       	pop	r28
    3960:	df 91       	pop	r29
    3962:	08 95       	ret

00003964 <__vector_16>:

ISR(__vector_16){
    3964:	1f 92       	push	r1
    3966:	0f 92       	push	r0
    3968:	0f b6       	in	r0, 0x3f	; 63
    396a:	0f 92       	push	r0
    396c:	11 24       	eor	r1, r1
    396e:	2f 93       	push	r18
    3970:	3f 93       	push	r19
    3972:	4f 93       	push	r20
    3974:	5f 93       	push	r21
    3976:	6f 93       	push	r22
    3978:	7f 93       	push	r23
    397a:	8f 93       	push	r24
    397c:	9f 93       	push	r25
    397e:	af 93       	push	r26
    3980:	bf 93       	push	r27
    3982:	ef 93       	push	r30
    3984:	ff 93       	push	r31
    3986:	df 93       	push	r29
    3988:	cf 93       	push	r28
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CallBackFunction != NULL){
    398e:	80 91 a2 01 	lds	r24, 0x01A2
    3992:	90 91 a3 01 	lds	r25, 0x01A3
    3996:	00 97       	sbiw	r24, 0x00	; 0
    3998:	29 f0       	breq	.+10     	; 0x39a4 <__vector_16+0x40>
		ADC_CallBackFunction();
    399a:	e0 91 a2 01 	lds	r30, 0x01A2
    399e:	f0 91 a3 01 	lds	r31, 0x01A3
    39a2:	09 95       	icall
	}

}
    39a4:	cf 91       	pop	r28
    39a6:	df 91       	pop	r29
    39a8:	ff 91       	pop	r31
    39aa:	ef 91       	pop	r30
    39ac:	bf 91       	pop	r27
    39ae:	af 91       	pop	r26
    39b0:	9f 91       	pop	r25
    39b2:	8f 91       	pop	r24
    39b4:	7f 91       	pop	r23
    39b6:	6f 91       	pop	r22
    39b8:	5f 91       	pop	r21
    39ba:	4f 91       	pop	r20
    39bc:	3f 91       	pop	r19
    39be:	2f 91       	pop	r18
    39c0:	0f 90       	pop	r0
    39c2:	0f be       	out	0x3f, r0	; 63
    39c4:	0f 90       	pop	r0
    39c6:	1f 90       	pop	r1
    39c8:	18 95       	reti

000039ca <ultraSonic_enuInit>:
#include "ultraSonic_interface.h"
/*****************************************************************/



ErrorStatus_t ultraSonic_enuInit(ultraSonic_t ultraSonic_Instance){
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	cd b7       	in	r28, 0x3d	; 61
    39d0:	de b7       	in	r29, 0x3e	; 62
    39d2:	28 97       	sbiw	r28, 0x08	; 8
    39d4:	0f b6       	in	r0, 0x3f	; 63
    39d6:	f8 94       	cli
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	0f be       	out	0x3f, r0	; 63
    39dc:	cd bf       	out	0x3d, r28	; 61
    39de:	4a 83       	std	Y+2, r20	; 0x02
    39e0:	5b 83       	std	Y+3, r21	; 0x03
    39e2:	6c 83       	std	Y+4, r22	; 0x04
    39e4:	7d 83       	std	Y+5, r23	; 0x05
    39e6:	8e 83       	std	Y+6, r24	; 0x06
    39e8:	9f 83       	std	Y+7, r25	; 0x07
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    39ea:	19 82       	std	Y+1, r1	; 0x01



    if (ultraSonic_Instance.ECHO_PORT < DIO_u8PortA ||
    39ec:	8a 81       	ldd	r24, Y+2	; 0x02
    39ee:	84 30       	cpi	r24, 0x04	; 4
    39f0:	18 f4       	brcc	.+6      	; 0x39f8 <ultraSonic_enuInit+0x2e>
    39f2:	8b 81       	ldd	r24, Y+3	; 0x03
    39f4:	88 30       	cpi	r24, 0x08	; 8
    39f6:	18 f0       	brcs	.+6      	; 0x39fe <ultraSonic_enuInit+0x34>
    	ultraSonic_Instance.ECHO_PORT > DIO_u8PortD ||
        ultraSonic_Instance.ECHO_PIN < DIO_u8PIN0 || ultraSonic_Instance.ECHO_PIN > DIO_u8PIN7) {

    	return Local_enuErrrorState;  // Return failure if the ECHO_PORT or ECHO_PIN are invalid
    39f8:	89 81       	ldd	r24, Y+1	; 0x01
    39fa:	88 87       	std	Y+8, r24	; 0x08
    39fc:	14 c0       	rjmp	.+40     	; 0x3a26 <ultraSonic_enuInit+0x5c>

    } else {

    	Timer1_SetupForTimeMeasurement(8);
    39fe:	88 e0       	ldi	r24, 0x08	; 8
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	0e 94 49 0b 	call	0x1692	; 0x1692 <Timer1_SetupForTimeMeasurement>
    	DIO_enuSetPinDirection(ultraSonic_Instance.ECHO_PORT, ultraSonic_Instance.ECHO_PIN, DIO_u8INPUT);
    3a06:	8a 81       	ldd	r24, Y+2	; 0x02
    3a08:	9b 81       	ldd	r25, Y+3	; 0x03
    3a0a:	69 2f       	mov	r22, r25
    3a0c:	40 e0       	ldi	r20, 0x00	; 0
    3a0e:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
    	DIO_enuSetPinDirection(ultraSonic_Instance.TRIG_PORT, ultraSonic_Instance.TRIG_PIN, DIO_u8OUTPUT);
    3a12:	8c 81       	ldd	r24, Y+4	; 0x04
    3a14:	9d 81       	ldd	r25, Y+5	; 0x05
    3a16:	69 2f       	mov	r22, r25
    3a18:	41 e0       	ldi	r20, 0x01	; 1
    3a1a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
    }




	Local_enuErrrorState = ERROR_STATUS_OK;
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	88 87       	std	Y+8, r24	; 0x08
    3a26:	88 85       	ldd	r24, Y+8	; 0x08
}
    3a28:	28 96       	adiw	r28, 0x08	; 8
    3a2a:	0f b6       	in	r0, 0x3f	; 63
    3a2c:	f8 94       	cli
    3a2e:	de bf       	out	0x3e, r29	; 62
    3a30:	0f be       	out	0x3f, r0	; 63
    3a32:	cd bf       	out	0x3d, r28	; 61
    3a34:	cf 91       	pop	r28
    3a36:	df 91       	pop	r29
    3a38:	08 95       	ret

00003a3a <ultraSonic_u16GetDistance>:



void ultraSonic_u16GetDistance(ultraSonic_t* ultraSonic_Instance){
    3a3a:	df 93       	push	r29
    3a3c:	cf 93       	push	r28
    3a3e:	cd b7       	in	r28, 0x3d	; 61
    3a40:	de b7       	in	r29, 0x3e	; 62
    3a42:	6b 97       	sbiw	r28, 0x1b	; 27
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	de bf       	out	0x3e, r29	; 62
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	cd bf       	out	0x3d, r28	; 61
    3a4e:	9b 8f       	std	Y+27, r25	; 0x1b
    3a50:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8_t Local_u8EchoPinStatus = 0;
    3a52:	19 8e       	std	Y+25, r1	; 0x19

	// Send a 10µs pulse to the trigger pin
	DIO_enuSetPinValue(ultraSonic_Instance->TRIG_PORT, ultraSonic_Instance->TRIG_PIN, DIO_u8HIGH);
    3a54:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3a56:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3a58:	82 81       	ldd	r24, Z+2	; 0x02
    3a5a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3a5c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3a5e:	93 81       	ldd	r25, Z+3	; 0x03
    3a60:	69 2f       	mov	r22, r25
    3a62:	41 e0       	ldi	r20, 0x01	; 1
    3a64:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	a0 e2       	ldi	r26, 0x20	; 32
    3a6e:	b1 e4       	ldi	r27, 0x41	; 65
    3a70:	8d 8b       	std	Y+21, r24	; 0x15
    3a72:	9e 8b       	std	Y+22, r25	; 0x16
    3a74:	af 8b       	std	Y+23, r26	; 0x17
    3a76:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3a78:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a80:	2b ea       	ldi	r18, 0xAB	; 171
    3a82:	3a ea       	ldi	r19, 0xAA	; 170
    3a84:	4a ea       	ldi	r20, 0xAA	; 170
    3a86:	50 e4       	ldi	r21, 0x40	; 64
    3a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a8c:	dc 01       	movw	r26, r24
    3a8e:	cb 01       	movw	r24, r22
    3a90:	89 8b       	std	Y+17, r24	; 0x11
    3a92:	9a 8b       	std	Y+18, r25	; 0x12
    3a94:	ab 8b       	std	Y+19, r26	; 0x13
    3a96:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3a98:	69 89       	ldd	r22, Y+17	; 0x11
    3a9a:	7a 89       	ldd	r23, Y+18	; 0x12
    3a9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3a9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3aa0:	20 e0       	ldi	r18, 0x00	; 0
    3aa2:	30 e0       	ldi	r19, 0x00	; 0
    3aa4:	40 e8       	ldi	r20, 0x80	; 128
    3aa6:	5f e3       	ldi	r21, 0x3F	; 63
    3aa8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3aac:	88 23       	and	r24, r24
    3aae:	1c f4       	brge	.+6      	; 0x3ab6 <ultraSonic_u16GetDistance+0x7c>
		__ticks = 1;
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	88 8b       	std	Y+16, r24	; 0x10
    3ab4:	91 c0       	rjmp	.+290    	; 0x3bd8 <ultraSonic_u16GetDistance+0x19e>
	else if (__tmp > 255)
    3ab6:	69 89       	ldd	r22, Y+17	; 0x11
    3ab8:	7a 89       	ldd	r23, Y+18	; 0x12
    3aba:	8b 89       	ldd	r24, Y+19	; 0x13
    3abc:	9c 89       	ldd	r25, Y+20	; 0x14
    3abe:	20 e0       	ldi	r18, 0x00	; 0
    3ac0:	30 e0       	ldi	r19, 0x00	; 0
    3ac2:	4f e7       	ldi	r20, 0x7F	; 127
    3ac4:	53 e4       	ldi	r21, 0x43	; 67
    3ac6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3aca:	18 16       	cp	r1, r24
    3acc:	0c f0       	brlt	.+2      	; 0x3ad0 <ultraSonic_u16GetDistance+0x96>
    3ace:	7b c0       	rjmp	.+246    	; 0x3bc6 <ultraSonic_u16GetDistance+0x18c>
	{
		_delay_ms(__us / 1000.0);
    3ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	4a e7       	ldi	r20, 0x7A	; 122
    3ade:	54 e4       	ldi	r21, 0x44	; 68
    3ae0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	8c 87       	std	Y+12, r24	; 0x0c
    3aea:	9d 87       	std	Y+13, r25	; 0x0d
    3aec:	ae 87       	std	Y+14, r26	; 0x0e
    3aee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af0:	6c 85       	ldd	r22, Y+12	; 0x0c
    3af2:	7d 85       	ldd	r23, Y+13	; 0x0d
    3af4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3af6:	9f 85       	ldd	r25, Y+15	; 0x0f
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	4a e7       	ldi	r20, 0x7A	; 122
    3afe:	55 e4       	ldi	r21, 0x45	; 69
    3b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b04:	dc 01       	movw	r26, r24
    3b06:	cb 01       	movw	r24, r22
    3b08:	88 87       	std	Y+8, r24	; 0x08
    3b0a:	99 87       	std	Y+9, r25	; 0x09
    3b0c:	aa 87       	std	Y+10, r26	; 0x0a
    3b0e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3b10:	68 85       	ldd	r22, Y+8	; 0x08
    3b12:	79 85       	ldd	r23, Y+9	; 0x09
    3b14:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b16:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	40 e8       	ldi	r20, 0x80	; 128
    3b1e:	5f e3       	ldi	r21, 0x3F	; 63
    3b20:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b24:	88 23       	and	r24, r24
    3b26:	2c f4       	brge	.+10     	; 0x3b32 <ultraSonic_u16GetDistance+0xf8>
		__ticks = 1;
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	9f 83       	std	Y+7, r25	; 0x07
    3b2e:	8e 83       	std	Y+6, r24	; 0x06
    3b30:	3f c0       	rjmp	.+126    	; 0x3bb0 <ultraSonic_u16GetDistance+0x176>
	else if (__tmp > 65535)
    3b32:	68 85       	ldd	r22, Y+8	; 0x08
    3b34:	79 85       	ldd	r23, Y+9	; 0x09
    3b36:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b38:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b3a:	20 e0       	ldi	r18, 0x00	; 0
    3b3c:	3f ef       	ldi	r19, 0xFF	; 255
    3b3e:	4f e7       	ldi	r20, 0x7F	; 127
    3b40:	57 e4       	ldi	r21, 0x47	; 71
    3b42:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b46:	18 16       	cp	r1, r24
    3b48:	4c f5       	brge	.+82     	; 0x3b9c <ultraSonic_u16GetDistance+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b4a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3b4c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3b4e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b50:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	40 e2       	ldi	r20, 0x20	; 32
    3b58:	51 e4       	ldi	r21, 0x41	; 65
    3b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	bc 01       	movw	r22, r24
    3b64:	cd 01       	movw	r24, r26
    3b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	9f 83       	std	Y+7, r25	; 0x07
    3b70:	8e 83       	std	Y+6, r24	; 0x06
    3b72:	0f c0       	rjmp	.+30     	; 0x3b92 <ultraSonic_u16GetDistance+0x158>
    3b74:	80 e9       	ldi	r24, 0x90	; 144
    3b76:	91 e0       	ldi	r25, 0x01	; 1
    3b78:	9d 83       	std	Y+5, r25	; 0x05
    3b7a:	8c 83       	std	Y+4, r24	; 0x04
    3b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3b7e:	9d 81       	ldd	r25, Y+5	; 0x05
    3b80:	01 97       	sbiw	r24, 0x01	; 1
    3b82:	f1 f7       	brne	.-4      	; 0x3b80 <ultraSonic_u16GetDistance+0x146>
    3b84:	9d 83       	std	Y+5, r25	; 0x05
    3b86:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b88:	8e 81       	ldd	r24, Y+6	; 0x06
    3b8a:	9f 81       	ldd	r25, Y+7	; 0x07
    3b8c:	01 97       	sbiw	r24, 0x01	; 1
    3b8e:	9f 83       	std	Y+7, r25	; 0x07
    3b90:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b92:	8e 81       	ldd	r24, Y+6	; 0x06
    3b94:	9f 81       	ldd	r25, Y+7	; 0x07
    3b96:	00 97       	sbiw	r24, 0x00	; 0
    3b98:	69 f7       	brne	.-38     	; 0x3b74 <ultraSonic_u16GetDistance+0x13a>
    3b9a:	24 c0       	rjmp	.+72     	; 0x3be4 <ultraSonic_u16GetDistance+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b9c:	68 85       	ldd	r22, Y+8	; 0x08
    3b9e:	79 85       	ldd	r23, Y+9	; 0x09
    3ba0:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ba2:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	9f 83       	std	Y+7, r25	; 0x07
    3bae:	8e 83       	std	Y+6, r24	; 0x06
    3bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    3bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    3bb4:	9b 83       	std	Y+3, r25	; 0x03
    3bb6:	8a 83       	std	Y+2, r24	; 0x02
    3bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bba:	9b 81       	ldd	r25, Y+3	; 0x03
    3bbc:	01 97       	sbiw	r24, 0x01	; 1
    3bbe:	f1 f7       	brne	.-4      	; 0x3bbc <ultraSonic_u16GetDistance+0x182>
    3bc0:	9b 83       	std	Y+3, r25	; 0x03
    3bc2:	8a 83       	std	Y+2, r24	; 0x02
    3bc4:	0f c0       	rjmp	.+30     	; 0x3be4 <ultraSonic_u16GetDistance+0x1aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3bc6:	69 89       	ldd	r22, Y+17	; 0x11
    3bc8:	7a 89       	ldd	r23, Y+18	; 0x12
    3bca:	8b 89       	ldd	r24, Y+19	; 0x13
    3bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    3bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	88 8b       	std	Y+16, r24	; 0x10
    3bd8:	88 89       	ldd	r24, Y+16	; 0x10
    3bda:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3bdc:	89 81       	ldd	r24, Y+1	; 0x01
    3bde:	8a 95       	dec	r24
    3be0:	f1 f7       	brne	.-4      	; 0x3bde <ultraSonic_u16GetDistance+0x1a4>
    3be2:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(10);

	DIO_enuSetPinValue(ultraSonic_Instance->TRIG_PORT, ultraSonic_Instance->TRIG_PIN, DIO_u8LOW);
    3be4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3be6:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3be8:	82 81       	ldd	r24, Z+2	; 0x02
    3bea:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3bec:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3bee:	93 81       	ldd	r25, Z+3	; 0x03
    3bf0:	69 2f       	mov	r22, r25
    3bf2:	40 e0       	ldi	r20, 0x00	; 0
    3bf4:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>


	// Wait for echo pin to go high, indicating the start of distance measurement

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    3bf8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3bfa:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3bfc:	80 81       	ld	r24, Z
    3bfe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3c00:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3c02:	91 81       	ldd	r25, Z+1	; 0x01
    3c04:	9e 01       	movw	r18, r28
    3c06:	27 5e       	subi	r18, 0xE7	; 231
    3c08:	3f 4f       	sbci	r19, 0xFF	; 255
    3c0a:	69 2f       	mov	r22, r25
    3c0c:	a9 01       	movw	r20, r18
    3c0e:	0e 94 92 19 	call	0x3324	; 0x3324 <DIO_enuGetPinValue>
    3c12:	0d c0       	rjmp	.+26     	; 0x3c2e <ultraSonic_u16GetDistance+0x1f4>
	while(!Local_u8EchoPinStatus){
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    3c14:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3c16:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3c18:	80 81       	ld	r24, Z
    3c1a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3c1c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3c1e:	91 81       	ldd	r25, Z+1	; 0x01
    3c20:	9e 01       	movw	r18, r28
    3c22:	27 5e       	subi	r18, 0xE7	; 231
    3c24:	3f 4f       	sbci	r19, 0xFF	; 255
    3c26:	69 2f       	mov	r22, r25
    3c28:	a9 01       	movw	r20, r18
    3c2a:	0e 94 92 19 	call	0x3324	; 0x3324 <DIO_enuGetPinValue>


	// Wait for echo pin to go high, indicating the start of distance measurement

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	while(!Local_u8EchoPinStatus){
    3c2e:	89 8d       	ldd	r24, Y+25	; 0x19
    3c30:	88 23       	and	r24, r24
    3c32:	81 f3       	breq	.-32     	; 0x3c14 <ultraSonic_u16GetDistance+0x1da>
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	}

	RESET_TIMER1();
    3c34:	ec e4       	ldi	r30, 0x4C	; 76
    3c36:	f0 e0       	ldi	r31, 0x00	; 0
    3c38:	11 82       	std	Z+1, r1	; 0x01
    3c3a:	10 82       	st	Z, r1

	// Wait for echo pin to go low (reflected pulse received)

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    3c3c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3c3e:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3c40:	80 81       	ld	r24, Z
    3c42:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3c44:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3c46:	91 81       	ldd	r25, Z+1	; 0x01
    3c48:	9e 01       	movw	r18, r28
    3c4a:	27 5e       	subi	r18, 0xE7	; 231
    3c4c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c4e:	69 2f       	mov	r22, r25
    3c50:	a9 01       	movw	r20, r18
    3c52:	0e 94 92 19 	call	0x3324	; 0x3324 <DIO_enuGetPinValue>
    3c56:	0d c0       	rjmp	.+26     	; 0x3c72 <ultraSonic_u16GetDistance+0x238>
	while(Local_u8EchoPinStatus){
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    3c58:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3c5a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3c5c:	80 81       	ld	r24, Z
    3c5e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3c60:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3c62:	91 81       	ldd	r25, Z+1	; 0x01
    3c64:	9e 01       	movw	r18, r28
    3c66:	27 5e       	subi	r18, 0xE7	; 231
    3c68:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6a:	69 2f       	mov	r22, r25
    3c6c:	a9 01       	movw	r20, r18
    3c6e:	0e 94 92 19 	call	0x3324	; 0x3324 <DIO_enuGetPinValue>
	RESET_TIMER1();

	// Wait for echo pin to go low (reflected pulse received)

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	while(Local_u8EchoPinStatus){
    3c72:	89 8d       	ldd	r24, Y+25	; 0x19
    3c74:	88 23       	and	r24, r24
    3c76:	81 f7       	brne	.-32     	; 0x3c58 <ultraSonic_u16GetDistance+0x21e>
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	}

	ultraSonic_Instance->measuredDistance_InCm = TIMER1_u16ReadCount() / 58;
    3c78:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <TIMER1_u16ReadCount>
    3c7c:	2a e3       	ldi	r18, 0x3A	; 58
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	b9 01       	movw	r22, r18
    3c82:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__udivmodhi4>
    3c86:	cb 01       	movw	r24, r22
    3c88:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3c8a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3c8c:	95 83       	std	Z+5, r25	; 0x05
    3c8e:	84 83       	std	Z+4, r24	; 0x04
}
    3c90:	6b 96       	adiw	r28, 0x1b	; 27
    3c92:	0f b6       	in	r0, 0x3f	; 63
    3c94:	f8 94       	cli
    3c96:	de bf       	out	0x3e, r29	; 62
    3c98:	0f be       	out	0x3f, r0	; 63
    3c9a:	cd bf       	out	0x3d, r28	; 61
    3c9c:	cf 91       	pop	r28
    3c9e:	df 91       	pop	r29
    3ca0:	08 95       	ret

00003ca2 <servo_init>:
//ErrorStatus_t DIO_enuSetPinDirection(
//	uint8_t Copy_u8PortID,
//	uint8_t Copy_u8PinID,
//	uint8_t Copy_u8Direction){

void servo_init(){
    3ca2:	df 93       	push	r29
    3ca4:	cf 93       	push	r28
    3ca6:	cd b7       	in	r28, 0x3d	; 61
    3ca8:	de b7       	in	r29, 0x3e	; 62
	 * - For more precise angle control, choose prescaler lower than 8 (ex. 1)
	 * - you can output two different signals at channel A and Channel B
	 */


	TIMER1_voidInit();
    3caa:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <TIMER1_voidInit>
}
    3cae:	cf 91       	pop	r28
    3cb0:	df 91       	pop	r29
    3cb2:	08 95       	ret

00003cb4 <servo_SetAngle>:



void servo_SetAngle(uint8_t copy_u8Angle,  uint8_t copy_u8Channel) {
    3cb4:	0f 93       	push	r16
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	cd b7       	in	r28, 0x3d	; 61
    3cbc:	de b7       	in	r29, 0x3e	; 62
    3cbe:	2a 97       	sbiw	r28, 0x0a	; 10
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	f8 94       	cli
    3cc4:	de bf       	out	0x3e, r29	; 62
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	cd bf       	out	0x3d, r28	; 61
    3cca:	89 87       	std	Y+9, r24	; 0x09
    3ccc:	6a 87       	std	Y+10, r22	; 0x0a
    // Step 1: Convert the angle to Ton (pulse width) in milliseconds
    double tonMilliseconds = 1000.0 + ((double)copy_u8Angle / 180.0) * 1000.0;
    3cce:	89 85       	ldd	r24, Y+9	; 0x09
    3cd0:	88 2f       	mov	r24, r24
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	a0 e0       	ldi	r26, 0x00	; 0
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	bc 01       	movw	r22, r24
    3cda:	cd 01       	movw	r24, r26
    3cdc:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3ce0:	dc 01       	movw	r26, r24
    3ce2:	cb 01       	movw	r24, r22
    3ce4:	bc 01       	movw	r22, r24
    3ce6:	cd 01       	movw	r24, r26
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	44 e3       	ldi	r20, 0x34	; 52
    3cee:	53 e4       	ldi	r21, 0x43	; 67
    3cf0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	bc 01       	movw	r22, r24
    3cfa:	cd 01       	movw	r24, r26
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	30 e0       	ldi	r19, 0x00	; 0
    3d00:	4a e7       	ldi	r20, 0x7A	; 122
    3d02:	54 e4       	ldi	r21, 0x44	; 68
    3d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d08:	dc 01       	movw	r26, r24
    3d0a:	cb 01       	movw	r24, r22
    3d0c:	bc 01       	movw	r22, r24
    3d0e:	cd 01       	movw	r24, r26
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	4a e7       	ldi	r20, 0x7A	; 122
    3d16:	54 e4       	ldi	r21, 0x44	; 68
    3d18:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	8d 83       	std	Y+5, r24	; 0x05
    3d22:	9e 83       	std	Y+6, r25	; 0x06
    3d24:	af 83       	std	Y+7, r26	; 0x07
    3d26:	b8 87       	std	Y+8, r27	; 0x08

    // Step 2: Calculate the duty cycle for the PWM signal (period = 20 ms for 50 Hz)
    double dutyCycle = (tonMilliseconds / 20000.0) * 100.0;  // Convert pulse width to percentage of 20 ms period
    3d28:	6d 81       	ldd	r22, Y+5	; 0x05
    3d2a:	7e 81       	ldd	r23, Y+6	; 0x06
    3d2c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d2e:	98 85       	ldd	r25, Y+8	; 0x08
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e4       	ldi	r19, 0x40	; 64
    3d34:	4c e9       	ldi	r20, 0x9C	; 156
    3d36:	56 e4       	ldi	r21, 0x46	; 70
    3d38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	bc 01       	movw	r22, r24
    3d42:	cd 01       	movw	r24, r26
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	48 ec       	ldi	r20, 0xC8	; 200
    3d4a:	52 e4       	ldi	r21, 0x42	; 66
    3d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d50:	dc 01       	movw	r26, r24
    3d52:	cb 01       	movw	r24, r22
    3d54:	89 83       	std	Y+1, r24	; 0x01
    3d56:	9a 83       	std	Y+2, r25	; 0x02
    3d58:	ab 83       	std	Y+3, r26	; 0x03
    3d5a:	bc 83       	std	Y+4, r27	; 0x04

    // Step 3: Set the PWM signal with the calculated duty cycle and fixed 50 Hz frequency
    TIMER1_voidSetPWM_16bit(dutyCycle, 50, copy_u8Channel);  // Use the provided function
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d60:	ab 81       	ldd	r26, Y+3	; 0x03
    3d62:	bc 81       	ldd	r27, Y+4	; 0x04
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	22 e3       	ldi	r18, 0x32	; 50
    3d6a:	30 e0       	ldi	r19, 0x00	; 0
    3d6c:	40 e0       	ldi	r20, 0x00	; 0
    3d6e:	50 e0       	ldi	r21, 0x00	; 0
    3d70:	0a 85       	ldd	r16, Y+10	; 0x0a
    3d72:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <TIMER1_voidSetPWM_16bit>
}
    3d76:	2a 96       	adiw	r28, 0x0a	; 10
    3d78:	0f b6       	in	r0, 0x3f	; 63
    3d7a:	f8 94       	cli
    3d7c:	de bf       	out	0x3e, r29	; 62
    3d7e:	0f be       	out	0x3f, r0	; 63
    3d80:	cd bf       	out	0x3d, r28	; 61
    3d82:	cf 91       	pop	r28
    3d84:	df 91       	pop	r29
    3d86:	0f 91       	pop	r16
    3d88:	08 95       	ret

00003d8a <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    3d8a:	df 93       	push	r29
    3d8c:	cf 93       	push	r28
    3d8e:	0f 92       	push	r0
    3d90:	cd b7       	in	r28, 0x3d	; 61
    3d92:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3d94:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	64 e0       	ldi	r22, 0x04	; 4
    3d9a:	41 e0       	ldi	r20, 0x01	; 1
    3d9c:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    3da0:	81 e0       	ldi	r24, 0x01	; 1
    3da2:	65 e0       	ldi	r22, 0x05	; 5
    3da4:	41 e0       	ldi	r20, 0x01	; 1
    3da6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	66 e0       	ldi	r22, 0x06	; 6
    3dae:	41 e0       	ldi	r20, 0x01	; 1
    3db0:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	67 e0       	ldi	r22, 0x07	; 7
    3db8:	41 e0       	ldi	r20, 0x01	; 1
    3dba:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	64 e0       	ldi	r22, 0x04	; 4
    3dc2:	41 e0       	ldi	r20, 0x01	; 1
    3dc4:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	65 e0       	ldi	r22, 0x05	; 5
    3dcc:	41 e0       	ldi	r20, 0x01	; 1
    3dce:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    3dd2:	81 e0       	ldi	r24, 0x01	; 1
    3dd4:	66 e0       	ldi	r22, 0x06	; 6
    3dd6:	41 e0       	ldi	r20, 0x01	; 1
    3dd8:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	67 e0       	ldi	r22, 0x07	; 7
    3de0:	41 e0       	ldi	r20, 0x01	; 1
    3de2:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    3de6:	83 e0       	ldi	r24, 0x03	; 3
    3de8:	60 e0       	ldi	r22, 0x00	; 0
    3dea:	40 e0       	ldi	r20, 0x00	; 0
    3dec:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    3df0:	83 e0       	ldi	r24, 0x03	; 3
    3df2:	61 e0       	ldi	r22, 0x01	; 1
    3df4:	40 e0       	ldi	r20, 0x00	; 0
    3df6:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    3dfa:	83 e0       	ldi	r24, 0x03	; 3
    3dfc:	64 e0       	ldi	r22, 0x04	; 4
    3dfe:	40 e0       	ldi	r20, 0x00	; 0
    3e00:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    3e04:	83 e0       	ldi	r24, 0x03	; 3
    3e06:	65 e0       	ldi	r22, 0x05	; 5
    3e08:	40 e0       	ldi	r20, 0x00	; 0
    3e0a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    3e0e:	83 e0       	ldi	r24, 0x03	; 3
    3e10:	60 e0       	ldi	r22, 0x00	; 0
    3e12:	41 e0       	ldi	r20, 0x01	; 1
    3e14:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    3e18:	83 e0       	ldi	r24, 0x03	; 3
    3e1a:	61 e0       	ldi	r22, 0x01	; 1
    3e1c:	41 e0       	ldi	r20, 0x01	; 1
    3e1e:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    3e22:	83 e0       	ldi	r24, 0x03	; 3
    3e24:	64 e0       	ldi	r22, 0x04	; 4
    3e26:	41 e0       	ldi	r20, 0x01	; 1
    3e28:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    3e2c:	83 e0       	ldi	r24, 0x03	; 3
    3e2e:	65 e0       	ldi	r22, 0x05	; 5
    3e30:	41 e0       	ldi	r20, 0x01	; 1
    3e32:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e3c:	0f 90       	pop	r0
    3e3e:	cf 91       	pop	r28
    3e40:	df 91       	pop	r29
    3e42:	08 95       	ret

00003e44 <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    3e44:	df 93       	push	r29
    3e46:	cf 93       	push	r28
    3e48:	cd b7       	in	r28, 0x3d	; 61
    3e4a:	de b7       	in	r29, 0x3e	; 62
    3e4c:	2a 97       	sbiw	r28, 0x0a	; 10
    3e4e:	0f b6       	in	r0, 0x3f	; 63
    3e50:	f8 94       	cli
    3e52:	de bf       	out	0x3e, r29	; 62
    3e54:	0f be       	out	0x3f, r0	; 63
    3e56:	cd bf       	out	0x3d, r28	; 61
    3e58:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    3e5a:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    3e5c:	81 e0       	ldi	r24, 0x01	; 1
    3e5e:	8a 83       	std	Y+2, r24	; 0x02
    3e60:	81 e0       	ldi	r24, 0x01	; 1
    3e62:	8b 83       	std	Y+3, r24	; 0x03
    3e64:	81 e0       	ldi	r24, 0x01	; 1
    3e66:	8c 83       	std	Y+4, r24	; 0x04
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    3e6c:	84 e0       	ldi	r24, 0x04	; 4
    3e6e:	8e 83       	std	Y+6, r24	; 0x06
    3e70:	85 e0       	ldi	r24, 0x05	; 5
    3e72:	8f 83       	std	Y+7, r24	; 0x07
    3e74:	86 e0       	ldi	r24, 0x06	; 6
    3e76:	88 87       	std	Y+8, r24	; 0x08
    3e78:	87 e0       	ldi	r24, 0x07	; 7
    3e7a:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3e7c:	19 82       	std	Y+1, r1	; 0x01
    3e7e:	36 c0       	rjmp	.+108    	; 0x3eec <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    3e80:	99 81       	ldd	r25, Y+1	; 0x01
    3e82:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e84:	98 17       	cp	r25, r24
    3e86:	c1 f4       	brne	.+48     	; 0x3eb8 <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    3e88:	89 81       	ldd	r24, Y+1	; 0x01
    3e8a:	28 2f       	mov	r18, r24
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	ce 01       	movw	r24, r28
    3e90:	02 96       	adiw	r24, 0x02	; 2
    3e92:	fc 01       	movw	r30, r24
    3e94:	e2 0f       	add	r30, r18
    3e96:	f3 1f       	adc	r31, r19
    3e98:	40 81       	ld	r20, Z
    3e9a:	89 81       	ldd	r24, Y+1	; 0x01
    3e9c:	28 2f       	mov	r18, r24
    3e9e:	30 e0       	ldi	r19, 0x00	; 0
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	06 96       	adiw	r24, 0x06	; 6
    3ea4:	fc 01       	movw	r30, r24
    3ea6:	e2 0f       	add	r30, r18
    3ea8:	f3 1f       	adc	r31, r19
    3eaa:	90 81       	ld	r25, Z
    3eac:	84 2f       	mov	r24, r20
    3eae:	69 2f       	mov	r22, r25
    3eb0:	40 e0       	ldi	r20, 0x00	; 0
    3eb2:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
    3eb6:	17 c0       	rjmp	.+46     	; 0x3ee6 <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    3eb8:	89 81       	ldd	r24, Y+1	; 0x01
    3eba:	28 2f       	mov	r18, r24
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	ce 01       	movw	r24, r28
    3ec0:	02 96       	adiw	r24, 0x02	; 2
    3ec2:	fc 01       	movw	r30, r24
    3ec4:	e2 0f       	add	r30, r18
    3ec6:	f3 1f       	adc	r31, r19
    3ec8:	40 81       	ld	r20, Z
    3eca:	89 81       	ldd	r24, Y+1	; 0x01
    3ecc:	28 2f       	mov	r18, r24
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	ce 01       	movw	r24, r28
    3ed2:	06 96       	adiw	r24, 0x06	; 6
    3ed4:	fc 01       	movw	r30, r24
    3ed6:	e2 0f       	add	r30, r18
    3ed8:	f3 1f       	adc	r31, r19
    3eda:	90 81       	ld	r25, Z
    3edc:	84 2f       	mov	r24, r20
    3ede:	69 2f       	mov	r22, r25
    3ee0:	41 e0       	ldi	r20, 0x01	; 1
    3ee2:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01
    3ee8:	8f 5f       	subi	r24, 0xFF	; 255
    3eea:	89 83       	std	Y+1, r24	; 0x01
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	84 30       	cpi	r24, 0x04	; 4
    3ef0:	38 f2       	brcs	.-114    	; 0x3e80 <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    3ef2:	2a 96       	adiw	r28, 0x0a	; 10
    3ef4:	0f b6       	in	r0, 0x3f	; 63
    3ef6:	f8 94       	cli
    3ef8:	de bf       	out	0x3e, r29	; 62
    3efa:	0f be       	out	0x3f, r0	; 63
    3efc:	cd bf       	out	0x3d, r28	; 61
    3efe:	cf 91       	pop	r28
    3f00:	df 91       	pop	r29
    3f02:	08 95       	ret

00003f04 <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    3f04:	df 93       	push	r29
    3f06:	cf 93       	push	r28
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
    3f0c:	2f 97       	sbiw	r28, 0x0f	; 15
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	f8 94       	cli
    3f12:	de bf       	out	0x3e, r29	; 62
    3f14:	0f be       	out	0x3f, r0	; 63
    3f16:	cd bf       	out	0x3d, r28	; 61
    3f18:	9e 87       	std	Y+14, r25	; 0x0e
    3f1a:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3f1c:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    3f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f22:	00 97       	sbiw	r24, 0x00	; 0
    3f24:	19 f4       	brne	.+6      	; 0x3f2c <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    3f26:	8b 81       	ldd	r24, Y+3	; 0x03
    3f28:	8f 87       	std	Y+15, r24	; 0x0f
    3f2a:	7e c0       	rjmp	.+252    	; 0x4028 <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    3f2c:	81 e0       	ldi	r24, 0x01	; 1
    3f2e:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    3f30:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    3f32:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    3f34:	83 e0       	ldi	r24, 0x03	; 3
    3f36:	8d 83       	std	Y+5, r24	; 0x05
    3f38:	83 e0       	ldi	r24, 0x03	; 3
    3f3a:	8e 83       	std	Y+6, r24	; 0x06
    3f3c:	83 e0       	ldi	r24, 0x03	; 3
    3f3e:	8f 83       	std	Y+7, r24	; 0x07
    3f40:	83 e0       	ldi	r24, 0x03	; 3
    3f42:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    3f44:	19 86       	std	Y+9, r1	; 0x09
    3f46:	81 e0       	ldi	r24, 0x01	; 1
    3f48:	8a 87       	std	Y+10, r24	; 0x0a
    3f4a:	84 e0       	ldi	r24, 0x04	; 4
    3f4c:	8b 87       	std	Y+11, r24	; 0x0b
    3f4e:	85 e0       	ldi	r24, 0x05	; 5
    3f50:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    3f52:	1a 82       	std	Y+2, r1	; 0x02
    3f54:	63 c0       	rjmp	.+198    	; 0x401c <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    3f56:	8a 81       	ldd	r24, Y+2	; 0x02
    3f58:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    3f5c:	19 82       	std	Y+1, r1	; 0x01
    3f5e:	57 c0       	rjmp	.+174    	; 0x400e <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    3f60:	89 81       	ldd	r24, Y+1	; 0x01
    3f62:	28 2f       	mov	r18, r24
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	ce 01       	movw	r24, r28
    3f68:	05 96       	adiw	r24, 0x05	; 5
    3f6a:	fc 01       	movw	r30, r24
    3f6c:	e2 0f       	add	r30, r18
    3f6e:	f3 1f       	adc	r31, r19
    3f70:	40 81       	ld	r20, Z
    3f72:	89 81       	ldd	r24, Y+1	; 0x01
    3f74:	28 2f       	mov	r18, r24
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	ce 01       	movw	r24, r28
    3f7a:	09 96       	adiw	r24, 0x09	; 9
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	e2 0f       	add	r30, r18
    3f80:	f3 1f       	adc	r31, r19
    3f82:	90 81       	ld	r25, Z
    3f84:	9e 01       	movw	r18, r28
    3f86:	2c 5f       	subi	r18, 0xFC	; 252
    3f88:	3f 4f       	sbci	r19, 0xFF	; 255
    3f8a:	84 2f       	mov	r24, r20
    3f8c:	69 2f       	mov	r22, r25
    3f8e:	a9 01       	movw	r20, r18
    3f90:	0e 94 92 19 	call	0x3324	; 0x3324 <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    3f94:	8c 81       	ldd	r24, Y+4	; 0x04
    3f96:	88 23       	and	r24, r24
    3f98:	b9 f5       	brne	.+110    	; 0x4008 <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	88 2f       	mov	r24, r24
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	9c 01       	movw	r18, r24
    3fa2:	22 0f       	add	r18, r18
    3fa4:	33 1f       	adc	r19, r19
    3fa6:	22 0f       	add	r18, r18
    3fa8:	33 1f       	adc	r19, r19
    3faa:	89 81       	ldd	r24, Y+1	; 0x01
    3fac:	88 2f       	mov	r24, r24
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	82 0f       	add	r24, r18
    3fb2:	93 1f       	adc	r25, r19
    3fb4:	fc 01       	movw	r30, r24
    3fb6:	e2 59       	subi	r30, 0x92	; 146
    3fb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3fba:	80 81       	ld	r24, Z
    3fbc:	ed 85       	ldd	r30, Y+13	; 0x0d
    3fbe:	fe 85       	ldd	r31, Y+14	; 0x0e
    3fc0:	80 83       	st	Z, r24
    3fc2:	1a c0       	rjmp	.+52     	; 0x3ff8 <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    3fc4:	89 81       	ldd	r24, Y+1	; 0x01
    3fc6:	28 2f       	mov	r18, r24
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	ce 01       	movw	r24, r28
    3fcc:	05 96       	adiw	r24, 0x05	; 5
    3fce:	fc 01       	movw	r30, r24
    3fd0:	e2 0f       	add	r30, r18
    3fd2:	f3 1f       	adc	r31, r19
    3fd4:	40 81       	ld	r20, Z
    3fd6:	89 81       	ldd	r24, Y+1	; 0x01
    3fd8:	28 2f       	mov	r18, r24
    3fda:	30 e0       	ldi	r19, 0x00	; 0
    3fdc:	ce 01       	movw	r24, r28
    3fde:	09 96       	adiw	r24, 0x09	; 9
    3fe0:	fc 01       	movw	r30, r24
    3fe2:	e2 0f       	add	r30, r18
    3fe4:	f3 1f       	adc	r31, r19
    3fe6:	90 81       	ld	r25, Z
    3fe8:	9e 01       	movw	r18, r28
    3fea:	2c 5f       	subi	r18, 0xFC	; 252
    3fec:	3f 4f       	sbci	r19, 0xFF	; 255
    3fee:	84 2f       	mov	r24, r20
    3ff0:	69 2f       	mov	r22, r25
    3ff2:	a9 01       	movw	r20, r18
    3ff4:	0e 94 92 19 	call	0x3324	; 0x3324 <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    3ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    3ffa:	88 23       	and	r24, r24
    3ffc:	19 f3       	breq	.-58     	; 0x3fc4 <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    4002:	8b 81       	ldd	r24, Y+3	; 0x03
    4004:	8f 87       	std	Y+15, r24	; 0x0f
    4006:	10 c0       	rjmp	.+32     	; 0x4028 <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	8f 5f       	subi	r24, 0xFF	; 255
    400c:	89 83       	std	Y+1, r24	; 0x01
    400e:	89 81       	ldd	r24, Y+1	; 0x01
    4010:	84 30       	cpi	r24, 0x04	; 4
    4012:	08 f4       	brcc	.+2      	; 0x4016 <keypad_enuGetPressedKey+0x112>
    4014:	a5 cf       	rjmp	.-182    	; 0x3f60 <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    4016:	8a 81       	ldd	r24, Y+2	; 0x02
    4018:	8f 5f       	subi	r24, 0xFF	; 255
    401a:	8a 83       	std	Y+2, r24	; 0x02
    401c:	8a 81       	ldd	r24, Y+2	; 0x02
    401e:	84 30       	cpi	r24, 0x04	; 4
    4020:	08 f4       	brcc	.+2      	; 0x4024 <keypad_enuGetPressedKey+0x120>
    4022:	99 cf       	rjmp	.-206    	; 0x3f56 <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    4024:	8b 81       	ldd	r24, Y+3	; 0x03
    4026:	8f 87       	std	Y+15, r24	; 0x0f
    4028:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    402a:	2f 96       	adiw	r28, 0x0f	; 15
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	cd bf       	out	0x3d, r28	; 61
    4036:	cf 91       	pop	r28
    4038:	df 91       	pop	r29
    403a:	08 95       	ret

0000403c <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    403c:	df 93       	push	r29
    403e:	cf 93       	push	r28
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
    4044:	e9 97       	sbiw	r28, 0x39	; 57
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4050:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	62 e0       	ldi	r22, 0x02	; 2
    4056:	41 e0       	ldi	r20, 0x01	; 1
    4058:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	61 e0       	ldi	r22, 0x01	; 1
    4060:	41 e0       	ldi	r20, 0x01	; 1
    4062:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	60 e0       	ldi	r22, 0x00	; 0
    406a:	41 e0       	ldi	r20, 0x01	; 1
    406c:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	41 e0       	ldi	r20, 0x01	; 1
    4076:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    407a:	80 e0       	ldi	r24, 0x00	; 0
    407c:	61 e0       	ldi	r22, 0x01	; 1
    407e:	41 e0       	ldi	r20, 0x01	; 1
    4080:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    4084:	80 e0       	ldi	r24, 0x00	; 0
    4086:	62 e0       	ldi	r22, 0x02	; 2
    4088:	41 e0       	ldi	r20, 0x01	; 1
    408a:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    408e:	80 e0       	ldi	r24, 0x00	; 0
    4090:	63 e0       	ldi	r22, 0x03	; 3
    4092:	41 e0       	ldi	r20, 0x01	; 1
    4094:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
    4098:	80 e0       	ldi	r24, 0x00	; 0
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	ac e0       	ldi	r26, 0x0C	; 12
    409e:	b2 e4       	ldi	r27, 0x42	; 66
    40a0:	8d ab       	std	Y+53, r24	; 0x35
    40a2:	9e ab       	std	Y+54, r25	; 0x36
    40a4:	af ab       	std	Y+55, r26	; 0x37
    40a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40a8:	6d a9       	ldd	r22, Y+53	; 0x35
    40aa:	7e a9       	ldd	r23, Y+54	; 0x36
    40ac:	8f a9       	ldd	r24, Y+55	; 0x37
    40ae:	98 ad       	ldd	r25, Y+56	; 0x38
    40b0:	20 e0       	ldi	r18, 0x00	; 0
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	4a e7       	ldi	r20, 0x7A	; 122
    40b6:	55 e4       	ldi	r21, 0x45	; 69
    40b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40bc:	dc 01       	movw	r26, r24
    40be:	cb 01       	movw	r24, r22
    40c0:	89 ab       	std	Y+49, r24	; 0x31
    40c2:	9a ab       	std	Y+50, r25	; 0x32
    40c4:	ab ab       	std	Y+51, r26	; 0x33
    40c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    40c8:	69 a9       	ldd	r22, Y+49	; 0x31
    40ca:	7a a9       	ldd	r23, Y+50	; 0x32
    40cc:	8b a9       	ldd	r24, Y+51	; 0x33
    40ce:	9c a9       	ldd	r25, Y+52	; 0x34
    40d0:	20 e0       	ldi	r18, 0x00	; 0
    40d2:	30 e0       	ldi	r19, 0x00	; 0
    40d4:	40 e8       	ldi	r20, 0x80	; 128
    40d6:	5f e3       	ldi	r21, 0x3F	; 63
    40d8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    40dc:	88 23       	and	r24, r24
    40de:	2c f4       	brge	.+10     	; 0x40ea <LCD_enuInit+0xae>
		__ticks = 1;
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	98 ab       	std	Y+48, r25	; 0x30
    40e6:	8f a7       	std	Y+47, r24	; 0x2f
    40e8:	3f c0       	rjmp	.+126    	; 0x4168 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    40ea:	69 a9       	ldd	r22, Y+49	; 0x31
    40ec:	7a a9       	ldd	r23, Y+50	; 0x32
    40ee:	8b a9       	ldd	r24, Y+51	; 0x33
    40f0:	9c a9       	ldd	r25, Y+52	; 0x34
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	3f ef       	ldi	r19, 0xFF	; 255
    40f6:	4f e7       	ldi	r20, 0x7F	; 127
    40f8:	57 e4       	ldi	r21, 0x47	; 71
    40fa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    40fe:	18 16       	cp	r1, r24
    4100:	4c f5       	brge	.+82     	; 0x4154 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4102:	6d a9       	ldd	r22, Y+53	; 0x35
    4104:	7e a9       	ldd	r23, Y+54	; 0x36
    4106:	8f a9       	ldd	r24, Y+55	; 0x37
    4108:	98 ad       	ldd	r25, Y+56	; 0x38
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e2       	ldi	r20, 0x20	; 32
    4110:	51 e4       	ldi	r21, 0x41	; 65
    4112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	bc 01       	movw	r22, r24
    411c:	cd 01       	movw	r24, r26
    411e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	98 ab       	std	Y+48, r25	; 0x30
    4128:	8f a7       	std	Y+47, r24	; 0x2f
    412a:	0f c0       	rjmp	.+30     	; 0x414a <LCD_enuInit+0x10e>
    412c:	80 e9       	ldi	r24, 0x90	; 144
    412e:	91 e0       	ldi	r25, 0x01	; 1
    4130:	9e a7       	std	Y+46, r25	; 0x2e
    4132:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4134:	8d a5       	ldd	r24, Y+45	; 0x2d
    4136:	9e a5       	ldd	r25, Y+46	; 0x2e
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	f1 f7       	brne	.-4      	; 0x4138 <LCD_enuInit+0xfc>
    413c:	9e a7       	std	Y+46, r25	; 0x2e
    413e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4140:	8f a5       	ldd	r24, Y+47	; 0x2f
    4142:	98 a9       	ldd	r25, Y+48	; 0x30
    4144:	01 97       	sbiw	r24, 0x01	; 1
    4146:	98 ab       	std	Y+48, r25	; 0x30
    4148:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414a:	8f a5       	ldd	r24, Y+47	; 0x2f
    414c:	98 a9       	ldd	r25, Y+48	; 0x30
    414e:	00 97       	sbiw	r24, 0x00	; 0
    4150:	69 f7       	brne	.-38     	; 0x412c <LCD_enuInit+0xf0>
    4152:	14 c0       	rjmp	.+40     	; 0x417c <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4154:	69 a9       	ldd	r22, Y+49	; 0x31
    4156:	7a a9       	ldd	r23, Y+50	; 0x32
    4158:	8b a9       	ldd	r24, Y+51	; 0x33
    415a:	9c a9       	ldd	r25, Y+52	; 0x34
    415c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	98 ab       	std	Y+48, r25	; 0x30
    4166:	8f a7       	std	Y+47, r24	; 0x2f
    4168:	8f a5       	ldd	r24, Y+47	; 0x2f
    416a:	98 a9       	ldd	r25, Y+48	; 0x30
    416c:	9c a7       	std	Y+44, r25	; 0x2c
    416e:	8b a7       	std	Y+43, r24	; 0x2b
    4170:	8b a5       	ldd	r24, Y+43	; 0x2b
    4172:	9c a5       	ldd	r25, Y+44	; 0x2c
    4174:	01 97       	sbiw	r24, 0x01	; 1
    4176:	f1 f7       	brne	.-4      	; 0x4174 <LCD_enuInit+0x138>
    4178:	9c a7       	std	Y+44, r25	; 0x2c
    417a:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    417c:	80 e2       	ldi	r24, 0x20	; 32
    417e:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    4182:	80 e2       	ldi	r24, 0x20	; 32
    4184:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    4188:	80 e8       	ldi	r24, 0x80	; 128
    418a:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	a0 e8       	ldi	r26, 0x80	; 128
    4194:	bf e3       	ldi	r27, 0x3F	; 63
    4196:	8f a3       	std	Y+39, r24	; 0x27
    4198:	98 a7       	std	Y+40, r25	; 0x28
    419a:	a9 a7       	std	Y+41, r26	; 0x29
    419c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419e:	6f a1       	ldd	r22, Y+39	; 0x27
    41a0:	78 a5       	ldd	r23, Y+40	; 0x28
    41a2:	89 a5       	ldd	r24, Y+41	; 0x29
    41a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	4a e7       	ldi	r20, 0x7A	; 122
    41ac:	55 e4       	ldi	r21, 0x45	; 69
    41ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b2:	dc 01       	movw	r26, r24
    41b4:	cb 01       	movw	r24, r22
    41b6:	8b a3       	std	Y+35, r24	; 0x23
    41b8:	9c a3       	std	Y+36, r25	; 0x24
    41ba:	ad a3       	std	Y+37, r26	; 0x25
    41bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    41be:	6b a1       	ldd	r22, Y+35	; 0x23
    41c0:	7c a1       	ldd	r23, Y+36	; 0x24
    41c2:	8d a1       	ldd	r24, Y+37	; 0x25
    41c4:	9e a1       	ldd	r25, Y+38	; 0x26
    41c6:	20 e0       	ldi	r18, 0x00	; 0
    41c8:	30 e0       	ldi	r19, 0x00	; 0
    41ca:	40 e8       	ldi	r20, 0x80	; 128
    41cc:	5f e3       	ldi	r21, 0x3F	; 63
    41ce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    41d2:	88 23       	and	r24, r24
    41d4:	2c f4       	brge	.+10     	; 0x41e0 <LCD_enuInit+0x1a4>
		__ticks = 1;
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	9a a3       	std	Y+34, r25	; 0x22
    41dc:	89 a3       	std	Y+33, r24	; 0x21
    41de:	3f c0       	rjmp	.+126    	; 0x425e <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    41e0:	6b a1       	ldd	r22, Y+35	; 0x23
    41e2:	7c a1       	ldd	r23, Y+36	; 0x24
    41e4:	8d a1       	ldd	r24, Y+37	; 0x25
    41e6:	9e a1       	ldd	r25, Y+38	; 0x26
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	3f ef       	ldi	r19, 0xFF	; 255
    41ec:	4f e7       	ldi	r20, 0x7F	; 127
    41ee:	57 e4       	ldi	r21, 0x47	; 71
    41f0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    41f4:	18 16       	cp	r1, r24
    41f6:	4c f5       	brge	.+82     	; 0x424a <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41f8:	6f a1       	ldd	r22, Y+39	; 0x27
    41fa:	78 a5       	ldd	r23, Y+40	; 0x28
    41fc:	89 a5       	ldd	r24, Y+41	; 0x29
    41fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	40 e2       	ldi	r20, 0x20	; 32
    4206:	51 e4       	ldi	r21, 0x41	; 65
    4208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	bc 01       	movw	r22, r24
    4212:	cd 01       	movw	r24, r26
    4214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4218:	dc 01       	movw	r26, r24
    421a:	cb 01       	movw	r24, r22
    421c:	9a a3       	std	Y+34, r25	; 0x22
    421e:	89 a3       	std	Y+33, r24	; 0x21
    4220:	0f c0       	rjmp	.+30     	; 0x4240 <LCD_enuInit+0x204>
    4222:	80 e9       	ldi	r24, 0x90	; 144
    4224:	91 e0       	ldi	r25, 0x01	; 1
    4226:	98 a3       	std	Y+32, r25	; 0x20
    4228:	8f 8f       	std	Y+31, r24	; 0x1f
    422a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    422c:	98 a1       	ldd	r25, Y+32	; 0x20
    422e:	01 97       	sbiw	r24, 0x01	; 1
    4230:	f1 f7       	brne	.-4      	; 0x422e <LCD_enuInit+0x1f2>
    4232:	98 a3       	std	Y+32, r25	; 0x20
    4234:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4236:	89 a1       	ldd	r24, Y+33	; 0x21
    4238:	9a a1       	ldd	r25, Y+34	; 0x22
    423a:	01 97       	sbiw	r24, 0x01	; 1
    423c:	9a a3       	std	Y+34, r25	; 0x22
    423e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4240:	89 a1       	ldd	r24, Y+33	; 0x21
    4242:	9a a1       	ldd	r25, Y+34	; 0x22
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	69 f7       	brne	.-38     	; 0x4222 <LCD_enuInit+0x1e6>
    4248:	14 c0       	rjmp	.+40     	; 0x4272 <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424a:	6b a1       	ldd	r22, Y+35	; 0x23
    424c:	7c a1       	ldd	r23, Y+36	; 0x24
    424e:	8d a1       	ldd	r24, Y+37	; 0x25
    4250:	9e a1       	ldd	r25, Y+38	; 0x26
    4252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4256:	dc 01       	movw	r26, r24
    4258:	cb 01       	movw	r24, r22
    425a:	9a a3       	std	Y+34, r25	; 0x22
    425c:	89 a3       	std	Y+33, r24	; 0x21
    425e:	89 a1       	ldd	r24, Y+33	; 0x21
    4260:	9a a1       	ldd	r25, Y+34	; 0x22
    4262:	9e 8f       	std	Y+30, r25	; 0x1e
    4264:	8d 8f       	std	Y+29, r24	; 0x1d
    4266:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4268:	9e 8d       	ldd	r25, Y+30	; 0x1e
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	f1 f7       	brne	.-4      	; 0x426a <LCD_enuInit+0x22e>
    426e:	9e 8f       	std	Y+30, r25	; 0x1e
    4270:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    4272:	80 e0       	ldi	r24, 0x00	; 0
    4274:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    4278:	80 ef       	ldi	r24, 0xF0	; 240
    427a:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
    427e:	80 e0       	ldi	r24, 0x00	; 0
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	a0 e8       	ldi	r26, 0x80	; 128
    4284:	bf e3       	ldi	r27, 0x3F	; 63
    4286:	89 8f       	std	Y+25, r24	; 0x19
    4288:	9a 8f       	std	Y+26, r25	; 0x1a
    428a:	ab 8f       	std	Y+27, r26	; 0x1b
    428c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    428e:	69 8d       	ldd	r22, Y+25	; 0x19
    4290:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4292:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4294:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4296:	20 e0       	ldi	r18, 0x00	; 0
    4298:	30 e0       	ldi	r19, 0x00	; 0
    429a:	4a e7       	ldi	r20, 0x7A	; 122
    429c:	55 e4       	ldi	r21, 0x45	; 69
    429e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a2:	dc 01       	movw	r26, r24
    42a4:	cb 01       	movw	r24, r22
    42a6:	8d 8b       	std	Y+21, r24	; 0x15
    42a8:	9e 8b       	std	Y+22, r25	; 0x16
    42aa:	af 8b       	std	Y+23, r26	; 0x17
    42ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    42ae:	6d 89       	ldd	r22, Y+21	; 0x15
    42b0:	7e 89       	ldd	r23, Y+22	; 0x16
    42b2:	8f 89       	ldd	r24, Y+23	; 0x17
    42b4:	98 8d       	ldd	r25, Y+24	; 0x18
    42b6:	20 e0       	ldi	r18, 0x00	; 0
    42b8:	30 e0       	ldi	r19, 0x00	; 0
    42ba:	40 e8       	ldi	r20, 0x80	; 128
    42bc:	5f e3       	ldi	r21, 0x3F	; 63
    42be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    42c2:	88 23       	and	r24, r24
    42c4:	2c f4       	brge	.+10     	; 0x42d0 <LCD_enuInit+0x294>
		__ticks = 1;
    42c6:	81 e0       	ldi	r24, 0x01	; 1
    42c8:	90 e0       	ldi	r25, 0x00	; 0
    42ca:	9c 8b       	std	Y+20, r25	; 0x14
    42cc:	8b 8b       	std	Y+19, r24	; 0x13
    42ce:	3f c0       	rjmp	.+126    	; 0x434e <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    42d0:	6d 89       	ldd	r22, Y+21	; 0x15
    42d2:	7e 89       	ldd	r23, Y+22	; 0x16
    42d4:	8f 89       	ldd	r24, Y+23	; 0x17
    42d6:	98 8d       	ldd	r25, Y+24	; 0x18
    42d8:	20 e0       	ldi	r18, 0x00	; 0
    42da:	3f ef       	ldi	r19, 0xFF	; 255
    42dc:	4f e7       	ldi	r20, 0x7F	; 127
    42de:	57 e4       	ldi	r21, 0x47	; 71
    42e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    42e4:	18 16       	cp	r1, r24
    42e6:	4c f5       	brge	.+82     	; 0x433a <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42e8:	69 8d       	ldd	r22, Y+25	; 0x19
    42ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42f0:	20 e0       	ldi	r18, 0x00	; 0
    42f2:	30 e0       	ldi	r19, 0x00	; 0
    42f4:	40 e2       	ldi	r20, 0x20	; 32
    42f6:	51 e4       	ldi	r21, 0x41	; 65
    42f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42fc:	dc 01       	movw	r26, r24
    42fe:	cb 01       	movw	r24, r22
    4300:	bc 01       	movw	r22, r24
    4302:	cd 01       	movw	r24, r26
    4304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4308:	dc 01       	movw	r26, r24
    430a:	cb 01       	movw	r24, r22
    430c:	9c 8b       	std	Y+20, r25	; 0x14
    430e:	8b 8b       	std	Y+19, r24	; 0x13
    4310:	0f c0       	rjmp	.+30     	; 0x4330 <LCD_enuInit+0x2f4>
    4312:	80 e9       	ldi	r24, 0x90	; 144
    4314:	91 e0       	ldi	r25, 0x01	; 1
    4316:	9a 8b       	std	Y+18, r25	; 0x12
    4318:	89 8b       	std	Y+17, r24	; 0x11
    431a:	89 89       	ldd	r24, Y+17	; 0x11
    431c:	9a 89       	ldd	r25, Y+18	; 0x12
    431e:	01 97       	sbiw	r24, 0x01	; 1
    4320:	f1 f7       	brne	.-4      	; 0x431e <LCD_enuInit+0x2e2>
    4322:	9a 8b       	std	Y+18, r25	; 0x12
    4324:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4326:	8b 89       	ldd	r24, Y+19	; 0x13
    4328:	9c 89       	ldd	r25, Y+20	; 0x14
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	9c 8b       	std	Y+20, r25	; 0x14
    432e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4330:	8b 89       	ldd	r24, Y+19	; 0x13
    4332:	9c 89       	ldd	r25, Y+20	; 0x14
    4334:	00 97       	sbiw	r24, 0x00	; 0
    4336:	69 f7       	brne	.-38     	; 0x4312 <LCD_enuInit+0x2d6>
    4338:	14 c0       	rjmp	.+40     	; 0x4362 <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    433a:	6d 89       	ldd	r22, Y+21	; 0x15
    433c:	7e 89       	ldd	r23, Y+22	; 0x16
    433e:	8f 89       	ldd	r24, Y+23	; 0x17
    4340:	98 8d       	ldd	r25, Y+24	; 0x18
    4342:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4346:	dc 01       	movw	r26, r24
    4348:	cb 01       	movw	r24, r22
    434a:	9c 8b       	std	Y+20, r25	; 0x14
    434c:	8b 8b       	std	Y+19, r24	; 0x13
    434e:	8b 89       	ldd	r24, Y+19	; 0x13
    4350:	9c 89       	ldd	r25, Y+20	; 0x14
    4352:	98 8b       	std	Y+16, r25	; 0x10
    4354:	8f 87       	std	Y+15, r24	; 0x0f
    4356:	8f 85       	ldd	r24, Y+15	; 0x0f
    4358:	98 89       	ldd	r25, Y+16	; 0x10
    435a:	01 97       	sbiw	r24, 0x01	; 1
    435c:	f1 f7       	brne	.-4      	; 0x435a <LCD_enuInit+0x31e>
    435e:	98 8b       	std	Y+16, r25	; 0x10
    4360:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
    436e:	80 e0       	ldi	r24, 0x00	; 0
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	a0 e0       	ldi	r26, 0x00	; 0
    4374:	b0 e4       	ldi	r27, 0x40	; 64
    4376:	8b 87       	std	Y+11, r24	; 0x0b
    4378:	9c 87       	std	Y+12, r25	; 0x0c
    437a:	ad 87       	std	Y+13, r26	; 0x0d
    437c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    437e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4380:	7c 85       	ldd	r23, Y+12	; 0x0c
    4382:	8d 85       	ldd	r24, Y+13	; 0x0d
    4384:	9e 85       	ldd	r25, Y+14	; 0x0e
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	30 e0       	ldi	r19, 0x00	; 0
    438a:	4a e7       	ldi	r20, 0x7A	; 122
    438c:	55 e4       	ldi	r21, 0x45	; 69
    438e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4392:	dc 01       	movw	r26, r24
    4394:	cb 01       	movw	r24, r22
    4396:	8f 83       	std	Y+7, r24	; 0x07
    4398:	98 87       	std	Y+8, r25	; 0x08
    439a:	a9 87       	std	Y+9, r26	; 0x09
    439c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    439e:	6f 81       	ldd	r22, Y+7	; 0x07
    43a0:	78 85       	ldd	r23, Y+8	; 0x08
    43a2:	89 85       	ldd	r24, Y+9	; 0x09
    43a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	40 e8       	ldi	r20, 0x80	; 128
    43ac:	5f e3       	ldi	r21, 0x3F	; 63
    43ae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    43b2:	88 23       	and	r24, r24
    43b4:	2c f4       	brge	.+10     	; 0x43c0 <LCD_enuInit+0x384>
		__ticks = 1;
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	90 e0       	ldi	r25, 0x00	; 0
    43ba:	9e 83       	std	Y+6, r25	; 0x06
    43bc:	8d 83       	std	Y+5, r24	; 0x05
    43be:	3f c0       	rjmp	.+126    	; 0x443e <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    43c0:	6f 81       	ldd	r22, Y+7	; 0x07
    43c2:	78 85       	ldd	r23, Y+8	; 0x08
    43c4:	89 85       	ldd	r24, Y+9	; 0x09
    43c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c8:	20 e0       	ldi	r18, 0x00	; 0
    43ca:	3f ef       	ldi	r19, 0xFF	; 255
    43cc:	4f e7       	ldi	r20, 0x7F	; 127
    43ce:	57 e4       	ldi	r21, 0x47	; 71
    43d0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    43d4:	18 16       	cp	r1, r24
    43d6:	4c f5       	brge	.+82     	; 0x442a <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    43da:	7c 85       	ldd	r23, Y+12	; 0x0c
    43dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    43de:	9e 85       	ldd	r25, Y+14	; 0x0e
    43e0:	20 e0       	ldi	r18, 0x00	; 0
    43e2:	30 e0       	ldi	r19, 0x00	; 0
    43e4:	40 e2       	ldi	r20, 0x20	; 32
    43e6:	51 e4       	ldi	r21, 0x41	; 65
    43e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ec:	dc 01       	movw	r26, r24
    43ee:	cb 01       	movw	r24, r22
    43f0:	bc 01       	movw	r22, r24
    43f2:	cd 01       	movw	r24, r26
    43f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f8:	dc 01       	movw	r26, r24
    43fa:	cb 01       	movw	r24, r22
    43fc:	9e 83       	std	Y+6, r25	; 0x06
    43fe:	8d 83       	std	Y+5, r24	; 0x05
    4400:	0f c0       	rjmp	.+30     	; 0x4420 <LCD_enuInit+0x3e4>
    4402:	80 e9       	ldi	r24, 0x90	; 144
    4404:	91 e0       	ldi	r25, 0x01	; 1
    4406:	9c 83       	std	Y+4, r25	; 0x04
    4408:	8b 83       	std	Y+3, r24	; 0x03
    440a:	8b 81       	ldd	r24, Y+3	; 0x03
    440c:	9c 81       	ldd	r25, Y+4	; 0x04
    440e:	01 97       	sbiw	r24, 0x01	; 1
    4410:	f1 f7       	brne	.-4      	; 0x440e <LCD_enuInit+0x3d2>
    4412:	9c 83       	std	Y+4, r25	; 0x04
    4414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4416:	8d 81       	ldd	r24, Y+5	; 0x05
    4418:	9e 81       	ldd	r25, Y+6	; 0x06
    441a:	01 97       	sbiw	r24, 0x01	; 1
    441c:	9e 83       	std	Y+6, r25	; 0x06
    441e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4420:	8d 81       	ldd	r24, Y+5	; 0x05
    4422:	9e 81       	ldd	r25, Y+6	; 0x06
    4424:	00 97       	sbiw	r24, 0x00	; 0
    4426:	69 f7       	brne	.-38     	; 0x4402 <LCD_enuInit+0x3c6>
    4428:	14 c0       	rjmp	.+40     	; 0x4452 <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    442a:	6f 81       	ldd	r22, Y+7	; 0x07
    442c:	78 85       	ldd	r23, Y+8	; 0x08
    442e:	89 85       	ldd	r24, Y+9	; 0x09
    4430:	9a 85       	ldd	r25, Y+10	; 0x0a
    4432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	9e 83       	std	Y+6, r25	; 0x06
    443c:	8d 83       	std	Y+5, r24	; 0x05
    443e:	8d 81       	ldd	r24, Y+5	; 0x05
    4440:	9e 81       	ldd	r25, Y+6	; 0x06
    4442:	9a 83       	std	Y+2, r25	; 0x02
    4444:	89 83       	std	Y+1, r24	; 0x01
    4446:	89 81       	ldd	r24, Y+1	; 0x01
    4448:	9a 81       	ldd	r25, Y+2	; 0x02
    444a:	01 97       	sbiw	r24, 0x01	; 1
    444c:	f1 f7       	brne	.-4      	; 0x444a <LCD_enuInit+0x40e>
    444e:	9a 83       	std	Y+2, r25	; 0x02
    4450:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    4458:	86 e0       	ldi	r24, 0x06	; 6
    445a:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	80 93 a4 01 	sts	0x01A4, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    4464:	81 e0       	ldi	r24, 0x01	; 1
    4466:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    4468:	89 ad       	ldd	r24, Y+57	; 0x39
}
    446a:	e9 96       	adiw	r28, 0x39	; 57
    446c:	0f b6       	in	r0, 0x3f	; 63
    446e:	f8 94       	cli
    4470:	de bf       	out	0x3e, r29	; 62
    4472:	0f be       	out	0x3f, r0	; 63
    4474:	cd bf       	out	0x3d, r28	; 61
    4476:	cf 91       	pop	r28
    4478:	df 91       	pop	r29
    447a:	08 95       	ret

0000447c <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    447c:	df 93       	push	r29
    447e:	cf 93       	push	r28
    4480:	cd b7       	in	r28, 0x3d	; 61
    4482:	de b7       	in	r29, 0x3e	; 62
    4484:	6e 97       	sbiw	r28, 0x1e	; 30
    4486:	0f b6       	in	r0, 0x3f	; 63
    4488:	f8 94       	cli
    448a:	de bf       	out	0x3e, r29	; 62
    448c:	0f be       	out	0x3f, r0	; 63
    448e:	cd bf       	out	0x3d, r28	; 61
    4490:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    4492:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    4494:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4496:	82 95       	swap	r24
    4498:	8f 70       	andi	r24, 0x0F	; 15
    449a:	98 2f       	mov	r25, r24
    449c:	91 70       	andi	r25, 0x01	; 1
    449e:	80 e0       	ldi	r24, 0x00	; 0
    44a0:	63 e0       	ldi	r22, 0x03	; 3
    44a2:	49 2f       	mov	r20, r25
    44a4:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    44a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    44aa:	82 95       	swap	r24
    44ac:	86 95       	lsr	r24
    44ae:	87 70       	andi	r24, 0x07	; 7
    44b0:	98 2f       	mov	r25, r24
    44b2:	91 70       	andi	r25, 0x01	; 1
    44b4:	80 e0       	ldi	r24, 0x00	; 0
    44b6:	62 e0       	ldi	r22, 0x02	; 2
    44b8:	49 2f       	mov	r20, r25
    44ba:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    44be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    44c0:	82 95       	swap	r24
    44c2:	86 95       	lsr	r24
    44c4:	86 95       	lsr	r24
    44c6:	83 70       	andi	r24, 0x03	; 3
    44c8:	98 2f       	mov	r25, r24
    44ca:	91 70       	andi	r25, 0x01	; 1
    44cc:	80 e0       	ldi	r24, 0x00	; 0
    44ce:	61 e0       	ldi	r22, 0x01	; 1
    44d0:	49 2f       	mov	r20, r25
    44d2:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    44d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    44d8:	98 2f       	mov	r25, r24
    44da:	99 1f       	adc	r25, r25
    44dc:	99 27       	eor	r25, r25
    44de:	99 1f       	adc	r25, r25
    44e0:	80 e0       	ldi	r24, 0x00	; 0
    44e2:	60 e0       	ldi	r22, 0x00	; 0
    44e4:	49 2f       	mov	r20, r25
    44e6:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	60 e0       	ldi	r22, 0x00	; 0
    44ee:	41 e0       	ldi	r20, 0x01	; 1
    44f0:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
    44f4:	80 e0       	ldi	r24, 0x00	; 0
    44f6:	90 e0       	ldi	r25, 0x00	; 0
    44f8:	a0 e0       	ldi	r26, 0x00	; 0
    44fa:	b0 e4       	ldi	r27, 0x40	; 64
    44fc:	89 8f       	std	Y+25, r24	; 0x19
    44fe:	9a 8f       	std	Y+26, r25	; 0x1a
    4500:	ab 8f       	std	Y+27, r26	; 0x1b
    4502:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4504:	69 8d       	ldd	r22, Y+25	; 0x19
    4506:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4508:	8b 8d       	ldd	r24, Y+27	; 0x1b
    450a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    450c:	20 e0       	ldi	r18, 0x00	; 0
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	4a e7       	ldi	r20, 0x7A	; 122
    4512:	55 e4       	ldi	r21, 0x45	; 69
    4514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4518:	dc 01       	movw	r26, r24
    451a:	cb 01       	movw	r24, r22
    451c:	8d 8b       	std	Y+21, r24	; 0x15
    451e:	9e 8b       	std	Y+22, r25	; 0x16
    4520:	af 8b       	std	Y+23, r26	; 0x17
    4522:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4524:	6d 89       	ldd	r22, Y+21	; 0x15
    4526:	7e 89       	ldd	r23, Y+22	; 0x16
    4528:	8f 89       	ldd	r24, Y+23	; 0x17
    452a:	98 8d       	ldd	r25, Y+24	; 0x18
    452c:	20 e0       	ldi	r18, 0x00	; 0
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	40 e8       	ldi	r20, 0x80	; 128
    4532:	5f e3       	ldi	r21, 0x3F	; 63
    4534:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4538:	88 23       	and	r24, r24
    453a:	2c f4       	brge	.+10     	; 0x4546 <WriteNLatch+0xca>
		__ticks = 1;
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	9c 8b       	std	Y+20, r25	; 0x14
    4542:	8b 8b       	std	Y+19, r24	; 0x13
    4544:	3f c0       	rjmp	.+126    	; 0x45c4 <WriteNLatch+0x148>
	else if (__tmp > 65535)
    4546:	6d 89       	ldd	r22, Y+21	; 0x15
    4548:	7e 89       	ldd	r23, Y+22	; 0x16
    454a:	8f 89       	ldd	r24, Y+23	; 0x17
    454c:	98 8d       	ldd	r25, Y+24	; 0x18
    454e:	20 e0       	ldi	r18, 0x00	; 0
    4550:	3f ef       	ldi	r19, 0xFF	; 255
    4552:	4f e7       	ldi	r20, 0x7F	; 127
    4554:	57 e4       	ldi	r21, 0x47	; 71
    4556:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    455a:	18 16       	cp	r1, r24
    455c:	4c f5       	brge	.+82     	; 0x45b0 <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    455e:	69 8d       	ldd	r22, Y+25	; 0x19
    4560:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4562:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4564:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	40 e2       	ldi	r20, 0x20	; 32
    456c:	51 e4       	ldi	r21, 0x41	; 65
    456e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4572:	dc 01       	movw	r26, r24
    4574:	cb 01       	movw	r24, r22
    4576:	bc 01       	movw	r22, r24
    4578:	cd 01       	movw	r24, r26
    457a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    457e:	dc 01       	movw	r26, r24
    4580:	cb 01       	movw	r24, r22
    4582:	9c 8b       	std	Y+20, r25	; 0x14
    4584:	8b 8b       	std	Y+19, r24	; 0x13
    4586:	0f c0       	rjmp	.+30     	; 0x45a6 <WriteNLatch+0x12a>
    4588:	80 e9       	ldi	r24, 0x90	; 144
    458a:	91 e0       	ldi	r25, 0x01	; 1
    458c:	9a 8b       	std	Y+18, r25	; 0x12
    458e:	89 8b       	std	Y+17, r24	; 0x11
    4590:	89 89       	ldd	r24, Y+17	; 0x11
    4592:	9a 89       	ldd	r25, Y+18	; 0x12
    4594:	01 97       	sbiw	r24, 0x01	; 1
    4596:	f1 f7       	brne	.-4      	; 0x4594 <WriteNLatch+0x118>
    4598:	9a 8b       	std	Y+18, r25	; 0x12
    459a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    459c:	8b 89       	ldd	r24, Y+19	; 0x13
    459e:	9c 89       	ldd	r25, Y+20	; 0x14
    45a0:	01 97       	sbiw	r24, 0x01	; 1
    45a2:	9c 8b       	std	Y+20, r25	; 0x14
    45a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45a6:	8b 89       	ldd	r24, Y+19	; 0x13
    45a8:	9c 89       	ldd	r25, Y+20	; 0x14
    45aa:	00 97       	sbiw	r24, 0x00	; 0
    45ac:	69 f7       	brne	.-38     	; 0x4588 <WriteNLatch+0x10c>
    45ae:	14 c0       	rjmp	.+40     	; 0x45d8 <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b0:	6d 89       	ldd	r22, Y+21	; 0x15
    45b2:	7e 89       	ldd	r23, Y+22	; 0x16
    45b4:	8f 89       	ldd	r24, Y+23	; 0x17
    45b6:	98 8d       	ldd	r25, Y+24	; 0x18
    45b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45bc:	dc 01       	movw	r26, r24
    45be:	cb 01       	movw	r24, r22
    45c0:	9c 8b       	std	Y+20, r25	; 0x14
    45c2:	8b 8b       	std	Y+19, r24	; 0x13
    45c4:	8b 89       	ldd	r24, Y+19	; 0x13
    45c6:	9c 89       	ldd	r25, Y+20	; 0x14
    45c8:	98 8b       	std	Y+16, r25	; 0x10
    45ca:	8f 87       	std	Y+15, r24	; 0x0f
    45cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    45ce:	98 89       	ldd	r25, Y+16	; 0x10
    45d0:	01 97       	sbiw	r24, 0x01	; 1
    45d2:	f1 f7       	brne	.-4      	; 0x45d0 <WriteNLatch+0x154>
    45d4:	98 8b       	std	Y+16, r25	; 0x10
    45d6:	8f 87       	std	Y+15, r24	; 0x0f
    45d8:	81 e0       	ldi	r24, 0x01	; 1
    45da:	60 e0       	ldi	r22, 0x00	; 0
    45dc:	40 e0       	ldi	r20, 0x00	; 0
    45de:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    45e2:	80 91 a4 01 	lds	r24, 0x01A4
    45e6:	88 23       	and	r24, r24
    45e8:	09 f4       	brne	.+2      	; 0x45ec <WriteNLatch+0x170>
    45ea:	a2 c0       	rjmp	.+324    	; 0x4730 <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    45ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    45ee:	98 2f       	mov	r25, r24
    45f0:	91 70       	andi	r25, 0x01	; 1
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	63 e0       	ldi	r22, 0x03	; 3
    45f6:	49 2f       	mov	r20, r25
    45f8:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    45fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    45fe:	86 95       	lsr	r24
    4600:	98 2f       	mov	r25, r24
    4602:	91 70       	andi	r25, 0x01	; 1
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	62 e0       	ldi	r22, 0x02	; 2
    4608:	49 2f       	mov	r20, r25
    460a:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    460e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4610:	86 95       	lsr	r24
    4612:	86 95       	lsr	r24
    4614:	98 2f       	mov	r25, r24
    4616:	91 70       	andi	r25, 0x01	; 1
    4618:	80 e0       	ldi	r24, 0x00	; 0
    461a:	61 e0       	ldi	r22, 0x01	; 1
    461c:	49 2f       	mov	r20, r25
    461e:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    4622:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4624:	86 95       	lsr	r24
    4626:	86 95       	lsr	r24
    4628:	86 95       	lsr	r24
    462a:	98 2f       	mov	r25, r24
    462c:	91 70       	andi	r25, 0x01	; 1
    462e:	80 e0       	ldi	r24, 0x00	; 0
    4630:	60 e0       	ldi	r22, 0x00	; 0
    4632:	49 2f       	mov	r20, r25
    4634:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    4638:	81 e0       	ldi	r24, 0x01	; 1
    463a:	60 e0       	ldi	r22, 0x00	; 0
    463c:	41 e0       	ldi	r20, 0x01	; 1
    463e:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
    4642:	80 e0       	ldi	r24, 0x00	; 0
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	a0 e0       	ldi	r26, 0x00	; 0
    4648:	b0 e4       	ldi	r27, 0x40	; 64
    464a:	8b 87       	std	Y+11, r24	; 0x0b
    464c:	9c 87       	std	Y+12, r25	; 0x0c
    464e:	ad 87       	std	Y+13, r26	; 0x0d
    4650:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4652:	6b 85       	ldd	r22, Y+11	; 0x0b
    4654:	7c 85       	ldd	r23, Y+12	; 0x0c
    4656:	8d 85       	ldd	r24, Y+13	; 0x0d
    4658:	9e 85       	ldd	r25, Y+14	; 0x0e
    465a:	20 e0       	ldi	r18, 0x00	; 0
    465c:	30 e0       	ldi	r19, 0x00	; 0
    465e:	4a e7       	ldi	r20, 0x7A	; 122
    4660:	55 e4       	ldi	r21, 0x45	; 69
    4662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4666:	dc 01       	movw	r26, r24
    4668:	cb 01       	movw	r24, r22
    466a:	8f 83       	std	Y+7, r24	; 0x07
    466c:	98 87       	std	Y+8, r25	; 0x08
    466e:	a9 87       	std	Y+9, r26	; 0x09
    4670:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4672:	6f 81       	ldd	r22, Y+7	; 0x07
    4674:	78 85       	ldd	r23, Y+8	; 0x08
    4676:	89 85       	ldd	r24, Y+9	; 0x09
    4678:	9a 85       	ldd	r25, Y+10	; 0x0a
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	40 e8       	ldi	r20, 0x80	; 128
    4680:	5f e3       	ldi	r21, 0x3F	; 63
    4682:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4686:	88 23       	and	r24, r24
    4688:	2c f4       	brge	.+10     	; 0x4694 <WriteNLatch+0x218>
		__ticks = 1;
    468a:	81 e0       	ldi	r24, 0x01	; 1
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	9e 83       	std	Y+6, r25	; 0x06
    4690:	8d 83       	std	Y+5, r24	; 0x05
    4692:	3f c0       	rjmp	.+126    	; 0x4712 <WriteNLatch+0x296>
	else if (__tmp > 65535)
    4694:	6f 81       	ldd	r22, Y+7	; 0x07
    4696:	78 85       	ldd	r23, Y+8	; 0x08
    4698:	89 85       	ldd	r24, Y+9	; 0x09
    469a:	9a 85       	ldd	r25, Y+10	; 0x0a
    469c:	20 e0       	ldi	r18, 0x00	; 0
    469e:	3f ef       	ldi	r19, 0xFF	; 255
    46a0:	4f e7       	ldi	r20, 0x7F	; 127
    46a2:	57 e4       	ldi	r21, 0x47	; 71
    46a4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    46a8:	18 16       	cp	r1, r24
    46aa:	4c f5       	brge	.+82     	; 0x46fe <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    46ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    46b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    46b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    46b4:	20 e0       	ldi	r18, 0x00	; 0
    46b6:	30 e0       	ldi	r19, 0x00	; 0
    46b8:	40 e2       	ldi	r20, 0x20	; 32
    46ba:	51 e4       	ldi	r21, 0x41	; 65
    46bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c0:	dc 01       	movw	r26, r24
    46c2:	cb 01       	movw	r24, r22
    46c4:	bc 01       	movw	r22, r24
    46c6:	cd 01       	movw	r24, r26
    46c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46cc:	dc 01       	movw	r26, r24
    46ce:	cb 01       	movw	r24, r22
    46d0:	9e 83       	std	Y+6, r25	; 0x06
    46d2:	8d 83       	std	Y+5, r24	; 0x05
    46d4:	0f c0       	rjmp	.+30     	; 0x46f4 <WriteNLatch+0x278>
    46d6:	80 e9       	ldi	r24, 0x90	; 144
    46d8:	91 e0       	ldi	r25, 0x01	; 1
    46da:	9c 83       	std	Y+4, r25	; 0x04
    46dc:	8b 83       	std	Y+3, r24	; 0x03
    46de:	8b 81       	ldd	r24, Y+3	; 0x03
    46e0:	9c 81       	ldd	r25, Y+4	; 0x04
    46e2:	01 97       	sbiw	r24, 0x01	; 1
    46e4:	f1 f7       	brne	.-4      	; 0x46e2 <WriteNLatch+0x266>
    46e6:	9c 83       	std	Y+4, r25	; 0x04
    46e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ea:	8d 81       	ldd	r24, Y+5	; 0x05
    46ec:	9e 81       	ldd	r25, Y+6	; 0x06
    46ee:	01 97       	sbiw	r24, 0x01	; 1
    46f0:	9e 83       	std	Y+6, r25	; 0x06
    46f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46f4:	8d 81       	ldd	r24, Y+5	; 0x05
    46f6:	9e 81       	ldd	r25, Y+6	; 0x06
    46f8:	00 97       	sbiw	r24, 0x00	; 0
    46fa:	69 f7       	brne	.-38     	; 0x46d6 <WriteNLatch+0x25a>
    46fc:	14 c0       	rjmp	.+40     	; 0x4726 <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46fe:	6f 81       	ldd	r22, Y+7	; 0x07
    4700:	78 85       	ldd	r23, Y+8	; 0x08
    4702:	89 85       	ldd	r24, Y+9	; 0x09
    4704:	9a 85       	ldd	r25, Y+10	; 0x0a
    4706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	9e 83       	std	Y+6, r25	; 0x06
    4710:	8d 83       	std	Y+5, r24	; 0x05
    4712:	8d 81       	ldd	r24, Y+5	; 0x05
    4714:	9e 81       	ldd	r25, Y+6	; 0x06
    4716:	9a 83       	std	Y+2, r25	; 0x02
    4718:	89 83       	std	Y+1, r24	; 0x01
    471a:	89 81       	ldd	r24, Y+1	; 0x01
    471c:	9a 81       	ldd	r25, Y+2	; 0x02
    471e:	01 97       	sbiw	r24, 0x01	; 1
    4720:	f1 f7       	brne	.-4      	; 0x471e <WriteNLatch+0x2a2>
    4722:	9a 83       	std	Y+2, r25	; 0x02
    4724:	89 83       	std	Y+1, r24	; 0x01
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	60 e0       	ldi	r22, 0x00	; 0
    472a:	40 e0       	ldi	r20, 0x00	; 0
    472c:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    4730:	81 e0       	ldi	r24, 0x01	; 1
    4732:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    4734:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4736:	6e 96       	adiw	r28, 0x1e	; 30
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	cf 91       	pop	r28
    4744:	df 91       	pop	r29
    4746:	08 95       	ret

00004748 <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    4748:	df 93       	push	r29
    474a:	cf 93       	push	r28
    474c:	00 d0       	rcall	.+0      	; 0x474e <LCD_enuSendData+0x6>
    474e:	cd b7       	in	r28, 0x3d	; 61
    4750:	de b7       	in	r29, 0x3e	; 62
    4752:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    4754:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    4756:	81 e0       	ldi	r24, 0x01	; 1
    4758:	62 e0       	ldi	r22, 0x02	; 2
    475a:	41 e0       	ldi	r20, 0x01	; 1
    475c:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    4760:	81 e0       	ldi	r24, 0x01	; 1
    4762:	61 e0       	ldi	r22, 0x01	; 1
    4764:	40 e0       	ldi	r20, 0x00	; 0
    4766:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    476a:	8a 81       	ldd	r24, Y+2	; 0x02
    476c:	0e 94 3e 22 	call	0x447c	; 0x447c <WriteNLatch>



	return Local_enu_ErrorState;
    4770:	89 81       	ldd	r24, Y+1	; 0x01
}
    4772:	0f 90       	pop	r0
    4774:	0f 90       	pop	r0
    4776:	cf 91       	pop	r28
    4778:	df 91       	pop	r29
    477a:	08 95       	ret

0000477c <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    477c:	df 93       	push	r29
    477e:	cf 93       	push	r28
    4780:	00 d0       	rcall	.+0      	; 0x4782 <LCD_enuSendCommand+0x6>
    4782:	cd b7       	in	r28, 0x3d	; 61
    4784:	de b7       	in	r29, 0x3e	; 62
    4786:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    4788:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    478a:	81 e0       	ldi	r24, 0x01	; 1
    478c:	62 e0       	ldi	r22, 0x02	; 2
    478e:	40 e0       	ldi	r20, 0x00	; 0
    4790:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    4794:	81 e0       	ldi	r24, 0x01	; 1
    4796:	61 e0       	ldi	r22, 0x01	; 1
    4798:	40 e0       	ldi	r20, 0x00	; 0
    479a:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    479e:	8a 81       	ldd	r24, Y+2	; 0x02
    47a0:	0e 94 3e 22 	call	0x447c	; 0x447c <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    47a4:	81 e0       	ldi	r24, 0x01	; 1
    47a6:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    47a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    47aa:	0f 90       	pop	r0
    47ac:	0f 90       	pop	r0
    47ae:	cf 91       	pop	r28
    47b0:	df 91       	pop	r29
    47b2:	08 95       	ret

000047b4 <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    47b4:	df 93       	push	r29
    47b6:	cf 93       	push	r28
    47b8:	00 d0       	rcall	.+0      	; 0x47ba <LCD_u8SendString+0x6>
    47ba:	00 d0       	rcall	.+0      	; 0x47bc <LCD_u8SendString+0x8>
    47bc:	0f 92       	push	r0
    47be:	cd b7       	in	r28, 0x3d	; 61
    47c0:	de b7       	in	r29, 0x3e	; 62
    47c2:	9c 83       	std	Y+4, r25	; 0x04
    47c4:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    47c6:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    47c8:	8b 81       	ldd	r24, Y+3	; 0x03
    47ca:	9c 81       	ldd	r25, Y+4	; 0x04
    47cc:	00 97       	sbiw	r24, 0x00	; 0
    47ce:	f9 f0       	breq	.+62     	; 0x480e <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    47d0:	19 82       	std	Y+1, r1	; 0x01
    47d2:	0f c0       	rjmp	.+30     	; 0x47f2 <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    47d4:	89 81       	ldd	r24, Y+1	; 0x01
    47d6:	28 2f       	mov	r18, r24
    47d8:	30 e0       	ldi	r19, 0x00	; 0
    47da:	8b 81       	ldd	r24, Y+3	; 0x03
    47dc:	9c 81       	ldd	r25, Y+4	; 0x04
    47de:	fc 01       	movw	r30, r24
    47e0:	e2 0f       	add	r30, r18
    47e2:	f3 1f       	adc	r31, r19
    47e4:	90 81       	ld	r25, Z
    47e6:	89 81       	ldd	r24, Y+1	; 0x01
    47e8:	8f 5f       	subi	r24, 0xFF	; 255
    47ea:	89 83       	std	Y+1, r24	; 0x01
    47ec:	89 2f       	mov	r24, r25
    47ee:	0e 94 a4 23 	call	0x4748	; 0x4748 <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    47f2:	89 81       	ldd	r24, Y+1	; 0x01
    47f4:	28 2f       	mov	r18, r24
    47f6:	30 e0       	ldi	r19, 0x00	; 0
    47f8:	8b 81       	ldd	r24, Y+3	; 0x03
    47fa:	9c 81       	ldd	r25, Y+4	; 0x04
    47fc:	fc 01       	movw	r30, r24
    47fe:	e2 0f       	add	r30, r18
    4800:	f3 1f       	adc	r31, r19
    4802:	80 81       	ld	r24, Z
    4804:	88 23       	and	r24, r24
    4806:	31 f7       	brne	.-52     	; 0x47d4 <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    4808:	8a 81       	ldd	r24, Y+2	; 0x02
    480a:	8d 83       	std	Y+5, r24	; 0x05
    480c:	04 c0       	rjmp	.+8      	; 0x4816 <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    480e:	81 e0       	ldi	r24, 0x01	; 1
    4810:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    4812:	8a 81       	ldd	r24, Y+2	; 0x02
    4814:	8d 83       	std	Y+5, r24	; 0x05
    4816:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    4818:	0f 90       	pop	r0
    481a:	0f 90       	pop	r0
    481c:	0f 90       	pop	r0
    481e:	0f 90       	pop	r0
    4820:	0f 90       	pop	r0
    4822:	cf 91       	pop	r28
    4824:	df 91       	pop	r29
    4826:	08 95       	ret

00004828 <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    4828:	df 93       	push	r29
    482a:	cf 93       	push	r28
    482c:	cd b7       	in	r28, 0x3d	; 61
    482e:	de b7       	in	r29, 0x3e	; 62
    4830:	a0 97       	sbiw	r28, 0x20	; 32
    4832:	0f b6       	in	r0, 0x3f	; 63
    4834:	f8 94       	cli
    4836:	de bf       	out	0x3e, r29	; 62
    4838:	0f be       	out	0x3f, r0	; 63
    483a:	cd bf       	out	0x3d, r28	; 61
    483c:	6b 8f       	std	Y+27, r22	; 0x1b
    483e:	7c 8f       	std	Y+28, r23	; 0x1c
    4840:	8d 8f       	std	Y+29, r24	; 0x1d
    4842:	9e 8f       	std	Y+30, r25	; 0x1e
    4844:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4846:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    4848:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    484a:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    484c:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    484e:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    4850:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4852:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4854:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4856:	be 8d       	ldd	r27, Y+30	; 0x1e
    4858:	bb 23       	and	r27, r27
    485a:	94 f4       	brge	.+36     	; 0x4880 <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    485c:	8d e2       	ldi	r24, 0x2D	; 45
    485e:	0e 94 a4 23 	call	0x4748	; 0x4748 <LCD_enuSendData>
		Copy_u8data*=-1;
    4862:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4864:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4866:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4868:	be 8d       	ldd	r27, Y+30	; 0x1e
    486a:	b0 95       	com	r27
    486c:	a0 95       	com	r26
    486e:	90 95       	com	r25
    4870:	81 95       	neg	r24
    4872:	9f 4f       	sbci	r25, 0xFF	; 255
    4874:	af 4f       	sbci	r26, 0xFF	; 255
    4876:	bf 4f       	sbci	r27, 0xFF	; 255
    4878:	8b 8f       	std	Y+27, r24	; 0x1b
    487a:	9c 8f       	std	Y+28, r25	; 0x1c
    487c:	ad 8f       	std	Y+29, r26	; 0x1d
    487e:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    4880:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4882:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4884:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4886:	be 8d       	ldd	r27, Y+30	; 0x1e
    4888:	00 97       	sbiw	r24, 0x00	; 0
    488a:	a1 05       	cpc	r26, r1
    488c:	b1 05       	cpc	r27, r1
    488e:	09 f0       	breq	.+2      	; 0x4892 <LCD_enuIntegerToString+0x6a>
    4890:	4b c0       	rjmp	.+150    	; 0x4928 <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    4892:	8d 81       	ldd	r24, Y+5	; 0x05
    4894:	28 2f       	mov	r18, r24
    4896:	30 e0       	ldi	r19, 0x00	; 0
    4898:	ce 01       	movw	r24, r28
    489a:	07 96       	adiw	r24, 0x07	; 7
    489c:	fc 01       	movw	r30, r24
    489e:	e2 0f       	add	r30, r18
    48a0:	f3 1f       	adc	r31, r19
    48a2:	80 e3       	ldi	r24, 0x30	; 48
    48a4:	80 83       	st	Z, r24
    48a6:	8d 81       	ldd	r24, Y+5	; 0x05
    48a8:	8f 5f       	subi	r24, 0xFF	; 255
    48aa:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    48ac:	8d 81       	ldd	r24, Y+5	; 0x05
    48ae:	28 2f       	mov	r18, r24
    48b0:	30 e0       	ldi	r19, 0x00	; 0
    48b2:	ce 01       	movw	r24, r28
    48b4:	07 96       	adiw	r24, 0x07	; 7
    48b6:	fc 01       	movw	r30, r24
    48b8:	e2 0f       	add	r30, r18
    48ba:	f3 1f       	adc	r31, r19
    48bc:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    48be:	8e 81       	ldd	r24, Y+6	; 0x06
    48c0:	88 a3       	std	Y+32, r24	; 0x20
    48c2:	7f c0       	rjmp	.+254    	; 0x49c2 <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    48c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    48c6:	28 2f       	mov	r18, r24
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48d2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    48d4:	be 8d       	ldd	r27, Y+30	; 0x1e
    48d6:	bc 01       	movw	r22, r24
    48d8:	cd 01       	movw	r24, r26
    48da:	0e 94 1a 28 	call	0x5034	; 0x5034 <__divmodsi4>
    48de:	dc 01       	movw	r26, r24
    48e0:	cb 01       	movw	r24, r22
    48e2:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    48e4:	8d 81       	ldd	r24, Y+5	; 0x05
    48e6:	28 2f       	mov	r18, r24
    48e8:	30 e0       	ldi	r19, 0x00	; 0
    48ea:	8c 81       	ldd	r24, Y+4	; 0x04
    48ec:	48 2f       	mov	r20, r24
    48ee:	40 5d       	subi	r20, 0xD0	; 208
    48f0:	ce 01       	movw	r24, r28
    48f2:	07 96       	adiw	r24, 0x07	; 7
    48f4:	fc 01       	movw	r30, r24
    48f6:	e2 0f       	add	r30, r18
    48f8:	f3 1f       	adc	r31, r19
    48fa:	40 83       	st	Z, r20
    48fc:	8d 81       	ldd	r24, Y+5	; 0x05
    48fe:	8f 5f       	subi	r24, 0xFF	; 255
    4900:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    4902:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4904:	28 2f       	mov	r18, r24
    4906:	30 e0       	ldi	r19, 0x00	; 0
    4908:	40 e0       	ldi	r20, 0x00	; 0
    490a:	50 e0       	ldi	r21, 0x00	; 0
    490c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    490e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4910:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4912:	be 8d       	ldd	r27, Y+30	; 0x1e
    4914:	bc 01       	movw	r22, r24
    4916:	cd 01       	movw	r24, r26
    4918:	0e 94 1a 28 	call	0x5034	; 0x5034 <__divmodsi4>
    491c:	da 01       	movw	r26, r20
    491e:	c9 01       	movw	r24, r18
    4920:	8b 8f       	std	Y+27, r24	; 0x1b
    4922:	9c 8f       	std	Y+28, r25	; 0x1c
    4924:	ad 8f       	std	Y+29, r26	; 0x1d
    4926:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    4928:	8b 8d       	ldd	r24, Y+27	; 0x1b
    492a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    492c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    492e:	be 8d       	ldd	r27, Y+30	; 0x1e
    4930:	00 97       	sbiw	r24, 0x00	; 0
    4932:	a1 05       	cpc	r26, r1
    4934:	b1 05       	cpc	r27, r1
    4936:	31 f6       	brne	.-116    	; 0x48c4 <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    4938:	8d 81       	ldd	r24, Y+5	; 0x05
    493a:	28 2f       	mov	r18, r24
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	ce 01       	movw	r24, r28
    4940:	07 96       	adiw	r24, 0x07	; 7
    4942:	fc 01       	movw	r30, r24
    4944:	e2 0f       	add	r30, r18
    4946:	f3 1f       	adc	r31, r19
    4948:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    494a:	8d 81       	ldd	r24, Y+5	; 0x05
    494c:	81 50       	subi	r24, 0x01	; 1
    494e:	8a 83       	std	Y+2, r24	; 0x02
    4950:	2c c0       	rjmp	.+88     	; 0x49aa <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    4952:	8b 81       	ldd	r24, Y+3	; 0x03
    4954:	28 2f       	mov	r18, r24
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	ce 01       	movw	r24, r28
    495a:	07 96       	adiw	r24, 0x07	; 7
    495c:	fc 01       	movw	r30, r24
    495e:	e2 0f       	add	r30, r18
    4960:	f3 1f       	adc	r31, r19
    4962:	80 81       	ld	r24, Z
    4964:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    4966:	8b 81       	ldd	r24, Y+3	; 0x03
    4968:	48 2f       	mov	r20, r24
    496a:	50 e0       	ldi	r21, 0x00	; 0
    496c:	8a 81       	ldd	r24, Y+2	; 0x02
    496e:	28 2f       	mov	r18, r24
    4970:	30 e0       	ldi	r19, 0x00	; 0
    4972:	ce 01       	movw	r24, r28
    4974:	07 96       	adiw	r24, 0x07	; 7
    4976:	fc 01       	movw	r30, r24
    4978:	e2 0f       	add	r30, r18
    497a:	f3 1f       	adc	r31, r19
    497c:	20 81       	ld	r18, Z
    497e:	ce 01       	movw	r24, r28
    4980:	07 96       	adiw	r24, 0x07	; 7
    4982:	fc 01       	movw	r30, r24
    4984:	e4 0f       	add	r30, r20
    4986:	f5 1f       	adc	r31, r21
    4988:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    498a:	8a 81       	ldd	r24, Y+2	; 0x02
    498c:	28 2f       	mov	r18, r24
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	ce 01       	movw	r24, r28
    4992:	07 96       	adiw	r24, 0x07	; 7
    4994:	fc 01       	movw	r30, r24
    4996:	e2 0f       	add	r30, r18
    4998:	f3 1f       	adc	r31, r19
    499a:	89 81       	ldd	r24, Y+1	; 0x01
    499c:	80 83       	st	Z, r24

        Local_u8Start++;
    499e:	8b 81       	ldd	r24, Y+3	; 0x03
    49a0:	8f 5f       	subi	r24, 0xFF	; 255
    49a2:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    49a4:	8a 81       	ldd	r24, Y+2	; 0x02
    49a6:	81 50       	subi	r24, 0x01	; 1
    49a8:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    49aa:	9b 81       	ldd	r25, Y+3	; 0x03
    49ac:	8a 81       	ldd	r24, Y+2	; 0x02
    49ae:	98 17       	cp	r25, r24
    49b0:	80 f2       	brcs	.-96     	; 0x4952 <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    49b2:	ce 01       	movw	r24, r28
    49b4:	07 96       	adiw	r24, 0x07	; 7
    49b6:	0e 94 da 23 	call	0x47b4	; 0x47b4 <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    49ba:	81 e0       	ldi	r24, 0x01	; 1
    49bc:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    49be:	8e 81       	ldd	r24, Y+6	; 0x06
    49c0:	88 a3       	std	Y+32, r24	; 0x20
    49c2:	88 a1       	ldd	r24, Y+32	; 0x20
}
    49c4:	a0 96       	adiw	r28, 0x20	; 32
    49c6:	0f b6       	in	r0, 0x3f	; 63
    49c8:	f8 94       	cli
    49ca:	de bf       	out	0x3e, r29	; 62
    49cc:	0f be       	out	0x3f, r0	; 63
    49ce:	cd bf       	out	0x3d, r28	; 61
    49d0:	cf 91       	pop	r28
    49d2:	df 91       	pop	r29
    49d4:	08 95       	ret

000049d6 <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    49d6:	df 93       	push	r29
    49d8:	cf 93       	push	r28
    49da:	cd b7       	in	r28, 0x3d	; 61
    49dc:	de b7       	in	r29, 0x3e	; 62
    49de:	27 97       	sbiw	r28, 0x07	; 7
    49e0:	0f b6       	in	r0, 0x3f	; 63
    49e2:	f8 94       	cli
    49e4:	de bf       	out	0x3e, r29	; 62
    49e6:	0f be       	out	0x3f, r0	; 63
    49e8:	cd bf       	out	0x3d, r28	; 61
    49ea:	8b 83       	std	Y+3, r24	; 0x03
    49ec:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    49ee:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    49f0:	8b 81       	ldd	r24, Y+3	; 0x03
    49f2:	81 31       	cpi	r24, 0x11	; 17
    49f4:	18 f4       	brcc	.+6      	; 0x49fc <LCD_u8SetPosXY+0x26>
    49f6:	8c 81       	ldd	r24, Y+4	; 0x04
    49f8:	83 30       	cpi	r24, 0x03	; 3
    49fa:	18 f0       	brcs	.+6      	; 0x4a02 <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    49fc:	2a 81       	ldd	r18, Y+2	; 0x02
    49fe:	2f 83       	std	Y+7, r18	; 0x07
    4a00:	23 c0       	rjmp	.+70     	; 0x4a48 <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    4a02:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    4a04:	8c 81       	ldd	r24, Y+4	; 0x04
    4a06:	28 2f       	mov	r18, r24
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	3e 83       	std	Y+6, r19	; 0x06
    4a0c:	2d 83       	std	Y+5, r18	; 0x05
    4a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a10:	9e 81       	ldd	r25, Y+6	; 0x06
    4a12:	81 30       	cpi	r24, 0x01	; 1
    4a14:	91 05       	cpc	r25, r1
    4a16:	31 f0       	breq	.+12     	; 0x4a24 <LCD_u8SetPosXY+0x4e>
    4a18:	2d 81       	ldd	r18, Y+5	; 0x05
    4a1a:	3e 81       	ldd	r19, Y+6	; 0x06
    4a1c:	22 30       	cpi	r18, 0x02	; 2
    4a1e:	31 05       	cpc	r19, r1
    4a20:	21 f0       	breq	.+8      	; 0x4a2a <LCD_u8SetPosXY+0x54>
    4a22:	07 c0       	rjmp	.+14     	; 0x4a32 <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    4a24:	8b 81       	ldd	r24, Y+3	; 0x03
    4a26:	89 83       	std	Y+1, r24	; 0x01
    4a28:	05 c0       	rjmp	.+10     	; 0x4a34 <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    4a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4a2c:	80 5c       	subi	r24, 0xC0	; 192
    4a2e:	89 83       	std	Y+1, r24	; 0x01
    4a30:	01 c0       	rjmp	.+2      	; 0x4a34 <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    4a32:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    4a34:	89 81       	ldd	r24, Y+1	; 0x01
    4a36:	80 68       	ori	r24, 0x80	; 128
    4a38:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    4a3a:	89 81       	ldd	r24, Y+1	; 0x01
    4a3c:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    4a40:	81 e0       	ldi	r24, 0x01	; 1
    4a42:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    4a44:	3a 81       	ldd	r19, Y+2	; 0x02
    4a46:	3f 83       	std	Y+7, r19	; 0x07
    4a48:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4a4a:	27 96       	adiw	r28, 0x07	; 7
    4a4c:	0f b6       	in	r0, 0x3f	; 63
    4a4e:	f8 94       	cli
    4a50:	de bf       	out	0x3e, r29	; 62
    4a52:	0f be       	out	0x3f, r0	; 63
    4a54:	cd bf       	out	0x3d, r28	; 61
    4a56:	cf 91       	pop	r28
    4a58:	df 91       	pop	r29
    4a5a:	08 95       	ret

00004a5c <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    4a5c:	df 93       	push	r29
    4a5e:	cf 93       	push	r28
    4a60:	cd b7       	in	r28, 0x3d	; 61
    4a62:	de b7       	in	r29, 0x3e	; 62
    4a64:	27 97       	sbiw	r28, 0x07	; 7
    4a66:	0f b6       	in	r0, 0x3f	; 63
    4a68:	f8 94       	cli
    4a6a:	de bf       	out	0x3e, r29	; 62
    4a6c:	0f be       	out	0x3f, r0	; 63
    4a6e:	cd bf       	out	0x3d, r28	; 61
    4a70:	9d 83       	std	Y+5, r25	; 0x05
    4a72:	8c 83       	std	Y+4, r24	; 0x04
    4a74:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4a76:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    4a78:	8c 81       	ldd	r24, Y+4	; 0x04
    4a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    4a7c:	00 97       	sbiw	r24, 0x00	; 0
    4a7e:	19 f0       	breq	.+6      	; 0x4a86 <LCD_u8StoreCustomChar+0x2a>
    4a80:	8e 81       	ldd	r24, Y+6	; 0x06
    4a82:	89 30       	cpi	r24, 0x09	; 9
    4a84:	18 f0       	brcs	.+6      	; 0x4a8c <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    4a86:	8b 81       	ldd	r24, Y+3	; 0x03
    4a88:	8f 83       	std	Y+7, r24	; 0x07
    4a8a:	2a c0       	rjmp	.+84     	; 0x4ae0 <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    4a8c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a8e:	88 2f       	mov	r24, r24
    4a90:	90 e0       	ldi	r25, 0x00	; 0
    4a92:	88 0f       	add	r24, r24
    4a94:	99 1f       	adc	r25, r25
    4a96:	88 0f       	add	r24, r24
    4a98:	99 1f       	adc	r25, r25
    4a9a:	88 0f       	add	r24, r24
    4a9c:	99 1f       	adc	r25, r25
    4a9e:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    4aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa2:	80 64       	ori	r24, 0x40	; 64
    4aa4:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    4aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa8:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    4aac:	19 82       	std	Y+1, r1	; 0x01
    4aae:	0e c0       	rjmp	.+28     	; 0x4acc <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    4ab0:	89 81       	ldd	r24, Y+1	; 0x01
    4ab2:	28 2f       	mov	r18, r24
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    4ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    4aba:	fc 01       	movw	r30, r24
    4abc:	e2 0f       	add	r30, r18
    4abe:	f3 1f       	adc	r31, r19
    4ac0:	80 81       	ld	r24, Z
    4ac2:	0e 94 a4 23 	call	0x4748	; 0x4748 <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    4ac6:	89 81       	ldd	r24, Y+1	; 0x01
    4ac8:	8f 5f       	subi	r24, 0xFF	; 255
    4aca:	89 83       	std	Y+1, r24	; 0x01
    4acc:	89 81       	ldd	r24, Y+1	; 0x01
    4ace:	88 30       	cpi	r24, 0x08	; 8
    4ad0:	78 f3       	brcs	.-34     	; 0x4ab0 <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    4ad2:	82 e0       	ldi	r24, 0x02	; 2
    4ad4:	0e 94 be 23 	call	0x477c	; 0x477c <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    4ad8:	81 e0       	ldi	r24, 0x01	; 1
    4ada:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    4adc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ade:	8f 83       	std	Y+7, r24	; 0x07
    4ae0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4ae2:	27 96       	adiw	r28, 0x07	; 7
    4ae4:	0f b6       	in	r0, 0x3f	; 63
    4ae6:	f8 94       	cli
    4ae8:	de bf       	out	0x3e, r29	; 62
    4aea:	0f be       	out	0x3f, r0	; 63
    4aec:	cd bf       	out	0x3d, r28	; 61
    4aee:	cf 91       	pop	r28
    4af0:	df 91       	pop	r29
    4af2:	08 95       	ret

00004af4 <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    4af4:	df 93       	push	r29
    4af6:	cf 93       	push	r28
    4af8:	00 d0       	rcall	.+0      	; 0x4afa <LCD_u8DisplayCustomChar+0x6>
    4afa:	00 d0       	rcall	.+0      	; 0x4afc <LCD_u8DisplayCustomChar+0x8>
    4afc:	cd b7       	in	r28, 0x3d	; 61
    4afe:	de b7       	in	r29, 0x3e	; 62
    4b00:	8a 83       	std	Y+2, r24	; 0x02
    4b02:	6b 83       	std	Y+3, r22	; 0x03
    4b04:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4b06:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    4b08:	8c 81       	ldd	r24, Y+4	; 0x04
    4b0a:	6b 81       	ldd	r22, Y+3	; 0x03
    4b0c:	0e 94 eb 24 	call	0x49d6	; 0x49d6 <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    4b10:	8a 81       	ldd	r24, Y+2	; 0x02
    4b12:	0e 94 a4 23 	call	0x4748	; 0x4748 <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    4b16:	81 e0       	ldi	r24, 0x01	; 1
    4b18:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    4b1a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b1c:	0f 90       	pop	r0
    4b1e:	0f 90       	pop	r0
    4b20:	0f 90       	pop	r0
    4b22:	0f 90       	pop	r0
    4b24:	cf 91       	pop	r28
    4b26:	df 91       	pop	r29
    4b28:	08 95       	ret

00004b2a <EEPROM_enuInit>:
#include <util/delay.h>
/**************************************************************/



ErrorStatus_t EEPROM_enuInit(void){
    4b2a:	df 93       	push	r29
    4b2c:	cf 93       	push	r28
    4b2e:	0f 92       	push	r0
    4b30:	cd b7       	in	r28, 0x3d	; 61
    4b32:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enuErrorState = TWI_enuInit();
    4b34:	0e 94 92 08 	call	0x1124	; 0x1124 <TWI_enuInit>
    4b38:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b3c:	0f 90       	pop	r0
    4b3e:	cf 91       	pop	r28
    4b40:	df 91       	pop	r29
    4b42:	08 95       	ret

00004b44 <EEPROM_enuWriteData>:


ErrorStatus_t EEPROM_enuWriteData(EEPROM_Input_t* eepromInstance) {
    4b44:	df 93       	push	r29
    4b46:	cf 93       	push	r28
    4b48:	cd b7       	in	r28, 0x3d	; 61
    4b4a:	de b7       	in	r29, 0x3e	; 62
    4b4c:	62 97       	sbiw	r28, 0x12	; 18
    4b4e:	0f b6       	in	r0, 0x3f	; 63
    4b50:	f8 94       	cli
    4b52:	de bf       	out	0x3e, r29	; 62
    4b54:	0f be       	out	0x3f, r0	; 63
    4b56:	cd bf       	out	0x3d, r28	; 61
    4b58:	9a 8b       	std	Y+18, r25	; 0x12
    4b5a:	89 8b       	std	Y+17, r24	; 0x11
    ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    4b5c:	18 8a       	std	Y+16, r1	; 0x10

    	uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 3) | (eepromInstance->A1 << 2) | (eepromInstance->A0);

	#elif(EEPROM_TYPE == EEPROM_NM24C08 || EEPROM_TYPE == EEPROM_NM24C08F )

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 2) | (eepromInstance->A1 << 1) | (eepromInstance->A0);
    4b5e:	e9 89       	ldd	r30, Y+17	; 0x11
    4b60:	fa 89       	ldd	r31, Y+18	; 0x12
    4b62:	82 81       	ldd	r24, Z+2	; 0x02
    4b64:	81 70       	andi	r24, 0x01	; 1
    4b66:	88 2f       	mov	r24, r24
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	88 0f       	add	r24, r24
    4b6c:	99 1f       	adc	r25, r25
    4b6e:	88 0f       	add	r24, r24
    4b70:	99 1f       	adc	r25, r25
    4b72:	28 2f       	mov	r18, r24
    4b74:	20 6a       	ori	r18, 0xA0	; 160
    4b76:	e9 89       	ldd	r30, Y+17	; 0x11
    4b78:	fa 89       	ldd	r31, Y+18	; 0x12
    4b7a:	82 81       	ldd	r24, Z+2	; 0x02
    4b7c:	86 95       	lsr	r24
    4b7e:	81 70       	andi	r24, 0x01	; 1
    4b80:	88 2f       	mov	r24, r24
    4b82:	90 e0       	ldi	r25, 0x00	; 0
    4b84:	88 0f       	add	r24, r24
    4b86:	99 1f       	adc	r25, r25
    4b88:	92 2f       	mov	r25, r18
    4b8a:	98 2b       	or	r25, r24
    4b8c:	e9 89       	ldd	r30, Y+17	; 0x11
    4b8e:	fa 89       	ldd	r31, Y+18	; 0x12
    4b90:	82 81       	ldd	r24, Z+2	; 0x02
    4b92:	86 95       	lsr	r24
    4b94:	86 95       	lsr	r24
    4b96:	81 70       	andi	r24, 0x01	; 1
    4b98:	89 2b       	or	r24, r25
    4b9a:	8f 87       	std	Y+15, r24	; 0x0f
		#error "Unsupported EEPROM type!"
	#endif


    // Send start condition
    if( TWI_enuStartCondition() == TWI_STATUS_OK){
    4b9c:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_enuStartCondition>
    4ba0:	81 30       	cpi	r24, 0x01	; 1
    4ba2:	79 f4       	brne	.+30     	; 0x4bc2 <EEPROM_enuWriteData+0x7e>

		// Send EEPROM address with write operation
		TWI_enuWriteData(Local_u8Address | TWI_WriteOperation);
    4ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ba6:	0e 94 4f 09 	call	0x129e	; 0x129e <TWI_enuWriteData>

		// Send memory address within EEPROM
		TWI_enuWriteData(eepromInstance->address);
    4baa:	e9 89       	ldd	r30, Y+17	; 0x11
    4bac:	fa 89       	ldd	r31, Y+18	; 0x12
    4bae:	80 81       	ld	r24, Z
    4bb0:	0e 94 4f 09 	call	0x129e	; 0x129e <TWI_enuWriteData>

		// Write data to EEPROM
		TWI_enuWriteData(eepromInstance->data);
    4bb4:	e9 89       	ldd	r30, Y+17	; 0x11
    4bb6:	fa 89       	ldd	r31, Y+18	; 0x12
    4bb8:	81 81       	ldd	r24, Z+1	; 0x01
    4bba:	0e 94 4f 09 	call	0x129e	; 0x129e <TWI_enuWriteData>

		// Send stop condition
		TWI_enuStopCondition();
    4bbe:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <TWI_enuStopCondition>
    4bc2:	80 e0       	ldi	r24, 0x00	; 0
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	a0 e2       	ldi	r26, 0x20	; 32
    4bc8:	b1 e4       	ldi	r27, 0x41	; 65
    4bca:	8b 87       	std	Y+11, r24	; 0x0b
    4bcc:	9c 87       	std	Y+12, r25	; 0x0c
    4bce:	ad 87       	std	Y+13, r26	; 0x0d
    4bd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    4bd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    4bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	4a ef       	ldi	r20, 0xFA	; 250
    4be0:	54 e4       	ldi	r21, 0x44	; 68
    4be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4be6:	dc 01       	movw	r26, r24
    4be8:	cb 01       	movw	r24, r22
    4bea:	8f 83       	std	Y+7, r24	; 0x07
    4bec:	98 87       	std	Y+8, r25	; 0x08
    4bee:	a9 87       	std	Y+9, r26	; 0x09
    4bf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4bf2:	6f 81       	ldd	r22, Y+7	; 0x07
    4bf4:	78 85       	ldd	r23, Y+8	; 0x08
    4bf6:	89 85       	ldd	r24, Y+9	; 0x09
    4bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
    4bfe:	40 e8       	ldi	r20, 0x80	; 128
    4c00:	5f e3       	ldi	r21, 0x3F	; 63
    4c02:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4c06:	88 23       	and	r24, r24
    4c08:	2c f4       	brge	.+10     	; 0x4c14 <EEPROM_enuWriteData+0xd0>
		__ticks = 1;
    4c0a:	81 e0       	ldi	r24, 0x01	; 1
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	9e 83       	std	Y+6, r25	; 0x06
    4c10:	8d 83       	std	Y+5, r24	; 0x05
    4c12:	3f c0       	rjmp	.+126    	; 0x4c92 <EEPROM_enuWriteData+0x14e>
	else if (__tmp > 65535)
    4c14:	6f 81       	ldd	r22, Y+7	; 0x07
    4c16:	78 85       	ldd	r23, Y+8	; 0x08
    4c18:	89 85       	ldd	r24, Y+9	; 0x09
    4c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	3f ef       	ldi	r19, 0xFF	; 255
    4c20:	4f e7       	ldi	r20, 0x7F	; 127
    4c22:	57 e4       	ldi	r21, 0x47	; 71
    4c24:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4c28:	18 16       	cp	r1, r24
    4c2a:	4c f5       	brge	.+82     	; 0x4c7e <EEPROM_enuWriteData+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c34:	20 e0       	ldi	r18, 0x00	; 0
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	40 e2       	ldi	r20, 0x20	; 32
    4c3a:	51 e4       	ldi	r21, 0x41	; 65
    4c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c40:	dc 01       	movw	r26, r24
    4c42:	cb 01       	movw	r24, r22
    4c44:	bc 01       	movw	r22, r24
    4c46:	cd 01       	movw	r24, r26
    4c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	cb 01       	movw	r24, r22
    4c50:	9e 83       	std	Y+6, r25	; 0x06
    4c52:	8d 83       	std	Y+5, r24	; 0x05
    4c54:	0f c0       	rjmp	.+30     	; 0x4c74 <EEPROM_enuWriteData+0x130>
    4c56:	88 ec       	ldi	r24, 0xC8	; 200
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	9c 83       	std	Y+4, r25	; 0x04
    4c5c:	8b 83       	std	Y+3, r24	; 0x03
    4c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c60:	9c 81       	ldd	r25, Y+4	; 0x04
    4c62:	01 97       	sbiw	r24, 0x01	; 1
    4c64:	f1 f7       	brne	.-4      	; 0x4c62 <EEPROM_enuWriteData+0x11e>
    4c66:	9c 83       	std	Y+4, r25	; 0x04
    4c68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c6e:	01 97       	sbiw	r24, 0x01	; 1
    4c70:	9e 83       	std	Y+6, r25	; 0x06
    4c72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c74:	8d 81       	ldd	r24, Y+5	; 0x05
    4c76:	9e 81       	ldd	r25, Y+6	; 0x06
    4c78:	00 97       	sbiw	r24, 0x00	; 0
    4c7a:	69 f7       	brne	.-38     	; 0x4c56 <EEPROM_enuWriteData+0x112>
    4c7c:	14 c0       	rjmp	.+40     	; 0x4ca6 <EEPROM_enuWriteData+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4c80:	78 85       	ldd	r23, Y+8	; 0x08
    4c82:	89 85       	ldd	r24, Y+9	; 0x09
    4c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c8a:	dc 01       	movw	r26, r24
    4c8c:	cb 01       	movw	r24, r22
    4c8e:	9e 83       	std	Y+6, r25	; 0x06
    4c90:	8d 83       	std	Y+5, r24	; 0x05
    4c92:	8d 81       	ldd	r24, Y+5	; 0x05
    4c94:	9e 81       	ldd	r25, Y+6	; 0x06
    4c96:	9a 83       	std	Y+2, r25	; 0x02
    4c98:	89 83       	std	Y+1, r24	; 0x01
    4c9a:	89 81       	ldd	r24, Y+1	; 0x01
    4c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9e:	01 97       	sbiw	r24, 0x01	; 1
    4ca0:	f1 f7       	brne	.-4      	; 0x4c9e <EEPROM_enuWriteData+0x15a>
    4ca2:	9a 83       	std	Y+2, r25	; 0x02
    4ca4:	89 83       	std	Y+1, r24	; 0x01

    }

    // Small delay to ensure data is written
    _delay_ms(10);
    Local_enuErrorState = ERROR_STATUS_OK;
    4ca6:	81 e0       	ldi	r24, 0x01	; 1
    4ca8:	88 8b       	std	Y+16, r24	; 0x10
    return Local_enuErrorState;
    4caa:	88 89       	ldd	r24, Y+16	; 0x10
}
    4cac:	62 96       	adiw	r28, 0x12	; 18
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	f8 94       	cli
    4cb2:	de bf       	out	0x3e, r29	; 62
    4cb4:	0f be       	out	0x3f, r0	; 63
    4cb6:	cd bf       	out	0x3d, r28	; 61
    4cb8:	cf 91       	pop	r28
    4cba:	df 91       	pop	r29
    4cbc:	08 95       	ret

00004cbe <EEPROM_enuReadData>:


ErrorStatus_t EEPROM_enuReadData(EEPROM_Input_t* eepromInstance) {
    4cbe:	df 93       	push	r29
    4cc0:	cf 93       	push	r28
    4cc2:	00 d0       	rcall	.+0      	; 0x4cc4 <EEPROM_enuReadData+0x6>
    4cc4:	00 d0       	rcall	.+0      	; 0x4cc6 <EEPROM_enuReadData+0x8>
    4cc6:	cd b7       	in	r28, 0x3d	; 61
    4cc8:	de b7       	in	r29, 0x3e	; 62
    4cca:	9c 83       	std	Y+4, r25	; 0x04
    4ccc:	8b 83       	std	Y+3, r24	; 0x03
    ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    4cce:	1a 82       	std	Y+2, r1	; 0x02

    eepromInstance->data = 0;
    4cd0:	eb 81       	ldd	r30, Y+3	; 0x03
    4cd2:	fc 81       	ldd	r31, Y+4	; 0x04
    4cd4:	11 82       	std	Z+1, r1	; 0x01

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 3) | (eepromInstance->A1 << 2) | (eepromInstance->A0);

	#elif(EEPROM_TYPE == EEPROM_NM24C08 || EEPROM_TYPE == EEPROM_NM24C08F )

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 2) | (eepromInstance->A1 << 1) | (eepromInstance->A0);
    4cd6:	eb 81       	ldd	r30, Y+3	; 0x03
    4cd8:	fc 81       	ldd	r31, Y+4	; 0x04
    4cda:	82 81       	ldd	r24, Z+2	; 0x02
    4cdc:	81 70       	andi	r24, 0x01	; 1
    4cde:	88 2f       	mov	r24, r24
    4ce0:	90 e0       	ldi	r25, 0x00	; 0
    4ce2:	88 0f       	add	r24, r24
    4ce4:	99 1f       	adc	r25, r25
    4ce6:	88 0f       	add	r24, r24
    4ce8:	99 1f       	adc	r25, r25
    4cea:	28 2f       	mov	r18, r24
    4cec:	20 6a       	ori	r18, 0xA0	; 160
    4cee:	eb 81       	ldd	r30, Y+3	; 0x03
    4cf0:	fc 81       	ldd	r31, Y+4	; 0x04
    4cf2:	82 81       	ldd	r24, Z+2	; 0x02
    4cf4:	86 95       	lsr	r24
    4cf6:	81 70       	andi	r24, 0x01	; 1
    4cf8:	88 2f       	mov	r24, r24
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	88 0f       	add	r24, r24
    4cfe:	99 1f       	adc	r25, r25
    4d00:	92 2f       	mov	r25, r18
    4d02:	98 2b       	or	r25, r24
    4d04:	eb 81       	ldd	r30, Y+3	; 0x03
    4d06:	fc 81       	ldd	r31, Y+4	; 0x04
    4d08:	82 81       	ldd	r24, Z+2	; 0x02
    4d0a:	86 95       	lsr	r24
    4d0c:	86 95       	lsr	r24
    4d0e:	81 70       	andi	r24, 0x01	; 1
    4d10:	89 2b       	or	r24, r25
    4d12:	89 83       	std	Y+1, r24	; 0x01
	#if( EEPROM_TYPE == EEPROM_NM24C09 || EEPROM_TYPE == EEPROM_NM24C09F )
		uint8_t Local_u8Address = (0xA0) | (EEPROM_A2_STATE << 2);
	#endif

	// Send start condition
    if( TWI_enuStartCondition() == TWI_STATUS_OK){
    4d14:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_enuStartCondition>
    4d18:	81 30       	cpi	r24, 0x01	; 1
    4d1a:	a9 f4       	brne	.+42     	; 0x4d46 <EEPROM_enuReadData+0x88>

		// Send EEPROM address with write operation
		TWI_enuWriteData(Local_u8Address);
    4d1c:	89 81       	ldd	r24, Y+1	; 0x01
    4d1e:	0e 94 4f 09 	call	0x129e	; 0x129e <TWI_enuWriteData>

		// Send memory address within EEPROM
		TWI_enuWriteData(eepromInstance->address);
    4d22:	eb 81       	ldd	r30, Y+3	; 0x03
    4d24:	fc 81       	ldd	r31, Y+4	; 0x04
    4d26:	80 81       	ld	r24, Z
    4d28:	0e 94 4f 09 	call	0x129e	; 0x129e <TWI_enuWriteData>

		// Send repeated start condition
		TWI_enuStartCondition();
    4d2c:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_enuStartCondition>

		// Send EEPROM address with read operation
		TWI_enuWriteData(Local_u8Address | TWI_ReadOperation);
    4d30:	89 81       	ldd	r24, Y+1	; 0x01
    4d32:	81 60       	ori	r24, 0x01	; 1
    4d34:	0e 94 4f 09 	call	0x129e	; 0x129e <TWI_enuWriteData>

		// Read data from EEPROM
		TWI_enuReadData(&(eepromInstance->data));
    4d38:	8b 81       	ldd	r24, Y+3	; 0x03
    4d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d3c:	01 96       	adiw	r24, 0x01	; 1
    4d3e:	0e 94 75 09 	call	0x12ea	; 0x12ea <TWI_enuReadData>

		// Send stop condition
		TWI_enuStopCondition();
    4d42:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <TWI_enuStopCondition>

    }

    Local_enuErrorState = ERROR_STATUS_OK;
    4d46:	81 e0       	ldi	r24, 0x01	; 1
    4d48:	8a 83       	std	Y+2, r24	; 0x02
    return Local_enuErrorState;
    4d4a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4d4c:	0f 90       	pop	r0
    4d4e:	0f 90       	pop	r0
    4d50:	0f 90       	pop	r0
    4d52:	0f 90       	pop	r0
    4d54:	cf 91       	pop	r28
    4d56:	df 91       	pop	r29
    4d58:	08 95       	ret

00004d5a <EEPROM_WriteDataSequence>:



void EEPROM_WriteDataSequence(EEPROM_Input_t* eepromInstance, const uint8_t *dataBuffer, uint8_t dataLength, uint8_t flag, uint8_t startAddress) {
    4d5a:	0f 93       	push	r16
    4d5c:	df 93       	push	r29
    4d5e:	cf 93       	push	r28
    4d60:	cd b7       	in	r28, 0x3d	; 61
    4d62:	de b7       	in	r29, 0x3e	; 62
    4d64:	28 97       	sbiw	r28, 0x08	; 8
    4d66:	0f b6       	in	r0, 0x3f	; 63
    4d68:	f8 94       	cli
    4d6a:	de bf       	out	0x3e, r29	; 62
    4d6c:	0f be       	out	0x3f, r0	; 63
    4d6e:	cd bf       	out	0x3d, r28	; 61
    4d70:	9b 83       	std	Y+3, r25	; 0x03
    4d72:	8a 83       	std	Y+2, r24	; 0x02
    4d74:	7d 83       	std	Y+5, r23	; 0x05
    4d76:	6c 83       	std	Y+4, r22	; 0x04
    4d78:	4e 83       	std	Y+6, r20	; 0x06
    4d7a:	2f 83       	std	Y+7, r18	; 0x07
    4d7c:	08 87       	std	Y+8, r16	; 0x08
    eepromInstance->address = startAddress;  // Set the EEPROM address to the specified start address
    4d7e:	ea 81       	ldd	r30, Y+2	; 0x02
    4d80:	fb 81       	ldd	r31, Y+3	; 0x03
    4d82:	88 85       	ldd	r24, Y+8	; 0x08
    4d84:	80 83       	st	Z, r24

    for(uint8_t i = 0; i < dataLength; i++) {
    4d86:	19 82       	std	Y+1, r1	; 0x01
    4d88:	1a c0       	rjmp	.+52     	; 0x4dbe <EEPROM_WriteDataSequence+0x64>
        eepromInstance->data = dataBuffer[i];
    4d8a:	89 81       	ldd	r24, Y+1	; 0x01
    4d8c:	28 2f       	mov	r18, r24
    4d8e:	30 e0       	ldi	r19, 0x00	; 0
    4d90:	8c 81       	ldd	r24, Y+4	; 0x04
    4d92:	9d 81       	ldd	r25, Y+5	; 0x05
    4d94:	fc 01       	movw	r30, r24
    4d96:	e2 0f       	add	r30, r18
    4d98:	f3 1f       	adc	r31, r19
    4d9a:	80 81       	ld	r24, Z
    4d9c:	ea 81       	ldd	r30, Y+2	; 0x02
    4d9e:	fb 81       	ldd	r31, Y+3	; 0x03
    4da0:	81 83       	std	Z+1, r24	; 0x01
        EEPROM_enuWriteData(eepromInstance);
    4da2:	8a 81       	ldd	r24, Y+2	; 0x02
    4da4:	9b 81       	ldd	r25, Y+3	; 0x03
    4da6:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <EEPROM_enuWriteData>
        eepromInstance->address++;  // Move to the next address
    4daa:	ea 81       	ldd	r30, Y+2	; 0x02
    4dac:	fb 81       	ldd	r31, Y+3	; 0x03
    4dae:	80 81       	ld	r24, Z
    4db0:	8f 5f       	subi	r24, 0xFF	; 255
    4db2:	ea 81       	ldd	r30, Y+2	; 0x02
    4db4:	fb 81       	ldd	r31, Y+3	; 0x03
    4db6:	80 83       	st	Z, r24


void EEPROM_WriteDataSequence(EEPROM_Input_t* eepromInstance, const uint8_t *dataBuffer, uint8_t dataLength, uint8_t flag, uint8_t startAddress) {
    eepromInstance->address = startAddress;  // Set the EEPROM address to the specified start address

    for(uint8_t i = 0; i < dataLength; i++) {
    4db8:	89 81       	ldd	r24, Y+1	; 0x01
    4dba:	8f 5f       	subi	r24, 0xFF	; 255
    4dbc:	89 83       	std	Y+1, r24	; 0x01
    4dbe:	99 81       	ldd	r25, Y+1	; 0x01
    4dc0:	8e 81       	ldd	r24, Y+6	; 0x06
    4dc2:	98 17       	cp	r25, r24
    4dc4:	10 f3       	brcs	.-60     	; 0x4d8a <EEPROM_WriteDataSequence+0x30>
        eepromInstance->data = dataBuffer[i];
        EEPROM_enuWriteData(eepromInstance);
        eepromInstance->address++;  // Move to the next address
    }

    eepromInstance->data = flag;  // Write the flag to indicate the end of the data
    4dc6:	ea 81       	ldd	r30, Y+2	; 0x02
    4dc8:	fb 81       	ldd	r31, Y+3	; 0x03
    4dca:	8f 81       	ldd	r24, Y+7	; 0x07
    4dcc:	81 83       	std	Z+1, r24	; 0x01
    EEPROM_enuWriteData(eepromInstance);
    4dce:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd2:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <EEPROM_enuWriteData>
}
    4dd6:	28 96       	adiw	r28, 0x08	; 8
    4dd8:	0f b6       	in	r0, 0x3f	; 63
    4dda:	f8 94       	cli
    4ddc:	de bf       	out	0x3e, r29	; 62
    4dde:	0f be       	out	0x3f, r0	; 63
    4de0:	cd bf       	out	0x3d, r28	; 61
    4de2:	cf 91       	pop	r28
    4de4:	df 91       	pop	r29
    4de6:	0f 91       	pop	r16
    4de8:	08 95       	ret

00004dea <EEPROM_SearchForFlag>:

uint8_t EEPROM_SearchForFlag(EEPROM_Input_t eepromInstance, uint8_t flag, uint8_t startAddress, uint8_t dataLength){
    4dea:	0f 93       	push	r16
    4dec:	df 93       	push	r29
    4dee:	cf 93       	push	r28
    4df0:	cd b7       	in	r28, 0x3d	; 61
    4df2:	de b7       	in	r29, 0x3e	; 62
    4df4:	27 97       	sbiw	r28, 0x07	; 7
    4df6:	0f b6       	in	r0, 0x3f	; 63
    4df8:	f8 94       	cli
    4dfa:	de bf       	out	0x3e, r29	; 62
    4dfc:	0f be       	out	0x3f, r0	; 63
    4dfe:	cd bf       	out	0x3d, r28	; 61
    4e00:	69 83       	std	Y+1, r22	; 0x01
    4e02:	7a 83       	std	Y+2, r23	; 0x02
    4e04:	8b 83       	std	Y+3, r24	; 0x03
    4e06:	4c 83       	std	Y+4, r20	; 0x04
    4e08:	2d 83       	std	Y+5, r18	; 0x05
    4e0a:	0e 83       	std	Y+6, r16	; 0x06

    // Set address to start searching from
	eepromInstance.address = startAddress + dataLength;
    4e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    4e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    4e10:	89 0f       	add	r24, r25
    4e12:	89 83       	std	Y+1, r24	; 0x01

    // Read the data at the address where the flag is expected
    EEPROM_enuReadData(&eepromInstance);
    4e14:	ce 01       	movw	r24, r28
    4e16:	01 96       	adiw	r24, 0x01	; 1
    4e18:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <EEPROM_enuReadData>

    // Check if the read data matches the flag
    if (eepromInstance.data == flag) {
    4e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    4e20:	98 17       	cp	r25, r24
    4e22:	19 f4       	brne	.+6      	; 0x4e2a <EEPROM_SearchForFlag+0x40>
        return 1;  // Flag found
    4e24:	81 e0       	ldi	r24, 0x01	; 1
    4e26:	8f 83       	std	Y+7, r24	; 0x07
    4e28:	01 c0       	rjmp	.+2      	; 0x4e2c <EEPROM_SearchForFlag+0x42>
    }

    return 0;  // Flag not found
    4e2a:	1f 82       	std	Y+7, r1	; 0x07
    4e2c:	8f 81       	ldd	r24, Y+7	; 0x07

}
    4e2e:	27 96       	adiw	r28, 0x07	; 7
    4e30:	0f b6       	in	r0, 0x3f	; 63
    4e32:	f8 94       	cli
    4e34:	de bf       	out	0x3e, r29	; 62
    4e36:	0f be       	out	0x3f, r0	; 63
    4e38:	cd bf       	out	0x3d, r28	; 61
    4e3a:	cf 91       	pop	r28
    4e3c:	df 91       	pop	r29
    4e3e:	0f 91       	pop	r16
    4e40:	08 95       	ret

00004e42 <EEPROM_Format>:


void EEPROM_Format(EEPROM_Input_t* eepromInstance) {
    4e42:	df 93       	push	r29
    4e44:	cf 93       	push	r28
    4e46:	cd b7       	in	r28, 0x3d	; 61
    4e48:	de b7       	in	r29, 0x3e	; 62
    4e4a:	28 97       	sbiw	r28, 0x08	; 8
    4e4c:	0f b6       	in	r0, 0x3f	; 63
    4e4e:	f8 94       	cli
    4e50:	de bf       	out	0x3e, r29	; 62
    4e52:	0f be       	out	0x3f, r0	; 63
    4e54:	cd bf       	out	0x3d, r28	; 61
    4e56:	98 87       	std	Y+8, r25	; 0x08
    4e58:	8f 83       	std	Y+7, r24	; 0x07
    // Define the starting address and the end address
    uint16_t startAddress = 0x00; // Starting address of EEPROM
    4e5a:	1e 82       	std	Y+6, r1	; 0x06
    4e5c:	1d 82       	std	Y+5, r1	; 0x05
    uint16_t endAddress = 0xFF;   // Ending address of EEPROM (example)
    4e5e:	8f ef       	ldi	r24, 0xFF	; 255
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	9c 83       	std	Y+4, r25	; 0x04
    4e64:	8b 83       	std	Y+3, r24	; 0x03

    // Set the EEPROM address to the start address
    eepromInstance->address = startAddress;
    4e66:	8d 81       	ldd	r24, Y+5	; 0x05
    4e68:	ef 81       	ldd	r30, Y+7	; 0x07
    4e6a:	f8 85       	ldd	r31, Y+8	; 0x08
    4e6c:	80 83       	st	Z, r24

    // Write the default value (e.g., 0x00) to each address in EEPROM
    for (uint16_t address = startAddress; address <= endAddress; address++) {
    4e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e70:	9e 81       	ldd	r25, Y+6	; 0x06
    4e72:	9a 83       	std	Y+2, r25	; 0x02
    4e74:	89 83       	std	Y+1, r24	; 0x01
    4e76:	13 c0       	rjmp	.+38     	; 0x4e9e <EEPROM_Format+0x5c>
        eepromInstance->data = 0x00;  // Default value
    4e78:	ef 81       	ldd	r30, Y+7	; 0x07
    4e7a:	f8 85       	ldd	r31, Y+8	; 0x08
    4e7c:	11 82       	std	Z+1, r1	; 0x01
        EEPROM_enuWriteData(eepromInstance);  // Write to EEPROM
    4e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    4e80:	98 85       	ldd	r25, Y+8	; 0x08
    4e82:	0e 94 a2 25 	call	0x4b44	; 0x4b44 <EEPROM_enuWriteData>
        eepromInstance->address++;  // Move to the next address
    4e86:	ef 81       	ldd	r30, Y+7	; 0x07
    4e88:	f8 85       	ldd	r31, Y+8	; 0x08
    4e8a:	80 81       	ld	r24, Z
    4e8c:	8f 5f       	subi	r24, 0xFF	; 255
    4e8e:	ef 81       	ldd	r30, Y+7	; 0x07
    4e90:	f8 85       	ldd	r31, Y+8	; 0x08
    4e92:	80 83       	st	Z, r24

    // Set the EEPROM address to the start address
    eepromInstance->address = startAddress;

    // Write the default value (e.g., 0x00) to each address in EEPROM
    for (uint16_t address = startAddress; address <= endAddress; address++) {
    4e94:	89 81       	ldd	r24, Y+1	; 0x01
    4e96:	9a 81       	ldd	r25, Y+2	; 0x02
    4e98:	01 96       	adiw	r24, 0x01	; 1
    4e9a:	9a 83       	std	Y+2, r25	; 0x02
    4e9c:	89 83       	std	Y+1, r24	; 0x01
    4e9e:	29 81       	ldd	r18, Y+1	; 0x01
    4ea0:	3a 81       	ldd	r19, Y+2	; 0x02
    4ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ea6:	82 17       	cp	r24, r18
    4ea8:	93 07       	cpc	r25, r19
    4eaa:	30 f7       	brcc	.-52     	; 0x4e78 <EEPROM_Format+0x36>
        eepromInstance->data = 0x00;  // Default value
        EEPROM_enuWriteData(eepromInstance);  // Write to EEPROM
        eepromInstance->address++;  // Move to the next address
    }
}
    4eac:	28 96       	adiw	r28, 0x08	; 8
    4eae:	0f b6       	in	r0, 0x3f	; 63
    4eb0:	f8 94       	cli
    4eb2:	de bf       	out	0x3e, r29	; 62
    4eb4:	0f be       	out	0x3f, r0	; 63
    4eb6:	cd bf       	out	0x3d, r28	; 61
    4eb8:	cf 91       	pop	r28
    4eba:	df 91       	pop	r29
    4ebc:	08 95       	ret

00004ebe <Buzzer_voidInit>:
#include "../../MCAL/DIO/DIO_interface.h"
/****************************************************************/



void Buzzer_voidInit(Buzzer_t *Copy_Buzzer){
    4ebe:	df 93       	push	r29
    4ec0:	cf 93       	push	r28
    4ec2:	00 d0       	rcall	.+0      	; 0x4ec4 <Buzzer_voidInit+0x6>
    4ec4:	cd b7       	in	r28, 0x3d	; 61
    4ec6:	de b7       	in	r29, 0x3e	; 62
    4ec8:	9a 83       	std	Y+2, r25	; 0x02
    4eca:	89 83       	std	Y+1, r24	; 0x01
	 DIO_enuSetPinDirection(Copy_Buzzer->PortID, Copy_Buzzer->PortID, DIO_u8OUTPUT);
    4ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    4ece:	fa 81       	ldd	r31, Y+2	; 0x02
    4ed0:	80 81       	ld	r24, Z
    4ed2:	e9 81       	ldd	r30, Y+1	; 0x01
    4ed4:	fa 81       	ldd	r31, Y+2	; 0x02
    4ed6:	90 81       	ld	r25, Z
    4ed8:	69 2f       	mov	r22, r25
    4eda:	41 e0       	ldi	r20, 0x01	; 1
    4edc:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <DIO_enuSetPinDirection>
}
    4ee0:	0f 90       	pop	r0
    4ee2:	0f 90       	pop	r0
    4ee4:	cf 91       	pop	r28
    4ee6:	df 91       	pop	r29
    4ee8:	08 95       	ret

00004eea <Buzzer_voidON>:

void Buzzer_voidON(Buzzer_t *Copy_Buzzer){
    4eea:	df 93       	push	r29
    4eec:	cf 93       	push	r28
    4eee:	00 d0       	rcall	.+0      	; 0x4ef0 <Buzzer_voidON+0x6>
    4ef0:	cd b7       	in	r28, 0x3d	; 61
    4ef2:	de b7       	in	r29, 0x3e	; 62
    4ef4:	9a 83       	std	Y+2, r25	; 0x02
    4ef6:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID, DIO_u8HIGH);
    4ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    4efa:	fa 81       	ldd	r31, Y+2	; 0x02
    4efc:	80 81       	ld	r24, Z
    4efe:	e9 81       	ldd	r30, Y+1	; 0x01
    4f00:	fa 81       	ldd	r31, Y+2	; 0x02
    4f02:	91 81       	ldd	r25, Z+1	; 0x01
    4f04:	69 2f       	mov	r22, r25
    4f06:	41 e0       	ldi	r20, 0x01	; 1
    4f08:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
}
    4f0c:	0f 90       	pop	r0
    4f0e:	0f 90       	pop	r0
    4f10:	cf 91       	pop	r28
    4f12:	df 91       	pop	r29
    4f14:	08 95       	ret

00004f16 <Buzzer_voidOFF>:

void Buzzer_voidOFF(Buzzer_t *Copy_Buzzer){
    4f16:	df 93       	push	r29
    4f18:	cf 93       	push	r28
    4f1a:	00 d0       	rcall	.+0      	; 0x4f1c <Buzzer_voidOFF+0x6>
    4f1c:	cd b7       	in	r28, 0x3d	; 61
    4f1e:	de b7       	in	r29, 0x3e	; 62
    4f20:	9a 83       	std	Y+2, r25	; 0x02
    4f22:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID, DIO_u8LOW);
    4f24:	e9 81       	ldd	r30, Y+1	; 0x01
    4f26:	fa 81       	ldd	r31, Y+2	; 0x02
    4f28:	80 81       	ld	r24, Z
    4f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    4f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    4f2e:	91 81       	ldd	r25, Z+1	; 0x01
    4f30:	69 2f       	mov	r22, r25
    4f32:	40 e0       	ldi	r20, 0x00	; 0
    4f34:	0e 94 96 18 	call	0x312c	; 0x312c <DIO_enuSetPinValue>
}
    4f38:	0f 90       	pop	r0
    4f3a:	0f 90       	pop	r0
    4f3c:	cf 91       	pop	r28
    4f3e:	df 91       	pop	r29
    4f40:	08 95       	ret

00004f42 <Buzzer_voidTOGGLE>:

void Buzzer_voidTOGGLE(Buzzer_t *Copy_Buzzer){
    4f42:	df 93       	push	r29
    4f44:	cf 93       	push	r28
    4f46:	00 d0       	rcall	.+0      	; 0x4f48 <Buzzer_voidTOGGLE+0x6>
    4f48:	cd b7       	in	r28, 0x3d	; 61
    4f4a:	de b7       	in	r29, 0x3e	; 62
    4f4c:	9a 83       	std	Y+2, r25	; 0x02
    4f4e:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuTogglePinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID);
    4f50:	e9 81       	ldd	r30, Y+1	; 0x01
    4f52:	fa 81       	ldd	r31, Y+2	; 0x02
    4f54:	80 81       	ld	r24, Z
    4f56:	e9 81       	ldd	r30, Y+1	; 0x01
    4f58:	fa 81       	ldd	r31, Y+2	; 0x02
    4f5a:	91 81       	ldd	r25, Z+1	; 0x01
    4f5c:	69 2f       	mov	r22, r25
    4f5e:	0e 94 33 1a 	call	0x3466	; 0x3466 <DIO_enuTogglePinValue>
}
    4f62:	0f 90       	pop	r0
    4f64:	0f 90       	pop	r0
    4f66:	cf 91       	pop	r28
    4f68:	df 91       	pop	r29
    4f6a:	08 95       	ret

00004f6c <main>:
#include "MCAL/DIO/DIO_interface.h"
#include "MCAL/TIMER/TIMER_interface.h"

#include "HAL/servoMotor/servo_interface.h"
int main(){
    4f6c:	df 93       	push	r29
    4f6e:	cf 93       	push	r28
    4f70:	cd b7       	in	r28, 0x3d	; 61
    4f72:	de b7       	in	r29, 0x3e	; 62

	servo_init();
    4f74:	0e 94 51 1e 	call	0x3ca2	; 0x3ca2 <servo_init>

	servo_SetAngle(40, 'A');
    4f78:	88 e2       	ldi	r24, 0x28	; 40
    4f7a:	61 e4       	ldi	r22, 0x41	; 65
    4f7c:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <servo_SetAngle>

	servo_SetAngle(50, 'B');
    4f80:	82 e3       	ldi	r24, 0x32	; 50
    4f82:	62 e4       	ldi	r22, 0x42	; 66
    4f84:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <servo_SetAngle>
    4f88:	ff cf       	rjmp	.-2      	; 0x4f88 <main+0x1c>

00004f8a <__mulsi3>:
    4f8a:	62 9f       	mul	r22, r18
    4f8c:	d0 01       	movw	r26, r0
    4f8e:	73 9f       	mul	r23, r19
    4f90:	f0 01       	movw	r30, r0
    4f92:	82 9f       	mul	r24, r18
    4f94:	e0 0d       	add	r30, r0
    4f96:	f1 1d       	adc	r31, r1
    4f98:	64 9f       	mul	r22, r20
    4f9a:	e0 0d       	add	r30, r0
    4f9c:	f1 1d       	adc	r31, r1
    4f9e:	92 9f       	mul	r25, r18
    4fa0:	f0 0d       	add	r31, r0
    4fa2:	83 9f       	mul	r24, r19
    4fa4:	f0 0d       	add	r31, r0
    4fa6:	74 9f       	mul	r23, r20
    4fa8:	f0 0d       	add	r31, r0
    4faa:	65 9f       	mul	r22, r21
    4fac:	f0 0d       	add	r31, r0
    4fae:	99 27       	eor	r25, r25
    4fb0:	72 9f       	mul	r23, r18
    4fb2:	b0 0d       	add	r27, r0
    4fb4:	e1 1d       	adc	r30, r1
    4fb6:	f9 1f       	adc	r31, r25
    4fb8:	63 9f       	mul	r22, r19
    4fba:	b0 0d       	add	r27, r0
    4fbc:	e1 1d       	adc	r30, r1
    4fbe:	f9 1f       	adc	r31, r25
    4fc0:	bd 01       	movw	r22, r26
    4fc2:	cf 01       	movw	r24, r30
    4fc4:	11 24       	eor	r1, r1
    4fc6:	08 95       	ret

00004fc8 <__udivmodhi4>:
    4fc8:	aa 1b       	sub	r26, r26
    4fca:	bb 1b       	sub	r27, r27
    4fcc:	51 e1       	ldi	r21, 0x11	; 17
    4fce:	07 c0       	rjmp	.+14     	; 0x4fde <__udivmodhi4_ep>

00004fd0 <__udivmodhi4_loop>:
    4fd0:	aa 1f       	adc	r26, r26
    4fd2:	bb 1f       	adc	r27, r27
    4fd4:	a6 17       	cp	r26, r22
    4fd6:	b7 07       	cpc	r27, r23
    4fd8:	10 f0       	brcs	.+4      	; 0x4fde <__udivmodhi4_ep>
    4fda:	a6 1b       	sub	r26, r22
    4fdc:	b7 0b       	sbc	r27, r23

00004fde <__udivmodhi4_ep>:
    4fde:	88 1f       	adc	r24, r24
    4fe0:	99 1f       	adc	r25, r25
    4fe2:	5a 95       	dec	r21
    4fe4:	a9 f7       	brne	.-22     	; 0x4fd0 <__udivmodhi4_loop>
    4fe6:	80 95       	com	r24
    4fe8:	90 95       	com	r25
    4fea:	bc 01       	movw	r22, r24
    4fec:	cd 01       	movw	r24, r26
    4fee:	08 95       	ret

00004ff0 <__udivmodsi4>:
    4ff0:	a1 e2       	ldi	r26, 0x21	; 33
    4ff2:	1a 2e       	mov	r1, r26
    4ff4:	aa 1b       	sub	r26, r26
    4ff6:	bb 1b       	sub	r27, r27
    4ff8:	fd 01       	movw	r30, r26
    4ffa:	0d c0       	rjmp	.+26     	; 0x5016 <__udivmodsi4_ep>

00004ffc <__udivmodsi4_loop>:
    4ffc:	aa 1f       	adc	r26, r26
    4ffe:	bb 1f       	adc	r27, r27
    5000:	ee 1f       	adc	r30, r30
    5002:	ff 1f       	adc	r31, r31
    5004:	a2 17       	cp	r26, r18
    5006:	b3 07       	cpc	r27, r19
    5008:	e4 07       	cpc	r30, r20
    500a:	f5 07       	cpc	r31, r21
    500c:	20 f0       	brcs	.+8      	; 0x5016 <__udivmodsi4_ep>
    500e:	a2 1b       	sub	r26, r18
    5010:	b3 0b       	sbc	r27, r19
    5012:	e4 0b       	sbc	r30, r20
    5014:	f5 0b       	sbc	r31, r21

00005016 <__udivmodsi4_ep>:
    5016:	66 1f       	adc	r22, r22
    5018:	77 1f       	adc	r23, r23
    501a:	88 1f       	adc	r24, r24
    501c:	99 1f       	adc	r25, r25
    501e:	1a 94       	dec	r1
    5020:	69 f7       	brne	.-38     	; 0x4ffc <__udivmodsi4_loop>
    5022:	60 95       	com	r22
    5024:	70 95       	com	r23
    5026:	80 95       	com	r24
    5028:	90 95       	com	r25
    502a:	9b 01       	movw	r18, r22
    502c:	ac 01       	movw	r20, r24
    502e:	bd 01       	movw	r22, r26
    5030:	cf 01       	movw	r24, r30
    5032:	08 95       	ret

00005034 <__divmodsi4>:
    5034:	97 fb       	bst	r25, 7
    5036:	09 2e       	mov	r0, r25
    5038:	05 26       	eor	r0, r21
    503a:	0e d0       	rcall	.+28     	; 0x5058 <__divmodsi4_neg1>
    503c:	57 fd       	sbrc	r21, 7
    503e:	04 d0       	rcall	.+8      	; 0x5048 <__divmodsi4_neg2>
    5040:	d7 df       	rcall	.-82     	; 0x4ff0 <__udivmodsi4>
    5042:	0a d0       	rcall	.+20     	; 0x5058 <__divmodsi4_neg1>
    5044:	00 1c       	adc	r0, r0
    5046:	38 f4       	brcc	.+14     	; 0x5056 <__divmodsi4_exit>

00005048 <__divmodsi4_neg2>:
    5048:	50 95       	com	r21
    504a:	40 95       	com	r20
    504c:	30 95       	com	r19
    504e:	21 95       	neg	r18
    5050:	3f 4f       	sbci	r19, 0xFF	; 255
    5052:	4f 4f       	sbci	r20, 0xFF	; 255
    5054:	5f 4f       	sbci	r21, 0xFF	; 255

00005056 <__divmodsi4_exit>:
    5056:	08 95       	ret

00005058 <__divmodsi4_neg1>:
    5058:	f6 f7       	brtc	.-4      	; 0x5056 <__divmodsi4_exit>
    505a:	90 95       	com	r25
    505c:	80 95       	com	r24
    505e:	70 95       	com	r23
    5060:	61 95       	neg	r22
    5062:	7f 4f       	sbci	r23, 0xFF	; 255
    5064:	8f 4f       	sbci	r24, 0xFF	; 255
    5066:	9f 4f       	sbci	r25, 0xFF	; 255
    5068:	08 95       	ret

0000506a <__prologue_saves__>:
    506a:	2f 92       	push	r2
    506c:	3f 92       	push	r3
    506e:	4f 92       	push	r4
    5070:	5f 92       	push	r5
    5072:	6f 92       	push	r6
    5074:	7f 92       	push	r7
    5076:	8f 92       	push	r8
    5078:	9f 92       	push	r9
    507a:	af 92       	push	r10
    507c:	bf 92       	push	r11
    507e:	cf 92       	push	r12
    5080:	df 92       	push	r13
    5082:	ef 92       	push	r14
    5084:	ff 92       	push	r15
    5086:	0f 93       	push	r16
    5088:	1f 93       	push	r17
    508a:	cf 93       	push	r28
    508c:	df 93       	push	r29
    508e:	cd b7       	in	r28, 0x3d	; 61
    5090:	de b7       	in	r29, 0x3e	; 62
    5092:	ca 1b       	sub	r28, r26
    5094:	db 0b       	sbc	r29, r27
    5096:	0f b6       	in	r0, 0x3f	; 63
    5098:	f8 94       	cli
    509a:	de bf       	out	0x3e, r29	; 62
    509c:	0f be       	out	0x3f, r0	; 63
    509e:	cd bf       	out	0x3d, r28	; 61
    50a0:	09 94       	ijmp

000050a2 <__epilogue_restores__>:
    50a2:	2a 88       	ldd	r2, Y+18	; 0x12
    50a4:	39 88       	ldd	r3, Y+17	; 0x11
    50a6:	48 88       	ldd	r4, Y+16	; 0x10
    50a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    50aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    50ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    50ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    50b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    50b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    50b4:	b9 84       	ldd	r11, Y+9	; 0x09
    50b6:	c8 84       	ldd	r12, Y+8	; 0x08
    50b8:	df 80       	ldd	r13, Y+7	; 0x07
    50ba:	ee 80       	ldd	r14, Y+6	; 0x06
    50bc:	fd 80       	ldd	r15, Y+5	; 0x05
    50be:	0c 81       	ldd	r16, Y+4	; 0x04
    50c0:	1b 81       	ldd	r17, Y+3	; 0x03
    50c2:	aa 81       	ldd	r26, Y+2	; 0x02
    50c4:	b9 81       	ldd	r27, Y+1	; 0x01
    50c6:	ce 0f       	add	r28, r30
    50c8:	d1 1d       	adc	r29, r1
    50ca:	0f b6       	in	r0, 0x3f	; 63
    50cc:	f8 94       	cli
    50ce:	de bf       	out	0x3e, r29	; 62
    50d0:	0f be       	out	0x3f, r0	; 63
    50d2:	cd bf       	out	0x3d, r28	; 61
    50d4:	ed 01       	movw	r28, r26
    50d6:	08 95       	ret

000050d8 <round>:
    50d8:	50 d0       	rcall	.+160    	; 0x517a <__fp_splitA>
    50da:	e0 f0       	brcs	.+56     	; 0x5114 <round+0x3c>
    50dc:	9e 37       	cpi	r25, 0x7E	; 126
    50de:	d8 f0       	brcs	.+54     	; 0x5116 <round+0x3e>
    50e0:	96 39       	cpi	r25, 0x96	; 150
    50e2:	b8 f4       	brcc	.+46     	; 0x5112 <round+0x3a>
    50e4:	9e 38       	cpi	r25, 0x8E	; 142
    50e6:	48 f4       	brcc	.+18     	; 0x50fa <round+0x22>
    50e8:	67 2f       	mov	r22, r23
    50ea:	78 2f       	mov	r23, r24
    50ec:	88 27       	eor	r24, r24
    50ee:	98 5f       	subi	r25, 0xF8	; 248
    50f0:	f9 cf       	rjmp	.-14     	; 0x50e4 <round+0xc>
    50f2:	86 95       	lsr	r24
    50f4:	77 95       	ror	r23
    50f6:	67 95       	ror	r22
    50f8:	93 95       	inc	r25
    50fa:	95 39       	cpi	r25, 0x95	; 149
    50fc:	d0 f3       	brcs	.-12     	; 0x50f2 <round+0x1a>
    50fe:	b6 2f       	mov	r27, r22
    5100:	b1 70       	andi	r27, 0x01	; 1
    5102:	6b 0f       	add	r22, r27
    5104:	71 1d       	adc	r23, r1
    5106:	81 1d       	adc	r24, r1
    5108:	20 f4       	brcc	.+8      	; 0x5112 <round+0x3a>
    510a:	87 95       	ror	r24
    510c:	77 95       	ror	r23
    510e:	67 95       	ror	r22
    5110:	93 95       	inc	r25
    5112:	02 c0       	rjmp	.+4      	; 0x5118 <__fp_mintl>
    5114:	1c c0       	rjmp	.+56     	; 0x514e <__fp_mpack>
    5116:	4c c0       	rjmp	.+152    	; 0x51b0 <__fp_szero>

00005118 <__fp_mintl>:
    5118:	88 23       	and	r24, r24
    511a:	71 f4       	brne	.+28     	; 0x5138 <__fp_mintl+0x20>
    511c:	77 23       	and	r23, r23
    511e:	21 f0       	breq	.+8      	; 0x5128 <__fp_mintl+0x10>
    5120:	98 50       	subi	r25, 0x08	; 8
    5122:	87 2b       	or	r24, r23
    5124:	76 2f       	mov	r23, r22
    5126:	07 c0       	rjmp	.+14     	; 0x5136 <__fp_mintl+0x1e>
    5128:	66 23       	and	r22, r22
    512a:	11 f4       	brne	.+4      	; 0x5130 <__fp_mintl+0x18>
    512c:	99 27       	eor	r25, r25
    512e:	0d c0       	rjmp	.+26     	; 0x514a <__fp_mintl+0x32>
    5130:	90 51       	subi	r25, 0x10	; 16
    5132:	86 2b       	or	r24, r22
    5134:	70 e0       	ldi	r23, 0x00	; 0
    5136:	60 e0       	ldi	r22, 0x00	; 0
    5138:	2a f0       	brmi	.+10     	; 0x5144 <__fp_mintl+0x2c>
    513a:	9a 95       	dec	r25
    513c:	66 0f       	add	r22, r22
    513e:	77 1f       	adc	r23, r23
    5140:	88 1f       	adc	r24, r24
    5142:	da f7       	brpl	.-10     	; 0x513a <__fp_mintl+0x22>
    5144:	88 0f       	add	r24, r24
    5146:	96 95       	lsr	r25
    5148:	87 95       	ror	r24
    514a:	97 f9       	bld	r25, 7
    514c:	08 95       	ret

0000514e <__fp_mpack>:
    514e:	9f 3f       	cpi	r25, 0xFF	; 255
    5150:	31 f0       	breq	.+12     	; 0x515e <__fp_mpack_finite+0xc>

00005152 <__fp_mpack_finite>:
    5152:	91 50       	subi	r25, 0x01	; 1
    5154:	20 f4       	brcc	.+8      	; 0x515e <__fp_mpack_finite+0xc>
    5156:	87 95       	ror	r24
    5158:	77 95       	ror	r23
    515a:	67 95       	ror	r22
    515c:	b7 95       	ror	r27
    515e:	88 0f       	add	r24, r24
    5160:	91 1d       	adc	r25, r1
    5162:	96 95       	lsr	r25
    5164:	87 95       	ror	r24
    5166:	97 f9       	bld	r25, 7
    5168:	08 95       	ret

0000516a <__fp_split3>:
    516a:	57 fd       	sbrc	r21, 7
    516c:	90 58       	subi	r25, 0x80	; 128
    516e:	44 0f       	add	r20, r20
    5170:	55 1f       	adc	r21, r21
    5172:	59 f0       	breq	.+22     	; 0x518a <__fp_splitA+0x10>
    5174:	5f 3f       	cpi	r21, 0xFF	; 255
    5176:	71 f0       	breq	.+28     	; 0x5194 <__fp_splitA+0x1a>
    5178:	47 95       	ror	r20

0000517a <__fp_splitA>:
    517a:	88 0f       	add	r24, r24
    517c:	97 fb       	bst	r25, 7
    517e:	99 1f       	adc	r25, r25
    5180:	61 f0       	breq	.+24     	; 0x519a <__fp_splitA+0x20>
    5182:	9f 3f       	cpi	r25, 0xFF	; 255
    5184:	79 f0       	breq	.+30     	; 0x51a4 <__fp_splitA+0x2a>
    5186:	87 95       	ror	r24
    5188:	08 95       	ret
    518a:	12 16       	cp	r1, r18
    518c:	13 06       	cpc	r1, r19
    518e:	14 06       	cpc	r1, r20
    5190:	55 1f       	adc	r21, r21
    5192:	f2 cf       	rjmp	.-28     	; 0x5178 <__fp_split3+0xe>
    5194:	46 95       	lsr	r20
    5196:	f1 df       	rcall	.-30     	; 0x517a <__fp_splitA>
    5198:	08 c0       	rjmp	.+16     	; 0x51aa <__fp_splitA+0x30>
    519a:	16 16       	cp	r1, r22
    519c:	17 06       	cpc	r1, r23
    519e:	18 06       	cpc	r1, r24
    51a0:	99 1f       	adc	r25, r25
    51a2:	f1 cf       	rjmp	.-30     	; 0x5186 <__fp_splitA+0xc>
    51a4:	86 95       	lsr	r24
    51a6:	71 05       	cpc	r23, r1
    51a8:	61 05       	cpc	r22, r1
    51aa:	08 94       	sec
    51ac:	08 95       	ret

000051ae <__fp_zero>:
    51ae:	e8 94       	clt

000051b0 <__fp_szero>:
    51b0:	bb 27       	eor	r27, r27
    51b2:	66 27       	eor	r22, r22
    51b4:	77 27       	eor	r23, r23
    51b6:	cb 01       	movw	r24, r22
    51b8:	97 f9       	bld	r25, 7
    51ba:	08 95       	ret

000051bc <_exit>:
    51bc:	f8 94       	cli

000051be <__stop_program>:
    51be:	ff cf       	rjmp	.-2      	; 0x51be <__stop_program>
