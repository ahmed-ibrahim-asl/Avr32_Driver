
Avr32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005f1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00005f1e  00005fb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800184  00800184  000060d6  2**0
                  ALLOC
  3 .stab         00007950  00000000  00000000  000060d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003d16  00000000  00000000  0000da28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0001173e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  000118fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00011b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00014198  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00015678  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00016924  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  00016b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  00016e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000177ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__ctors_end>
       4:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <__vector_1>
       8:	0c 94 0c 18 	jmp	0x3018	; 0x3018 <__vector_2>
       c:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__vector_3>
      10:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__vector_4>
      14:	0c 94 9c 12 	jmp	0x2538	; 0x2538 <__vector_5>
      18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      1c:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__vector_7>
      20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      24:	0c 94 e2 11 	jmp	0x23c4	; 0x23c4 <__vector_9>
      28:	0c 94 85 11 	jmp	0x230a	; 0x230a <__vector_10>
      2c:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__vector_11>
      30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      38:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      40:	0c 94 b5 1d 	jmp	0x3b6a	; 0x3b6a <__vector_16>
      44:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      4c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
      50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

00000054 <GLCD_CharacterSet>:
      54:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      64:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      74:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      84:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      94:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      a4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      b4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      c4:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      d4:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      e4:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
      f4:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     104:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     114:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     124:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     134:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     144:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     154:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     164:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     174:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     184:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     194:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1a4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1b4:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1c4:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1d4:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1e4:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     1f4:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     204:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     214:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     224:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf e5       	ldi	r28, 0x5F	; 95
     23a:	d8 e0       	ldi	r29, 0x08	; 8
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	11 e0       	ldi	r17, 0x01	; 1
     242:	a0 e6       	ldi	r26, 0x60	; 96
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	ee e1       	ldi	r30, 0x1E	; 30
     248:	ff e5       	ldi	r31, 0x5F	; 95
     24a:	02 c0       	rjmp	.+4      	; 0x250 <.do_copy_data_start>

0000024c <.do_copy_data_loop>:
     24c:	05 90       	lpm	r0, Z+
     24e:	0d 92       	st	X+, r0

00000250 <.do_copy_data_start>:
     250:	a4 38       	cpi	r26, 0x84	; 132
     252:	b1 07       	cpc	r27, r17
     254:	d9 f7       	brne	.-10     	; 0x24c <.do_copy_data_loop>

00000256 <__do_clear_bss>:
     256:	11 e0       	ldi	r17, 0x01	; 1
     258:	a4 e8       	ldi	r26, 0x84	; 132
     25a:	b1 e0       	ldi	r27, 0x01	; 1
     25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
     25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
     260:	ab 3a       	cpi	r26, 0xAB	; 171
     262:	b1 07       	cpc	r27, r17
     264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
     266:	0e 94 cb 2d 	call	0x5b96	; 0x5b96 <main>
     26a:	0c 94 8d 2f 	jmp	0x5f1a	; 0x5f1a <_exit>

0000026e <__bad_interrupt>:
     26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <__fixunssfsi>:
     272:	ef 92       	push	r14
     274:	ff 92       	push	r15
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	7b 01       	movw	r14, r22
     27c:	8c 01       	movw	r16, r24
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	40 e0       	ldi	r20, 0x00	; 0
     284:	5f e4       	ldi	r21, 0x4F	; 79
     286:	0e 94 15 05 	call	0xa2a	; 0xa2a <__gesf2>
     28a:	88 23       	and	r24, r24
     28c:	8c f0       	brlt	.+34     	; 0x2b0 <__fixunssfsi+0x3e>
     28e:	c8 01       	movw	r24, r16
     290:	b7 01       	movw	r22, r14
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	5f e4       	ldi	r21, 0x4F	; 79
     29a:	0e 94 b1 02 	call	0x562	; 0x562 <__subsf3>
     29e:	0e 94 75 05 	call	0xaea	; 0xaea <__fixsfsi>
     2a2:	9b 01       	movw	r18, r22
     2a4:	ac 01       	movw	r20, r24
     2a6:	20 50       	subi	r18, 0x00	; 0
     2a8:	30 40       	sbci	r19, 0x00	; 0
     2aa:	40 40       	sbci	r20, 0x00	; 0
     2ac:	50 48       	sbci	r21, 0x80	; 128
     2ae:	06 c0       	rjmp	.+12     	; 0x2bc <__fixunssfsi+0x4a>
     2b0:	c8 01       	movw	r24, r16
     2b2:	b7 01       	movw	r22, r14
     2b4:	0e 94 75 05 	call	0xaea	; 0xaea <__fixsfsi>
     2b8:	9b 01       	movw	r18, r22
     2ba:	ac 01       	movw	r20, r24
     2bc:	b9 01       	movw	r22, r18
     2be:	ca 01       	movw	r24, r20
     2c0:	1f 91       	pop	r17
     2c2:	0f 91       	pop	r16
     2c4:	ff 90       	pop	r15
     2c6:	ef 90       	pop	r14
     2c8:	08 95       	ret

000002ca <_fpadd_parts>:
     2ca:	a0 e0       	ldi	r26, 0x00	; 0
     2cc:	b0 e0       	ldi	r27, 0x00	; 0
     2ce:	eb e6       	ldi	r30, 0x6B	; 107
     2d0:	f1 e0       	ldi	r31, 0x01	; 1
     2d2:	0c 94 e4 2e 	jmp	0x5dc8	; 0x5dc8 <__prologue_saves__>
     2d6:	dc 01       	movw	r26, r24
     2d8:	2b 01       	movw	r4, r22
     2da:	fa 01       	movw	r30, r20
     2dc:	9c 91       	ld	r25, X
     2de:	92 30       	cpi	r25, 0x02	; 2
     2e0:	08 f4       	brcc	.+2      	; 0x2e4 <_fpadd_parts+0x1a>
     2e2:	39 c1       	rjmp	.+626    	; 0x556 <_fpadd_parts+0x28c>
     2e4:	eb 01       	movw	r28, r22
     2e6:	88 81       	ld	r24, Y
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	08 f4       	brcc	.+2      	; 0x2ee <_fpadd_parts+0x24>
     2ec:	33 c1       	rjmp	.+614    	; 0x554 <_fpadd_parts+0x28a>
     2ee:	94 30       	cpi	r25, 0x04	; 4
     2f0:	69 f4       	brne	.+26     	; 0x30c <_fpadd_parts+0x42>
     2f2:	84 30       	cpi	r24, 0x04	; 4
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <_fpadd_parts+0x2e>
     2f6:	2f c1       	rjmp	.+606    	; 0x556 <_fpadd_parts+0x28c>
     2f8:	11 96       	adiw	r26, 0x01	; 1
     2fa:	9c 91       	ld	r25, X
     2fc:	11 97       	sbiw	r26, 0x01	; 1
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	98 17       	cp	r25, r24
     302:	09 f4       	brne	.+2      	; 0x306 <_fpadd_parts+0x3c>
     304:	28 c1       	rjmp	.+592    	; 0x556 <_fpadd_parts+0x28c>
     306:	a6 e6       	ldi	r26, 0x66	; 102
     308:	b0 e0       	ldi	r27, 0x00	; 0
     30a:	25 c1       	rjmp	.+586    	; 0x556 <_fpadd_parts+0x28c>
     30c:	84 30       	cpi	r24, 0x04	; 4
     30e:	09 f4       	brne	.+2      	; 0x312 <_fpadd_parts+0x48>
     310:	21 c1       	rjmp	.+578    	; 0x554 <_fpadd_parts+0x28a>
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	a9 f4       	brne	.+42     	; 0x340 <_fpadd_parts+0x76>
     316:	92 30       	cpi	r25, 0x02	; 2
     318:	09 f0       	breq	.+2      	; 0x31c <_fpadd_parts+0x52>
     31a:	1d c1       	rjmp	.+570    	; 0x556 <_fpadd_parts+0x28c>
     31c:	9a 01       	movw	r18, r20
     31e:	ad 01       	movw	r20, r26
     320:	88 e0       	ldi	r24, 0x08	; 8
     322:	ea 01       	movw	r28, r20
     324:	09 90       	ld	r0, Y+
     326:	ae 01       	movw	r20, r28
     328:	e9 01       	movw	r28, r18
     32a:	09 92       	st	Y+, r0
     32c:	9e 01       	movw	r18, r28
     32e:	81 50       	subi	r24, 0x01	; 1
     330:	c1 f7       	brne	.-16     	; 0x322 <_fpadd_parts+0x58>
     332:	e2 01       	movw	r28, r4
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	11 96       	adiw	r26, 0x01	; 1
     338:	9c 91       	ld	r25, X
     33a:	89 23       	and	r24, r25
     33c:	81 83       	std	Z+1, r24	; 0x01
     33e:	08 c1       	rjmp	.+528    	; 0x550 <_fpadd_parts+0x286>
     340:	92 30       	cpi	r25, 0x02	; 2
     342:	09 f4       	brne	.+2      	; 0x346 <_fpadd_parts+0x7c>
     344:	07 c1       	rjmp	.+526    	; 0x554 <_fpadd_parts+0x28a>
     346:	12 96       	adiw	r26, 0x02	; 2
     348:	2d 90       	ld	r2, X+
     34a:	3c 90       	ld	r3, X
     34c:	13 97       	sbiw	r26, 0x03	; 3
     34e:	eb 01       	movw	r28, r22
     350:	8a 81       	ldd	r24, Y+2	; 0x02
     352:	9b 81       	ldd	r25, Y+3	; 0x03
     354:	14 96       	adiw	r26, 0x04	; 4
     356:	ad 90       	ld	r10, X+
     358:	bd 90       	ld	r11, X+
     35a:	cd 90       	ld	r12, X+
     35c:	dc 90       	ld	r13, X
     35e:	17 97       	sbiw	r26, 0x07	; 7
     360:	ec 80       	ldd	r14, Y+4	; 0x04
     362:	fd 80       	ldd	r15, Y+5	; 0x05
     364:	0e 81       	ldd	r16, Y+6	; 0x06
     366:	1f 81       	ldd	r17, Y+7	; 0x07
     368:	91 01       	movw	r18, r2
     36a:	28 1b       	sub	r18, r24
     36c:	39 0b       	sbc	r19, r25
     36e:	b9 01       	movw	r22, r18
     370:	37 ff       	sbrs	r19, 7
     372:	04 c0       	rjmp	.+8      	; 0x37c <_fpadd_parts+0xb2>
     374:	66 27       	eor	r22, r22
     376:	77 27       	eor	r23, r23
     378:	62 1b       	sub	r22, r18
     37a:	73 0b       	sbc	r23, r19
     37c:	60 32       	cpi	r22, 0x20	; 32
     37e:	71 05       	cpc	r23, r1
     380:	0c f0       	brlt	.+2      	; 0x384 <_fpadd_parts+0xba>
     382:	61 c0       	rjmp	.+194    	; 0x446 <_fpadd_parts+0x17c>
     384:	12 16       	cp	r1, r18
     386:	13 06       	cpc	r1, r19
     388:	6c f5       	brge	.+90     	; 0x3e4 <_fpadd_parts+0x11a>
     38a:	37 01       	movw	r6, r14
     38c:	48 01       	movw	r8, r16
     38e:	06 2e       	mov	r0, r22
     390:	04 c0       	rjmp	.+8      	; 0x39a <_fpadd_parts+0xd0>
     392:	96 94       	lsr	r9
     394:	87 94       	ror	r8
     396:	77 94       	ror	r7
     398:	67 94       	ror	r6
     39a:	0a 94       	dec	r0
     39c:	d2 f7       	brpl	.-12     	; 0x392 <_fpadd_parts+0xc8>
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	40 e0       	ldi	r20, 0x00	; 0
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	04 c0       	rjmp	.+8      	; 0x3b0 <_fpadd_parts+0xe6>
     3a8:	22 0f       	add	r18, r18
     3aa:	33 1f       	adc	r19, r19
     3ac:	44 1f       	adc	r20, r20
     3ae:	55 1f       	adc	r21, r21
     3b0:	6a 95       	dec	r22
     3b2:	d2 f7       	brpl	.-12     	; 0x3a8 <_fpadd_parts+0xde>
     3b4:	21 50       	subi	r18, 0x01	; 1
     3b6:	30 40       	sbci	r19, 0x00	; 0
     3b8:	40 40       	sbci	r20, 0x00	; 0
     3ba:	50 40       	sbci	r21, 0x00	; 0
     3bc:	2e 21       	and	r18, r14
     3be:	3f 21       	and	r19, r15
     3c0:	40 23       	and	r20, r16
     3c2:	51 23       	and	r21, r17
     3c4:	21 15       	cp	r18, r1
     3c6:	31 05       	cpc	r19, r1
     3c8:	41 05       	cpc	r20, r1
     3ca:	51 05       	cpc	r21, r1
     3cc:	21 f0       	breq	.+8      	; 0x3d6 <_fpadd_parts+0x10c>
     3ce:	21 e0       	ldi	r18, 0x01	; 1
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	79 01       	movw	r14, r18
     3d8:	8a 01       	movw	r16, r20
     3da:	e6 28       	or	r14, r6
     3dc:	f7 28       	or	r15, r7
     3de:	08 29       	or	r16, r8
     3e0:	19 29       	or	r17, r9
     3e2:	3c c0       	rjmp	.+120    	; 0x45c <_fpadd_parts+0x192>
     3e4:	23 2b       	or	r18, r19
     3e6:	d1 f1       	breq	.+116    	; 0x45c <_fpadd_parts+0x192>
     3e8:	26 0e       	add	r2, r22
     3ea:	37 1e       	adc	r3, r23
     3ec:	35 01       	movw	r6, r10
     3ee:	46 01       	movw	r8, r12
     3f0:	06 2e       	mov	r0, r22
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <_fpadd_parts+0x132>
     3f4:	96 94       	lsr	r9
     3f6:	87 94       	ror	r8
     3f8:	77 94       	ror	r7
     3fa:	67 94       	ror	r6
     3fc:	0a 94       	dec	r0
     3fe:	d2 f7       	brpl	.-12     	; 0x3f4 <_fpadd_parts+0x12a>
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	04 c0       	rjmp	.+8      	; 0x412 <_fpadd_parts+0x148>
     40a:	22 0f       	add	r18, r18
     40c:	33 1f       	adc	r19, r19
     40e:	44 1f       	adc	r20, r20
     410:	55 1f       	adc	r21, r21
     412:	6a 95       	dec	r22
     414:	d2 f7       	brpl	.-12     	; 0x40a <_fpadd_parts+0x140>
     416:	21 50       	subi	r18, 0x01	; 1
     418:	30 40       	sbci	r19, 0x00	; 0
     41a:	40 40       	sbci	r20, 0x00	; 0
     41c:	50 40       	sbci	r21, 0x00	; 0
     41e:	2a 21       	and	r18, r10
     420:	3b 21       	and	r19, r11
     422:	4c 21       	and	r20, r12
     424:	5d 21       	and	r21, r13
     426:	21 15       	cp	r18, r1
     428:	31 05       	cpc	r19, r1
     42a:	41 05       	cpc	r20, r1
     42c:	51 05       	cpc	r21, r1
     42e:	21 f0       	breq	.+8      	; 0x438 <_fpadd_parts+0x16e>
     430:	21 e0       	ldi	r18, 0x01	; 1
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	40 e0       	ldi	r20, 0x00	; 0
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	59 01       	movw	r10, r18
     43a:	6a 01       	movw	r12, r20
     43c:	a6 28       	or	r10, r6
     43e:	b7 28       	or	r11, r7
     440:	c8 28       	or	r12, r8
     442:	d9 28       	or	r13, r9
     444:	0b c0       	rjmp	.+22     	; 0x45c <_fpadd_parts+0x192>
     446:	82 15       	cp	r24, r2
     448:	93 05       	cpc	r25, r3
     44a:	2c f0       	brlt	.+10     	; 0x456 <_fpadd_parts+0x18c>
     44c:	1c 01       	movw	r2, r24
     44e:	aa 24       	eor	r10, r10
     450:	bb 24       	eor	r11, r11
     452:	65 01       	movw	r12, r10
     454:	03 c0       	rjmp	.+6      	; 0x45c <_fpadd_parts+0x192>
     456:	ee 24       	eor	r14, r14
     458:	ff 24       	eor	r15, r15
     45a:	87 01       	movw	r16, r14
     45c:	11 96       	adiw	r26, 0x01	; 1
     45e:	9c 91       	ld	r25, X
     460:	d2 01       	movw	r26, r4
     462:	11 96       	adiw	r26, 0x01	; 1
     464:	8c 91       	ld	r24, X
     466:	98 17       	cp	r25, r24
     468:	09 f4       	brne	.+2      	; 0x46c <_fpadd_parts+0x1a2>
     46a:	45 c0       	rjmp	.+138    	; 0x4f6 <_fpadd_parts+0x22c>
     46c:	99 23       	and	r25, r25
     46e:	39 f0       	breq	.+14     	; 0x47e <_fpadd_parts+0x1b4>
     470:	a8 01       	movw	r20, r16
     472:	97 01       	movw	r18, r14
     474:	2a 19       	sub	r18, r10
     476:	3b 09       	sbc	r19, r11
     478:	4c 09       	sbc	r20, r12
     47a:	5d 09       	sbc	r21, r13
     47c:	06 c0       	rjmp	.+12     	; 0x48a <_fpadd_parts+0x1c0>
     47e:	a6 01       	movw	r20, r12
     480:	95 01       	movw	r18, r10
     482:	2e 19       	sub	r18, r14
     484:	3f 09       	sbc	r19, r15
     486:	40 0b       	sbc	r20, r16
     488:	51 0b       	sbc	r21, r17
     48a:	57 fd       	sbrc	r21, 7
     48c:	08 c0       	rjmp	.+16     	; 0x49e <_fpadd_parts+0x1d4>
     48e:	11 82       	std	Z+1, r1	; 0x01
     490:	33 82       	std	Z+3, r3	; 0x03
     492:	22 82       	std	Z+2, r2	; 0x02
     494:	24 83       	std	Z+4, r18	; 0x04
     496:	35 83       	std	Z+5, r19	; 0x05
     498:	46 83       	std	Z+6, r20	; 0x06
     49a:	57 83       	std	Z+7, r21	; 0x07
     49c:	1d c0       	rjmp	.+58     	; 0x4d8 <_fpadd_parts+0x20e>
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	81 83       	std	Z+1, r24	; 0x01
     4a2:	33 82       	std	Z+3, r3	; 0x03
     4a4:	22 82       	std	Z+2, r2	; 0x02
     4a6:	88 27       	eor	r24, r24
     4a8:	99 27       	eor	r25, r25
     4aa:	dc 01       	movw	r26, r24
     4ac:	82 1b       	sub	r24, r18
     4ae:	93 0b       	sbc	r25, r19
     4b0:	a4 0b       	sbc	r26, r20
     4b2:	b5 0b       	sbc	r27, r21
     4b4:	84 83       	std	Z+4, r24	; 0x04
     4b6:	95 83       	std	Z+5, r25	; 0x05
     4b8:	a6 83       	std	Z+6, r26	; 0x06
     4ba:	b7 83       	std	Z+7, r27	; 0x07
     4bc:	0d c0       	rjmp	.+26     	; 0x4d8 <_fpadd_parts+0x20e>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	44 1f       	adc	r20, r20
     4c4:	55 1f       	adc	r21, r21
     4c6:	24 83       	std	Z+4, r18	; 0x04
     4c8:	35 83       	std	Z+5, r19	; 0x05
     4ca:	46 83       	std	Z+6, r20	; 0x06
     4cc:	57 83       	std	Z+7, r21	; 0x07
     4ce:	82 81       	ldd	r24, Z+2	; 0x02
     4d0:	93 81       	ldd	r25, Z+3	; 0x03
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	93 83       	std	Z+3, r25	; 0x03
     4d6:	82 83       	std	Z+2, r24	; 0x02
     4d8:	24 81       	ldd	r18, Z+4	; 0x04
     4da:	35 81       	ldd	r19, Z+5	; 0x05
     4dc:	46 81       	ldd	r20, Z+6	; 0x06
     4de:	57 81       	ldd	r21, Z+7	; 0x07
     4e0:	da 01       	movw	r26, r20
     4e2:	c9 01       	movw	r24, r18
     4e4:	01 97       	sbiw	r24, 0x01	; 1
     4e6:	a1 09       	sbc	r26, r1
     4e8:	b1 09       	sbc	r27, r1
     4ea:	8f 5f       	subi	r24, 0xFF	; 255
     4ec:	9f 4f       	sbci	r25, 0xFF	; 255
     4ee:	af 4f       	sbci	r26, 0xFF	; 255
     4f0:	bf 43       	sbci	r27, 0x3F	; 63
     4f2:	28 f3       	brcs	.-54     	; 0x4be <_fpadd_parts+0x1f4>
     4f4:	0b c0       	rjmp	.+22     	; 0x50c <_fpadd_parts+0x242>
     4f6:	91 83       	std	Z+1, r25	; 0x01
     4f8:	33 82       	std	Z+3, r3	; 0x03
     4fa:	22 82       	std	Z+2, r2	; 0x02
     4fc:	ea 0c       	add	r14, r10
     4fe:	fb 1c       	adc	r15, r11
     500:	0c 1d       	adc	r16, r12
     502:	1d 1d       	adc	r17, r13
     504:	e4 82       	std	Z+4, r14	; 0x04
     506:	f5 82       	std	Z+5, r15	; 0x05
     508:	06 83       	std	Z+6, r16	; 0x06
     50a:	17 83       	std	Z+7, r17	; 0x07
     50c:	83 e0       	ldi	r24, 0x03	; 3
     50e:	80 83       	st	Z, r24
     510:	24 81       	ldd	r18, Z+4	; 0x04
     512:	35 81       	ldd	r19, Z+5	; 0x05
     514:	46 81       	ldd	r20, Z+6	; 0x06
     516:	57 81       	ldd	r21, Z+7	; 0x07
     518:	57 ff       	sbrs	r21, 7
     51a:	1a c0       	rjmp	.+52     	; 0x550 <_fpadd_parts+0x286>
     51c:	c9 01       	movw	r24, r18
     51e:	aa 27       	eor	r26, r26
     520:	97 fd       	sbrc	r25, 7
     522:	a0 95       	com	r26
     524:	ba 2f       	mov	r27, r26
     526:	81 70       	andi	r24, 0x01	; 1
     528:	90 70       	andi	r25, 0x00	; 0
     52a:	a0 70       	andi	r26, 0x00	; 0
     52c:	b0 70       	andi	r27, 0x00	; 0
     52e:	56 95       	lsr	r21
     530:	47 95       	ror	r20
     532:	37 95       	ror	r19
     534:	27 95       	ror	r18
     536:	82 2b       	or	r24, r18
     538:	93 2b       	or	r25, r19
     53a:	a4 2b       	or	r26, r20
     53c:	b5 2b       	or	r27, r21
     53e:	84 83       	std	Z+4, r24	; 0x04
     540:	95 83       	std	Z+5, r25	; 0x05
     542:	a6 83       	std	Z+6, r26	; 0x06
     544:	b7 83       	std	Z+7, r27	; 0x07
     546:	82 81       	ldd	r24, Z+2	; 0x02
     548:	93 81       	ldd	r25, Z+3	; 0x03
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	93 83       	std	Z+3, r25	; 0x03
     54e:	82 83       	std	Z+2, r24	; 0x02
     550:	df 01       	movw	r26, r30
     552:	01 c0       	rjmp	.+2      	; 0x556 <_fpadd_parts+0x28c>
     554:	d2 01       	movw	r26, r4
     556:	cd 01       	movw	r24, r26
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	e2 e1       	ldi	r30, 0x12	; 18
     55e:	0c 94 00 2f 	jmp	0x5e00	; 0x5e00 <__epilogue_restores__>

00000562 <__subsf3>:
     562:	a0 e2       	ldi	r26, 0x20	; 32
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	e7 eb       	ldi	r30, 0xB7	; 183
     568:	f2 e0       	ldi	r31, 0x02	; 2
     56a:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <__prologue_saves__+0x18>
     56e:	69 83       	std	Y+1, r22	; 0x01
     570:	7a 83       	std	Y+2, r23	; 0x02
     572:	8b 83       	std	Y+3, r24	; 0x03
     574:	9c 83       	std	Y+4, r25	; 0x04
     576:	2d 83       	std	Y+5, r18	; 0x05
     578:	3e 83       	std	Y+6, r19	; 0x06
     57a:	4f 83       	std	Y+7, r20	; 0x07
     57c:	58 87       	std	Y+8, r21	; 0x08
     57e:	e9 e0       	ldi	r30, 0x09	; 9
     580:	ee 2e       	mov	r14, r30
     582:	f1 2c       	mov	r15, r1
     584:	ec 0e       	add	r14, r28
     586:	fd 1e       	adc	r15, r29
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	b7 01       	movw	r22, r14
     58e:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     592:	8e 01       	movw	r16, r28
     594:	0f 5e       	subi	r16, 0xEF	; 239
     596:	1f 4f       	sbci	r17, 0xFF	; 255
     598:	ce 01       	movw	r24, r28
     59a:	05 96       	adiw	r24, 0x05	; 5
     59c:	b8 01       	movw	r22, r16
     59e:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     5a2:	8a 89       	ldd	r24, Y+18	; 0x12
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	89 27       	eor	r24, r25
     5a8:	8a 8b       	std	Y+18, r24	; 0x12
     5aa:	c7 01       	movw	r24, r14
     5ac:	b8 01       	movw	r22, r16
     5ae:	ae 01       	movw	r20, r28
     5b0:	47 5e       	subi	r20, 0xE7	; 231
     5b2:	5f 4f       	sbci	r21, 0xFF	; 255
     5b4:	0e 94 65 01 	call	0x2ca	; 0x2ca <_fpadd_parts>
     5b8:	0e 94 91 06 	call	0xd22	; 0xd22 <__pack_f>
     5bc:	a0 96       	adiw	r28, 0x20	; 32
     5be:	e6 e0       	ldi	r30, 0x06	; 6
     5c0:	0c 94 0c 2f 	jmp	0x5e18	; 0x5e18 <__epilogue_restores__+0x18>

000005c4 <__addsf3>:
     5c4:	a0 e2       	ldi	r26, 0x20	; 32
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 ee       	ldi	r30, 0xE8	; 232
     5ca:	f2 e0       	ldi	r31, 0x02	; 2
     5cc:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <__prologue_saves__+0x18>
     5d0:	69 83       	std	Y+1, r22	; 0x01
     5d2:	7a 83       	std	Y+2, r23	; 0x02
     5d4:	8b 83       	std	Y+3, r24	; 0x03
     5d6:	9c 83       	std	Y+4, r25	; 0x04
     5d8:	2d 83       	std	Y+5, r18	; 0x05
     5da:	3e 83       	std	Y+6, r19	; 0x06
     5dc:	4f 83       	std	Y+7, r20	; 0x07
     5de:	58 87       	std	Y+8, r21	; 0x08
     5e0:	f9 e0       	ldi	r31, 0x09	; 9
     5e2:	ef 2e       	mov	r14, r31
     5e4:	f1 2c       	mov	r15, r1
     5e6:	ec 0e       	add	r14, r28
     5e8:	fd 1e       	adc	r15, r29
     5ea:	ce 01       	movw	r24, r28
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	b7 01       	movw	r22, r14
     5f0:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     5f4:	8e 01       	movw	r16, r28
     5f6:	0f 5e       	subi	r16, 0xEF	; 239
     5f8:	1f 4f       	sbci	r17, 0xFF	; 255
     5fa:	ce 01       	movw	r24, r28
     5fc:	05 96       	adiw	r24, 0x05	; 5
     5fe:	b8 01       	movw	r22, r16
     600:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     604:	c7 01       	movw	r24, r14
     606:	b8 01       	movw	r22, r16
     608:	ae 01       	movw	r20, r28
     60a:	47 5e       	subi	r20, 0xE7	; 231
     60c:	5f 4f       	sbci	r21, 0xFF	; 255
     60e:	0e 94 65 01 	call	0x2ca	; 0x2ca <_fpadd_parts>
     612:	0e 94 91 06 	call	0xd22	; 0xd22 <__pack_f>
     616:	a0 96       	adiw	r28, 0x20	; 32
     618:	e6 e0       	ldi	r30, 0x06	; 6
     61a:	0c 94 0c 2f 	jmp	0x5e18	; 0x5e18 <__epilogue_restores__+0x18>

0000061e <__mulsf3>:
     61e:	a0 e2       	ldi	r26, 0x20	; 32
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	e5 e1       	ldi	r30, 0x15	; 21
     624:	f3 e0       	ldi	r31, 0x03	; 3
     626:	0c 94 e4 2e 	jmp	0x5dc8	; 0x5dc8 <__prologue_saves__>
     62a:	69 83       	std	Y+1, r22	; 0x01
     62c:	7a 83       	std	Y+2, r23	; 0x02
     62e:	8b 83       	std	Y+3, r24	; 0x03
     630:	9c 83       	std	Y+4, r25	; 0x04
     632:	2d 83       	std	Y+5, r18	; 0x05
     634:	3e 83       	std	Y+6, r19	; 0x06
     636:	4f 83       	std	Y+7, r20	; 0x07
     638:	58 87       	std	Y+8, r21	; 0x08
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	be 01       	movw	r22, r28
     640:	67 5f       	subi	r22, 0xF7	; 247
     642:	7f 4f       	sbci	r23, 0xFF	; 255
     644:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     648:	ce 01       	movw	r24, r28
     64a:	05 96       	adiw	r24, 0x05	; 5
     64c:	be 01       	movw	r22, r28
     64e:	6f 5e       	subi	r22, 0xEF	; 239
     650:	7f 4f       	sbci	r23, 0xFF	; 255
     652:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     656:	99 85       	ldd	r25, Y+9	; 0x09
     658:	92 30       	cpi	r25, 0x02	; 2
     65a:	88 f0       	brcs	.+34     	; 0x67e <__mulsf3+0x60>
     65c:	89 89       	ldd	r24, Y+17	; 0x11
     65e:	82 30       	cpi	r24, 0x02	; 2
     660:	c8 f0       	brcs	.+50     	; 0x694 <__mulsf3+0x76>
     662:	94 30       	cpi	r25, 0x04	; 4
     664:	19 f4       	brne	.+6      	; 0x66c <__mulsf3+0x4e>
     666:	82 30       	cpi	r24, 0x02	; 2
     668:	51 f4       	brne	.+20     	; 0x67e <__mulsf3+0x60>
     66a:	04 c0       	rjmp	.+8      	; 0x674 <__mulsf3+0x56>
     66c:	84 30       	cpi	r24, 0x04	; 4
     66e:	29 f4       	brne	.+10     	; 0x67a <__mulsf3+0x5c>
     670:	92 30       	cpi	r25, 0x02	; 2
     672:	81 f4       	brne	.+32     	; 0x694 <__mulsf3+0x76>
     674:	86 e6       	ldi	r24, 0x66	; 102
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	c6 c0       	rjmp	.+396    	; 0x806 <__mulsf3+0x1e8>
     67a:	92 30       	cpi	r25, 0x02	; 2
     67c:	49 f4       	brne	.+18     	; 0x690 <__mulsf3+0x72>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	9a 85       	ldd	r25, Y+10	; 0x0a
     682:	8a 89       	ldd	r24, Y+18	; 0x12
     684:	98 13       	cpse	r25, r24
     686:	21 e0       	ldi	r18, 0x01	; 1
     688:	2a 87       	std	Y+10, r18	; 0x0a
     68a:	ce 01       	movw	r24, r28
     68c:	09 96       	adiw	r24, 0x09	; 9
     68e:	bb c0       	rjmp	.+374    	; 0x806 <__mulsf3+0x1e8>
     690:	82 30       	cpi	r24, 0x02	; 2
     692:	49 f4       	brne	.+18     	; 0x6a6 <__mulsf3+0x88>
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	9a 85       	ldd	r25, Y+10	; 0x0a
     698:	8a 89       	ldd	r24, Y+18	; 0x12
     69a:	98 13       	cpse	r25, r24
     69c:	21 e0       	ldi	r18, 0x01	; 1
     69e:	2a 8b       	std	Y+18, r18	; 0x12
     6a0:	ce 01       	movw	r24, r28
     6a2:	41 96       	adiw	r24, 0x11	; 17
     6a4:	b0 c0       	rjmp	.+352    	; 0x806 <__mulsf3+0x1e8>
     6a6:	2d 84       	ldd	r2, Y+13	; 0x0d
     6a8:	3e 84       	ldd	r3, Y+14	; 0x0e
     6aa:	4f 84       	ldd	r4, Y+15	; 0x0f
     6ac:	58 88       	ldd	r5, Y+16	; 0x10
     6ae:	6d 88       	ldd	r6, Y+21	; 0x15
     6b0:	7e 88       	ldd	r7, Y+22	; 0x16
     6b2:	8f 88       	ldd	r8, Y+23	; 0x17
     6b4:	98 8c       	ldd	r9, Y+24	; 0x18
     6b6:	ee 24       	eor	r14, r14
     6b8:	ff 24       	eor	r15, r15
     6ba:	87 01       	movw	r16, r14
     6bc:	aa 24       	eor	r10, r10
     6be:	bb 24       	eor	r11, r11
     6c0:	65 01       	movw	r12, r10
     6c2:	40 e0       	ldi	r20, 0x00	; 0
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	e0 e0       	ldi	r30, 0x00	; 0
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	c1 01       	movw	r24, r2
     6d0:	81 70       	andi	r24, 0x01	; 1
     6d2:	90 70       	andi	r25, 0x00	; 0
     6d4:	89 2b       	or	r24, r25
     6d6:	e9 f0       	breq	.+58     	; 0x712 <__mulsf3+0xf4>
     6d8:	e6 0c       	add	r14, r6
     6da:	f7 1c       	adc	r15, r7
     6dc:	08 1d       	adc	r16, r8
     6de:	19 1d       	adc	r17, r9
     6e0:	9a 01       	movw	r18, r20
     6e2:	ab 01       	movw	r20, r22
     6e4:	2a 0d       	add	r18, r10
     6e6:	3b 1d       	adc	r19, r11
     6e8:	4c 1d       	adc	r20, r12
     6ea:	5d 1d       	adc	r21, r13
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	a0 e0       	ldi	r26, 0x00	; 0
     6f2:	b0 e0       	ldi	r27, 0x00	; 0
     6f4:	e6 14       	cp	r14, r6
     6f6:	f7 04       	cpc	r15, r7
     6f8:	08 05       	cpc	r16, r8
     6fa:	19 05       	cpc	r17, r9
     6fc:	20 f4       	brcc	.+8      	; 0x706 <__mulsf3+0xe8>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	a0 e0       	ldi	r26, 0x00	; 0
     704:	b0 e0       	ldi	r27, 0x00	; 0
     706:	ba 01       	movw	r22, r20
     708:	a9 01       	movw	r20, r18
     70a:	48 0f       	add	r20, r24
     70c:	59 1f       	adc	r21, r25
     70e:	6a 1f       	adc	r22, r26
     710:	7b 1f       	adc	r23, r27
     712:	aa 0c       	add	r10, r10
     714:	bb 1c       	adc	r11, r11
     716:	cc 1c       	adc	r12, r12
     718:	dd 1c       	adc	r13, r13
     71a:	97 fe       	sbrs	r9, 7
     71c:	08 c0       	rjmp	.+16     	; 0x72e <__mulsf3+0x110>
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	a0 e0       	ldi	r26, 0x00	; 0
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	a8 2a       	or	r10, r24
     728:	b9 2a       	or	r11, r25
     72a:	ca 2a       	or	r12, r26
     72c:	db 2a       	or	r13, r27
     72e:	31 96       	adiw	r30, 0x01	; 1
     730:	e0 32       	cpi	r30, 0x20	; 32
     732:	f1 05       	cpc	r31, r1
     734:	49 f0       	breq	.+18     	; 0x748 <__mulsf3+0x12a>
     736:	66 0c       	add	r6, r6
     738:	77 1c       	adc	r7, r7
     73a:	88 1c       	adc	r8, r8
     73c:	99 1c       	adc	r9, r9
     73e:	56 94       	lsr	r5
     740:	47 94       	ror	r4
     742:	37 94       	ror	r3
     744:	27 94       	ror	r2
     746:	c3 cf       	rjmp	.-122    	; 0x6ce <__mulsf3+0xb0>
     748:	fa 85       	ldd	r31, Y+10	; 0x0a
     74a:	ea 89       	ldd	r30, Y+18	; 0x12
     74c:	2b 89       	ldd	r18, Y+19	; 0x13
     74e:	3c 89       	ldd	r19, Y+20	; 0x14
     750:	8b 85       	ldd	r24, Y+11	; 0x0b
     752:	9c 85       	ldd	r25, Y+12	; 0x0c
     754:	28 0f       	add	r18, r24
     756:	39 1f       	adc	r19, r25
     758:	2e 5f       	subi	r18, 0xFE	; 254
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
     75c:	17 c0       	rjmp	.+46     	; 0x78c <__mulsf3+0x16e>
     75e:	ca 01       	movw	r24, r20
     760:	81 70       	andi	r24, 0x01	; 1
     762:	90 70       	andi	r25, 0x00	; 0
     764:	89 2b       	or	r24, r25
     766:	61 f0       	breq	.+24     	; 0x780 <__mulsf3+0x162>
     768:	16 95       	lsr	r17
     76a:	07 95       	ror	r16
     76c:	f7 94       	ror	r15
     76e:	e7 94       	ror	r14
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	a0 e0       	ldi	r26, 0x00	; 0
     776:	b0 e8       	ldi	r27, 0x80	; 128
     778:	e8 2a       	or	r14, r24
     77a:	f9 2a       	or	r15, r25
     77c:	0a 2b       	or	r16, r26
     77e:	1b 2b       	or	r17, r27
     780:	76 95       	lsr	r23
     782:	67 95       	ror	r22
     784:	57 95       	ror	r21
     786:	47 95       	ror	r20
     788:	2f 5f       	subi	r18, 0xFF	; 255
     78a:	3f 4f       	sbci	r19, 0xFF	; 255
     78c:	77 fd       	sbrc	r23, 7
     78e:	e7 cf       	rjmp	.-50     	; 0x75e <__mulsf3+0x140>
     790:	0c c0       	rjmp	.+24     	; 0x7aa <__mulsf3+0x18c>
     792:	44 0f       	add	r20, r20
     794:	55 1f       	adc	r21, r21
     796:	66 1f       	adc	r22, r22
     798:	77 1f       	adc	r23, r23
     79a:	17 fd       	sbrc	r17, 7
     79c:	41 60       	ori	r20, 0x01	; 1
     79e:	ee 0c       	add	r14, r14
     7a0:	ff 1c       	adc	r15, r15
     7a2:	00 1f       	adc	r16, r16
     7a4:	11 1f       	adc	r17, r17
     7a6:	21 50       	subi	r18, 0x01	; 1
     7a8:	30 40       	sbci	r19, 0x00	; 0
     7aa:	40 30       	cpi	r20, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	59 07       	cpc	r21, r25
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	69 07       	cpc	r22, r25
     7b4:	90 e4       	ldi	r25, 0x40	; 64
     7b6:	79 07       	cpc	r23, r25
     7b8:	60 f3       	brcs	.-40     	; 0x792 <__mulsf3+0x174>
     7ba:	2b 8f       	std	Y+27, r18	; 0x1b
     7bc:	3c 8f       	std	Y+28, r19	; 0x1c
     7be:	db 01       	movw	r26, r22
     7c0:	ca 01       	movw	r24, r20
     7c2:	8f 77       	andi	r24, 0x7F	; 127
     7c4:	90 70       	andi	r25, 0x00	; 0
     7c6:	a0 70       	andi	r26, 0x00	; 0
     7c8:	b0 70       	andi	r27, 0x00	; 0
     7ca:	80 34       	cpi	r24, 0x40	; 64
     7cc:	91 05       	cpc	r25, r1
     7ce:	a1 05       	cpc	r26, r1
     7d0:	b1 05       	cpc	r27, r1
     7d2:	61 f4       	brne	.+24     	; 0x7ec <__mulsf3+0x1ce>
     7d4:	47 fd       	sbrc	r20, 7
     7d6:	0a c0       	rjmp	.+20     	; 0x7ec <__mulsf3+0x1ce>
     7d8:	e1 14       	cp	r14, r1
     7da:	f1 04       	cpc	r15, r1
     7dc:	01 05       	cpc	r16, r1
     7de:	11 05       	cpc	r17, r1
     7e0:	29 f0       	breq	.+10     	; 0x7ec <__mulsf3+0x1ce>
     7e2:	40 5c       	subi	r20, 0xC0	; 192
     7e4:	5f 4f       	sbci	r21, 0xFF	; 255
     7e6:	6f 4f       	sbci	r22, 0xFF	; 255
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	40 78       	andi	r20, 0x80	; 128
     7ec:	1a 8e       	std	Y+26, r1	; 0x1a
     7ee:	fe 17       	cp	r31, r30
     7f0:	11 f0       	breq	.+4      	; 0x7f6 <__mulsf3+0x1d8>
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	8a 8f       	std	Y+26, r24	; 0x1a
     7f6:	4d 8f       	std	Y+29, r20	; 0x1d
     7f8:	5e 8f       	std	Y+30, r21	; 0x1e
     7fa:	6f 8f       	std	Y+31, r22	; 0x1f
     7fc:	78 a3       	std	Y+32, r23	; 0x20
     7fe:	83 e0       	ldi	r24, 0x03	; 3
     800:	89 8f       	std	Y+25, r24	; 0x19
     802:	ce 01       	movw	r24, r28
     804:	49 96       	adiw	r24, 0x19	; 25
     806:	0e 94 91 06 	call	0xd22	; 0xd22 <__pack_f>
     80a:	a0 96       	adiw	r28, 0x20	; 32
     80c:	e2 e1       	ldi	r30, 0x12	; 18
     80e:	0c 94 00 2f 	jmp	0x5e00	; 0x5e00 <__epilogue_restores__>

00000812 <__divsf3>:
     812:	a8 e1       	ldi	r26, 0x18	; 24
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	ef e0       	ldi	r30, 0x0F	; 15
     818:	f4 e0       	ldi	r31, 0x04	; 4
     81a:	0c 94 ec 2e 	jmp	0x5dd8	; 0x5dd8 <__prologue_saves__+0x10>
     81e:	69 83       	std	Y+1, r22	; 0x01
     820:	7a 83       	std	Y+2, r23	; 0x02
     822:	8b 83       	std	Y+3, r24	; 0x03
     824:	9c 83       	std	Y+4, r25	; 0x04
     826:	2d 83       	std	Y+5, r18	; 0x05
     828:	3e 83       	std	Y+6, r19	; 0x06
     82a:	4f 83       	std	Y+7, r20	; 0x07
     82c:	58 87       	std	Y+8, r21	; 0x08
     82e:	b9 e0       	ldi	r27, 0x09	; 9
     830:	eb 2e       	mov	r14, r27
     832:	f1 2c       	mov	r15, r1
     834:	ec 0e       	add	r14, r28
     836:	fd 1e       	adc	r15, r29
     838:	ce 01       	movw	r24, r28
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	b7 01       	movw	r22, r14
     83e:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     842:	8e 01       	movw	r16, r28
     844:	0f 5e       	subi	r16, 0xEF	; 239
     846:	1f 4f       	sbci	r17, 0xFF	; 255
     848:	ce 01       	movw	r24, r28
     84a:	05 96       	adiw	r24, 0x05	; 5
     84c:	b8 01       	movw	r22, r16
     84e:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     852:	29 85       	ldd	r18, Y+9	; 0x09
     854:	22 30       	cpi	r18, 0x02	; 2
     856:	08 f4       	brcc	.+2      	; 0x85a <__divsf3+0x48>
     858:	7e c0       	rjmp	.+252    	; 0x956 <__stack+0xf7>
     85a:	39 89       	ldd	r19, Y+17	; 0x11
     85c:	32 30       	cpi	r19, 0x02	; 2
     85e:	10 f4       	brcc	.+4      	; 0x864 <__stack+0x5>
     860:	b8 01       	movw	r22, r16
     862:	7c c0       	rjmp	.+248    	; 0x95c <__stack+0xfd>
     864:	8a 85       	ldd	r24, Y+10	; 0x0a
     866:	9a 89       	ldd	r25, Y+18	; 0x12
     868:	89 27       	eor	r24, r25
     86a:	8a 87       	std	Y+10, r24	; 0x0a
     86c:	24 30       	cpi	r18, 0x04	; 4
     86e:	11 f0       	breq	.+4      	; 0x874 <__stack+0x15>
     870:	22 30       	cpi	r18, 0x02	; 2
     872:	31 f4       	brne	.+12     	; 0x880 <__stack+0x21>
     874:	23 17       	cp	r18, r19
     876:	09 f0       	breq	.+2      	; 0x87a <__stack+0x1b>
     878:	6e c0       	rjmp	.+220    	; 0x956 <__stack+0xf7>
     87a:	66 e6       	ldi	r22, 0x66	; 102
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	6e c0       	rjmp	.+220    	; 0x95c <__stack+0xfd>
     880:	34 30       	cpi	r19, 0x04	; 4
     882:	39 f4       	brne	.+14     	; 0x892 <__stack+0x33>
     884:	1d 86       	std	Y+13, r1	; 0x0d
     886:	1e 86       	std	Y+14, r1	; 0x0e
     888:	1f 86       	std	Y+15, r1	; 0x0f
     88a:	18 8a       	std	Y+16, r1	; 0x10
     88c:	1c 86       	std	Y+12, r1	; 0x0c
     88e:	1b 86       	std	Y+11, r1	; 0x0b
     890:	04 c0       	rjmp	.+8      	; 0x89a <__stack+0x3b>
     892:	32 30       	cpi	r19, 0x02	; 2
     894:	21 f4       	brne	.+8      	; 0x89e <__stack+0x3f>
     896:	84 e0       	ldi	r24, 0x04	; 4
     898:	89 87       	std	Y+9, r24	; 0x09
     89a:	b7 01       	movw	r22, r14
     89c:	5f c0       	rjmp	.+190    	; 0x95c <__stack+0xfd>
     89e:	2b 85       	ldd	r18, Y+11	; 0x0b
     8a0:	3c 85       	ldd	r19, Y+12	; 0x0c
     8a2:	8b 89       	ldd	r24, Y+19	; 0x13
     8a4:	9c 89       	ldd	r25, Y+20	; 0x14
     8a6:	28 1b       	sub	r18, r24
     8a8:	39 0b       	sbc	r19, r25
     8aa:	3c 87       	std	Y+12, r19	; 0x0c
     8ac:	2b 87       	std	Y+11, r18	; 0x0b
     8ae:	ed 84       	ldd	r14, Y+13	; 0x0d
     8b0:	fe 84       	ldd	r15, Y+14	; 0x0e
     8b2:	0f 85       	ldd	r16, Y+15	; 0x0f
     8b4:	18 89       	ldd	r17, Y+16	; 0x10
     8b6:	ad 88       	ldd	r10, Y+21	; 0x15
     8b8:	be 88       	ldd	r11, Y+22	; 0x16
     8ba:	cf 88       	ldd	r12, Y+23	; 0x17
     8bc:	d8 8c       	ldd	r13, Y+24	; 0x18
     8be:	ea 14       	cp	r14, r10
     8c0:	fb 04       	cpc	r15, r11
     8c2:	0c 05       	cpc	r16, r12
     8c4:	1d 05       	cpc	r17, r13
     8c6:	40 f4       	brcc	.+16     	; 0x8d8 <__stack+0x79>
     8c8:	ee 0c       	add	r14, r14
     8ca:	ff 1c       	adc	r15, r15
     8cc:	00 1f       	adc	r16, r16
     8ce:	11 1f       	adc	r17, r17
     8d0:	21 50       	subi	r18, 0x01	; 1
     8d2:	30 40       	sbci	r19, 0x00	; 0
     8d4:	3c 87       	std	Y+12, r19	; 0x0c
     8d6:	2b 87       	std	Y+11, r18	; 0x0b
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	a0 e0       	ldi	r26, 0x00	; 0
     8e6:	b0 e4       	ldi	r27, 0x40	; 64
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	ea 14       	cp	r14, r10
     8ee:	fb 04       	cpc	r15, r11
     8f0:	0c 05       	cpc	r16, r12
     8f2:	1d 05       	cpc	r17, r13
     8f4:	40 f0       	brcs	.+16     	; 0x906 <__stack+0xa7>
     8f6:	28 2b       	or	r18, r24
     8f8:	39 2b       	or	r19, r25
     8fa:	4a 2b       	or	r20, r26
     8fc:	5b 2b       	or	r21, r27
     8fe:	ea 18       	sub	r14, r10
     900:	fb 08       	sbc	r15, r11
     902:	0c 09       	sbc	r16, r12
     904:	1d 09       	sbc	r17, r13
     906:	b6 95       	lsr	r27
     908:	a7 95       	ror	r26
     90a:	97 95       	ror	r25
     90c:	87 95       	ror	r24
     90e:	ee 0c       	add	r14, r14
     910:	ff 1c       	adc	r15, r15
     912:	00 1f       	adc	r16, r16
     914:	11 1f       	adc	r17, r17
     916:	6f 5f       	subi	r22, 0xFF	; 255
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	6f 31       	cpi	r22, 0x1F	; 31
     91c:	71 05       	cpc	r23, r1
     91e:	31 f7       	brne	.-52     	; 0x8ec <__stack+0x8d>
     920:	da 01       	movw	r26, r20
     922:	c9 01       	movw	r24, r18
     924:	8f 77       	andi	r24, 0x7F	; 127
     926:	90 70       	andi	r25, 0x00	; 0
     928:	a0 70       	andi	r26, 0x00	; 0
     92a:	b0 70       	andi	r27, 0x00	; 0
     92c:	80 34       	cpi	r24, 0x40	; 64
     92e:	91 05       	cpc	r25, r1
     930:	a1 05       	cpc	r26, r1
     932:	b1 05       	cpc	r27, r1
     934:	61 f4       	brne	.+24     	; 0x94e <__stack+0xef>
     936:	27 fd       	sbrc	r18, 7
     938:	0a c0       	rjmp	.+20     	; 0x94e <__stack+0xef>
     93a:	e1 14       	cp	r14, r1
     93c:	f1 04       	cpc	r15, r1
     93e:	01 05       	cpc	r16, r1
     940:	11 05       	cpc	r17, r1
     942:	29 f0       	breq	.+10     	; 0x94e <__stack+0xef>
     944:	20 5c       	subi	r18, 0xC0	; 192
     946:	3f 4f       	sbci	r19, 0xFF	; 255
     948:	4f 4f       	sbci	r20, 0xFF	; 255
     94a:	5f 4f       	sbci	r21, 0xFF	; 255
     94c:	20 78       	andi	r18, 0x80	; 128
     94e:	2d 87       	std	Y+13, r18	; 0x0d
     950:	3e 87       	std	Y+14, r19	; 0x0e
     952:	4f 87       	std	Y+15, r20	; 0x0f
     954:	58 8b       	std	Y+16, r21	; 0x10
     956:	be 01       	movw	r22, r28
     958:	67 5f       	subi	r22, 0xF7	; 247
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	cb 01       	movw	r24, r22
     95e:	0e 94 91 06 	call	0xd22	; 0xd22 <__pack_f>
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	ea e0       	ldi	r30, 0x0A	; 10
     966:	0c 94 08 2f 	jmp	0x5e10	; 0x5e10 <__epilogue_restores__+0x10>

0000096a <__nesf2>:
     96a:	a8 e1       	ldi	r26, 0x18	; 24
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <__prologue_saves__+0x18>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	2d 83       	std	Y+5, r18	; 0x05
     980:	3e 83       	std	Y+6, r19	; 0x06
     982:	4f 83       	std	Y+7, r20	; 0x07
     984:	58 87       	std	Y+8, r21	; 0x08
     986:	89 e0       	ldi	r24, 0x09	; 9
     988:	e8 2e       	mov	r14, r24
     98a:	f1 2c       	mov	r15, r1
     98c:	ec 0e       	add	r14, r28
     98e:	fd 1e       	adc	r15, r29
     990:	ce 01       	movw	r24, r28
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	b7 01       	movw	r22, r14
     996:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     99a:	8e 01       	movw	r16, r28
     99c:	0f 5e       	subi	r16, 0xEF	; 239
     99e:	1f 4f       	sbci	r17, 0xFF	; 255
     9a0:	ce 01       	movw	r24, r28
     9a2:	05 96       	adiw	r24, 0x05	; 5
     9a4:	b8 01       	movw	r22, r16
     9a6:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     9aa:	89 85       	ldd	r24, Y+9	; 0x09
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	40 f0       	brcs	.+16     	; 0x9c0 <__nesf2+0x56>
     9b0:	89 89       	ldd	r24, Y+17	; 0x11
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	28 f0       	brcs	.+10     	; 0x9c0 <__nesf2+0x56>
     9b6:	c7 01       	movw	r24, r14
     9b8:	b8 01       	movw	r22, r16
     9ba:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fpcmp_parts_f>
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__nesf2+0x58>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	68 96       	adiw	r28, 0x18	; 24
     9c4:	e6 e0       	ldi	r30, 0x06	; 6
     9c6:	0c 94 0c 2f 	jmp	0x5e18	; 0x5e18 <__epilogue_restores__+0x18>

000009ca <__gtsf2>:
     9ca:	a8 e1       	ldi	r26, 0x18	; 24
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	eb ee       	ldi	r30, 0xEB	; 235
     9d0:	f4 e0       	ldi	r31, 0x04	; 4
     9d2:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <__prologue_saves__+0x18>
     9d6:	69 83       	std	Y+1, r22	; 0x01
     9d8:	7a 83       	std	Y+2, r23	; 0x02
     9da:	8b 83       	std	Y+3, r24	; 0x03
     9dc:	9c 83       	std	Y+4, r25	; 0x04
     9de:	2d 83       	std	Y+5, r18	; 0x05
     9e0:	3e 83       	std	Y+6, r19	; 0x06
     9e2:	4f 83       	std	Y+7, r20	; 0x07
     9e4:	58 87       	std	Y+8, r21	; 0x08
     9e6:	89 e0       	ldi	r24, 0x09	; 9
     9e8:	e8 2e       	mov	r14, r24
     9ea:	f1 2c       	mov	r15, r1
     9ec:	ec 0e       	add	r14, r28
     9ee:	fd 1e       	adc	r15, r29
     9f0:	ce 01       	movw	r24, r28
     9f2:	01 96       	adiw	r24, 0x01	; 1
     9f4:	b7 01       	movw	r22, r14
     9f6:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     9fa:	8e 01       	movw	r16, r28
     9fc:	0f 5e       	subi	r16, 0xEF	; 239
     9fe:	1f 4f       	sbci	r17, 0xFF	; 255
     a00:	ce 01       	movw	r24, r28
     a02:	05 96       	adiw	r24, 0x05	; 5
     a04:	b8 01       	movw	r22, r16
     a06:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     a0a:	89 85       	ldd	r24, Y+9	; 0x09
     a0c:	82 30       	cpi	r24, 0x02	; 2
     a0e:	40 f0       	brcs	.+16     	; 0xa20 <__gtsf2+0x56>
     a10:	89 89       	ldd	r24, Y+17	; 0x11
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	28 f0       	brcs	.+10     	; 0xa20 <__gtsf2+0x56>
     a16:	c7 01       	movw	r24, r14
     a18:	b8 01       	movw	r22, r16
     a1a:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fpcmp_parts_f>
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <__gtsf2+0x58>
     a20:	8f ef       	ldi	r24, 0xFF	; 255
     a22:	68 96       	adiw	r28, 0x18	; 24
     a24:	e6 e0       	ldi	r30, 0x06	; 6
     a26:	0c 94 0c 2f 	jmp	0x5e18	; 0x5e18 <__epilogue_restores__+0x18>

00000a2a <__gesf2>:
     a2a:	a8 e1       	ldi	r26, 0x18	; 24
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	eb e1       	ldi	r30, 0x1B	; 27
     a30:	f5 e0       	ldi	r31, 0x05	; 5
     a32:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <__prologue_saves__+0x18>
     a36:	69 83       	std	Y+1, r22	; 0x01
     a38:	7a 83       	std	Y+2, r23	; 0x02
     a3a:	8b 83       	std	Y+3, r24	; 0x03
     a3c:	9c 83       	std	Y+4, r25	; 0x04
     a3e:	2d 83       	std	Y+5, r18	; 0x05
     a40:	3e 83       	std	Y+6, r19	; 0x06
     a42:	4f 83       	std	Y+7, r20	; 0x07
     a44:	58 87       	std	Y+8, r21	; 0x08
     a46:	89 e0       	ldi	r24, 0x09	; 9
     a48:	e8 2e       	mov	r14, r24
     a4a:	f1 2c       	mov	r15, r1
     a4c:	ec 0e       	add	r14, r28
     a4e:	fd 1e       	adc	r15, r29
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	b7 01       	movw	r22, r14
     a56:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     a5a:	8e 01       	movw	r16, r28
     a5c:	0f 5e       	subi	r16, 0xEF	; 239
     a5e:	1f 4f       	sbci	r17, 0xFF	; 255
     a60:	ce 01       	movw	r24, r28
     a62:	05 96       	adiw	r24, 0x05	; 5
     a64:	b8 01       	movw	r22, r16
     a66:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     a6a:	89 85       	ldd	r24, Y+9	; 0x09
     a6c:	82 30       	cpi	r24, 0x02	; 2
     a6e:	40 f0       	brcs	.+16     	; 0xa80 <__gesf2+0x56>
     a70:	89 89       	ldd	r24, Y+17	; 0x11
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	28 f0       	brcs	.+10     	; 0xa80 <__gesf2+0x56>
     a76:	c7 01       	movw	r24, r14
     a78:	b8 01       	movw	r22, r16
     a7a:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fpcmp_parts_f>
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <__gesf2+0x58>
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	68 96       	adiw	r28, 0x18	; 24
     a84:	e6 e0       	ldi	r30, 0x06	; 6
     a86:	0c 94 0c 2f 	jmp	0x5e18	; 0x5e18 <__epilogue_restores__+0x18>

00000a8a <__ltsf2>:
     a8a:	a8 e1       	ldi	r26, 0x18	; 24
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	eb e4       	ldi	r30, 0x4B	; 75
     a90:	f5 e0       	ldi	r31, 0x05	; 5
     a92:	0c 94 f0 2e 	jmp	0x5de0	; 0x5de0 <__prologue_saves__+0x18>
     a96:	69 83       	std	Y+1, r22	; 0x01
     a98:	7a 83       	std	Y+2, r23	; 0x02
     a9a:	8b 83       	std	Y+3, r24	; 0x03
     a9c:	9c 83       	std	Y+4, r25	; 0x04
     a9e:	2d 83       	std	Y+5, r18	; 0x05
     aa0:	3e 83       	std	Y+6, r19	; 0x06
     aa2:	4f 83       	std	Y+7, r20	; 0x07
     aa4:	58 87       	std	Y+8, r21	; 0x08
     aa6:	89 e0       	ldi	r24, 0x09	; 9
     aa8:	e8 2e       	mov	r14, r24
     aaa:	f1 2c       	mov	r15, r1
     aac:	ec 0e       	add	r14, r28
     aae:	fd 1e       	adc	r15, r29
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	b7 01       	movw	r22, r14
     ab6:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     aba:	8e 01       	movw	r16, r28
     abc:	0f 5e       	subi	r16, 0xEF	; 239
     abe:	1f 4f       	sbci	r17, 0xFF	; 255
     ac0:	ce 01       	movw	r24, r28
     ac2:	05 96       	adiw	r24, 0x05	; 5
     ac4:	b8 01       	movw	r22, r16
     ac6:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     aca:	89 85       	ldd	r24, Y+9	; 0x09
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	40 f0       	brcs	.+16     	; 0xae0 <__ltsf2+0x56>
     ad0:	89 89       	ldd	r24, Y+17	; 0x11
     ad2:	82 30       	cpi	r24, 0x02	; 2
     ad4:	28 f0       	brcs	.+10     	; 0xae0 <__ltsf2+0x56>
     ad6:	c7 01       	movw	r24, r14
     ad8:	b8 01       	movw	r22, r16
     ada:	0e 94 de 07 	call	0xfbc	; 0xfbc <__fpcmp_parts_f>
     ade:	01 c0       	rjmp	.+2      	; 0xae2 <__ltsf2+0x58>
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	68 96       	adiw	r28, 0x18	; 24
     ae4:	e6 e0       	ldi	r30, 0x06	; 6
     ae6:	0c 94 0c 2f 	jmp	0x5e18	; 0x5e18 <__epilogue_restores__+0x18>

00000aea <__fixsfsi>:
     aea:	ac e0       	ldi	r26, 0x0C	; 12
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	eb e7       	ldi	r30, 0x7B	; 123
     af0:	f5 e0       	ldi	r31, 0x05	; 5
     af2:	0c 94 f4 2e 	jmp	0x5de8	; 0x5de8 <__prologue_saves__+0x20>
     af6:	69 83       	std	Y+1, r22	; 0x01
     af8:	7a 83       	std	Y+2, r23	; 0x02
     afa:	8b 83       	std	Y+3, r24	; 0x03
     afc:	9c 83       	std	Y+4, r25	; 0x04
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	be 01       	movw	r22, r28
     b04:	6b 5f       	subi	r22, 0xFB	; 251
     b06:	7f 4f       	sbci	r23, 0xFF	; 255
     b08:	0e 94 66 07 	call	0xecc	; 0xecc <__unpack_f>
     b0c:	8d 81       	ldd	r24, Y+5	; 0x05
     b0e:	82 30       	cpi	r24, 0x02	; 2
     b10:	61 f1       	breq	.+88     	; 0xb6a <__fixsfsi+0x80>
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	50 f1       	brcs	.+84     	; 0xb6a <__fixsfsi+0x80>
     b16:	84 30       	cpi	r24, 0x04	; 4
     b18:	21 f4       	brne	.+8      	; 0xb22 <__fixsfsi+0x38>
     b1a:	8e 81       	ldd	r24, Y+6	; 0x06
     b1c:	88 23       	and	r24, r24
     b1e:	51 f1       	breq	.+84     	; 0xb74 <__fixsfsi+0x8a>
     b20:	2e c0       	rjmp	.+92     	; 0xb7e <__fixsfsi+0x94>
     b22:	2f 81       	ldd	r18, Y+7	; 0x07
     b24:	38 85       	ldd	r19, Y+8	; 0x08
     b26:	37 fd       	sbrc	r19, 7
     b28:	20 c0       	rjmp	.+64     	; 0xb6a <__fixsfsi+0x80>
     b2a:	6e 81       	ldd	r22, Y+6	; 0x06
     b2c:	2f 31       	cpi	r18, 0x1F	; 31
     b2e:	31 05       	cpc	r19, r1
     b30:	1c f0       	brlt	.+6      	; 0xb38 <__fixsfsi+0x4e>
     b32:	66 23       	and	r22, r22
     b34:	f9 f0       	breq	.+62     	; 0xb74 <__fixsfsi+0x8a>
     b36:	23 c0       	rjmp	.+70     	; 0xb7e <__fixsfsi+0x94>
     b38:	8e e1       	ldi	r24, 0x1E	; 30
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	82 1b       	sub	r24, r18
     b3e:	93 0b       	sbc	r25, r19
     b40:	29 85       	ldd	r18, Y+9	; 0x09
     b42:	3a 85       	ldd	r19, Y+10	; 0x0a
     b44:	4b 85       	ldd	r20, Y+11	; 0x0b
     b46:	5c 85       	ldd	r21, Y+12	; 0x0c
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <__fixsfsi+0x68>
     b4a:	56 95       	lsr	r21
     b4c:	47 95       	ror	r20
     b4e:	37 95       	ror	r19
     b50:	27 95       	ror	r18
     b52:	8a 95       	dec	r24
     b54:	d2 f7       	brpl	.-12     	; 0xb4a <__fixsfsi+0x60>
     b56:	66 23       	and	r22, r22
     b58:	b1 f0       	breq	.+44     	; 0xb86 <__fixsfsi+0x9c>
     b5a:	50 95       	com	r21
     b5c:	40 95       	com	r20
     b5e:	30 95       	com	r19
     b60:	21 95       	neg	r18
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	4f 4f       	sbci	r20, 0xFF	; 255
     b66:	5f 4f       	sbci	r21, 0xFF	; 255
     b68:	0e c0       	rjmp	.+28     	; 0xb86 <__fixsfsi+0x9c>
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	09 c0       	rjmp	.+18     	; 0xb86 <__fixsfsi+0x9c>
     b74:	2f ef       	ldi	r18, 0xFF	; 255
     b76:	3f ef       	ldi	r19, 0xFF	; 255
     b78:	4f ef       	ldi	r20, 0xFF	; 255
     b7a:	5f e7       	ldi	r21, 0x7F	; 127
     b7c:	04 c0       	rjmp	.+8      	; 0xb86 <__fixsfsi+0x9c>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e8       	ldi	r21, 0x80	; 128
     b86:	b9 01       	movw	r22, r18
     b88:	ca 01       	movw	r24, r20
     b8a:	2c 96       	adiw	r28, 0x0c	; 12
     b8c:	e2 e0       	ldi	r30, 0x02	; 2
     b8e:	0c 94 10 2f 	jmp	0x5e20	; 0x5e20 <__epilogue_restores__+0x20>

00000b92 <__floatunsisf>:
     b92:	a8 e0       	ldi	r26, 0x08	; 8
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ef ec       	ldi	r30, 0xCF	; 207
     b98:	f5 e0       	ldi	r31, 0x05	; 5
     b9a:	0c 94 ec 2e 	jmp	0x5dd8	; 0x5dd8 <__prologue_saves__+0x10>
     b9e:	7b 01       	movw	r14, r22
     ba0:	8c 01       	movw	r16, r24
     ba2:	61 15       	cp	r22, r1
     ba4:	71 05       	cpc	r23, r1
     ba6:	81 05       	cpc	r24, r1
     ba8:	91 05       	cpc	r25, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__floatunsisf+0x20>
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	60 c0       	rjmp	.+192    	; 0xc72 <__floatunsisf+0xe0>
     bb2:	83 e0       	ldi	r24, 0x03	; 3
     bb4:	89 83       	std	Y+1, r24	; 0x01
     bb6:	8e e1       	ldi	r24, 0x1E	; 30
     bb8:	c8 2e       	mov	r12, r24
     bba:	d1 2c       	mov	r13, r1
     bbc:	dc 82       	std	Y+4, r13	; 0x04
     bbe:	cb 82       	std	Y+3, r12	; 0x03
     bc0:	ed 82       	std	Y+5, r14	; 0x05
     bc2:	fe 82       	std	Y+6, r15	; 0x06
     bc4:	0f 83       	std	Y+7, r16	; 0x07
     bc6:	18 87       	std	Y+8, r17	; 0x08
     bc8:	c8 01       	movw	r24, r16
     bca:	b7 01       	movw	r22, r14
     bcc:	0e 94 42 06 	call	0xc84	; 0xc84 <__clzsi2>
     bd0:	fc 01       	movw	r30, r24
     bd2:	31 97       	sbiw	r30, 0x01	; 1
     bd4:	f7 ff       	sbrs	r31, 7
     bd6:	3b c0       	rjmp	.+118    	; 0xc4e <__floatunsisf+0xbc>
     bd8:	22 27       	eor	r18, r18
     bda:	33 27       	eor	r19, r19
     bdc:	2e 1b       	sub	r18, r30
     bde:	3f 0b       	sbc	r19, r31
     be0:	57 01       	movw	r10, r14
     be2:	68 01       	movw	r12, r16
     be4:	02 2e       	mov	r0, r18
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <__floatunsisf+0x5e>
     be8:	d6 94       	lsr	r13
     bea:	c7 94       	ror	r12
     bec:	b7 94       	ror	r11
     bee:	a7 94       	ror	r10
     bf0:	0a 94       	dec	r0
     bf2:	d2 f7       	brpl	.-12     	; 0xbe8 <__floatunsisf+0x56>
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	a0 e0       	ldi	r26, 0x00	; 0
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	04 c0       	rjmp	.+8      	; 0xc0e <__floatunsisf+0x7c>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	aa 1f       	adc	r26, r26
     c0c:	bb 1f       	adc	r27, r27
     c0e:	2a 95       	dec	r18
     c10:	d2 f7       	brpl	.-12     	; 0xc06 <__floatunsisf+0x74>
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	a1 09       	sbc	r26, r1
     c16:	b1 09       	sbc	r27, r1
     c18:	8e 21       	and	r24, r14
     c1a:	9f 21       	and	r25, r15
     c1c:	a0 23       	and	r26, r16
     c1e:	b1 23       	and	r27, r17
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	a1 05       	cpc	r26, r1
     c24:	b1 05       	cpc	r27, r1
     c26:	21 f0       	breq	.+8      	; 0xc30 <__floatunsisf+0x9e>
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	4a 29       	or	r20, r10
     c32:	5b 29       	or	r21, r11
     c34:	6c 29       	or	r22, r12
     c36:	7d 29       	or	r23, r13
     c38:	4d 83       	std	Y+5, r20	; 0x05
     c3a:	5e 83       	std	Y+6, r21	; 0x06
     c3c:	6f 83       	std	Y+7, r22	; 0x07
     c3e:	78 87       	std	Y+8, r23	; 0x08
     c40:	8e e1       	ldi	r24, 0x1E	; 30
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	8e 1b       	sub	r24, r30
     c46:	9f 0b       	sbc	r25, r31
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	8b 83       	std	Y+3, r24	; 0x03
     c4c:	12 c0       	rjmp	.+36     	; 0xc72 <__floatunsisf+0xe0>
     c4e:	30 97       	sbiw	r30, 0x00	; 0
     c50:	81 f0       	breq	.+32     	; 0xc72 <__floatunsisf+0xe0>
     c52:	0e 2e       	mov	r0, r30
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__floatunsisf+0xcc>
     c56:	ee 0c       	add	r14, r14
     c58:	ff 1c       	adc	r15, r15
     c5a:	00 1f       	adc	r16, r16
     c5c:	11 1f       	adc	r17, r17
     c5e:	0a 94       	dec	r0
     c60:	d2 f7       	brpl	.-12     	; 0xc56 <__floatunsisf+0xc4>
     c62:	ed 82       	std	Y+5, r14	; 0x05
     c64:	fe 82       	std	Y+6, r15	; 0x06
     c66:	0f 83       	std	Y+7, r16	; 0x07
     c68:	18 87       	std	Y+8, r17	; 0x08
     c6a:	ce 1a       	sub	r12, r30
     c6c:	df 0a       	sbc	r13, r31
     c6e:	dc 82       	std	Y+4, r13	; 0x04
     c70:	cb 82       	std	Y+3, r12	; 0x03
     c72:	1a 82       	std	Y+2, r1	; 0x02
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	0e 94 91 06 	call	0xd22	; 0xd22 <__pack_f>
     c7c:	28 96       	adiw	r28, 0x08	; 8
     c7e:	ea e0       	ldi	r30, 0x0A	; 10
     c80:	0c 94 08 2f 	jmp	0x5e10	; 0x5e10 <__epilogue_restores__+0x10>

00000c84 <__clzsi2>:
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	7b 01       	movw	r14, r22
     c8e:	8c 01       	movw	r16, r24
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	e8 16       	cp	r14, r24
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	f8 06       	cpc	r15, r24
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	08 07       	cpc	r16, r24
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	18 07       	cpc	r17, r24
     ca0:	88 f4       	brcc	.+34     	; 0xcc4 <__clzsi2+0x40>
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	e8 16       	cp	r14, r24
     ca6:	f1 04       	cpc	r15, r1
     ca8:	01 05       	cpc	r16, r1
     caa:	11 05       	cpc	r17, r1
     cac:	31 f0       	breq	.+12     	; 0xcba <__clzsi2+0x36>
     cae:	28 f0       	brcs	.+10     	; 0xcba <__clzsi2+0x36>
     cb0:	88 e0       	ldi	r24, 0x08	; 8
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	17 c0       	rjmp	.+46     	; 0xce8 <__clzsi2+0x64>
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	a0 e0       	ldi	r26, 0x00	; 0
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	12 c0       	rjmp	.+36     	; 0xce8 <__clzsi2+0x64>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	e8 16       	cp	r14, r24
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	f8 06       	cpc	r15, r24
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 07       	cpc	r16, r24
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	18 07       	cpc	r17, r24
     cd4:	28 f0       	brcs	.+10     	; 0xce0 <__clzsi2+0x5c>
     cd6:	88 e1       	ldi	r24, 0x18	; 24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	a0 e0       	ldi	r26, 0x00	; 0
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <__clzsi2+0x64>
     ce0:	80 e1       	ldi	r24, 0x10	; 16
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	a0 e0       	ldi	r26, 0x00	; 0
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	20 e2       	ldi	r18, 0x20	; 32
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	28 1b       	sub	r18, r24
     cf2:	39 0b       	sbc	r19, r25
     cf4:	4a 0b       	sbc	r20, r26
     cf6:	5b 0b       	sbc	r21, r27
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <__clzsi2+0x7e>
     cfa:	16 95       	lsr	r17
     cfc:	07 95       	ror	r16
     cfe:	f7 94       	ror	r15
     d00:	e7 94       	ror	r14
     d02:	8a 95       	dec	r24
     d04:	d2 f7       	brpl	.-12     	; 0xcfa <__clzsi2+0x76>
     d06:	f7 01       	movw	r30, r14
     d08:	e2 59       	subi	r30, 0x92	; 146
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	80 81       	ld	r24, Z
     d0e:	28 1b       	sub	r18, r24
     d10:	31 09       	sbc	r19, r1
     d12:	41 09       	sbc	r20, r1
     d14:	51 09       	sbc	r21, r1
     d16:	c9 01       	movw	r24, r18
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	08 95       	ret

00000d22 <__pack_f>:
     d22:	df 92       	push	r13
     d24:	ef 92       	push	r14
     d26:	ff 92       	push	r15
     d28:	0f 93       	push	r16
     d2a:	1f 93       	push	r17
     d2c:	fc 01       	movw	r30, r24
     d2e:	e4 80       	ldd	r14, Z+4	; 0x04
     d30:	f5 80       	ldd	r15, Z+5	; 0x05
     d32:	06 81       	ldd	r16, Z+6	; 0x06
     d34:	17 81       	ldd	r17, Z+7	; 0x07
     d36:	d1 80       	ldd	r13, Z+1	; 0x01
     d38:	80 81       	ld	r24, Z
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	48 f4       	brcc	.+18     	; 0xd50 <__pack_f+0x2e>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	a0 e1       	ldi	r26, 0x10	; 16
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e8 2a       	or	r14, r24
     d48:	f9 2a       	or	r15, r25
     d4a:	0a 2b       	or	r16, r26
     d4c:	1b 2b       	or	r17, r27
     d4e:	a5 c0       	rjmp	.+330    	; 0xe9a <__pack_f+0x178>
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	09 f4       	brne	.+2      	; 0xd56 <__pack_f+0x34>
     d54:	9f c0       	rjmp	.+318    	; 0xe94 <__pack_f+0x172>
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	21 f4       	brne	.+8      	; 0xd62 <__pack_f+0x40>
     d5a:	ee 24       	eor	r14, r14
     d5c:	ff 24       	eor	r15, r15
     d5e:	87 01       	movw	r16, r14
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <__pack_f+0x4a>
     d62:	e1 14       	cp	r14, r1
     d64:	f1 04       	cpc	r15, r1
     d66:	01 05       	cpc	r16, r1
     d68:	11 05       	cpc	r17, r1
     d6a:	19 f4       	brne	.+6      	; 0xd72 <__pack_f+0x50>
     d6c:	e0 e0       	ldi	r30, 0x00	; 0
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	96 c0       	rjmp	.+300    	; 0xe9e <__pack_f+0x17c>
     d72:	62 81       	ldd	r22, Z+2	; 0x02
     d74:	73 81       	ldd	r23, Z+3	; 0x03
     d76:	9f ef       	ldi	r25, 0xFF	; 255
     d78:	62 38       	cpi	r22, 0x82	; 130
     d7a:	79 07       	cpc	r23, r25
     d7c:	0c f0       	brlt	.+2      	; 0xd80 <__pack_f+0x5e>
     d7e:	5b c0       	rjmp	.+182    	; 0xe36 <__pack_f+0x114>
     d80:	22 e8       	ldi	r18, 0x82	; 130
     d82:	3f ef       	ldi	r19, 0xFF	; 255
     d84:	26 1b       	sub	r18, r22
     d86:	37 0b       	sbc	r19, r23
     d88:	2a 31       	cpi	r18, 0x1A	; 26
     d8a:	31 05       	cpc	r19, r1
     d8c:	2c f0       	brlt	.+10     	; 0xd98 <__pack_f+0x76>
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	2a c0       	rjmp	.+84     	; 0xdec <__pack_f+0xca>
     d98:	b8 01       	movw	r22, r16
     d9a:	a7 01       	movw	r20, r14
     d9c:	02 2e       	mov	r0, r18
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <__pack_f+0x86>
     da0:	76 95       	lsr	r23
     da2:	67 95       	ror	r22
     da4:	57 95       	ror	r21
     da6:	47 95       	ror	r20
     da8:	0a 94       	dec	r0
     daa:	d2 f7       	brpl	.-12     	; 0xda0 <__pack_f+0x7e>
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	a0 e0       	ldi	r26, 0x00	; 0
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <__pack_f+0x9c>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	aa 1f       	adc	r26, r26
     dbc:	bb 1f       	adc	r27, r27
     dbe:	2a 95       	dec	r18
     dc0:	d2 f7       	brpl	.-12     	; 0xdb6 <__pack_f+0x94>
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	a1 09       	sbc	r26, r1
     dc6:	b1 09       	sbc	r27, r1
     dc8:	8e 21       	and	r24, r14
     dca:	9f 21       	and	r25, r15
     dcc:	a0 23       	and	r26, r16
     dce:	b1 23       	and	r27, r17
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	a1 05       	cpc	r26, r1
     dd4:	b1 05       	cpc	r27, r1
     dd6:	21 f0       	breq	.+8      	; 0xde0 <__pack_f+0xbe>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	a0 e0       	ldi	r26, 0x00	; 0
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	9a 01       	movw	r18, r20
     de2:	ab 01       	movw	r20, r22
     de4:	28 2b       	or	r18, r24
     de6:	39 2b       	or	r19, r25
     de8:	4a 2b       	or	r20, r26
     dea:	5b 2b       	or	r21, r27
     dec:	da 01       	movw	r26, r20
     dee:	c9 01       	movw	r24, r18
     df0:	8f 77       	andi	r24, 0x7F	; 127
     df2:	90 70       	andi	r25, 0x00	; 0
     df4:	a0 70       	andi	r26, 0x00	; 0
     df6:	b0 70       	andi	r27, 0x00	; 0
     df8:	80 34       	cpi	r24, 0x40	; 64
     dfa:	91 05       	cpc	r25, r1
     dfc:	a1 05       	cpc	r26, r1
     dfe:	b1 05       	cpc	r27, r1
     e00:	39 f4       	brne	.+14     	; 0xe10 <__pack_f+0xee>
     e02:	27 ff       	sbrs	r18, 7
     e04:	09 c0       	rjmp	.+18     	; 0xe18 <__pack_f+0xf6>
     e06:	20 5c       	subi	r18, 0xC0	; 192
     e08:	3f 4f       	sbci	r19, 0xFF	; 255
     e0a:	4f 4f       	sbci	r20, 0xFF	; 255
     e0c:	5f 4f       	sbci	r21, 0xFF	; 255
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <__pack_f+0xf6>
     e10:	21 5c       	subi	r18, 0xC1	; 193
     e12:	3f 4f       	sbci	r19, 0xFF	; 255
     e14:	4f 4f       	sbci	r20, 0xFF	; 255
     e16:	5f 4f       	sbci	r21, 0xFF	; 255
     e18:	e0 e0       	ldi	r30, 0x00	; 0
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	20 30       	cpi	r18, 0x00	; 0
     e1e:	a0 e0       	ldi	r26, 0x00	; 0
     e20:	3a 07       	cpc	r19, r26
     e22:	a0 e0       	ldi	r26, 0x00	; 0
     e24:	4a 07       	cpc	r20, r26
     e26:	a0 e4       	ldi	r26, 0x40	; 64
     e28:	5a 07       	cpc	r21, r26
     e2a:	10 f0       	brcs	.+4      	; 0xe30 <__pack_f+0x10e>
     e2c:	e1 e0       	ldi	r30, 0x01	; 1
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	79 01       	movw	r14, r18
     e32:	8a 01       	movw	r16, r20
     e34:	27 c0       	rjmp	.+78     	; 0xe84 <__pack_f+0x162>
     e36:	60 38       	cpi	r22, 0x80	; 128
     e38:	71 05       	cpc	r23, r1
     e3a:	64 f5       	brge	.+88     	; 0xe94 <__pack_f+0x172>
     e3c:	fb 01       	movw	r30, r22
     e3e:	e1 58       	subi	r30, 0x81	; 129
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	d8 01       	movw	r26, r16
     e44:	c7 01       	movw	r24, r14
     e46:	8f 77       	andi	r24, 0x7F	; 127
     e48:	90 70       	andi	r25, 0x00	; 0
     e4a:	a0 70       	andi	r26, 0x00	; 0
     e4c:	b0 70       	andi	r27, 0x00	; 0
     e4e:	80 34       	cpi	r24, 0x40	; 64
     e50:	91 05       	cpc	r25, r1
     e52:	a1 05       	cpc	r26, r1
     e54:	b1 05       	cpc	r27, r1
     e56:	39 f4       	brne	.+14     	; 0xe66 <__pack_f+0x144>
     e58:	e7 fe       	sbrs	r14, 7
     e5a:	0d c0       	rjmp	.+26     	; 0xe76 <__pack_f+0x154>
     e5c:	80 e4       	ldi	r24, 0x40	; 64
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	04 c0       	rjmp	.+8      	; 0xe6e <__pack_f+0x14c>
     e66:	8f e3       	ldi	r24, 0x3F	; 63
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	a0 e0       	ldi	r26, 0x00	; 0
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e8 0e       	add	r14, r24
     e70:	f9 1e       	adc	r15, r25
     e72:	0a 1f       	adc	r16, r26
     e74:	1b 1f       	adc	r17, r27
     e76:	17 ff       	sbrs	r17, 7
     e78:	05 c0       	rjmp	.+10     	; 0xe84 <__pack_f+0x162>
     e7a:	16 95       	lsr	r17
     e7c:	07 95       	ror	r16
     e7e:	f7 94       	ror	r15
     e80:	e7 94       	ror	r14
     e82:	31 96       	adiw	r30, 0x01	; 1
     e84:	87 e0       	ldi	r24, 0x07	; 7
     e86:	16 95       	lsr	r17
     e88:	07 95       	ror	r16
     e8a:	f7 94       	ror	r15
     e8c:	e7 94       	ror	r14
     e8e:	8a 95       	dec	r24
     e90:	d1 f7       	brne	.-12     	; 0xe86 <__pack_f+0x164>
     e92:	05 c0       	rjmp	.+10     	; 0xe9e <__pack_f+0x17c>
     e94:	ee 24       	eor	r14, r14
     e96:	ff 24       	eor	r15, r15
     e98:	87 01       	movw	r16, r14
     e9a:	ef ef       	ldi	r30, 0xFF	; 255
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	6e 2f       	mov	r22, r30
     ea0:	67 95       	ror	r22
     ea2:	66 27       	eor	r22, r22
     ea4:	67 95       	ror	r22
     ea6:	90 2f       	mov	r25, r16
     ea8:	9f 77       	andi	r25, 0x7F	; 127
     eaa:	d7 94       	ror	r13
     eac:	dd 24       	eor	r13, r13
     eae:	d7 94       	ror	r13
     eb0:	8e 2f       	mov	r24, r30
     eb2:	86 95       	lsr	r24
     eb4:	49 2f       	mov	r20, r25
     eb6:	46 2b       	or	r20, r22
     eb8:	58 2f       	mov	r21, r24
     eba:	5d 29       	or	r21, r13
     ebc:	b7 01       	movw	r22, r14
     ebe:	ca 01       	movw	r24, r20
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	ff 90       	pop	r15
     ec6:	ef 90       	pop	r14
     ec8:	df 90       	pop	r13
     eca:	08 95       	ret

00000ecc <__unpack_f>:
     ecc:	fc 01       	movw	r30, r24
     ece:	db 01       	movw	r26, r22
     ed0:	40 81       	ld	r20, Z
     ed2:	51 81       	ldd	r21, Z+1	; 0x01
     ed4:	22 81       	ldd	r18, Z+2	; 0x02
     ed6:	62 2f       	mov	r22, r18
     ed8:	6f 77       	andi	r22, 0x7F	; 127
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	22 1f       	adc	r18, r18
     ede:	22 27       	eor	r18, r18
     ee0:	22 1f       	adc	r18, r18
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	89 2f       	mov	r24, r25
     ee6:	88 0f       	add	r24, r24
     ee8:	82 2b       	or	r24, r18
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	99 1f       	adc	r25, r25
     ef0:	99 27       	eor	r25, r25
     ef2:	99 1f       	adc	r25, r25
     ef4:	11 96       	adiw	r26, 0x01	; 1
     ef6:	9c 93       	st	X, r25
     ef8:	11 97       	sbiw	r26, 0x01	; 1
     efa:	21 15       	cp	r18, r1
     efc:	31 05       	cpc	r19, r1
     efe:	a9 f5       	brne	.+106    	; 0xf6a <__unpack_f+0x9e>
     f00:	41 15       	cp	r20, r1
     f02:	51 05       	cpc	r21, r1
     f04:	61 05       	cpc	r22, r1
     f06:	71 05       	cpc	r23, r1
     f08:	11 f4       	brne	.+4      	; 0xf0e <__unpack_f+0x42>
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	37 c0       	rjmp	.+110    	; 0xf7c <__unpack_f+0xb0>
     f0e:	82 e8       	ldi	r24, 0x82	; 130
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	13 96       	adiw	r26, 0x03	; 3
     f14:	9c 93       	st	X, r25
     f16:	8e 93       	st	-X, r24
     f18:	12 97       	sbiw	r26, 0x02	; 2
     f1a:	9a 01       	movw	r18, r20
     f1c:	ab 01       	movw	r20, r22
     f1e:	67 e0       	ldi	r22, 0x07	; 7
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	44 1f       	adc	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	6a 95       	dec	r22
     f2a:	d1 f7       	brne	.-12     	; 0xf20 <__unpack_f+0x54>
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	8c 93       	st	X, r24
     f30:	0d c0       	rjmp	.+26     	; 0xf4c <__unpack_f+0x80>
     f32:	22 0f       	add	r18, r18
     f34:	33 1f       	adc	r19, r19
     f36:	44 1f       	adc	r20, r20
     f38:	55 1f       	adc	r21, r21
     f3a:	12 96       	adiw	r26, 0x02	; 2
     f3c:	8d 91       	ld	r24, X+
     f3e:	9c 91       	ld	r25, X
     f40:	13 97       	sbiw	r26, 0x03	; 3
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	13 96       	adiw	r26, 0x03	; 3
     f46:	9c 93       	st	X, r25
     f48:	8e 93       	st	-X, r24
     f4a:	12 97       	sbiw	r26, 0x02	; 2
     f4c:	20 30       	cpi	r18, 0x00	; 0
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	38 07       	cpc	r19, r24
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	48 07       	cpc	r20, r24
     f56:	80 e4       	ldi	r24, 0x40	; 64
     f58:	58 07       	cpc	r21, r24
     f5a:	58 f3       	brcs	.-42     	; 0xf32 <__unpack_f+0x66>
     f5c:	14 96       	adiw	r26, 0x04	; 4
     f5e:	2d 93       	st	X+, r18
     f60:	3d 93       	st	X+, r19
     f62:	4d 93       	st	X+, r20
     f64:	5c 93       	st	X, r21
     f66:	17 97       	sbiw	r26, 0x07	; 7
     f68:	08 95       	ret
     f6a:	2f 3f       	cpi	r18, 0xFF	; 255
     f6c:	31 05       	cpc	r19, r1
     f6e:	79 f4       	brne	.+30     	; 0xf8e <__unpack_f+0xc2>
     f70:	41 15       	cp	r20, r1
     f72:	51 05       	cpc	r21, r1
     f74:	61 05       	cpc	r22, r1
     f76:	71 05       	cpc	r23, r1
     f78:	19 f4       	brne	.+6      	; 0xf80 <__unpack_f+0xb4>
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	8c 93       	st	X, r24
     f7e:	08 95       	ret
     f80:	64 ff       	sbrs	r22, 4
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <__unpack_f+0xbe>
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	8c 93       	st	X, r24
     f88:	12 c0       	rjmp	.+36     	; 0xfae <__unpack_f+0xe2>
     f8a:	1c 92       	st	X, r1
     f8c:	10 c0       	rjmp	.+32     	; 0xfae <__unpack_f+0xe2>
     f8e:	2f 57       	subi	r18, 0x7F	; 127
     f90:	30 40       	sbci	r19, 0x00	; 0
     f92:	13 96       	adiw	r26, 0x03	; 3
     f94:	3c 93       	st	X, r19
     f96:	2e 93       	st	-X, r18
     f98:	12 97       	sbiw	r26, 0x02	; 2
     f9a:	83 e0       	ldi	r24, 0x03	; 3
     f9c:	8c 93       	st	X, r24
     f9e:	87 e0       	ldi	r24, 0x07	; 7
     fa0:	44 0f       	add	r20, r20
     fa2:	55 1f       	adc	r21, r21
     fa4:	66 1f       	adc	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	8a 95       	dec	r24
     faa:	d1 f7       	brne	.-12     	; 0xfa0 <__unpack_f+0xd4>
     fac:	70 64       	ori	r23, 0x40	; 64
     fae:	14 96       	adiw	r26, 0x04	; 4
     fb0:	4d 93       	st	X+, r20
     fb2:	5d 93       	st	X+, r21
     fb4:	6d 93       	st	X+, r22
     fb6:	7c 93       	st	X, r23
     fb8:	17 97       	sbiw	r26, 0x07	; 7
     fba:	08 95       	ret

00000fbc <__fpcmp_parts_f>:
     fbc:	1f 93       	push	r17
     fbe:	dc 01       	movw	r26, r24
     fc0:	fb 01       	movw	r30, r22
     fc2:	9c 91       	ld	r25, X
     fc4:	92 30       	cpi	r25, 0x02	; 2
     fc6:	08 f4       	brcc	.+2      	; 0xfca <__fpcmp_parts_f+0xe>
     fc8:	47 c0       	rjmp	.+142    	; 0x1058 <__fpcmp_parts_f+0x9c>
     fca:	80 81       	ld	r24, Z
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	08 f4       	brcc	.+2      	; 0xfd2 <__fpcmp_parts_f+0x16>
     fd0:	43 c0       	rjmp	.+134    	; 0x1058 <__fpcmp_parts_f+0x9c>
     fd2:	94 30       	cpi	r25, 0x04	; 4
     fd4:	51 f4       	brne	.+20     	; 0xfea <__fpcmp_parts_f+0x2e>
     fd6:	11 96       	adiw	r26, 0x01	; 1
     fd8:	1c 91       	ld	r17, X
     fda:	84 30       	cpi	r24, 0x04	; 4
     fdc:	99 f5       	brne	.+102    	; 0x1044 <__fpcmp_parts_f+0x88>
     fde:	81 81       	ldd	r24, Z+1	; 0x01
     fe0:	68 2f       	mov	r22, r24
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	61 1b       	sub	r22, r17
     fe6:	71 09       	sbc	r23, r1
     fe8:	3f c0       	rjmp	.+126    	; 0x1068 <__fpcmp_parts_f+0xac>
     fea:	84 30       	cpi	r24, 0x04	; 4
     fec:	21 f0       	breq	.+8      	; 0xff6 <__fpcmp_parts_f+0x3a>
     fee:	92 30       	cpi	r25, 0x02	; 2
     ff0:	31 f4       	brne	.+12     	; 0xffe <__fpcmp_parts_f+0x42>
     ff2:	82 30       	cpi	r24, 0x02	; 2
     ff4:	b9 f1       	breq	.+110    	; 0x1064 <__fpcmp_parts_f+0xa8>
     ff6:	81 81       	ldd	r24, Z+1	; 0x01
     ff8:	88 23       	and	r24, r24
     ffa:	89 f1       	breq	.+98     	; 0x105e <__fpcmp_parts_f+0xa2>
     ffc:	2d c0       	rjmp	.+90     	; 0x1058 <__fpcmp_parts_f+0x9c>
     ffe:	11 96       	adiw	r26, 0x01	; 1
    1000:	1c 91       	ld	r17, X
    1002:	11 97       	sbiw	r26, 0x01	; 1
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	f1 f0       	breq	.+60     	; 0x1044 <__fpcmp_parts_f+0x88>
    1008:	81 81       	ldd	r24, Z+1	; 0x01
    100a:	18 17       	cp	r17, r24
    100c:	d9 f4       	brne	.+54     	; 0x1044 <__fpcmp_parts_f+0x88>
    100e:	12 96       	adiw	r26, 0x02	; 2
    1010:	2d 91       	ld	r18, X+
    1012:	3c 91       	ld	r19, X
    1014:	13 97       	sbiw	r26, 0x03	; 3
    1016:	82 81       	ldd	r24, Z+2	; 0x02
    1018:	93 81       	ldd	r25, Z+3	; 0x03
    101a:	82 17       	cp	r24, r18
    101c:	93 07       	cpc	r25, r19
    101e:	94 f0       	brlt	.+36     	; 0x1044 <__fpcmp_parts_f+0x88>
    1020:	28 17       	cp	r18, r24
    1022:	39 07       	cpc	r19, r25
    1024:	bc f0       	brlt	.+46     	; 0x1054 <__fpcmp_parts_f+0x98>
    1026:	14 96       	adiw	r26, 0x04	; 4
    1028:	8d 91       	ld	r24, X+
    102a:	9d 91       	ld	r25, X+
    102c:	0d 90       	ld	r0, X+
    102e:	bc 91       	ld	r27, X
    1030:	a0 2d       	mov	r26, r0
    1032:	24 81       	ldd	r18, Z+4	; 0x04
    1034:	35 81       	ldd	r19, Z+5	; 0x05
    1036:	46 81       	ldd	r20, Z+6	; 0x06
    1038:	57 81       	ldd	r21, Z+7	; 0x07
    103a:	28 17       	cp	r18, r24
    103c:	39 07       	cpc	r19, r25
    103e:	4a 07       	cpc	r20, r26
    1040:	5b 07       	cpc	r21, r27
    1042:	18 f4       	brcc	.+6      	; 0x104a <__fpcmp_parts_f+0x8e>
    1044:	11 23       	and	r17, r17
    1046:	41 f0       	breq	.+16     	; 0x1058 <__fpcmp_parts_f+0x9c>
    1048:	0a c0       	rjmp	.+20     	; 0x105e <__fpcmp_parts_f+0xa2>
    104a:	82 17       	cp	r24, r18
    104c:	93 07       	cpc	r25, r19
    104e:	a4 07       	cpc	r26, r20
    1050:	b5 07       	cpc	r27, r21
    1052:	40 f4       	brcc	.+16     	; 0x1064 <__fpcmp_parts_f+0xa8>
    1054:	11 23       	and	r17, r17
    1056:	19 f0       	breq	.+6      	; 0x105e <__fpcmp_parts_f+0xa2>
    1058:	61 e0       	ldi	r22, 0x01	; 1
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	05 c0       	rjmp	.+10     	; 0x1068 <__fpcmp_parts_f+0xac>
    105e:	6f ef       	ldi	r22, 0xFF	; 255
    1060:	7f ef       	ldi	r23, 0xFF	; 255
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <__fpcmp_parts_f+0xac>
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	cb 01       	movw	r24, r22
    106a:	1f 91       	pop	r17
    106c:	08 95       	ret

0000106e <UART_vidInit>:
#include "UART_priv.h"
#include "UART_config.h"
/************************************************************************************/


void UART_vidInit(uint16 copy_u8UART_BaudRate){
    106e:	df 93       	push	r29
    1070:	cf 93       	push	r28
    1072:	00 d0       	rcall	.+0      	; 0x1074 <UART_vidInit+0x6>
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01


	/********************** Setting  Baud Rate **********************/
	UART_setBaudRate(copy_u8UART_BaudRate);
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	0e 94 3b 09 	call	0x1276	; 0x1276 <UART_setBaudRate>
	/***************************************************************/
    SET_BIT(UCSRC_REG, UCSRC_URSEL);
    1084:	a0 e4       	ldi	r26, 0x40	; 64
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e0 e4       	ldi	r30, 0x40	; 64
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 68       	ori	r24, 0x80	; 128
    1090:	8c 93       	st	X, r24


	#if(UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)

		CLR_BIT(UCSRC_REG, UCSRC_UMSEL);
    1092:	a0 e4       	ldi	r26, 0x40	; 64
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e0 e4       	ldi	r30, 0x40	; 64
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	8f 7b       	andi	r24, 0xBF	; 191
    109e:	8c 93       	st	X, r24

		#if(UART_SPEED_MODE == UART_NORMAL_SPEED)
			CLR_BIT(UCSRA_REG, UCSRA_U2X);
    10a0:	ab e2       	ldi	r26, 0x2B	; 43
    10a2:	b0 e0       	ldi	r27, 0x00	; 0
    10a4:	eb e2       	ldi	r30, 0x2B	; 43
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	8d 7f       	andi	r24, 0xFD	; 253
    10ac:	8c 93       	st	X, r24
			SET_BIT(UCSRC_REG, UCSRC_UMSEL);
	#endif


	#if(UART_MPCM_OPERATION == UART_SINGLE_MODE)
			CLR_BIT(UCSRA_REG, UCSRA_MPCM);
    10ae:	ab e2       	ldi	r26, 0x2B	; 43
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	eb e2       	ldi	r30, 0x2B	; 43
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8e 7f       	andi	r24, 0xFE	; 254
    10ba:	8c 93       	st	X, r24
			SET_BIT(UCSRA_REG, UCSRA_MPCM);
	#endif


	// Receiver Enable
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
    10bc:	aa e2       	ldi	r26, 0x2A	; 42
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	ea e2       	ldi	r30, 0x2A	; 42
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	80 61       	ori	r24, 0x10	; 16
    10c8:	8c 93       	st	X, r24

	// Transmitter Enable
	SET_BIT(UCSRB_REG, UCSRB_TXEN);
    10ca:	aa e2       	ldi	r26, 0x2A	; 42
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ea e2       	ldi	r30, 0x2A	; 42
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	88 60       	ori	r24, 0x08	; 8
    10d6:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
		SET_BIT(UCSRB_REG, UCSRB_UCSZ2);

	#elif(UART_DATA_BIT == UART_DATA_8bit)

		SET_BIT(UCSRC_REG, UCSRC_UCSZ0);
    10d8:	a0 e4       	ldi	r26, 0x40	; 64
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e0 e4       	ldi	r30, 0x40	; 64
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	82 60       	ori	r24, 0x02	; 2
    10e4:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UCSZ1);
    10e6:	a0 e4       	ldi	r26, 0x40	; 64
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e0 e4       	ldi	r30, 0x40	; 64
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	80 81       	ld	r24, Z
    10f0:	84 60       	ori	r24, 0x04	; 4
    10f2:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
    10f4:	aa e2       	ldi	r26, 0x2A	; 42
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	ea e2       	ldi	r30, 0x2A	; 42
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	8b 7f       	andi	r24, 0xFB	; 251
    1100:	8c 93       	st	X, r24


	/********************* Setting No Stop Bits *********************/
	#if(UART_STOP_BIT == UART_STOP_1bit)

		CLR_BIT(UCSRC_REG, UCSRC_USBS);
    1102:	a0 e4       	ldi	r26, 0x40	; 64
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e0 e4       	ldi	r30, 0x40	; 64
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	87 7f       	andi	r24, 0xF7	; 247
    110e:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSRC_UPM0);
		SET_BIT(UCSRC_REG, UCSRC_UPM1);

	#elif(UART_PARITY_MODE == UART_PARITY_ODD)

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
    1110:	a0 e4       	ldi	r26, 0x40	; 64
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e0 e4       	ldi	r30, 0x40	; 64
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	80 62       	ori	r24, 0x20	; 32
    111c:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
    111e:	a0 e4       	ldi	r26, 0x40	; 64
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e0 e4       	ldi	r30, 0x40	; 64
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 61       	ori	r24, 0x10	; 16
    112a:	8c 93       	st	X, r24
	/**************************************************************/




}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	08 95       	ret

00001136 <UART_enuSendChar>:


ErrorStatus_t UART_enuSendChar(uint8_t copy_u8Data){
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <UART_enuSendChar+0x6>
    113c:	cd b7       	in	r28, 0x3d	; 61
    113e:	de b7       	in	r29, 0x3e	; 62
    1140:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1142:	19 82       	std	Y+1, r1	; 0x01


	// Wait until transmit buffer is empty
	while(GET_BIT(UCSRA_REG, UCSRA_URDE) == 0);
    1144:	eb e2       	ldi	r30, 0x2B	; 43
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	82 95       	swap	r24
    114c:	86 95       	lsr	r24
    114e:	87 70       	andi	r24, 0x07	; 7
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	81 70       	andi	r24, 0x01	; 1
    1156:	90 70       	andi	r25, 0x00	; 0
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	a1 f3       	breq	.-24     	; 0x1144 <UART_enuSendChar+0xe>

	UDR_REG = copy_u8Data;
    115c:	ec e2       	ldi	r30, 0x2C	; 44
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	80 83       	st	Z, r24


	Local_enuErrrorState = ERROR_STATUS_OK;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    1168:	89 81       	ldd	r24, Y+1	; 0x01
}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <UART_enuSendString>:


ErrorStatus_t UART_enuSendString(uint8_t* copy_pu8Data){
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <UART_enuSendString+0x6>
    117a:	00 d0       	rcall	.+0      	; 0x117c <UART_enuSendString+0x8>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	9b 83       	std	Y+3, r25	; 0x03
    1182:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1184:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	9b 81       	ldd	r25, Y+3	; 0x03
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	69 f4       	brne	.+26     	; 0x11a8 <UART_enuSendString+0x34>
		return Local_enuErrrorState;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	8c 83       	std	Y+4, r24	; 0x04
    1192:	16 c0       	rjmp	.+44     	; 0x11c0 <UART_enuSendString+0x4c>
	}

	else{

		while(*copy_pu8Data != '\0'){
			UART_enuSendChar(*copy_pu8Data);
    1194:	ea 81       	ldd	r30, Y+2	; 0x02
    1196:	fb 81       	ldd	r31, Y+3	; 0x03
    1198:	80 81       	ld	r24, Z
    119a:	0e 94 9b 08 	call	0x1136	; 0x1136 <UART_enuSendChar>
			copy_pu8Data++;
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	9b 81       	ldd	r25, Y+3	; 0x03
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	9b 83       	std	Y+3, r25	; 0x03
    11a6:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
	}

	else{

		while(*copy_pu8Data != '\0'){
    11a8:	ea 81       	ldd	r30, Y+2	; 0x02
    11aa:	fb 81       	ldd	r31, Y+3	; 0x03
    11ac:	80 81       	ld	r24, Z
    11ae:	88 23       	and	r24, r24
    11b0:	89 f7       	brne	.-30     	; 0x1194 <UART_enuSendString+0x20>
			UART_enuSendChar(*copy_pu8Data);
			copy_pu8Data++;
		}
		UART_enuSendChar('\0');
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	0e 94 9b 08 	call	0x1136	; 0x1136 <UART_enuSendChar>
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	8c 83       	std	Y+4, r24	; 0x04
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <UART_enuRecieveChar>:

ErrorStatus_t UART_enuRecieveChar(uint8_t* copy_pu8Data){
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	00 d0       	rcall	.+0      	; 0x11d6 <UART_enuRecieveChar+0x6>
    11d6:	00 d0       	rcall	.+0      	; 0x11d8 <UART_enuRecieveChar+0x8>
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	9b 83       	std	Y+3, r25	; 0x03
    11de:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    11e0:	19 82       	std	Y+1, r1	; 0x01

	if(copy_pu8Data == NULL){
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	9b 81       	ldd	r25, Y+3	; 0x03
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	19 f4       	brne	.+6      	; 0x11f0 <UART_enuRecieveChar+0x20>
		return Local_enuErrrorState;
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	8c 83       	std	Y+4, r24	; 0x04
    11ee:	0f c0       	rjmp	.+30     	; 0x120e <UART_enuRecieveChar+0x3e>
	}

	else{

		// Receive Complete
		while(GET_BIT(UCSRA_REG, UCSRA_RXC) == 0);
    11f0:	eb e2       	ldi	r30, 0x2B	; 43
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	88 23       	and	r24, r24
    11f8:	dc f7       	brge	.-10     	; 0x11f0 <UART_enuRecieveChar+0x20>

		*copy_pu8Data = UDR_REG;
    11fa:	ec e2       	ldi	r30, 0x2C	; 44
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	ea 81       	ldd	r30, Y+2	; 0x02
    1202:	fb 81       	ldd	r31, Y+3	; 0x03
    1204:	80 83       	st	Z, r24
	}

	Local_enuErrrorState = ERROR_STATUS_OK;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	8c 83       	std	Y+4, r24	; 0x04
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <UART_enuRecieveString>:



ErrorStatus_t UART_enuRecieveString(uint8_t* copy_pu8Data) {
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	00 d0       	rcall	.+0      	; 0x1224 <UART_enuRecieveString+0x6>
    1224:	00 d0       	rcall	.+0      	; 0x1226 <UART_enuRecieveString+0x8>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9b 83       	std	Y+3, r25	; 0x03
    122c:	8a 83       	std	Y+2, r24	; 0x02
    if (copy_pu8Data == NULL) {
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	9b 81       	ldd	r25, Y+3	; 0x03
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	11 f4       	brne	.+4      	; 0x123a <UART_enuRecieveString+0x1c>
        return ERROR_STATUS_FAILURE;
    1236:	1c 82       	std	Y+4, r1	; 0x04
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <UART_enuRecieveString+0x48>
    }

    uint8_t receivedChar;
    while (1) {
        // Receive a character from UART
        UART_enuRecieveChar(&receivedChar);
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <UART_enuRecieveChar>

        // Store the received character in the buffer
        *copy_pu8Data = receivedChar;
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	ea 81       	ldd	r30, Y+2	; 0x02
    1246:	fb 81       	ldd	r31, Y+3	; 0x03
    1248:	80 83       	st	Z, r24

        // Check if the received character is the null terminator
        if (receivedChar == '\0') {
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	88 23       	and	r24, r24
    124e:	31 f0       	breq	.+12     	; 0x125c <UART_enuRecieveString+0x3e>
            break; // Exit the loop if end of string is detected
        }

        // Move to the next position in the buffer
        copy_pu8Data++;
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	9b 81       	ldd	r25, Y+3	; 0x03
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	9b 83       	std	Y+3, r25	; 0x03
    1258:	8a 83       	std	Y+2, r24	; 0x02
    125a:	ef cf       	rjmp	.-34     	; 0x123a <UART_enuRecieveString+0x1c>
    }

    // Null-terminate the string
    *copy_pu8Data = '\0';
    125c:	ea 81       	ldd	r30, Y+2	; 0x02
    125e:	fb 81       	ldd	r31, Y+3	; 0x03
    1260:	10 82       	st	Z, r1

    return ERROR_STATUS_OK;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	8c 83       	std	Y+4, r24	; 0x04
    1266:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <UART_setBaudRate>:

//!
void UART_setBaudRate(uint16 copy_u8UART_BaudRate){
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <UART_setBaudRate+0x6>
    127c:	00 d0       	rcall	.+0      	; 0x127e <UART_setBaudRate+0x8>
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	9c 83       	std	Y+4, r25	; 0x04
    1284:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int copy_u16Temp = 0;
    1286:	1a 82       	std	Y+2, r1	; 0x02
    1288:	19 82       	std	Y+1, r1	; 0x01

    #if (UART_SYNC_ASYNC_SELECT == UART_ASYNCMODE)
        #if (UART_SPEED_MODE == UART_NORMAL_SPEED)


    			copy_u16Temp = ((UART_MC_OSC_FREQ / (16UL*copy_u8UART_BaudRate) ) - 1);
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	cc 01       	movw	r24, r24
    1290:	a0 e0       	ldi	r26, 0x00	; 0
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	aa 1f       	adc	r26, r26
    129a:	bb 1f       	adc	r27, r27
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	aa 1f       	adc	r26, r26
    12a2:	bb 1f       	adc	r27, r27
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	aa 1f       	adc	r26, r26
    12aa:	bb 1f       	adc	r27, r27
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	aa 1f       	adc	r26, r26
    12b2:	bb 1f       	adc	r27, r27
    12b4:	9c 01       	movw	r18, r24
    12b6:	ad 01       	movw	r20, r26
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	92 e1       	ldi	r25, 0x12	; 18
    12bc:	aa e7       	ldi	r26, 0x7A	; 122
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	bc 01       	movw	r22, r24
    12c2:	cd 01       	movw	r24, r26
    12c4:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <__udivmodsi4>
    12c8:	da 01       	movw	r26, r20
    12ca:	c9 01       	movw	r24, r18
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	89 83       	std	Y+1, r24	; 0x01

    			copy_u16Temp = ((UART_MC_OSC_FREQ / (2UL*copy_u8UART_BaudRate) ) - 1);
    #endif


    CLR_BIT(UCSRC_REG, UCSRC_URSEL);
    12d2:	a0 e4       	ldi	r26, 0x40	; 64
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	e0 e4       	ldi	r30, 0x40	; 64
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	8f 77       	andi	r24, 0x7F	; 127
    12de:	8c 93       	st	X, r24

    UBRRH_REG = (uint8_t)(copy_u16Temp >> 8);
    12e0:	e0 e4       	ldi	r30, 0x40	; 64
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	9a 81       	ldd	r25, Y+2	; 0x02
    12e8:	89 2f       	mov	r24, r25
    12ea:	99 27       	eor	r25, r25
    12ec:	80 83       	st	Z, r24
    UBRRL_REG = (uint8_t)copy_u16Temp;
    12ee:	e9 e2       	ldi	r30, 0x29	; 41
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	80 83       	st	Z, r24
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <TWI_enuInit>:





TWIStatus_t TWI_enuInit(void) {
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    TWIStatus_t Local_enuErrorState = TWI_STATUS_FAILURE;
    130e:	19 82       	std	Y+1, r1	; 0x01

    #if (TWI_MODE_M_or_S == TWI_MASTER_MODE)
        // Set Value for Bit Rate (should only be when we working with master)
        TWBR_REG = TWBR_VALUE;
    1310:	e0 e2       	ldi	r30, 0x20	; 32
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	80 83       	st	Z, r24
        TWSR_REG = TWI_PRESCALER_VALUE; // Set prescaler bits
    1318:	e1 e2       	ldi	r30, 0x21	; 33
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	10 82       	st	Z, r1
    #endif

    // Enable TWI Interrupt
    GIE_enuEnable();
    131e:	0e 94 8d 14 	call	0x291a	; 0x291a <GIE_enuEnable>

    // Configure TWCR register based on ACK configuration
    #if (TWI_ACK_CONFIG == TWI_ACK_ENABLE)
        TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWEA) | (1 << TWCR_TWIE);
    1322:	e6 e5       	ldi	r30, 0x56	; 86
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	85 e4       	ldi	r24, 0x45	; 69
    1328:	80 83       	st	Z, r24
        TWCR_REG = (1 << TWCR_TWEN) | (1 << TWCR_TWIE);
    #endif

    // Configure General Call Enable (GCE)
    #if (TWI_GCE_CONFIG == TWI_GCE_ENABLE)
        SET_BIT(TWAR_REG, TWAR_TWGCE);
    132a:	a2 e2       	ldi	r26, 0x22	; 34
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	e2 e2       	ldi	r30, 0x22	; 34
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	80 81       	ld	r24, Z
    1334:	81 60       	ori	r24, 0x01	; 1
    1336:	8c 93       	st	X, r24
    #elif (TWI_GCE_CONFIG == TWI_GCE_DISABLE)
        CLR_BIT(TWAR_REG, TWAR_TWGCE);
    #endif

    // Set Address for MC
    TWAR_REG = (TWAR_REG & 0x01) | TWI_SET_ADDR;
    1338:	a2 e2       	ldi	r26, 0x22	; 34
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e2 e2       	ldi	r30, 0x22	; 34
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	88 60       	ori	r24, 0x08	; 8
    1346:	8c 93       	st	X, r24

    Local_enuErrorState = TWI_STATUS_OK;
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	89 83       	std	Y+1, r24	; 0x01
    return Local_enuErrorState;
    134c:	89 81       	ldd	r24, Y+1	; 0x01
}
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <TWI_enuStartCondition>:



TWIStatus_t TWI_enuStartCondition(void){
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	0f 92       	push	r0
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1360:	19 82       	std	Y+1, r1	; 0x01
	 * TWEN bit must be set whenever you want to intiate a TWI operation.
	 * To send start condition enable TWI by setting TWSTA, TWINT, and TWEN in one operation.
	 * This ensures that TWI modules receives a consistent command and avoids intermediate states.
	 * */

	TWCR_REG = (1 << TWCR_TWSTA) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1362:	e6 e5       	ldi	r30, 0x56	; 86
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	84 ea       	ldi	r24, 0xA4	; 164
    1368:	80 83       	st	Z, r24



	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    136a:	e6 e5       	ldi	r30, 0x56	; 86
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	80 81       	ld	r24, Z
    1370:	88 23       	and	r24, r24
    1372:	dc f7       	brge	.-10     	; 0x136a <TWI_enuStartCondition+0x14>
	 * 1  1  1  1  {1 0 0   0}
	 *
	 * 0xF8
	 * */

	if( (TWSR_REG & 0xF8) == TWI_START_SUCCESS_CODE){
    1374:	e1 e2       	ldi	r30, 0x21	; 33
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	88 2f       	mov	r24, r24
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	88 7f       	andi	r24, 0xF8	; 248
    1380:	90 70       	andi	r25, 0x00	; 0
    1382:	88 30       	cpi	r24, 0x08	; 8
    1384:	91 05       	cpc	r25, r1
    1386:	11 f4       	brne	.+4      	; 0x138c <TWI_enuStartCondition+0x36>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    138c:	89 81       	ldd	r24, Y+1	; 0x01
}
    138e:	0f 90       	pop	r0
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	08 95       	ret

00001396 <TWI_enuRepeatStartCondition>:

TWIStatus_t TWI_enuRepeatStartCondition(void){
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    13a0:	19 82       	std	Y+1, r1	; 0x01
	 * TWEN bit must be set whenever you want to intiate a TWI operation.
	 * To send start condition enable TWI by setting TWSTA, TWINT, and TWEN in one operation.
	 * This ensures that TWI modules receives a consistent command and avoids intermediate states.
	 * */

	TWCR_REG = (1 << TWCR_TWSTA) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    13a2:	e6 e5       	ldi	r30, 0x56	; 86
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	84 ea       	ldi	r24, 0xA4	; 164
    13a8:	80 83       	st	Z, r24


	// Wait for TWINT Flag set. This indicates that the START condition has been transmitted.
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    13aa:	e6 e5       	ldi	r30, 0x56	; 86
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	88 23       	and	r24, r24
    13b2:	dc f7       	brge	.-10     	; 0x13aa <TWI_enuRepeatStartCondition+0x14>
	 * 0xF8
	 * */



	if( (TWSR_REG &0xF8) == TWI_RSTART_SUCCESS_CODE){
    13b4:	e1 e2       	ldi	r30, 0x21	; 33
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	88 7f       	andi	r24, 0xF8	; 248
    13c0:	90 70       	andi	r25, 0x00	; 0
    13c2:	80 31       	cpi	r24, 0x10	; 16
    13c4:	91 05       	cpc	r25, r1
    13c6:	11 f4       	brne	.+4      	; 0x13cc <TWI_enuRepeatStartCondition+0x36>
		Local_enu_ErrorState = TWI_STATUS_OK;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	89 83       	std	Y+1, r24	; 0x01

	}

	return Local_enu_ErrorState;
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ce:	0f 90       	pop	r0
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <TWI_enuStopCondition>:


//! since there no status code why not doing macro like function
// IDEAS for feature development
TWIStatus_t TWI_enuStopCondition(void){
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	0f 92       	push	r0
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    13e0:	19 82       	std	Y+1, r1	; 0x01
	 * TWCR_TWINT & TWCR_TWEN - essential to start TWI action
	 *
	 * */


    TWCR_REG = (1 << TWCR_TWSTO) | (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    13e2:	e6 e5       	ldi	r30, 0x56	; 86
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	84 e9       	ldi	r24, 0x94	; 148
    13e8:	80 83       	st	Z, r24


	Local_enu_ErrorState = TWI_STATUS_OK;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f0:	0f 90       	pop	r0
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <TWI_enuSetSlaveOperation>:


TWIStatus_t TWI_enuSetSlaveOperation(
		uint8_t copy_u8SlaveAddress, uint8_t copy_u8Operation){
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	00 d0       	rcall	.+0      	; 0x13fe <TWI_enuSetSlaveOperation+0x6>
    13fe:	0f 92       	push	r0
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
    1404:	8a 83       	std	Y+2, r24	; 0x02
    1406:	6b 83       	std	Y+3, r22	; 0x03

	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    1408:	19 82       	std	Y+1, r1	; 0x01

    // Load the slave address and operation (read/write) into the data register
	TWDR_REG = (copy_u8SlaveAddress << 1) | (copy_u8Operation);
    140a:	e3 e2       	ldi	r30, 0x23	; 35
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	98 2f       	mov	r25, r24
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	89 2b       	or	r24, r25
    141e:	80 83       	st	Z, r24

    TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1420:	e6 e5       	ldi	r30, 0x56	; 86
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	84 e8       	ldi	r24, 0x84	; 132
    1426:	80 83       	st	Z, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    1428:	e6 e5       	ldi	r30, 0x56	; 86
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	88 23       	and	r24, r24
    1430:	dc f7       	brge	.-10     	; 0x1428 <TWI_enuSetSlaveOperation+0x30>




	if(copy_u8Operation == TWI_WriteOperation){
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 23       	and	r24, r24
    1436:	69 f4       	brne	.+26     	; 0x1452 <TWI_enuSetSlaveOperation+0x5a>

		if((TWSR_REG &0xF8) == TWI_SLA_WR_ACK_TSUCCESS_CODE){
    1438:	e1 e2       	ldi	r30, 0x21	; 33
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	88 7f       	andi	r24, 0xF8	; 248
    1444:	90 70       	andi	r25, 0x00	; 0
    1446:	88 31       	cpi	r24, 0x18	; 24
    1448:	91 05       	cpc	r25, r1
    144a:	91 f4       	brne	.+36     	; 0x1470 <TWI_enuSetSlaveOperation+0x78>
			Local_enu_ErrorState = TWI_STATUS_OK;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	89 83       	std	Y+1, r24	; 0x01
    1450:	0f c0       	rjmp	.+30     	; 0x1470 <TWI_enuSetSlaveOperation+0x78>
		}

	} else if(copy_u8Operation == TWI_ReadOperation){
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	61 f4       	brne	.+24     	; 0x1470 <TWI_enuSetSlaveOperation+0x78>

		if((TWSR_REG &0xF8) == TWI_SLA_RD_ACK_TSUCCESS_CODE){
    1458:	e1 e2       	ldi	r30, 0x21	; 33
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	88 7f       	andi	r24, 0xF8	; 248
    1464:	90 70       	andi	r25, 0x00	; 0
    1466:	80 34       	cpi	r24, 0x40	; 64
    1468:	91 05       	cpc	r25, r1
    146a:	11 f4       	brne	.+4      	; 0x1470 <TWI_enuSetSlaveOperation+0x78>
			Local_enu_ErrorState = TWI_STATUS_OK;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	89 83       	std	Y+1, r24	; 0x01
		}
	}



	return Local_enu_ErrorState;
    1470:	89 81       	ldd	r24, Y+1	; 0x01
}
    1472:	0f 90       	pop	r0
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <TWI_enuWriteData>:

TWIStatus_t	TWI_enuWriteData(uint8_t copy_u8Data){
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	00 d0       	rcall	.+0      	; 0x1484 <TWI_enuWriteData+0x6>
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    148a:	19 82       	std	Y+1, r1	; 0x01

	TWDR_REG = copy_u8Data;
    148c:	e3 e2       	ldi	r30, 0x23	; 35
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24


    // Clear the TWINT flag and set TWEN to start the operation
    TWCR_REG = (1 << TWCR_TWINT) | (1 << TWCR_TWEN);
    1494:	e6 e5       	ldi	r30, 0x56	; 86
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	84 e8       	ldi	r24, 0x84	; 132
    149a:	80 83       	st	Z, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    149c:	e6 e5       	ldi	r30, 0x56	; 86
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	88 23       	and	r24, r24
    14a4:	dc f7       	brge	.-10     	; 0x149c <TWI_enuWriteData+0x1e>
		#if(TWI_MODE_M_or_S == TWI_MASTER_MODE)




			if((TWSR_REG & 0xF8) == 0x28){
    14a6:	e1 e2       	ldi	r30, 0x21	; 33
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	88 7f       	andi	r24, 0xF8	; 248
    14b2:	90 70       	andi	r25, 0x00	; 0
    14b4:	88 32       	cpi	r24, 0x28	; 40
    14b6:	91 05       	cpc	r25, r1
    14b8:	11 f4       	brne	.+4      	; 0x14be <TWI_enuWriteData+0x40>


				Local_enu_ErrorState = TWI_STATUS_OK;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	89 83       	std	Y+1, r24	; 0x01
		#endif

	#endif


	return Local_enu_ErrorState;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	cf 91       	pop	r28
    14c6:	df 91       	pop	r29
    14c8:	08 95       	ret

000014ca <TWI_enuReadData>:


//!{works fine with status checking}
TWIStatus_t	TWI_enuReadData(uint8_t  *copy_pu8Data){
    14ca:	df 93       	push	r29
    14cc:	cf 93       	push	r28
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <TWI_enuReadData+0x6>
    14d0:	0f 92       	push	r0
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	9b 83       	std	Y+3, r25	; 0x03
    14d8:	8a 83       	std	Y+2, r24	; 0x02
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    14da:	19 82       	std	Y+1, r1	; 0x01

	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    14dc:	a6 e5       	ldi	r26, 0x56	; 86
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e6 e5       	ldi	r30, 0x56	; 86
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	80 68       	ori	r24, 0x80	; 128
    14e8:	8c 93       	st	X, r24

	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    14ea:	e6 e5       	ldi	r30, 0x56	; 86
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	88 23       	and	r24, r24
    14f2:	dc f7       	brge	.-10     	; 0x14ea <TWI_enuReadData+0x20>
	// 0x88 - (slave)  data has been received not ack has been returned

	#if(TWI_ACK_CONFIG == TWI_ACK_ENABLE)

		// Master Receive
		if( ((TWSR_REG & 0xF8) == TWI_M_RSUCCESS_CODE_withAck) ){
    14f4:	e1 e2       	ldi	r30, 0x21	; 33
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	88 7f       	andi	r24, 0xF8	; 248
    1500:	90 70       	andi	r25, 0x00	; 0
    1502:	80 35       	cpi	r24, 0x50	; 80
    1504:	91 05       	cpc	r25, r1
    1506:	19 f4       	brne	.+6      	; 0x150e <TWI_enuReadData+0x44>
			Local_enu_ErrorState = TWI_STATUS_OK;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	0c c0       	rjmp	.+24     	; 0x1526 <TWI_enuReadData+0x5c>

		}

		// Slave Receive
		else if(((TWSR_REG & 0xF8) == TWI_S_RSUCCESS_CODE_withACK)){
    150e:	e1 e2       	ldi	r30, 0x21	; 33
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	88 7f       	andi	r24, 0xF8	; 248
    151a:	90 70       	andi	r25, 0x00	; 0
    151c:	80 38       	cpi	r24, 0x80	; 128
    151e:	91 05       	cpc	r25, r1
    1520:	11 f4       	brne	.+4      	; 0x1526 <TWI_enuReadData+0x5c>
			Local_enu_ErrorState = TWI_STATUS_OK;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	89 83       	std	Y+1, r24	; 0x01
			Local_enu_ErrorState = TWI_STATUS_OK;
		}
	#endif

	// Read data from TWDR Register
	*copy_pu8Data = TWDR_REG;
    1526:	e3 e2       	ldi	r30, 0x23	; 35
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	ea 81       	ldd	r30, Y+2	; 0x02
    152e:	fb 81       	ldd	r31, Y+3	; 0x03
    1530:	80 83       	st	Z, r24

	return Local_enu_ErrorState;
    1532:	89 81       	ldd	r24, Y+1	; 0x01
}
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	0f 90       	pop	r0
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <TWI_enuCheckMyAddress>:


//!{works fine with status checking}
ErrorStatus_t TWI_enuCheckMyAddress(void){
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
	TWIStatus_t	  Local_enu_ErrorState = TWI_STATUS_FAILURE;
    154a:	19 82       	std	Y+1, r1	; 0x01


	// Clearing the TWINT flag is part of initiating an operation on the TWI.
	SET_BIT(TWCR_REG, TWCR_TWINT);
    154c:	a6 e5       	ldi	r26, 0x56	; 86
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e6 e5       	ldi	r30, 0x56	; 86
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	80 68       	ori	r24, 0x80	; 128
    1558:	8c 93       	st	X, r24


	// Wait for TWINT Flag is set. Waiting for current operation to be done
	while(!(GET_BIT(TWCR_REG, TWCR_TWINT)));
    155a:	e6 e5       	ldi	r30, 0x56	; 86
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	88 23       	and	r24, r24
    1562:	dc f7       	brge	.-10     	; 0x155a <TWI_enuCheckMyAddress+0x1a>


	// 0x60 - SLA+W has been received, ACK has been returned
	// 0xA8 - SLA+R has been received, ACK has been returned

	if((TWSR_REG & 0xF8) == TWI_SLA_WR_ACK_RSUCCESS_CODE){
    1564:	e1 e2       	ldi	r30, 0x21	; 33
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	88 7f       	andi	r24, 0xF8	; 248
    1570:	90 70       	andi	r25, 0x00	; 0
    1572:	80 36       	cpi	r24, 0x60	; 96
    1574:	91 05       	cpc	r25, r1
    1576:	19 f4       	brne	.+6      	; 0x157e <TWI_enuCheckMyAddress+0x3e>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	89 83       	std	Y+1, r24	; 0x01
    157c:	0c c0       	rjmp	.+24     	; 0x1596 <TWI_enuCheckMyAddress+0x56>
	}


	else if((TWSR_REG & 0xF8) == TWI_SLA_RD_ACK_RSUCCESS_CODE){
    157e:	e1 e2       	ldi	r30, 0x21	; 33
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	88 7f       	andi	r24, 0xF8	; 248
    158a:	90 70       	andi	r25, 0x00	; 0
    158c:	88 3a       	cpi	r24, 0xA8	; 168
    158e:	91 05       	cpc	r25, r1
    1590:	11 f4       	brne	.+4      	; 0x1596 <TWI_enuCheckMyAddress+0x56>
		Local_enu_ErrorState = TWI_STATUS_OK;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    1596:	89 81       	ldd	r24, Y+1	; 0x01
}
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <TIMER0_voidInit>:
/*******************************************************************************************************/



/****************************************** TIMER0 FUNCTIONS ******************************************/
void TIMER0_voidInit(void){
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
	 * 3. Enable Interrupt (Compre Match Interrupt - OverFlow Interrupt)
	 *
	 * */

	/** Active global interrupt **/
	GIE_enuEnable();
    15a8:	0e 94 8d 14 	call	0x291a	; 0x291a <GIE_enuEnable>
			#endif
		#endif


	#elif(TIMER0_MODE_SELECT == TIMER_MODE_FastPWM)
		SET_BIT(TCCR0_REG, TCCR0_WGM00);
    15ac:	a3 e5       	ldi	r26, 0x53	; 83
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e3 e5       	ldi	r30, 0x53	; 83
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	80 64       	ori	r24, 0x40	; 64
    15b8:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_WGM01);
    15ba:	a3 e5       	ldi	r26, 0x53	; 83
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e3 e5       	ldi	r30, 0x53	; 83
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	88 60       	ori	r24, 0x08	; 8
    15c6:	8c 93       	st	X, r24

		#if(TIMER0_FastPwm_Type == TIMER_FastPwmType_Inverted)
			CLR_BIT(TCCR0_REG, TCCR0_COM00);
    15c8:	a3 e5       	ldi	r26, 0x53	; 83
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e3 e5       	ldi	r30, 0x53	; 83
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 7e       	andi	r24, 0xEF	; 239
    15d4:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, TCCR0_COM01);
    15d6:	a3 e5       	ldi	r26, 0x53	; 83
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e3 e5       	ldi	r30, 0x53	; 83
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 62       	ori	r24, 0x20	; 32
    15e2:	8c 93       	st	X, r24
			SET_BIT(TCCR0_REG, TCCR0_COM01);

		#endif

		// By default, OC0 pin is default output pin for Timer0's PWM signal
		DIO_enuSetPinDirection(TIMER_OC0_PORT, TIMER_OC0_PIN, DIO_u8OUTPUT);
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	63 e0       	ldi	r22, 0x03	; 3
    15e8:	41 e0       	ldi	r20, 0x01	; 1
    15ea:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
		CLR_BIT(TCCR0_REG, TCCR0_CS00);
		SET_BIT(TCCR0_REG, TCCR0_CS01);
		CLR_BIT(TCCR0_REG, TCCR0_CS02);

	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_64)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
    15ee:	a3 e5       	ldi	r26, 0x53	; 83
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e3 e5       	ldi	r30, 0x53	; 83
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	81 60       	ori	r24, 0x01	; 1
    15fa:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG, TCCR0_CS01);
    15fc:	a3 e5       	ldi	r26, 0x53	; 83
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e3 e5       	ldi	r30, 0x53	; 83
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	82 60       	ori	r24, 0x02	; 2
    1608:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_CS02);
    160a:	a3 e5       	ldi	r26, 0x53	; 83
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e3 e5       	ldi	r30, 0x53	; 83
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8b 7f       	andi	r24, 0xFB	; 251
    1616:	8c 93       	st	X, r24
	#elif(TIMER0_CLK_PRE_SELECT == TIMER_PRES_1024)
		SET_BIT(TCCR0_REG, TCCR0_CS00);
		CLR_BIT(TCCR0_REG, TCCR0_CS01);
		SET_BIT(TCCR0_REG, TCCR0_CS02);
	#endif
}
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <TIMER0_voidStart>:

void TIMER0_voidStart(void){
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			SET_BIT(TIMSK_REG, TIMSK_OCIE0);

		#endif
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <TIMER0_voidStop>:

void TIMER0_voidStop(void){
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62

		#elif(TIMER0_MODE_SELECT == TIMER_MODE_CTC)
			CLR_BIT(TIMSK_REG, TIMSK_OCIE0);

		#endif
}
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <TIMER0_voidScheduleTask>:

uint8_t TIMER0_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	60 97       	sbiw	r28, 0x10	; 16
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	9a 87       	std	Y+10, r25	; 0x0a
    1658:	89 87       	std	Y+9, r24	; 0x09
    165a:	4b 87       	std	Y+11, r20	; 0x0b
    165c:	5c 87       	std	Y+12, r21	; 0x0c
    165e:	6d 87       	std	Y+13, r22	; 0x0d
    1660:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    1662:	1d 82       	std	Y+5, r1	; 0x05
    1664:	1e 82       	std	Y+6, r1	; 0x06
    1666:	1f 82       	std	Y+7, r1	; 0x07
    1668:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR0_REG & 0x07){
    166a:	e3 e5       	ldi	r30, 0x53	; 83
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9c 01       	movw	r18, r24
    1676:	27 70       	andi	r18, 0x07	; 7
    1678:	30 70       	andi	r19, 0x00	; 0
    167a:	38 8b       	std	Y+16, r19	; 0x10
    167c:	2f 87       	std	Y+15, r18	; 0x0f
    167e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1680:	98 89       	ldd	r25, Y+16	; 0x10
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	69 f1       	breq	.+90     	; 0x16e2 <TIMER0_voidScheduleTask+0xa8>
    1688:	2f 85       	ldd	r18, Y+15	; 0x0f
    168a:	38 89       	ldd	r19, Y+16	; 0x10
    168c:	24 30       	cpi	r18, 0x04	; 4
    168e:	31 05       	cpc	r19, r1
    1690:	5c f4       	brge	.+22     	; 0x16a8 <TIMER0_voidScheduleTask+0x6e>
    1692:	8f 85       	ldd	r24, Y+15	; 0x0f
    1694:	98 89       	ldd	r25, Y+16	; 0x10
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	91 05       	cpc	r25, r1
    169a:	89 f0       	breq	.+34     	; 0x16be <TIMER0_voidScheduleTask+0x84>
    169c:	2f 85       	ldd	r18, Y+15	; 0x0f
    169e:	38 89       	ldd	r19, Y+16	; 0x10
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	a9 f0       	breq	.+42     	; 0x16d0 <TIMER0_voidScheduleTask+0x96>
    16a6:	37 c0       	rjmp	.+110    	; 0x1716 <TIMER0_voidScheduleTask+0xdc>
    16a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16aa:	98 89       	ldd	r25, Y+16	; 0x10
    16ac:	84 30       	cpi	r24, 0x04	; 4
    16ae:	91 05       	cpc	r25, r1
    16b0:	09 f1       	breq	.+66     	; 0x16f4 <TIMER0_voidScheduleTask+0xba>
    16b2:	2f 85       	ldd	r18, Y+15	; 0x0f
    16b4:	38 89       	ldd	r19, Y+16	; 0x10
    16b6:	25 30       	cpi	r18, 0x05	; 5
    16b8:	31 05       	cpc	r19, r1
    16ba:	29 f1       	breq	.+74     	; 0x1706 <TIMER0_voidScheduleTask+0xcc>
    16bc:	2c c0       	rjmp	.+88     	; 0x1716 <TIMER0_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	a0 e0       	ldi	r26, 0x00	; 0
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	af 83       	std	Y+7, r26	; 0x07
    16cc:	b8 87       	std	Y+8, r27	; 0x08
    16ce:	23 c0       	rjmp	.+70     	; 0x1716 <TIMER0_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    16d0:	88 e0       	ldi	r24, 0x08	; 8
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a0 e0       	ldi	r26, 0x00	; 0
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	8d 83       	std	Y+5, r24	; 0x05
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	af 83       	std	Y+7, r26	; 0x07
    16de:	b8 87       	std	Y+8, r27	; 0x08
    16e0:	1a c0       	rjmp	.+52     	; 0x1716 <TIMER0_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    16e2:	80 e4       	ldi	r24, 0x40	; 64
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a0 e0       	ldi	r26, 0x00	; 0
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	8d 83       	std	Y+5, r24	; 0x05
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	af 83       	std	Y+7, r26	; 0x07
    16f0:	b8 87       	std	Y+8, r27	; 0x08
    16f2:	11 c0       	rjmp	.+34     	; 0x1716 <TIMER0_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	a0 e0       	ldi	r26, 0x00	; 0
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	8d 83       	std	Y+5, r24	; 0x05
    16fe:	9e 83       	std	Y+6, r25	; 0x06
    1700:	af 83       	std	Y+7, r26	; 0x07
    1702:	b8 87       	std	Y+8, r27	; 0x08
    1704:	08 c0       	rjmp	.+16     	; 0x1716 <TIMER0_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	94 e0       	ldi	r25, 0x04	; 4
    170a:	a0 e0       	ldi	r26, 0x00	; 0
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	8d 83       	std	Y+5, r24	; 0x05
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	af 83       	std	Y+7, r26	; 0x07
    1714:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    1716:	6b 85       	ldd	r22, Y+11	; 0x0b
    1718:	7c 85       	ldd	r23, Y+12	; 0x0c
    171a:	8d 85       	ldd	r24, Y+13	; 0x0d
    171c:	9e 85       	ldd	r25, Y+14	; 0x0e
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	34 e2       	ldi	r19, 0x24	; 36
    1722:	44 e7       	ldi	r20, 0x74	; 116
    1724:	5b e4       	ldi	r21, 0x4B	; 75
    1726:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	7c 01       	movw	r14, r24
    1730:	8d 01       	movw	r16, r26
    1732:	6d 81       	ldd	r22, Y+5	; 0x05
    1734:	7e 81       	ldd	r23, Y+6	; 0x06
    1736:	8f 81       	ldd	r24, Y+7	; 0x07
    1738:	98 85       	ldd	r25, Y+8	; 0x08
    173a:	0e 94 c9 05 	call	0xb92	; 0xb92 <__floatunsisf>
    173e:	9b 01       	movw	r18, r22
    1740:	ac 01       	movw	r20, r24
    1742:	c8 01       	movw	r24, r16
    1744:	b7 01       	movw	r22, r14
    1746:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	9a 83       	std	Y+2, r25	; 0x02
    1752:	ab 83       	std	Y+3, r26	; 0x03
    1754:	bc 83       	std	Y+4, r27	; 0x04
		}

	#endif


		TIMERS_ISR_Functions[0] = TaskCallback;
    1756:	89 85       	ldd	r24, Y+9	; 0x09
    1758:	9a 85       	ldd	r25, Y+10	; 0x0a
    175a:	90 93 91 01 	sts	0x0191, r25
    175e:	80 93 90 01 	sts	0x0190, r24
		TIMER0_voidStart();
    1762:	0e 94 0f 0b 	call	0x161e	; 0x161e <TIMER0_voidStart>
	return 0;
    1766:	80 e0       	ldi	r24, 0x00	; 0
}
    1768:	60 96       	adiw	r28, 0x10	; 16
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	08 95       	ret

00001782 <TIMER0_voidSetPWM>:

void  TIMER0_voidSetPWM(uint8_t copy_u8DutyCycle){
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	0f 92       	push	r0
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Avr32 does has floating point operation
	 * **/


	OCR0_REG = (uint8_t)(((uint16_t)copy_u8DutyCycle * 256) / 100);
    178e:	ec e5       	ldi	r30, 0x5C	; 92
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	98 2f       	mov	r25, r24
    179a:	88 27       	eor	r24, r24
    179c:	24 e6       	ldi	r18, 0x64	; 100
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	b9 01       	movw	r22, r18
    17a2:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <__udivmodhi4>
    17a6:	cb 01       	movw	r24, r22
    17a8:	80 83       	st	Z, r24
}
    17aa:	0f 90       	pop	r0
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <RESET_TIMER0_COUNTER>:


void RESET_TIMER0_COUNTER(){
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	cd b7       	in	r28, 0x3d	; 61
    17b8:	de b7       	in	r29, 0x3e	; 62
	TCNT0_REG = 0;
    17ba:	e2 e5       	ldi	r30, 0x52	; 82
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	10 82       	st	Z, r1
}
    17c0:	cf 91       	pop	r28
    17c2:	df 91       	pop	r29
    17c4:	08 95       	ret

000017c6 <TIMER1_voidInit>:
/******************************************************************************************************/


/****************************************** TIMER1 FUNCTIONS ******************************************/

void TIMER1_voidInit(void) {
    17c6:	df 93       	push	r29
    17c8:	cf 93       	push	r28
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
	 *
	 */


	/** Active global interrupt **/
	GIE_enuEnable();
    17ce:	0e 94 8d 14 	call	0x291a	; 0x291a <GIE_enuEnable>


	#if(TIMER1_OC1A_OUTPUT_STATE == TIMER1_OC1_OUTPUT_ENABLE)
		DIO_enuSetPinDirection(TIMER_OC1A_PORT, TIMER_OC1A_PIN, DIO_u8OUTPUT);
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	65 e0       	ldi	r22, 0x05	; 5
    17d6:	41 e0       	ldi	r20, 0x01	; 1
    17d8:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
		#elif(TIMER_OC1A_OUTPUT_MODE == TIMER_SET_OC1A)
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A0);
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A1);

		#elif(TIMER_OC1A_OUTPUT_MODE == TIMER_CLR_OC1A)
			CLR_BIT(TCCR1A_REG, TCCR1A_COM1A0);
    17dc:	af e4       	ldi	r26, 0x4F	; 79
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ef e4       	ldi	r30, 0x4F	; 79
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8f 7b       	andi	r24, 0xBF	; 191
    17e8:	8c 93       	st	X, r24
			SET_BIT(TCCR1A_REG, TCCR1A_COM1A1);
    17ea:	af e4       	ldi	r26, 0x4F	; 79
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ef e4       	ldi	r30, 0x4F	; 79
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 68       	ori	r24, 0x80	; 128
    17f6:	8c 93       	st	X, r24

		#endif
	#endif

	#if(TIMER1_OC1B_OUTPUT_STATE == TIMER1_OC1_OUTPUT_ENABLE)
		DIO_enuSetPinDirection(TIMER_OC1B_PORT, TIMER_OC1B_PIN, DIO_u8OUTPUT);
    17f8:	83 e0       	ldi	r24, 0x03	; 3
    17fa:	64 e0       	ldi	r22, 0x04	; 4
    17fc:	41 e0       	ldi	r20, 0x01	; 1
    17fe:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
		#elif(TIMER_OC1B_OUTPUT_MODE == TIMER_SET_OC1B)
			SET_BIT(TCCR1A_REG, TCCR1A_COM1B0);
			SET_BIT(TCCR1A_REG, TCCR1A_COM1B1);

		#elif(TIMER_OC1A_OUTPUT_MODE == TIMER_CLR_OC1A)
			CLR_BIT(TCCR1A_REG, TCCR1A_COM1B0);
    1802:	af e4       	ldi	r26, 0x4F	; 79
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	ef e4       	ldi	r30, 0x4F	; 79
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	8f 7e       	andi	r24, 0xEF	; 239
    180e:	8c 93       	st	X, r24
			SET_BIT(TCCR1A_REG, TCCR1A_COM1B1);
    1810:	af e4       	ldi	r26, 0x4F	; 79
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ef e4       	ldi	r30, 0x4F	; 79
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 62       	ori	r24, 0x20	; 32
    181c:	8c 93       	st	X, r24

		CLR_BIT(TCCR1B_REG, TCCR1B_WGM12);
		SET_BIT(TCCR1B_REG, TCCR1B_WGM13);

	#elif(TIMER1_MODE_SELECT == TIMER1_MODE_FastPWM_16bit_FREQ)
		CLR_BIT(TCCR1A_REG, TCCR1A_WGM10);
    181e:	af e4       	ldi	r26, 0x4F	; 79
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	ef e4       	ldi	r30, 0x4F	; 79
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	8e 7f       	andi	r24, 0xFE	; 254
    182a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG, TCCR1A_WGM11);
    182c:	af e4       	ldi	r26, 0x4F	; 79
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	ef e4       	ldi	r30, 0x4F	; 79
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	82 60       	ori	r24, 0x02	; 2
    1838:	8c 93       	st	X, r24

		SET_BIT(TCCR1B_REG, TCCR1B_WGM12);
    183a:	ae e4       	ldi	r26, 0x4E	; 78
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	ee e4       	ldi	r30, 0x4E	; 78
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	88 60       	ori	r24, 0x08	; 8
    1846:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_WGM13);
    1848:	ae e4       	ldi	r26, 0x4E	; 78
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	ee e4       	ldi	r30, 0x4E	; 78
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 61       	ori	r24, 0x10	; 16
    1854:	8c 93       	st	X, r24


/***************************************************************************/
	/**2. Set Prescaller clock **/
	#if(TIMER1_CLK_PRE_SELECT == TIMER_PRES_01)
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    1856:	ae e4       	ldi	r26, 0x4E	; 78
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	ee e4       	ldi	r30, 0x4E	; 78
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	81 60       	ori	r24, 0x01	; 1
    1862:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    1864:	ae e4       	ldi	r26, 0x4E	; 78
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	ee e4       	ldi	r30, 0x4E	; 78
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	8d 7f       	andi	r24, 0xFD	; 253
    1870:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    1872:	ae e4       	ldi	r26, 0x4E	; 78
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ee e4       	ldi	r30, 0x4E	; 78
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8b 7f       	andi	r24, 0xFB	; 251
    187e:	8c 93       	st	X, r24
	#elif(TIMER1_CLK_PRE_SELECT == TIMER_PRES_1024)
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
	#endif
}
    1880:	cf 91       	pop	r28
    1882:	df 91       	pop	r29
    1884:	08 95       	ret

00001886 <Timer1_SetupForTimeMeasurement>:



ErrorStatus_t Timer1_SetupForTimeMeasurement(uint16 copy_u16prescaler){
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	00 d0       	rcall	.+0      	; 0x188c <Timer1_SetupForTimeMeasurement+0x6>
    188c:	00 d0       	rcall	.+0      	; 0x188e <Timer1_SetupForTimeMeasurement+0x8>
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
    1892:	9b 83       	std	Y+3, r25	; 0x03
    1894:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    1896:	19 82       	std	Y+1, r1	; 0x01


	// Setup Prescaler
	if(copy_u16prescaler == 1){
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	9b 81       	ldd	r25, Y+3	; 0x03
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	91 05       	cpc	r25, r1
    18a0:	b1 f4       	brne	.+44     	; 0x18ce <Timer1_SetupForTimeMeasurement+0x48>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    18a2:	ae e4       	ldi	r26, 0x4E	; 78
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	ee e4       	ldi	r30, 0x4E	; 78
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	81 60       	ori	r24, 0x01	; 1
    18ae:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    18b0:	ae e4       	ldi	r26, 0x4E	; 78
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	ee e4       	ldi	r30, 0x4E	; 78
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	8d 7f       	andi	r24, 0xFD	; 253
    18bc:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    18be:	ae e4       	ldi	r26, 0x4E	; 78
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	ee e4       	ldi	r30, 0x4E	; 78
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	8b 7f       	andi	r24, 0xFB	; 251
    18ca:	8c 93       	st	X, r24
    18cc:	71 c0       	rjmp	.+226    	; 0x19b0 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if (copy_u16prescaler == 8){
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	9b 81       	ldd	r25, Y+3	; 0x03
    18d2:	88 30       	cpi	r24, 0x08	; 8
    18d4:	91 05       	cpc	r25, r1
    18d6:	b1 f4       	brne	.+44     	; 0x1904 <Timer1_SetupForTimeMeasurement+0x7e>
		CLR_BIT(TCCR1B_REG, TCCR1B_CS10);
    18d8:	ae e4       	ldi	r26, 0x4E	; 78
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	ee e4       	ldi	r30, 0x4E	; 78
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	8e 7f       	andi	r24, 0xFE	; 254
    18e4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS11);
    18e6:	ae e4       	ldi	r26, 0x4E	; 78
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	ee e4       	ldi	r30, 0x4E	; 78
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	82 60       	ori	r24, 0x02	; 2
    18f2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    18f4:	ae e4       	ldi	r26, 0x4E	; 78
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	ee e4       	ldi	r30, 0x4E	; 78
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	8b 7f       	andi	r24, 0xFB	; 251
    1900:	8c 93       	st	X, r24
    1902:	56 c0       	rjmp	.+172    	; 0x19b0 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 64){
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	9b 81       	ldd	r25, Y+3	; 0x03
    1908:	80 34       	cpi	r24, 0x40	; 64
    190a:	91 05       	cpc	r25, r1
    190c:	b1 f4       	brne	.+44     	; 0x193a <Timer1_SetupForTimeMeasurement+0xb4>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    190e:	ae e4       	ldi	r26, 0x4E	; 78
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	ee e4       	ldi	r30, 0x4E	; 78
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	81 60       	ori	r24, 0x01	; 1
    191a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS11);
    191c:	ae e4       	ldi	r26, 0x4E	; 78
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	ee e4       	ldi	r30, 0x4E	; 78
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	82 60       	ori	r24, 0x02	; 2
    1928:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS12);
    192a:	ae e4       	ldi	r26, 0x4E	; 78
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ee e4       	ldi	r30, 0x4E	; 78
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8b 7f       	andi	r24, 0xFB	; 251
    1936:	8c 93       	st	X, r24
    1938:	3b c0       	rjmp	.+118    	; 0x19b0 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 256){
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	9b 81       	ldd	r25, Y+3	; 0x03
    193e:	21 e0       	ldi	r18, 0x01	; 1
    1940:	80 30       	cpi	r24, 0x00	; 0
    1942:	92 07       	cpc	r25, r18
    1944:	b1 f4       	brne	.+44     	; 0x1972 <Timer1_SetupForTimeMeasurement+0xec>
		CLR_BIT(TCCR1B_REG, TCCR1B_CS10);
    1946:	ae e4       	ldi	r26, 0x4E	; 78
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	ee e4       	ldi	r30, 0x4E	; 78
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	8e 7f       	andi	r24, 0xFE	; 254
    1952:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    1954:	ae e4       	ldi	r26, 0x4E	; 78
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	ee e4       	ldi	r30, 0x4E	; 78
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8d 7f       	andi	r24, 0xFD	; 253
    1960:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
    1962:	ae e4       	ldi	r26, 0x4E	; 78
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	ee e4       	ldi	r30, 0x4E	; 78
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	84 60       	ori	r24, 0x04	; 4
    196e:	8c 93       	st	X, r24
    1970:	1f c0       	rjmp	.+62     	; 0x19b0 <Timer1_SetupForTimeMeasurement+0x12a>

	} else if(copy_u16prescaler == 1024){
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	9b 81       	ldd	r25, Y+3	; 0x03
    1976:	24 e0       	ldi	r18, 0x04	; 4
    1978:	80 30       	cpi	r24, 0x00	; 0
    197a:	92 07       	cpc	r25, r18
    197c:	b1 f4       	brne	.+44     	; 0x19aa <Timer1_SetupForTimeMeasurement+0x124>
		SET_BIT(TCCR1B_REG, TCCR1B_CS10);
    197e:	ae e4       	ldi	r26, 0x4E	; 78
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	ee e4       	ldi	r30, 0x4E	; 78
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	81 60       	ori	r24, 0x01	; 1
    198a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG, TCCR1B_CS11);
    198c:	ae e4       	ldi	r26, 0x4E	; 78
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	ee e4       	ldi	r30, 0x4E	; 78
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8d 7f       	andi	r24, 0xFD	; 253
    1998:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG, TCCR1B_CS12);
    199a:	ae e4       	ldi	r26, 0x4E	; 78
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	ee e4       	ldi	r30, 0x4E	; 78
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	84 60       	ori	r24, 0x04	; 4
    19a6:	8c 93       	st	X, r24
    19a8:	03 c0       	rjmp	.+6      	; 0x19b0 <Timer1_SetupForTimeMeasurement+0x12a>

	} else{
		return Local_enuErrrorState;
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	8c 83       	std	Y+4, r24	; 0x04
    19ae:	09 c0       	rjmp	.+18     	; 0x19c2 <Timer1_SetupForTimeMeasurement+0x13c>
	}


	// Setup normal mode without no pwm
	TCCR1A_REG = 0x00;
    19b0:	ef e4       	ldi	r30, 0x4F	; 79
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	10 82       	st	Z, r1

	// Reset the timer counter
	RESET_TIMER1_COUNTER();
    19b6:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <RESET_TIMER1_COUNTER>

	Local_enuErrrorState = ERROR_STATUS_OK;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    19be:	29 81       	ldd	r18, Y+1	; 0x01
    19c0:	2c 83       	std	Y+4, r18	; 0x04
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <TIMER1_u16ReadCount>:


uint16 TIMER1_u16ReadCount(void){
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	return TCNT1_REG;
    19da:	ec e4       	ldi	r30, 0x4C	; 76
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
}
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	08 95       	ret

000019e8 <TIMER1_voidStart>:


void TIMER1_voidStart(void) {
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        SET_BIT(TIMSK_REG, TIMSK_OCIE1A);

    #endif
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <TIMER1_voidStop>:


void TIMER1_voidStop(void) {
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
          TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit || \
          TIMER1_MODE_SELECT == TIMER1_MODE_PhaseFreqCorrect)
        CLR_BIT(TIMSK_REG, TIMSK_OCIE1A);

    #endif
}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <TIMER1_voidScheduleTask>:

uint8_t TIMER1_voidScheduleTask(void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds) {
    1a04:	ef 92       	push	r14
    1a06:	ff 92       	push	r15
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
    1a14:	61 97       	sbiw	r28, 0x11	; 17
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	9a 87       	std	Y+10, r25	; 0x0a
    1a22:	89 87       	std	Y+9, r24	; 0x09
    1a24:	4b 87       	std	Y+11, r20	; 0x0b
    1a26:	5c 87       	std	Y+12, r21	; 0x0c
    1a28:	6d 87       	std	Y+13, r22	; 0x0d
    1a2a:	7e 87       	std	Y+14, r23	; 0x0e
    uint32_t Local_u32PrescalerValue = 0;
    1a2c:	1d 82       	std	Y+5, r1	; 0x05
    1a2e:	1e 82       	std	Y+6, r1	; 0x06
    1a30:	1f 82       	std	Y+7, r1	; 0x07
    1a32:	18 86       	std	Y+8, r1	; 0x08

    switch(TCCR1B & 0x07) {
    1a34:	ee e4       	ldi	r30, 0x4E	; 78
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9c 01       	movw	r18, r24
    1a40:	27 70       	andi	r18, 0x07	; 7
    1a42:	30 70       	andi	r19, 0x00	; 0
    1a44:	39 8b       	std	Y+17, r19	; 0x11
    1a46:	28 8b       	std	Y+16, r18	; 0x10
    1a48:	88 89       	ldd	r24, Y+16	; 0x10
    1a4a:	99 89       	ldd	r25, Y+17	; 0x11
    1a4c:	83 30       	cpi	r24, 0x03	; 3
    1a4e:	91 05       	cpc	r25, r1
    1a50:	69 f1       	breq	.+90     	; 0x1aac <TIMER1_voidScheduleTask+0xa8>
    1a52:	28 89       	ldd	r18, Y+16	; 0x10
    1a54:	39 89       	ldd	r19, Y+17	; 0x11
    1a56:	24 30       	cpi	r18, 0x04	; 4
    1a58:	31 05       	cpc	r19, r1
    1a5a:	5c f4       	brge	.+22     	; 0x1a72 <TIMER1_voidScheduleTask+0x6e>
    1a5c:	88 89       	ldd	r24, Y+16	; 0x10
    1a5e:	99 89       	ldd	r25, Y+17	; 0x11
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	91 05       	cpc	r25, r1
    1a64:	89 f0       	breq	.+34     	; 0x1a88 <TIMER1_voidScheduleTask+0x84>
    1a66:	28 89       	ldd	r18, Y+16	; 0x10
    1a68:	39 89       	ldd	r19, Y+17	; 0x11
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	a9 f0       	breq	.+42     	; 0x1a9a <TIMER1_voidScheduleTask+0x96>
    1a70:	38 c0       	rjmp	.+112    	; 0x1ae2 <TIMER1_voidScheduleTask+0xde>
    1a72:	88 89       	ldd	r24, Y+16	; 0x10
    1a74:	99 89       	ldd	r25, Y+17	; 0x11
    1a76:	84 30       	cpi	r24, 0x04	; 4
    1a78:	91 05       	cpc	r25, r1
    1a7a:	09 f1       	breq	.+66     	; 0x1abe <TIMER1_voidScheduleTask+0xba>
    1a7c:	28 89       	ldd	r18, Y+16	; 0x10
    1a7e:	39 89       	ldd	r19, Y+17	; 0x11
    1a80:	25 30       	cpi	r18, 0x05	; 5
    1a82:	31 05       	cpc	r19, r1
    1a84:	29 f1       	breq	.+74     	; 0x1ad0 <TIMER1_voidScheduleTask+0xcc>
    1a86:	2d c0       	rjmp	.+90     	; 0x1ae2 <TIMER1_voidScheduleTask+0xde>
        case 0x01: Local_u32PrescalerValue = 1; break;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e0       	ldi	r26, 0x00	; 0
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	8d 83       	std	Y+5, r24	; 0x05
    1a92:	9e 83       	std	Y+6, r25	; 0x06
    1a94:	af 83       	std	Y+7, r26	; 0x07
    1a96:	b8 87       	std	Y+8, r27	; 0x08
    1a98:	27 c0       	rjmp	.+78     	; 0x1ae8 <TIMER1_voidScheduleTask+0xe4>
        case 0x02: Local_u32PrescalerValue = 8; break;
    1a9a:	88 e0       	ldi	r24, 0x08	; 8
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 e0       	ldi	r26, 0x00	; 0
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	8d 83       	std	Y+5, r24	; 0x05
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	af 83       	std	Y+7, r26	; 0x07
    1aa8:	b8 87       	std	Y+8, r27	; 0x08
    1aaa:	1e c0       	rjmp	.+60     	; 0x1ae8 <TIMER1_voidScheduleTask+0xe4>
        case 0x03: Local_u32PrescalerValue = 64; break;
    1aac:	80 e4       	ldi	r24, 0x40	; 64
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	a0 e0       	ldi	r26, 0x00	; 0
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	af 83       	std	Y+7, r26	; 0x07
    1aba:	b8 87       	std	Y+8, r27	; 0x08
    1abc:	15 c0       	rjmp	.+42     	; 0x1ae8 <TIMER1_voidScheduleTask+0xe4>
        case 0x04: Local_u32PrescalerValue = 256; break;
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	a0 e0       	ldi	r26, 0x00	; 0
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	af 83       	std	Y+7, r26	; 0x07
    1acc:	b8 87       	std	Y+8, r27	; 0x08
    1ace:	0c c0       	rjmp	.+24     	; 0x1ae8 <TIMER1_voidScheduleTask+0xe4>
        case 0x05: Local_u32PrescalerValue = 1024; break;
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	94 e0       	ldi	r25, 0x04	; 4
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	8d 83       	std	Y+5, r24	; 0x05
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	af 83       	std	Y+7, r26	; 0x07
    1ade:	b8 87       	std	Y+8, r27	; 0x08
    1ae0:	03 c0       	rjmp	.+6      	; 0x1ae8 <TIMER1_voidScheduleTask+0xe4>
        default: return 1; // Invalid prescaler setting
    1ae2:	31 e0       	ldi	r19, 0x01	; 1
    1ae4:	3f 87       	std	Y+15, r19	; 0x0f
    1ae6:	31 c0       	rjmp	.+98     	; 0x1b4a <TIMER1_voidScheduleTask+0x146>
    }

    float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU) / Local_u32PrescalerValue;
    1ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	34 e2       	ldi	r19, 0x24	; 36
    1af4:	44 e7       	ldi	r20, 0x74	; 116
    1af6:	5b e4       	ldi	r21, 0x4B	; 75
    1af8:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	7c 01       	movw	r14, r24
    1b02:	8d 01       	movw	r16, r26
    1b04:	6d 81       	ldd	r22, Y+5	; 0x05
    1b06:	7e 81       	ldd	r23, Y+6	; 0x06
    1b08:	8f 81       	ldd	r24, Y+7	; 0x07
    1b0a:	98 85       	ldd	r25, Y+8	; 0x08
    1b0c:	0e 94 c9 05 	call	0xb92	; 0xb92 <__floatunsisf>
    1b10:	9b 01       	movw	r18, r22
    1b12:	ac 01       	movw	r20, r24
    1b14:	c8 01       	movw	r24, r16
    1b16:	b7 01       	movw	r22, r14
    1b18:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	ab 83       	std	Y+3, r26	; 0x03
    1b26:	bc 83       	std	Y+4, r27	; 0x04
            OCR1A = 65535;
            TIMER1_TARGET_NTICKS = (uint32_t)(Local_f64Totalticks / 65535.0);
        }
    #endif

    TIMER1_CURRENT_NTICKS = 0;
    1b28:	10 92 88 01 	sts	0x0188, r1
    1b2c:	10 92 89 01 	sts	0x0189, r1
    1b30:	10 92 8a 01 	sts	0x018A, r1
    1b34:	10 92 8b 01 	sts	0x018B, r1
    TIMERS_ISR_Functions[1] = TaskCallback;
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	90 93 93 01 	sts	0x0193, r25
    1b40:	80 93 92 01 	sts	0x0192, r24
    TIMER1_voidStart();
    1b44:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <TIMER1_voidStart>
    return 0;
    1b48:	1f 86       	std	Y+15, r1	; 0x0f
    1b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1b4c:	61 96       	adiw	r28, 0x11	; 17
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	ff 90       	pop	r15
    1b62:	ef 90       	pop	r14
    1b64:	08 95       	ret

00001b66 <TIMER1_voidSetPWM>:


void TIMER1_voidSetPWM(uint8_t copy_u8DutyCycle, uint8_t copy_u8Channel) {
    1b66:	cf 92       	push	r12
    1b68:	df 92       	push	r13
    1b6a:	ef 92       	push	r14
    1b6c:	ff 92       	push	r15
    1b6e:	0f 93       	push	r16
    1b70:	1f 93       	push	r17
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <TIMER1_voidSetPWM+0x12>
    1b78:	00 d0       	rcall	.+0      	; 0x1b7a <TIMER1_voidSetPWM+0x14>
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <TIMER1_voidSetPWM+0x16>
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	8b 83       	std	Y+3, r24	; 0x03
    1b82:	6c 83       	std	Y+4, r22	; 0x04

		uint16_t Local_u16TopValue = 0;
    1b84:	1a 82       	std	Y+2, r1	; 0x02
    1b86:	19 82       	std	Y+1, r1	; 0x01
			// Ensure ICR1 is already set correctly during initialization
			Local_u16TopValue = ICR1;  // ICR1 for Phase and Frequency Correct

		#endif

		switch(copy_u8Channel){
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8a:	28 2f       	mov	r18, r24
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	3e 83       	std	Y+6, r19	; 0x06
    1b90:	2d 83       	std	Y+5, r18	; 0x05
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	82 34       	cpi	r24, 0x42	; 66
    1b98:	91 05       	cpc	r25, r1
    1b9a:	c9 f1       	breq	.+114    	; 0x1c0e <TIMER1_voidSetPWM+0xa8>
    1b9c:	ed 81       	ldd	r30, Y+5	; 0x05
    1b9e:	fe 81       	ldd	r31, Y+6	; 0x06
    1ba0:	e3 34       	cpi	r30, 0x43	; 67
    1ba2:	f1 05       	cpc	r31, r1
    1ba4:	34 f4       	brge	.+12     	; 0x1bb2 <TIMER1_voidSetPWM+0x4c>
    1ba6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ba8:	3e 81       	ldd	r19, Y+6	; 0x06
    1baa:	21 34       	cpi	r18, 0x41	; 65
    1bac:	31 05       	cpc	r19, r1
    1bae:	61 f0       	breq	.+24     	; 0x1bc8 <TIMER1_voidSetPWM+0x62>
    1bb0:	50 c0       	rjmp	.+160    	; 0x1c52 <TIMER1_voidSetPWM+0xec>
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	81 36       	cpi	r24, 0x61	; 97
    1bb8:	91 05       	cpc	r25, r1
    1bba:	31 f0       	breq	.+12     	; 0x1bc8 <TIMER1_voidSetPWM+0x62>
    1bbc:	ed 81       	ldd	r30, Y+5	; 0x05
    1bbe:	fe 81       	ldd	r31, Y+6	; 0x06
    1bc0:	e2 36       	cpi	r30, 0x62	; 98
    1bc2:	f1 05       	cpc	r31, r1
    1bc4:	21 f1       	breq	.+72     	; 0x1c0e <TIMER1_voidSetPWM+0xa8>
    1bc6:	45 c0       	rjmp	.+138    	; 0x1c52 <TIMER1_voidSetPWM+0xec>

			case 'A': case 'a':

				OCR1A_REG = (uint16_t)(((uint32_t)copy_u8DutyCycle * Local_u16TopValue) / 100);
    1bc8:	0f 2e       	mov	r0, r31
    1bca:	fa e4       	ldi	r31, 0x4A	; 74
    1bcc:	cf 2e       	mov	r12, r31
    1bce:	dd 24       	eor	r13, r13
    1bd0:	f0 2d       	mov	r31, r0
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	e8 2e       	mov	r14, r24
    1bd6:	ff 24       	eor	r15, r15
    1bd8:	00 e0       	ldi	r16, 0x00	; 0
    1bda:	10 e0       	ldi	r17, 0x00	; 0
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	9c 01       	movw	r18, r24
    1be2:	40 e0       	ldi	r20, 0x00	; 0
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	c8 01       	movw	r24, r16
    1be8:	b7 01       	movw	r22, r14
    1bea:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__mulsi3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	24 e6       	ldi	r18, 0x64	; 100
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e0       	ldi	r20, 0x00	; 0
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <__udivmodsi4>
    1c02:	da 01       	movw	r26, r20
    1c04:	c9 01       	movw	r24, r18
    1c06:	f6 01       	movw	r30, r12
    1c08:	91 83       	std	Z+1, r25	; 0x01
    1c0a:	80 83       	st	Z, r24
    1c0c:	22 c0       	rjmp	.+68     	; 0x1c52 <TIMER1_voidSetPWM+0xec>
			break;

			case 'B': case 'b':
				OCR1B_REG = (uint16_t)(((uint32_t)copy_u8DutyCycle * Local_u16TopValue) / 100);
    1c0e:	0f 2e       	mov	r0, r31
    1c10:	f8 e4       	ldi	r31, 0x48	; 72
    1c12:	cf 2e       	mov	r12, r31
    1c14:	dd 24       	eor	r13, r13
    1c16:	f0 2d       	mov	r31, r0
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	e8 2e       	mov	r14, r24
    1c1c:	ff 24       	eor	r15, r15
    1c1e:	00 e0       	ldi	r16, 0x00	; 0
    1c20:	10 e0       	ldi	r17, 0x00	; 0
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	9c 01       	movw	r18, r24
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	c8 01       	movw	r24, r16
    1c2e:	b7 01       	movw	r22, r14
    1c30:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__mulsi3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	24 e6       	ldi	r18, 0x64	; 100
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	bc 01       	movw	r22, r24
    1c42:	cd 01       	movw	r24, r26
    1c44:	0e 94 a7 2e 	call	0x5d4e	; 0x5d4e <__udivmodsi4>
    1c48:	da 01       	movw	r26, r20
    1c4a:	c9 01       	movw	r24, r18
    1c4c:	f6 01       	movw	r30, r12
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	80 83       	st	Z, r24
		}

}
    1c52:	26 96       	adiw	r28, 0x06	; 6
    1c54:	0f b6       	in	r0, 0x3f	; 63
    1c56:	f8 94       	cli
    1c58:	de bf       	out	0x3e, r29	; 62
    1c5a:	0f be       	out	0x3f, r0	; 63
    1c5c:	cd bf       	out	0x3d, r28	; 61
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	ef 90       	pop	r14
    1c6a:	df 90       	pop	r13
    1c6c:	cf 90       	pop	r12
    1c6e:	08 95       	ret

00001c70 <TIMER1_voidSetPWM_16bit>:

#if(TIMER1_MODE_SELECT == TIMER1_MODE_FastPWM_16bit_FREQ || TIMER1_MODE_SELECT == TIMER1_MODE_PWMphasecorrect_16bit_FREQ )
void TIMER1_voidSetPWM_16bit(double copy_u8DutyCycle, uint32_t copy_u32Frequency, uint8_t copy_u8Channel) {
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	69 97       	sbiw	r28, 0x19	; 25
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	f8 94       	cli
    1c82:	de bf       	out	0x3e, r29	; 62
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	cd bf       	out	0x3d, r28	; 61
    1c88:	6d 87       	std	Y+13, r22	; 0x0d
    1c8a:	7e 87       	std	Y+14, r23	; 0x0e
    1c8c:	8f 87       	std	Y+15, r24	; 0x0f
    1c8e:	98 8b       	std	Y+16, r25	; 0x10
    1c90:	29 8b       	std	Y+17, r18	; 0x11
    1c92:	3a 8b       	std	Y+18, r19	; 0x12
    1c94:	4b 8b       	std	Y+19, r20	; 0x13
    1c96:	5c 8b       	std	Y+20, r21	; 0x14
    1c98:	0d 8b       	std	Y+21, r16	; 0x15
    double Local_u32PrescalerValue = 0;
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 e0       	ldi	r26, 0x00	; 0
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	89 87       	std	Y+9, r24	; 0x09
    1ca4:	9a 87       	std	Y+10, r25	; 0x0a
    1ca6:	ab 87       	std	Y+11, r26	; 0x0b
    1ca8:	bc 87       	std	Y+12, r27	; 0x0c
    switch (TCCR1B_REG & 0x07) {
    1caa:	ee e4       	ldi	r30, 0x4E	; 78
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	9c 01       	movw	r18, r24
    1cb6:	27 70       	andi	r18, 0x07	; 7
    1cb8:	30 70       	andi	r19, 0x00	; 0
    1cba:	39 8f       	std	Y+25, r19	; 0x19
    1cbc:	28 8f       	std	Y+24, r18	; 0x18
    1cbe:	88 8d       	ldd	r24, Y+24	; 0x18
    1cc0:	99 8d       	ldd	r25, Y+25	; 0x19
    1cc2:	83 30       	cpi	r24, 0x03	; 3
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	69 f1       	breq	.+90     	; 0x1d22 <TIMER1_voidSetPWM_16bit+0xb2>
    1cc8:	e8 8d       	ldd	r30, Y+24	; 0x18
    1cca:	f9 8d       	ldd	r31, Y+25	; 0x19
    1ccc:	e4 30       	cpi	r30, 0x04	; 4
    1cce:	f1 05       	cpc	r31, r1
    1cd0:	5c f4       	brge	.+22     	; 0x1ce8 <TIMER1_voidSetPWM_16bit+0x78>
    1cd2:	28 8d       	ldd	r18, Y+24	; 0x18
    1cd4:	39 8d       	ldd	r19, Y+25	; 0x19
    1cd6:	21 30       	cpi	r18, 0x01	; 1
    1cd8:	31 05       	cpc	r19, r1
    1cda:	89 f0       	breq	.+34     	; 0x1cfe <TIMER1_voidSetPWM_16bit+0x8e>
    1cdc:	88 8d       	ldd	r24, Y+24	; 0x18
    1cde:	99 8d       	ldd	r25, Y+25	; 0x19
    1ce0:	82 30       	cpi	r24, 0x02	; 2
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	a9 f0       	breq	.+42     	; 0x1d10 <TIMER1_voidSetPWM_16bit+0xa0>
    1ce6:	38 c0       	rjmp	.+112    	; 0x1d58 <TIMER1_voidSetPWM_16bit+0xe8>
    1ce8:	e8 8d       	ldd	r30, Y+24	; 0x18
    1cea:	f9 8d       	ldd	r31, Y+25	; 0x19
    1cec:	e4 30       	cpi	r30, 0x04	; 4
    1cee:	f1 05       	cpc	r31, r1
    1cf0:	09 f1       	breq	.+66     	; 0x1d34 <TIMER1_voidSetPWM_16bit+0xc4>
    1cf2:	28 8d       	ldd	r18, Y+24	; 0x18
    1cf4:	39 8d       	ldd	r19, Y+25	; 0x19
    1cf6:	25 30       	cpi	r18, 0x05	; 5
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	29 f1       	breq	.+74     	; 0x1d46 <TIMER1_voidSetPWM_16bit+0xd6>
    1cfc:	2d c0       	rjmp	.+90     	; 0x1d58 <TIMER1_voidSetPWM_16bit+0xe8>
        case 0x01: Local_u32PrescalerValue = 1; break;
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e8       	ldi	r26, 0x80	; 128
    1d04:	bf e3       	ldi	r27, 0x3F	; 63
    1d06:	89 87       	std	Y+9, r24	; 0x09
    1d08:	9a 87       	std	Y+10, r25	; 0x0a
    1d0a:	ab 87       	std	Y+11, r26	; 0x0b
    1d0c:	bc 87       	std	Y+12, r27	; 0x0c
    1d0e:	2c c0       	rjmp	.+88     	; 0x1d68 <TIMER1_voidSetPWM_16bit+0xf8>
        case 0x02: Local_u32PrescalerValue = 8; break;
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a0 e0       	ldi	r26, 0x00	; 0
    1d16:	b1 e4       	ldi	r27, 0x41	; 65
    1d18:	89 87       	std	Y+9, r24	; 0x09
    1d1a:	9a 87       	std	Y+10, r25	; 0x0a
    1d1c:	ab 87       	std	Y+11, r26	; 0x0b
    1d1e:	bc 87       	std	Y+12, r27	; 0x0c
    1d20:	23 c0       	rjmp	.+70     	; 0x1d68 <TIMER1_voidSetPWM_16bit+0xf8>
        case 0x03: Local_u32PrescalerValue = 64; break;
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a0 e8       	ldi	r26, 0x80	; 128
    1d28:	b2 e4       	ldi	r27, 0x42	; 66
    1d2a:	89 87       	std	Y+9, r24	; 0x09
    1d2c:	9a 87       	std	Y+10, r25	; 0x0a
    1d2e:	ab 87       	std	Y+11, r26	; 0x0b
    1d30:	bc 87       	std	Y+12, r27	; 0x0c
    1d32:	1a c0       	rjmp	.+52     	; 0x1d68 <TIMER1_voidSetPWM_16bit+0xf8>
        case 0x04: Local_u32PrescalerValue = 256; break;
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	a0 e8       	ldi	r26, 0x80	; 128
    1d3a:	b3 e4       	ldi	r27, 0x43	; 67
    1d3c:	89 87       	std	Y+9, r24	; 0x09
    1d3e:	9a 87       	std	Y+10, r25	; 0x0a
    1d40:	ab 87       	std	Y+11, r26	; 0x0b
    1d42:	bc 87       	std	Y+12, r27	; 0x0c
    1d44:	11 c0       	rjmp	.+34     	; 0x1d68 <TIMER1_voidSetPWM_16bit+0xf8>
        case 0x05: Local_u32PrescalerValue = 1024; break;
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a0 e8       	ldi	r26, 0x80	; 128
    1d4c:	b4 e4       	ldi	r27, 0x44	; 68
    1d4e:	89 87       	std	Y+9, r24	; 0x09
    1d50:	9a 87       	std	Y+10, r25	; 0x0a
    1d52:	ab 87       	std	Y+11, r26	; 0x0b
    1d54:	bc 87       	std	Y+12, r27	; 0x0c
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <TIMER1_voidSetPWM_16bit+0xf8>
        default: Local_u32PrescalerValue = 8; // Default to prescaler 8
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a0 e0       	ldi	r26, 0x00	; 0
    1d5e:	b1 e4       	ldi	r27, 0x41	; 65
    1d60:	89 87       	std	Y+9, r24	; 0x09
    1d62:	9a 87       	std	Y+10, r25	; 0x0a
    1d64:	ab 87       	std	Y+11, r26	; 0x0b
    1d66:	bc 87       	std	Y+12, r27	; 0x0c
    }

    // Calculate TOP value based on desired frequency
    double icr1Double = (double)(F_CPU) / (Local_u32PrescalerValue * copy_u32Frequency) - 1;
    1d68:	69 89       	ldd	r22, Y+17	; 0x11
    1d6a:	7a 89       	ldd	r23, Y+18	; 0x12
    1d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d70:	0e 94 c9 05 	call	0xb92	; 0xb92 <__floatunsisf>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	bc 01       	movw	r22, r24
    1d7a:	cd 01       	movw	r24, r26
    1d7c:	29 85       	ldd	r18, Y+9	; 0x09
    1d7e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d80:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d82:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d84:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9c 01       	movw	r18, r24
    1d8e:	ad 01       	movw	r20, r26
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	74 e2       	ldi	r23, 0x24	; 36
    1d94:	84 e7       	ldi	r24, 0x74	; 116
    1d96:	9b e4       	ldi	r25, 0x4B	; 75
    1d98:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	40 e8       	ldi	r20, 0x80	; 128
    1daa:	5f e3       	ldi	r21, 0x3F	; 63
    1dac:	0e 94 b1 02 	call	0x562	; 0x562 <__subsf3>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	8d 83       	std	Y+5, r24	; 0x05
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	af 83       	std	Y+7, r26	; 0x07
    1dba:	b8 87       	std	Y+8, r27	; 0x08
    ICR1 = (uint32_t)icr1Double;
    1dbc:	06 e4       	ldi	r16, 0x46	; 70
    1dbe:	10 e0       	ldi	r17, 0x00	; 0
    1dc0:	6d 81       	ldd	r22, Y+5	; 0x05
    1dc2:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1dc6:	98 85       	ldd	r25, Y+8	; 0x08
    1dc8:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	80 83       	st	Z, r24

    // Calculate OCR1A value based on desired duty cycle percentage with rounding
    double dutyCycleValue = (copy_u8DutyCycle * icr1Double) / 100.0;
    1dd6:	6d 85       	ldd	r22, Y+13	; 0x0d
    1dd8:	7e 85       	ldd	r23, Y+14	; 0x0e
    1dda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ddc:	98 89       	ldd	r25, Y+16	; 0x10
    1dde:	2d 81       	ldd	r18, Y+5	; 0x05
    1de0:	3e 81       	ldd	r19, Y+6	; 0x06
    1de2:	4f 81       	ldd	r20, Y+7	; 0x07
    1de4:	58 85       	ldd	r21, Y+8	; 0x08
    1de6:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	48 ec       	ldi	r20, 0xC8	; 200
    1df8:	52 e4       	ldi	r21, 0x42	; 66
    1dfa:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	9a 83       	std	Y+2, r25	; 0x02
    1e06:	ab 83       	std	Y+3, r26	; 0x03
    1e08:	bc 83       	std	Y+4, r27	; 0x04


    switch(copy_u8Channel){
    1e0a:	8d 89       	ldd	r24, Y+21	; 0x15
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	3f 8b       	std	Y+23, r19	; 0x17
    1e12:	2e 8b       	std	Y+22, r18	; 0x16
    1e14:	8e 89       	ldd	r24, Y+22	; 0x16
    1e16:	9f 89       	ldd	r25, Y+23	; 0x17
    1e18:	82 34       	cpi	r24, 0x42	; 66
    1e1a:	91 05       	cpc	r25, r1
    1e1c:	61 f1       	breq	.+88     	; 0x1e76 <TIMER1_voidSetPWM_16bit+0x206>
    1e1e:	ee 89       	ldd	r30, Y+22	; 0x16
    1e20:	ff 89       	ldd	r31, Y+23	; 0x17
    1e22:	e3 34       	cpi	r30, 0x43	; 67
    1e24:	f1 05       	cpc	r31, r1
    1e26:	34 f4       	brge	.+12     	; 0x1e34 <TIMER1_voidSetPWM_16bit+0x1c4>
    1e28:	2e 89       	ldd	r18, Y+22	; 0x16
    1e2a:	3f 89       	ldd	r19, Y+23	; 0x17
    1e2c:	21 34       	cpi	r18, 0x41	; 65
    1e2e:	31 05       	cpc	r19, r1
    1e30:	61 f0       	breq	.+24     	; 0x1e4a <TIMER1_voidSetPWM_16bit+0x1da>
    1e32:	36 c0       	rjmp	.+108    	; 0x1ea0 <TIMER1_voidSetPWM_16bit+0x230>
    1e34:	8e 89       	ldd	r24, Y+22	; 0x16
    1e36:	9f 89       	ldd	r25, Y+23	; 0x17
    1e38:	81 36       	cpi	r24, 0x61	; 97
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	31 f0       	breq	.+12     	; 0x1e4a <TIMER1_voidSetPWM_16bit+0x1da>
    1e3e:	ee 89       	ldd	r30, Y+22	; 0x16
    1e40:	ff 89       	ldd	r31, Y+23	; 0x17
    1e42:	e2 36       	cpi	r30, 0x62	; 98
    1e44:	f1 05       	cpc	r31, r1
    1e46:	b9 f0       	breq	.+46     	; 0x1e76 <TIMER1_voidSetPWM_16bit+0x206>
    1e48:	2b c0       	rjmp	.+86     	; 0x1ea0 <TIMER1_voidSetPWM_16bit+0x230>

    	case 'A': case 'a':
    		OCR1A_REG = (uint16_t)round(dutyCycleValue);
    1e4a:	0a e4       	ldi	r16, 0x4A	; 74
    1e4c:	10 e0       	ldi	r17, 0x00	; 0
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	9a 81       	ldd	r25, Y+2	; 0x02
    1e52:	ab 81       	ldd	r26, Y+3	; 0x03
    1e54:	bc 81       	ldd	r27, Y+4	; 0x04
    1e56:	bc 01       	movw	r22, r24
    1e58:	cd 01       	movw	r24, r26
    1e5a:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <round>
    1e5e:	dc 01       	movw	r26, r24
    1e60:	cb 01       	movw	r24, r22
    1e62:	bc 01       	movw	r22, r24
    1e64:	cd 01       	movw	r24, r26
    1e66:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	f8 01       	movw	r30, r16
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
    1e74:	15 c0       	rjmp	.+42     	; 0x1ea0 <TIMER1_voidSetPWM_16bit+0x230>
    	break;

    	case 'B': case 'b':
    		OCR1B_REG = (uint16_t)round(dutyCycleValue);
    1e76:	08 e4       	ldi	r16, 0x48	; 72
    1e78:	10 e0       	ldi	r17, 0x00	; 0
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	ab 81       	ldd	r26, Y+3	; 0x03
    1e80:	bc 81       	ldd	r27, Y+4	; 0x04
    1e82:	bc 01       	movw	r22, r24
    1e84:	cd 01       	movw	r24, r26
    1e86:	0e 94 1b 2f 	call	0x5e36	; 0x5e36 <round>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	80 83       	st	Z, r24
    	break;
    }

}
    1ea0:	69 96       	adiw	r28, 0x19	; 25
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	08 95       	ret

00001eb6 <TIMER1_CalculateDutyCycleFromTon>:

double TIMER1_CalculateDutyCycleFromTon(double copy_f64HighTimeMilliseconds, uint32_t copy_u32Frequency){
    1eb6:	ef 92       	push	r14
    1eb8:	ff 92       	push	r15
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	2c 97       	sbiw	r28, 0x0c	; 12
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	69 83       	std	Y+1, r22	; 0x01
    1ed4:	7a 83       	std	Y+2, r23	; 0x02
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
    1ed8:	9c 83       	std	Y+4, r25	; 0x04
    1eda:	2d 83       	std	Y+5, r18	; 0x05
    1edc:	3e 83       	std	Y+6, r19	; 0x06
    1ede:	4f 83       	std	Y+7, r20	; 0x07
    1ee0:	58 87       	std	Y+8, r21	; 0x08


	if(copy_f64HighTimeMilliseconds != 0 && copy_u32Frequency != 0){
    1ee2:	69 81       	ldd	r22, Y+1	; 0x01
    1ee4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	0e 94 b5 04 	call	0x96a	; 0x96a <__nesf2>
    1ef6:	88 23       	and	r24, r24
    1ef8:	e9 f1       	breq	.+122    	; 0x1f74 <TIMER1_CalculateDutyCycleFromTon+0xbe>
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	af 81       	ldd	r26, Y+7	; 0x07
    1f00:	b8 85       	ldd	r27, Y+8	; 0x08
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	a1 05       	cpc	r26, r1
    1f06:	b1 05       	cpc	r27, r1
    1f08:	a9 f1       	breq	.+106    	; 0x1f74 <TIMER1_CalculateDutyCycleFromTon+0xbe>


		return ( (copy_f64HighTimeMilliseconds /1000.0) / (1.0 / copy_u32Frequency) ) * 100.0;
    1f0a:	69 81       	ldd	r22, Y+1	; 0x01
    1f0c:	7a 81       	ldd	r23, Y+2	; 0x02
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	4a e7       	ldi	r20, 0x7A	; 122
    1f18:	54 e4       	ldi	r21, 0x44	; 68
    1f1a:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	7c 01       	movw	r14, r24
    1f24:	8d 01       	movw	r16, r26
    1f26:	6d 81       	ldd	r22, Y+5	; 0x05
    1f28:	7e 81       	ldd	r23, Y+6	; 0x06
    1f2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f2c:	98 85       	ldd	r25, Y+8	; 0x08
    1f2e:	0e 94 c9 05 	call	0xb92	; 0xb92 <__floatunsisf>
    1f32:	9b 01       	movw	r18, r22
    1f34:	ac 01       	movw	r20, r24
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	80 e8       	ldi	r24, 0x80	; 128
    1f3c:	9f e3       	ldi	r25, 0x3F	; 63
    1f3e:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9c 01       	movw	r18, r24
    1f48:	ad 01       	movw	r20, r26
    1f4a:	c8 01       	movw	r24, r16
    1f4c:	b7 01       	movw	r22, r14
    1f4e:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	bc 01       	movw	r22, r24
    1f58:	cd 01       	movw	r24, r26
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	48 ec       	ldi	r20, 0xC8	; 200
    1f60:	52 e4       	ldi	r21, 0x42	; 66
    1f62:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	89 87       	std	Y+9, r24	; 0x09
    1f6c:	9a 87       	std	Y+10, r25	; 0x0a
    1f6e:	ab 87       	std	Y+11, r26	; 0x0b
    1f70:	bc 87       	std	Y+12, r27	; 0x0c
    1f72:	08 c0       	rjmp	.+16     	; 0x1f84 <TIMER1_CalculateDutyCycleFromTon+0xce>
	}

	return 0;
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a0 e0       	ldi	r26, 0x00	; 0
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	89 87       	std	Y+9, r24	; 0x09
    1f7e:	9a 87       	std	Y+10, r25	; 0x0a
    1f80:	ab 87       	std	Y+11, r26	; 0x0b
    1f82:	bc 87       	std	Y+12, r27	; 0x0c
    1f84:	89 85       	ldd	r24, Y+9	; 0x09
    1f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f88:	ab 85       	ldd	r26, Y+11	; 0x0b
    1f8a:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	2c 96       	adiw	r28, 0x0c	; 12
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	08 95       	ret

00001faa <RESET_TIMER1_COUNTER>:
	}
#endif



void RESET_TIMER1_COUNTER(){
    1faa:	df 93       	push	r29
    1fac:	cf 93       	push	r28
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG = 0;
    1fb2:	ec e4       	ldi	r30, 0x4C	; 76
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	11 82       	std	Z+1, r1	; 0x01
    1fb8:	10 82       	st	Z, r1
}
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <TIMER2_voidInit>:

/******************************************************************************************************/


/****************************************** TIMER2 FUNCTIONS ******************************************/
void TIMER2_voidInit(void){
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
			#endif

		#endif

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_FastPWM)
		SET_BIT(TCCR2_REG, TCCR2_WGM20);
    1fc8:	a5 e4       	ldi	r26, 0x45	; 69
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e5 e4       	ldi	r30, 0x45	; 69
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	80 64       	ori	r24, 0x40	; 64
    1fd4:	8c 93       	st	X, r24
		SET_BIT(TCCR2_REG, TCCR2_WGM21);
    1fd6:	a5 e4       	ldi	r26, 0x45	; 69
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e5 e4       	ldi	r30, 0x45	; 69
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	88 60       	ori	r24, 0x08	; 8
    1fe2:	8c 93       	st	X, r24

		#if(TIMER2_FastPwm_Type == TIMER_FastPwmType_Inverted)
			CLR_BIT(TCCR2_REG, TCCR2_COM20);
    1fe4:	a5 e4       	ldi	r26, 0x45	; 69
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e5 e4       	ldi	r30, 0x45	; 69
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	8f 7e       	andi	r24, 0xEF	; 239
    1ff0:	8c 93       	st	X, r24
			SET_BIT(TCCR2_REG, TCCR2_COM21);
    1ff2:	a5 e4       	ldi	r26, 0x45	; 69
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	e5 e4       	ldi	r30, 0x45	; 69
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 62       	ori	r24, 0x20	; 32
    1ffe:	8c 93       	st	X, r24
		#elif(TIMER2_FastPwm_Type == TIMER_FastPwmType_NonInverted)
			SET_BIT(TCCR2_REG, TCCR2_COM20);
			SET_BIT(TCCR2_REG, TCCR2_COM21);
		#endif
		DIO_enuSetPinDirection(TIMER_OC2_PORT, TIMER_OC2_PIN, DIO_u8OUTPUT);
    2000:	83 e0       	ldi	r24, 0x03	; 3
    2002:	67 e0       	ldi	r22, 0x07	; 7
    2004:	41 e0       	ldi	r20, 0x01	; 1
    2006:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
		SET_BIT(TCCR2_REG, TCCR2_CS20);
		SET_BIT(TCCR2_REG, TCCR2_CS21);
		CLR_BIT(TCCR2_REG, TCCR2_CS22);

	#elif(TIMER2_CLK_PRE_SELECT == TIMER_PRES_64)
		CLR_BIT(TCCR2_REG, TCCR2_CS20);
    200a:	a5 e4       	ldi	r26, 0x45	; 69
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e5 e4       	ldi	r30, 0x45	; 69
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	8e 7f       	andi	r24, 0xFE	; 254
    2016:	8c 93       	st	X, r24
		CLR_BIT(TCCR2_REG, TCCR2_CS21);
    2018:	a5 e4       	ldi	r26, 0x45	; 69
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e5 e4       	ldi	r30, 0x45	; 69
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	8d 7f       	andi	r24, 0xFD	; 253
    2024:	8c 93       	st	X, r24
		SET_BIT(TCCR2_REG, TCCR2_CS22);
    2026:	a5 e4       	ldi	r26, 0x45	; 69
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e5 e4       	ldi	r30, 0x45	; 69
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	84 60       	ori	r24, 0x04	; 4
    2032:	8c 93       	st	X, r24
	#endif
	/******************************************************************************/


	// Turn Global Interrupt ON
	GIE_enuEnable();
    2034:	0e 94 8d 14 	call	0x291a	; 0x291a <GIE_enuEnable>


}
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <TIMER2_voidStart>:

void TIMER2_voidStart(void){
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		SET_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <TIMER2_voidStop>:

void TIMER2_voidStop(void){
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62

	#elif(TIMER2_MODE_SELECT == TIMER_MODE_CTC)
		CLR_BIT(TIMSK_REG, TIMSK_OCIE2);

	#endif
}
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <TIMER2_voidScheduleTask>:

uint8_t TIMER2_voidScheduleTask( void (*TaskCallback)(void), float64 copy_f64RequiredTime_inSeconds){
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	60 97       	sbiw	r28, 0x10	; 16
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	9a 87       	std	Y+10, r25	; 0x0a
    2078:	89 87       	std	Y+9, r24	; 0x09
    207a:	4b 87       	std	Y+11, r20	; 0x0b
    207c:	5c 87       	std	Y+12, r21	; 0x0c
    207e:	6d 87       	std	Y+13, r22	; 0x0d
    2080:	7e 87       	std	Y+14, r23	; 0x0e

	uint32_t Local_u32PrescalerValue = 0;
    2082:	1d 82       	std	Y+5, r1	; 0x05
    2084:	1e 82       	std	Y+6, r1	; 0x06
    2086:	1f 82       	std	Y+7, r1	; 0x07
    2088:	18 86       	std	Y+8, r1	; 0x08

	switch(TCCR2 & 0x07){
    208a:	e5 e4       	ldi	r30, 0x45	; 69
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	9c 01       	movw	r18, r24
    2096:	27 70       	andi	r18, 0x07	; 7
    2098:	30 70       	andi	r19, 0x00	; 0
    209a:	38 8b       	std	Y+16, r19	; 0x10
    209c:	2f 87       	std	Y+15, r18	; 0x0f
    209e:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a0:	98 89       	ldd	r25, Y+16	; 0x10
    20a2:	83 30       	cpi	r24, 0x03	; 3
    20a4:	91 05       	cpc	r25, r1
    20a6:	69 f1       	breq	.+90     	; 0x2102 <TIMER2_voidScheduleTask+0xa8>
    20a8:	2f 85       	ldd	r18, Y+15	; 0x0f
    20aa:	38 89       	ldd	r19, Y+16	; 0x10
    20ac:	24 30       	cpi	r18, 0x04	; 4
    20ae:	31 05       	cpc	r19, r1
    20b0:	5c f4       	brge	.+22     	; 0x20c8 <TIMER2_voidScheduleTask+0x6e>
    20b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b4:	98 89       	ldd	r25, Y+16	; 0x10
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	91 05       	cpc	r25, r1
    20ba:	89 f0       	breq	.+34     	; 0x20de <TIMER2_voidScheduleTask+0x84>
    20bc:	2f 85       	ldd	r18, Y+15	; 0x0f
    20be:	38 89       	ldd	r19, Y+16	; 0x10
    20c0:	22 30       	cpi	r18, 0x02	; 2
    20c2:	31 05       	cpc	r19, r1
    20c4:	a9 f0       	breq	.+42     	; 0x20f0 <TIMER2_voidScheduleTask+0x96>
    20c6:	37 c0       	rjmp	.+110    	; 0x2136 <TIMER2_voidScheduleTask+0xdc>
    20c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    20ca:	98 89       	ldd	r25, Y+16	; 0x10
    20cc:	84 30       	cpi	r24, 0x04	; 4
    20ce:	91 05       	cpc	r25, r1
    20d0:	09 f1       	breq	.+66     	; 0x2114 <TIMER2_voidScheduleTask+0xba>
    20d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    20d4:	38 89       	ldd	r19, Y+16	; 0x10
    20d6:	25 30       	cpi	r18, 0x05	; 5
    20d8:	31 05       	cpc	r19, r1
    20da:	29 f1       	breq	.+74     	; 0x2126 <TIMER2_voidScheduleTask+0xcc>
    20dc:	2c c0       	rjmp	.+88     	; 0x2136 <TIMER2_voidScheduleTask+0xdc>
		case 0x01: Local_u32PrescalerValue = 1; break;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a0 e0       	ldi	r26, 0x00	; 0
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	8d 83       	std	Y+5, r24	; 0x05
    20e8:	9e 83       	std	Y+6, r25	; 0x06
    20ea:	af 83       	std	Y+7, r26	; 0x07
    20ec:	b8 87       	std	Y+8, r27	; 0x08
    20ee:	23 c0       	rjmp	.+70     	; 0x2136 <TIMER2_voidScheduleTask+0xdc>
		case 0x02: Local_u32PrescalerValue = 8; break;
    20f0:	88 e0       	ldi	r24, 0x08	; 8
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	a0 e0       	ldi	r26, 0x00	; 0
    20f6:	b0 e0       	ldi	r27, 0x00	; 0
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	af 83       	std	Y+7, r26	; 0x07
    20fe:	b8 87       	std	Y+8, r27	; 0x08
    2100:	1a c0       	rjmp	.+52     	; 0x2136 <TIMER2_voidScheduleTask+0xdc>
		case 0x03: Local_u32PrescalerValue = 64; break;
    2102:	80 e4       	ldi	r24, 0x40	; 64
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e0       	ldi	r26, 0x00	; 0
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	9e 83       	std	Y+6, r25	; 0x06
    210e:	af 83       	std	Y+7, r26	; 0x07
    2110:	b8 87       	std	Y+8, r27	; 0x08
    2112:	11 c0       	rjmp	.+34     	; 0x2136 <TIMER2_voidScheduleTask+0xdc>
		case 0x04: Local_u32PrescalerValue = 256; break;
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	91 e0       	ldi	r25, 0x01	; 1
    2118:	a0 e0       	ldi	r26, 0x00	; 0
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	8d 83       	std	Y+5, r24	; 0x05
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	af 83       	std	Y+7, r26	; 0x07
    2122:	b8 87       	std	Y+8, r27	; 0x08
    2124:	08 c0       	rjmp	.+16     	; 0x2136 <TIMER2_voidScheduleTask+0xdc>
		case 0x05: Local_u32PrescalerValue = 1024; break;
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	94 e0       	ldi	r25, 0x04	; 4
    212a:	a0 e0       	ldi	r26, 0x00	; 0
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	8d 83       	std	Y+5, r24	; 0x05
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	af 83       	std	Y+7, r26	; 0x07
    2134:	b8 87       	std	Y+8, r27	; 0x08
	}

	float64 Local_f64Totalticks = (copy_f64RequiredTime_inSeconds * F_CPU)/Local_u32PrescalerValue;
    2136:	6b 85       	ldd	r22, Y+11	; 0x0b
    2138:	7c 85       	ldd	r23, Y+12	; 0x0c
    213a:	8d 85       	ldd	r24, Y+13	; 0x0d
    213c:	9e 85       	ldd	r25, Y+14	; 0x0e
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	34 e2       	ldi	r19, 0x24	; 36
    2142:	44 e7       	ldi	r20, 0x74	; 116
    2144:	5b e4       	ldi	r21, 0x4B	; 75
    2146:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	7c 01       	movw	r14, r24
    2150:	8d 01       	movw	r16, r26
    2152:	6d 81       	ldd	r22, Y+5	; 0x05
    2154:	7e 81       	ldd	r23, Y+6	; 0x06
    2156:	8f 81       	ldd	r24, Y+7	; 0x07
    2158:	98 85       	ldd	r25, Y+8	; 0x08
    215a:	0e 94 c9 05 	call	0xb92	; 0xb92 <__floatunsisf>
    215e:	9b 01       	movw	r18, r22
    2160:	ac 01       	movw	r20, r24
    2162:	c8 01       	movw	r24, r16
    2164:	b7 01       	movw	r22, r14
    2166:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	ab 83       	std	Y+3, r26	; 0x03
    2174:	bc 83       	std	Y+4, r27	; 0x04
		}

	#endif


		TIMERS_ISR_Functions[2] = TaskCallback;
    2176:	89 85       	ldd	r24, Y+9	; 0x09
    2178:	9a 85       	ldd	r25, Y+10	; 0x0a
    217a:	90 93 95 01 	sts	0x0195, r25
    217e:	80 93 94 01 	sts	0x0194, r24
		TIMER2_voidStart();
    2182:	0e 94 1f 10 	call	0x203e	; 0x203e <TIMER2_voidStart>
	return 0;
    2186:	80 e0       	ldi	r24, 0x00	; 0

}
    2188:	60 96       	adiw	r28, 0x10	; 16
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	08 95       	ret

000021a2 <TIMER2_voidSetPWM>:


void  TIMER2_voidSetPWM(uint8_t copy_u8DutyCycle){
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	0f 92       	push	r0
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	89 83       	std	Y+1, r24	; 0x01
	 *
	 * Avr32 does has floating point operation
	 * **/


	OCR2_REG = (uint8_t)(((uint16_t)copy_u8DutyCycle * 256) / 100);
    21ae:	e3 e4       	ldi	r30, 0x43	; 67
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	98 2f       	mov	r25, r24
    21ba:	88 27       	eor	r24, r24
    21bc:	24 e6       	ldi	r18, 0x64	; 100
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	b9 01       	movw	r22, r18
    21c2:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <__udivmodhi4>
    21c6:	cb 01       	movw	r24, r22
    21c8:	80 83       	st	Z, r24
}
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <TIMER_voidWDTSleep>:
/*******************************************************************************************************/



/****************************************** WATCH DOG TIMER INTERFACE ******************************************/
void TIMER_voidWDTSleep(uint8_t copy_u8WdtPeriod){
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	0f 92       	push	r0
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	89 83       	std	Y+1, r24	; 0x01
    // Reset watchdog timer using macro
    WDT_voidRestart();
    21de:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    21e0:	a1 e4       	ldi	r26, 0x41	; 65
    21e2:	b0 e0       	ldi	r27, 0x00	; 0
    21e4:	e1 e4       	ldi	r30, 0x41	; 65
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	88 61       	ori	r24, 0x18	; 24
    21ec:	8c 93       	st	X, r24

    // Set watchdog timer prescaler and enable watchdog timer
    WDTCSR_REG = (1 << WDTCSR_WDE) | copy_u8WdtPeriod;
    21ee:	e1 e4       	ldi	r30, 0x41	; 65
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	88 60       	ori	r24, 0x08	; 8
    21f6:	80 83       	st	Z, r24

}
    21f8:	0f 90       	pop	r0
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <TIMER_voidWDTEnable>:

void TIMER_voidWDTEnable (void){
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    // Reset watchdog timer using macro
    WDT_voidRestart();
    2208:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    220a:	a1 e4       	ldi	r26, 0x41	; 65
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e1 e4       	ldi	r30, 0x41	; 65
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	88 61       	ori	r24, 0x18	; 24
    2216:	8c 93       	st	X, r24

    // Enable watchdog timer with the previously set period
    SET_BIT(WDTCSR_REG, WDTCSR_WDE);
    2218:	a1 e4       	ldi	r26, 0x41	; 65
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	e1 e4       	ldi	r30, 0x41	; 65
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	88 60       	ori	r24, 0x08	; 8
    2224:	8c 93       	st	X, r24

}
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <TIMER_voidWDTDisable>:


void TIMER_voidWDTDisable(void) {
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    // Reset watchdog timer using macro
    WDT_voidRestart();
    2234:	a8 95       	wdr

    // Start timed sequence
    WDTCSR_REG |= (1 << WDTCSR_WDCE) | (1 << WDTCSR_WDE);
    2236:	a1 e4       	ldi	r26, 0x41	; 65
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e1 e4       	ldi	r30, 0x41	; 65
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	88 61       	ori	r24, 0x18	; 24
    2242:	8c 93       	st	X, r24

    // Disable watchdog timer
    WDTCSR_REG = 0x00;
    2244:	e1 e4       	ldi	r30, 0x41	; 65
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	10 82       	st	Z, r1
}
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <__vector_11>:





ISR(TIMER0_OVF_vect){
    2250:	1f 92       	push	r1
    2252:	0f 92       	push	r0
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	0f 92       	push	r0
    2258:	11 24       	eor	r1, r1
    225a:	2f 93       	push	r18
    225c:	3f 93       	push	r19
    225e:	4f 93       	push	r20
    2260:	5f 93       	push	r21
    2262:	6f 93       	push	r22
    2264:	7f 93       	push	r23
    2266:	8f 93       	push	r24
    2268:	9f 93       	push	r25
    226a:	af 93       	push	r26
    226c:	bf 93       	push	r27
    226e:	ef 93       	push	r30
    2270:	ff 93       	push	r31
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    227a:	80 91 84 01 	lds	r24, 0x0184
    227e:	90 91 85 01 	lds	r25, 0x0185
    2282:	a0 91 86 01 	lds	r26, 0x0186
    2286:	b0 91 87 01 	lds	r27, 0x0187
    228a:	01 96       	adiw	r24, 0x01	; 1
    228c:	a1 1d       	adc	r26, r1
    228e:	b1 1d       	adc	r27, r1
    2290:	80 93 84 01 	sts	0x0184, r24
    2294:	90 93 85 01 	sts	0x0185, r25
    2298:	a0 93 86 01 	sts	0x0186, r26
    229c:	b0 93 87 01 	sts	0x0187, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    22a0:	20 91 84 01 	lds	r18, 0x0184
    22a4:	30 91 85 01 	lds	r19, 0x0185
    22a8:	40 91 86 01 	lds	r20, 0x0186
    22ac:	50 91 87 01 	lds	r21, 0x0187
    22b0:	80 91 96 01 	lds	r24, 0x0196
    22b4:	90 91 97 01 	lds	r25, 0x0197
    22b8:	a0 91 98 01 	lds	r26, 0x0198
    22bc:	b0 91 99 01 	lds	r27, 0x0199
    22c0:	28 17       	cp	r18, r24
    22c2:	39 07       	cpc	r19, r25
    22c4:	4a 07       	cpc	r20, r26
    22c6:	5b 07       	cpc	r21, r27
    22c8:	68 f0       	brcs	.+26     	; 0x22e4 <__vector_11+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    22ca:	10 92 84 01 	sts	0x0184, r1
    22ce:	10 92 85 01 	sts	0x0185, r1
    22d2:	10 92 86 01 	sts	0x0186, r1
    22d6:	10 92 87 01 	sts	0x0187, r1
		TIMERS_ISR_Functions[0]();
    22da:	e0 91 90 01 	lds	r30, 0x0190
    22de:	f0 91 91 01 	lds	r31, 0x0191
    22e2:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	ff 91       	pop	r31
    22ea:	ef 91       	pop	r30
    22ec:	bf 91       	pop	r27
    22ee:	af 91       	pop	r26
    22f0:	9f 91       	pop	r25
    22f2:	8f 91       	pop	r24
    22f4:	7f 91       	pop	r23
    22f6:	6f 91       	pop	r22
    22f8:	5f 91       	pop	r21
    22fa:	4f 91       	pop	r20
    22fc:	3f 91       	pop	r19
    22fe:	2f 91       	pop	r18
    2300:	0f 90       	pop	r0
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	0f 90       	pop	r0
    2306:	1f 90       	pop	r1
    2308:	18 95       	reti

0000230a <__vector_10>:

ISR(TIMER0_COMP_vect){
    230a:	1f 92       	push	r1
    230c:	0f 92       	push	r0
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	0f 92       	push	r0
    2312:	11 24       	eor	r1, r1
    2314:	2f 93       	push	r18
    2316:	3f 93       	push	r19
    2318:	4f 93       	push	r20
    231a:	5f 93       	push	r21
    231c:	6f 93       	push	r22
    231e:	7f 93       	push	r23
    2320:	8f 93       	push	r24
    2322:	9f 93       	push	r25
    2324:	af 93       	push	r26
    2326:	bf 93       	push	r27
    2328:	ef 93       	push	r30
    232a:	ff 93       	push	r31
    232c:	df 93       	push	r29
    232e:	cf 93       	push	r28
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62

	TIMER0_CURRENT_NTICKS++;
    2334:	80 91 84 01 	lds	r24, 0x0184
    2338:	90 91 85 01 	lds	r25, 0x0185
    233c:	a0 91 86 01 	lds	r26, 0x0186
    2340:	b0 91 87 01 	lds	r27, 0x0187
    2344:	01 96       	adiw	r24, 0x01	; 1
    2346:	a1 1d       	adc	r26, r1
    2348:	b1 1d       	adc	r27, r1
    234a:	80 93 84 01 	sts	0x0184, r24
    234e:	90 93 85 01 	sts	0x0185, r25
    2352:	a0 93 86 01 	sts	0x0186, r26
    2356:	b0 93 87 01 	sts	0x0187, r27

	if(TIMER0_CURRENT_NTICKS >= TIMER0_TARGET_NTICKS){
    235a:	20 91 84 01 	lds	r18, 0x0184
    235e:	30 91 85 01 	lds	r19, 0x0185
    2362:	40 91 86 01 	lds	r20, 0x0186
    2366:	50 91 87 01 	lds	r21, 0x0187
    236a:	80 91 96 01 	lds	r24, 0x0196
    236e:	90 91 97 01 	lds	r25, 0x0197
    2372:	a0 91 98 01 	lds	r26, 0x0198
    2376:	b0 91 99 01 	lds	r27, 0x0199
    237a:	28 17       	cp	r18, r24
    237c:	39 07       	cpc	r19, r25
    237e:	4a 07       	cpc	r20, r26
    2380:	5b 07       	cpc	r21, r27
    2382:	68 f0       	brcs	.+26     	; 0x239e <__vector_10+0x94>
		TIMER0_CURRENT_NTICKS = 0;
    2384:	10 92 84 01 	sts	0x0184, r1
    2388:	10 92 85 01 	sts	0x0185, r1
    238c:	10 92 86 01 	sts	0x0186, r1
    2390:	10 92 87 01 	sts	0x0187, r1
		TIMERS_ISR_Functions[0]();
    2394:	e0 91 90 01 	lds	r30, 0x0190
    2398:	f0 91 91 01 	lds	r31, 0x0191
    239c:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	ff 91       	pop	r31
    23a4:	ef 91       	pop	r30
    23a6:	bf 91       	pop	r27
    23a8:	af 91       	pop	r26
    23aa:	9f 91       	pop	r25
    23ac:	8f 91       	pop	r24
    23ae:	7f 91       	pop	r23
    23b0:	6f 91       	pop	r22
    23b2:	5f 91       	pop	r21
    23b4:	4f 91       	pop	r20
    23b6:	3f 91       	pop	r19
    23b8:	2f 91       	pop	r18
    23ba:	0f 90       	pop	r0
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	0f 90       	pop	r0
    23c0:	1f 90       	pop	r1
    23c2:	18 95       	reti

000023c4 <__vector_9>:

ISR(TIMER1_OVF_vect){
    23c4:	1f 92       	push	r1
    23c6:	0f 92       	push	r0
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	0f 92       	push	r0
    23cc:	11 24       	eor	r1, r1
    23ce:	2f 93       	push	r18
    23d0:	3f 93       	push	r19
    23d2:	4f 93       	push	r20
    23d4:	5f 93       	push	r21
    23d6:	6f 93       	push	r22
    23d8:	7f 93       	push	r23
    23da:	8f 93       	push	r24
    23dc:	9f 93       	push	r25
    23de:	af 93       	push	r26
    23e0:	bf 93       	push	r27
    23e2:	ef 93       	push	r30
    23e4:	ff 93       	push	r31
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62

	TIMER1_CURRENT_NTICKS++;
    23ee:	80 91 88 01 	lds	r24, 0x0188
    23f2:	90 91 89 01 	lds	r25, 0x0189
    23f6:	a0 91 8a 01 	lds	r26, 0x018A
    23fa:	b0 91 8b 01 	lds	r27, 0x018B
    23fe:	01 96       	adiw	r24, 0x01	; 1
    2400:	a1 1d       	adc	r26, r1
    2402:	b1 1d       	adc	r27, r1
    2404:	80 93 88 01 	sts	0x0188, r24
    2408:	90 93 89 01 	sts	0x0189, r25
    240c:	a0 93 8a 01 	sts	0x018A, r26
    2410:	b0 93 8b 01 	sts	0x018B, r27

	if(TIMER1_CURRENT_NTICKS >= TIMER1_TARGET_NTICKS){
    2414:	20 91 88 01 	lds	r18, 0x0188
    2418:	30 91 89 01 	lds	r19, 0x0189
    241c:	40 91 8a 01 	lds	r20, 0x018A
    2420:	50 91 8b 01 	lds	r21, 0x018B
    2424:	80 91 9a 01 	lds	r24, 0x019A
    2428:	90 91 9b 01 	lds	r25, 0x019B
    242c:	a0 91 9c 01 	lds	r26, 0x019C
    2430:	b0 91 9d 01 	lds	r27, 0x019D
    2434:	28 17       	cp	r18, r24
    2436:	39 07       	cpc	r19, r25
    2438:	4a 07       	cpc	r20, r26
    243a:	5b 07       	cpc	r21, r27
    243c:	68 f0       	brcs	.+26     	; 0x2458 <__vector_9+0x94>
		TIMER1_CURRENT_NTICKS = 0;
    243e:	10 92 88 01 	sts	0x0188, r1
    2442:	10 92 89 01 	sts	0x0189, r1
    2446:	10 92 8a 01 	sts	0x018A, r1
    244a:	10 92 8b 01 	sts	0x018B, r1
		TIMERS_ISR_Functions[1]();
    244e:	e0 91 92 01 	lds	r30, 0x0192
    2452:	f0 91 93 01 	lds	r31, 0x0193
    2456:	09 95       	icall
	}


	//here we can specify whether we want to stop timer0 or keep repeat or anything
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	ff 91       	pop	r31
    245e:	ef 91       	pop	r30
    2460:	bf 91       	pop	r27
    2462:	af 91       	pop	r26
    2464:	9f 91       	pop	r25
    2466:	8f 91       	pop	r24
    2468:	7f 91       	pop	r23
    246a:	6f 91       	pop	r22
    246c:	5f 91       	pop	r21
    246e:	4f 91       	pop	r20
    2470:	3f 91       	pop	r19
    2472:	2f 91       	pop	r18
    2474:	0f 90       	pop	r0
    2476:	0f be       	out	0x3f, r0	; 63
    2478:	0f 90       	pop	r0
    247a:	1f 90       	pop	r1
    247c:	18 95       	reti

0000247e <__vector_7>:

ISR(TIMER1_COMPA_vect){
    247e:	1f 92       	push	r1
    2480:	0f 92       	push	r0
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	0f 92       	push	r0
    2486:	11 24       	eor	r1, r1
    2488:	2f 93       	push	r18
    248a:	3f 93       	push	r19
    248c:	4f 93       	push	r20
    248e:	5f 93       	push	r21
    2490:	6f 93       	push	r22
    2492:	7f 93       	push	r23
    2494:	8f 93       	push	r24
    2496:	9f 93       	push	r25
    2498:	af 93       	push	r26
    249a:	bf 93       	push	r27
    249c:	ef 93       	push	r30
    249e:	ff 93       	push	r31
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	cd b7       	in	r28, 0x3d	; 61
    24a6:	de b7       	in	r29, 0x3e	; 62


	#if(TIMER1_MODE_SELECT == TIMER1_MODE_ANY_PIN_PWM)
		DIO_enuTogglePinValue(global_u8PortID, global_u8PinID);
	#else
		TIMER1_CURRENT_NTICKS++;
    24a8:	80 91 88 01 	lds	r24, 0x0188
    24ac:	90 91 89 01 	lds	r25, 0x0189
    24b0:	a0 91 8a 01 	lds	r26, 0x018A
    24b4:	b0 91 8b 01 	lds	r27, 0x018B
    24b8:	01 96       	adiw	r24, 0x01	; 1
    24ba:	a1 1d       	adc	r26, r1
    24bc:	b1 1d       	adc	r27, r1
    24be:	80 93 88 01 	sts	0x0188, r24
    24c2:	90 93 89 01 	sts	0x0189, r25
    24c6:	a0 93 8a 01 	sts	0x018A, r26
    24ca:	b0 93 8b 01 	sts	0x018B, r27

		if(TIMER1_CURRENT_NTICKS >= TIMER1_TARGET_NTICKS){
    24ce:	20 91 88 01 	lds	r18, 0x0188
    24d2:	30 91 89 01 	lds	r19, 0x0189
    24d6:	40 91 8a 01 	lds	r20, 0x018A
    24da:	50 91 8b 01 	lds	r21, 0x018B
    24de:	80 91 9a 01 	lds	r24, 0x019A
    24e2:	90 91 9b 01 	lds	r25, 0x019B
    24e6:	a0 91 9c 01 	lds	r26, 0x019C
    24ea:	b0 91 9d 01 	lds	r27, 0x019D
    24ee:	28 17       	cp	r18, r24
    24f0:	39 07       	cpc	r19, r25
    24f2:	4a 07       	cpc	r20, r26
    24f4:	5b 07       	cpc	r21, r27
    24f6:	68 f0       	brcs	.+26     	; 0x2512 <__vector_7+0x94>
			TIMER1_CURRENT_NTICKS = 0;
    24f8:	10 92 88 01 	sts	0x0188, r1
    24fc:	10 92 89 01 	sts	0x0189, r1
    2500:	10 92 8a 01 	sts	0x018A, r1
    2504:	10 92 8b 01 	sts	0x018B, r1
			TIMERS_ISR_Functions[1]();
    2508:	e0 91 92 01 	lds	r30, 0x0192
    250c:	f0 91 93 01 	lds	r31, 0x0193
    2510:	09 95       	icall
		}
	#endif


}
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	ff 91       	pop	r31
    2518:	ef 91       	pop	r30
    251a:	bf 91       	pop	r27
    251c:	af 91       	pop	r26
    251e:	9f 91       	pop	r25
    2520:	8f 91       	pop	r24
    2522:	7f 91       	pop	r23
    2524:	6f 91       	pop	r22
    2526:	5f 91       	pop	r21
    2528:	4f 91       	pop	r20
    252a:	3f 91       	pop	r19
    252c:	2f 91       	pop	r18
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	0f 90       	pop	r0
    2534:	1f 90       	pop	r1
    2536:	18 95       	reti

00002538 <__vector_5>:


ISR(TIMER2_OVF_vect){
    2538:	1f 92       	push	r1
    253a:	0f 92       	push	r0
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	0f 92       	push	r0
    2540:	11 24       	eor	r1, r1
    2542:	2f 93       	push	r18
    2544:	3f 93       	push	r19
    2546:	4f 93       	push	r20
    2548:	5f 93       	push	r21
    254a:	6f 93       	push	r22
    254c:	7f 93       	push	r23
    254e:	8f 93       	push	r24
    2550:	9f 93       	push	r25
    2552:	af 93       	push	r26
    2554:	bf 93       	push	r27
    2556:	ef 93       	push	r30
    2558:	ff 93       	push	r31
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    2562:	80 91 8c 01 	lds	r24, 0x018C
    2566:	90 91 8d 01 	lds	r25, 0x018D
    256a:	a0 91 8e 01 	lds	r26, 0x018E
    256e:	b0 91 8f 01 	lds	r27, 0x018F
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	a1 1d       	adc	r26, r1
    2576:	b1 1d       	adc	r27, r1
    2578:	80 93 8c 01 	sts	0x018C, r24
    257c:	90 93 8d 01 	sts	0x018D, r25
    2580:	a0 93 8e 01 	sts	0x018E, r26
    2584:	b0 93 8f 01 	sts	0x018F, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    2588:	20 91 8c 01 	lds	r18, 0x018C
    258c:	30 91 8d 01 	lds	r19, 0x018D
    2590:	40 91 8e 01 	lds	r20, 0x018E
    2594:	50 91 8f 01 	lds	r21, 0x018F
    2598:	80 91 9e 01 	lds	r24, 0x019E
    259c:	90 91 9f 01 	lds	r25, 0x019F
    25a0:	a0 91 a0 01 	lds	r26, 0x01A0
    25a4:	b0 91 a1 01 	lds	r27, 0x01A1
    25a8:	28 17       	cp	r18, r24
    25aa:	39 07       	cpc	r19, r25
    25ac:	4a 07       	cpc	r20, r26
    25ae:	5b 07       	cpc	r21, r27
    25b0:	68 f0       	brcs	.+26     	; 0x25cc <__vector_5+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    25b2:	10 92 8c 01 	sts	0x018C, r1
    25b6:	10 92 8d 01 	sts	0x018D, r1
    25ba:	10 92 8e 01 	sts	0x018E, r1
    25be:	10 92 8f 01 	sts	0x018F, r1
		TIMERS_ISR_Functions[2]();
    25c2:	e0 91 94 01 	lds	r30, 0x0194
    25c6:	f0 91 95 01 	lds	r31, 0x0195
    25ca:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	ff 91       	pop	r31
    25d2:	ef 91       	pop	r30
    25d4:	bf 91       	pop	r27
    25d6:	af 91       	pop	r26
    25d8:	9f 91       	pop	r25
    25da:	8f 91       	pop	r24
    25dc:	7f 91       	pop	r23
    25de:	6f 91       	pop	r22
    25e0:	5f 91       	pop	r21
    25e2:	4f 91       	pop	r20
    25e4:	3f 91       	pop	r19
    25e6:	2f 91       	pop	r18
    25e8:	0f 90       	pop	r0
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	0f 90       	pop	r0
    25ee:	1f 90       	pop	r1
    25f0:	18 95       	reti

000025f2 <__vector_4>:

ISR(TIMER2_COMP_vect){
    25f2:	1f 92       	push	r1
    25f4:	0f 92       	push	r0
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	0f 92       	push	r0
    25fa:	11 24       	eor	r1, r1
    25fc:	2f 93       	push	r18
    25fe:	3f 93       	push	r19
    2600:	4f 93       	push	r20
    2602:	5f 93       	push	r21
    2604:	6f 93       	push	r22
    2606:	7f 93       	push	r23
    2608:	8f 93       	push	r24
    260a:	9f 93       	push	r25
    260c:	af 93       	push	r26
    260e:	bf 93       	push	r27
    2610:	ef 93       	push	r30
    2612:	ff 93       	push	r31
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62

	TIMER2_CURRENT_NTICKS++;
    261c:	80 91 8c 01 	lds	r24, 0x018C
    2620:	90 91 8d 01 	lds	r25, 0x018D
    2624:	a0 91 8e 01 	lds	r26, 0x018E
    2628:	b0 91 8f 01 	lds	r27, 0x018F
    262c:	01 96       	adiw	r24, 0x01	; 1
    262e:	a1 1d       	adc	r26, r1
    2630:	b1 1d       	adc	r27, r1
    2632:	80 93 8c 01 	sts	0x018C, r24
    2636:	90 93 8d 01 	sts	0x018D, r25
    263a:	a0 93 8e 01 	sts	0x018E, r26
    263e:	b0 93 8f 01 	sts	0x018F, r27

	if(TIMER2_CURRENT_NTICKS >= TIMER2_TARGET_NTICKS){
    2642:	20 91 8c 01 	lds	r18, 0x018C
    2646:	30 91 8d 01 	lds	r19, 0x018D
    264a:	40 91 8e 01 	lds	r20, 0x018E
    264e:	50 91 8f 01 	lds	r21, 0x018F
    2652:	80 91 9e 01 	lds	r24, 0x019E
    2656:	90 91 9f 01 	lds	r25, 0x019F
    265a:	a0 91 a0 01 	lds	r26, 0x01A0
    265e:	b0 91 a1 01 	lds	r27, 0x01A1
    2662:	28 17       	cp	r18, r24
    2664:	39 07       	cpc	r19, r25
    2666:	4a 07       	cpc	r20, r26
    2668:	5b 07       	cpc	r21, r27
    266a:	68 f0       	brcs	.+26     	; 0x2686 <__vector_4+0x94>
		TIMER2_CURRENT_NTICKS = 0;
    266c:	10 92 8c 01 	sts	0x018C, r1
    2670:	10 92 8d 01 	sts	0x018D, r1
    2674:	10 92 8e 01 	sts	0x018E, r1
    2678:	10 92 8f 01 	sts	0x018F, r1
		TIMERS_ISR_Functions[2]();
    267c:	e0 91 94 01 	lds	r30, 0x0194
    2680:	f0 91 95 01 	lds	r31, 0x0195
    2684:	09 95       	icall
	}


	//here we can specify whether we want to stop timer 2 or keep repeat or anything

}
    2686:	cf 91       	pop	r28
    2688:	df 91       	pop	r29
    268a:	ff 91       	pop	r31
    268c:	ef 91       	pop	r30
    268e:	bf 91       	pop	r27
    2690:	af 91       	pop	r26
    2692:	9f 91       	pop	r25
    2694:	8f 91       	pop	r24
    2696:	7f 91       	pop	r23
    2698:	6f 91       	pop	r22
    269a:	5f 91       	pop	r21
    269c:	4f 91       	pop	r20
    269e:	3f 91       	pop	r19
    26a0:	2f 91       	pop	r18
    26a2:	0f 90       	pop	r0
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	0f 90       	pop	r0
    26a8:	1f 90       	pop	r1
    26aa:	18 95       	reti

000026ac <SPI_vidInit>:
#include "SPI_priv.h"
/************************************************************************************/



void SPI_vidInit(void){
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62

		SET_BIT(SPCR_REG, SPCR_MSTR);

	#elif(SPI_MODE == SPI_SLAVE_MODE)

		DIO_enuSetPinDirection(SPI_MISO_PORT, SPI_MISO_PIN, DIO_u8OUTPUT);
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	66 e0       	ldi	r22, 0x06	; 6
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_MOSI_PORT, SPI_MOSI_PIN, DIO_u8INPUT);
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	65 e0       	ldi	r22, 0x05	; 5
    26c2:	40 e0       	ldi	r20, 0x00	; 0
    26c4:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>

		DIO_enuSetPinDirection(SPI_SCK_PORT, SPI_SCK_PIN, DIO_u8INPUT);
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	67 e0       	ldi	r22, 0x07	; 7
    26cc:	40 e0       	ldi	r20, 0x00	; 0
    26ce:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(SPI_SS_PORT, SPI_SS_PIN, DIO_u8INPUT);
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	64 e0       	ldi	r22, 0x04	; 4
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>

		CLR_BIT(SPCR_REG, SPCR_MSTR);
    26dc:	ad e2       	ldi	r26, 0x2D	; 45
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	ed e2       	ldi	r30, 0x2D	; 45
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	8f 7e       	andi	r24, 0xEF	; 239
    26e8:	8c 93       	st	X, r24
	#endif


	//! Data order
	#if(SPI_DORD == SPI_DORD_MSB)
		SET_BIT(SPCR_REG, SPCR_DORD);
    26ea:	ad e2       	ldi	r26, 0x2D	; 45
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	ed e2       	ldi	r30, 0x2D	; 45
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	80 62       	ori	r24, 0x20	; 32
    26f6:	8c 93       	st	X, r24


	//! Clock Polarity
	#if(SPI_CPOL == SPI_LRising_TFalling)
		// SCK is high when idle
		CLR_BIT(SPCR_REG, SPCR_CPOL);
    26f8:	ad e2       	ldi	r26, 0x2D	; 45
    26fa:	b0 e0       	ldi	r27, 0x00	; 0
    26fc:	ed e2       	ldi	r30, 0x2D	; 45
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	80 81       	ld	r24, Z
    2702:	87 7f       	andi	r24, 0xF7	; 247
    2704:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR0 );
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
		CLR_BIT(SPSR_REG, SPSR_SPI2x);

	#elif(SPI_PRES_SELECT == SPI_PRES_16)
		SET_BIT(SPCR_REG, SPCR_SPR0 );
    2706:	ad e2       	ldi	r26, 0x2D	; 45
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	ed e2       	ldi	r30, 0x2D	; 45
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	81 60       	ori	r24, 0x01	; 1
    2712:	8c 93       	st	X, r24
		CLR_BIT(SPCR_REG, SPCR_SPR1 );
    2714:	ad e2       	ldi	r26, 0x2D	; 45
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	ed e2       	ldi	r30, 0x2D	; 45
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	8d 7f       	andi	r24, 0xFD	; 253
    2720:	8c 93       	st	X, r24
		CLR_BIT(SPSR_REG, SPSR_SPI2x);
    2722:	ae e2       	ldi	r26, 0x2E	; 46
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	ee e2       	ldi	r30, 0x2E	; 46
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	8e 7f       	andi	r24, 0xFE	; 254
    272e:	8c 93       	st	X, r24

	#endif


	/*	Enable SPI	*/
	SET_BIT(SPCR_REG, SPCR_SPE);
    2730:	ad e2       	ldi	r26, 0x2D	; 45
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	ed e2       	ldi	r30, 0x2D	; 45
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	80 64       	ori	r24, 0x40	; 64
    273c:	8c 93       	st	X, r24
}
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <SPI_enuMasterTransmit_Char>:



ErrorStatus_t SPI_enuMasterTransmit_Char(uint8_t copy_u8Data){
    2744:	0f 93       	push	r16
    2746:	1f 93       	push	r17
    2748:	df 93       	push	r29
    274a:	cf 93       	push	r28
    274c:	00 d0       	rcall	.+0      	; 0x274e <SPI_enuMasterTransmit_Char+0xa>
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2754:	19 82       	std	Y+1, r1	; 0x01
		SPDR_REG = copy_u8Data;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		SPDR_REG = flipBits(copy_u8Data);
    2756:	0f e2       	ldi	r16, 0x2F	; 47
    2758:	10 e0       	ldi	r17, 0x00	; 0
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	0e 94 4d 14 	call	0x289a	; 0x289a <flipBits>
    2760:	f8 01       	movw	r30, r16
    2762:	80 83       	st	Z, r24
	#endif


	/*! Wait for transmission complete */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    2764:	ee e2       	ldi	r30, 0x2E	; 46
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	88 23       	and	r24, r24
    276c:	dc f7       	brge	.-10     	; 0x2764 <SPI_enuMasterTransmit_Char+0x20>


	Local_enu_ErrorState = ERROR_STATUS_OK;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    2772:	89 81       	ldd	r24, Y+1	; 0x01
}
    2774:	0f 90       	pop	r0
    2776:	0f 90       	pop	r0
    2778:	cf 91       	pop	r28
    277a:	df 91       	pop	r29
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	08 95       	ret

00002782 <SPI_enuMasterTransmit_String>:



ErrorStatus_t SPI_enuMasterTransmit_String(uint8_t* copy_pu8Data){
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	00 d0       	rcall	.+0      	; 0x2788 <SPI_enuMasterTransmit_String+0x6>
    2788:	00 d0       	rcall	.+0      	; 0x278a <SPI_enuMasterTransmit_String+0x8>
    278a:	cd b7       	in	r28, 0x3d	; 61
    278c:	de b7       	in	r29, 0x3e	; 62
    278e:	9b 83       	std	Y+3, r25	; 0x03
    2790:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2792:	19 82       	std	Y+1, r1	; 0x01


	if(copy_pu8Data == NULL){
    2794:	8a 81       	ldd	r24, Y+2	; 0x02
    2796:	9b 81       	ldd	r25, Y+3	; 0x03
    2798:	00 97       	sbiw	r24, 0x00	; 0
    279a:	19 f4       	brne	.+6      	; 0x27a2 <SPI_enuMasterTransmit_String+0x20>
		return Local_enu_ErrorState;
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	8c 83       	std	Y+4, r24	; 0x04
    27a0:	13 c0       	rjmp	.+38     	; 0x27c8 <SPI_enuMasterTransmit_String+0x46>

	}else{

		do{
			SPI_enuMasterTransmit_Char(*copy_pu8Data);
    27a2:	ea 81       	ldd	r30, Y+2	; 0x02
    27a4:	fb 81       	ldd	r31, Y+3	; 0x03
    27a6:	80 81       	ld	r24, Z
    27a8:	0e 94 a2 13 	call	0x2744	; 0x2744 <SPI_enuMasterTransmit_Char>
			copy_pu8Data++;
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	9b 81       	ldd	r25, Y+3	; 0x03
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	9b 83       	std	Y+3, r25	; 0x03
    27b4:	8a 83       	std	Y+2, r24	; 0x02
		}while(*copy_pu8Data != '\0');
    27b6:	ea 81       	ldd	r30, Y+2	; 0x02
    27b8:	fb 81       	ldd	r31, Y+3	; 0x03
    27ba:	80 81       	ld	r24, Z
    27bc:	88 23       	and	r24, r24
    27be:	89 f7       	brne	.-30     	; 0x27a2 <SPI_enuMasterTransmit_String+0x20>
	}

	Local_enu_ErrorState = ERROR_STATUS_OK;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	8c 83       	std	Y+4, r24	; 0x04
    27c8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <SPI_enuSlaveReceive_Char>:



ErrorStatus_t SPI_enuSlaveReceive_Char(uint8_t* copy_pu8Data){
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	00 d0       	rcall	.+0      	; 0x27de <SPI_enuSlaveReceive_Char+0x6>
    27de:	0f 92       	push	r0
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	9b 83       	std	Y+3, r25	; 0x03
    27e6:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    27e8:	19 82       	std	Y+1, r1	; 0x01


	/* Wait for successful reception of data from master */
	while(!GET_BIT(SPSR_REG, SPSR_SPIF));
    27ea:	ee e2       	ldi	r30, 0x2E	; 46
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	88 23       	and	r24, r24
    27f2:	dc f7       	brge	.-10     	; 0x27ea <SPI_enuSlaveReceive_Char+0x12>

	*copy_pu8Data = SPDR_REG;
    27f4:	ef e2       	ldi	r30, 0x2F	; 47
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	80 81       	ld	r24, Z
    27fa:	ea 81       	ldd	r30, Y+2	; 0x02
    27fc:	fb 81       	ldd	r31, Y+3	; 0x03
    27fe:	80 83       	st	Z, r24
		*copy_pu8Data = SPDR_REG;
	#endif


	#if(SPI_DORD == SPI_DORD_MSB)
		*copy_pu8Data= flipBits(SPDR_REG);
    2800:	ef e2       	ldi	r30, 0x2F	; 47
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	0e 94 4d 14 	call	0x289a	; 0x289a <flipBits>
    280a:	ea 81       	ldd	r30, Y+2	; 0x02
    280c:	fb 81       	ldd	r31, Y+3	; 0x03
    280e:	80 83       	st	Z, r24
	#endif




	Local_enu_ErrorState = ERROR_STATUS_OK;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	89 83       	std	Y+1, r24	; 0x01
	return Local_enu_ErrorState;
    2814:	89 81       	ldd	r24, Y+1	; 0x01
}
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	cf 91       	pop	r28
    281e:	df 91       	pop	r29
    2820:	08 95       	ret

00002822 <SPI_enuSlaveReceive_String>:



ErrorStatus_t SPI_enuSlaveReceive_String(uint8_t* copy_pu8Data){
    2822:	df 93       	push	r29
    2824:	cf 93       	push	r28
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	27 97       	sbiw	r28, 0x07	; 7
    282c:	0f b6       	in	r0, 0x3f	; 63
    282e:	f8 94       	cli
    2830:	de bf       	out	0x3e, r29	; 62
    2832:	0f be       	out	0x3f, r0	; 63
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	9d 83       	std	Y+5, r25	; 0x05
    2838:	8c 83       	std	Y+4, r24	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    283a:	1b 82       	std	Y+3, r1	; 0x03


	if(copy_pu8Data == NULL){
    283c:	8c 81       	ldd	r24, Y+4	; 0x04
    283e:	9d 81       	ldd	r25, Y+5	; 0x05
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	19 f4       	brne	.+6      	; 0x284a <SPI_enuSlaveReceive_String+0x28>
		return Local_enu_ErrorState;
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	8e 83       	std	Y+6, r24	; 0x06
    2848:	1e c0       	rjmp	.+60     	; 0x2886 <SPI_enuSlaveReceive_String+0x64>
	}else{

		// Intiate head of buffer similar to linked-list idea
		uint8_t *Local_u8Temp = copy_pu8Data;
    284a:	8c 81       	ldd	r24, Y+4	; 0x04
    284c:	9d 81       	ldd	r25, Y+5	; 0x05
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	89 83       	std	Y+1, r24	; 0x01

		do{
			SPI_enuSlaveReceive_Char(Local_u8Temp);
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	9a 81       	ldd	r25, Y+2	; 0x02
    2856:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <SPI_enuSlaveReceive_Char>


		}while(*(Local_u8Temp++) != '\0');
    285a:	e9 81       	ldd	r30, Y+1	; 0x01
    285c:	fa 81       	ldd	r31, Y+2	; 0x02
    285e:	80 81       	ld	r24, Z
    2860:	8f 83       	std	Y+7, r24	; 0x07
    2862:	8f 81       	ldd	r24, Y+7	; 0x07
    2864:	88 23       	and	r24, r24
    2866:	11 f0       	breq	.+4      	; 0x286c <SPI_enuSlaveReceive_String+0x4a>
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	8f 83       	std	Y+7, r24	; 0x07
    286c:	8f 81       	ldd	r24, Y+7	; 0x07
    286e:	29 81       	ldd	r18, Y+1	; 0x01
    2870:	3a 81       	ldd	r19, Y+2	; 0x02
    2872:	2f 5f       	subi	r18, 0xFF	; 255
    2874:	3f 4f       	sbci	r19, 0xFF	; 255
    2876:	3a 83       	std	Y+2, r19	; 0x02
    2878:	29 83       	std	Y+1, r18	; 0x01
    287a:	88 23       	and	r24, r24
    287c:	51 f7       	brne	.-44     	; 0x2852 <SPI_enuSlaveReceive_String+0x30>
	}


	Local_enu_ErrorState = ERROR_STATUS_OK;
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enu_ErrorState;
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	8e 83       	std	Y+6, r24	; 0x06
    2886:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2888:	27 96       	adiw	r28, 0x07	; 7
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	cf 91       	pop	r28
    2896:	df 91       	pop	r29
    2898:	08 95       	ret

0000289a <flipBits>:

static inline uint8_t flipBits(uint8_t byte) {
    289a:	df 93       	push	r29
    289c:	cf 93       	push	r28
    289e:	0f 92       	push	r0
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xF0) >> 4 | (byte & 0x0F) << 4;
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	82 95       	swap	r24
    28aa:	8f 70       	andi	r24, 0x0F	; 15
    28ac:	28 2f       	mov	r18, r24
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	88 2f       	mov	r24, r24
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	82 95       	swap	r24
    28b6:	92 95       	swap	r25
    28b8:	90 7f       	andi	r25, 0xF0	; 240
    28ba:	98 27       	eor	r25, r24
    28bc:	80 7f       	andi	r24, 0xF0	; 240
    28be:	98 27       	eor	r25, r24
    28c0:	82 2b       	or	r24, r18
    28c2:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xCC) >> 2 | (byte & 0x33) << 2;
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	88 2f       	mov	r24, r24
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	8c 7c       	andi	r24, 0xCC	; 204
    28cc:	90 70       	andi	r25, 0x00	; 0
    28ce:	95 95       	asr	r25
    28d0:	87 95       	ror	r24
    28d2:	95 95       	asr	r25
    28d4:	87 95       	ror	r24
    28d6:	28 2f       	mov	r18, r24
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	83 73       	andi	r24, 0x33	; 51
    28e0:	90 70       	andi	r25, 0x00	; 0
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	82 2b       	or	r24, r18
    28ec:	89 83       	std	Y+1, r24	; 0x01
    byte = (byte & 0xAA) >> 1 | (byte & 0x55) << 1;
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	88 2f       	mov	r24, r24
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	8a 7a       	andi	r24, 0xAA	; 170
    28f6:	90 70       	andi	r25, 0x00	; 0
    28f8:	95 95       	asr	r25
    28fa:	87 95       	ror	r24
    28fc:	28 2f       	mov	r18, r24
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	88 2f       	mov	r24, r24
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	85 75       	andi	r24, 0x55	; 85
    2906:	90 70       	andi	r25, 0x00	; 0
    2908:	88 0f       	add	r24, r24
    290a:	99 1f       	adc	r25, r25
    290c:	82 2b       	or	r24, r18
    290e:	89 83       	std	Y+1, r24	; 0x01
    return byte;
    2910:	89 81       	ldd	r24, Y+1	; 0x01
}
    2912:	0f 90       	pop	r0
    2914:	cf 91       	pop	r28
    2916:	df 91       	pop	r29
    2918:	08 95       	ret

0000291a <GIE_enuEnable>:
#include "GIE_priv.h"
/**********************************************************/

//ErrorStatus_t GIE_enuInit(void);

ErrorStatus_t GIE_enuEnable(void){
    291a:	df 93       	push	r29
    291c:	cf 93       	push	r28
    291e:	0f 92       	push	r0
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2924:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_OFF ){
    2926:	ef e5       	ldi	r30, 0x5F	; 95
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	88 23       	and	r24, r24
    292e:	4c f0       	brlt	.+18     	; 0x2942 <GIE_enuEnable+0x28>

		SREG |= (1 << I_BIT);
    2930:	af e5       	ldi	r26, 0x5F	; 95
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	ef e5       	ldi	r30, 0x5F	; 95
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	80 68       	ori	r24, 0x80	; 128
    293c:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    2942:	89 81       	ldd	r24, Y+1	; 0x01
}
    2944:	0f 90       	pop	r0
    2946:	cf 91       	pop	r28
    2948:	df 91       	pop	r29
    294a:	08 95       	ret

0000294c <GIE_enuDisable>:


ErrorStatus_t GIE_enuDisable(void){
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	0f 92       	push	r0
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    2956:	19 82       	std	Y+1, r1	; 0x01


	if( ((SREG >> I_BIT)&&1) == BIT_ON){
    2958:	ef e5       	ldi	r30, 0x5F	; 95
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	88 23       	and	r24, r24
    2960:	4c f4       	brge	.+18     	; 0x2974 <GIE_enuDisable+0x28>

		SREG &= ~(1 << I_BIT);
    2962:	af e5       	ldi	r26, 0x5F	; 95
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	ef e5       	ldi	r30, 0x5F	; 95
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	8f 77       	andi	r24, 0x7F	; 127
    296e:	8c 93       	st	X, r24
		Local_enu_ErrorState = ERROR_STATUS_OK;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enu_ErrorState;
    2974:	89 81       	ldd	r24, Y+1	; 0x01
}
    2976:	0f 90       	pop	r0
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <EXTI_enuInit>:

static void (*EXTI_pfunISRFun[NUM_INT])(void) = {NULL, NULL, NULL};



ErrorStatus_t EXTI_enuInit(EXTI* Copy_pu8GroupConfig){
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	2a 97       	sbiw	r28, 0x0a	; 10
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	de bf       	out	0x3e, r29	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	cd bf       	out	0x3d, r28	; 61
    2992:	9b 83       	std	Y+3, r25	; 0x03
    2994:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2996:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8GroupConfig == NULL){
    2998:	8a 81       	ldd	r24, Y+2	; 0x02
    299a:	9b 81       	ldd	r25, Y+3	; 0x03
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	19 f4       	brne	.+6      	; 0x29a6 <EXTI_enuInit+0x28>

		return Local_enuErrorStatus;
    29a0:	29 81       	ldd	r18, Y+1	; 0x01
    29a2:	2a 87       	std	Y+10, r18	; 0x0a
    29a4:	36 c1       	rjmp	.+620    	; 0x2c12 <EXTI_enuInit+0x294>

	else{


		/**************** INT0 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_ENABLED){
    29a6:	ea 81       	ldd	r30, Y+2	; 0x02
    29a8:	fb 81       	ldd	r31, Y+3	; 0x03
    29aa:	80 81       	ld	r24, Z
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	09 f0       	breq	.+2      	; 0x29b2 <EXTI_enuInit+0x34>
    29b0:	64 c0       	rjmp	.+200    	; 0x2a7a <EXTI_enuInit+0xfc>

			SET_BIT(GICR, INT0_switch);
    29b2:	ab e5       	ldi	r26, 0x5B	; 91
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	eb e5       	ldi	r30, 0x5B	; 91
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	80 64       	ori	r24, 0x40	; 64
    29be:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_0].Sence_Level){
    29c0:	ea 81       	ldd	r30, Y+2	; 0x02
    29c2:	fb 81       	ldd	r31, Y+3	; 0x03
    29c4:	81 81       	ldd	r24, Z+1	; 0x01
    29c6:	28 2f       	mov	r18, r24
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	39 87       	std	Y+9, r19	; 0x09
    29cc:	28 87       	std	Y+8, r18	; 0x08
    29ce:	88 85       	ldd	r24, Y+8	; 0x08
    29d0:	99 85       	ldd	r25, Y+9	; 0x09
    29d2:	81 30       	cpi	r24, 0x01	; 1
    29d4:	91 05       	cpc	r25, r1
    29d6:	21 f1       	breq	.+72     	; 0x2a20 <EXTI_enuInit+0xa2>
    29d8:	28 85       	ldd	r18, Y+8	; 0x08
    29da:	39 85       	ldd	r19, Y+9	; 0x09
    29dc:	22 30       	cpi	r18, 0x02	; 2
    29de:	31 05       	cpc	r19, r1
    29e0:	2c f4       	brge	.+10     	; 0x29ec <EXTI_enuInit+0x6e>
    29e2:	88 85       	ldd	r24, Y+8	; 0x08
    29e4:	99 85       	ldd	r25, Y+9	; 0x09
    29e6:	00 97       	sbiw	r24, 0x00	; 0
    29e8:	61 f0       	breq	.+24     	; 0x2a02 <EXTI_enuInit+0x84>
    29ea:	53 c0       	rjmp	.+166    	; 0x2a92 <EXTI_enuInit+0x114>
    29ec:	28 85       	ldd	r18, Y+8	; 0x08
    29ee:	39 85       	ldd	r19, Y+9	; 0x09
    29f0:	22 30       	cpi	r18, 0x02	; 2
    29f2:	31 05       	cpc	r19, r1
    29f4:	21 f1       	breq	.+72     	; 0x2a3e <EXTI_enuInit+0xc0>
    29f6:	88 85       	ldd	r24, Y+8	; 0x08
    29f8:	99 85       	ldd	r25, Y+9	; 0x09
    29fa:	83 30       	cpi	r24, 0x03	; 3
    29fc:	91 05       	cpc	r25, r1
    29fe:	71 f1       	breq	.+92     	; 0x2a5c <EXTI_enuInit+0xde>
    2a00:	48 c0       	rjmp	.+144    	; 0x2a92 <EXTI_enuInit+0x114>


				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC00);
    2a02:	a5 e5       	ldi	r26, 0x55	; 85
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e5 e5       	ldi	r30, 0x55	; 85
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	8e 7f       	andi	r24, 0xFE	; 254
    2a0e:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    2a10:	a5 e5       	ldi	r26, 0x55	; 85
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	e5 e5       	ldi	r30, 0x55	; 85
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	80 81       	ld	r24, Z
    2a1a:	8d 7f       	andi	r24, 0xFD	; 253
    2a1c:	8c 93       	st	X, r24
    2a1e:	39 c0       	rjmp	.+114    	; 0x2a92 <EXTI_enuInit+0x114>

					break;

				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC00);
    2a20:	a5 e5       	ldi	r26, 0x55	; 85
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	e5 e5       	ldi	r30, 0x55	; 85
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	81 60       	ori	r24, 0x01	; 1
    2a2c:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC01);
    2a2e:	a5 e5       	ldi	r26, 0x55	; 85
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	e5 e5       	ldi	r30, 0x55	; 85
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	8d 7f       	andi	r24, 0xFD	; 253
    2a3a:	8c 93       	st	X, r24
    2a3c:	2a c0       	rjmp	.+84     	; 0x2a92 <EXTI_enuInit+0x114>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC00);
    2a3e:	a5 e5       	ldi	r26, 0x55	; 85
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	e5 e5       	ldi	r30, 0x55	; 85
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	8e 7f       	andi	r24, 0xFE	; 254
    2a4a:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    2a4c:	a5 e5       	ldi	r26, 0x55	; 85
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e5 e5       	ldi	r30, 0x55	; 85
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	82 60       	ori	r24, 0x02	; 2
    2a58:	8c 93       	st	X, r24
    2a5a:	1b c0       	rjmp	.+54     	; 0x2a92 <EXTI_enuInit+0x114>

					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCR, ISC00);
    2a5c:	a5 e5       	ldi	r26, 0x55	; 85
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e5 e5       	ldi	r30, 0x55	; 85
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	81 60       	ori	r24, 0x01	; 1
    2a68:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC01);
    2a6a:	a5 e5       	ldi	r26, 0x55	; 85
    2a6c:	b0 e0       	ldi	r27, 0x00	; 0
    2a6e:	e5 e5       	ldi	r30, 0x55	; 85
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	80 81       	ld	r24, Z
    2a74:	82 60       	ori	r24, 0x02	; 2
    2a76:	8c 93       	st	X, r24
    2a78:	0c c0       	rjmp	.+24     	; 0x2a92 <EXTI_enuInit+0x114>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_0].Int_State == EXTI_DISABLED){
    2a7a:	ea 81       	ldd	r30, Y+2	; 0x02
    2a7c:	fb 81       	ldd	r31, Y+3	; 0x03
    2a7e:	80 81       	ld	r24, Z
    2a80:	88 23       	and	r24, r24
    2a82:	39 f4       	brne	.+14     	; 0x2a92 <EXTI_enuInit+0x114>

			CLR_BIT(GICR, INT0_switch);
    2a84:	ab e5       	ldi	r26, 0x5B	; 91
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	eb e5       	ldi	r30, 0x5B	; 91
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	8f 7b       	andi	r24, 0xBF	; 191
    2a90:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT1 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_ENABLED){
    2a92:	8a 81       	ldd	r24, Y+2	; 0x02
    2a94:	9b 81       	ldd	r25, Y+3	; 0x03
    2a96:	fc 01       	movw	r30, r24
    2a98:	32 96       	adiw	r30, 0x02	; 2
    2a9a:	80 81       	ld	r24, Z
    2a9c:	81 30       	cpi	r24, 0x01	; 1
    2a9e:	09 f0       	breq	.+2      	; 0x2aa2 <EXTI_enuInit+0x124>
    2aa0:	66 c0       	rjmp	.+204    	; 0x2b6e <EXTI_enuInit+0x1f0>

			SET_BIT(GICR, INT1_switch);
    2aa2:	ab e5       	ldi	r26, 0x5B	; 91
    2aa4:	b0 e0       	ldi	r27, 0x00	; 0
    2aa6:	eb e5       	ldi	r30, 0x5B	; 91
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	80 68       	ori	r24, 0x80	; 128
    2aae:	8c 93       	st	X, r24


			switch(Copy_pu8GroupConfig[INT_NO_1].Sence_Level){
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	32 96       	adiw	r30, 0x02	; 2
    2ab8:	81 81       	ldd	r24, Z+1	; 0x01
    2aba:	28 2f       	mov	r18, r24
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	3f 83       	std	Y+7, r19	; 0x07
    2ac0:	2e 83       	std	Y+6, r18	; 0x06
    2ac2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ac6:	81 30       	cpi	r24, 0x01	; 1
    2ac8:	91 05       	cpc	r25, r1
    2aca:	21 f1       	breq	.+72     	; 0x2b14 <EXTI_enuInit+0x196>
    2acc:	2e 81       	ldd	r18, Y+6	; 0x06
    2ace:	3f 81       	ldd	r19, Y+7	; 0x07
    2ad0:	22 30       	cpi	r18, 0x02	; 2
    2ad2:	31 05       	cpc	r19, r1
    2ad4:	2c f4       	brge	.+10     	; 0x2ae0 <EXTI_enuInit+0x162>
    2ad6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad8:	9f 81       	ldd	r25, Y+7	; 0x07
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	61 f0       	breq	.+24     	; 0x2af6 <EXTI_enuInit+0x178>
    2ade:	55 c0       	rjmp	.+170    	; 0x2b8a <EXTI_enuInit+0x20c>
    2ae0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ae2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ae4:	22 30       	cpi	r18, 0x02	; 2
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	21 f1       	breq	.+72     	; 0x2b32 <EXTI_enuInit+0x1b4>
    2aea:	8e 81       	ldd	r24, Y+6	; 0x06
    2aec:	9f 81       	ldd	r25, Y+7	; 0x07
    2aee:	83 30       	cpi	r24, 0x03	; 3
    2af0:	91 05       	cpc	r25, r1
    2af2:	71 f1       	breq	.+92     	; 0x2b50 <EXTI_enuInit+0x1d2>
    2af4:	4a c0       	rjmp	.+148    	; 0x2b8a <EXTI_enuInit+0x20c>

				case EXTI_LOW_LEVEL:

					CLR_BIT(MCUCR, ISC10);
    2af6:	a5 e5       	ldi	r26, 0x55	; 85
    2af8:	b0 e0       	ldi	r27, 0x00	; 0
    2afa:	e5 e5       	ldi	r30, 0x55	; 85
    2afc:	f0 e0       	ldi	r31, 0x00	; 0
    2afe:	80 81       	ld	r24, Z
    2b00:	8b 7f       	andi	r24, 0xFB	; 251
    2b02:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    2b04:	a5 e5       	ldi	r26, 0x55	; 85
    2b06:	b0 e0       	ldi	r27, 0x00	; 0
    2b08:	e5 e5       	ldi	r30, 0x55	; 85
    2b0a:	f0 e0       	ldi	r31, 0x00	; 0
    2b0c:	80 81       	ld	r24, Z
    2b0e:	87 7f       	andi	r24, 0xF7	; 247
    2b10:	8c 93       	st	X, r24
    2b12:	3b c0       	rjmp	.+118    	; 0x2b8a <EXTI_enuInit+0x20c>
					break;


				case EXTI_ANY_lOGICALCHANGE:

					SET_BIT(MCUCR, ISC10);
    2b14:	a5 e5       	ldi	r26, 0x55	; 85
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e5 e5       	ldi	r30, 0x55	; 85
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	84 60       	ori	r24, 0x04	; 4
    2b20:	8c 93       	st	X, r24
					CLR_BIT(MCUCR, ISC11);
    2b22:	a5 e5       	ldi	r26, 0x55	; 85
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	e5 e5       	ldi	r30, 0x55	; 85
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	80 81       	ld	r24, Z
    2b2c:	87 7f       	andi	r24, 0xF7	; 247
    2b2e:	8c 93       	st	X, r24
    2b30:	2c c0       	rjmp	.+88     	; 0x2b8a <EXTI_enuInit+0x20c>
					break;


				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCR, ISC10);
    2b32:	a5 e5       	ldi	r26, 0x55	; 85
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e5 e5       	ldi	r30, 0x55	; 85
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	8b 7f       	andi	r24, 0xFB	; 251
    2b3e:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    2b40:	a5 e5       	ldi	r26, 0x55	; 85
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e5 e5       	ldi	r30, 0x55	; 85
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	88 60       	ori	r24, 0x08	; 8
    2b4c:	8c 93       	st	X, r24
    2b4e:	1d c0       	rjmp	.+58     	; 0x2b8a <EXTI_enuInit+0x20c>
					break;

				case EXTI_RISING_EDGE:


					SET_BIT(MCUCR, ISC10);
    2b50:	a5 e5       	ldi	r26, 0x55	; 85
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e5 e5       	ldi	r30, 0x55	; 85
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	84 60       	ori	r24, 0x04	; 4
    2b5c:	8c 93       	st	X, r24
					SET_BIT(MCUCR, ISC11);
    2b5e:	a5 e5       	ldi	r26, 0x55	; 85
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e5 e5       	ldi	r30, 0x55	; 85
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	88 60       	ori	r24, 0x08	; 8
    2b6a:	8c 93       	st	X, r24
    2b6c:	0e c0       	rjmp	.+28     	; 0x2b8a <EXTI_enuInit+0x20c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_1].Int_State == EXTI_DISABLED){
    2b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b70:	9b 81       	ldd	r25, Y+3	; 0x03
    2b72:	fc 01       	movw	r30, r24
    2b74:	32 96       	adiw	r30, 0x02	; 2
    2b76:	80 81       	ld	r24, Z
    2b78:	88 23       	and	r24, r24
    2b7a:	39 f4       	brne	.+14     	; 0x2b8a <EXTI_enuInit+0x20c>

			CLR_BIT(GICR, INT1_switch);
    2b7c:	ab e5       	ldi	r26, 0x5B	; 91
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	eb e5       	ldi	r30, 0x5B	; 91
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8f 77       	andi	r24, 0x7F	; 127
    2b88:	8c 93       	st	X, r24
		}
		/***************************************************/


		/**************** INT2 Configuration ****************/
		if(Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_ENABLED){
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8e:	fc 01       	movw	r30, r24
    2b90:	34 96       	adiw	r30, 0x04	; 4
    2b92:	80 81       	ld	r24, Z
    2b94:	81 30       	cpi	r24, 0x01	; 1
    2b96:	59 f5       	brne	.+86     	; 0x2bee <EXTI_enuInit+0x270>

			SET_BIT(GICR, INT2_switch);
    2b98:	ab e5       	ldi	r26, 0x5B	; 91
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	eb e5       	ldi	r30, 0x5B	; 91
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	80 62       	ori	r24, 0x20	; 32
    2ba4:	8c 93       	st	X, r24

			switch(Copy_pu8GroupConfig[INT_NO_2].Sence_Level){
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    2baa:	fc 01       	movw	r30, r24
    2bac:	34 96       	adiw	r30, 0x04	; 4
    2bae:	81 81       	ldd	r24, Z+1	; 0x01
    2bb0:	28 2f       	mov	r18, r24
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	3d 83       	std	Y+5, r19	; 0x05
    2bb6:	2c 83       	std	Y+4, r18	; 0x04
    2bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bba:	9d 81       	ldd	r25, Y+5	; 0x05
    2bbc:	82 30       	cpi	r24, 0x02	; 2
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	31 f0       	breq	.+12     	; 0x2bce <EXTI_enuInit+0x250>
    2bc2:	2c 81       	ldd	r18, Y+4	; 0x04
    2bc4:	3d 81       	ldd	r19, Y+5	; 0x05
    2bc6:	23 30       	cpi	r18, 0x03	; 3
    2bc8:	31 05       	cpc	r19, r1
    2bca:	49 f0       	breq	.+18     	; 0x2bde <EXTI_enuInit+0x260>
    2bcc:	1e c0       	rjmp	.+60     	; 0x2c0a <EXTI_enuInit+0x28c>

				case EXTI_FALLING_EDGE:

					CLR_BIT(MCUCSR, ISC2);
    2bce:	a4 e5       	ldi	r26, 0x54	; 84
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	e4 e5       	ldi	r30, 0x54	; 84
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	8f 7b       	andi	r24, 0xBF	; 191
    2bda:	8c 93       	st	X, r24
    2bdc:	16 c0       	rjmp	.+44     	; 0x2c0a <EXTI_enuInit+0x28c>
					break;

				case EXTI_RISING_EDGE:

					SET_BIT(MCUCSR, ISC2);
    2bde:	a4 e5       	ldi	r26, 0x54	; 84
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	e4 e5       	ldi	r30, 0x54	; 84
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	80 64       	ori	r24, 0x40	; 64
    2bea:	8c 93       	st	X, r24
    2bec:	0e c0       	rjmp	.+28     	; 0x2c0a <EXTI_enuInit+0x28c>
					break;
			}


		}
		else if (Copy_pu8GroupConfig[INT_NO_2].Int_State == EXTI_DISABLED){
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	34 96       	adiw	r30, 0x04	; 4
    2bf6:	80 81       	ld	r24, Z
    2bf8:	88 23       	and	r24, r24
    2bfa:	39 f4       	brne	.+14     	; 0x2c0a <EXTI_enuInit+0x28c>

			CLR_BIT(GICR, INT2_switch);
    2bfc:	ab e5       	ldi	r26, 0x5B	; 91
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	eb e5       	ldi	r30, 0x5B	; 91
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	8f 7d       	andi	r24, 0xDF	; 223
    2c08:	8c 93       	st	X, r24





		Local_enuErrorStatus = ERROR_STATUS_OK;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    2c0e:	39 81       	ldd	r19, Y+1	; 0x01
    2c10:	3a 87       	std	Y+10, r19	; 0x0a
    2c12:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    2c14:	2a 96       	adiw	r28, 0x0a	; 10
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <EXTI_enuEnableInterrupt>:

ErrorStatus_t EXTI_enuEnableInterrupt(uint8_t Copy_u8IntNumber){
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <EXTI_enuEnableInterrupt+0x6>
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <EXTI_enuEnableInterrupt+0x8>
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2c34:	19 82       	std	Y+1, r1	; 0x01


		switch(Copy_u8IntNumber){
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	3c 83       	std	Y+4, r19	; 0x04
    2c3e:	2b 83       	std	Y+3, r18	; 0x03
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	9c 81       	ldd	r25, Y+4	; 0x04
    2c44:	81 30       	cpi	r24, 0x01	; 1
    2c46:	91 05       	cpc	r25, r1
    2c48:	89 f0       	breq	.+34     	; 0x2c6c <EXTI_enuEnableInterrupt+0x46>
    2c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    2c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    2c4e:	22 30       	cpi	r18, 0x02	; 2
    2c50:	31 05       	cpc	r19, r1
    2c52:	a1 f0       	breq	.+40     	; 0x2c7c <EXTI_enuEnableInterrupt+0x56>
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	9c 81       	ldd	r25, Y+4	; 0x04
    2c58:	00 97       	sbiw	r24, 0x00	; 0
    2c5a:	b9 f4       	brne	.+46     	; 0x2c8a <EXTI_enuEnableInterrupt+0x64>
			case INT_NO_0:

				SET_BIT(GICR, INT0_switch);
    2c5c:	ab e5       	ldi	r26, 0x5B	; 91
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	eb e5       	ldi	r30, 0x5B	; 91
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	80 64       	ori	r24, 0x40	; 64
    2c68:	8c 93       	st	X, r24
    2c6a:	0f c0       	rjmp	.+30     	; 0x2c8a <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_1:

				SET_BIT(GICR, INT1_switch);
    2c6c:	ab e5       	ldi	r26, 0x5B	; 91
    2c6e:	b0 e0       	ldi	r27, 0x00	; 0
    2c70:	eb e5       	ldi	r30, 0x5B	; 91
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
    2c76:	80 68       	ori	r24, 0x80	; 128
    2c78:	8c 93       	st	X, r24
    2c7a:	07 c0       	rjmp	.+14     	; 0x2c8a <EXTI_enuEnableInterrupt+0x64>
				break;

			case INT_NO_2:

				SET_BIT(GICR, INT2_switch);
    2c7c:	ab e5       	ldi	r26, 0x5B	; 91
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	eb e5       	ldi	r30, 0x5B	; 91
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	80 62       	ori	r24, 0x20	; 32
    2c88:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <EXTI_enuDisableInterrupt>:

ErrorStatus_t EXTI_enuDisableInterrupt(uint8_t Copy_u8IntNumber){
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <EXTI_enuDisableInterrupt+0x6>
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <EXTI_enuDisableInterrupt+0x8>
    2ca6:	0f 92       	push	r0
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	8a 83       	std	Y+2, r24	; 0x02

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2cae:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8IntNumber > INT_NO_2){
    2cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb2:	83 30       	cpi	r24, 0x03	; 3
    2cb4:	18 f0       	brcs	.+6      	; 0x2cbc <EXTI_enuDisableInterrupt+0x1e>
		return Local_enuErrorStatus;
    2cb6:	29 81       	ldd	r18, Y+1	; 0x01
    2cb8:	2d 83       	std	Y+5, r18	; 0x05
    2cba:	2e c0       	rjmp	.+92     	; 0x2d18 <EXTI_enuDisableInterrupt+0x7a>
	}

	else{

		switch(Copy_u8IntNumber){
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	28 2f       	mov	r18, r24
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	3c 83       	std	Y+4, r19	; 0x04
    2cc4:	2b 83       	std	Y+3, r18	; 0x03
    2cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cca:	81 30       	cpi	r24, 0x01	; 1
    2ccc:	91 05       	cpc	r25, r1
    2cce:	89 f0       	breq	.+34     	; 0x2cf2 <EXTI_enuDisableInterrupt+0x54>
    2cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    2cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    2cd4:	22 30       	cpi	r18, 0x02	; 2
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	a1 f0       	breq	.+40     	; 0x2d02 <EXTI_enuDisableInterrupt+0x64>
    2cda:	8b 81       	ldd	r24, Y+3	; 0x03
    2cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	b9 f4       	brne	.+46     	; 0x2d10 <EXTI_enuDisableInterrupt+0x72>
		case INT_NO_0:

			
			GICR &= ~(1<<INT0_switch);
    2ce2:	ab e5       	ldi	r26, 0x5B	; 91
    2ce4:	b0 e0       	ldi	r27, 0x00	; 0
    2ce6:	eb e5       	ldi	r30, 0x5B	; 91
    2ce8:	f0 e0       	ldi	r31, 0x00	; 0
    2cea:	80 81       	ld	r24, Z
    2cec:	8f 7b       	andi	r24, 0xBF	; 191
    2cee:	8c 93       	st	X, r24
    2cf0:	0f c0       	rjmp	.+30     	; 0x2d10 <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_1:

			GICR &= ~(1<<INT1_switch);
    2cf2:	ab e5       	ldi	r26, 0x5B	; 91
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	eb e5       	ldi	r30, 0x5B	; 91
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	8f 77       	andi	r24, 0x7F	; 127
    2cfe:	8c 93       	st	X, r24
    2d00:	07 c0       	rjmp	.+14     	; 0x2d10 <EXTI_enuDisableInterrupt+0x72>
			break;

		case INT_NO_2:

			GICR &= ~(1<<INT2_switch);
    2d02:	ab e5       	ldi	r26, 0x5B	; 91
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	eb e5       	ldi	r30, 0x5B	; 91
    2d08:	f0 e0       	ldi	r31, 0x00	; 0
    2d0a:	80 81       	ld	r24, Z
    2d0c:	8f 7d       	andi	r24, 0xDF	; 223
    2d0e:	8c 93       	st	X, r24
		}

		Local_enuErrorStatus = ERROR_STATUS_OK;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    2d14:	99 81       	ldd	r25, Y+1	; 0x01
    2d16:	9d 83       	std	Y+5, r25	; 0x05
    2d18:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <EXTI_enuSetSenseLevel>:


ErrorStatus_t EXTI_enuSetSenseLevel(uint8_t Copy_u8IntNumber,  uint8_t Copy_u8SenseLevel){
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62
    2d32:	2c 97       	sbiw	r28, 0x0c	; 12
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	8a 83       	std	Y+2, r24	; 0x02
    2d40:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2d42:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_u8IntNumber > INT_NO_2) || Copy_u8SenseLevel > EXTI_RISING_EDGE){
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	83 30       	cpi	r24, 0x03	; 3
    2d48:	18 f4       	brcc	.+6      	; 0x2d50 <EXTI_enuSetSenseLevel+0x26>
    2d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d4c:	84 30       	cpi	r24, 0x04	; 4
    2d4e:	18 f0       	brcs	.+6      	; 0x2d56 <EXTI_enuSetSenseLevel+0x2c>

		return Local_enuErrorStatus;
    2d50:	29 81       	ldd	r18, Y+1	; 0x01
    2d52:	2c 87       	std	Y+12, r18	; 0x0c
    2d54:	ef c0       	rjmp	.+478    	; 0x2f34 <EXTI_enuSetSenseLevel+0x20a>
	}

	else{

		switch(Copy_u8IntNumber){
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	3b 87       	std	Y+11, r19	; 0x0b
    2d5e:	2a 87       	std	Y+10, r18	; 0x0a
    2d60:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d62:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d64:	81 30       	cpi	r24, 0x01	; 1
    2d66:	91 05       	cpc	r25, r1
    2d68:	09 f4       	brne	.+2      	; 0x2d6c <EXTI_enuSetSenseLevel+0x42>
    2d6a:	66 c0       	rjmp	.+204    	; 0x2e38 <EXTI_enuSetSenseLevel+0x10e>
    2d6c:	2a 85       	ldd	r18, Y+10	; 0x0a
    2d6e:	3b 85       	ldd	r19, Y+11	; 0x0b
    2d70:	22 30       	cpi	r18, 0x02	; 2
    2d72:	31 05       	cpc	r19, r1
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <EXTI_enuSetSenseLevel+0x4e>
    2d76:	bb c0       	rjmp	.+374    	; 0x2eee <EXTI_enuSetSenseLevel+0x1c4>
    2d78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d7c:	00 97       	sbiw	r24, 0x00	; 0
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <EXTI_enuSetSenseLevel+0x58>
    2d80:	d5 c0       	rjmp	.+426    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>
		case INT_NO_0:

			/**************** INT0 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	39 87       	std	Y+9, r19	; 0x09
    2d8a:	28 87       	std	Y+8, r18	; 0x08
    2d8c:	88 85       	ldd	r24, Y+8	; 0x08
    2d8e:	99 85       	ldd	r25, Y+9	; 0x09
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	91 05       	cpc	r25, r1
    2d94:	a9 f0       	breq	.+42     	; 0x2dc0 <EXTI_enuSetSenseLevel+0x96>
    2d96:	28 85       	ldd	r18, Y+8	; 0x08
    2d98:	39 85       	ldd	r19, Y+9	; 0x09
    2d9a:	22 30       	cpi	r18, 0x02	; 2
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	2c f4       	brge	.+10     	; 0x2daa <EXTI_enuSetSenseLevel+0x80>
    2da0:	88 85       	ldd	r24, Y+8	; 0x08
    2da2:	99 85       	ldd	r25, Y+9	; 0x09
    2da4:	00 97       	sbiw	r24, 0x00	; 0
    2da6:	d9 f0       	breq	.+54     	; 0x2dde <EXTI_enuSetSenseLevel+0xb4>
    2da8:	c1 c0       	rjmp	.+386    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>
    2daa:	28 85       	ldd	r18, Y+8	; 0x08
    2dac:	39 85       	ldd	r19, Y+9	; 0x09
    2dae:	22 30       	cpi	r18, 0x02	; 2
    2db0:	31 05       	cpc	r19, r1
    2db2:	21 f1       	breq	.+72     	; 0x2dfc <EXTI_enuSetSenseLevel+0xd2>
    2db4:	88 85       	ldd	r24, Y+8	; 0x08
    2db6:	99 85       	ldd	r25, Y+9	; 0x09
    2db8:	83 30       	cpi	r24, 0x03	; 3
    2dba:	91 05       	cpc	r25, r1
    2dbc:	71 f1       	breq	.+92     	; 0x2e1a <EXTI_enuSetSenseLevel+0xf0>
    2dbe:	b6 c0       	rjmp	.+364    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>
				case EXTI_ANY_lOGICALCHANGE:

					MCUCR |=  (1 << ISC00);
    2dc0:	a5 e5       	ldi	r26, 0x55	; 85
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	e5 e5       	ldi	r30, 0x55	; 85
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	81 60       	ori	r24, 0x01	; 1
    2dcc:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    2dce:	a5 e5       	ldi	r26, 0x55	; 85
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	e5 e5       	ldi	r30, 0x55	; 85
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	8d 7f       	andi	r24, 0xFD	; 253
    2dda:	8c 93       	st	X, r24
    2ddc:	a7 c0       	rjmp	.+334    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_LOW_LEVEL:

					MCUCR &= ~(1 << ISC00);
    2dde:	a5 e5       	ldi	r26, 0x55	; 85
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e5 e5       	ldi	r30, 0x55	; 85
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	8e 7f       	andi	r24, 0xFE	; 254
    2dea:	8c 93       	st	X, r24
					MCUCR &= ~(1 << ISC01);
    2dec:	a5 e5       	ldi	r26, 0x55	; 85
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	e5 e5       	ldi	r30, 0x55	; 85
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	8d 7f       	andi	r24, 0xFD	; 253
    2df8:	8c 93       	st	X, r24
    2dfa:	98 c0       	rjmp	.+304    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_FALLING_EDGE:

					MCUCR &= ~(1 << ISC00);
    2dfc:	a5 e5       	ldi	r26, 0x55	; 85
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	e5 e5       	ldi	r30, 0x55	; 85
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	8e 7f       	andi	r24, 0xFE	; 254
    2e08:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    2e0a:	a5 e5       	ldi	r26, 0x55	; 85
    2e0c:	b0 e0       	ldi	r27, 0x00	; 0
    2e0e:	e5 e5       	ldi	r30, 0x55	; 85
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	80 81       	ld	r24, Z
    2e14:	82 60       	ori	r24, 0x02	; 2
    2e16:	8c 93       	st	X, r24
    2e18:	89 c0       	rjmp	.+274    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCR |=  (1 << ISC00);
    2e1a:	a5 e5       	ldi	r26, 0x55	; 85
    2e1c:	b0 e0       	ldi	r27, 0x00	; 0
    2e1e:	e5 e5       	ldi	r30, 0x55	; 85
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	80 81       	ld	r24, Z
    2e24:	81 60       	ori	r24, 0x01	; 1
    2e26:	8c 93       	st	X, r24
					MCUCR |=  (1 << ISC01);
    2e28:	a5 e5       	ldi	r26, 0x55	; 85
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	e5 e5       	ldi	r30, 0x55	; 85
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	80 81       	ld	r24, Z
    2e32:	82 60       	ori	r24, 0x02	; 2
    2e34:	8c 93       	st	X, r24
    2e36:	7a c0       	rjmp	.+244    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>
			/**************************************************/

		case INT_NO_1:

			/**************** 1 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2e38:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	3f 83       	std	Y+7, r19	; 0x07
    2e40:	2e 83       	std	Y+6, r18	; 0x06
    2e42:	8e 81       	ldd	r24, Y+6	; 0x06
    2e44:	9f 81       	ldd	r25, Y+7	; 0x07
    2e46:	81 30       	cpi	r24, 0x01	; 1
    2e48:	91 05       	cpc	r25, r1
    2e4a:	a9 f0       	breq	.+42     	; 0x2e76 <EXTI_enuSetSenseLevel+0x14c>
    2e4c:	2e 81       	ldd	r18, Y+6	; 0x06
    2e4e:	3f 81       	ldd	r19, Y+7	; 0x07
    2e50:	22 30       	cpi	r18, 0x02	; 2
    2e52:	31 05       	cpc	r19, r1
    2e54:	2c f4       	brge	.+10     	; 0x2e60 <EXTI_enuSetSenseLevel+0x136>
    2e56:	8e 81       	ldd	r24, Y+6	; 0x06
    2e58:	9f 81       	ldd	r25, Y+7	; 0x07
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	d9 f0       	breq	.+54     	; 0x2e94 <EXTI_enuSetSenseLevel+0x16a>
    2e5e:	66 c0       	rjmp	.+204    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>
    2e60:	2e 81       	ldd	r18, Y+6	; 0x06
    2e62:	3f 81       	ldd	r19, Y+7	; 0x07
    2e64:	22 30       	cpi	r18, 0x02	; 2
    2e66:	31 05       	cpc	r19, r1
    2e68:	21 f1       	breq	.+72     	; 0x2eb2 <EXTI_enuSetSenseLevel+0x188>
    2e6a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e6c:	9f 81       	ldd	r25, Y+7	; 0x07
    2e6e:	83 30       	cpi	r24, 0x03	; 3
    2e70:	91 05       	cpc	r25, r1
    2e72:	71 f1       	breq	.+92     	; 0x2ed0 <EXTI_enuSetSenseLevel+0x1a6>
    2e74:	5b c0       	rjmp	.+182    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>
			case EXTI_ANY_lOGICALCHANGE:

				MCUCR |=   (1 << ISC10);
    2e76:	a5 e5       	ldi	r26, 0x55	; 85
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e5 e5       	ldi	r30, 0x55	; 85
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	80 81       	ld	r24, Z
    2e80:	84 60       	ori	r24, 0x04	; 4
    2e82:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    2e84:	a5 e5       	ldi	r26, 0x55	; 85
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	e5 e5       	ldi	r30, 0x55	; 85
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	80 81       	ld	r24, Z
    2e8e:	87 7f       	andi	r24, 0xF7	; 247
    2e90:	8c 93       	st	X, r24
    2e92:	4c c0       	rjmp	.+152    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_LOW_LEVEL:

				MCUCR &=  ~(1 << ISC10);
    2e94:	a5 e5       	ldi	r26, 0x55	; 85
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	e5 e5       	ldi	r30, 0x55	; 85
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	8b 7f       	andi	r24, 0xFB	; 251
    2ea0:	8c 93       	st	X, r24
				MCUCR &=  ~(1 << ISC11);
    2ea2:	a5 e5       	ldi	r26, 0x55	; 85
    2ea4:	b0 e0       	ldi	r27, 0x00	; 0
    2ea6:	e5 e5       	ldi	r30, 0x55	; 85
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	87 7f       	andi	r24, 0xF7	; 247
    2eae:	8c 93       	st	X, r24
    2eb0:	3d c0       	rjmp	.+122    	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_FALLING_EDGE:

				MCUCR &=  ~(1 << ISC10);
    2eb2:	a5 e5       	ldi	r26, 0x55	; 85
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	e5 e5       	ldi	r30, 0x55	; 85
    2eb8:	f0 e0       	ldi	r31, 0x00	; 0
    2eba:	80 81       	ld	r24, Z
    2ebc:	8b 7f       	andi	r24, 0xFB	; 251
    2ebe:	8c 93       	st	X, r24
				MCUCR |=   (1 << ISC11);
    2ec0:	a5 e5       	ldi	r26, 0x55	; 85
    2ec2:	b0 e0       	ldi	r27, 0x00	; 0
    2ec4:	e5 e5       	ldi	r30, 0x55	; 85
    2ec6:	f0 e0       	ldi	r31, 0x00	; 0
    2ec8:	80 81       	ld	r24, Z
    2eca:	88 60       	ori	r24, 0x08	; 8
    2ecc:	8c 93       	st	X, r24
    2ece:	2e c0       	rjmp	.+92     	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>

				break;

			case EXTI_RISING_EDGE:

				MCUCR |=  (1 << ISC10);
    2ed0:	a5 e5       	ldi	r26, 0x55	; 85
    2ed2:	b0 e0       	ldi	r27, 0x00	; 0
    2ed4:	e5 e5       	ldi	r30, 0x55	; 85
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	84 60       	ori	r24, 0x04	; 4
    2edc:	8c 93       	st	X, r24
				MCUCR |=  (1 << ISC11);
    2ede:	a5 e5       	ldi	r26, 0x55	; 85
    2ee0:	b0 e0       	ldi	r27, 0x00	; 0
    2ee2:	e5 e5       	ldi	r30, 0x55	; 85
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	80 81       	ld	r24, Z
    2ee8:	88 60       	ori	r24, 0x08	; 8
    2eea:	8c 93       	st	X, r24
    2eec:	1f c0       	rjmp	.+62     	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>


		case INT_NO_2:

			/**************** INT2 Sense_LEVEL ****************/
			switch(Copy_u8SenseLevel){
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	28 2f       	mov	r18, r24
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	3d 83       	std	Y+5, r19	; 0x05
    2ef6:	2c 83       	std	Y+4, r18	; 0x04
    2ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    2efa:	9d 81       	ldd	r25, Y+5	; 0x05
    2efc:	82 30       	cpi	r24, 0x02	; 2
    2efe:	91 05       	cpc	r25, r1
    2f00:	31 f0       	breq	.+12     	; 0x2f0e <EXTI_enuSetSenseLevel+0x1e4>
    2f02:	2c 81       	ldd	r18, Y+4	; 0x04
    2f04:	3d 81       	ldd	r19, Y+5	; 0x05
    2f06:	23 30       	cpi	r18, 0x03	; 3
    2f08:	31 05       	cpc	r19, r1
    2f0a:	49 f0       	breq	.+18     	; 0x2f1e <EXTI_enuSetSenseLevel+0x1f4>
    2f0c:	0f c0       	rjmp	.+30     	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>

				case EXTI_FALLING_EDGE:
					MCUCSR &= ~(1 << ISC2);
    2f0e:	a4 e5       	ldi	r26, 0x54	; 84
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e4 e5       	ldi	r30, 0x54	; 84
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	8f 7b       	andi	r24, 0xBF	; 191
    2f1a:	8c 93       	st	X, r24
    2f1c:	07 c0       	rjmp	.+14     	; 0x2f2c <EXTI_enuSetSenseLevel+0x202>

					break;

				case EXTI_RISING_EDGE:

					MCUCSR |= (1 << ISC2);
    2f1e:	a4 e5       	ldi	r26, 0x54	; 84
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	e4 e5       	ldi	r30, 0x54	; 84
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	80 64       	ori	r24, 0x40	; 64
    2f2a:	8c 93       	st	X, r24

			/**************************************************/
		}


		Local_enuErrorStatus = ERROR_STATUS_OK;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    2f30:	39 81       	ldd	r19, Y+1	; 0x01
    2f32:	3c 87       	std	Y+12, r19	; 0x0c
    2f34:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2f36:	2c 96       	adiw	r28, 0x0c	; 12
    2f38:	0f b6       	in	r0, 0x3f	; 63
    2f3a:	f8 94       	cli
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0f be       	out	0x3f, r0	; 63
    2f40:	cd bf       	out	0x3d, r28	; 61
    2f42:	cf 91       	pop	r28
    2f44:	df 91       	pop	r29
    2f46:	08 95       	ret

00002f48 <EXTI_enuSetCallBack>:


ErrorStatus_t EXTI_enuSetCallBack( void (*Copy_pfunAppFun)(void), uint8_t Copy_u8IntNumber){
    2f48:	df 93       	push	r29
    2f4a:	cf 93       	push	r28
    2f4c:	00 d0       	rcall	.+0      	; 0x2f4e <EXTI_enuSetCallBack+0x6>
    2f4e:	00 d0       	rcall	.+0      	; 0x2f50 <EXTI_enuSetCallBack+0x8>
    2f50:	0f 92       	push	r0
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	9b 83       	std	Y+3, r25	; 0x03
    2f58:	8a 83       	std	Y+2, r24	; 0x02
    2f5a:	6c 83       	std	Y+4, r22	; 0x04

	ErrorStatus_t Local_enuErrorStatus = ERROR_STATUS_FAILURE;
    2f5c:	19 82       	std	Y+1, r1	; 0x01


	if( (Copy_pfunAppFun == NULL ) ){
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	9b 81       	ldd	r25, Y+3	; 0x03
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	29 f4       	brne	.+10     	; 0x2f70 <EXTI_enuSetCallBack+0x28>


		Local_enuErrorStatus = ERROR_STATUS_NULL_POINTER;
    2f66:	83 e0       	ldi	r24, 0x03	; 3
    2f68:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	8d 83       	std	Y+5, r24	; 0x05
    2f6e:	18 c0       	rjmp	.+48     	; 0x2fa0 <EXTI_enuSetCallBack+0x58>
	}

	else if(Copy_u8IntNumber > INT_NO_2){
    2f70:	8c 81       	ldd	r24, Y+4	; 0x04
    2f72:	83 30       	cpi	r24, 0x03	; 3
    2f74:	28 f0       	brcs	.+10     	; 0x2f80 <EXTI_enuSetCallBack+0x38>

		Local_enuErrorStatus = ERROR_OUT_OF_RANGE;
    2f76:	84 e0       	ldi	r24, 0x04	; 4
    2f78:	89 83       	std	Y+1, r24	; 0x01
		return Local_enuErrorStatus;
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	8d 83       	std	Y+5, r24	; 0x05
    2f7e:	10 c0       	rjmp	.+32     	; 0x2fa0 <EXTI_enuSetCallBack+0x58>
	}

	else{
		EXTI_pfunISRFun[Copy_u8IntNumber] = Copy_pfunAppFun;
    2f80:	8c 81       	ldd	r24, Y+4	; 0x04
    2f82:	88 2f       	mov	r24, r24
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	88 0f       	add	r24, r24
    2f88:	99 1f       	adc	r25, r25
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	ee 55       	subi	r30, 0x5E	; 94
    2f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f90:	8a 81       	ldd	r24, Y+2	; 0x02
    2f92:	9b 81       	ldd	r25, Y+3	; 0x03
    2f94:	91 83       	std	Z+1, r25	; 0x01
    2f96:	80 83       	st	Z, r24
	}


	Local_enuErrorStatus = ERROR_STATUS_OK;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
    2fa0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	cf 91       	pop	r28
    2fae:	df 91       	pop	r29
    2fb0:	08 95       	ret

00002fb2 <__vector_1>:


ISR(INT0_vect){
    2fb2:	1f 92       	push	r1
    2fb4:	0f 92       	push	r0
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	0f 92       	push	r0
    2fba:	11 24       	eor	r1, r1
    2fbc:	2f 93       	push	r18
    2fbe:	3f 93       	push	r19
    2fc0:	4f 93       	push	r20
    2fc2:	5f 93       	push	r21
    2fc4:	6f 93       	push	r22
    2fc6:	7f 93       	push	r23
    2fc8:	8f 93       	push	r24
    2fca:	9f 93       	push	r25
    2fcc:	af 93       	push	r26
    2fce:	bf 93       	push	r27
    2fd0:	ef 93       	push	r30
    2fd2:	ff 93       	push	r31
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_0] != NULL){
    2fdc:	80 91 a2 01 	lds	r24, 0x01A2
    2fe0:	90 91 a3 01 	lds	r25, 0x01A3
    2fe4:	00 97       	sbiw	r24, 0x00	; 0
    2fe6:	29 f0       	breq	.+10     	; 0x2ff2 <__vector_1+0x40>
			EXTI_pfunISRFun[INT_NO_0]();
    2fe8:	e0 91 a2 01 	lds	r30, 0x01A2
    2fec:	f0 91 a3 01 	lds	r31, 0x01A3
    2ff0:	09 95       	icall
		}
}
    2ff2:	cf 91       	pop	r28
    2ff4:	df 91       	pop	r29
    2ff6:	ff 91       	pop	r31
    2ff8:	ef 91       	pop	r30
    2ffa:	bf 91       	pop	r27
    2ffc:	af 91       	pop	r26
    2ffe:	9f 91       	pop	r25
    3000:	8f 91       	pop	r24
    3002:	7f 91       	pop	r23
    3004:	6f 91       	pop	r22
    3006:	5f 91       	pop	r21
    3008:	4f 91       	pop	r20
    300a:	3f 91       	pop	r19
    300c:	2f 91       	pop	r18
    300e:	0f 90       	pop	r0
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	0f 90       	pop	r0
    3014:	1f 90       	pop	r1
    3016:	18 95       	reti

00003018 <__vector_2>:




ISR(INT1_vect){
    3018:	1f 92       	push	r1
    301a:	0f 92       	push	r0
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	0f 92       	push	r0
    3020:	11 24       	eor	r1, r1
    3022:	2f 93       	push	r18
    3024:	3f 93       	push	r19
    3026:	4f 93       	push	r20
    3028:	5f 93       	push	r21
    302a:	6f 93       	push	r22
    302c:	7f 93       	push	r23
    302e:	8f 93       	push	r24
    3030:	9f 93       	push	r25
    3032:	af 93       	push	r26
    3034:	bf 93       	push	r27
    3036:	ef 93       	push	r30
    3038:	ff 93       	push	r31
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_1] != NULL){
    3042:	80 91 a4 01 	lds	r24, 0x01A4
    3046:	90 91 a5 01 	lds	r25, 0x01A5
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	29 f0       	breq	.+10     	; 0x3058 <__vector_2+0x40>
			EXTI_pfunISRFun[INT_NO_1]();
    304e:	e0 91 a4 01 	lds	r30, 0x01A4
    3052:	f0 91 a5 01 	lds	r31, 0x01A5
    3056:	09 95       	icall
		}
}
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	ff 91       	pop	r31
    305e:	ef 91       	pop	r30
    3060:	bf 91       	pop	r27
    3062:	af 91       	pop	r26
    3064:	9f 91       	pop	r25
    3066:	8f 91       	pop	r24
    3068:	7f 91       	pop	r23
    306a:	6f 91       	pop	r22
    306c:	5f 91       	pop	r21
    306e:	4f 91       	pop	r20
    3070:	3f 91       	pop	r19
    3072:	2f 91       	pop	r18
    3074:	0f 90       	pop	r0
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	0f 90       	pop	r0
    307a:	1f 90       	pop	r1
    307c:	18 95       	reti

0000307e <__vector_3>:



ISR(INT2_vect){
    307e:	1f 92       	push	r1
    3080:	0f 92       	push	r0
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	0f 92       	push	r0
    3086:	11 24       	eor	r1, r1
    3088:	2f 93       	push	r18
    308a:	3f 93       	push	r19
    308c:	4f 93       	push	r20
    308e:	5f 93       	push	r21
    3090:	6f 93       	push	r22
    3092:	7f 93       	push	r23
    3094:	8f 93       	push	r24
    3096:	9f 93       	push	r25
    3098:	af 93       	push	r26
    309a:	bf 93       	push	r27
    309c:	ef 93       	push	r30
    309e:	ff 93       	push	r31
    30a0:	df 93       	push	r29
    30a2:	cf 93       	push	r28
    30a4:	cd b7       	in	r28, 0x3d	; 61
    30a6:	de b7       	in	r29, 0x3e	; 62

		if(EXTI_pfunISRFun[INT_NO_2] != NULL){
    30a8:	80 91 a6 01 	lds	r24, 0x01A6
    30ac:	90 91 a7 01 	lds	r25, 0x01A7
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	29 f0       	breq	.+10     	; 0x30be <__vector_3+0x40>
			EXTI_pfunISRFun[INT_NO_2]();
    30b4:	e0 91 a6 01 	lds	r30, 0x01A6
    30b8:	f0 91 a7 01 	lds	r31, 0x01A7
    30bc:	09 95       	icall
		}
}
    30be:	cf 91       	pop	r28
    30c0:	df 91       	pop	r29
    30c2:	ff 91       	pop	r31
    30c4:	ef 91       	pop	r30
    30c6:	bf 91       	pop	r27
    30c8:	af 91       	pop	r26
    30ca:	9f 91       	pop	r25
    30cc:	8f 91       	pop	r24
    30ce:	7f 91       	pop	r23
    30d0:	6f 91       	pop	r22
    30d2:	5f 91       	pop	r21
    30d4:	4f 91       	pop	r20
    30d6:	3f 91       	pop	r19
    30d8:	2f 91       	pop	r18
    30da:	0f 90       	pop	r0
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	0f 90       	pop	r0
    30e0:	1f 90       	pop	r1
    30e2:	18 95       	reti

000030e4 <DIO_enuInit>:



///********************************** Module intialization **********************************/
ErrorStatus_t DIO_enuInit(void)
{
    30e4:	df 93       	push	r29
    30e6:	cf 93       	push	r28
    30e8:	0f 92       	push	r0
    30ea:	cd b7       	in	r28, 0x3d	; 61
    30ec:	de b7       	in	r29, 0x3e	; 62
    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    30ee:	19 82       	std	Y+1, r1	; 0x01

	/***************** Group A *****************/
	DDRA = CONC(DIO_u8PA0_DIR, DIO_u8PA1_DIR,
    30f0:	ea e3       	ldi	r30, 0x3A	; 58
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 ef       	ldi	r24, 0xF0	; 240
    30f6:	80 83       	st	Z, r24
				DIO_u8PA2_DIR, DIO_u8PA3_DIR,
				DIO_u8PA4_DIR, DIO_u8PA5_DIR,
				DIO_u8PA6_DIR, DIO_u8PA7_DIR);

	PORTA = CONC(DIO_u8PA0_VALUE, DIO_u8PA1_VALUE,
    30f8:	eb e3       	ldi	r30, 0x3B	; 59
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	83 ec       	ldi	r24, 0xC3	; 195
    30fe:	80 83       	st	Z, r24
				DIO_u8PA6_VALUE, DIO_u8PA7_VALUE);
	/******************************************/


	/***************** Group B *****************/
	DDRB = CONC(DIO_u8PB0_DIR, DIO_u8PB1_DIR,
    3100:	e7 e3       	ldi	r30, 0x37	; 55
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 ef       	ldi	r24, 0xF0	; 240
    3106:	80 83       	st	Z, r24
				DIO_u8PB2_DIR, DIO_u8PB3_DIR,
				DIO_u8PB4_DIR, DIO_u8PB5_DIR,
				DIO_u8PB6_DIR, DIO_u8PB7_DIR);

	PORTB = CONC(DIO_u8PB0_VALUE, DIO_u8PB1_VALUE,
    3108:	e8 e3       	ldi	r30, 0x38	; 56
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	83 ec       	ldi	r24, 0xC3	; 195
    310e:	80 83       	st	Z, r24
				DIO_u8PB6_VALUE, DIO_u8PB7_VALUE);
	/******************************************/


	/***************** Group C *****************/
	DDRC = CONC(DIO_u8PC0_DIR, DIO_u8PC1_DIR,
    3110:	e4 e3       	ldi	r30, 0x34	; 52
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 ef       	ldi	r24, 0xF0	; 240
    3116:	80 83       	st	Z, r24
				DIO_u8PC2_DIR, DIO_u8PC3_DIR,
				DIO_u8PC4_DIR, DIO_u8PC5_DIR,
				DIO_u8PC6_DIR, DIO_u8PC7_DIR);

	PORTC = CONC(DIO_u8PC0_VALUE, DIO_u8PC1_VALUE,
    3118:	e5 e3       	ldi	r30, 0x35	; 53
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	83 ec       	ldi	r24, 0xC3	; 195
    311e:	80 83       	st	Z, r24
				DIO_u8PC6_VALUE, DIO_u8PC7_VALUE);
	/******************************************/


	/***************** Group D *****************/
	DDRD = CONC(DIO_u8PD0_DIR, DIO_u8PD1_DIR,
    3120:	e1 e3       	ldi	r30, 0x31	; 49
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	80 ef       	ldi	r24, 0xF0	; 240
    3126:	80 83       	st	Z, r24
				DIO_u8PD2_DIR, DIO_u8PD3_DIR,
				DIO_u8PD4_DIR, DIO_u8PD5_DIR,
				DIO_u8PD6_DIR, DIO_u8PD7_DIR);

	PORTD = CONC(DIO_u8PD0_VALUE, DIO_u8PD1_VALUE,
    3128:	e2 e3       	ldi	r30, 0x32	; 50
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	83 ec       	ldi	r24, 0xC3	; 195
    312e:	80 83       	st	Z, r24
	/******************************************/
	
	//! (Now we either check if values are set or not ) 


    return Local_enu_ErrorState;
    3130:	89 81       	ldd	r24, Y+1	; 0x01
}
    3132:	0f 90       	pop	r0
    3134:	cf 91       	pop	r28
    3136:	df 91       	pop	r29
    3138:	08 95       	ret

0000313a <DIO_enuSetPinDirection>:
///********************************** Control Pin by Pin **********************************/
// 1. set pin as output or output
ErrorStatus_t DIO_enuSetPinDirection(
	uint8_t Copy_u8PortID,
	uint8_t Copy_u8PinID,
	uint8_t Copy_u8Direction){
    313a:	df 93       	push	r29
    313c:	cf 93       	push	r28
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	27 97       	sbiw	r28, 0x07	; 7
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	f8 94       	cli
    3148:	de bf       	out	0x3e, r29	; 62
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	8a 83       	std	Y+2, r24	; 0x02
    3150:	6b 83       	std	Y+3, r22	; 0x03
    3152:	4c 83       	std	Y+4, r20	; 0x04

	
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3154:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Direction <= DIO_u8OUTPUT){
    3156:	8a 81       	ldd	r24, Y+2	; 0x02
    3158:	84 30       	cpi	r24, 0x04	; 4
    315a:	08 f0       	brcs	.+2      	; 0x315e <DIO_enuSetPinDirection+0x24>
    315c:	de c0       	rjmp	.+444    	; 0x331a <DIO_enuSetPinDirection+0x1e0>
    315e:	8b 81       	ldd	r24, Y+3	; 0x03
    3160:	88 30       	cpi	r24, 0x08	; 8
    3162:	08 f0       	brcs	.+2      	; 0x3166 <DIO_enuSetPinDirection+0x2c>
    3164:	da c0       	rjmp	.+436    	; 0x331a <DIO_enuSetPinDirection+0x1e0>
    3166:	8c 81       	ldd	r24, Y+4	; 0x04
    3168:	82 30       	cpi	r24, 0x02	; 2
    316a:	08 f0       	brcs	.+2      	; 0x316e <DIO_enuSetPinDirection+0x34>
    316c:	d6 c0       	rjmp	.+428    	; 0x331a <DIO_enuSetPinDirection+0x1e0>

		switch(Copy_u8PortID){
    316e:	8a 81       	ldd	r24, Y+2	; 0x02
    3170:	28 2f       	mov	r18, r24
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	3f 83       	std	Y+7, r19	; 0x07
    3176:	2e 83       	std	Y+6, r18	; 0x06
    3178:	8e 81       	ldd	r24, Y+6	; 0x06
    317a:	9f 81       	ldd	r25, Y+7	; 0x07
    317c:	81 30       	cpi	r24, 0x01	; 1
    317e:	91 05       	cpc	r25, r1
    3180:	09 f4       	brne	.+2      	; 0x3184 <DIO_enuSetPinDirection+0x4a>
    3182:	43 c0       	rjmp	.+134    	; 0x320a <DIO_enuSetPinDirection+0xd0>
    3184:	2e 81       	ldd	r18, Y+6	; 0x06
    3186:	3f 81       	ldd	r19, Y+7	; 0x07
    3188:	22 30       	cpi	r18, 0x02	; 2
    318a:	31 05       	cpc	r19, r1
    318c:	2c f4       	brge	.+10     	; 0x3198 <DIO_enuSetPinDirection+0x5e>
    318e:	8e 81       	ldd	r24, Y+6	; 0x06
    3190:	9f 81       	ldd	r25, Y+7	; 0x07
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	71 f0       	breq	.+28     	; 0x31b2 <DIO_enuSetPinDirection+0x78>
    3196:	bc c0       	rjmp	.+376    	; 0x3310 <DIO_enuSetPinDirection+0x1d6>
    3198:	2e 81       	ldd	r18, Y+6	; 0x06
    319a:	3f 81       	ldd	r19, Y+7	; 0x07
    319c:	22 30       	cpi	r18, 0x02	; 2
    319e:	31 05       	cpc	r19, r1
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <DIO_enuSetPinDirection+0x6a>
    31a2:	5f c0       	rjmp	.+190    	; 0x3262 <DIO_enuSetPinDirection+0x128>
    31a4:	8e 81       	ldd	r24, Y+6	; 0x06
    31a6:	9f 81       	ldd	r25, Y+7	; 0x07
    31a8:	83 30       	cpi	r24, 0x03	; 3
    31aa:	91 05       	cpc	r25, r1
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <DIO_enuSetPinDirection+0x76>
    31ae:	85 c0       	rjmp	.+266    	; 0x32ba <DIO_enuSetPinDirection+0x180>
    31b0:	af c0       	rjmp	.+350    	; 0x3310 <DIO_enuSetPinDirection+0x1d6>
			case DIO_u8PortA:
				
				if(Copy_u8Direction == DIO_u8OUTPUT){
    31b2:	8c 81       	ldd	r24, Y+4	; 0x04
    31b4:	81 30       	cpi	r24, 0x01	; 1
    31b6:	a1 f4       	brne	.+40     	; 0x31e0 <DIO_enuSetPinDirection+0xa6>
					SET_BIT(DDRA, Copy_u8PinID);
    31b8:	aa e3       	ldi	r26, 0x3A	; 58
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	ea e3       	ldi	r30, 0x3A	; 58
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	48 2f       	mov	r20, r24
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	28 2f       	mov	r18, r24
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	02 2e       	mov	r0, r18
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <DIO_enuSetPinDirection+0x9c>
    31d2:	88 0f       	add	r24, r24
    31d4:	99 1f       	adc	r25, r25
    31d6:	0a 94       	dec	r0
    31d8:	e2 f7       	brpl	.-8      	; 0x31d2 <DIO_enuSetPinDirection+0x98>
    31da:	84 2b       	or	r24, r20
    31dc:	8c 93       	st	X, r24
    31de:	98 c0       	rjmp	.+304    	; 0x3310 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRA, Copy_u8PinID);
    31e0:	aa e3       	ldi	r26, 0x3A	; 58
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	ea e3       	ldi	r30, 0x3A	; 58
    31e6:	f0 e0       	ldi	r31, 0x00	; 0
    31e8:	80 81       	ld	r24, Z
    31ea:	48 2f       	mov	r20, r24
    31ec:	8b 81       	ldd	r24, Y+3	; 0x03
    31ee:	28 2f       	mov	r18, r24
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	02 2e       	mov	r0, r18
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <DIO_enuSetPinDirection+0xc4>
    31fa:	88 0f       	add	r24, r24
    31fc:	99 1f       	adc	r25, r25
    31fe:	0a 94       	dec	r0
    3200:	e2 f7       	brpl	.-8      	; 0x31fa <DIO_enuSetPinDirection+0xc0>
    3202:	80 95       	com	r24
    3204:	84 23       	and	r24, r20
    3206:	8c 93       	st	X, r24
    3208:	83 c0       	rjmp	.+262    	; 0x3310 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortB:
			
				if(Copy_u8Direction == DIO_u8OUTPUT){
    320a:	8c 81       	ldd	r24, Y+4	; 0x04
    320c:	81 30       	cpi	r24, 0x01	; 1
    320e:	a1 f4       	brne	.+40     	; 0x3238 <DIO_enuSetPinDirection+0xfe>
					SET_BIT(DDRB, Copy_u8PinID);
    3210:	a7 e3       	ldi	r26, 0x37	; 55
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	e7 e3       	ldi	r30, 0x37	; 55
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	48 2f       	mov	r20, r24
    321c:	8b 81       	ldd	r24, Y+3	; 0x03
    321e:	28 2f       	mov	r18, r24
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	02 2e       	mov	r0, r18
    3228:	02 c0       	rjmp	.+4      	; 0x322e <DIO_enuSetPinDirection+0xf4>
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	0a 94       	dec	r0
    3230:	e2 f7       	brpl	.-8      	; 0x322a <DIO_enuSetPinDirection+0xf0>
    3232:	84 2b       	or	r24, r20
    3234:	8c 93       	st	X, r24
    3236:	6c c0       	rjmp	.+216    	; 0x3310 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRB, Copy_u8PinID);
    3238:	a7 e3       	ldi	r26, 0x37	; 55
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e7 e3       	ldi	r30, 0x37	; 55
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	48 2f       	mov	r20, r24
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	28 2f       	mov	r18, r24
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	02 2e       	mov	r0, r18
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <DIO_enuSetPinDirection+0x11c>
    3252:	88 0f       	add	r24, r24
    3254:	99 1f       	adc	r25, r25
    3256:	0a 94       	dec	r0
    3258:	e2 f7       	brpl	.-8      	; 0x3252 <DIO_enuSetPinDirection+0x118>
    325a:	80 95       	com	r24
    325c:	84 23       	and	r24, r20
    325e:	8c 93       	st	X, r24
    3260:	57 c0       	rjmp	.+174    	; 0x3310 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortC:

				if(Copy_u8Direction == DIO_u8OUTPUT){
    3262:	8c 81       	ldd	r24, Y+4	; 0x04
    3264:	81 30       	cpi	r24, 0x01	; 1
    3266:	a1 f4       	brne	.+40     	; 0x3290 <DIO_enuSetPinDirection+0x156>
					SET_BIT(DDRC, Copy_u8PinID);
    3268:	a4 e3       	ldi	r26, 0x34	; 52
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	e4 e3       	ldi	r30, 0x34	; 52
    326e:	f0 e0       	ldi	r31, 0x00	; 0
    3270:	80 81       	ld	r24, Z
    3272:	48 2f       	mov	r20, r24
    3274:	8b 81       	ldd	r24, Y+3	; 0x03
    3276:	28 2f       	mov	r18, r24
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	02 2e       	mov	r0, r18
    3280:	02 c0       	rjmp	.+4      	; 0x3286 <DIO_enuSetPinDirection+0x14c>
    3282:	88 0f       	add	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	0a 94       	dec	r0
    3288:	e2 f7       	brpl	.-8      	; 0x3282 <DIO_enuSetPinDirection+0x148>
    328a:	84 2b       	or	r24, r20
    328c:	8c 93       	st	X, r24
    328e:	40 c0       	rjmp	.+128    	; 0x3310 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRC, Copy_u8PinID);
    3290:	a4 e3       	ldi	r26, 0x34	; 52
    3292:	b0 e0       	ldi	r27, 0x00	; 0
    3294:	e4 e3       	ldi	r30, 0x34	; 52
    3296:	f0 e0       	ldi	r31, 0x00	; 0
    3298:	80 81       	ld	r24, Z
    329a:	48 2f       	mov	r20, r24
    329c:	8b 81       	ldd	r24, Y+3	; 0x03
    329e:	28 2f       	mov	r18, r24
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	02 2e       	mov	r0, r18
    32a8:	02 c0       	rjmp	.+4      	; 0x32ae <DIO_enuSetPinDirection+0x174>
    32aa:	88 0f       	add	r24, r24
    32ac:	99 1f       	adc	r25, r25
    32ae:	0a 94       	dec	r0
    32b0:	e2 f7       	brpl	.-8      	; 0x32aa <DIO_enuSetPinDirection+0x170>
    32b2:	80 95       	com	r24
    32b4:	84 23       	and	r24, r20
    32b6:	8c 93       	st	X, r24
    32b8:	2b c0       	rjmp	.+86     	; 0x3310 <DIO_enuSetPinDirection+0x1d6>

			break;

			case DIO_u8PortD:
		
				if(Copy_u8Direction == DIO_u8OUTPUT){
    32ba:	8c 81       	ldd	r24, Y+4	; 0x04
    32bc:	81 30       	cpi	r24, 0x01	; 1
    32be:	a1 f4       	brne	.+40     	; 0x32e8 <DIO_enuSetPinDirection+0x1ae>
					SET_BIT(DDRD, Copy_u8PinID);
    32c0:	a1 e3       	ldi	r26, 0x31	; 49
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	e1 e3       	ldi	r30, 0x31	; 49
    32c6:	f0 e0       	ldi	r31, 0x00	; 0
    32c8:	80 81       	ld	r24, Z
    32ca:	48 2f       	mov	r20, r24
    32cc:	8b 81       	ldd	r24, Y+3	; 0x03
    32ce:	28 2f       	mov	r18, r24
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	02 2e       	mov	r0, r18
    32d8:	02 c0       	rjmp	.+4      	; 0x32de <DIO_enuSetPinDirection+0x1a4>
    32da:	88 0f       	add	r24, r24
    32dc:	99 1f       	adc	r25, r25
    32de:	0a 94       	dec	r0
    32e0:	e2 f7       	brpl	.-8      	; 0x32da <DIO_enuSetPinDirection+0x1a0>
    32e2:	84 2b       	or	r24, r20
    32e4:	8c 93       	st	X, r24
    32e6:	14 c0       	rjmp	.+40     	; 0x3310 <DIO_enuSetPinDirection+0x1d6>
				}else{
					
					/* setting pin as input */

					//! input pullup-float is not cacluated
					CLR_BIT(DDRD, Copy_u8PinID);
    32e8:	a1 e3       	ldi	r26, 0x31	; 49
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	e1 e3       	ldi	r30, 0x31	; 49
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	48 2f       	mov	r20, r24
    32f4:	8b 81       	ldd	r24, Y+3	; 0x03
    32f6:	28 2f       	mov	r18, r24
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	02 2e       	mov	r0, r18
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <DIO_enuSetPinDirection+0x1cc>
    3302:	88 0f       	add	r24, r24
    3304:	99 1f       	adc	r25, r25
    3306:	0a 94       	dec	r0
    3308:	e2 f7       	brpl	.-8      	; 0x3302 <DIO_enuSetPinDirection+0x1c8>
    330a:	80 95       	com	r24
    330c:	84 23       	and	r24, r20
    330e:	8c 93       	st	X, r24
				}

		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	89 83       	std	Y+1, r24	; 0x01
	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
	}
	
	return Local_enu_ErrorState;
    3314:	99 81       	ldd	r25, Y+1	; 0x01
    3316:	9d 83       	std	Y+5, r25	; 0x05
    3318:	02 c0       	rjmp	.+4      	; 0x331e <DIO_enuSetPinDirection+0x1e4>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		// one of arguments are not valid
		return Local_enu_ErrorState;
    331a:	29 81       	ldd	r18, Y+1	; 0x01
    331c:	2d 83       	std	Y+5, r18	; 0x05
    331e:	8d 81       	ldd	r24, Y+5	; 0x05
	}
	
	return Local_enu_ErrorState;
   }
    3320:	27 96       	adiw	r28, 0x07	; 7
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <DIO_enuSetPinValue>:

// 2. set value for pin as high or low 
ErrorStatus_t DIO_enuSetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t Copy_u8Value){
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	27 97       	sbiw	r28, 0x07	; 7
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	cd bf       	out	0x3d, r28	; 61
    3346:	8a 83       	std	Y+2, r24	; 0x02
    3348:	6b 83       	std	Y+3, r22	; 0x03
    334a:	4c 83       	std	Y+4, r20	; 0x04


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    334c:	19 82       	std	Y+1, r1	; 0x01


	// DIO_u8PULLUP - 1
	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7 && Copy_u8Value <= DIO_u8PULLUP){
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	84 30       	cpi	r24, 0x04	; 4
    3352:	08 f0       	brcs	.+2      	; 0x3356 <DIO_enuSetPinValue+0x24>
    3354:	de c0       	rjmp	.+444    	; 0x3512 <DIO_enuSetPinValue+0x1e0>
    3356:	8b 81       	ldd	r24, Y+3	; 0x03
    3358:	88 30       	cpi	r24, 0x08	; 8
    335a:	08 f0       	brcs	.+2      	; 0x335e <DIO_enuSetPinValue+0x2c>
    335c:	da c0       	rjmp	.+436    	; 0x3512 <DIO_enuSetPinValue+0x1e0>
    335e:	8c 81       	ldd	r24, Y+4	; 0x04
    3360:	82 30       	cpi	r24, 0x02	; 2
    3362:	08 f0       	brcs	.+2      	; 0x3366 <DIO_enuSetPinValue+0x34>
    3364:	d6 c0       	rjmp	.+428    	; 0x3512 <DIO_enuSetPinValue+0x1e0>
		
		switch (Copy_u8PortID){
    3366:	8a 81       	ldd	r24, Y+2	; 0x02
    3368:	28 2f       	mov	r18, r24
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	3f 83       	std	Y+7, r19	; 0x07
    336e:	2e 83       	std	Y+6, r18	; 0x06
    3370:	8e 81       	ldd	r24, Y+6	; 0x06
    3372:	9f 81       	ldd	r25, Y+7	; 0x07
    3374:	81 30       	cpi	r24, 0x01	; 1
    3376:	91 05       	cpc	r25, r1
    3378:	09 f4       	brne	.+2      	; 0x337c <DIO_enuSetPinValue+0x4a>
    337a:	43 c0       	rjmp	.+134    	; 0x3402 <DIO_enuSetPinValue+0xd0>
    337c:	2e 81       	ldd	r18, Y+6	; 0x06
    337e:	3f 81       	ldd	r19, Y+7	; 0x07
    3380:	22 30       	cpi	r18, 0x02	; 2
    3382:	31 05       	cpc	r19, r1
    3384:	2c f4       	brge	.+10     	; 0x3390 <DIO_enuSetPinValue+0x5e>
    3386:	8e 81       	ldd	r24, Y+6	; 0x06
    3388:	9f 81       	ldd	r25, Y+7	; 0x07
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	71 f0       	breq	.+28     	; 0x33aa <DIO_enuSetPinValue+0x78>
    338e:	bc c0       	rjmp	.+376    	; 0x3508 <DIO_enuSetPinValue+0x1d6>
    3390:	2e 81       	ldd	r18, Y+6	; 0x06
    3392:	3f 81       	ldd	r19, Y+7	; 0x07
    3394:	22 30       	cpi	r18, 0x02	; 2
    3396:	31 05       	cpc	r19, r1
    3398:	09 f4       	brne	.+2      	; 0x339c <DIO_enuSetPinValue+0x6a>
    339a:	5f c0       	rjmp	.+190    	; 0x345a <DIO_enuSetPinValue+0x128>
    339c:	8e 81       	ldd	r24, Y+6	; 0x06
    339e:	9f 81       	ldd	r25, Y+7	; 0x07
    33a0:	83 30       	cpi	r24, 0x03	; 3
    33a2:	91 05       	cpc	r25, r1
    33a4:	09 f4       	brne	.+2      	; 0x33a8 <DIO_enuSetPinValue+0x76>
    33a6:	85 c0       	rjmp	.+266    	; 0x34b2 <DIO_enuSetPinValue+0x180>
    33a8:	af c0       	rjmp	.+350    	; 0x3508 <DIO_enuSetPinValue+0x1d6>
		
			case DIO_u8PortA:
				if(Copy_u8Value){
    33aa:	8c 81       	ldd	r24, Y+4	; 0x04
    33ac:	88 23       	and	r24, r24
    33ae:	a1 f0       	breq	.+40     	; 0x33d8 <DIO_enuSetPinValue+0xa6>

					// if the value is set to HIGH
					SET_BIT(PORTA, Copy_u8PinID);
    33b0:	ab e3       	ldi	r26, 0x3B	; 59
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	eb e3       	ldi	r30, 0x3B	; 59
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	48 2f       	mov	r20, r24
    33bc:	8b 81       	ldd	r24, Y+3	; 0x03
    33be:	28 2f       	mov	r18, r24
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	02 2e       	mov	r0, r18
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <DIO_enuSetPinValue+0x9c>
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	0a 94       	dec	r0
    33d0:	e2 f7       	brpl	.-8      	; 0x33ca <DIO_enuSetPinValue+0x98>
    33d2:	84 2b       	or	r24, r20
    33d4:	8c 93       	st	X, r24
    33d6:	98 c0       	rjmp	.+304    	; 0x3508 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTA, Copy_u8PinID);
    33d8:	ab e3       	ldi	r26, 0x3B	; 59
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	eb e3       	ldi	r30, 0x3B	; 59
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	48 2f       	mov	r20, r24
    33e4:	8b 81       	ldd	r24, Y+3	; 0x03
    33e6:	28 2f       	mov	r18, r24
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	02 2e       	mov	r0, r18
    33f0:	02 c0       	rjmp	.+4      	; 0x33f6 <DIO_enuSetPinValue+0xc4>
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	0a 94       	dec	r0
    33f8:	e2 f7       	brpl	.-8      	; 0x33f2 <DIO_enuSetPinValue+0xc0>
    33fa:	80 95       	com	r24
    33fc:	84 23       	and	r24, r20
    33fe:	8c 93       	st	X, r24
    3400:	83 c0       	rjmp	.+262    	; 0x3508 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			
			case DIO_u8PortB:
				if(Copy_u8Value){
    3402:	8c 81       	ldd	r24, Y+4	; 0x04
    3404:	88 23       	and	r24, r24
    3406:	a1 f0       	breq	.+40     	; 0x3430 <DIO_enuSetPinValue+0xfe>

					// if the value is set to HIGH
					SET_BIT(PORTB, Copy_u8PinID);
    3408:	a8 e3       	ldi	r26, 0x38	; 56
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	e8 e3       	ldi	r30, 0x38	; 56
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	80 81       	ld	r24, Z
    3412:	48 2f       	mov	r20, r24
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	28 2f       	mov	r18, r24
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	02 2e       	mov	r0, r18
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <DIO_enuSetPinValue+0xf4>
    3422:	88 0f       	add	r24, r24
    3424:	99 1f       	adc	r25, r25
    3426:	0a 94       	dec	r0
    3428:	e2 f7       	brpl	.-8      	; 0x3422 <DIO_enuSetPinValue+0xf0>
    342a:	84 2b       	or	r24, r20
    342c:	8c 93       	st	X, r24
    342e:	6c c0       	rjmp	.+216    	; 0x3508 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTB, Copy_u8PinID);
    3430:	a8 e3       	ldi	r26, 0x38	; 56
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	e8 e3       	ldi	r30, 0x38	; 56
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	48 2f       	mov	r20, r24
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	28 2f       	mov	r18, r24
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	02 2e       	mov	r0, r18
    3448:	02 c0       	rjmp	.+4      	; 0x344e <DIO_enuSetPinValue+0x11c>
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	0a 94       	dec	r0
    3450:	e2 f7       	brpl	.-8      	; 0x344a <DIO_enuSetPinValue+0x118>
    3452:	80 95       	com	r24
    3454:	84 23       	and	r24, r20
    3456:	8c 93       	st	X, r24
    3458:	57 c0       	rjmp	.+174    	; 0x3508 <DIO_enuSetPinValue+0x1d6>
				}	
			
			break;

			case DIO_u8PortC:
				if(Copy_u8Value){
    345a:	8c 81       	ldd	r24, Y+4	; 0x04
    345c:	88 23       	and	r24, r24
    345e:	a1 f0       	breq	.+40     	; 0x3488 <DIO_enuSetPinValue+0x156>

					// if the value is set to HIGH
					SET_BIT(PORTC, Copy_u8PinID);
    3460:	a5 e3       	ldi	r26, 0x35	; 53
    3462:	b0 e0       	ldi	r27, 0x00	; 0
    3464:	e5 e3       	ldi	r30, 0x35	; 53
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	80 81       	ld	r24, Z
    346a:	48 2f       	mov	r20, r24
    346c:	8b 81       	ldd	r24, Y+3	; 0x03
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	02 2e       	mov	r0, r18
    3478:	02 c0       	rjmp	.+4      	; 0x347e <DIO_enuSetPinValue+0x14c>
    347a:	88 0f       	add	r24, r24
    347c:	99 1f       	adc	r25, r25
    347e:	0a 94       	dec	r0
    3480:	e2 f7       	brpl	.-8      	; 0x347a <DIO_enuSetPinValue+0x148>
    3482:	84 2b       	or	r24, r20
    3484:	8c 93       	st	X, r24
    3486:	40 c0       	rjmp	.+128    	; 0x3508 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTC, Copy_u8PinID);
    3488:	a5 e3       	ldi	r26, 0x35	; 53
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	e5 e3       	ldi	r30, 0x35	; 53
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	48 2f       	mov	r20, r24
    3494:	8b 81       	ldd	r24, Y+3	; 0x03
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	02 2e       	mov	r0, r18
    34a0:	02 c0       	rjmp	.+4      	; 0x34a6 <DIO_enuSetPinValue+0x174>
    34a2:	88 0f       	add	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	0a 94       	dec	r0
    34a8:	e2 f7       	brpl	.-8      	; 0x34a2 <DIO_enuSetPinValue+0x170>
    34aa:	80 95       	com	r24
    34ac:	84 23       	and	r24, r20
    34ae:	8c 93       	st	X, r24
    34b0:	2b c0       	rjmp	.+86     	; 0x3508 <DIO_enuSetPinValue+0x1d6>
				}	

			break;
			case DIO_u8PortD:
				if(Copy_u8Value){
    34b2:	8c 81       	ldd	r24, Y+4	; 0x04
    34b4:	88 23       	and	r24, r24
    34b6:	a1 f0       	breq	.+40     	; 0x34e0 <DIO_enuSetPinValue+0x1ae>

					// if the value is set to HIGH
					SET_BIT(PORTD, Copy_u8PinID);
    34b8:	a2 e3       	ldi	r26, 0x32	; 50
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	e2 e3       	ldi	r30, 0x32	; 50
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	80 81       	ld	r24, Z
    34c2:	48 2f       	mov	r20, r24
    34c4:	8b 81       	ldd	r24, Y+3	; 0x03
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	02 2e       	mov	r0, r18
    34d0:	02 c0       	rjmp	.+4      	; 0x34d6 <DIO_enuSetPinValue+0x1a4>
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	0a 94       	dec	r0
    34d8:	e2 f7       	brpl	.-8      	; 0x34d2 <DIO_enuSetPinValue+0x1a0>
    34da:	84 2b       	or	r24, r20
    34dc:	8c 93       	st	X, r24
    34de:	14 c0       	rjmp	.+40     	; 0x3508 <DIO_enuSetPinValue+0x1d6>
				}else{
					CLR_BIT(PORTD, Copy_u8PinID);
    34e0:	a2 e3       	ldi	r26, 0x32	; 50
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e2 e3       	ldi	r30, 0x32	; 50
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	48 2f       	mov	r20, r24
    34ec:	8b 81       	ldd	r24, Y+3	; 0x03
    34ee:	28 2f       	mov	r18, r24
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	02 2e       	mov	r0, r18
    34f8:	02 c0       	rjmp	.+4      	; 0x34fe <DIO_enuSetPinValue+0x1cc>
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	0a 94       	dec	r0
    3500:	e2 f7       	brpl	.-8      	; 0x34fa <DIO_enuSetPinValue+0x1c8>
    3502:	80 95       	com	r24
    3504:	84 23       	and	r24, r20
    3506:	8c 93       	st	X, r24
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	89 83       	std	Y+1, r24	; 0x01

    }else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    350c:	99 81       	ldd	r25, Y+1	; 0x01
    350e:	9d 83       	std	Y+5, r25	; 0x05
    3510:	02 c0       	rjmp	.+4      	; 0x3516 <DIO_enuSetPinValue+0x1e4>
				}
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

    }else{
		return Local_enu_ErrorState;
    3512:	29 81       	ldd	r18, Y+1	; 0x01
    3514:	2d 83       	std	Y+5, r18	; 0x05
    3516:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enu_ErrorState;
   }
    3518:	27 96       	adiw	r28, 0x07	; 7
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret

0000352a <DIO_enuGetPinValue>:

// 3. read pin value 
ErrorStatus_t DIO_enuGetPinValue(
   uint8_t Copy_u8PortID,
   uint8_t Copy_u8PinID,
   uint8_t *Copy_pu8Value){
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	28 97       	sbiw	r28, 0x08	; 8
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	8a 83       	std	Y+2, r24	; 0x02
    3540:	6b 83       	std	Y+3, r22	; 0x03
    3542:	5d 83       	std	Y+5, r21	; 0x05
    3544:	4c 83       	std	Y+4, r20	; 0x04

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3546:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_pu8Value == NULL){
    3548:	8c 81       	ldd	r24, Y+4	; 0x04
    354a:	9d 81       	ldd	r25, Y+5	; 0x05
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	29 f4       	brne	.+10     	; 0x355a <DIO_enuGetPinValue+0x30>

		Local_enu_ErrorState = ERROR_STATUS_NULL_POINTER;
    3550:	83 e0       	ldi	r24, 0x03	; 3
    3552:	89 83       	std	Y+1, r24	; 0x01
		return Local_enu_ErrorState;
    3554:	29 81       	ldd	r18, Y+1	; 0x01
    3556:	28 87       	std	Y+8, r18	; 0x08
    3558:	7f c0       	rjmp	.+254    	; 0x3658 <DIO_enuGetPinValue+0x12e>
	}


	else if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	84 30       	cpi	r24, 0x04	; 4
    355e:	08 f0       	brcs	.+2      	; 0x3562 <DIO_enuGetPinValue+0x38>
    3560:	79 c0       	rjmp	.+242    	; 0x3654 <DIO_enuGetPinValue+0x12a>
    3562:	8b 81       	ldd	r24, Y+3	; 0x03
    3564:	88 30       	cpi	r24, 0x08	; 8
    3566:	08 f0       	brcs	.+2      	; 0x356a <DIO_enuGetPinValue+0x40>
    3568:	75 c0       	rjmp	.+234    	; 0x3654 <DIO_enuGetPinValue+0x12a>

		switch(Copy_u8PortID){
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	48 2f       	mov	r20, r24
    356e:	50 e0       	ldi	r21, 0x00	; 0
    3570:	5f 83       	std	Y+7, r21	; 0x07
    3572:	4e 83       	std	Y+6, r20	; 0x06
    3574:	8e 81       	ldd	r24, Y+6	; 0x06
    3576:	9f 81       	ldd	r25, Y+7	; 0x07
    3578:	81 30       	cpi	r24, 0x01	; 1
    357a:	91 05       	cpc	r25, r1
    357c:	59 f1       	breq	.+86     	; 0x35d4 <DIO_enuGetPinValue+0xaa>
    357e:	2e 81       	ldd	r18, Y+6	; 0x06
    3580:	3f 81       	ldd	r19, Y+7	; 0x07
    3582:	22 30       	cpi	r18, 0x02	; 2
    3584:	31 05       	cpc	r19, r1
    3586:	34 f4       	brge	.+12     	; 0x3594 <DIO_enuGetPinValue+0x6a>
    3588:	4e 81       	ldd	r20, Y+6	; 0x06
    358a:	5f 81       	ldd	r21, Y+7	; 0x07
    358c:	41 15       	cp	r20, r1
    358e:	51 05       	cpc	r21, r1
    3590:	69 f0       	breq	.+26     	; 0x35ac <DIO_enuGetPinValue+0x82>
    3592:	5b c0       	rjmp	.+182    	; 0x364a <DIO_enuGetPinValue+0x120>
    3594:	8e 81       	ldd	r24, Y+6	; 0x06
    3596:	9f 81       	ldd	r25, Y+7	; 0x07
    3598:	82 30       	cpi	r24, 0x02	; 2
    359a:	91 05       	cpc	r25, r1
    359c:	79 f1       	breq	.+94     	; 0x35fc <DIO_enuGetPinValue+0xd2>
    359e:	2e 81       	ldd	r18, Y+6	; 0x06
    35a0:	3f 81       	ldd	r19, Y+7	; 0x07
    35a2:	23 30       	cpi	r18, 0x03	; 3
    35a4:	31 05       	cpc	r19, r1
    35a6:	09 f4       	brne	.+2      	; 0x35aa <DIO_enuGetPinValue+0x80>
    35a8:	3d c0       	rjmp	.+122    	; 0x3624 <DIO_enuGetPinValue+0xfa>
    35aa:	4f c0       	rjmp	.+158    	; 0x364a <DIO_enuGetPinValue+0x120>
			case DIO_u8PortA:
				*Copy_pu8Value = GET_BIT(PINA, Copy_u8PinID);
    35ac:	e9 e3       	ldi	r30, 0x39	; 57
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	28 2f       	mov	r18, r24
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	8b 81       	ldd	r24, Y+3	; 0x03
    35b8:	88 2f       	mov	r24, r24
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	a9 01       	movw	r20, r18
    35be:	02 c0       	rjmp	.+4      	; 0x35c4 <DIO_enuGetPinValue+0x9a>
    35c0:	55 95       	asr	r21
    35c2:	47 95       	ror	r20
    35c4:	8a 95       	dec	r24
    35c6:	e2 f7       	brpl	.-8      	; 0x35c0 <DIO_enuGetPinValue+0x96>
    35c8:	ca 01       	movw	r24, r20
    35ca:	81 70       	andi	r24, 0x01	; 1
    35cc:	ec 81       	ldd	r30, Y+4	; 0x04
    35ce:	fd 81       	ldd	r31, Y+5	; 0x05
    35d0:	80 83       	st	Z, r24
    35d2:	3b c0       	rjmp	.+118    	; 0x364a <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortB:
				*Copy_pu8Value = GET_BIT(PINB, Copy_u8PinID);
    35d4:	e6 e3       	ldi	r30, 0x36	; 54
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	80 81       	ld	r24, Z
    35da:	28 2f       	mov	r18, r24
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	88 2f       	mov	r24, r24
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	a9 01       	movw	r20, r18
    35e6:	02 c0       	rjmp	.+4      	; 0x35ec <DIO_enuGetPinValue+0xc2>
    35e8:	55 95       	asr	r21
    35ea:	47 95       	ror	r20
    35ec:	8a 95       	dec	r24
    35ee:	e2 f7       	brpl	.-8      	; 0x35e8 <DIO_enuGetPinValue+0xbe>
    35f0:	ca 01       	movw	r24, r20
    35f2:	81 70       	andi	r24, 0x01	; 1
    35f4:	ec 81       	ldd	r30, Y+4	; 0x04
    35f6:	fd 81       	ldd	r31, Y+5	; 0x05
    35f8:	80 83       	st	Z, r24
    35fa:	27 c0       	rjmp	.+78     	; 0x364a <DIO_enuGetPinValue+0x120>
			break;

			case DIO_u8PortC:
				*Copy_pu8Value = GET_BIT(PINC, Copy_u8PinID);
    35fc:	e3 e3       	ldi	r30, 0x33	; 51
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	28 2f       	mov	r18, r24
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	8b 81       	ldd	r24, Y+3	; 0x03
    3608:	88 2f       	mov	r24, r24
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	a9 01       	movw	r20, r18
    360e:	02 c0       	rjmp	.+4      	; 0x3614 <DIO_enuGetPinValue+0xea>
    3610:	55 95       	asr	r21
    3612:	47 95       	ror	r20
    3614:	8a 95       	dec	r24
    3616:	e2 f7       	brpl	.-8      	; 0x3610 <DIO_enuGetPinValue+0xe6>
    3618:	ca 01       	movw	r24, r20
    361a:	81 70       	andi	r24, 0x01	; 1
    361c:	ec 81       	ldd	r30, Y+4	; 0x04
    361e:	fd 81       	ldd	r31, Y+5	; 0x05
    3620:	80 83       	st	Z, r24
    3622:	13 c0       	rjmp	.+38     	; 0x364a <DIO_enuGetPinValue+0x120>
			break;
			
			case DIO_u8PortD:
				*Copy_pu8Value = GET_BIT(PIND, Copy_u8PinID);
    3624:	e0 e3       	ldi	r30, 0x30	; 48
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	80 81       	ld	r24, Z
    362a:	28 2f       	mov	r18, r24
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	8b 81       	ldd	r24, Y+3	; 0x03
    3630:	88 2f       	mov	r24, r24
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	a9 01       	movw	r20, r18
    3636:	02 c0       	rjmp	.+4      	; 0x363c <DIO_enuGetPinValue+0x112>
    3638:	55 95       	asr	r21
    363a:	47 95       	ror	r20
    363c:	8a 95       	dec	r24
    363e:	e2 f7       	brpl	.-8      	; 0x3638 <DIO_enuGetPinValue+0x10e>
    3640:	ca 01       	movw	r24, r20
    3642:	81 70       	andi	r24, 0x01	; 1
    3644:	ec 81       	ldd	r30, Y+4	; 0x04
    3646:	fd 81       	ldd	r31, Y+5	; 0x05
    3648:	80 83       	st	Z, r24
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	89 83       	std	Y+1, r24	; 0x01

	}else{
		return Local_enu_ErrorState;
	}

	return Local_enu_ErrorState;
    364e:	59 81       	ldd	r21, Y+1	; 0x01
    3650:	58 87       	std	Y+8, r21	; 0x08
    3652:	02 c0       	rjmp	.+4      	; 0x3658 <DIO_enuGetPinValue+0x12e>
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;


	}else{
		return Local_enu_ErrorState;
    3654:	89 81       	ldd	r24, Y+1	; 0x01
    3656:	88 87       	std	Y+8, r24	; 0x08
    3658:	88 85       	ldd	r24, Y+8	; 0x08
	}

	return Local_enu_ErrorState;
   }
    365a:	28 96       	adiw	r28, 0x08	; 8
    365c:	0f b6       	in	r0, 0x3f	; 63
    365e:	f8 94       	cli
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	0f be       	out	0x3f, r0	; 63
    3664:	cd bf       	out	0x3d, r28	; 61
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	08 95       	ret

0000366c <DIO_enuTogglePinValue>:




// 4. if it (1) change it to (0) and vice versa
ErrorStatus_t DIO_enuTogglePinValue(uint8_t Copy_u8PortID, uint8_t Copy_u8PinID){
    366c:	df 93       	push	r29
    366e:	cf 93       	push	r28
    3670:	00 d0       	rcall	.+0      	; 0x3672 <DIO_enuTogglePinValue+0x6>
    3672:	00 d0       	rcall	.+0      	; 0x3674 <DIO_enuTogglePinValue+0x8>
    3674:	00 d0       	rcall	.+0      	; 0x3676 <DIO_enuTogglePinValue+0xa>
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	8a 83       	std	Y+2, r24	; 0x02
    367c:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    367e:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8PinID <= DIO_u8PIN7){
    3680:	8a 81       	ldd	r24, Y+2	; 0x02
    3682:	84 30       	cpi	r24, 0x04	; 4
    3684:	08 f0       	brcs	.+2      	; 0x3688 <DIO_enuTogglePinValue+0x1c>
    3686:	77 c0       	rjmp	.+238    	; 0x3776 <DIO_enuTogglePinValue+0x10a>
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	88 30       	cpi	r24, 0x08	; 8
    368c:	08 f0       	brcs	.+2      	; 0x3690 <DIO_enuTogglePinValue+0x24>
    368e:	73 c0       	rjmp	.+230    	; 0x3776 <DIO_enuTogglePinValue+0x10a>

		switch(Copy_u8PortID){
    3690:	8a 81       	ldd	r24, Y+2	; 0x02
    3692:	28 2f       	mov	r18, r24
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	3e 83       	std	Y+6, r19	; 0x06
    3698:	2d 83       	std	Y+5, r18	; 0x05
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	9e 81       	ldd	r25, Y+6	; 0x06
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	91 05       	cpc	r25, r1
    36a2:	49 f1       	breq	.+82     	; 0x36f6 <DIO_enuTogglePinValue+0x8a>
    36a4:	2d 81       	ldd	r18, Y+5	; 0x05
    36a6:	3e 81       	ldd	r19, Y+6	; 0x06
    36a8:	22 30       	cpi	r18, 0x02	; 2
    36aa:	31 05       	cpc	r19, r1
    36ac:	2c f4       	brge	.+10     	; 0x36b8 <DIO_enuTogglePinValue+0x4c>
    36ae:	8d 81       	ldd	r24, Y+5	; 0x05
    36b0:	9e 81       	ldd	r25, Y+6	; 0x06
    36b2:	00 97       	sbiw	r24, 0x00	; 0
    36b4:	61 f0       	breq	.+24     	; 0x36ce <DIO_enuTogglePinValue+0x62>
    36b6:	5a c0       	rjmp	.+180    	; 0x376c <DIO_enuTogglePinValue+0x100>
    36b8:	2d 81       	ldd	r18, Y+5	; 0x05
    36ba:	3e 81       	ldd	r19, Y+6	; 0x06
    36bc:	22 30       	cpi	r18, 0x02	; 2
    36be:	31 05       	cpc	r19, r1
    36c0:	71 f1       	breq	.+92     	; 0x371e <DIO_enuTogglePinValue+0xb2>
    36c2:	8d 81       	ldd	r24, Y+5	; 0x05
    36c4:	9e 81       	ldd	r25, Y+6	; 0x06
    36c6:	83 30       	cpi	r24, 0x03	; 3
    36c8:	91 05       	cpc	r25, r1
    36ca:	e9 f1       	breq	.+122    	; 0x3746 <DIO_enuTogglePinValue+0xda>
    36cc:	4f c0       	rjmp	.+158    	; 0x376c <DIO_enuTogglePinValue+0x100>
			case DIO_u8PortA:
				TOG_BIT(PORTA, Copy_u8PinID);
    36ce:	ab e3       	ldi	r26, 0x3B	; 59
    36d0:	b0 e0       	ldi	r27, 0x00	; 0
    36d2:	eb e3       	ldi	r30, 0x3B	; 59
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	80 81       	ld	r24, Z
    36d8:	48 2f       	mov	r20, r24
    36da:	8b 81       	ldd	r24, Y+3	; 0x03
    36dc:	28 2f       	mov	r18, r24
    36de:	30 e0       	ldi	r19, 0x00	; 0
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	02 2e       	mov	r0, r18
    36e6:	02 c0       	rjmp	.+4      	; 0x36ec <DIO_enuTogglePinValue+0x80>
    36e8:	88 0f       	add	r24, r24
    36ea:	99 1f       	adc	r25, r25
    36ec:	0a 94       	dec	r0
    36ee:	e2 f7       	brpl	.-8      	; 0x36e8 <DIO_enuTogglePinValue+0x7c>
    36f0:	84 27       	eor	r24, r20
    36f2:	8c 93       	st	X, r24
    36f4:	3b c0       	rjmp	.+118    	; 0x376c <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortB:
				TOG_BIT(PORTB, Copy_u8PinID);
    36f6:	a8 e3       	ldi	r26, 0x38	; 56
    36f8:	b0 e0       	ldi	r27, 0x00	; 0
    36fa:	e8 e3       	ldi	r30, 0x38	; 56
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	80 81       	ld	r24, Z
    3700:	48 2f       	mov	r20, r24
    3702:	8b 81       	ldd	r24, Y+3	; 0x03
    3704:	28 2f       	mov	r18, r24
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	02 2e       	mov	r0, r18
    370e:	02 c0       	rjmp	.+4      	; 0x3714 <DIO_enuTogglePinValue+0xa8>
    3710:	88 0f       	add	r24, r24
    3712:	99 1f       	adc	r25, r25
    3714:	0a 94       	dec	r0
    3716:	e2 f7       	brpl	.-8      	; 0x3710 <DIO_enuTogglePinValue+0xa4>
    3718:	84 27       	eor	r24, r20
    371a:	8c 93       	st	X, r24
    371c:	27 c0       	rjmp	.+78     	; 0x376c <DIO_enuTogglePinValue+0x100>
			break;

			case DIO_u8PortC:
				TOG_BIT(PORTC, Copy_u8PinID);
    371e:	a5 e3       	ldi	r26, 0x35	; 53
    3720:	b0 e0       	ldi	r27, 0x00	; 0
    3722:	e5 e3       	ldi	r30, 0x35	; 53
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	80 81       	ld	r24, Z
    3728:	48 2f       	mov	r20, r24
    372a:	8b 81       	ldd	r24, Y+3	; 0x03
    372c:	28 2f       	mov	r18, r24
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	02 2e       	mov	r0, r18
    3736:	02 c0       	rjmp	.+4      	; 0x373c <DIO_enuTogglePinValue+0xd0>
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	0a 94       	dec	r0
    373e:	e2 f7       	brpl	.-8      	; 0x3738 <DIO_enuTogglePinValue+0xcc>
    3740:	84 27       	eor	r24, r20
    3742:	8c 93       	st	X, r24
    3744:	13 c0       	rjmp	.+38     	; 0x376c <DIO_enuTogglePinValue+0x100>
			break;
			
			case DIO_u8PortD:
				TOG_BIT(PORTD, Copy_u8PinID);
    3746:	a2 e3       	ldi	r26, 0x32	; 50
    3748:	b0 e0       	ldi	r27, 0x00	; 0
    374a:	e2 e3       	ldi	r30, 0x32	; 50
    374c:	f0 e0       	ldi	r31, 0x00	; 0
    374e:	80 81       	ld	r24, Z
    3750:	48 2f       	mov	r20, r24
    3752:	8b 81       	ldd	r24, Y+3	; 0x03
    3754:	28 2f       	mov	r18, r24
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	02 2e       	mov	r0, r18
    375e:	02 c0       	rjmp	.+4      	; 0x3764 <DIO_enuTogglePinValue+0xf8>
    3760:	88 0f       	add	r24, r24
    3762:	99 1f       	adc	r25, r25
    3764:	0a 94       	dec	r0
    3766:	e2 f7       	brpl	.-8      	; 0x3760 <DIO_enuTogglePinValue+0xf4>
    3768:	84 27       	eor	r24, r20
    376a:	8c 93       	st	X, r24
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	89 83       	std	Y+1, r24	; 0x01

		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    3770:	99 81       	ldd	r25, Y+1	; 0x01
    3772:	9c 83       	std	Y+4, r25	; 0x04
    3774:	02 c0       	rjmp	.+4      	; 0x377a <DIO_enuTogglePinValue+0x10e>

		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{

		return Local_enu_ErrorState;
    3776:	29 81       	ldd	r18, Y+1	; 0x01
    3778:	2c 83       	std	Y+4, r18	; 0x04
    377a:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    377c:	26 96       	adiw	r28, 0x06	; 6
    377e:	0f b6       	in	r0, 0x3f	; 63
    3780:	f8 94       	cli
    3782:	de bf       	out	0x3e, r29	; 62
    3784:	0f be       	out	0x3f, r0	; 63
    3786:	cd bf       	out	0x3d, r28	; 61
    3788:	cf 91       	pop	r28
    378a:	df 91       	pop	r29
    378c:	08 95       	ret

0000378e <DIO_enuSetPortDirection>:
///****************************************************************************************/


///********************************** Control Entire Port **********************************/
// 1. set entire port as OUTPUT
ErrorStatus_t DIO_enuSetPortDirection(uint8_t Copy_u8PortID, uint8_t Copy_u8Direction){
    378e:	df 93       	push	r29
    3790:	cf 93       	push	r28
    3792:	00 d0       	rcall	.+0      	; 0x3794 <DIO_enuSetPortDirection+0x6>
    3794:	00 d0       	rcall	.+0      	; 0x3796 <DIO_enuSetPortDirection+0x8>
    3796:	00 d0       	rcall	.+0      	; 0x3798 <DIO_enuSetPortDirection+0xa>
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	8a 83       	std	Y+2, r24	; 0x02
    379e:	6b 83       	std	Y+3, r22	; 0x03

	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    37a0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Direction <= DIO_u8OUTPUT){
    37a2:	8a 81       	ldd	r24, Y+2	; 0x02
    37a4:	84 30       	cpi	r24, 0x04	; 4
    37a6:	08 f0       	brcs	.+2      	; 0x37aa <DIO_enuSetPortDirection+0x1c>
    37a8:	57 c0       	rjmp	.+174    	; 0x3858 <DIO_enuSetPortDirection+0xca>
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	82 30       	cpi	r24, 0x02	; 2
    37ae:	08 f0       	brcs	.+2      	; 0x37b2 <DIO_enuSetPortDirection+0x24>
    37b0:	53 c0       	rjmp	.+166    	; 0x3858 <DIO_enuSetPortDirection+0xca>

		switch (Copy_u8PortID){
    37b2:	8a 81       	ldd	r24, Y+2	; 0x02
    37b4:	28 2f       	mov	r18, r24
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	3e 83       	std	Y+6, r19	; 0x06
    37ba:	2d 83       	std	Y+5, r18	; 0x05
    37bc:	8d 81       	ldd	r24, Y+5	; 0x05
    37be:	9e 81       	ldd	r25, Y+6	; 0x06
    37c0:	81 30       	cpi	r24, 0x01	; 1
    37c2:	91 05       	cpc	r25, r1
    37c4:	09 f1       	breq	.+66     	; 0x3808 <DIO_enuSetPortDirection+0x7a>
    37c6:	2d 81       	ldd	r18, Y+5	; 0x05
    37c8:	3e 81       	ldd	r19, Y+6	; 0x06
    37ca:	22 30       	cpi	r18, 0x02	; 2
    37cc:	31 05       	cpc	r19, r1
    37ce:	2c f4       	brge	.+10     	; 0x37da <DIO_enuSetPortDirection+0x4c>
    37d0:	8d 81       	ldd	r24, Y+5	; 0x05
    37d2:	9e 81       	ldd	r25, Y+6	; 0x06
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	61 f0       	breq	.+24     	; 0x37f0 <DIO_enuSetPortDirection+0x62>
    37d8:	3a c0       	rjmp	.+116    	; 0x384e <DIO_enuSetPortDirection+0xc0>
    37da:	2d 81       	ldd	r18, Y+5	; 0x05
    37dc:	3e 81       	ldd	r19, Y+6	; 0x06
    37de:	22 30       	cpi	r18, 0x02	; 2
    37e0:	31 05       	cpc	r19, r1
    37e2:	f1 f0       	breq	.+60     	; 0x3820 <DIO_enuSetPortDirection+0x92>
    37e4:	8d 81       	ldd	r24, Y+5	; 0x05
    37e6:	9e 81       	ldd	r25, Y+6	; 0x06
    37e8:	83 30       	cpi	r24, 0x03	; 3
    37ea:	91 05       	cpc	r25, r1
    37ec:	29 f1       	breq	.+74     	; 0x3838 <DIO_enuSetPortDirection+0xaa>
    37ee:	2f c0       	rjmp	.+94     	; 0x384e <DIO_enuSetPortDirection+0xc0>

			case DIO_u8PortA:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    37f0:	8b 81       	ldd	r24, Y+3	; 0x03
    37f2:	81 30       	cpi	r24, 0x01	; 1
    37f4:	29 f4       	brne	.+10     	; 0x3800 <DIO_enuSetPortDirection+0x72>
					DDRA = 0xFF;
    37f6:	ea e3       	ldi	r30, 0x3A	; 58
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	8f ef       	ldi	r24, 0xFF	; 255
    37fc:	80 83       	st	Z, r24
    37fe:	27 c0       	rjmp	.+78     	; 0x384e <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRA = 0x00;
    3800:	ea e3       	ldi	r30, 0x3A	; 58
    3802:	f0 e0       	ldi	r31, 0x00	; 0
    3804:	10 82       	st	Z, r1
    3806:	23 c0       	rjmp	.+70     	; 0x384e <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    3808:	8b 81       	ldd	r24, Y+3	; 0x03
    380a:	81 30       	cpi	r24, 0x01	; 1
    380c:	29 f4       	brne	.+10     	; 0x3818 <DIO_enuSetPortDirection+0x8a>
					DDRB = 0xFF;
    380e:	e7 e3       	ldi	r30, 0x37	; 55
    3810:	f0 e0       	ldi	r31, 0x00	; 0
    3812:	8f ef       	ldi	r24, 0xFF	; 255
    3814:	80 83       	st	Z, r24
    3816:	1b c0       	rjmp	.+54     	; 0x384e <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRB = 0x00;
    3818:	e7 e3       	ldi	r30, 0x37	; 55
    381a:	f0 e0       	ldi	r31, 0x00	; 0
    381c:	10 82       	st	Z, r1
    381e:	17 c0       	rjmp	.+46     	; 0x384e <DIO_enuSetPortDirection+0xc0>
				}				

			break;

			case DIO_u8PortC:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	81 30       	cpi	r24, 0x01	; 1
    3824:	29 f4       	brne	.+10     	; 0x3830 <DIO_enuSetPortDirection+0xa2>
					DDRC = 0xFF;
    3826:	e4 e3       	ldi	r30, 0x34	; 52
    3828:	f0 e0       	ldi	r31, 0x00	; 0
    382a:	8f ef       	ldi	r24, 0xFF	; 255
    382c:	80 83       	st	Z, r24
    382e:	0f c0       	rjmp	.+30     	; 0x384e <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRC = 0x00;
    3830:	e4 e3       	ldi	r30, 0x34	; 52
    3832:	f0 e0       	ldi	r31, 0x00	; 0
    3834:	10 82       	st	Z, r1
    3836:	0b c0       	rjmp	.+22     	; 0x384e <DIO_enuSetPortDirection+0xc0>
				}
			break;

			case DIO_u8PortD:
				if(Copy_u8Direction == DIO_u8OUTPUT){
    3838:	8b 81       	ldd	r24, Y+3	; 0x03
    383a:	81 30       	cpi	r24, 0x01	; 1
    383c:	29 f4       	brne	.+10     	; 0x3848 <DIO_enuSetPortDirection+0xba>
					DDRD = 0xFF;
    383e:	e1 e3       	ldi	r30, 0x31	; 49
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	8f ef       	ldi	r24, 0xFF	; 255
    3844:	80 83       	st	Z, r24
    3846:	03 c0       	rjmp	.+6      	; 0x384e <DIO_enuSetPortDirection+0xc0>
				}else{

					// set them as Input
					DDRD = 0x00;
    3848:	e1 e3       	ldi	r30, 0x31	; 49
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	10 82       	st	Z, r1
				}
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    3852:	99 81       	ldd	r25, Y+1	; 0x01
    3854:	9c 83       	std	Y+4, r25	; 0x04
    3856:	02 c0       	rjmp	.+4      	; 0x385c <DIO_enuSetPortDirection+0xce>
			break;	
		}
		Local_enu_ErrorState = ERROR_STATUS_OK;

	}else{
		return Local_enu_ErrorState;
    3858:	29 81       	ldd	r18, Y+1	; 0x01
    385a:	2c 83       	std	Y+4, r18	; 0x04
    385c:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    385e:	26 96       	adiw	r28, 0x06	; 6
    3860:	0f b6       	in	r0, 0x3f	; 63
    3862:	f8 94       	cli
    3864:	de bf       	out	0x3e, r29	; 62
    3866:	0f be       	out	0x3f, r0	; 63
    3868:	cd bf       	out	0x3d, r28	; 61
    386a:	cf 91       	pop	r28
    386c:	df 91       	pop	r29
    386e:	08 95       	ret

00003870 <DIO_enuSetPortValue>:

//! why ??? would you read entire port ?!
//ErrorStatus_t DIO_enuGetPortValue    (uint8_t Copy_u8PortID, uint8_t *Copy_pu8Value);


ErrorStatus_t DIO_enuSetPortValue(uint8_t Copy_u8PortID, uint8_t Copy_u8Value){
    3870:	df 93       	push	r29
    3872:	cf 93       	push	r28
    3874:	00 d0       	rcall	.+0      	; 0x3876 <DIO_enuSetPortValue+0x6>
    3876:	00 d0       	rcall	.+0      	; 0x3878 <DIO_enuSetPortValue+0x8>
    3878:	00 d0       	rcall	.+0      	; 0x387a <DIO_enuSetPortValue+0xa>
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
    387e:	8a 83       	std	Y+2, r24	; 0x02
    3880:	6b 83       	std	Y+3, r22	; 0x03
	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    3882:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PortID <= DIO_u8PortD && Copy_u8Value <= DIO_u8PULLUP){
    3884:	8a 81       	ldd	r24, Y+2	; 0x02
    3886:	84 30       	cpi	r24, 0x04	; 4
    3888:	08 f0       	brcs	.+2      	; 0x388c <DIO_enuSetPortValue+0x1c>
    388a:	57 c0       	rjmp	.+174    	; 0x393a <DIO_enuSetPortValue+0xca>
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	82 30       	cpi	r24, 0x02	; 2
    3890:	08 f0       	brcs	.+2      	; 0x3894 <DIO_enuSetPortValue+0x24>
    3892:	53 c0       	rjmp	.+166    	; 0x393a <DIO_enuSetPortValue+0xca>
		
		switch (Copy_u8PortID){
    3894:	8a 81       	ldd	r24, Y+2	; 0x02
    3896:	28 2f       	mov	r18, r24
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	3e 83       	std	Y+6, r19	; 0x06
    389c:	2d 83       	std	Y+5, r18	; 0x05
    389e:	8d 81       	ldd	r24, Y+5	; 0x05
    38a0:	9e 81       	ldd	r25, Y+6	; 0x06
    38a2:	81 30       	cpi	r24, 0x01	; 1
    38a4:	91 05       	cpc	r25, r1
    38a6:	09 f1       	breq	.+66     	; 0x38ea <DIO_enuSetPortValue+0x7a>
    38a8:	2d 81       	ldd	r18, Y+5	; 0x05
    38aa:	3e 81       	ldd	r19, Y+6	; 0x06
    38ac:	22 30       	cpi	r18, 0x02	; 2
    38ae:	31 05       	cpc	r19, r1
    38b0:	2c f4       	brge	.+10     	; 0x38bc <DIO_enuSetPortValue+0x4c>
    38b2:	8d 81       	ldd	r24, Y+5	; 0x05
    38b4:	9e 81       	ldd	r25, Y+6	; 0x06
    38b6:	00 97       	sbiw	r24, 0x00	; 0
    38b8:	61 f0       	breq	.+24     	; 0x38d2 <DIO_enuSetPortValue+0x62>
    38ba:	3a c0       	rjmp	.+116    	; 0x3930 <DIO_enuSetPortValue+0xc0>
    38bc:	2d 81       	ldd	r18, Y+5	; 0x05
    38be:	3e 81       	ldd	r19, Y+6	; 0x06
    38c0:	22 30       	cpi	r18, 0x02	; 2
    38c2:	31 05       	cpc	r19, r1
    38c4:	f1 f0       	breq	.+60     	; 0x3902 <DIO_enuSetPortValue+0x92>
    38c6:	8d 81       	ldd	r24, Y+5	; 0x05
    38c8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ca:	83 30       	cpi	r24, 0x03	; 3
    38cc:	91 05       	cpc	r25, r1
    38ce:	29 f1       	breq	.+74     	; 0x391a <DIO_enuSetPortValue+0xaa>
    38d0:	2f c0       	rjmp	.+94     	; 0x3930 <DIO_enuSetPortValue+0xc0>
			case DIO_u8PortA:
				if(Copy_u8Value){
    38d2:	8b 81       	ldd	r24, Y+3	; 0x03
    38d4:	88 23       	and	r24, r24
    38d6:	29 f0       	breq	.+10     	; 0x38e2 <DIO_enuSetPortValue+0x72>
					PORTA = 0xFF;
    38d8:	eb e3       	ldi	r30, 0x3B	; 59
    38da:	f0 e0       	ldi	r31, 0x00	; 0
    38dc:	8f ef       	ldi	r24, 0xFF	; 255
    38de:	80 83       	st	Z, r24
    38e0:	27 c0       	rjmp	.+78     	; 0x3930 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTA = 0x00;
    38e2:	eb e3       	ldi	r30, 0x3B	; 59
    38e4:	f0 e0       	ldi	r31, 0x00	; 0
    38e6:	10 82       	st	Z, r1
    38e8:	23 c0       	rjmp	.+70     	; 0x3930 <DIO_enuSetPortValue+0xc0>
				}
			break;

			case DIO_u8PortB:
				if(Copy_u8Value){
    38ea:	8b 81       	ldd	r24, Y+3	; 0x03
    38ec:	88 23       	and	r24, r24
    38ee:	29 f0       	breq	.+10     	; 0x38fa <DIO_enuSetPortValue+0x8a>
					PORTB = 0xFF;
    38f0:	e8 e3       	ldi	r30, 0x38	; 56
    38f2:	f0 e0       	ldi	r31, 0x00	; 0
    38f4:	8f ef       	ldi	r24, 0xFF	; 255
    38f6:	80 83       	st	Z, r24
    38f8:	1b c0       	rjmp	.+54     	; 0x3930 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTB = 0x00;
    38fa:	e8 e3       	ldi	r30, 0x38	; 56
    38fc:	f0 e0       	ldi	r31, 0x00	; 0
    38fe:	10 82       	st	Z, r1
    3900:	17 c0       	rjmp	.+46     	; 0x3930 <DIO_enuSetPortValue+0xc0>
				}
			break;

			
			case DIO_u8PortC:
				if(Copy_u8Value){
    3902:	8b 81       	ldd	r24, Y+3	; 0x03
    3904:	88 23       	and	r24, r24
    3906:	29 f0       	breq	.+10     	; 0x3912 <DIO_enuSetPortValue+0xa2>
					PORTC = 0xFF;
    3908:	e5 e3       	ldi	r30, 0x35	; 53
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	8f ef       	ldi	r24, 0xFF	; 255
    390e:	80 83       	st	Z, r24
    3910:	0f c0       	rjmp	.+30     	; 0x3930 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTC = 0x00;
    3912:	e5 e3       	ldi	r30, 0x35	; 53
    3914:	f0 e0       	ldi	r31, 0x00	; 0
    3916:	10 82       	st	Z, r1
    3918:	0b c0       	rjmp	.+22     	; 0x3930 <DIO_enuSetPortValue+0xc0>
				}
			break;
	
			case DIO_u8PortD:
				if(Copy_u8Value){
    391a:	8b 81       	ldd	r24, Y+3	; 0x03
    391c:	88 23       	and	r24, r24
    391e:	29 f0       	breq	.+10     	; 0x392a <DIO_enuSetPortValue+0xba>
					PORTD = 0xFF;
    3920:	e2 e3       	ldi	r30, 0x32	; 50
    3922:	f0 e0       	ldi	r31, 0x00	; 0
    3924:	8f ef       	ldi	r24, 0xFF	; 255
    3926:	80 83       	st	Z, r24
    3928:	03 c0       	rjmp	.+6      	; 0x3930 <DIO_enuSetPortValue+0xc0>
				}else{
					PORTD = 0x00;
    392a:	e2 e3       	ldi	r30, 0x32	; 50
    392c:	f0 e0       	ldi	r31, 0x00	; 0
    392e:	10 82       	st	Z, r1
				}
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	89 83       	std	Y+1, r24	; 0x01
	}else{
		return Local_enu_ErrorState;
	}


	return Local_enu_ErrorState;
    3934:	99 81       	ldd	r25, Y+1	; 0x01
    3936:	9c 83       	std	Y+4, r25	; 0x04
    3938:	02 c0       	rjmp	.+4      	; 0x393e <DIO_enuSetPortValue+0xce>
			break;
		}

		Local_enu_ErrorState = ERROR_STATUS_OK;
	}else{
		return Local_enu_ErrorState;
    393a:	29 81       	ldd	r18, Y+1	; 0x01
    393c:	2c 83       	std	Y+4, r18	; 0x04
    393e:	8c 81       	ldd	r24, Y+4	; 0x04
	}


	return Local_enu_ErrorState;
}
    3940:	26 96       	adiw	r28, 0x06	; 6
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	f8 94       	cli
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	cf 91       	pop	r28
    394e:	df 91       	pop	r29
    3950:	08 95       	ret

00003952 <ADC_enuInit>:


static void (*ADC_CallBackFunction)(void) = NULL;


void ADC_enuInit(){
    3952:	df 93       	push	r29
    3954:	cf 93       	push	r28
    3956:	cd b7       	in	r28, 0x3d	; 61
    3958:	de b7       	in	r29, 0x3e	; 62
    395a:	2e 97       	sbiw	r28, 0x0e	; 14
    395c:	0f b6       	in	r0, 0x3f	; 63
    395e:	f8 94       	cli
    3960:	de bf       	out	0x3e, r29	; 62
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	cd bf       	out	0x3d, r28	; 61
	 * 5. Enabling ADC
	 * */


	/*************************** Selecting  voltage reference ***************************/
		ADMUX_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    3966:	a7 e2       	ldi	r26, 0x27	; 39
    3968:	b0 e0       	ldi	r27, 0x00	; 0
    396a:	e7 e2       	ldi	r30, 0x27	; 39
    396c:	f0 e0       	ldi	r31, 0x00	; 0
    396e:	80 81       	ld	r24, Z
    3970:	8f 71       	andi	r24, 0x1F	; 31
    3972:	8c 93       	st	X, r24
		ADMUX_REG |= ADC_VOLTAGE_REF_SELECTOR_msk;
    3974:	a7 e2       	ldi	r26, 0x27	; 39
    3976:	b0 e0       	ldi	r27, 0x00	; 0
    3978:	e7 e2       	ldi	r30, 0x27	; 39
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	80 81       	ld	r24, Z
    397e:	80 64       	ori	r24, 0x40	; 64
    3980:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************** Selecting ADC MODE ********************************/
		#if ADC_MODE_SELECTOR == ADC_MODE_AUTO_TRIGGER
			SET_BIT(ADCSRA_REG, ADCSRA_ADATE);
    3982:	a6 e2       	ldi	r26, 0x26	; 38
    3984:	b0 e0       	ldi	r27, 0x00	; 0
    3986:	e6 e2       	ldi	r30, 0x26	; 38
    3988:	f0 e0       	ldi	r31, 0x00	; 0
    398a:	80 81       	ld	r24, Z
    398c:	80 62       	ori	r24, 0x20	; 32
    398e:	8c 93       	st	X, r24

			SFIOR_REG &= ADC_AUTO_TRIG_SRC_clr_msk;
    3990:	a0 e5       	ldi	r26, 0x50	; 80
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	e0 e5       	ldi	r30, 0x50	; 80
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	8f 71       	andi	r24, 0x1F	; 31
    399c:	8c 93       	st	X, r24
			SFIOR_REG |= ADC_AUTO_TRIG_SRCE_SELECTOR;
    399e:	a0 e5       	ldi	r26, 0x50	; 80
    39a0:	b0 e0       	ldi	r27, 0x00	; 0
    39a2:	e0 e5       	ldi	r30, 0x50	; 80
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	80 81       	ld	r24, Z
    39a8:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* Selecting Adjustment *******************************/
		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			CLR_BIT(ADMUX_REG, ADMUX_ADLAR);
    39aa:	a7 e2       	ldi	r26, 0x27	; 39
    39ac:	b0 e0       	ldi	r27, 0x00	; 0
    39ae:	e7 e2       	ldi	r30, 0x27	; 39
    39b0:	f0 e0       	ldi	r31, 0x00	; 0
    39b2:	80 81       	ld	r24, Z
    39b4:	8f 7d       	andi	r24, 0xDF	; 223
    39b6:	8c 93       	st	X, r24
	/***************************** Clearing  Interrupt Flag *****************************/
		//! Notice: that ADIF to be cleared we write logical one (from data sheet)
		//So in initialization of ADC we write 1 to ADIF bit to make sure that the
		//flag is cleared in order to make sure that ADC ready for upcoming conversation
		// clearing interrupt flag
		SET_BIT(ADCSRA_REG, ADCSRA_ADIF);
    39b8:	a6 e2       	ldi	r26, 0x26	; 38
    39ba:	b0 e0       	ldi	r27, 0x00	; 0
    39bc:	e6 e2       	ldi	r30, 0x26	; 38
    39be:	f0 e0       	ldi	r31, 0x00	; 0
    39c0:	80 81       	ld	r24, Z
    39c2:	80 61       	ori	r24, 0x10	; 16
    39c4:	8c 93       	st	X, r24
	/************************************************************************************/


	/*********************************** Enabling ADC ***********************************/
		SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    39c6:	a6 e2       	ldi	r26, 0x26	; 38
    39c8:	b0 e0       	ldi	r27, 0x00	; 0
    39ca:	e6 e2       	ldi	r30, 0x26	; 38
    39cc:	f0 e0       	ldi	r31, 0x00	; 0
    39ce:	80 81       	ld	r24, Z
    39d0:	80 68       	ori	r24, 0x80	; 128
    39d2:	8c 93       	st	X, r24
    39d4:	80 e0       	ldi	r24, 0x00	; 0
    39d6:	90 e0       	ldi	r25, 0x00	; 0
    39d8:	a8 e4       	ldi	r26, 0x48	; 72
    39da:	b3 e4       	ldi	r27, 0x43	; 67
    39dc:	8b 87       	std	Y+11, r24	; 0x0b
    39de:	9c 87       	std	Y+12, r25	; 0x0c
    39e0:	ad 87       	std	Y+13, r26	; 0x0d
    39e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	4a e7       	ldi	r20, 0x7A	; 122
    39f2:	55 e4       	ldi	r21, 0x45	; 69
    39f4:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	8f 83       	std	Y+7, r24	; 0x07
    39fe:	98 87       	std	Y+8, r25	; 0x08
    3a00:	a9 87       	std	Y+9, r26	; 0x09
    3a02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a04:	6f 81       	ldd	r22, Y+7	; 0x07
    3a06:	78 85       	ldd	r23, Y+8	; 0x08
    3a08:	89 85       	ldd	r24, Y+9	; 0x09
    3a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	40 e8       	ldi	r20, 0x80	; 128
    3a12:	5f e3       	ldi	r21, 0x3F	; 63
    3a14:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    3a18:	88 23       	and	r24, r24
    3a1a:	2c f4       	brge	.+10     	; 0x3a26 <ADC_enuInit+0xd4>
		__ticks = 1;
    3a1c:	81 e0       	ldi	r24, 0x01	; 1
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	9e 83       	std	Y+6, r25	; 0x06
    3a22:	8d 83       	std	Y+5, r24	; 0x05
    3a24:	3f c0       	rjmp	.+126    	; 0x3aa4 <ADC_enuInit+0x152>
	else if (__tmp > 65535)
    3a26:	6f 81       	ldd	r22, Y+7	; 0x07
    3a28:	78 85       	ldd	r23, Y+8	; 0x08
    3a2a:	89 85       	ldd	r24, Y+9	; 0x09
    3a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	3f ef       	ldi	r19, 0xFF	; 255
    3a32:	4f e7       	ldi	r20, 0x7F	; 127
    3a34:	57 e4       	ldi	r21, 0x47	; 71
    3a36:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    3a3a:	18 16       	cp	r1, r24
    3a3c:	4c f5       	brge	.+82     	; 0x3a90 <ADC_enuInit+0x13e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a46:	20 e0       	ldi	r18, 0x00	; 0
    3a48:	30 e0       	ldi	r19, 0x00	; 0
    3a4a:	40 e2       	ldi	r20, 0x20	; 32
    3a4c:	51 e4       	ldi	r21, 0x41	; 65
    3a4e:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	bc 01       	movw	r22, r24
    3a58:	cd 01       	movw	r24, r26
    3a5a:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	9e 83       	std	Y+6, r25	; 0x06
    3a64:	8d 83       	std	Y+5, r24	; 0x05
    3a66:	0f c0       	rjmp	.+30     	; 0x3a86 <ADC_enuInit+0x134>
    3a68:	80 e9       	ldi	r24, 0x90	; 144
    3a6a:	91 e0       	ldi	r25, 0x01	; 1
    3a6c:	9c 83       	std	Y+4, r25	; 0x04
    3a6e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a70:	8b 81       	ldd	r24, Y+3	; 0x03
    3a72:	9c 81       	ldd	r25, Y+4	; 0x04
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	f1 f7       	brne	.-4      	; 0x3a74 <ADC_enuInit+0x122>
    3a78:	9c 83       	std	Y+4, r25	; 0x04
    3a7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	9e 83       	std	Y+6, r25	; 0x06
    3a84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a86:	8d 81       	ldd	r24, Y+5	; 0x05
    3a88:	9e 81       	ldd	r25, Y+6	; 0x06
    3a8a:	00 97       	sbiw	r24, 0x00	; 0
    3a8c:	69 f7       	brne	.-38     	; 0x3a68 <ADC_enuInit+0x116>
    3a8e:	14 c0       	rjmp	.+40     	; 0x3ab8 <ADC_enuInit+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a90:	6f 81       	ldd	r22, Y+7	; 0x07
    3a92:	78 85       	ldd	r23, Y+8	; 0x08
    3a94:	89 85       	ldd	r24, Y+9	; 0x09
    3a96:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a98:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	9e 83       	std	Y+6, r25	; 0x06
    3aa2:	8d 83       	std	Y+5, r24	; 0x05
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	9a 83       	std	Y+2, r25	; 0x02
    3aaa:	89 83       	std	Y+1, r24	; 0x01
    3aac:	89 81       	ldd	r24, Y+1	; 0x01
    3aae:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab0:	01 97       	sbiw	r24, 0x01	; 1
    3ab2:	f1 f7       	brne	.-4      	; 0x3ab0 <ADC_enuInit+0x15e>
    3ab4:	9a 83       	std	Y+2, r25	; 0x02
    3ab6:	89 83       	std	Y+1, r24	; 0x01


	// Waiting until ADC is stablized
	_delay_ms(200);

}
    3ab8:	2e 96       	adiw	r28, 0x0e	; 14
    3aba:	0f b6       	in	r0, 0x3f	; 63
    3abc:	f8 94       	cli
    3abe:	de bf       	out	0x3e, r29	; 62
    3ac0:	0f be       	out	0x3f, r0	; 63
    3ac2:	cd bf       	out	0x3d, r28	; 61
    3ac4:	cf 91       	pop	r28
    3ac6:	df 91       	pop	r29
    3ac8:	08 95       	ret

00003aca <ADC_enuStartConversion>:




ErrorStatus_t ADC_enuStartConversion(ADC_Channel_types ADC_channel_N){
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	00 d0       	rcall	.+0      	; 0x3ad0 <ADC_enuStartConversion+0x6>
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
    3ad4:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3ad6:	19 82       	std	Y+1, r1	; 0x01


	/******************************** Select ADC Channel ********************************/
	ADMUX_REG &= ADC_CHANNEL_SELECTOR_clr_msk;
    3ad8:	a7 e2       	ldi	r26, 0x27	; 39
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	e7 e2       	ldi	r30, 0x27	; 39
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	80 81       	ld	r24, Z
    3ae2:	80 7e       	andi	r24, 0xE0	; 224
    3ae4:	8c 93       	st	X, r24
	ADMUX_REG |= ADC_channel_N;
    3ae6:	a7 e2       	ldi	r26, 0x27	; 39
    3ae8:	b0 e0       	ldi	r27, 0x00	; 0
    3aea:	e7 e2       	ldi	r30, 0x27	; 39
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	90 81       	ld	r25, Z
    3af0:	8a 81       	ldd	r24, Y+2	; 0x02
    3af2:	89 2b       	or	r24, r25
    3af4:	8c 93       	st	X, r24
	/************************************************************************************/


	/******************************* ADC Start Conversion *******************************/
	//!!!!!!!!!!!!!!
	SET_BIT(ADCSRA_REG, ADCSRA_ADSC);
    3af6:	a6 e2       	ldi	r26, 0x26	; 38
    3af8:	b0 e0       	ldi	r27, 0x00	; 0
    3afa:	e6 e2       	ldi	r30, 0x26	; 38
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	80 81       	ld	r24, Z
    3b00:	80 64       	ori	r24, 0x40	; 64
    3b02:	8c 93       	st	X, r24
	/************************************************************************************/

	return Local_enuErrrorState;
    3b04:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <ADC_GetResult>:



uint16 ADC_GetResult(){
    3b10:	df 93       	push	r29
    3b12:	cf 93       	push	r28
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
			Copy_u16ReadValue |= ((uint16)ADCH_REG<<2);
			return Copy_u16ReadValue;
		#endif

		#if	ADC_ADJUSTMENT_SELECTOR == ADC_RIGHT_ADJUSTED
			return ADCLH_REG;
    3b18:	e4 e2       	ldi	r30, 0x24	; 36
    3b1a:	f0 e0       	ldi	r31, 0x00	; 0
    3b1c:	80 81       	ld	r24, Z
    3b1e:	91 81       	ldd	r25, Z+1	; 0x01





}
    3b20:	cf 91       	pop	r28
    3b22:	df 91       	pop	r29
    3b24:	08 95       	ret

00003b26 <ADC_enuSetCallBack>:




ErrorStatus_t ADC_enuSetCallBack(void(*Copy_pfunAppFun)(void)){
    3b26:	df 93       	push	r29
    3b28:	cf 93       	push	r28
    3b2a:	00 d0       	rcall	.+0      	; 0x3b2c <ADC_enuSetCallBack+0x6>
    3b2c:	00 d0       	rcall	.+0      	; 0x3b2e <ADC_enuSetCallBack+0x8>
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    3b32:	9b 83       	std	Y+3, r25	; 0x03
    3b34:	8a 83       	std	Y+2, r24	; 0x02
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3b36:	19 82       	std	Y+1, r1	; 0x01

//	if(Copy_pfunAppFun == NULL ||  Copy_u8IntNumber> IN)

	if(Copy_pfunAppFun == NULL){
    3b38:	8a 81       	ldd	r24, Y+2	; 0x02
    3b3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b3c:	00 97       	sbiw	r24, 0x00	; 0
    3b3e:	19 f4       	brne	.+6      	; 0x3b46 <ADC_enuSetCallBack+0x20>

		return Local_enuErrrorState;
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	8c 83       	std	Y+4, r24	; 0x04
    3b44:	0a c0       	rjmp	.+20     	; 0x3b5a <ADC_enuSetCallBack+0x34>
	}

	else{
		Local_enuErrrorState = ERROR_STATUS_OK;
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	89 83       	std	Y+1, r24	; 0x01

		ADC_CallBackFunction = Copy_pfunAppFun;
    3b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b4e:	90 93 a9 01 	sts	0x01A9, r25
    3b52:	80 93 a8 01 	sts	0x01A8, r24

	}



	return Local_enuErrrorState;
    3b56:	89 81       	ldd	r24, Y+1	; 0x01
    3b58:	8c 83       	std	Y+4, r24	; 0x04
    3b5a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	cf 91       	pop	r28
    3b66:	df 91       	pop	r29
    3b68:	08 95       	ret

00003b6a <__vector_16>:

ISR(__vector_16){
    3b6a:	1f 92       	push	r1
    3b6c:	0f 92       	push	r0
    3b6e:	0f b6       	in	r0, 0x3f	; 63
    3b70:	0f 92       	push	r0
    3b72:	11 24       	eor	r1, r1
    3b74:	2f 93       	push	r18
    3b76:	3f 93       	push	r19
    3b78:	4f 93       	push	r20
    3b7a:	5f 93       	push	r21
    3b7c:	6f 93       	push	r22
    3b7e:	7f 93       	push	r23
    3b80:	8f 93       	push	r24
    3b82:	9f 93       	push	r25
    3b84:	af 93       	push	r26
    3b86:	bf 93       	push	r27
    3b88:	ef 93       	push	r30
    3b8a:	ff 93       	push	r31
    3b8c:	df 93       	push	r29
    3b8e:	cf 93       	push	r28
    3b90:	cd b7       	in	r28, 0x3d	; 61
    3b92:	de b7       	in	r29, 0x3e	; 62
	if(ADC_CallBackFunction != NULL){
    3b94:	80 91 a8 01 	lds	r24, 0x01A8
    3b98:	90 91 a9 01 	lds	r25, 0x01A9
    3b9c:	00 97       	sbiw	r24, 0x00	; 0
    3b9e:	29 f0       	breq	.+10     	; 0x3baa <__vector_16+0x40>
		ADC_CallBackFunction();
    3ba0:	e0 91 a8 01 	lds	r30, 0x01A8
    3ba4:	f0 91 a9 01 	lds	r31, 0x01A9
    3ba8:	09 95       	icall
	}

}
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	ff 91       	pop	r31
    3bb0:	ef 91       	pop	r30
    3bb2:	bf 91       	pop	r27
    3bb4:	af 91       	pop	r26
    3bb6:	9f 91       	pop	r25
    3bb8:	8f 91       	pop	r24
    3bba:	7f 91       	pop	r23
    3bbc:	6f 91       	pop	r22
    3bbe:	5f 91       	pop	r21
    3bc0:	4f 91       	pop	r20
    3bc2:	3f 91       	pop	r19
    3bc4:	2f 91       	pop	r18
    3bc6:	0f 90       	pop	r0
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	0f 90       	pop	r0
    3bcc:	1f 90       	pop	r1
    3bce:	18 95       	reti

00003bd0 <ultraSonic_enuInit>:
#include "ultraSonic_interface.h"
/*****************************************************************/



ErrorStatus_t ultraSonic_enuInit(ultraSonic_t ultraSonic_Instance){
    3bd0:	df 93       	push	r29
    3bd2:	cf 93       	push	r28
    3bd4:	cd b7       	in	r28, 0x3d	; 61
    3bd6:	de b7       	in	r29, 0x3e	; 62
    3bd8:	28 97       	sbiw	r28, 0x08	; 8
    3bda:	0f b6       	in	r0, 0x3f	; 63
    3bdc:	f8 94       	cli
    3bde:	de bf       	out	0x3e, r29	; 62
    3be0:	0f be       	out	0x3f, r0	; 63
    3be2:	cd bf       	out	0x3d, r28	; 61
    3be4:	4a 83       	std	Y+2, r20	; 0x02
    3be6:	5b 83       	std	Y+3, r21	; 0x03
    3be8:	6c 83       	std	Y+4, r22	; 0x04
    3bea:	7d 83       	std	Y+5, r23	; 0x05
    3bec:	8e 83       	std	Y+6, r24	; 0x06
    3bee:	9f 83       	std	Y+7, r25	; 0x07
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3bf0:	19 82       	std	Y+1, r1	; 0x01



    if (ultraSonic_Instance.ECHO_PORT < DIO_u8PortA ||
    3bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf4:	84 30       	cpi	r24, 0x04	; 4
    3bf6:	18 f4       	brcc	.+6      	; 0x3bfe <ultraSonic_enuInit+0x2e>
    3bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfa:	88 30       	cpi	r24, 0x08	; 8
    3bfc:	18 f0       	brcs	.+6      	; 0x3c04 <ultraSonic_enuInit+0x34>
    	ultraSonic_Instance.ECHO_PORT > DIO_u8PortD ||
        ultraSonic_Instance.ECHO_PIN < DIO_u8PIN0 || ultraSonic_Instance.ECHO_PIN > DIO_u8PIN7) {

    	return Local_enuErrrorState;  // Return failure if the ECHO_PORT or ECHO_PIN are invalid
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	88 87       	std	Y+8, r24	; 0x08
    3c02:	14 c0       	rjmp	.+40     	; 0x3c2c <ultraSonic_enuInit+0x5c>

    } else {

    	Timer1_SetupForTimeMeasurement(8);
    3c04:	88 e0       	ldi	r24, 0x08	; 8
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	0e 94 43 0c 	call	0x1886	; 0x1886 <Timer1_SetupForTimeMeasurement>
    	DIO_enuSetPinDirection(ultraSonic_Instance.ECHO_PORT, ultraSonic_Instance.ECHO_PIN, DIO_u8INPUT);
    3c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c0e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c10:	69 2f       	mov	r22, r25
    3c12:	40 e0       	ldi	r20, 0x00	; 0
    3c14:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
    	DIO_enuSetPinDirection(ultraSonic_Instance.TRIG_PORT, ultraSonic_Instance.TRIG_PIN, DIO_u8OUTPUT);
    3c18:	8c 81       	ldd	r24, Y+4	; 0x04
    3c1a:	9d 81       	ldd	r25, Y+5	; 0x05
    3c1c:	69 2f       	mov	r22, r25
    3c1e:	41 e0       	ldi	r20, 0x01	; 1
    3c20:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
    }




	Local_enuErrrorState = ERROR_STATUS_OK;
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    3c28:	89 81       	ldd	r24, Y+1	; 0x01
    3c2a:	88 87       	std	Y+8, r24	; 0x08
    3c2c:	88 85       	ldd	r24, Y+8	; 0x08
}
    3c2e:	28 96       	adiw	r28, 0x08	; 8
    3c30:	0f b6       	in	r0, 0x3f	; 63
    3c32:	f8 94       	cli
    3c34:	de bf       	out	0x3e, r29	; 62
    3c36:	0f be       	out	0x3f, r0	; 63
    3c38:	cd bf       	out	0x3d, r28	; 61
    3c3a:	cf 91       	pop	r28
    3c3c:	df 91       	pop	r29
    3c3e:	08 95       	ret

00003c40 <ultraSonic_u16GetDistance>:



void ultraSonic_u16GetDistance(ultraSonic_t* ultraSonic_Instance){
    3c40:	df 93       	push	r29
    3c42:	cf 93       	push	r28
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
    3c48:	6b 97       	sbiw	r28, 0x1b	; 27
    3c4a:	0f b6       	in	r0, 0x3f	; 63
    3c4c:	f8 94       	cli
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	cd bf       	out	0x3d, r28	; 61
    3c54:	9b 8f       	std	Y+27, r25	; 0x1b
    3c56:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8_t Local_u8EchoPinStatus = 0;
    3c58:	19 8e       	std	Y+25, r1	; 0x19

	// Send a 10µs pulse to the trigger pin
	DIO_enuSetPinValue(ultraSonic_Instance->TRIG_PORT, ultraSonic_Instance->TRIG_PIN, DIO_u8HIGH);
    3c5a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3c5c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3c5e:	82 81       	ldd	r24, Z+2	; 0x02
    3c60:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3c62:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3c64:	93 81       	ldd	r25, Z+3	; 0x03
    3c66:	69 2f       	mov	r22, r25
    3c68:	41 e0       	ldi	r20, 0x01	; 1
    3c6a:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	a0 e2       	ldi	r26, 0x20	; 32
    3c74:	b1 e4       	ldi	r27, 0x41	; 65
    3c76:	8d 8b       	std	Y+21, r24	; 0x15
    3c78:	9e 8b       	std	Y+22, r25	; 0x16
    3c7a:	af 8b       	std	Y+23, r26	; 0x17
    3c7c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c7e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c80:	7e 89       	ldd	r23, Y+22	; 0x16
    3c82:	8f 89       	ldd	r24, Y+23	; 0x17
    3c84:	98 8d       	ldd	r25, Y+24	; 0x18
    3c86:	2b ea       	ldi	r18, 0xAB	; 171
    3c88:	3a ea       	ldi	r19, 0xAA	; 170
    3c8a:	4a ea       	ldi	r20, 0xAA	; 170
    3c8c:	50 e4       	ldi	r21, 0x40	; 64
    3c8e:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    3c92:	dc 01       	movw	r26, r24
    3c94:	cb 01       	movw	r24, r22
    3c96:	89 8b       	std	Y+17, r24	; 0x11
    3c98:	9a 8b       	std	Y+18, r25	; 0x12
    3c9a:	ab 8b       	std	Y+19, r26	; 0x13
    3c9c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3c9e:	69 89       	ldd	r22, Y+17	; 0x11
    3ca0:	7a 89       	ldd	r23, Y+18	; 0x12
    3ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	40 e8       	ldi	r20, 0x80	; 128
    3cac:	5f e3       	ldi	r21, 0x3F	; 63
    3cae:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    3cb2:	88 23       	and	r24, r24
    3cb4:	1c f4       	brge	.+6      	; 0x3cbc <ultraSonic_u16GetDistance+0x7c>
		__ticks = 1;
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	88 8b       	std	Y+16, r24	; 0x10
    3cba:	91 c0       	rjmp	.+290    	; 0x3dde <ultraSonic_u16GetDistance+0x19e>
	else if (__tmp > 255)
    3cbc:	69 89       	ldd	r22, Y+17	; 0x11
    3cbe:	7a 89       	ldd	r23, Y+18	; 0x12
    3cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	4f e7       	ldi	r20, 0x7F	; 127
    3cca:	53 e4       	ldi	r21, 0x43	; 67
    3ccc:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    3cd0:	18 16       	cp	r1, r24
    3cd2:	0c f0       	brlt	.+2      	; 0x3cd6 <ultraSonic_u16GetDistance+0x96>
    3cd4:	7b c0       	rjmp	.+246    	; 0x3dcc <ultraSonic_u16GetDistance+0x18c>
	{
		_delay_ms(__us / 1000.0);
    3cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3cda:	8f 89       	ldd	r24, Y+23	; 0x17
    3cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	4a e7       	ldi	r20, 0x7A	; 122
    3ce4:	54 e4       	ldi	r21, 0x44	; 68
    3ce6:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	8c 87       	std	Y+12, r24	; 0x0c
    3cf0:	9d 87       	std	Y+13, r25	; 0x0d
    3cf2:	ae 87       	std	Y+14, r26	; 0x0e
    3cf4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf6:	6c 85       	ldd	r22, Y+12	; 0x0c
    3cf8:	7d 85       	ldd	r23, Y+13	; 0x0d
    3cfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    3cfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	4a e7       	ldi	r20, 0x7A	; 122
    3d04:	55 e4       	ldi	r21, 0x45	; 69
    3d06:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	88 87       	std	Y+8, r24	; 0x08
    3d10:	99 87       	std	Y+9, r25	; 0x09
    3d12:	aa 87       	std	Y+10, r26	; 0x0a
    3d14:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3d16:	68 85       	ldd	r22, Y+8	; 0x08
    3d18:	79 85       	ldd	r23, Y+9	; 0x09
    3d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	40 e8       	ldi	r20, 0x80	; 128
    3d24:	5f e3       	ldi	r21, 0x3F	; 63
    3d26:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    3d2a:	88 23       	and	r24, r24
    3d2c:	2c f4       	brge	.+10     	; 0x3d38 <ultraSonic_u16GetDistance+0xf8>
		__ticks = 1;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	9f 83       	std	Y+7, r25	; 0x07
    3d34:	8e 83       	std	Y+6, r24	; 0x06
    3d36:	3f c0       	rjmp	.+126    	; 0x3db6 <ultraSonic_u16GetDistance+0x176>
	else if (__tmp > 65535)
    3d38:	68 85       	ldd	r22, Y+8	; 0x08
    3d3a:	79 85       	ldd	r23, Y+9	; 0x09
    3d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	3f ef       	ldi	r19, 0xFF	; 255
    3d44:	4f e7       	ldi	r20, 0x7F	; 127
    3d46:	57 e4       	ldi	r21, 0x47	; 71
    3d48:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    3d4c:	18 16       	cp	r1, r24
    3d4e:	4c f5       	brge	.+82     	; 0x3da2 <ultraSonic_u16GetDistance+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d50:	6c 85       	ldd	r22, Y+12	; 0x0c
    3d52:	7d 85       	ldd	r23, Y+13	; 0x0d
    3d54:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d56:	9f 85       	ldd	r25, Y+15	; 0x0f
    3d58:	20 e0       	ldi	r18, 0x00	; 0
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	40 e2       	ldi	r20, 0x20	; 32
    3d5e:	51 e4       	ldi	r21, 0x41	; 65
    3d60:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	bc 01       	movw	r22, r24
    3d6a:	cd 01       	movw	r24, r26
    3d6c:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	9f 83       	std	Y+7, r25	; 0x07
    3d76:	8e 83       	std	Y+6, r24	; 0x06
    3d78:	0f c0       	rjmp	.+30     	; 0x3d98 <ultraSonic_u16GetDistance+0x158>
    3d7a:	80 e9       	ldi	r24, 0x90	; 144
    3d7c:	91 e0       	ldi	r25, 0x01	; 1
    3d7e:	9d 83       	std	Y+5, r25	; 0x05
    3d80:	8c 83       	std	Y+4, r24	; 0x04
    3d82:	8c 81       	ldd	r24, Y+4	; 0x04
    3d84:	9d 81       	ldd	r25, Y+5	; 0x05
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	f1 f7       	brne	.-4      	; 0x3d86 <ultraSonic_u16GetDistance+0x146>
    3d8a:	9d 83       	std	Y+5, r25	; 0x05
    3d8c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d90:	9f 81       	ldd	r25, Y+7	; 0x07
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	9f 83       	std	Y+7, r25	; 0x07
    3d96:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d98:	8e 81       	ldd	r24, Y+6	; 0x06
    3d9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	69 f7       	brne	.-38     	; 0x3d7a <ultraSonic_u16GetDistance+0x13a>
    3da0:	24 c0       	rjmp	.+72     	; 0x3dea <ultraSonic_u16GetDistance+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da2:	68 85       	ldd	r22, Y+8	; 0x08
    3da4:	79 85       	ldd	r23, Y+9	; 0x09
    3da6:	8a 85       	ldd	r24, Y+10	; 0x0a
    3da8:	9b 85       	ldd	r25, Y+11	; 0x0b
    3daa:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	9f 83       	std	Y+7, r25	; 0x07
    3db4:	8e 83       	std	Y+6, r24	; 0x06
    3db6:	8e 81       	ldd	r24, Y+6	; 0x06
    3db8:	9f 81       	ldd	r25, Y+7	; 0x07
    3dba:	9b 83       	std	Y+3, r25	; 0x03
    3dbc:	8a 83       	std	Y+2, r24	; 0x02
    3dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    3dc2:	01 97       	sbiw	r24, 0x01	; 1
    3dc4:	f1 f7       	brne	.-4      	; 0x3dc2 <ultraSonic_u16GetDistance+0x182>
    3dc6:	9b 83       	std	Y+3, r25	; 0x03
    3dc8:	8a 83       	std	Y+2, r24	; 0x02
    3dca:	0f c0       	rjmp	.+30     	; 0x3dea <ultraSonic_u16GetDistance+0x1aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3dcc:	69 89       	ldd	r22, Y+17	; 0x11
    3dce:	7a 89       	ldd	r23, Y+18	; 0x12
    3dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3dd4:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	88 8b       	std	Y+16, r24	; 0x10
    3dde:	88 89       	ldd	r24, Y+16	; 0x10
    3de0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
    3de4:	8a 95       	dec	r24
    3de6:	f1 f7       	brne	.-4      	; 0x3de4 <ultraSonic_u16GetDistance+0x1a4>
    3de8:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(10);

	DIO_enuSetPinValue(ultraSonic_Instance->TRIG_PORT, ultraSonic_Instance->TRIG_PIN, DIO_u8LOW);
    3dea:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3dec:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3dee:	82 81       	ldd	r24, Z+2	; 0x02
    3df0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3df2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3df4:	93 81       	ldd	r25, Z+3	; 0x03
    3df6:	69 2f       	mov	r22, r25
    3df8:	40 e0       	ldi	r20, 0x00	; 0
    3dfa:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>


	// Wait for echo pin to go high, indicating the start of distance measurement

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    3dfe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3e00:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3e02:	80 81       	ld	r24, Z
    3e04:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3e06:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3e08:	91 81       	ldd	r25, Z+1	; 0x01
    3e0a:	9e 01       	movw	r18, r28
    3e0c:	27 5e       	subi	r18, 0xE7	; 231
    3e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e10:	69 2f       	mov	r22, r25
    3e12:	a9 01       	movw	r20, r18
    3e14:	0e 94 95 1a 	call	0x352a	; 0x352a <DIO_enuGetPinValue>
    3e18:	0d c0       	rjmp	.+26     	; 0x3e34 <ultraSonic_u16GetDistance+0x1f4>
	while(!Local_u8EchoPinStatus){
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    3e1a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3e1c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3e1e:	80 81       	ld	r24, Z
    3e20:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3e22:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3e24:	91 81       	ldd	r25, Z+1	; 0x01
    3e26:	9e 01       	movw	r18, r28
    3e28:	27 5e       	subi	r18, 0xE7	; 231
    3e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e2c:	69 2f       	mov	r22, r25
    3e2e:	a9 01       	movw	r20, r18
    3e30:	0e 94 95 1a 	call	0x352a	; 0x352a <DIO_enuGetPinValue>


	// Wait for echo pin to go high, indicating the start of distance measurement

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	while(!Local_u8EchoPinStatus){
    3e34:	89 8d       	ldd	r24, Y+25	; 0x19
    3e36:	88 23       	and	r24, r24
    3e38:	81 f3       	breq	.-32     	; 0x3e1a <ultraSonic_u16GetDistance+0x1da>
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	}

	RESET_TIMER1_COUNTER();
    3e3a:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <RESET_TIMER1_COUNTER>

	// Wait for echo pin to go low (reflected pulse received)

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    3e3e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3e40:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3e42:	80 81       	ld	r24, Z
    3e44:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3e46:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3e48:	91 81       	ldd	r25, Z+1	; 0x01
    3e4a:	9e 01       	movw	r18, r28
    3e4c:	27 5e       	subi	r18, 0xE7	; 231
    3e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e50:	69 2f       	mov	r22, r25
    3e52:	a9 01       	movw	r20, r18
    3e54:	0e 94 95 1a 	call	0x352a	; 0x352a <DIO_enuGetPinValue>
    3e58:	0d c0       	rjmp	.+26     	; 0x3e74 <ultraSonic_u16GetDistance+0x234>
	while(Local_u8EchoPinStatus){
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
    3e5a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3e5c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3e5e:	80 81       	ld	r24, Z
    3e60:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3e62:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3e64:	91 81       	ldd	r25, Z+1	; 0x01
    3e66:	9e 01       	movw	r18, r28
    3e68:	27 5e       	subi	r18, 0xE7	; 231
    3e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6c:	69 2f       	mov	r22, r25
    3e6e:	a9 01       	movw	r20, r18
    3e70:	0e 94 95 1a 	call	0x352a	; 0x352a <DIO_enuGetPinValue>
	RESET_TIMER1_COUNTER();

	// Wait for echo pin to go low (reflected pulse received)

	DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	while(Local_u8EchoPinStatus){
    3e74:	89 8d       	ldd	r24, Y+25	; 0x19
    3e76:	88 23       	and	r24, r24
    3e78:	81 f7       	brne	.-32     	; 0x3e5a <ultraSonic_u16GetDistance+0x21a>
		DIO_enuGetPinValue(ultraSonic_Instance->ECHO_PORT, ultraSonic_Instance->ECHO_PIN, &Local_u8EchoPinStatus);
	}

	ultraSonic_Instance->measuredDistance_InCm = TIMER1_u16ReadCount() / 58;
    3e7a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <TIMER1_u16ReadCount>
    3e7e:	2a e3       	ldi	r18, 0x3A	; 58
    3e80:	30 e0       	ldi	r19, 0x00	; 0
    3e82:	b9 01       	movw	r22, r18
    3e84:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <__udivmodhi4>
    3e88:	cb 01       	movw	r24, r22
    3e8a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3e8c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    3e8e:	95 83       	std	Z+5, r25	; 0x05
    3e90:	84 83       	std	Z+4, r24	; 0x04
}
    3e92:	6b 96       	adiw	r28, 0x1b	; 27
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	f8 94       	cli
    3e98:	de bf       	out	0x3e, r29	; 62
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	cd bf       	out	0x3d, r28	; 61
    3e9e:	cf 91       	pop	r28
    3ea0:	df 91       	pop	r29
    3ea2:	08 95       	ret

00003ea4 <servo_init>:
//ErrorStatus_t DIO_enuSetPinDirection(
//	uint8_t Copy_u8PortID,
//	uint8_t Copy_u8PinID,
//	uint8_t Copy_u8Direction){

void servo_init(){
    3ea4:	df 93       	push	r29
    3ea6:	cf 93       	push	r28
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
	 * - For more precise angle control, choose prescaler lower than 8 (ex. 1)
	 * - you can output two different signals at channel A and Channel B
	 */


	TIMER1_voidInit();
    3eac:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TIMER1_voidInit>
}
    3eb0:	cf 91       	pop	r28
    3eb2:	df 91       	pop	r29
    3eb4:	08 95       	ret

00003eb6 <servo_SetAngle>:



void servo_SetAngle(uint8_t copy_u8Angle,  uint8_t copy_u8Channel) {
    3eb6:	df 93       	push	r29
    3eb8:	cf 93       	push	r28
    3eba:	cd b7       	in	r28, 0x3d	; 61
    3ebc:	de b7       	in	r29, 0x3e	; 62
    3ebe:	2a 97       	sbiw	r28, 0x0a	; 10
    3ec0:	0f b6       	in	r0, 0x3f	; 63
    3ec2:	f8 94       	cli
    3ec4:	de bf       	out	0x3e, r29	; 62
    3ec6:	0f be       	out	0x3f, r0	; 63
    3ec8:	cd bf       	out	0x3d, r28	; 61
    3eca:	89 87       	std	Y+9, r24	; 0x09
    3ecc:	6a 87       	std	Y+10, r22	; 0x0a


	// Step 1: Convert the angle to Ton (pulse width) in milliseconds
    double tonMilliseconds = 1000.0 + ((double)copy_u8Angle / 180.0) * 1000.0;
    3ece:	89 85       	ldd	r24, Y+9	; 0x09
    3ed0:	88 2f       	mov	r24, r24
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	a0 e0       	ldi	r26, 0x00	; 0
    3ed6:	b0 e0       	ldi	r27, 0x00	; 0
    3ed8:	bc 01       	movw	r22, r24
    3eda:	cd 01       	movw	r24, r26
    3edc:	0e 94 c9 05 	call	0xb92	; 0xb92 <__floatunsisf>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	bc 01       	movw	r22, r24
    3ee6:	cd 01       	movw	r24, r26
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	44 e3       	ldi	r20, 0x34	; 52
    3eee:	53 e4       	ldi	r21, 0x43	; 67
    3ef0:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	bc 01       	movw	r22, r24
    3efa:	cd 01       	movw	r24, r26
    3efc:	20 e0       	ldi	r18, 0x00	; 0
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	4a e7       	ldi	r20, 0x7A	; 122
    3f02:	54 e4       	ldi	r21, 0x44	; 68
    3f04:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	bc 01       	movw	r22, r24
    3f0e:	cd 01       	movw	r24, r26
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	4a e7       	ldi	r20, 0x7A	; 122
    3f16:	54 e4       	ldi	r21, 0x44	; 68
    3f18:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <__addsf3>
    3f1c:	dc 01       	movw	r26, r24
    3f1e:	cb 01       	movw	r24, r22
    3f20:	8d 83       	std	Y+5, r24	; 0x05
    3f22:	9e 83       	std	Y+6, r25	; 0x06
    3f24:	af 83       	std	Y+7, r26	; 0x07
    3f26:	b8 87       	std	Y+8, r27	; 0x08

    // Step 2: Calculate the duty cycle for the PWM signal (period = 20 ms for 50 Hz)
    double dutyCycle = (tonMilliseconds / 20000.0) * 100.0;  // Convert pulse width to percentage of 20 ms period
    3f28:	6d 81       	ldd	r22, Y+5	; 0x05
    3f2a:	7e 81       	ldd	r23, Y+6	; 0x06
    3f2c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f2e:	98 85       	ldd	r25, Y+8	; 0x08
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e4       	ldi	r19, 0x40	; 64
    3f34:	4c e9       	ldi	r20, 0x9C	; 156
    3f36:	56 e4       	ldi	r21, 0x46	; 70
    3f38:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	bc 01       	movw	r22, r24
    3f42:	cd 01       	movw	r24, r26
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	48 ec       	ldi	r20, 0xC8	; 200
    3f4a:	52 e4       	ldi	r21, 0x42	; 66
    3f4c:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    3f50:	dc 01       	movw	r26, r24
    3f52:	cb 01       	movw	r24, r22
    3f54:	89 83       	std	Y+1, r24	; 0x01
    3f56:	9a 83       	std	Y+2, r25	; 0x02
    3f58:	ab 83       	std	Y+3, r26	; 0x03
    3f5a:	bc 83       	std	Y+4, r27	; 0x04

    // Step 3: Set the PWM signal with the calculated duty cycle and fixed 50 Hz frequency
    TIMER1_voidSetPWM_16bit(dutyCycle, 50, copy_u8Channel);  // Use the provided function
    3f5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f5e:	28 2f       	mov	r18, r24
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	89 81       	ldd	r24, Y+1	; 0x01
    3f64:	9a 81       	ldd	r25, Y+2	; 0x02
    3f66:	ab 81       	ldd	r26, Y+3	; 0x03
    3f68:	bc 81       	ldd	r27, Y+4	; 0x04
    3f6a:	bc 01       	movw	r22, r24
    3f6c:	cd 01       	movw	r24, r26
    3f6e:	42 e3       	ldi	r20, 0x32	; 50
    3f70:	50 e0       	ldi	r21, 0x00	; 0
    3f72:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <TIMER1_voidSetPWM_16bit>
}
    3f76:	2a 96       	adiw	r28, 0x0a	; 10
    3f78:	0f b6       	in	r0, 0x3f	; 63
    3f7a:	f8 94       	cli
    3f7c:	de bf       	out	0x3e, r29	; 62
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	cd bf       	out	0x3d, r28	; 61
    3f82:	cf 91       	pop	r28
    3f84:	df 91       	pop	r29
    3f86:	08 95       	ret

00003f88 <keypad_enuInit>:
#include "keypad_HAL_config.h"
#include "keypad_HAL_interface.h"
///**********************************************************/


ErrorStatus_t keypad_enuInit(void){
    3f88:	df 93       	push	r29
    3f8a:	cf 93       	push	r28
    3f8c:	0f 92       	push	r0
    3f8e:	cd b7       	in	r28, 0x3d	; 61
    3f90:	de b7       	in	r29, 0x3e	; 62

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    3f92:	19 82       	std	Y+1, r1	; 0x01

	/************************ !Rows Pins! ************************/
	 DIO_enuSetPinDirection(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8OUTPUT);
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	64 e0       	ldi	r22, 0x04	; 4
    3f98:	41 e0       	ldi	r20, 0x01	; 1
    3f9a:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8OUTPUT);
    3f9e:	81 e0       	ldi	r24, 0x01	; 1
    3fa0:	65 e0       	ldi	r22, 0x05	; 5
    3fa2:	41 e0       	ldi	r20, 0x01	; 1
    3fa4:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8OUTPUT);
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	66 e0       	ldi	r22, 0x06	; 6
    3fac:	41 e0       	ldi	r20, 0x01	; 1
    3fae:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8OUTPUT);
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	67 e0       	ldi	r22, 0x07	; 7
    3fb6:	41 e0       	ldi	r20, 0x01	; 1
    3fb8:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>

	 DIO_enuSetPinValue(KEYPAD_ROW1_PORT, KEYPAD_ROW1_PIN, DIO_u8HIGH);
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
    3fbe:	64 e0       	ldi	r22, 0x04	; 4
    3fc0:	41 e0       	ldi	r20, 0x01	; 1
    3fc2:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW2_PORT, KEYPAD_ROW2_PIN, DIO_u8HIGH);
    3fc6:	81 e0       	ldi	r24, 0x01	; 1
    3fc8:	65 e0       	ldi	r22, 0x05	; 5
    3fca:	41 e0       	ldi	r20, 0x01	; 1
    3fcc:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW3_PORT, KEYPAD_ROW3_PIN, DIO_u8HIGH);
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	66 e0       	ldi	r22, 0x06	; 6
    3fd4:	41 e0       	ldi	r20, 0x01	; 1
    3fd6:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_ROW4_PORT, KEYPAD_ROW4_PIN, DIO_u8HIGH);
    3fda:	81 e0       	ldi	r24, 0x01	; 1
    3fdc:	67 e0       	ldi	r22, 0x07	; 7
    3fde:	41 e0       	ldi	r20, 0x01	; 1
    3fe0:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	/****************************************************************/


	/************************* !Columns Pins! **************************/
	 DIO_enuSetPinDirection(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8INPUT);
    3fe4:	83 e0       	ldi	r24, 0x03	; 3
    3fe6:	60 e0       	ldi	r22, 0x00	; 0
    3fe8:	40 e0       	ldi	r20, 0x00	; 0
    3fea:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8INPUT);
    3fee:	83 e0       	ldi	r24, 0x03	; 3
    3ff0:	61 e0       	ldi	r22, 0x01	; 1
    3ff2:	40 e0       	ldi	r20, 0x00	; 0
    3ff4:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8INPUT);
    3ff8:	83 e0       	ldi	r24, 0x03	; 3
    3ffa:	64 e0       	ldi	r22, 0x04	; 4
    3ffc:	40 e0       	ldi	r20, 0x00	; 0
    3ffe:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	 DIO_enuSetPinDirection(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8INPUT);
    4002:	83 e0       	ldi	r24, 0x03	; 3
    4004:	65 e0       	ldi	r22, 0x05	; 5
    4006:	40 e0       	ldi	r20, 0x00	; 0
    4008:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>

	// To activate internal input-pull resistor we set corresponding
	// pin to high
	 DIO_enuSetPinValue(KEYPAD_COL1_PORT, KEYPAD_COL1_PIN, DIO_u8HIGH);
    400c:	83 e0       	ldi	r24, 0x03	; 3
    400e:	60 e0       	ldi	r22, 0x00	; 0
    4010:	41 e0       	ldi	r20, 0x01	; 1
    4012:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL2_PORT, KEYPAD_COL2_PIN, DIO_u8HIGH);
    4016:	83 e0       	ldi	r24, 0x03	; 3
    4018:	61 e0       	ldi	r22, 0x01	; 1
    401a:	41 e0       	ldi	r20, 0x01	; 1
    401c:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL3_PORT, KEYPAD_COL3_PIN, DIO_u8HIGH);
    4020:	83 e0       	ldi	r24, 0x03	; 3
    4022:	64 e0       	ldi	r22, 0x04	; 4
    4024:	41 e0       	ldi	r20, 0x01	; 1
    4026:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	 DIO_enuSetPinValue(KEYPAD_COL4_PORT, KEYPAD_COL4_PIN, DIO_u8HIGH);
    402a:	83 e0       	ldi	r24, 0x03	; 3
    402c:	65 e0       	ldi	r22, 0x05	; 5
    402e:	41 e0       	ldi	r20, 0x01	; 1
    4030:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>

	/****************************************************************/


	Local_enuErrrorState = ERROR_STATUS_OK;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    4038:	89 81       	ldd	r24, Y+1	; 0x01
}
    403a:	0f 90       	pop	r0
    403c:	cf 91       	pop	r28
    403e:	df 91       	pop	r29
    4040:	08 95       	ret

00004042 <LCD_vidSetRowPattern>:

static void LCD_vidSetRowPattern(uint8_t Copy_u8Row){
    4042:	df 93       	push	r29
    4044:	cf 93       	push	r28
    4046:	cd b7       	in	r28, 0x3d	; 61
    4048:	de b7       	in	r29, 0x3e	; 62
    404a:	2a 97       	sbiw	r28, 0x0a	; 10
    404c:	0f b6       	in	r0, 0x3f	; 63
    404e:	f8 94       	cli
    4050:	de bf       	out	0x3e, r29	; 62
    4052:	0f be       	out	0x3f, r0	; 63
    4054:	cd bf       	out	0x3d, r28	; 61
    4056:	8a 87       	std	Y+10, r24	; 0x0a

	uint8_t Local_u8RowIterator = 0;
    4058:	19 82       	std	Y+1, r1	; 0x01



	uint8_t Local_u8RowsArrayPORT[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PORT, KEYPAD_ROW2_PORT,
			KEYPAD_ROW3_PORT, KEYPAD_ROW4_PORT};
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	8a 83       	std	Y+2, r24	; 0x02
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	8b 83       	std	Y+3, r24	; 0x03
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	8c 83       	std	Y+4, r24	; 0x04
    4066:	81 e0       	ldi	r24, 0x01	; 1
    4068:	8d 83       	std	Y+5, r24	; 0x05

	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};
    406a:	84 e0       	ldi	r24, 0x04	; 4
    406c:	8e 83       	std	Y+6, r24	; 0x06
    406e:	85 e0       	ldi	r24, 0x05	; 5
    4070:	8f 83       	std	Y+7, r24	; 0x07
    4072:	86 e0       	ldi	r24, 0x06	; 6
    4074:	88 87       	std	Y+8, r24	; 0x08
    4076:	87 e0       	ldi	r24, 0x07	; 7
    4078:	89 87       	std	Y+9, r24	; 0x09

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    407a:	19 82       	std	Y+1, r1	; 0x01
    407c:	36 c0       	rjmp	.+108    	; 0x40ea <LCD_vidSetRowPattern+0xa8>

		if(Local_u8RowIterator == Copy_u8Row){
    407e:	99 81       	ldd	r25, Y+1	; 0x01
    4080:	8a 85       	ldd	r24, Y+10	; 0x0a
    4082:	98 17       	cp	r25, r24
    4084:	c1 f4       	brne	.+48     	; 0x40b6 <LCD_vidSetRowPattern+0x74>

			DIO_enuSetPinValue(
    4086:	89 81       	ldd	r24, Y+1	; 0x01
    4088:	28 2f       	mov	r18, r24
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	ce 01       	movw	r24, r28
    408e:	02 96       	adiw	r24, 0x02	; 2
    4090:	fc 01       	movw	r30, r24
    4092:	e2 0f       	add	r30, r18
    4094:	f3 1f       	adc	r31, r19
    4096:	40 81       	ld	r20, Z
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	28 2f       	mov	r18, r24
    409c:	30 e0       	ldi	r19, 0x00	; 0
    409e:	ce 01       	movw	r24, r28
    40a0:	06 96       	adiw	r24, 0x06	; 6
    40a2:	fc 01       	movw	r30, r24
    40a4:	e2 0f       	add	r30, r18
    40a6:	f3 1f       	adc	r31, r19
    40a8:	90 81       	ld	r25, Z
    40aa:	84 2f       	mov	r24, r20
    40ac:	69 2f       	mov	r22, r25
    40ae:	40 e0       	ldi	r20, 0x00	; 0
    40b0:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    40b4:	17 c0       	rjmp	.+46     	; 0x40e4 <LCD_vidSetRowPattern+0xa2>
					Local_u8RowsArrayPIN[Local_u8RowIterator],
					DIO_u8LOW);
		}

		else{
			DIO_enuSetPinValue(
    40b6:	89 81       	ldd	r24, Y+1	; 0x01
    40b8:	28 2f       	mov	r18, r24
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	ce 01       	movw	r24, r28
    40be:	02 96       	adiw	r24, 0x02	; 2
    40c0:	fc 01       	movw	r30, r24
    40c2:	e2 0f       	add	r30, r18
    40c4:	f3 1f       	adc	r31, r19
    40c6:	40 81       	ld	r20, Z
    40c8:	89 81       	ldd	r24, Y+1	; 0x01
    40ca:	28 2f       	mov	r18, r24
    40cc:	30 e0       	ldi	r19, 0x00	; 0
    40ce:	ce 01       	movw	r24, r28
    40d0:	06 96       	adiw	r24, 0x06	; 6
    40d2:	fc 01       	movw	r30, r24
    40d4:	e2 0f       	add	r30, r18
    40d6:	f3 1f       	adc	r31, r19
    40d8:	90 81       	ld	r25, Z
    40da:	84 2f       	mov	r24, r20
    40dc:	69 2f       	mov	r22, r25
    40de:	41 e0       	ldi	r20, 0x01	; 1
    40e0:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	uint8_t Local_u8RowsArrayPIN[KEYPAD_ROW_NUM] = {
			KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN,
			KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN
	};

	for(Local_u8RowIterator = 0; Local_u8RowIterator< KEYPAD_ROW_NUM; Local_u8RowIterator++){
    40e4:	89 81       	ldd	r24, Y+1	; 0x01
    40e6:	8f 5f       	subi	r24, 0xFF	; 255
    40e8:	89 83       	std	Y+1, r24	; 0x01
    40ea:	89 81       	ldd	r24, Y+1	; 0x01
    40ec:	84 30       	cpi	r24, 0x04	; 4
    40ee:	38 f2       	brcs	.-114    	; 0x407e <LCD_vidSetRowPattern+0x3c>
					DIO_u8HIGH);
		}
	}


}
    40f0:	2a 96       	adiw	r28, 0x0a	; 10
    40f2:	0f b6       	in	r0, 0x3f	; 63
    40f4:	f8 94       	cli
    40f6:	de bf       	out	0x3e, r29	; 62
    40f8:	0f be       	out	0x3f, r0	; 63
    40fa:	cd bf       	out	0x3d, r28	; 61
    40fc:	cf 91       	pop	r28
    40fe:	df 91       	pop	r29
    4100:	08 95       	ret

00004102 <keypad_enuGetPressedKey>:

ErrorStatus_t keypad_enuGetPressedKey(uint8_t* Copy_pu8KeyValue){
    4102:	df 93       	push	r29
    4104:	cf 93       	push	r28
    4106:	cd b7       	in	r28, 0x3d	; 61
    4108:	de b7       	in	r29, 0x3e	; 62
    410a:	2f 97       	sbiw	r28, 0x0f	; 15
    410c:	0f b6       	in	r0, 0x3f	; 63
    410e:	f8 94       	cli
    4110:	de bf       	out	0x3e, r29	; 62
    4112:	0f be       	out	0x3f, r0	; 63
    4114:	cd bf       	out	0x3d, r28	; 61
    4116:	9e 87       	std	Y+14, r25	; 0x0e
    4118:	8d 87       	std	Y+13, r24	; 0x0d
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    411a:	1b 82       	std	Y+3, r1	; 0x03


	if(Copy_pu8KeyValue == NULL){
    411c:	8d 85       	ldd	r24, Y+13	; 0x0d
    411e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4120:	00 97       	sbiw	r24, 0x00	; 0
    4122:	19 f4       	brne	.+6      	; 0x412a <keypad_enuGetPressedKey+0x28>
		return Local_enuErrrorState;
    4124:	8b 81       	ldd	r24, Y+3	; 0x03
    4126:	8f 87       	std	Y+15, r24	; 0x0f
    4128:	7e c0       	rjmp	.+252    	; 0x4226 <keypad_enuGetPressedKey+0x124>
	}

	else{

		uint8_t Local_u8KeyStatus = 1;
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t Local_u8RowIterator = 0;
    412e:	1a 82       	std	Y+2, r1	; 0x02
		uint8_t Local_u8COLIterator = 0;
    4130:	19 82       	std	Y+1, r1	; 0x01

		uint8_t Local_u8Columns_ArrayPORT[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PORT, KEYPAD_COL2_PORT,
				KEYPAD_COL3_PORT, KEYPAD_COL4_PORT};
    4132:	83 e0       	ldi	r24, 0x03	; 3
    4134:	8d 83       	std	Y+5, r24	; 0x05
    4136:	83 e0       	ldi	r24, 0x03	; 3
    4138:	8e 83       	std	Y+6, r24	; 0x06
    413a:	83 e0       	ldi	r24, 0x03	; 3
    413c:	8f 83       	std	Y+7, r24	; 0x07
    413e:	83 e0       	ldi	r24, 0x03	; 3
    4140:	88 87       	std	Y+8, r24	; 0x08

		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};
    4142:	19 86       	std	Y+9, r1	; 0x09
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	8a 87       	std	Y+10, r24	; 0x0a
    4148:	84 e0       	ldi	r24, 0x04	; 4
    414a:	8b 87       	std	Y+11, r24	; 0x0b
    414c:	85 e0       	ldi	r24, 0x05	; 5
    414e:	8c 87       	std	Y+12, r24	; 0x0c

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    4150:	1a 82       	std	Y+2, r1	; 0x02
    4152:	63 c0       	rjmp	.+198    	; 0x421a <keypad_enuGetPressedKey+0x118>

			LCD_vidSetRowPattern(Local_u8RowIterator);
    4154:	8a 81       	ldd	r24, Y+2	; 0x02
    4156:	0e 94 21 20 	call	0x4042	; 0x4042 <LCD_vidSetRowPattern>


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    415a:	19 82       	std	Y+1, r1	; 0x01
    415c:	57 c0       	rjmp	.+174    	; 0x420c <keypad_enuGetPressedKey+0x10a>

				DIO_enuGetPinValue(
    415e:	89 81       	ldd	r24, Y+1	; 0x01
    4160:	28 2f       	mov	r18, r24
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	ce 01       	movw	r24, r28
    4166:	05 96       	adiw	r24, 0x05	; 5
    4168:	fc 01       	movw	r30, r24
    416a:	e2 0f       	add	r30, r18
    416c:	f3 1f       	adc	r31, r19
    416e:	40 81       	ld	r20, Z
    4170:	89 81       	ldd	r24, Y+1	; 0x01
    4172:	28 2f       	mov	r18, r24
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	ce 01       	movw	r24, r28
    4178:	09 96       	adiw	r24, 0x09	; 9
    417a:	fc 01       	movw	r30, r24
    417c:	e2 0f       	add	r30, r18
    417e:	f3 1f       	adc	r31, r19
    4180:	90 81       	ld	r25, Z
    4182:	9e 01       	movw	r18, r28
    4184:	2c 5f       	subi	r18, 0xFC	; 252
    4186:	3f 4f       	sbci	r19, 0xFF	; 255
    4188:	84 2f       	mov	r24, r20
    418a:	69 2f       	mov	r22, r25
    418c:	a9 01       	movw	r20, r18
    418e:	0e 94 95 1a 	call	0x352a	; 0x352a <DIO_enuGetPinValue>
						Local_u8Columns_ArrayPIN[Local_u8COLIterator],
						&Local_u8KeyStatus);



			     if(Local_u8KeyStatus == KEY_PRESSED) {
    4192:	8c 81       	ldd	r24, Y+4	; 0x04
    4194:	88 23       	and	r24, r24
    4196:	b9 f5       	brne	.+110    	; 0x4206 <keypad_enuGetPressedKey+0x104>


			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];
    4198:	8a 81       	ldd	r24, Y+2	; 0x02
    419a:	88 2f       	mov	r24, r24
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	9c 01       	movw	r18, r24
    41a0:	22 0f       	add	r18, r18
    41a2:	33 1f       	adc	r19, r19
    41a4:	22 0f       	add	r18, r18
    41a6:	33 1f       	adc	r19, r19
    41a8:	89 81       	ldd	r24, Y+1	; 0x01
    41aa:	88 2f       	mov	r24, r24
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	82 0f       	add	r24, r18
    41b0:	93 1f       	adc	r25, r19
    41b2:	fc 01       	movw	r30, r24
    41b4:	ec 58       	subi	r30, 0x8C	; 140
    41b6:	fe 4f       	sbci	r31, 0xFE	; 254
    41b8:	80 81       	ld	r24, Z
    41ba:	ed 85       	ldd	r30, Y+13	; 0x0d
    41bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    41be:	80 83       	st	Z, r24
    41c0:	1a c0       	rjmp	.+52     	; 0x41f6 <keypad_enuGetPressedKey+0xf4>



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
			    			DIO_enuGetPinValue(
    41c2:	89 81       	ldd	r24, Y+1	; 0x01
    41c4:	28 2f       	mov	r18, r24
    41c6:	30 e0       	ldi	r19, 0x00	; 0
    41c8:	ce 01       	movw	r24, r28
    41ca:	05 96       	adiw	r24, 0x05	; 5
    41cc:	fc 01       	movw	r30, r24
    41ce:	e2 0f       	add	r30, r18
    41d0:	f3 1f       	adc	r31, r19
    41d2:	40 81       	ld	r20, Z
    41d4:	89 81       	ldd	r24, Y+1	; 0x01
    41d6:	28 2f       	mov	r18, r24
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	ce 01       	movw	r24, r28
    41dc:	09 96       	adiw	r24, 0x09	; 9
    41de:	fc 01       	movw	r30, r24
    41e0:	e2 0f       	add	r30, r18
    41e2:	f3 1f       	adc	r31, r19
    41e4:	90 81       	ld	r25, Z
    41e6:	9e 01       	movw	r18, r28
    41e8:	2c 5f       	subi	r18, 0xFC	; 252
    41ea:	3f 4f       	sbci	r19, 0xFF	; 255
    41ec:	84 2f       	mov	r24, r20
    41ee:	69 2f       	mov	r22, r25
    41f0:	a9 01       	movw	r20, r18
    41f2:	0e 94 95 1a 	call	0x352a	; 0x352a <DIO_enuGetPinValue>

			    	 *Copy_pu8KeyValue = keypadOutput[(KEYPAD_ROW_NUM * Local_u8RowIterator) + Local_u8COLIterator];



			    	 while(Local_u8KeyStatus == KEY_PRESSED){
    41f6:	8c 81       	ldd	r24, Y+4	; 0x04
    41f8:	88 23       	and	r24, r24
    41fa:	19 f3       	breq	.-58     	; 0x41c2 <keypad_enuGetPressedKey+0xc0>
			    							Local_u8Columns_ArrayPIN[Local_u8COLIterator],
			    							&Local_u8KeyStatus);
			    	 }


			    	 Local_enuErrrorState = ERROR_STATUS_OK;
    41fc:	81 e0       	ldi	r24, 0x01	; 1
    41fe:	8b 83       	std	Y+3, r24	; 0x03
			    	 return Local_enuErrrorState;
    4200:	8b 81       	ldd	r24, Y+3	; 0x03
    4202:	8f 87       	std	Y+15, r24	; 0x0f
    4204:	10 c0       	rjmp	.+32     	; 0x4226 <keypad_enuGetPressedKey+0x124>
		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){

			LCD_vidSetRowPattern(Local_u8RowIterator);


			for( Local_u8COLIterator = 0; (Local_u8COLIterator <  KEYPAD_COL_NUM); Local_u8COLIterator++){
    4206:	89 81       	ldd	r24, Y+1	; 0x01
    4208:	8f 5f       	subi	r24, 0xFF	; 255
    420a:	89 83       	std	Y+1, r24	; 0x01
    420c:	89 81       	ldd	r24, Y+1	; 0x01
    420e:	84 30       	cpi	r24, 0x04	; 4
    4210:	08 f4       	brcc	.+2      	; 0x4214 <keypad_enuGetPressedKey+0x112>
    4212:	a5 cf       	rjmp	.-182    	; 0x415e <keypad_enuGetPressedKey+0x5c>
		uint8_t Local_u8Columns_ArrayPIN[KEYPAD_ROW_NUM] = {
				KEYPAD_COL1_PIN, KEYPAD_COL2_PIN,
				KEYPAD_COL3_PIN, KEYPAD_COL4_PIN
		};

		for( Local_u8RowIterator = 0; Local_u8RowIterator <  KEYPAD_ROW_NUM; Local_u8RowIterator++){
    4214:	8a 81       	ldd	r24, Y+2	; 0x02
    4216:	8f 5f       	subi	r24, 0xFF	; 255
    4218:	8a 83       	std	Y+2, r24	; 0x02
    421a:	8a 81       	ldd	r24, Y+2	; 0x02
    421c:	84 30       	cpi	r24, 0x04	; 4
    421e:	08 f4       	brcc	.+2      	; 0x4222 <keypad_enuGetPressedKey+0x120>
    4220:	99 cf       	rjmp	.-206    	; 0x4154 <keypad_enuGetPressedKey+0x52>
			      }
			}

		}
	}
	return Local_enuErrrorState;
    4222:	8b 81       	ldd	r24, Y+3	; 0x03
    4224:	8f 87       	std	Y+15, r24	; 0x0f
    4226:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4228:	2f 96       	adiw	r28, 0x0f	; 15
    422a:	0f b6       	in	r0, 0x3f	; 63
    422c:	f8 94       	cli
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	cd bf       	out	0x3d, r28	; 61
    4234:	cf 91       	pop	r28
    4236:	df 91       	pop	r29
    4238:	08 95       	ret

0000423a <LCD_enuInit>:
static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data);

/**********************************************************/


ErrorStatus_t LCD_enuInit(void){
    423a:	df 93       	push	r29
    423c:	cf 93       	push	r28
    423e:	cd b7       	in	r28, 0x3d	; 61
    4240:	de b7       	in	r29, 0x3e	; 62
    4242:	e9 97       	sbiw	r28, 0x39	; 57
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	de bf       	out	0x3e, r29	; 62
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	cd bf       	out	0x3d, r28	; 61
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    424e:	19 ae       	std	Y+57, r1	; 0x39


	/*********************** !Control Pins! ***********************/
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    4250:	80 e0       	ldi	r24, 0x00	; 0
    4252:	61 e0       	ldi	r22, 0x01	; 1
    4254:	41 e0       	ldi	r20, 0x01	; 1
    4256:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, RW_PIN, DIO_u8OUTPUT);
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	60 e0       	ldi	r22, 0x00	; 0
    425e:	41 e0       	ldi	r20, 0x01	; 1
    4260:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RS_PORT, EN_PIN, DIO_u8OUTPUT);
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	62 e0       	ldi	r22, 0x02	; 2
    4268:	41 e0       	ldi	r20, 0x01	; 1
    426a:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	/**************************************************************/


	/************************ !Data  Pins! ************************/
	DIO_enuSetPinDirection(DB7_PORT, DB7_PIN, DIO_u8OUTPUT);
    426e:	80 e0       	ldi	r24, 0x00	; 0
    4270:	66 e0       	ldi	r22, 0x06	; 6
    4272:	41 e0       	ldi	r20, 0x01	; 1
    4274:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB6_PORT, DB6_PIN, DIO_u8OUTPUT);
    4278:	80 e0       	ldi	r24, 0x00	; 0
    427a:	65 e0       	ldi	r22, 0x05	; 5
    427c:	41 e0       	ldi	r20, 0x01	; 1
    427e:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB5_PORT, DB5_PIN, DIO_u8OUTPUT);
    4282:	80 e0       	ldi	r24, 0x00	; 0
    4284:	64 e0       	ldi	r22, 0x04	; 4
    4286:	41 e0       	ldi	r20, 0x01	; 1
    4288:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DB4_PORT, DB4_PIN, DIO_u8OUTPUT);
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	63 e0       	ldi	r22, 0x03	; 3
    4290:	41 e0       	ldi	r20, 0x01	; 1
    4292:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
    4296:	80 e0       	ldi	r24, 0x00	; 0
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	ac e0       	ldi	r26, 0x0C	; 12
    429c:	b2 e4       	ldi	r27, 0x42	; 66
    429e:	8d ab       	std	Y+53, r24	; 0x35
    42a0:	9e ab       	std	Y+54, r25	; 0x36
    42a2:	af ab       	std	Y+55, r26	; 0x37
    42a4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42a6:	6d a9       	ldd	r22, Y+53	; 0x35
    42a8:	7e a9       	ldd	r23, Y+54	; 0x36
    42aa:	8f a9       	ldd	r24, Y+55	; 0x37
    42ac:	98 ad       	ldd	r25, Y+56	; 0x38
    42ae:	20 e0       	ldi	r18, 0x00	; 0
    42b0:	30 e0       	ldi	r19, 0x00	; 0
    42b2:	4a e7       	ldi	r20, 0x7A	; 122
    42b4:	55 e4       	ldi	r21, 0x45	; 69
    42b6:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	89 ab       	std	Y+49, r24	; 0x31
    42c0:	9a ab       	std	Y+50, r25	; 0x32
    42c2:	ab ab       	std	Y+51, r26	; 0x33
    42c4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    42c6:	69 a9       	ldd	r22, Y+49	; 0x31
    42c8:	7a a9       	ldd	r23, Y+50	; 0x32
    42ca:	8b a9       	ldd	r24, Y+51	; 0x33
    42cc:	9c a9       	ldd	r25, Y+52	; 0x34
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	40 e8       	ldi	r20, 0x80	; 128
    42d4:	5f e3       	ldi	r21, 0x3F	; 63
    42d6:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    42da:	88 23       	and	r24, r24
    42dc:	2c f4       	brge	.+10     	; 0x42e8 <LCD_enuInit+0xae>
		__ticks = 1;
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	90 e0       	ldi	r25, 0x00	; 0
    42e2:	98 ab       	std	Y+48, r25	; 0x30
    42e4:	8f a7       	std	Y+47, r24	; 0x2f
    42e6:	3f c0       	rjmp	.+126    	; 0x4366 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    42e8:	69 a9       	ldd	r22, Y+49	; 0x31
    42ea:	7a a9       	ldd	r23, Y+50	; 0x32
    42ec:	8b a9       	ldd	r24, Y+51	; 0x33
    42ee:	9c a9       	ldd	r25, Y+52	; 0x34
    42f0:	20 e0       	ldi	r18, 0x00	; 0
    42f2:	3f ef       	ldi	r19, 0xFF	; 255
    42f4:	4f e7       	ldi	r20, 0x7F	; 127
    42f6:	57 e4       	ldi	r21, 0x47	; 71
    42f8:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    42fc:	18 16       	cp	r1, r24
    42fe:	4c f5       	brge	.+82     	; 0x4352 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4300:	6d a9       	ldd	r22, Y+53	; 0x35
    4302:	7e a9       	ldd	r23, Y+54	; 0x36
    4304:	8f a9       	ldd	r24, Y+55	; 0x37
    4306:	98 ad       	ldd	r25, Y+56	; 0x38
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	40 e2       	ldi	r20, 0x20	; 32
    430e:	51 e4       	ldi	r21, 0x41	; 65
    4310:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    4314:	dc 01       	movw	r26, r24
    4316:	cb 01       	movw	r24, r22
    4318:	bc 01       	movw	r22, r24
    431a:	cd 01       	movw	r24, r26
    431c:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    4320:	dc 01       	movw	r26, r24
    4322:	cb 01       	movw	r24, r22
    4324:	98 ab       	std	Y+48, r25	; 0x30
    4326:	8f a7       	std	Y+47, r24	; 0x2f
    4328:	0f c0       	rjmp	.+30     	; 0x4348 <LCD_enuInit+0x10e>
    432a:	80 e9       	ldi	r24, 0x90	; 144
    432c:	91 e0       	ldi	r25, 0x01	; 1
    432e:	9e a7       	std	Y+46, r25	; 0x2e
    4330:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4332:	8d a5       	ldd	r24, Y+45	; 0x2d
    4334:	9e a5       	ldd	r25, Y+46	; 0x2e
    4336:	01 97       	sbiw	r24, 0x01	; 1
    4338:	f1 f7       	brne	.-4      	; 0x4336 <LCD_enuInit+0xfc>
    433a:	9e a7       	std	Y+46, r25	; 0x2e
    433c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    433e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4340:	98 a9       	ldd	r25, Y+48	; 0x30
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	98 ab       	std	Y+48, r25	; 0x30
    4346:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4348:	8f a5       	ldd	r24, Y+47	; 0x2f
    434a:	98 a9       	ldd	r25, Y+48	; 0x30
    434c:	00 97       	sbiw	r24, 0x00	; 0
    434e:	69 f7       	brne	.-38     	; 0x432a <LCD_enuInit+0xf0>
    4350:	14 c0       	rjmp	.+40     	; 0x437a <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4352:	69 a9       	ldd	r22, Y+49	; 0x31
    4354:	7a a9       	ldd	r23, Y+50	; 0x32
    4356:	8b a9       	ldd	r24, Y+51	; 0x33
    4358:	9c a9       	ldd	r25, Y+52	; 0x34
    435a:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    435e:	dc 01       	movw	r26, r24
    4360:	cb 01       	movw	r24, r22
    4362:	98 ab       	std	Y+48, r25	; 0x30
    4364:	8f a7       	std	Y+47, r24	; 0x2f
    4366:	8f a5       	ldd	r24, Y+47	; 0x2f
    4368:	98 a9       	ldd	r25, Y+48	; 0x30
    436a:	9c a7       	std	Y+44, r25	; 0x2c
    436c:	8b a7       	std	Y+43, r24	; 0x2b
    436e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4370:	9c a5       	ldd	r25, Y+44	; 0x2c
    4372:	01 97       	sbiw	r24, 0x01	; 1
    4374:	f1 f7       	brne	.-4      	; 0x4372 <LCD_enuInit+0x138>
    4376:	9c a7       	std	Y+44, r25	; 0x2c
    4378:	8b a7       	std	Y+43, r24	; 0x2b
		 * 			 (0 - 5x7 dot matrix)
		 * 			 (means 5dot in width and 7dot height)
		 */


			LCD_enuSendCommand(0x20);
    437a:	80 e2       	ldi	r24, 0x20	; 32
    437c:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
			LCD_enuSendCommand(0x20);
    4380:	80 e2       	ldi	r24, 0x20	; 32
    4382:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
			LCD_enuSendCommand(0x80);
    4386:	80 e8       	ldi	r24, 0x80	; 128
    4388:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
    438c:	80 e0       	ldi	r24, 0x00	; 0
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	a0 e8       	ldi	r26, 0x80	; 128
    4392:	bf e3       	ldi	r27, 0x3F	; 63
    4394:	8f a3       	std	Y+39, r24	; 0x27
    4396:	98 a7       	std	Y+40, r25	; 0x28
    4398:	a9 a7       	std	Y+41, r26	; 0x29
    439a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    439c:	6f a1       	ldd	r22, Y+39	; 0x27
    439e:	78 a5       	ldd	r23, Y+40	; 0x28
    43a0:	89 a5       	ldd	r24, Y+41	; 0x29
    43a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    43a4:	20 e0       	ldi	r18, 0x00	; 0
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	4a e7       	ldi	r20, 0x7A	; 122
    43aa:	55 e4       	ldi	r21, 0x45	; 69
    43ac:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	8b a3       	std	Y+35, r24	; 0x23
    43b6:	9c a3       	std	Y+36, r25	; 0x24
    43b8:	ad a3       	std	Y+37, r26	; 0x25
    43ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43bc:	6b a1       	ldd	r22, Y+35	; 0x23
    43be:	7c a1       	ldd	r23, Y+36	; 0x24
    43c0:	8d a1       	ldd	r24, Y+37	; 0x25
    43c2:	9e a1       	ldd	r25, Y+38	; 0x26
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	30 e0       	ldi	r19, 0x00	; 0
    43c8:	40 e8       	ldi	r20, 0x80	; 128
    43ca:	5f e3       	ldi	r21, 0x3F	; 63
    43cc:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    43d0:	88 23       	and	r24, r24
    43d2:	2c f4       	brge	.+10     	; 0x43de <LCD_enuInit+0x1a4>
		__ticks = 1;
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	9a a3       	std	Y+34, r25	; 0x22
    43da:	89 a3       	std	Y+33, r24	; 0x21
    43dc:	3f c0       	rjmp	.+126    	; 0x445c <LCD_enuInit+0x222>
	else if (__tmp > 65535)
    43de:	6b a1       	ldd	r22, Y+35	; 0x23
    43e0:	7c a1       	ldd	r23, Y+36	; 0x24
    43e2:	8d a1       	ldd	r24, Y+37	; 0x25
    43e4:	9e a1       	ldd	r25, Y+38	; 0x26
    43e6:	20 e0       	ldi	r18, 0x00	; 0
    43e8:	3f ef       	ldi	r19, 0xFF	; 255
    43ea:	4f e7       	ldi	r20, 0x7F	; 127
    43ec:	57 e4       	ldi	r21, 0x47	; 71
    43ee:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    43f2:	18 16       	cp	r1, r24
    43f4:	4c f5       	brge	.+82     	; 0x4448 <LCD_enuInit+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43f6:	6f a1       	ldd	r22, Y+39	; 0x27
    43f8:	78 a5       	ldd	r23, Y+40	; 0x28
    43fa:	89 a5       	ldd	r24, Y+41	; 0x29
    43fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    43fe:	20 e0       	ldi	r18, 0x00	; 0
    4400:	30 e0       	ldi	r19, 0x00	; 0
    4402:	40 e2       	ldi	r20, 0x20	; 32
    4404:	51 e4       	ldi	r21, 0x41	; 65
    4406:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    440a:	dc 01       	movw	r26, r24
    440c:	cb 01       	movw	r24, r22
    440e:	bc 01       	movw	r22, r24
    4410:	cd 01       	movw	r24, r26
    4412:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    4416:	dc 01       	movw	r26, r24
    4418:	cb 01       	movw	r24, r22
    441a:	9a a3       	std	Y+34, r25	; 0x22
    441c:	89 a3       	std	Y+33, r24	; 0x21
    441e:	0f c0       	rjmp	.+30     	; 0x443e <LCD_enuInit+0x204>
    4420:	80 e9       	ldi	r24, 0x90	; 144
    4422:	91 e0       	ldi	r25, 0x01	; 1
    4424:	98 a3       	std	Y+32, r25	; 0x20
    4426:	8f 8f       	std	Y+31, r24	; 0x1f
    4428:	8f 8d       	ldd	r24, Y+31	; 0x1f
    442a:	98 a1       	ldd	r25, Y+32	; 0x20
    442c:	01 97       	sbiw	r24, 0x01	; 1
    442e:	f1 f7       	brne	.-4      	; 0x442c <LCD_enuInit+0x1f2>
    4430:	98 a3       	std	Y+32, r25	; 0x20
    4432:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4434:	89 a1       	ldd	r24, Y+33	; 0x21
    4436:	9a a1       	ldd	r25, Y+34	; 0x22
    4438:	01 97       	sbiw	r24, 0x01	; 1
    443a:	9a a3       	std	Y+34, r25	; 0x22
    443c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    443e:	89 a1       	ldd	r24, Y+33	; 0x21
    4440:	9a a1       	ldd	r25, Y+34	; 0x22
    4442:	00 97       	sbiw	r24, 0x00	; 0
    4444:	69 f7       	brne	.-38     	; 0x4420 <LCD_enuInit+0x1e6>
    4446:	14 c0       	rjmp	.+40     	; 0x4470 <LCD_enuInit+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4448:	6b a1       	ldd	r22, Y+35	; 0x23
    444a:	7c a1       	ldd	r23, Y+36	; 0x24
    444c:	8d a1       	ldd	r24, Y+37	; 0x25
    444e:	9e a1       	ldd	r25, Y+38	; 0x26
    4450:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	9a a3       	std	Y+34, r25	; 0x22
    445a:	89 a3       	std	Y+33, r24	; 0x21
    445c:	89 a1       	ldd	r24, Y+33	; 0x21
    445e:	9a a1       	ldd	r25, Y+34	; 0x22
    4460:	9e 8f       	std	Y+30, r25	; 0x1e
    4462:	8d 8f       	std	Y+29, r24	; 0x1d
    4464:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4466:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4468:	01 97       	sbiw	r24, 0x01	; 1
    446a:	f1 f7       	brne	.-4      	; 0x4468 <LCD_enuInit+0x22e>
    446c:	9e 8f       	std	Y+30, r25	; 0x1e
    446e:	8d 8f       	std	Y+29, r24	; 0x1d
			 * B - Control Blinking of cursor position
			 * x - don't care
			 */


			  LCD_enuSendCommand(0x00);
    4470:	80 e0       	ldi	r24, 0x00	; 0
    4472:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
			  LCD_enuSendCommand(0xF0);
    4476:	80 ef       	ldi	r24, 0xF0	; 240
    4478:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
    447c:	80 e0       	ldi	r24, 0x00	; 0
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	a0 e8       	ldi	r26, 0x80	; 128
    4482:	bf e3       	ldi	r27, 0x3F	; 63
    4484:	89 8f       	std	Y+25, r24	; 0x19
    4486:	9a 8f       	std	Y+26, r25	; 0x1a
    4488:	ab 8f       	std	Y+27, r26	; 0x1b
    448a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    448c:	69 8d       	ldd	r22, Y+25	; 0x19
    448e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4490:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4492:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4494:	20 e0       	ldi	r18, 0x00	; 0
    4496:	30 e0       	ldi	r19, 0x00	; 0
    4498:	4a e7       	ldi	r20, 0x7A	; 122
    449a:	55 e4       	ldi	r21, 0x45	; 69
    449c:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	8d 8b       	std	Y+21, r24	; 0x15
    44a6:	9e 8b       	std	Y+22, r25	; 0x16
    44a8:	af 8b       	std	Y+23, r26	; 0x17
    44aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44ac:	6d 89       	ldd	r22, Y+21	; 0x15
    44ae:	7e 89       	ldd	r23, Y+22	; 0x16
    44b0:	8f 89       	ldd	r24, Y+23	; 0x17
    44b2:	98 8d       	ldd	r25, Y+24	; 0x18
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	40 e8       	ldi	r20, 0x80	; 128
    44ba:	5f e3       	ldi	r21, 0x3F	; 63
    44bc:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    44c0:	88 23       	and	r24, r24
    44c2:	2c f4       	brge	.+10     	; 0x44ce <LCD_enuInit+0x294>
		__ticks = 1;
    44c4:	81 e0       	ldi	r24, 0x01	; 1
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	9c 8b       	std	Y+20, r25	; 0x14
    44ca:	8b 8b       	std	Y+19, r24	; 0x13
    44cc:	3f c0       	rjmp	.+126    	; 0x454c <LCD_enuInit+0x312>
	else if (__tmp > 65535)
    44ce:	6d 89       	ldd	r22, Y+21	; 0x15
    44d0:	7e 89       	ldd	r23, Y+22	; 0x16
    44d2:	8f 89       	ldd	r24, Y+23	; 0x17
    44d4:	98 8d       	ldd	r25, Y+24	; 0x18
    44d6:	20 e0       	ldi	r18, 0x00	; 0
    44d8:	3f ef       	ldi	r19, 0xFF	; 255
    44da:	4f e7       	ldi	r20, 0x7F	; 127
    44dc:	57 e4       	ldi	r21, 0x47	; 71
    44de:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    44e2:	18 16       	cp	r1, r24
    44e4:	4c f5       	brge	.+82     	; 0x4538 <LCD_enuInit+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44e6:	69 8d       	ldd	r22, Y+25	; 0x19
    44e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44ee:	20 e0       	ldi	r18, 0x00	; 0
    44f0:	30 e0       	ldi	r19, 0x00	; 0
    44f2:	40 e2       	ldi	r20, 0x20	; 32
    44f4:	51 e4       	ldi	r21, 0x41	; 65
    44f6:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	bc 01       	movw	r22, r24
    4500:	cd 01       	movw	r24, r26
    4502:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    4506:	dc 01       	movw	r26, r24
    4508:	cb 01       	movw	r24, r22
    450a:	9c 8b       	std	Y+20, r25	; 0x14
    450c:	8b 8b       	std	Y+19, r24	; 0x13
    450e:	0f c0       	rjmp	.+30     	; 0x452e <LCD_enuInit+0x2f4>
    4510:	80 e9       	ldi	r24, 0x90	; 144
    4512:	91 e0       	ldi	r25, 0x01	; 1
    4514:	9a 8b       	std	Y+18, r25	; 0x12
    4516:	89 8b       	std	Y+17, r24	; 0x11
    4518:	89 89       	ldd	r24, Y+17	; 0x11
    451a:	9a 89       	ldd	r25, Y+18	; 0x12
    451c:	01 97       	sbiw	r24, 0x01	; 1
    451e:	f1 f7       	brne	.-4      	; 0x451c <LCD_enuInit+0x2e2>
    4520:	9a 8b       	std	Y+18, r25	; 0x12
    4522:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4524:	8b 89       	ldd	r24, Y+19	; 0x13
    4526:	9c 89       	ldd	r25, Y+20	; 0x14
    4528:	01 97       	sbiw	r24, 0x01	; 1
    452a:	9c 8b       	std	Y+20, r25	; 0x14
    452c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    452e:	8b 89       	ldd	r24, Y+19	; 0x13
    4530:	9c 89       	ldd	r25, Y+20	; 0x14
    4532:	00 97       	sbiw	r24, 0x00	; 0
    4534:	69 f7       	brne	.-38     	; 0x4510 <LCD_enuInit+0x2d6>
    4536:	14 c0       	rjmp	.+40     	; 0x4560 <LCD_enuInit+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4538:	6d 89       	ldd	r22, Y+21	; 0x15
    453a:	7e 89       	ldd	r23, Y+22	; 0x16
    453c:	8f 89       	ldd	r24, Y+23	; 0x17
    453e:	98 8d       	ldd	r25, Y+24	; 0x18
    4540:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    4544:	dc 01       	movw	r26, r24
    4546:	cb 01       	movw	r24, r22
    4548:	9c 8b       	std	Y+20, r25	; 0x14
    454a:	8b 8b       	std	Y+19, r24	; 0x13
    454c:	8b 89       	ldd	r24, Y+19	; 0x13
    454e:	9c 89       	ldd	r25, Y+20	; 0x14
    4550:	98 8b       	std	Y+16, r25	; 0x10
    4552:	8f 87       	std	Y+15, r24	; 0x0f
    4554:	8f 85       	ldd	r24, Y+15	; 0x0f
    4556:	98 89       	ldd	r25, Y+16	; 0x10
    4558:	01 97       	sbiw	r24, 0x01	; 1
    455a:	f1 f7       	brne	.-4      	; 0x4558 <LCD_enuInit+0x31e>
    455c:	98 8b       	std	Y+16, r25	; 0x10
    455e:	8f 87       	std	Y+15, r24	; 0x0f
			  _delay_ms(DISPLAY_ON_OFF_CONTROL);
		/**************************************************************/


		/******************* !Display CLEAR! *******************/
		LCD_enuSendCommand(0x00);
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
		LCD_enuSendCommand(CLEAR);
    4566:	81 e0       	ldi	r24, 0x01	; 1
    4568:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	90 e0       	ldi	r25, 0x00	; 0
    4570:	a0 e0       	ldi	r26, 0x00	; 0
    4572:	b0 e4       	ldi	r27, 0x40	; 64
    4574:	8b 87       	std	Y+11, r24	; 0x0b
    4576:	9c 87       	std	Y+12, r25	; 0x0c
    4578:	ad 87       	std	Y+13, r26	; 0x0d
    457a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    457c:	6b 85       	ldd	r22, Y+11	; 0x0b
    457e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4580:	8d 85       	ldd	r24, Y+13	; 0x0d
    4582:	9e 85       	ldd	r25, Y+14	; 0x0e
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	4a e7       	ldi	r20, 0x7A	; 122
    458a:	55 e4       	ldi	r21, 0x45	; 69
    458c:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    4590:	dc 01       	movw	r26, r24
    4592:	cb 01       	movw	r24, r22
    4594:	8f 83       	std	Y+7, r24	; 0x07
    4596:	98 87       	std	Y+8, r25	; 0x08
    4598:	a9 87       	std	Y+9, r26	; 0x09
    459a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    459c:	6f 81       	ldd	r22, Y+7	; 0x07
    459e:	78 85       	ldd	r23, Y+8	; 0x08
    45a0:	89 85       	ldd	r24, Y+9	; 0x09
    45a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    45a4:	20 e0       	ldi	r18, 0x00	; 0
    45a6:	30 e0       	ldi	r19, 0x00	; 0
    45a8:	40 e8       	ldi	r20, 0x80	; 128
    45aa:	5f e3       	ldi	r21, 0x3F	; 63
    45ac:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    45b0:	88 23       	and	r24, r24
    45b2:	2c f4       	brge	.+10     	; 0x45be <LCD_enuInit+0x384>
		__ticks = 1;
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	9e 83       	std	Y+6, r25	; 0x06
    45ba:	8d 83       	std	Y+5, r24	; 0x05
    45bc:	3f c0       	rjmp	.+126    	; 0x463c <LCD_enuInit+0x402>
	else if (__tmp > 65535)
    45be:	6f 81       	ldd	r22, Y+7	; 0x07
    45c0:	78 85       	ldd	r23, Y+8	; 0x08
    45c2:	89 85       	ldd	r24, Y+9	; 0x09
    45c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c6:	20 e0       	ldi	r18, 0x00	; 0
    45c8:	3f ef       	ldi	r19, 0xFF	; 255
    45ca:	4f e7       	ldi	r20, 0x7F	; 127
    45cc:	57 e4       	ldi	r21, 0x47	; 71
    45ce:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    45d2:	18 16       	cp	r1, r24
    45d4:	4c f5       	brge	.+82     	; 0x4628 <LCD_enuInit+0x3ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    45d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    45da:	8d 85       	ldd	r24, Y+13	; 0x0d
    45dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    45de:	20 e0       	ldi	r18, 0x00	; 0
    45e0:	30 e0       	ldi	r19, 0x00	; 0
    45e2:	40 e2       	ldi	r20, 0x20	; 32
    45e4:	51 e4       	ldi	r21, 0x41	; 65
    45e6:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    45ea:	dc 01       	movw	r26, r24
    45ec:	cb 01       	movw	r24, r22
    45ee:	bc 01       	movw	r22, r24
    45f0:	cd 01       	movw	r24, r26
    45f2:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    45f6:	dc 01       	movw	r26, r24
    45f8:	cb 01       	movw	r24, r22
    45fa:	9e 83       	std	Y+6, r25	; 0x06
    45fc:	8d 83       	std	Y+5, r24	; 0x05
    45fe:	0f c0       	rjmp	.+30     	; 0x461e <LCD_enuInit+0x3e4>
    4600:	80 e9       	ldi	r24, 0x90	; 144
    4602:	91 e0       	ldi	r25, 0x01	; 1
    4604:	9c 83       	std	Y+4, r25	; 0x04
    4606:	8b 83       	std	Y+3, r24	; 0x03
    4608:	8b 81       	ldd	r24, Y+3	; 0x03
    460a:	9c 81       	ldd	r25, Y+4	; 0x04
    460c:	01 97       	sbiw	r24, 0x01	; 1
    460e:	f1 f7       	brne	.-4      	; 0x460c <LCD_enuInit+0x3d2>
    4610:	9c 83       	std	Y+4, r25	; 0x04
    4612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4614:	8d 81       	ldd	r24, Y+5	; 0x05
    4616:	9e 81       	ldd	r25, Y+6	; 0x06
    4618:	01 97       	sbiw	r24, 0x01	; 1
    461a:	9e 83       	std	Y+6, r25	; 0x06
    461c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    461e:	8d 81       	ldd	r24, Y+5	; 0x05
    4620:	9e 81       	ldd	r25, Y+6	; 0x06
    4622:	00 97       	sbiw	r24, 0x00	; 0
    4624:	69 f7       	brne	.-38     	; 0x4600 <LCD_enuInit+0x3c6>
    4626:	14 c0       	rjmp	.+40     	; 0x4650 <LCD_enuInit+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4628:	6f 81       	ldd	r22, Y+7	; 0x07
    462a:	78 85       	ldd	r23, Y+8	; 0x08
    462c:	89 85       	ldd	r24, Y+9	; 0x09
    462e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4630:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    4634:	dc 01       	movw	r26, r24
    4636:	cb 01       	movw	r24, r22
    4638:	9e 83       	std	Y+6, r25	; 0x06
    463a:	8d 83       	std	Y+5, r24	; 0x05
    463c:	8d 81       	ldd	r24, Y+5	; 0x05
    463e:	9e 81       	ldd	r25, Y+6	; 0x06
    4640:	9a 83       	std	Y+2, r25	; 0x02
    4642:	89 83       	std	Y+1, r24	; 0x01
    4644:	89 81       	ldd	r24, Y+1	; 0x01
    4646:	9a 81       	ldd	r25, Y+2	; 0x02
    4648:	01 97       	sbiw	r24, 0x01	; 1
    464a:	f1 f7       	brne	.-4      	; 0x4648 <LCD_enuInit+0x40e>
    464c:	9a 83       	std	Y+2, r25	; 0x02
    464e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(DISPLAY_CLEAR_DELAY);
		/*******************************************************/


	    /******************* !Entry Mode Set! *******************/
	    LCD_enuSendCommand(0x00);
    4650:	80 e0       	ldi	r24, 0x00	; 0
    4652:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
	    LCD_enuSendCommand(0b00000110);
    4656:	86 e0       	ldi	r24, 0x06	; 6
    4658:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
		#warning "LCD_MODE Macro is not defined"
		return Local_enuErrrorState;
	#endif

	#if(LCD_MODE == FOUR_BIT)
		Global_u8FourBitInitFlag=1;
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	80 93 aa 01 	sts	0x01AA, r24





		Local_enuErrrorState = ERROR_STATUS_OK;
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	89 af       	std	Y+57, r24	; 0x39
	return Local_enuErrrorState;
    4666:	89 ad       	ldd	r24, Y+57	; 0x39
}
    4668:	e9 96       	adiw	r28, 0x39	; 57
    466a:	0f b6       	in	r0, 0x3f	; 63
    466c:	f8 94       	cli
    466e:	de bf       	out	0x3e, r29	; 62
    4670:	0f be       	out	0x3f, r0	; 63
    4672:	cd bf       	out	0x3d, r28	; 61
    4674:	cf 91       	pop	r28
    4676:	df 91       	pop	r29
    4678:	08 95       	ret

0000467a <WriteNLatch>:





static ErrorStatus_t WriteNLatch(uint8_t Copy_u8Data){
    467a:	df 93       	push	r29
    467c:	cf 93       	push	r28
    467e:	cd b7       	in	r28, 0x3d	; 61
    4680:	de b7       	in	r29, 0x3e	; 62
    4682:	6e 97       	sbiw	r28, 0x1e	; 30
    4684:	0f b6       	in	r0, 0x3f	; 63
    4686:	f8 94       	cli
    4688:	de bf       	out	0x3e, r29	; 62
    468a:	0f be       	out	0x3f, r0	; 63
    468c:	cd bf       	out	0x3d, r28	; 61
    468e:	8e 8f       	std	Y+30, r24	; 0x1e

    ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    4690:	1d 8e       	std	Y+29, r1	; 0x1d

    #if(LCD_MODE == FOUR_BIT)

        // Send Higher Nibble
        DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_5));
    4692:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4694:	82 95       	swap	r24
    4696:	8f 70       	andi	r24, 0x0F	; 15
    4698:	98 2f       	mov	r25, r24
    469a:	91 70       	andi	r25, 0x01	; 1
    469c:	80 e0       	ldi	r24, 0x00	; 0
    469e:	63 e0       	ldi	r22, 0x03	; 3
    46a0:	49 2f       	mov	r20, r25
    46a2:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_6));
    46a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46a8:	82 95       	swap	r24
    46aa:	86 95       	lsr	r24
    46ac:	87 70       	andi	r24, 0x07	; 7
    46ae:	98 2f       	mov	r25, r24
    46b0:	91 70       	andi	r25, 0x01	; 1
    46b2:	80 e0       	ldi	r24, 0x00	; 0
    46b4:	64 e0       	ldi	r22, 0x04	; 4
    46b6:	49 2f       	mov	r20, r25
    46b8:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_7));
    46bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46be:	82 95       	swap	r24
    46c0:	86 95       	lsr	r24
    46c2:	86 95       	lsr	r24
    46c4:	83 70       	andi	r24, 0x03	; 3
    46c6:	98 2f       	mov	r25, r24
    46c8:	91 70       	andi	r25, 0x01	; 1
    46ca:	80 e0       	ldi	r24, 0x00	; 0
    46cc:	65 e0       	ldi	r22, 0x05	; 5
    46ce:	49 2f       	mov	r20, r25
    46d0:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
        DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_8));
    46d4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    46d6:	98 2f       	mov	r25, r24
    46d8:	99 1f       	adc	r25, r25
    46da:	99 27       	eor	r25, r25
    46dc:	99 1f       	adc	r25, r25
    46de:	80 e0       	ldi	r24, 0x00	; 0
    46e0:	66 e0       	ldi	r22, 0x06	; 6
    46e2:	49 2f       	mov	r20, r25
    46e4:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>

        SEND_ENABLE_PULSE();
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	62 e0       	ldi	r22, 0x02	; 2
    46ec:	41 e0       	ldi	r20, 0x01	; 1
    46ee:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	a0 e0       	ldi	r26, 0x00	; 0
    46f8:	b0 e4       	ldi	r27, 0x40	; 64
    46fa:	89 8f       	std	Y+25, r24	; 0x19
    46fc:	9a 8f       	std	Y+26, r25	; 0x1a
    46fe:	ab 8f       	std	Y+27, r26	; 0x1b
    4700:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4702:	69 8d       	ldd	r22, Y+25	; 0x19
    4704:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	4a e7       	ldi	r20, 0x7A	; 122
    4710:	55 e4       	ldi	r21, 0x45	; 69
    4712:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    4716:	dc 01       	movw	r26, r24
    4718:	cb 01       	movw	r24, r22
    471a:	8d 8b       	std	Y+21, r24	; 0x15
    471c:	9e 8b       	std	Y+22, r25	; 0x16
    471e:	af 8b       	std	Y+23, r26	; 0x17
    4720:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4722:	6d 89       	ldd	r22, Y+21	; 0x15
    4724:	7e 89       	ldd	r23, Y+22	; 0x16
    4726:	8f 89       	ldd	r24, Y+23	; 0x17
    4728:	98 8d       	ldd	r25, Y+24	; 0x18
    472a:	20 e0       	ldi	r18, 0x00	; 0
    472c:	30 e0       	ldi	r19, 0x00	; 0
    472e:	40 e8       	ldi	r20, 0x80	; 128
    4730:	5f e3       	ldi	r21, 0x3F	; 63
    4732:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    4736:	88 23       	and	r24, r24
    4738:	2c f4       	brge	.+10     	; 0x4744 <WriteNLatch+0xca>
		__ticks = 1;
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	9c 8b       	std	Y+20, r25	; 0x14
    4740:	8b 8b       	std	Y+19, r24	; 0x13
    4742:	3f c0       	rjmp	.+126    	; 0x47c2 <WriteNLatch+0x148>
	else if (__tmp > 65535)
    4744:	6d 89       	ldd	r22, Y+21	; 0x15
    4746:	7e 89       	ldd	r23, Y+22	; 0x16
    4748:	8f 89       	ldd	r24, Y+23	; 0x17
    474a:	98 8d       	ldd	r25, Y+24	; 0x18
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	3f ef       	ldi	r19, 0xFF	; 255
    4750:	4f e7       	ldi	r20, 0x7F	; 127
    4752:	57 e4       	ldi	r21, 0x47	; 71
    4754:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    4758:	18 16       	cp	r1, r24
    475a:	4c f5       	brge	.+82     	; 0x47ae <WriteNLatch+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    475c:	69 8d       	ldd	r22, Y+25	; 0x19
    475e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4760:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4764:	20 e0       	ldi	r18, 0x00	; 0
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	40 e2       	ldi	r20, 0x20	; 32
    476a:	51 e4       	ldi	r21, 0x41	; 65
    476c:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    4770:	dc 01       	movw	r26, r24
    4772:	cb 01       	movw	r24, r22
    4774:	bc 01       	movw	r22, r24
    4776:	cd 01       	movw	r24, r26
    4778:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    477c:	dc 01       	movw	r26, r24
    477e:	cb 01       	movw	r24, r22
    4780:	9c 8b       	std	Y+20, r25	; 0x14
    4782:	8b 8b       	std	Y+19, r24	; 0x13
    4784:	0f c0       	rjmp	.+30     	; 0x47a4 <WriteNLatch+0x12a>
    4786:	80 e9       	ldi	r24, 0x90	; 144
    4788:	91 e0       	ldi	r25, 0x01	; 1
    478a:	9a 8b       	std	Y+18, r25	; 0x12
    478c:	89 8b       	std	Y+17, r24	; 0x11
    478e:	89 89       	ldd	r24, Y+17	; 0x11
    4790:	9a 89       	ldd	r25, Y+18	; 0x12
    4792:	01 97       	sbiw	r24, 0x01	; 1
    4794:	f1 f7       	brne	.-4      	; 0x4792 <WriteNLatch+0x118>
    4796:	9a 8b       	std	Y+18, r25	; 0x12
    4798:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    479a:	8b 89       	ldd	r24, Y+19	; 0x13
    479c:	9c 89       	ldd	r25, Y+20	; 0x14
    479e:	01 97       	sbiw	r24, 0x01	; 1
    47a0:	9c 8b       	std	Y+20, r25	; 0x14
    47a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47a4:	8b 89       	ldd	r24, Y+19	; 0x13
    47a6:	9c 89       	ldd	r25, Y+20	; 0x14
    47a8:	00 97       	sbiw	r24, 0x00	; 0
    47aa:	69 f7       	brne	.-38     	; 0x4786 <WriteNLatch+0x10c>
    47ac:	14 c0       	rjmp	.+40     	; 0x47d6 <WriteNLatch+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ae:	6d 89       	ldd	r22, Y+21	; 0x15
    47b0:	7e 89       	ldd	r23, Y+22	; 0x16
    47b2:	8f 89       	ldd	r24, Y+23	; 0x17
    47b4:	98 8d       	ldd	r25, Y+24	; 0x18
    47b6:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	9c 8b       	std	Y+20, r25	; 0x14
    47c0:	8b 8b       	std	Y+19, r24	; 0x13
    47c2:	8b 89       	ldd	r24, Y+19	; 0x13
    47c4:	9c 89       	ldd	r25, Y+20	; 0x14
    47c6:	98 8b       	std	Y+16, r25	; 0x10
    47c8:	8f 87       	std	Y+15, r24	; 0x0f
    47ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    47cc:	98 89       	ldd	r25, Y+16	; 0x10
    47ce:	01 97       	sbiw	r24, 0x01	; 1
    47d0:	f1 f7       	brne	.-4      	; 0x47ce <WriteNLatch+0x154>
    47d2:	98 8b       	std	Y+16, r25	; 0x10
    47d4:	8f 87       	std	Y+15, r24	; 0x0f
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	62 e0       	ldi	r22, 0x02	; 2
    47da:	40 e0       	ldi	r20, 0x00	; 0
    47dc:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>

        if(Global_u8FourBitInitFlag){
    47e0:	80 91 aa 01 	lds	r24, 0x01AA
    47e4:	88 23       	and	r24, r24
    47e6:	09 f4       	brne	.+2      	; 0x47ea <WriteNLatch+0x170>
    47e8:	a2 c0       	rjmp	.+324    	; 0x492e <WriteNLatch+0x2b4>
        // Send Lower Nibble
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB4_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_1));
    47ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47ec:	98 2f       	mov	r25, r24
    47ee:	91 70       	andi	r25, 0x01	; 1
    47f0:	80 e0       	ldi	r24, 0x00	; 0
    47f2:	63 e0       	ldi	r22, 0x03	; 3
    47f4:	49 2f       	mov	r20, r25
    47f6:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB5_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_2));
    47fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    47fc:	86 95       	lsr	r24
    47fe:	98 2f       	mov	r25, r24
    4800:	91 70       	andi	r25, 0x01	; 1
    4802:	80 e0       	ldi	r24, 0x00	; 0
    4804:	64 e0       	ldi	r22, 0x04	; 4
    4806:	49 2f       	mov	r20, r25
    4808:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB6_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_3));
    480c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    480e:	86 95       	lsr	r24
    4810:	86 95       	lsr	r24
    4812:	98 2f       	mov	r25, r24
    4814:	91 70       	andi	r25, 0x01	; 1
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	65 e0       	ldi	r22, 0x05	; 5
    481a:	49 2f       	mov	r20, r25
    481c:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
        	DIO_enuSetPinValue(LCD_DATA_PORT, DB7_PIN, GET_BIT(Copy_u8Data, LCD_DATA_BIT_4));
    4820:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4822:	86 95       	lsr	r24
    4824:	86 95       	lsr	r24
    4826:	86 95       	lsr	r24
    4828:	98 2f       	mov	r25, r24
    482a:	91 70       	andi	r25, 0x01	; 1
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	66 e0       	ldi	r22, 0x06	; 6
    4830:	49 2f       	mov	r20, r25
    4832:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>

        	SEND_ENABLE_PULSE();
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	62 e0       	ldi	r22, 0x02	; 2
    483a:	41 e0       	ldi	r20, 0x01	; 1
    483c:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    4840:	80 e0       	ldi	r24, 0x00	; 0
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	a0 e0       	ldi	r26, 0x00	; 0
    4846:	b0 e4       	ldi	r27, 0x40	; 64
    4848:	8b 87       	std	Y+11, r24	; 0x0b
    484a:	9c 87       	std	Y+12, r25	; 0x0c
    484c:	ad 87       	std	Y+13, r26	; 0x0d
    484e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4850:	6b 85       	ldd	r22, Y+11	; 0x0b
    4852:	7c 85       	ldd	r23, Y+12	; 0x0c
    4854:	8d 85       	ldd	r24, Y+13	; 0x0d
    4856:	9e 85       	ldd	r25, Y+14	; 0x0e
    4858:	20 e0       	ldi	r18, 0x00	; 0
    485a:	30 e0       	ldi	r19, 0x00	; 0
    485c:	4a e7       	ldi	r20, 0x7A	; 122
    485e:	55 e4       	ldi	r21, 0x45	; 69
    4860:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    4864:	dc 01       	movw	r26, r24
    4866:	cb 01       	movw	r24, r22
    4868:	8f 83       	std	Y+7, r24	; 0x07
    486a:	98 87       	std	Y+8, r25	; 0x08
    486c:	a9 87       	std	Y+9, r26	; 0x09
    486e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4870:	6f 81       	ldd	r22, Y+7	; 0x07
    4872:	78 85       	ldd	r23, Y+8	; 0x08
    4874:	89 85       	ldd	r24, Y+9	; 0x09
    4876:	9a 85       	ldd	r25, Y+10	; 0x0a
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	30 e0       	ldi	r19, 0x00	; 0
    487c:	40 e8       	ldi	r20, 0x80	; 128
    487e:	5f e3       	ldi	r21, 0x3F	; 63
    4880:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    4884:	88 23       	and	r24, r24
    4886:	2c f4       	brge	.+10     	; 0x4892 <WriteNLatch+0x218>
		__ticks = 1;
    4888:	81 e0       	ldi	r24, 0x01	; 1
    488a:	90 e0       	ldi	r25, 0x00	; 0
    488c:	9e 83       	std	Y+6, r25	; 0x06
    488e:	8d 83       	std	Y+5, r24	; 0x05
    4890:	3f c0       	rjmp	.+126    	; 0x4910 <WriteNLatch+0x296>
	else if (__tmp > 65535)
    4892:	6f 81       	ldd	r22, Y+7	; 0x07
    4894:	78 85       	ldd	r23, Y+8	; 0x08
    4896:	89 85       	ldd	r24, Y+9	; 0x09
    4898:	9a 85       	ldd	r25, Y+10	; 0x0a
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	3f ef       	ldi	r19, 0xFF	; 255
    489e:	4f e7       	ldi	r20, 0x7F	; 127
    48a0:	57 e4       	ldi	r21, 0x47	; 71
    48a2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    48a6:	18 16       	cp	r1, r24
    48a8:	4c f5       	brge	.+82     	; 0x48fc <WriteNLatch+0x282>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    48ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    48ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    48b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    48b2:	20 e0       	ldi	r18, 0x00	; 0
    48b4:	30 e0       	ldi	r19, 0x00	; 0
    48b6:	40 e2       	ldi	r20, 0x20	; 32
    48b8:	51 e4       	ldi	r21, 0x41	; 65
    48ba:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    48be:	dc 01       	movw	r26, r24
    48c0:	cb 01       	movw	r24, r22
    48c2:	bc 01       	movw	r22, r24
    48c4:	cd 01       	movw	r24, r26
    48c6:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    48ca:	dc 01       	movw	r26, r24
    48cc:	cb 01       	movw	r24, r22
    48ce:	9e 83       	std	Y+6, r25	; 0x06
    48d0:	8d 83       	std	Y+5, r24	; 0x05
    48d2:	0f c0       	rjmp	.+30     	; 0x48f2 <WriteNLatch+0x278>
    48d4:	80 e9       	ldi	r24, 0x90	; 144
    48d6:	91 e0       	ldi	r25, 0x01	; 1
    48d8:	9c 83       	std	Y+4, r25	; 0x04
    48da:	8b 83       	std	Y+3, r24	; 0x03
    48dc:	8b 81       	ldd	r24, Y+3	; 0x03
    48de:	9c 81       	ldd	r25, Y+4	; 0x04
    48e0:	01 97       	sbiw	r24, 0x01	; 1
    48e2:	f1 f7       	brne	.-4      	; 0x48e0 <WriteNLatch+0x266>
    48e4:	9c 83       	std	Y+4, r25	; 0x04
    48e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48e8:	8d 81       	ldd	r24, Y+5	; 0x05
    48ea:	9e 81       	ldd	r25, Y+6	; 0x06
    48ec:	01 97       	sbiw	r24, 0x01	; 1
    48ee:	9e 83       	std	Y+6, r25	; 0x06
    48f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48f2:	8d 81       	ldd	r24, Y+5	; 0x05
    48f4:	9e 81       	ldd	r25, Y+6	; 0x06
    48f6:	00 97       	sbiw	r24, 0x00	; 0
    48f8:	69 f7       	brne	.-38     	; 0x48d4 <WriteNLatch+0x25a>
    48fa:	14 c0       	rjmp	.+40     	; 0x4924 <WriteNLatch+0x2aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48fc:	6f 81       	ldd	r22, Y+7	; 0x07
    48fe:	78 85       	ldd	r23, Y+8	; 0x08
    4900:	89 85       	ldd	r24, Y+9	; 0x09
    4902:	9a 85       	ldd	r25, Y+10	; 0x0a
    4904:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    4908:	dc 01       	movw	r26, r24
    490a:	cb 01       	movw	r24, r22
    490c:	9e 83       	std	Y+6, r25	; 0x06
    490e:	8d 83       	std	Y+5, r24	; 0x05
    4910:	8d 81       	ldd	r24, Y+5	; 0x05
    4912:	9e 81       	ldd	r25, Y+6	; 0x06
    4914:	9a 83       	std	Y+2, r25	; 0x02
    4916:	89 83       	std	Y+1, r24	; 0x01
    4918:	89 81       	ldd	r24, Y+1	; 0x01
    491a:	9a 81       	ldd	r25, Y+2	; 0x02
    491c:	01 97       	sbiw	r24, 0x01	; 1
    491e:	f1 f7       	brne	.-4      	; 0x491c <WriteNLatch+0x2a2>
    4920:	9a 83       	std	Y+2, r25	; 0x02
    4922:	89 83       	std	Y+1, r24	; 0x01
    4924:	80 e0       	ldi	r24, 0x00	; 0
    4926:	62 e0       	ldi	r22, 0x02	; 2
    4928:	40 e0       	ldi	r20, 0x00	; 0
    492a:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
        #warning "Wrong LCD MODE"
        return Local_enu_ErrorState;

    #endif

    Local_enu_ErrorState = ERROR_STATUS_OK;
    492e:	81 e0       	ldi	r24, 0x01	; 1
    4930:	8d 8f       	std	Y+29, r24	; 0x1d
    return Local_enu_ErrorState;
    4932:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    4934:	6e 96       	adiw	r28, 0x1e	; 30
    4936:	0f b6       	in	r0, 0x3f	; 63
    4938:	f8 94       	cli
    493a:	de bf       	out	0x3e, r29	; 62
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	cd bf       	out	0x3d, r28	; 61
    4940:	cf 91       	pop	r28
    4942:	df 91       	pop	r29
    4944:	08 95       	ret

00004946 <LCD_enuSendData>:

ErrorStatus_t LCD_enuSendData(uint8_t Copy_u8Data){
    4946:	df 93       	push	r29
    4948:	cf 93       	push	r28
    494a:	00 d0       	rcall	.+0      	; 0x494c <LCD_enuSendData+0x6>
    494c:	cd b7       	in	r28, 0x3d	; 61
    494e:	de b7       	in	r29, 0x3e	; 62
    4950:	8a 83       	std	Y+2, r24	; 0x02


	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    4952:	19 82       	std	Y+1, r1	; 0x01

						 

	// RS-> held to high since we are going to send data 
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH);
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	61 e0       	ldi	r22, 0x01	; 1
    4958:	41 e0       	ldi	r20, 0x01	; 1
    495a:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    495e:	80 e0       	ldi	r24, 0x00	; 0
    4960:	60 e0       	ldi	r22, 0x00	; 0
    4962:	40 e0       	ldi	r20, 0x00	; 0
    4964:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>



	WriteNLatch(Copy_u8Data);
    4968:	8a 81       	ldd	r24, Y+2	; 0x02
    496a:	0e 94 3d 23 	call	0x467a	; 0x467a <WriteNLatch>



	return Local_enu_ErrorState;
    496e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4970:	0f 90       	pop	r0
    4972:	0f 90       	pop	r0
    4974:	cf 91       	pop	r28
    4976:	df 91       	pop	r29
    4978:	08 95       	ret

0000497a <LCD_enuSendCommand>:
ErrorStatus_t LCD_enuSendCommand(uint8_t Copy_u8Command){
    497a:	df 93       	push	r29
    497c:	cf 93       	push	r28
    497e:	00 d0       	rcall	.+0      	; 0x4980 <LCD_enuSendCommand+0x6>
    4980:	cd b7       	in	r28, 0x3d	; 61
    4982:	de b7       	in	r29, 0x3e	; 62
    4984:	8a 83       	std	Y+2, r24	; 0x02




	ErrorStatus_t Local_enu_ErrorState = ERROR_STATUS_FAILURE;
    4986:	19 82       	std	Y+1, r1	; 0x01

						 
	// RS -> held to low since we are going to send command
	// RW -> held to low, because we writing on LCD
	DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW);
    4988:	80 e0       	ldi	r24, 0x00	; 0
    498a:	61 e0       	ldi	r22, 0x01	; 1
    498c:	40 e0       	ldi	r20, 0x00	; 0
    498e:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW);
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	60 e0       	ldi	r22, 0x00	; 0
    4996:	40 e0       	ldi	r20, 0x00	; 0
    4998:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
	WriteNLatch(Copy_u8Command);
    499c:	8a 81       	ldd	r24, Y+2	; 0x02
    499e:	0e 94 3d 23 	call	0x467a	; 0x467a <WriteNLatch>




	Local_enu_ErrorState = ERROR_STATUS_OK;
    49a2:	81 e0       	ldi	r24, 0x01	; 1
    49a4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enu_ErrorState;
    49a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    49a8:	0f 90       	pop	r0
    49aa:	0f 90       	pop	r0
    49ac:	cf 91       	pop	r28
    49ae:	df 91       	pop	r29
    49b0:	08 95       	ret

000049b2 <LCD_u8SendString>:


ErrorStatus_t LCD_u8SendString(const char *Copy_pu8String){
    49b2:	df 93       	push	r29
    49b4:	cf 93       	push	r28
    49b6:	00 d0       	rcall	.+0      	; 0x49b8 <LCD_u8SendString+0x6>
    49b8:	00 d0       	rcall	.+0      	; 0x49ba <LCD_u8SendString+0x8>
    49ba:	0f 92       	push	r0
    49bc:	cd b7       	in	r28, 0x3d	; 61
    49be:	de b7       	in	r29, 0x3e	; 62
    49c0:	9c 83       	std	Y+4, r25	; 0x04
    49c2:	8b 83       	std	Y+3, r24	; 0x03


	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    49c4:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_pu8String != NULL){
    49c6:	8b 81       	ldd	r24, Y+3	; 0x03
    49c8:	9c 81       	ldd	r25, Y+4	; 0x04
    49ca:	00 97       	sbiw	r24, 0x00	; 0
    49cc:	f9 f0       	breq	.+62     	; 0x4a0c <LCD_u8SendString+0x5a>
		uint8_t local_u8counter = 0;
    49ce:	19 82       	std	Y+1, r1	; 0x01
    49d0:	0f c0       	rjmp	.+30     	; 0x49f0 <LCD_u8SendString+0x3e>

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
    49d2:	89 81       	ldd	r24, Y+1	; 0x01
    49d4:	28 2f       	mov	r18, r24
    49d6:	30 e0       	ldi	r19, 0x00	; 0
    49d8:	8b 81       	ldd	r24, Y+3	; 0x03
    49da:	9c 81       	ldd	r25, Y+4	; 0x04
    49dc:	fc 01       	movw	r30, r24
    49de:	e2 0f       	add	r30, r18
    49e0:	f3 1f       	adc	r31, r19
    49e2:	90 81       	ld	r25, Z
    49e4:	89 81       	ldd	r24, Y+1	; 0x01
    49e6:	8f 5f       	subi	r24, 0xFF	; 255
    49e8:	89 83       	std	Y+1, r24	; 0x01
    49ea:	89 2f       	mov	r24, r25
    49ec:	0e 94 a3 24 	call	0x4946	; 0x4946 <LCD_enuSendData>
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
	if(Copy_pu8String != NULL){
		uint8_t local_u8counter = 0;

		// condition tests whether we reached end of given text
		while(Copy_pu8String[local_u8counter] != '\0'){
    49f0:	89 81       	ldd	r24, Y+1	; 0x01
    49f2:	28 2f       	mov	r18, r24
    49f4:	30 e0       	ldi	r19, 0x00	; 0
    49f6:	8b 81       	ldd	r24, Y+3	; 0x03
    49f8:	9c 81       	ldd	r25, Y+4	; 0x04
    49fa:	fc 01       	movw	r30, r24
    49fc:	e2 0f       	add	r30, r18
    49fe:	f3 1f       	adc	r31, r19
    4a00:	80 81       	ld	r24, Z
    4a02:	88 23       	and	r24, r24
    4a04:	31 f7       	brne	.-52     	; 0x49d2 <LCD_u8SendString+0x20>

		Local_enuErrrorState = ERROR_STATUS_OK;
		return Local_enuErrrorState;
	}

	return Local_enuErrrorState;
    4a06:	8a 81       	ldd	r24, Y+2	; 0x02
    4a08:	8d 83       	std	Y+5, r24	; 0x05
    4a0a:	04 c0       	rjmp	.+8      	; 0x4a14 <LCD_u8SendString+0x62>
		while(Copy_pu8String[local_u8counter] != '\0'){
			LCD_enuSendData(Copy_pu8String[local_u8counter++]);
		}
	}else{

		Local_enuErrrorState = ERROR_STATUS_OK;
    4a0c:	81 e0       	ldi	r24, 0x01	; 1
    4a0e:	8a 83       	std	Y+2, r24	; 0x02
		return Local_enuErrrorState;
    4a10:	8a 81       	ldd	r24, Y+2	; 0x02
    4a12:	8d 83       	std	Y+5, r24	; 0x05
    4a14:	8d 81       	ldd	r24, Y+5	; 0x05
	}

	return Local_enuErrrorState;
}
    4a16:	0f 90       	pop	r0
    4a18:	0f 90       	pop	r0
    4a1a:	0f 90       	pop	r0
    4a1c:	0f 90       	pop	r0
    4a1e:	0f 90       	pop	r0
    4a20:	cf 91       	pop	r28
    4a22:	df 91       	pop	r29
    4a24:	08 95       	ret

00004a26 <LCD_enuIntegerToString>:



ErrorStatus_t LCD_enuIntegerToString(sint32_t Copy_u8data, uint8_t Copy_u8Base){
    4a26:	df 93       	push	r29
    4a28:	cf 93       	push	r28
    4a2a:	cd b7       	in	r28, 0x3d	; 61
    4a2c:	de b7       	in	r29, 0x3e	; 62
    4a2e:	a0 97       	sbiw	r28, 0x20	; 32
    4a30:	0f b6       	in	r0, 0x3f	; 63
    4a32:	f8 94       	cli
    4a34:	de bf       	out	0x3e, r29	; 62
    4a36:	0f be       	out	0x3f, r0	; 63
    4a38:	cd bf       	out	0x3d, r28	; 61
    4a3a:	6b 8f       	std	Y+27, r22	; 0x1b
    4a3c:	7c 8f       	std	Y+28, r23	; 0x1c
    4a3e:	8d 8f       	std	Y+29, r24	; 0x1d
    4a40:	9e 8f       	std	Y+30, r25	; 0x1e
    4a42:	4f 8f       	std	Y+31, r20	; 0x1f

	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4a44:	1e 82       	std	Y+6, r1	; 0x06

	// To handle store given number as string & converting process
	char  Copy_u8Buffer[20];
	uint8_t Local_u8Counter = 0;
    4a46:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t Local_u8NumberIndex= 0;
    4a48:	1c 82       	std	Y+4, r1	; 0x04


	// To handle reversing the string
	uint8_t Local_u8Start = 0;
    4a4a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t Local_u8End   = 0;
    4a4c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t Local_u8temp;


	//Handle Negative Numbers
	if(Copy_u8data < 0){
    4a4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a52:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4a54:	be 8d       	ldd	r27, Y+30	; 0x1e
    4a56:	bb 23       	and	r27, r27
    4a58:	94 f4       	brge	.+36     	; 0x4a7e <LCD_enuIntegerToString+0x58>
		LCD_enuSendData('-');
    4a5a:	8d e2       	ldi	r24, 0x2D	; 45
    4a5c:	0e 94 a3 24 	call	0x4946	; 0x4946 <LCD_enuSendData>
		Copy_u8data*=-1;
    4a60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a64:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4a66:	be 8d       	ldd	r27, Y+30	; 0x1e
    4a68:	b0 95       	com	r27
    4a6a:	a0 95       	com	r26
    4a6c:	90 95       	com	r25
    4a6e:	81 95       	neg	r24
    4a70:	9f 4f       	sbci	r25, 0xFF	; 255
    4a72:	af 4f       	sbci	r26, 0xFF	; 255
    4a74:	bf 4f       	sbci	r27, 0xFF	; 255
    4a76:	8b 8f       	std	Y+27, r24	; 0x1b
    4a78:	9c 8f       	std	Y+28, r25	; 0x1c
    4a7a:	ad 8f       	std	Y+29, r26	; 0x1d
    4a7c:	be 8f       	std	Y+30, r27	; 0x1e
	}


	if(Copy_u8data == 0){
    4a7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a82:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4a84:	be 8d       	ldd	r27, Y+30	; 0x1e
    4a86:	00 97       	sbiw	r24, 0x00	; 0
    4a88:	a1 05       	cpc	r26, r1
    4a8a:	b1 05       	cpc	r27, r1
    4a8c:	09 f0       	breq	.+2      	; 0x4a90 <LCD_enuIntegerToString+0x6a>
    4a8e:	4b c0       	rjmp	.+150    	; 0x4b26 <LCD_enuIntegerToString+0x100>
		Copy_u8Buffer[Local_u8Counter++] = '0';
    4a90:	8d 81       	ldd	r24, Y+5	; 0x05
    4a92:	28 2f       	mov	r18, r24
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	ce 01       	movw	r24, r28
    4a98:	07 96       	adiw	r24, 0x07	; 7
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	e2 0f       	add	r30, r18
    4a9e:	f3 1f       	adc	r31, r19
    4aa0:	80 e3       	ldi	r24, 0x30	; 48
    4aa2:	80 83       	st	Z, r24
    4aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa6:	8f 5f       	subi	r24, 0xFF	; 255
    4aa8:	8d 83       	std	Y+5, r24	; 0x05
		Copy_u8Buffer[Local_u8Counter] = '\0';
    4aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    4aac:	28 2f       	mov	r18, r24
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	ce 01       	movw	r24, r28
    4ab2:	07 96       	adiw	r24, 0x07	; 7
    4ab4:	fc 01       	movw	r30, r24
    4ab6:	e2 0f       	add	r30, r18
    4ab8:	f3 1f       	adc	r31, r19
    4aba:	10 82       	st	Z, r1

		return Local_enuErrrorState;
    4abc:	8e 81       	ldd	r24, Y+6	; 0x06
    4abe:	88 a3       	std	Y+32, r24	; 0x20
    4ac0:	7f c0       	rjmp	.+254    	; 0x4bc0 <LCD_enuIntegerToString+0x19a>

	else{


		while(Copy_u8data != 0){
			Local_u8NumberIndex = (Copy_u8data%Copy_u8Base);
    4ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ac4:	28 2f       	mov	r18, r24
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	40 e0       	ldi	r20, 0x00	; 0
    4aca:	50 e0       	ldi	r21, 0x00	; 0
    4acc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ace:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ad0:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4ad2:	be 8d       	ldd	r27, Y+30	; 0x1e
    4ad4:	bc 01       	movw	r22, r24
    4ad6:	cd 01       	movw	r24, r26
    4ad8:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <__divmodsi4>
    4adc:	dc 01       	movw	r26, r24
    4ade:	cb 01       	movw	r24, r22
    4ae0:	8c 83       	std	Y+4, r24	; 0x04

			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';
    4ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ae4:	28 2f       	mov	r18, r24
    4ae6:	30 e0       	ldi	r19, 0x00	; 0
    4ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    4aea:	48 2f       	mov	r20, r24
    4aec:	40 5d       	subi	r20, 0xD0	; 208
    4aee:	ce 01       	movw	r24, r28
    4af0:	07 96       	adiw	r24, 0x07	; 7
    4af2:	fc 01       	movw	r30, r24
    4af4:	e2 0f       	add	r30, r18
    4af6:	f3 1f       	adc	r31, r19
    4af8:	40 83       	st	Z, r20
    4afa:	8d 81       	ldd	r24, Y+5	; 0x05
    4afc:	8f 5f       	subi	r24, 0xFF	; 255
    4afe:	8d 83       	std	Y+5, r24	; 0x05

			Copy_u8data /= Copy_u8Base;
    4b00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4b02:	28 2f       	mov	r18, r24
    4b04:	30 e0       	ldi	r19, 0x00	; 0
    4b06:	40 e0       	ldi	r20, 0x00	; 0
    4b08:	50 e0       	ldi	r21, 0x00	; 0
    4b0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b0e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4b10:	be 8d       	ldd	r27, Y+30	; 0x1e
    4b12:	bc 01       	movw	r22, r24
    4b14:	cd 01       	movw	r24, r26
    4b16:	0e 94 c9 2e 	call	0x5d92	; 0x5d92 <__divmodsi4>
    4b1a:	da 01       	movw	r26, r20
    4b1c:	c9 01       	movw	r24, r18
    4b1e:	8b 8f       	std	Y+27, r24	; 0x1b
    4b20:	9c 8f       	std	Y+28, r25	; 0x1c
    4b22:	ad 8f       	std	Y+29, r26	; 0x1d
    4b24:	be 8f       	std	Y+30, r27	; 0x1e


	else{


		while(Copy_u8data != 0){
    4b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b2a:	ad 8d       	ldd	r26, Y+29	; 0x1d
    4b2c:	be 8d       	ldd	r27, Y+30	; 0x1e
    4b2e:	00 97       	sbiw	r24, 0x00	; 0
    4b30:	a1 05       	cpc	r26, r1
    4b32:	b1 05       	cpc	r27, r1
    4b34:	31 f6       	brne	.-116    	; 0x4ac2 <LCD_enuIntegerToString+0x9c>
			Copy_u8Buffer[Local_u8Counter++] = (Local_u8NumberIndex)+'0';

			Copy_u8data /= Copy_u8Base;
		}

	    Copy_u8Buffer[Local_u8Counter] = '\0';
    4b36:	8d 81       	ldd	r24, Y+5	; 0x05
    4b38:	28 2f       	mov	r18, r24
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	ce 01       	movw	r24, r28
    4b3e:	07 96       	adiw	r24, 0x07	; 7
    4b40:	fc 01       	movw	r30, r24
    4b42:	e2 0f       	add	r30, r18
    4b44:	f3 1f       	adc	r31, r19
    4b46:	10 82       	st	Z, r1

	}

	Local_u8End = Local_u8Counter-1;
    4b48:	8d 81       	ldd	r24, Y+5	; 0x05
    4b4a:	81 50       	subi	r24, 0x01	; 1
    4b4c:	8a 83       	std	Y+2, r24	; 0x02
    4b4e:	2c c0       	rjmp	.+88     	; 0x4ba8 <LCD_enuIntegerToString+0x182>
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    	Local_u8temp = Copy_u8Buffer[Local_u8Start];
    4b50:	8b 81       	ldd	r24, Y+3	; 0x03
    4b52:	28 2f       	mov	r18, r24
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	ce 01       	movw	r24, r28
    4b58:	07 96       	adiw	r24, 0x07	; 7
    4b5a:	fc 01       	movw	r30, r24
    4b5c:	e2 0f       	add	r30, r18
    4b5e:	f3 1f       	adc	r31, r19
    4b60:	80 81       	ld	r24, Z
    4b62:	89 83       	std	Y+1, r24	; 0x01

        Copy_u8Buffer[Local_u8Start] = Copy_u8Buffer[Local_u8End];
    4b64:	8b 81       	ldd	r24, Y+3	; 0x03
    4b66:	48 2f       	mov	r20, r24
    4b68:	50 e0       	ldi	r21, 0x00	; 0
    4b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b6c:	28 2f       	mov	r18, r24
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	ce 01       	movw	r24, r28
    4b72:	07 96       	adiw	r24, 0x07	; 7
    4b74:	fc 01       	movw	r30, r24
    4b76:	e2 0f       	add	r30, r18
    4b78:	f3 1f       	adc	r31, r19
    4b7a:	20 81       	ld	r18, Z
    4b7c:	ce 01       	movw	r24, r28
    4b7e:	07 96       	adiw	r24, 0x07	; 7
    4b80:	fc 01       	movw	r30, r24
    4b82:	e4 0f       	add	r30, r20
    4b84:	f5 1f       	adc	r31, r21
    4b86:	20 83       	st	Z, r18
        Copy_u8Buffer[Local_u8End] = Local_u8temp;
    4b88:	8a 81       	ldd	r24, Y+2	; 0x02
    4b8a:	28 2f       	mov	r18, r24
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	ce 01       	movw	r24, r28
    4b90:	07 96       	adiw	r24, 0x07	; 7
    4b92:	fc 01       	movw	r30, r24
    4b94:	e2 0f       	add	r30, r18
    4b96:	f3 1f       	adc	r31, r19
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	80 83       	st	Z, r24

        Local_u8Start++;
    4b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ba0:	8b 83       	std	Y+3, r24	; 0x03
        Local_u8End--;
    4ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ba4:	81 50       	subi	r24, 0x01	; 1
    4ba6:	8a 83       	std	Y+2, r24	; 0x02

	}

	Local_u8End = Local_u8Counter-1;
    // Reverse Buffer
	while(Local_u8Start < Local_u8End){
    4ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    4baa:	8a 81       	ldd	r24, Y+2	; 0x02
    4bac:	98 17       	cp	r25, r24
    4bae:	80 f2       	brcs	.-96     	; 0x4b50 <LCD_enuIntegerToString+0x12a>

        Local_u8Start++;
        Local_u8End--;
    }

	LCD_u8SendString(Copy_u8Buffer);
    4bb0:	ce 01       	movw	r24, r28
    4bb2:	07 96       	adiw	r24, 0x07	; 7
    4bb4:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <LCD_u8SendString>

	Local_enuErrrorState = ERROR_STATUS_OK;
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	8e 83       	std	Y+6, r24	; 0x06
	return Local_enuErrrorState;
    4bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    4bbe:	88 a3       	std	Y+32, r24	; 0x20
    4bc0:	88 a1       	ldd	r24, Y+32	; 0x20
}
    4bc2:	a0 96       	adiw	r28, 0x20	; 32
    4bc4:	0f b6       	in	r0, 0x3f	; 63
    4bc6:	f8 94       	cli
    4bc8:	de bf       	out	0x3e, r29	; 62
    4bca:	0f be       	out	0x3f, r0	; 63
    4bcc:	cd bf       	out	0x3d, r28	; 61
    4bce:	cf 91       	pop	r28
    4bd0:	df 91       	pop	r29
    4bd2:	08 95       	ret

00004bd4 <LCD_u8SetPosXY>:



ErrorStatus_t LCD_u8SetPosXY(uint8_t copy_u8PosX,uint8_t copy_u8PosY)
{
    4bd4:	df 93       	push	r29
    4bd6:	cf 93       	push	r28
    4bd8:	cd b7       	in	r28, 0x3d	; 61
    4bda:	de b7       	in	r29, 0x3e	; 62
    4bdc:	27 97       	sbiw	r28, 0x07	; 7
    4bde:	0f b6       	in	r0, 0x3f	; 63
    4be0:	f8 94       	cli
    4be2:	de bf       	out	0x3e, r29	; 62
    4be4:	0f be       	out	0x3f, r0	; 63
    4be6:	cd bf       	out	0x3d, r28	; 61
    4be8:	8b 83       	std	Y+3, r24	; 0x03
    4bea:	6c 83       	std	Y+4, r22	; 0x04
	ErrorStatus_t local_u8ErrorState=ERROR_STATUS_FAILURE;
    4bec:	1a 82       	std	Y+2, r1	; 0x02

	if(copy_u8PosX > 16 || copy_u8PosY > 2){
    4bee:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf0:	81 31       	cpi	r24, 0x11	; 17
    4bf2:	18 f4       	brcc	.+6      	; 0x4bfa <LCD_u8SetPosXY+0x26>
    4bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    4bf6:	83 30       	cpi	r24, 0x03	; 3
    4bf8:	18 f0       	brcs	.+6      	; 0x4c00 <LCD_u8SetPosXY+0x2c>
		return local_u8ErrorState;
    4bfa:	2a 81       	ldd	r18, Y+2	; 0x02
    4bfc:	2f 83       	std	Y+7, r18	; 0x07
    4bfe:	23 c0       	rjmp	.+70     	; 0x4c46 <LCD_u8SetPosXY+0x72>
	}

	else{
		uint8_t local_u8DDRAM=0;
    4c00:	19 82       	std	Y+1, r1	; 0x01

		switch(copy_u8PosY)
    4c02:	8c 81       	ldd	r24, Y+4	; 0x04
    4c04:	28 2f       	mov	r18, r24
    4c06:	30 e0       	ldi	r19, 0x00	; 0
    4c08:	3e 83       	std	Y+6, r19	; 0x06
    4c0a:	2d 83       	std	Y+5, r18	; 0x05
    4c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    4c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    4c10:	81 30       	cpi	r24, 0x01	; 1
    4c12:	91 05       	cpc	r25, r1
    4c14:	31 f0       	breq	.+12     	; 0x4c22 <LCD_u8SetPosXY+0x4e>
    4c16:	2d 81       	ldd	r18, Y+5	; 0x05
    4c18:	3e 81       	ldd	r19, Y+6	; 0x06
    4c1a:	22 30       	cpi	r18, 0x02	; 2
    4c1c:	31 05       	cpc	r19, r1
    4c1e:	21 f0       	breq	.+8      	; 0x4c28 <LCD_u8SetPosXY+0x54>
    4c20:	07 c0       	rjmp	.+14     	; 0x4c30 <LCD_u8SetPosXY+0x5c>
		{
			case 1:
				local_u8DDRAM = copy_u8PosX;
    4c22:	8b 81       	ldd	r24, Y+3	; 0x03
    4c24:	89 83       	std	Y+1, r24	; 0x01
    4c26:	05 c0       	rjmp	.+10     	; 0x4c32 <LCD_u8SetPosXY+0x5e>
				break;

			case 2:
				local_u8DDRAM= copy_u8PosX+0x40;
    4c28:	8b 81       	ldd	r24, Y+3	; 0x03
    4c2a:	80 5c       	subi	r24, 0xC0	; 192
    4c2c:	89 83       	std	Y+1, r24	; 0x01
    4c2e:	01 c0       	rjmp	.+2      	; 0x4c32 <LCD_u8SetPosXY+0x5e>
				break;

			default:
				local_u8ErrorState=ERROR_STATUS_FAILURE;
    4c30:	1a 82       	std	Y+2, r1	; 0x02
			break;
		}


		SET_BIT(local_u8DDRAM,7); // From datasheet
    4c32:	89 81       	ldd	r24, Y+1	; 0x01
    4c34:	80 68       	ori	r24, 0x80	; 128
    4c36:	89 83       	std	Y+1, r24	; 0x01

		LCD_enuSendCommand(local_u8DDRAM);
    4c38:	89 81       	ldd	r24, Y+1	; 0x01
    4c3a:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
	}

	local_u8ErrorState = ERROR_STATUS_OK;
    4c3e:	81 e0       	ldi	r24, 0x01	; 1
    4c40:	8a 83       	std	Y+2, r24	; 0x02
	return local_u8ErrorState;
    4c42:	3a 81       	ldd	r19, Y+2	; 0x02
    4c44:	3f 83       	std	Y+7, r19	; 0x07
    4c46:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4c48:	27 96       	adiw	r28, 0x07	; 7
    4c4a:	0f b6       	in	r0, 0x3f	; 63
    4c4c:	f8 94       	cli
    4c4e:	de bf       	out	0x3e, r29	; 62
    4c50:	0f be       	out	0x3f, r0	; 63
    4c52:	cd bf       	out	0x3d, r28	; 61
    4c54:	cf 91       	pop	r28
    4c56:	df 91       	pop	r29
    4c58:	08 95       	ret

00004c5a <LCD_u8StoreCustomChar>:


ErrorStatus_t LCD_u8StoreCustomChar(uint8_t *copy_u8pattern, uint8_t copy_u8CGRAM_index){
    4c5a:	df 93       	push	r29
    4c5c:	cf 93       	push	r28
    4c5e:	cd b7       	in	r28, 0x3d	; 61
    4c60:	de b7       	in	r29, 0x3e	; 62
    4c62:	27 97       	sbiw	r28, 0x07	; 7
    4c64:	0f b6       	in	r0, 0x3f	; 63
    4c66:	f8 94       	cli
    4c68:	de bf       	out	0x3e, r29	; 62
    4c6a:	0f be       	out	0x3f, r0	; 63
    4c6c:	cd bf       	out	0x3d, r28	; 61
    4c6e:	9d 83       	std	Y+5, r25	; 0x05
    4c70:	8c 83       	std	Y+4, r24	; 0x04
    4c72:	6e 83       	std	Y+6, r22	; 0x06
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4c74:	1b 82       	std	Y+3, r1	; 0x03



	if(copy_u8pattern == NULL || copy_u8CGRAM_index < 0 || copy_u8CGRAM_index > 8){
    4c76:	8c 81       	ldd	r24, Y+4	; 0x04
    4c78:	9d 81       	ldd	r25, Y+5	; 0x05
    4c7a:	00 97       	sbiw	r24, 0x00	; 0
    4c7c:	19 f0       	breq	.+6      	; 0x4c84 <LCD_u8StoreCustomChar+0x2a>
    4c7e:	8e 81       	ldd	r24, Y+6	; 0x06
    4c80:	89 30       	cpi	r24, 0x09	; 9
    4c82:	18 f0       	brcs	.+6      	; 0x4c8a <LCD_u8StoreCustomChar+0x30>
		return Local_enuErrrorState;
    4c84:	8b 81       	ldd	r24, Y+3	; 0x03
    4c86:	8f 83       	std	Y+7, r24	; 0x07
    4c88:	2a c0       	rjmp	.+84     	; 0x4cde <LCD_u8StoreCustomChar+0x84>

	}else{
		uint8_t local_u8CGRAM= copy_u8CGRAM_index*8;
    4c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c8c:	88 2f       	mov	r24, r24
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	88 0f       	add	r24, r24
    4c92:	99 1f       	adc	r25, r25
    4c94:	88 0f       	add	r24, r24
    4c96:	99 1f       	adc	r25, r25
    4c98:	88 0f       	add	r24, r24
    4c9a:	99 1f       	adc	r25, r25
    4c9c:	8a 83       	std	Y+2, r24	; 0x02

		SET_BIT(local_u8CGRAM, 6); // from datasheet
    4c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca0:	80 64       	ori	r24, 0x40	; 64
    4ca2:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuSendCommand(local_u8CGRAM);
    4ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca6:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    4caa:	19 82       	std	Y+1, r1	; 0x01
    4cac:	0e c0       	rjmp	.+28     	; 0x4cca <LCD_u8StoreCustomChar+0x70>
			LCD_enuSendData(copy_u8pattern[Local_u8Index]);
    4cae:	89 81       	ldd	r24, Y+1	; 0x01
    4cb0:	28 2f       	mov	r18, r24
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    4cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    4cb8:	fc 01       	movw	r30, r24
    4cba:	e2 0f       	add	r30, r18
    4cbc:	f3 1f       	adc	r31, r19
    4cbe:	80 81       	ld	r24, Z
    4cc0:	0e 94 a3 24 	call	0x4946	; 0x4946 <LCD_enuSendData>
		SET_BIT(local_u8CGRAM, 6); // from datasheet
		LCD_enuSendCommand(local_u8CGRAM);



		for(uint8_t Local_u8Index = 0; Local_u8Index < 8; Local_u8Index++){
    4cc4:	89 81       	ldd	r24, Y+1	; 0x01
    4cc6:	8f 5f       	subi	r24, 0xFF	; 255
    4cc8:	89 83       	std	Y+1, r24	; 0x01
    4cca:	89 81       	ldd	r24, Y+1	; 0x01
    4ccc:	88 30       	cpi	r24, 0x08	; 8
    4cce:	78 f3       	brcs	.-34     	; 0x4cae <LCD_u8StoreCustomChar+0x54>

	}


	// return Home
	LCD_enuSendCommand(RETURN_HOME);
    4cd0:	82 e0       	ldi	r24, 0x02	; 2
    4cd2:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
	Local_enuErrrorState = ERROR_STATUS_OK;
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErrrorState;
    4cda:	8b 81       	ldd	r24, Y+3	; 0x03
    4cdc:	8f 83       	std	Y+7, r24	; 0x07
    4cde:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4ce0:	27 96       	adiw	r28, 0x07	; 7
    4ce2:	0f b6       	in	r0, 0x3f	; 63
    4ce4:	f8 94       	cli
    4ce6:	de bf       	out	0x3e, r29	; 62
    4ce8:	0f be       	out	0x3f, r0	; 63
    4cea:	cd bf       	out	0x3d, r28	; 61
    4cec:	cf 91       	pop	r28
    4cee:	df 91       	pop	r29
    4cf0:	08 95       	ret

00004cf2 <LCD_u8DisplayCustomChar>:



ErrorStatus_t LCD_u8DisplayCustomChar(uint8_t copy_u8CGRAM_index, uint8_t copy_u8Col, uint8_t copy_u8Row){
    4cf2:	df 93       	push	r29
    4cf4:	cf 93       	push	r28
    4cf6:	00 d0       	rcall	.+0      	; 0x4cf8 <LCD_u8DisplayCustomChar+0x6>
    4cf8:	00 d0       	rcall	.+0      	; 0x4cfa <LCD_u8DisplayCustomChar+0x8>
    4cfa:	cd b7       	in	r28, 0x3d	; 61
    4cfc:	de b7       	in	r29, 0x3e	; 62
    4cfe:	8a 83       	std	Y+2, r24	; 0x02
    4d00:	6b 83       	std	Y+3, r22	; 0x03
    4d02:	4c 83       	std	Y+4, r20	; 0x04
	ErrorStatus_t Local_enuErrrorState = ERROR_STATUS_FAILURE;
    4d04:	19 82       	std	Y+1, r1	; 0x01


	LCD_u8SetPosXY(copy_u8Row, copy_u8Col);
    4d06:	8c 81       	ldd	r24, Y+4	; 0x04
    4d08:	6b 81       	ldd	r22, Y+3	; 0x03
    4d0a:	0e 94 ea 25 	call	0x4bd4	; 0x4bd4 <LCD_u8SetPosXY>
	/*
	 * if tried to write 0-7
	 * we accessing reserved places in CGROM for CGRAM
	 * */

	LCD_enuSendData(copy_u8CGRAM_index);
    4d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d10:	0e 94 a3 24 	call	0x4946	; 0x4946 <LCD_enuSendData>


	Local_enuErrrorState = ERROR_STATUS_OK;
    4d14:	81 e0       	ldi	r24, 0x01	; 1
    4d16:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrrorState;
    4d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d1a:	0f 90       	pop	r0
    4d1c:	0f 90       	pop	r0
    4d1e:	0f 90       	pop	r0
    4d20:	0f 90       	pop	r0
    4d22:	cf 91       	pop	r28
    4d24:	df 91       	pop	r29
    4d26:	08 95       	ret

00004d28 <GLCDKS0108_SelectChip>:
#include "GLCDKS0108_private.h"
#include "GLCKS0108_config.h"
/*****************************************************************/


static void GLCDKS0108_SelectChip(uint8_t copy_u8Chip) {
    4d28:	df 93       	push	r29
    4d2a:	cf 93       	push	r28
    4d2c:	0f 92       	push	r0
    4d2e:	cd b7       	in	r28, 0x3d	; 61
    4d30:	de b7       	in	r29, 0x3e	; 62
    4d32:	89 83       	std	Y+1, r24	; 0x01

    if (copy_u8Chip == 0) {
    4d34:	89 81       	ldd	r24, Y+1	; 0x01
    4d36:	88 23       	and	r24, r24
    4d38:	59 f4       	brne	.+22     	; 0x4d50 <GLCDKS0108_SelectChip+0x28>

    	DIO_enuSetPinValue(GLCDKS0108_CS1_PORT, GLCDKS0108_CS1_PIN, DIO_u8HIGH);
    4d3a:	81 e0       	ldi	r24, 0x01	; 1
    4d3c:	64 e0       	ldi	r22, 0x04	; 4
    4d3e:	41 e0       	ldi	r20, 0x01	; 1
    4d40:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    	DIO_enuSetPinValue(GLCDKS0108_CS2_PORT, GLCDKS0108_CS2_PIN, DIO_u8LOW);
    4d44:	81 e0       	ldi	r24, 0x01	; 1
    4d46:	65 e0       	ldi	r22, 0x05	; 5
    4d48:	40 e0       	ldi	r20, 0x00	; 0
    4d4a:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    4d4e:	0d c0       	rjmp	.+26     	; 0x4d6a <GLCDKS0108_SelectChip+0x42>


    } else if (copy_u8Chip == 1) {
    4d50:	89 81       	ldd	r24, Y+1	; 0x01
    4d52:	81 30       	cpi	r24, 0x01	; 1
    4d54:	51 f4       	brne	.+20     	; 0x4d6a <GLCDKS0108_SelectChip+0x42>

    	DIO_enuSetPinValue(GLCDKS0108_CS1_PORT, GLCDKS0108_CS1_PIN, DIO_u8LOW);
    4d56:	81 e0       	ldi	r24, 0x01	; 1
    4d58:	64 e0       	ldi	r22, 0x04	; 4
    4d5a:	40 e0       	ldi	r20, 0x00	; 0
    4d5c:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    	DIO_enuSetPinValue(GLCDKS0108_CS2_PORT, GLCDKS0108_CS2_PIN, DIO_u8HIGH);
    4d60:	81 e0       	ldi	r24, 0x01	; 1
    4d62:	65 e0       	ldi	r22, 0x05	; 5
    4d64:	41 e0       	ldi	r20, 0x01	; 1
    4d66:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>

    }
}
    4d6a:	0f 90       	pop	r0
    4d6c:	cf 91       	pop	r28
    4d6e:	df 91       	pop	r29
    4d70:	08 95       	ret

00004d72 <GLCDKS0108_Init>:

void GLCDKS0108_Init(void) {
    4d72:	df 93       	push	r29
    4d74:	cf 93       	push	r28
    4d76:	cd b7       	in	r28, 0x3d	; 61
    4d78:	de b7       	in	r29, 0x3e	; 62
    4d7a:	2e 97       	sbiw	r28, 0x0e	; 14
    4d7c:	0f b6       	in	r0, 0x3f	; 63
    4d7e:	f8 94       	cli
    4d80:	de bf       	out	0x3e, r29	; 62
    4d82:	0f be       	out	0x3f, r0	; 63
    4d84:	cd bf       	out	0x3d, r28	; 61
    /* Set data and control ports as outputs */
    GLCDKS0108_DATA_DDR = 0xFF;
    4d86:	ea e3       	ldi	r30, 0x3A	; 58
    4d88:	f0 e0       	ldi	r31, 0x00	; 0
    4d8a:	8f ef       	ldi	r24, 0xFF	; 255
    4d8c:	80 83       	st	Z, r24



    DIO_enuSetPinDirection(GLCDKS0108_RS_PORT,  GLCDKS0108_RS_PIN,  DIO_u8OUTPUT);
    4d8e:	81 e0       	ldi	r24, 0x01	; 1
    4d90:	62 e0       	ldi	r22, 0x02	; 2
    4d92:	41 e0       	ldi	r20, 0x01	; 1
    4d94:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
    DIO_enuSetPinDirection(GLCDKS0108_RW_PORT,  GLCDKS0108_RW_PIN,  DIO_u8OUTPUT);
    4d98:	81 e0       	ldi	r24, 0x01	; 1
    4d9a:	61 e0       	ldi	r22, 0x01	; 1
    4d9c:	41 e0       	ldi	r20, 0x01	; 1
    4d9e:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
    DIO_enuSetPinDirection(GLCDKS0108_EN_PORT,  GLCDKS0108_EN_PIN,  DIO_u8OUTPUT);
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	60 e0       	ldi	r22, 0x00	; 0
    4da6:	41 e0       	ldi	r20, 0x01	; 1
    4da8:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
    DIO_enuSetPinDirection(GLCDKS0108_CS1_PORT, GLCDKS0108_CS1_PIN, DIO_u8OUTPUT);
    4dac:	81 e0       	ldi	r24, 0x01	; 1
    4dae:	64 e0       	ldi	r22, 0x04	; 4
    4db0:	41 e0       	ldi	r20, 0x01	; 1
    4db2:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
    DIO_enuSetPinDirection(GLCDKS0108_CS2_PORT, GLCDKS0108_CS2_PIN, DIO_u8OUTPUT);
    4db6:	81 e0       	ldi	r24, 0x01	; 1
    4db8:	65 e0       	ldi	r22, 0x05	; 5
    4dba:	41 e0       	ldi	r20, 0x01	; 1
    4dbc:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
    DIO_enuSetPinDirection(GLCDKS0108_RST_PORT, GLCDKS0108_RST_PIN, DIO_u8OUTPUT);
    4dc0:	81 e0       	ldi	r24, 0x01	; 1
    4dc2:	66 e0       	ldi	r22, 0x06	; 6
    4dc4:	41 e0       	ldi	r20, 0x01	; 1
    4dc6:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>


    /************************ Reset the GLCD *************************/
    DIO_enuSetPinValue(GLCDKS0108_RST_PORT, GLCDKS0108_RST_PIN, DIO_u8LOW);
    4dca:	81 e0       	ldi	r24, 0x01	; 1
    4dcc:	66 e0       	ldi	r22, 0x06	; 6
    4dce:	40 e0       	ldi	r20, 0x00	; 0
    4dd0:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    4dd4:	80 e0       	ldi	r24, 0x00	; 0
    4dd6:	90 e0       	ldi	r25, 0x00	; 0
    4dd8:	a0 e8       	ldi	r26, 0x80	; 128
    4dda:	bf e3       	ldi	r27, 0x3F	; 63
    4ddc:	8b 87       	std	Y+11, r24	; 0x0b
    4dde:	9c 87       	std	Y+12, r25	; 0x0c
    4de0:	ad 87       	std	Y+13, r26	; 0x0d
    4de2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4de4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4de6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dec:	20 e0       	ldi	r18, 0x00	; 0
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	4a e7       	ldi	r20, 0x7A	; 122
    4df2:	55 e4       	ldi	r21, 0x45	; 69
    4df4:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    4df8:	dc 01       	movw	r26, r24
    4dfa:	cb 01       	movw	r24, r22
    4dfc:	8f 83       	std	Y+7, r24	; 0x07
    4dfe:	98 87       	std	Y+8, r25	; 0x08
    4e00:	a9 87       	std	Y+9, r26	; 0x09
    4e02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e04:	6f 81       	ldd	r22, Y+7	; 0x07
    4e06:	78 85       	ldd	r23, Y+8	; 0x08
    4e08:	89 85       	ldd	r24, Y+9	; 0x09
    4e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e0c:	20 e0       	ldi	r18, 0x00	; 0
    4e0e:	30 e0       	ldi	r19, 0x00	; 0
    4e10:	40 e8       	ldi	r20, 0x80	; 128
    4e12:	5f e3       	ldi	r21, 0x3F	; 63
    4e14:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    4e18:	88 23       	and	r24, r24
    4e1a:	2c f4       	brge	.+10     	; 0x4e26 <GLCDKS0108_Init+0xb4>
		__ticks = 1;
    4e1c:	81 e0       	ldi	r24, 0x01	; 1
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	9e 83       	std	Y+6, r25	; 0x06
    4e22:	8d 83       	std	Y+5, r24	; 0x05
    4e24:	3f c0       	rjmp	.+126    	; 0x4ea4 <GLCDKS0108_Init+0x132>
	else if (__tmp > 65535)
    4e26:	6f 81       	ldd	r22, Y+7	; 0x07
    4e28:	78 85       	ldd	r23, Y+8	; 0x08
    4e2a:	89 85       	ldd	r24, Y+9	; 0x09
    4e2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e2e:	20 e0       	ldi	r18, 0x00	; 0
    4e30:	3f ef       	ldi	r19, 0xFF	; 255
    4e32:	4f e7       	ldi	r20, 0x7F	; 127
    4e34:	57 e4       	ldi	r21, 0x47	; 71
    4e36:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    4e3a:	18 16       	cp	r1, r24
    4e3c:	4c f5       	brge	.+82     	; 0x4e90 <GLCDKS0108_Init+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e42:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e44:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e46:	20 e0       	ldi	r18, 0x00	; 0
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	40 e2       	ldi	r20, 0x20	; 32
    4e4c:	51 e4       	ldi	r21, 0x41	; 65
    4e4e:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    4e52:	dc 01       	movw	r26, r24
    4e54:	cb 01       	movw	r24, r22
    4e56:	bc 01       	movw	r22, r24
    4e58:	cd 01       	movw	r24, r26
    4e5a:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    4e5e:	dc 01       	movw	r26, r24
    4e60:	cb 01       	movw	r24, r22
    4e62:	9e 83       	std	Y+6, r25	; 0x06
    4e64:	8d 83       	std	Y+5, r24	; 0x05
    4e66:	0f c0       	rjmp	.+30     	; 0x4e86 <GLCDKS0108_Init+0x114>
    4e68:	80 e9       	ldi	r24, 0x90	; 144
    4e6a:	91 e0       	ldi	r25, 0x01	; 1
    4e6c:	9c 83       	std	Y+4, r25	; 0x04
    4e6e:	8b 83       	std	Y+3, r24	; 0x03
    4e70:	8b 81       	ldd	r24, Y+3	; 0x03
    4e72:	9c 81       	ldd	r25, Y+4	; 0x04
    4e74:	01 97       	sbiw	r24, 0x01	; 1
    4e76:	f1 f7       	brne	.-4      	; 0x4e74 <GLCDKS0108_Init+0x102>
    4e78:	9c 83       	std	Y+4, r25	; 0x04
    4e7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e80:	01 97       	sbiw	r24, 0x01	; 1
    4e82:	9e 83       	std	Y+6, r25	; 0x06
    4e84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e86:	8d 81       	ldd	r24, Y+5	; 0x05
    4e88:	9e 81       	ldd	r25, Y+6	; 0x06
    4e8a:	00 97       	sbiw	r24, 0x00	; 0
    4e8c:	69 f7       	brne	.-38     	; 0x4e68 <GLCDKS0108_Init+0xf6>
    4e8e:	14 c0       	rjmp	.+40     	; 0x4eb8 <GLCDKS0108_Init+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e90:	6f 81       	ldd	r22, Y+7	; 0x07
    4e92:	78 85       	ldd	r23, Y+8	; 0x08
    4e94:	89 85       	ldd	r24, Y+9	; 0x09
    4e96:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e98:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    4e9c:	dc 01       	movw	r26, r24
    4e9e:	cb 01       	movw	r24, r22
    4ea0:	9e 83       	std	Y+6, r25	; 0x06
    4ea2:	8d 83       	std	Y+5, r24	; 0x05
    4ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea8:	9a 83       	std	Y+2, r25	; 0x02
    4eaa:	89 83       	std	Y+1, r24	; 0x01
    4eac:	89 81       	ldd	r24, Y+1	; 0x01
    4eae:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb0:	01 97       	sbiw	r24, 0x01	; 1
    4eb2:	f1 f7       	brne	.-4      	; 0x4eb0 <GLCDKS0108_Init+0x13e>
    4eb4:	9a 83       	std	Y+2, r25	; 0x02
    4eb6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    DIO_enuSetPinValue(GLCDKS0108_RST_PORT, GLCDKS0108_RST_PIN, DIO_u8HIGH);
    4eb8:	81 e0       	ldi	r24, 0x01	; 1
    4eba:	66 e0       	ldi	r22, 0x06	; 6
    4ebc:	41 e0       	ldi	r20, 0x01	; 1
    4ebe:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    /*****************************************************************/


    /********************* Initialize both chips *********************/
    GLCDKS0108_SelectChip(0);
    4ec2:	80 e0       	ldi	r24, 0x00	; 0
    4ec4:	0e 94 94 26 	call	0x4d28	; 0x4d28 <GLCDKS0108_SelectChip>
    GLCDKS0108_SendCommand(GLCDKS0108_DISPLAY_OFF); /* Display OFF */
    4ec8:	8e e3       	ldi	r24, 0x3E	; 62
    4eca:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
    GLCDKS0108_SendCommand(GLCDKS0108_SET_Y_ADDRESS); /* Set Y address (column=0) */
    4ece:	80 e4       	ldi	r24, 0x40	; 64
    4ed0:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
    GLCDKS0108_SendCommand(GLCDKS0108_SET_X_ADDRESS); /* Set X address (page=0) */
    4ed4:	88 eb       	ldi	r24, 0xB8	; 184
    4ed6:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
    GLCDKS0108_SendCommand(GLCDKS0108_SET_Z_ADDRESS); /* Set Z address (start line=0) */
    4eda:	80 ec       	ldi	r24, 0xC0	; 192
    4edc:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
    GLCDKS0108_SendCommand(GLCDKS0108_DISPLAY_ON); /* Display ON */
    4ee0:	8f e3       	ldi	r24, 0x3F	; 63
    4ee2:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>

    GLCDKS0108_SelectChip(1);
    4ee6:	81 e0       	ldi	r24, 0x01	; 1
    4ee8:	0e 94 94 26 	call	0x4d28	; 0x4d28 <GLCDKS0108_SelectChip>
    GLCDKS0108_SendCommand(GLCDKS0108_DISPLAY_OFF); /* Display OFF */
    4eec:	8e e3       	ldi	r24, 0x3E	; 62
    4eee:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
    GLCDKS0108_SendCommand(GLCDKS0108_SET_Y_ADDRESS); /* Set Y address (column=0) */
    4ef2:	80 e4       	ldi	r24, 0x40	; 64
    4ef4:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
    GLCDKS0108_SendCommand(GLCDKS0108_SET_X_ADDRESS); /* Set X address (page=0) */
    4ef8:	88 eb       	ldi	r24, 0xB8	; 184
    4efa:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
    GLCDKS0108_SendCommand(GLCDKS0108_SET_Z_ADDRESS); /* Set Z address (start line=0) */
    4efe:	80 ec       	ldi	r24, 0xC0	; 192
    4f00:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
    GLCDKS0108_SendCommand(GLCDKS0108_DISPLAY_ON); /* Display ON */
    4f04:	8f e3       	ldi	r24, 0x3F	; 63
    4f06:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
    /*****************************************************************/
}
    4f0a:	2e 96       	adiw	r28, 0x0e	; 14
    4f0c:	0f b6       	in	r0, 0x3f	; 63
    4f0e:	f8 94       	cli
    4f10:	de bf       	out	0x3e, r29	; 62
    4f12:	0f be       	out	0x3f, r0	; 63
    4f14:	cd bf       	out	0x3d, r28	; 61
    4f16:	cf 91       	pop	r28
    4f18:	df 91       	pop	r29
    4f1a:	08 95       	ret

00004f1c <GLCDKS0108_ClearAll>:


void GLCDKS0108_ClearAll(void) {
    4f1c:	df 93       	push	r29
    4f1e:	cf 93       	push	r28
    4f20:	00 d0       	rcall	.+0      	; 0x4f22 <GLCDKS0108_ClearAll+0x6>
    4f22:	0f 92       	push	r0
    4f24:	cd b7       	in	r28, 0x3d	; 61
    4f26:	de b7       	in	r29, 0x3e	; 62

	for (uint8_t local_u8PageIndex = 0; local_u8PageIndex < 8; local_u8PageIndex++) {
    4f28:	1b 82       	std	Y+3, r1	; 0x03
    4f2a:	20 c0       	rjmp	.+64     	; 0x4f6c <GLCDKS0108_ClearAll+0x50>

		for(uint8_t local_u8ChipIndex = 0; local_u8ChipIndex < GLCD_NUM_CHIPS; local_u8ChipIndex++){
    4f2c:	1a 82       	std	Y+2, r1	; 0x02
    4f2e:	18 c0       	rjmp	.+48     	; 0x4f60 <GLCDKS0108_ClearAll+0x44>

			GLCDKS0108_SelectChip(local_u8ChipIndex);
    4f30:	8a 81       	ldd	r24, Y+2	; 0x02
    4f32:	0e 94 94 26 	call	0x4d28	; 0x4d28 <GLCDKS0108_SelectChip>
            GLCDKS0108_SendCommand(GLCDKS0108_SET_X_ADDRESS | local_u8PageIndex);    // Set page
    4f36:	8b 81       	ldd	r24, Y+3	; 0x03
    4f38:	88 6b       	ori	r24, 0xB8	; 184
    4f3a:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
            GLCDKS0108_SendCommand(GLCDKS0108_SET_Y_ADDRESS | 0);       			// Reset column
    4f3e:	80 e4       	ldi	r24, 0x40	; 64
    4f40:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>

            for (uint8_t local_u8colIndex = 0; local_u8colIndex < 64; local_u8colIndex++) {
    4f44:	19 82       	std	Y+1, r1	; 0x01
    4f46:	06 c0       	rjmp	.+12     	; 0x4f54 <GLCDKS0108_ClearAll+0x38>
                GLCDKS0108_SendData(0x00); // Clear data
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	0e 94 02 2a 	call	0x5404	; 0x5404 <GLCDKS0108_SendData>

			GLCDKS0108_SelectChip(local_u8ChipIndex);
            GLCDKS0108_SendCommand(GLCDKS0108_SET_X_ADDRESS | local_u8PageIndex);    // Set page
            GLCDKS0108_SendCommand(GLCDKS0108_SET_Y_ADDRESS | 0);       			// Reset column

            for (uint8_t local_u8colIndex = 0; local_u8colIndex < 64; local_u8colIndex++) {
    4f4e:	89 81       	ldd	r24, Y+1	; 0x01
    4f50:	8f 5f       	subi	r24, 0xFF	; 255
    4f52:	89 83       	std	Y+1, r24	; 0x01
    4f54:	89 81       	ldd	r24, Y+1	; 0x01
    4f56:	80 34       	cpi	r24, 0x40	; 64
    4f58:	b8 f3       	brcs	.-18     	; 0x4f48 <GLCDKS0108_ClearAll+0x2c>

void GLCDKS0108_ClearAll(void) {

	for (uint8_t local_u8PageIndex = 0; local_u8PageIndex < 8; local_u8PageIndex++) {

		for(uint8_t local_u8ChipIndex = 0; local_u8ChipIndex < GLCD_NUM_CHIPS; local_u8ChipIndex++){
    4f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f5c:	8f 5f       	subi	r24, 0xFF	; 255
    4f5e:	8a 83       	std	Y+2, r24	; 0x02
    4f60:	8a 81       	ldd	r24, Y+2	; 0x02
    4f62:	82 30       	cpi	r24, 0x02	; 2
    4f64:	28 f3       	brcs	.-54     	; 0x4f30 <GLCDKS0108_ClearAll+0x14>
}


void GLCDKS0108_ClearAll(void) {

	for (uint8_t local_u8PageIndex = 0; local_u8PageIndex < 8; local_u8PageIndex++) {
    4f66:	8b 81       	ldd	r24, Y+3	; 0x03
    4f68:	8f 5f       	subi	r24, 0xFF	; 255
    4f6a:	8b 83       	std	Y+3, r24	; 0x03
    4f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f6e:	88 30       	cpi	r24, 0x08	; 8
    4f70:	e8 f2       	brcs	.-70     	; 0x4f2c <GLCDKS0108_ClearAll+0x10>
            }

		}

	}
}
    4f72:	0f 90       	pop	r0
    4f74:	0f 90       	pop	r0
    4f76:	0f 90       	pop	r0
    4f78:	cf 91       	pop	r28
    4f7a:	df 91       	pop	r29
    4f7c:	08 95       	ret

00004f7e <GLCDKS0108_DisplayChar>:




void GLCDKS0108_DisplayChar(uint8_t copy_u8Page, uint8_t copy_u8Column, uint8_t copy_u8Character) {
    4f7e:	df 93       	push	r29
    4f80:	cf 93       	push	r28
    4f82:	cd b7       	in	r28, 0x3d	; 61
    4f84:	de b7       	in	r29, 0x3e	; 62
    4f86:	2b 97       	sbiw	r28, 0x0b	; 11
    4f88:	0f b6       	in	r0, 0x3f	; 63
    4f8a:	f8 94       	cli
    4f8c:	de bf       	out	0x3e, r29	; 62
    4f8e:	0f be       	out	0x3f, r0	; 63
    4f90:	cd bf       	out	0x3d, r28	; 61
    4f92:	89 87       	std	Y+9, r24	; 0x09
    4f94:	6a 87       	std	Y+10, r22	; 0x0a
    4f96:	4b 87       	std	Y+11, r20	; 0x0b
    uint8_t local_u8Chip = copy_u8Column / 64;           // Determine which chip to use
    4f98:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f9a:	82 95       	swap	r24
    4f9c:	86 95       	lsr	r24
    4f9e:	86 95       	lsr	r24
    4fa0:	83 70       	andi	r24, 0x03	; 3
    4fa2:	88 87       	std	Y+8, r24	; 0x08
    uint8_t local_u8Column = copy_u8Column % 64;    // Local column within the chip
    4fa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fa6:	8f 73       	andi	r24, 0x3F	; 63
    4fa8:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t local_u8Index = copy_u8Character - 32;        // Adjust for font array starting at ASCII 32
    4faa:	8b 85       	ldd	r24, Y+11	; 0x0b
    4fac:	80 52       	subi	r24, 0x20	; 32
    4fae:	8e 83       	std	Y+6, r24	; 0x06

    GLCDKS0108_SelectChip(local_u8Chip);
    4fb0:	88 85       	ldd	r24, Y+8	; 0x08
    4fb2:	0e 94 94 26 	call	0x4d28	; 0x4d28 <GLCDKS0108_SelectChip>
    GLCDKS0108_SendCommand(GLCDKS0108_SET_X_ADDRESS | copy_u8Page);          // Set page
    4fb6:	89 85       	ldd	r24, Y+9	; 0x09
    4fb8:	88 6b       	ori	r24, 0xB8	; 184
    4fba:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
    GLCDKS0108_SendCommand(GLCDKS0108_SET_Y_ADDRESS | local_u8Column);  // Set column
    4fbe:	8f 81       	ldd	r24, Y+7	; 0x07
    4fc0:	80 64       	ori	r24, 0x40	; 64
    4fc2:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>

    for (uint8_t columnIndex = 0; columnIndex < GLCD_FONT_WIDTH; columnIndex++) {
    4fc6:	1d 82       	std	Y+5, r1	; 0x05
    4fc8:	38 c0       	rjmp	.+112    	; 0x503a <GLCDKS0108_DisplayChar+0xbc>

        uint8_t data = pgm_read_byte(&GLCD_CharacterSet[local_u8Index][columnIndex]);
    4fca:	44 e5       	ldi	r20, 0x54	; 84
    4fcc:	50 e0       	ldi	r21, 0x00	; 0
    4fce:	8e 81       	ldd	r24, Y+6	; 0x06
    4fd0:	28 2f       	mov	r18, r24
    4fd2:	30 e0       	ldi	r19, 0x00	; 0
    4fd4:	c9 01       	movw	r24, r18
    4fd6:	88 0f       	add	r24, r24
    4fd8:	99 1f       	adc	r25, r25
    4fda:	88 0f       	add	r24, r24
    4fdc:	99 1f       	adc	r25, r25
    4fde:	28 0f       	add	r18, r24
    4fe0:	39 1f       	adc	r19, r25
    4fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    4fe4:	88 2f       	mov	r24, r24
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	82 0f       	add	r24, r18
    4fea:	93 1f       	adc	r25, r19
    4fec:	84 0f       	add	r24, r20
    4fee:	95 1f       	adc	r25, r21
    4ff0:	9b 83       	std	Y+3, r25	; 0x03
    4ff2:	8a 83       	std	Y+2, r24	; 0x02
    4ff4:	ea 81       	ldd	r30, Y+2	; 0x02
    4ff6:	fb 81       	ldd	r31, Y+3	; 0x03
    4ff8:	84 91       	lpm	r24, Z+
    4ffa:	89 83       	std	Y+1, r24	; 0x01
    4ffc:	89 81       	ldd	r24, Y+1	; 0x01
    4ffe:	8c 83       	std	Y+4, r24	; 0x04
        GLCDKS0108_SendData(data);
    5000:	8c 81       	ldd	r24, Y+4	; 0x04
    5002:	0e 94 02 2a 	call	0x5404	; 0x5404 <GLCDKS0108_SendData>

        local_u8Column++;
    5006:	8f 81       	ldd	r24, Y+7	; 0x07
    5008:	8f 5f       	subi	r24, 0xFF	; 255
    500a:	8f 83       	std	Y+7, r24	; 0x07


        if (local_u8Column >= 64) {
    500c:	8f 81       	ldd	r24, Y+7	; 0x07
    500e:	80 34       	cpi	r24, 0x40	; 64
    5010:	88 f0       	brcs	.+34     	; 0x5034 <GLCDKS0108_DisplayChar+0xb6>
        	local_u8Chip++;
    5012:	88 85       	ldd	r24, Y+8	; 0x08
    5014:	8f 5f       	subi	r24, 0xFF	; 255
    5016:	88 87       	std	Y+8, r24	; 0x08
            if (local_u8Chip >= GLCD_NUM_CHIPS) return;
    5018:	88 85       	ldd	r24, Y+8	; 0x08
    501a:	82 30       	cpi	r24, 0x02	; 2
    501c:	88 f4       	brcc	.+34     	; 0x5040 <GLCDKS0108_DisplayChar+0xc2>
            GLCDKS0108_SelectChip(local_u8Chip);
    501e:	88 85       	ldd	r24, Y+8	; 0x08
    5020:	0e 94 94 26 	call	0x4d28	; 0x4d28 <GLCDKS0108_SelectChip>
            GLCDKS0108_SendCommand(GLCDKS0108_SET_X_ADDRESS | copy_u8Page);
    5024:	89 85       	ldd	r24, Y+9	; 0x09
    5026:	88 6b       	ori	r24, 0xB8	; 184
    5028:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
            GLCDKS0108_SendCommand(GLCDKS0108_SET_Y_ADDRESS | 0);
    502c:	80 e4       	ldi	r24, 0x40	; 64
    502e:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <GLCDKS0108_SendCommand>
            local_u8Column = 0;
    5032:	1f 82       	std	Y+7, r1	; 0x07

    GLCDKS0108_SelectChip(local_u8Chip);
    GLCDKS0108_SendCommand(GLCDKS0108_SET_X_ADDRESS | copy_u8Page);          // Set page
    GLCDKS0108_SendCommand(GLCDKS0108_SET_Y_ADDRESS | local_u8Column);  // Set column

    for (uint8_t columnIndex = 0; columnIndex < GLCD_FONT_WIDTH; columnIndex++) {
    5034:	8d 81       	ldd	r24, Y+5	; 0x05
    5036:	8f 5f       	subi	r24, 0xFF	; 255
    5038:	8d 83       	std	Y+5, r24	; 0x05
    503a:	8d 81       	ldd	r24, Y+5	; 0x05
    503c:	85 30       	cpi	r24, 0x05	; 5
    503e:	28 f2       	brcs	.-118    	; 0x4fca <GLCDKS0108_DisplayChar+0x4c>
            GLCDKS0108_SendCommand(GLCDKS0108_SET_Y_ADDRESS | 0);
            local_u8Column = 0;
        }

    }
}
    5040:	2b 96       	adiw	r28, 0x0b	; 11
    5042:	0f b6       	in	r0, 0x3f	; 63
    5044:	f8 94       	cli
    5046:	de bf       	out	0x3e, r29	; 62
    5048:	0f be       	out	0x3f, r0	; 63
    504a:	cd bf       	out	0x3d, r28	; 61
    504c:	cf 91       	pop	r28
    504e:	df 91       	pop	r29
    5050:	08 95       	ret

00005052 <GLCDKS0108_DisplayString>:




void GLCDKS0108_DisplayString(uint8_t copy_u8Page, uint8_t copy_u8Column, const uint8_t * copy_pu8str) {
    5052:	df 93       	push	r29
    5054:	cf 93       	push	r28
    5056:	00 d0       	rcall	.+0      	; 0x5058 <GLCDKS0108_DisplayString+0x6>
    5058:	00 d0       	rcall	.+0      	; 0x505a <GLCDKS0108_DisplayString+0x8>
    505a:	cd b7       	in	r28, 0x3d	; 61
    505c:	de b7       	in	r29, 0x3e	; 62
    505e:	89 83       	std	Y+1, r24	; 0x01
    5060:	6a 83       	std	Y+2, r22	; 0x02
    5062:	5c 83       	std	Y+4, r21	; 0x04
    5064:	4b 83       	std	Y+3, r20	; 0x03
    5066:	1a c0       	rjmp	.+52     	; 0x509c <GLCDKS0108_DisplayString+0x4a>
    while (*copy_pu8str) {
        GLCDKS0108_DisplayChar(copy_u8Page, copy_u8Column, *copy_pu8str);
    5068:	eb 81       	ldd	r30, Y+3	; 0x03
    506a:	fc 81       	ldd	r31, Y+4	; 0x04
    506c:	90 81       	ld	r25, Z
    506e:	89 81       	ldd	r24, Y+1	; 0x01
    5070:	6a 81       	ldd	r22, Y+2	; 0x02
    5072:	49 2f       	mov	r20, r25
    5074:	0e 94 bf 27 	call	0x4f7e	; 0x4f7e <GLCDKS0108_DisplayChar>
        copy_u8Column += GLCD_FONT_WIDTH + 1;
    5078:	8a 81       	ldd	r24, Y+2	; 0x02
    507a:	8a 5f       	subi	r24, 0xFA	; 250
    507c:	8a 83       	std	Y+2, r24	; 0x02
        if (copy_u8Column >= 128) {
    507e:	8a 81       	ldd	r24, Y+2	; 0x02
    5080:	88 23       	and	r24, r24
    5082:	3c f4       	brge	.+14     	; 0x5092 <GLCDKS0108_DisplayString+0x40>
        	copy_u8Column = 0;
    5084:	1a 82       	std	Y+2, r1	; 0x02
            copy_u8Page++;
    5086:	89 81       	ldd	r24, Y+1	; 0x01
    5088:	8f 5f       	subi	r24, 0xFF	; 255
    508a:	89 83       	std	Y+1, r24	; 0x01
            if (copy_u8Page >= 8) break;
    508c:	89 81       	ldd	r24, Y+1	; 0x01
    508e:	88 30       	cpi	r24, 0x08	; 8
    5090:	50 f4       	brcc	.+20     	; 0x50a6 <GLCDKS0108_DisplayString+0x54>
        }
        copy_pu8str++;
    5092:	8b 81       	ldd	r24, Y+3	; 0x03
    5094:	9c 81       	ldd	r25, Y+4	; 0x04
    5096:	01 96       	adiw	r24, 0x01	; 1
    5098:	9c 83       	std	Y+4, r25	; 0x04
    509a:	8b 83       	std	Y+3, r24	; 0x03




void GLCDKS0108_DisplayString(uint8_t copy_u8Page, uint8_t copy_u8Column, const uint8_t * copy_pu8str) {
    while (*copy_pu8str) {
    509c:	eb 81       	ldd	r30, Y+3	; 0x03
    509e:	fc 81       	ldd	r31, Y+4	; 0x04
    50a0:	80 81       	ld	r24, Z
    50a2:	88 23       	and	r24, r24
    50a4:	09 f7       	brne	.-62     	; 0x5068 <GLCDKS0108_DisplayString+0x16>
            copy_u8Page++;
            if (copy_u8Page >= 8) break;
        }
        copy_pu8str++;
    }
}
    50a6:	0f 90       	pop	r0
    50a8:	0f 90       	pop	r0
    50aa:	0f 90       	pop	r0
    50ac:	0f 90       	pop	r0
    50ae:	cf 91       	pop	r28
    50b0:	df 91       	pop	r29
    50b2:	08 95       	ret

000050b4 <GLCDKS0108_SendCommand>:

static void GLCDKS0108_SendCommand(uint8_t copy_u8Command) {
    50b4:	df 93       	push	r29
    50b6:	cf 93       	push	r28
    50b8:	cd b7       	in	r28, 0x3d	; 61
    50ba:	de b7       	in	r29, 0x3e	; 62
    50bc:	e1 97       	sbiw	r28, 0x31	; 49
    50be:	0f b6       	in	r0, 0x3f	; 63
    50c0:	f8 94       	cli
    50c2:	de bf       	out	0x3e, r29	; 62
    50c4:	0f be       	out	0x3f, r0	; 63
    50c6:	cd bf       	out	0x3d, r28	; 61
    50c8:	89 ab       	std	Y+49, r24	; 0x31
    GLCDKS0108_DATA_PORT = copy_u8Command;
    50ca:	eb e3       	ldi	r30, 0x3B	; 59
    50cc:	f0 e0       	ldi	r31, 0x00	; 0
    50ce:	89 a9       	ldd	r24, Y+49	; 0x31
    50d0:	80 83       	st	Z, r24

    // Command mode
    DIO_enuSetPinValue(GLCDKS0108_RS_PORT, GLCDKS0108_RS_PIN, DIO_u8LOW);
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	62 e0       	ldi	r22, 0x02	; 2
    50d6:	40 e0       	ldi	r20, 0x00	; 0
    50d8:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>

    // Write mode
    DIO_enuSetPinValue(GLCDKS0108_RW_PORT, GLCDKS0108_RW_PIN, DIO_u8LOW);
    50dc:	81 e0       	ldi	r24, 0x01	; 1
    50de:	61 e0       	ldi	r22, 0x01	; 1
    50e0:	40 e0       	ldi	r20, 0x00	; 0
    50e2:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    DIO_enuSetPinValue(GLCDKS0108_EN_PORT, GLCDKS0108_EN_PIN, DIO_u8HIGH);
    50e6:	81 e0       	ldi	r24, 0x01	; 1
    50e8:	60 e0       	ldi	r22, 0x00	; 0
    50ea:	41 e0       	ldi	r20, 0x01	; 1
    50ec:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    50f0:	80 e0       	ldi	r24, 0x00	; 0
    50f2:	90 e0       	ldi	r25, 0x00	; 0
    50f4:	a0 ea       	ldi	r26, 0xA0	; 160
    50f6:	b0 e4       	ldi	r27, 0x40	; 64
    50f8:	8d a7       	std	Y+45, r24	; 0x2d
    50fa:	9e a7       	std	Y+46, r25	; 0x2e
    50fc:	af a7       	std	Y+47, r26	; 0x2f
    50fe:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5100:	6d a5       	ldd	r22, Y+45	; 0x2d
    5102:	7e a5       	ldd	r23, Y+46	; 0x2e
    5104:	8f a5       	ldd	r24, Y+47	; 0x2f
    5106:	98 a9       	ldd	r25, Y+48	; 0x30
    5108:	2b ea       	ldi	r18, 0xAB	; 171
    510a:	3a ea       	ldi	r19, 0xAA	; 170
    510c:	4a ea       	ldi	r20, 0xAA	; 170
    510e:	50 e4       	ldi	r21, 0x40	; 64
    5110:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    5114:	dc 01       	movw	r26, r24
    5116:	cb 01       	movw	r24, r22
    5118:	89 a7       	std	Y+41, r24	; 0x29
    511a:	9a a7       	std	Y+42, r25	; 0x2a
    511c:	ab a7       	std	Y+43, r26	; 0x2b
    511e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    5120:	69 a5       	ldd	r22, Y+41	; 0x29
    5122:	7a a5       	ldd	r23, Y+42	; 0x2a
    5124:	8b a5       	ldd	r24, Y+43	; 0x2b
    5126:	9c a5       	ldd	r25, Y+44	; 0x2c
    5128:	20 e0       	ldi	r18, 0x00	; 0
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	40 e8       	ldi	r20, 0x80	; 128
    512e:	5f e3       	ldi	r21, 0x3F	; 63
    5130:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    5134:	88 23       	and	r24, r24
    5136:	1c f4       	brge	.+6      	; 0x513e <GLCDKS0108_SendCommand+0x8a>
		__ticks = 1;
    5138:	81 e0       	ldi	r24, 0x01	; 1
    513a:	88 a7       	std	Y+40, r24	; 0x28
    513c:	91 c0       	rjmp	.+290    	; 0x5260 <GLCDKS0108_SendCommand+0x1ac>
	else if (__tmp > 255)
    513e:	69 a5       	ldd	r22, Y+41	; 0x29
    5140:	7a a5       	ldd	r23, Y+42	; 0x2a
    5142:	8b a5       	ldd	r24, Y+43	; 0x2b
    5144:	9c a5       	ldd	r25, Y+44	; 0x2c
    5146:	20 e0       	ldi	r18, 0x00	; 0
    5148:	30 e0       	ldi	r19, 0x00	; 0
    514a:	4f e7       	ldi	r20, 0x7F	; 127
    514c:	53 e4       	ldi	r21, 0x43	; 67
    514e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    5152:	18 16       	cp	r1, r24
    5154:	0c f0       	brlt	.+2      	; 0x5158 <GLCDKS0108_SendCommand+0xa4>
    5156:	7b c0       	rjmp	.+246    	; 0x524e <GLCDKS0108_SendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    5158:	6d a5       	ldd	r22, Y+45	; 0x2d
    515a:	7e a5       	ldd	r23, Y+46	; 0x2e
    515c:	8f a5       	ldd	r24, Y+47	; 0x2f
    515e:	98 a9       	ldd	r25, Y+48	; 0x30
    5160:	20 e0       	ldi	r18, 0x00	; 0
    5162:	30 e0       	ldi	r19, 0x00	; 0
    5164:	4a e7       	ldi	r20, 0x7A	; 122
    5166:	54 e4       	ldi	r21, 0x44	; 68
    5168:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    516c:	dc 01       	movw	r26, r24
    516e:	cb 01       	movw	r24, r22
    5170:	8c a3       	std	Y+36, r24	; 0x24
    5172:	9d a3       	std	Y+37, r25	; 0x25
    5174:	ae a3       	std	Y+38, r26	; 0x26
    5176:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5178:	6c a1       	ldd	r22, Y+36	; 0x24
    517a:	7d a1       	ldd	r23, Y+37	; 0x25
    517c:	8e a1       	ldd	r24, Y+38	; 0x26
    517e:	9f a1       	ldd	r25, Y+39	; 0x27
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	4a e7       	ldi	r20, 0x7A	; 122
    5186:	55 e4       	ldi	r21, 0x45	; 69
    5188:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    518c:	dc 01       	movw	r26, r24
    518e:	cb 01       	movw	r24, r22
    5190:	88 a3       	std	Y+32, r24	; 0x20
    5192:	99 a3       	std	Y+33, r25	; 0x21
    5194:	aa a3       	std	Y+34, r26	; 0x22
    5196:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    5198:	68 a1       	ldd	r22, Y+32	; 0x20
    519a:	79 a1       	ldd	r23, Y+33	; 0x21
    519c:	8a a1       	ldd	r24, Y+34	; 0x22
    519e:	9b a1       	ldd	r25, Y+35	; 0x23
    51a0:	20 e0       	ldi	r18, 0x00	; 0
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	40 e8       	ldi	r20, 0x80	; 128
    51a6:	5f e3       	ldi	r21, 0x3F	; 63
    51a8:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    51ac:	88 23       	and	r24, r24
    51ae:	2c f4       	brge	.+10     	; 0x51ba <GLCDKS0108_SendCommand+0x106>
		__ticks = 1;
    51b0:	81 e0       	ldi	r24, 0x01	; 1
    51b2:	90 e0       	ldi	r25, 0x00	; 0
    51b4:	9f 8f       	std	Y+31, r25	; 0x1f
    51b6:	8e 8f       	std	Y+30, r24	; 0x1e
    51b8:	3f c0       	rjmp	.+126    	; 0x5238 <GLCDKS0108_SendCommand+0x184>
	else if (__tmp > 65535)
    51ba:	68 a1       	ldd	r22, Y+32	; 0x20
    51bc:	79 a1       	ldd	r23, Y+33	; 0x21
    51be:	8a a1       	ldd	r24, Y+34	; 0x22
    51c0:	9b a1       	ldd	r25, Y+35	; 0x23
    51c2:	20 e0       	ldi	r18, 0x00	; 0
    51c4:	3f ef       	ldi	r19, 0xFF	; 255
    51c6:	4f e7       	ldi	r20, 0x7F	; 127
    51c8:	57 e4       	ldi	r21, 0x47	; 71
    51ca:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    51ce:	18 16       	cp	r1, r24
    51d0:	4c f5       	brge	.+82     	; 0x5224 <GLCDKS0108_SendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51d2:	6c a1       	ldd	r22, Y+36	; 0x24
    51d4:	7d a1       	ldd	r23, Y+37	; 0x25
    51d6:	8e a1       	ldd	r24, Y+38	; 0x26
    51d8:	9f a1       	ldd	r25, Y+39	; 0x27
    51da:	20 e0       	ldi	r18, 0x00	; 0
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	40 e2       	ldi	r20, 0x20	; 32
    51e0:	51 e4       	ldi	r21, 0x41	; 65
    51e2:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    51e6:	dc 01       	movw	r26, r24
    51e8:	cb 01       	movw	r24, r22
    51ea:	bc 01       	movw	r22, r24
    51ec:	cd 01       	movw	r24, r26
    51ee:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    51f2:	dc 01       	movw	r26, r24
    51f4:	cb 01       	movw	r24, r22
    51f6:	9f 8f       	std	Y+31, r25	; 0x1f
    51f8:	8e 8f       	std	Y+30, r24	; 0x1e
    51fa:	0f c0       	rjmp	.+30     	; 0x521a <GLCDKS0108_SendCommand+0x166>
    51fc:	80 e9       	ldi	r24, 0x90	; 144
    51fe:	91 e0       	ldi	r25, 0x01	; 1
    5200:	9d 8f       	std	Y+29, r25	; 0x1d
    5202:	8c 8f       	std	Y+28, r24	; 0x1c
    5204:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5206:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5208:	01 97       	sbiw	r24, 0x01	; 1
    520a:	f1 f7       	brne	.-4      	; 0x5208 <GLCDKS0108_SendCommand+0x154>
    520c:	9d 8f       	std	Y+29, r25	; 0x1d
    520e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5210:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5212:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5214:	01 97       	sbiw	r24, 0x01	; 1
    5216:	9f 8f       	std	Y+31, r25	; 0x1f
    5218:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    521a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    521c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    521e:	00 97       	sbiw	r24, 0x00	; 0
    5220:	69 f7       	brne	.-38     	; 0x51fc <GLCDKS0108_SendCommand+0x148>
    5222:	24 c0       	rjmp	.+72     	; 0x526c <GLCDKS0108_SendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5224:	68 a1       	ldd	r22, Y+32	; 0x20
    5226:	79 a1       	ldd	r23, Y+33	; 0x21
    5228:	8a a1       	ldd	r24, Y+34	; 0x22
    522a:	9b a1       	ldd	r25, Y+35	; 0x23
    522c:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    5230:	dc 01       	movw	r26, r24
    5232:	cb 01       	movw	r24, r22
    5234:	9f 8f       	std	Y+31, r25	; 0x1f
    5236:	8e 8f       	std	Y+30, r24	; 0x1e
    5238:	8e 8d       	ldd	r24, Y+30	; 0x1e
    523a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    523c:	9b 8f       	std	Y+27, r25	; 0x1b
    523e:	8a 8f       	std	Y+26, r24	; 0x1a
    5240:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5242:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5244:	01 97       	sbiw	r24, 0x01	; 1
    5246:	f1 f7       	brne	.-4      	; 0x5244 <GLCDKS0108_SendCommand+0x190>
    5248:	9b 8f       	std	Y+27, r25	; 0x1b
    524a:	8a 8f       	std	Y+26, r24	; 0x1a
    524c:	0f c0       	rjmp	.+30     	; 0x526c <GLCDKS0108_SendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    524e:	69 a5       	ldd	r22, Y+41	; 0x29
    5250:	7a a5       	ldd	r23, Y+42	; 0x2a
    5252:	8b a5       	ldd	r24, Y+43	; 0x2b
    5254:	9c a5       	ldd	r25, Y+44	; 0x2c
    5256:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    525a:	dc 01       	movw	r26, r24
    525c:	cb 01       	movw	r24, r22
    525e:	88 a7       	std	Y+40, r24	; 0x28
    5260:	88 a5       	ldd	r24, Y+40	; 0x28
    5262:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5264:	89 8d       	ldd	r24, Y+25	; 0x19
    5266:	8a 95       	dec	r24
    5268:	f1 f7       	brne	.-4      	; 0x5266 <GLCDKS0108_SendCommand+0x1b2>
    526a:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);

    DIO_enuSetPinValue(GLCDKS0108_EN_PORT, GLCDKS0108_EN_PIN, DIO_u8LOW);
    526c:	81 e0       	ldi	r24, 0x01	; 1
    526e:	60 e0       	ldi	r22, 0x00	; 0
    5270:	40 e0       	ldi	r20, 0x00	; 0
    5272:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    5276:	80 e0       	ldi	r24, 0x00	; 0
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	a0 ea       	ldi	r26, 0xA0	; 160
    527c:	b0 e4       	ldi	r27, 0x40	; 64
    527e:	8d 8b       	std	Y+21, r24	; 0x15
    5280:	9e 8b       	std	Y+22, r25	; 0x16
    5282:	af 8b       	std	Y+23, r26	; 0x17
    5284:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5286:	6d 89       	ldd	r22, Y+21	; 0x15
    5288:	7e 89       	ldd	r23, Y+22	; 0x16
    528a:	8f 89       	ldd	r24, Y+23	; 0x17
    528c:	98 8d       	ldd	r25, Y+24	; 0x18
    528e:	2b ea       	ldi	r18, 0xAB	; 171
    5290:	3a ea       	ldi	r19, 0xAA	; 170
    5292:	4a ea       	ldi	r20, 0xAA	; 170
    5294:	50 e4       	ldi	r21, 0x40	; 64
    5296:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    529a:	dc 01       	movw	r26, r24
    529c:	cb 01       	movw	r24, r22
    529e:	89 8b       	std	Y+17, r24	; 0x11
    52a0:	9a 8b       	std	Y+18, r25	; 0x12
    52a2:	ab 8b       	std	Y+19, r26	; 0x13
    52a4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    52a6:	69 89       	ldd	r22, Y+17	; 0x11
    52a8:	7a 89       	ldd	r23, Y+18	; 0x12
    52aa:	8b 89       	ldd	r24, Y+19	; 0x13
    52ac:	9c 89       	ldd	r25, Y+20	; 0x14
    52ae:	20 e0       	ldi	r18, 0x00	; 0
    52b0:	30 e0       	ldi	r19, 0x00	; 0
    52b2:	40 e8       	ldi	r20, 0x80	; 128
    52b4:	5f e3       	ldi	r21, 0x3F	; 63
    52b6:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    52ba:	88 23       	and	r24, r24
    52bc:	1c f4       	brge	.+6      	; 0x52c4 <GLCDKS0108_SendCommand+0x210>
		__ticks = 1;
    52be:	81 e0       	ldi	r24, 0x01	; 1
    52c0:	88 8b       	std	Y+16, r24	; 0x10
    52c2:	91 c0       	rjmp	.+290    	; 0x53e6 <GLCDKS0108_SendCommand+0x332>
	else if (__tmp > 255)
    52c4:	69 89       	ldd	r22, Y+17	; 0x11
    52c6:	7a 89       	ldd	r23, Y+18	; 0x12
    52c8:	8b 89       	ldd	r24, Y+19	; 0x13
    52ca:	9c 89       	ldd	r25, Y+20	; 0x14
    52cc:	20 e0       	ldi	r18, 0x00	; 0
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	4f e7       	ldi	r20, 0x7F	; 127
    52d2:	53 e4       	ldi	r21, 0x43	; 67
    52d4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    52d8:	18 16       	cp	r1, r24
    52da:	0c f0       	brlt	.+2      	; 0x52de <GLCDKS0108_SendCommand+0x22a>
    52dc:	7b c0       	rjmp	.+246    	; 0x53d4 <GLCDKS0108_SendCommand+0x320>
	{
		_delay_ms(__us / 1000.0);
    52de:	6d 89       	ldd	r22, Y+21	; 0x15
    52e0:	7e 89       	ldd	r23, Y+22	; 0x16
    52e2:	8f 89       	ldd	r24, Y+23	; 0x17
    52e4:	98 8d       	ldd	r25, Y+24	; 0x18
    52e6:	20 e0       	ldi	r18, 0x00	; 0
    52e8:	30 e0       	ldi	r19, 0x00	; 0
    52ea:	4a e7       	ldi	r20, 0x7A	; 122
    52ec:	54 e4       	ldi	r21, 0x44	; 68
    52ee:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    52f2:	dc 01       	movw	r26, r24
    52f4:	cb 01       	movw	r24, r22
    52f6:	8c 87       	std	Y+12, r24	; 0x0c
    52f8:	9d 87       	std	Y+13, r25	; 0x0d
    52fa:	ae 87       	std	Y+14, r26	; 0x0e
    52fc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52fe:	6c 85       	ldd	r22, Y+12	; 0x0c
    5300:	7d 85       	ldd	r23, Y+13	; 0x0d
    5302:	8e 85       	ldd	r24, Y+14	; 0x0e
    5304:	9f 85       	ldd	r25, Y+15	; 0x0f
    5306:	20 e0       	ldi	r18, 0x00	; 0
    5308:	30 e0       	ldi	r19, 0x00	; 0
    530a:	4a e7       	ldi	r20, 0x7A	; 122
    530c:	55 e4       	ldi	r21, 0x45	; 69
    530e:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    5312:	dc 01       	movw	r26, r24
    5314:	cb 01       	movw	r24, r22
    5316:	88 87       	std	Y+8, r24	; 0x08
    5318:	99 87       	std	Y+9, r25	; 0x09
    531a:	aa 87       	std	Y+10, r26	; 0x0a
    531c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    531e:	68 85       	ldd	r22, Y+8	; 0x08
    5320:	79 85       	ldd	r23, Y+9	; 0x09
    5322:	8a 85       	ldd	r24, Y+10	; 0x0a
    5324:	9b 85       	ldd	r25, Y+11	; 0x0b
    5326:	20 e0       	ldi	r18, 0x00	; 0
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	40 e8       	ldi	r20, 0x80	; 128
    532c:	5f e3       	ldi	r21, 0x3F	; 63
    532e:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    5332:	88 23       	and	r24, r24
    5334:	2c f4       	brge	.+10     	; 0x5340 <GLCDKS0108_SendCommand+0x28c>
		__ticks = 1;
    5336:	81 e0       	ldi	r24, 0x01	; 1
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	9f 83       	std	Y+7, r25	; 0x07
    533c:	8e 83       	std	Y+6, r24	; 0x06
    533e:	3f c0       	rjmp	.+126    	; 0x53be <GLCDKS0108_SendCommand+0x30a>
	else if (__tmp > 65535)
    5340:	68 85       	ldd	r22, Y+8	; 0x08
    5342:	79 85       	ldd	r23, Y+9	; 0x09
    5344:	8a 85       	ldd	r24, Y+10	; 0x0a
    5346:	9b 85       	ldd	r25, Y+11	; 0x0b
    5348:	20 e0       	ldi	r18, 0x00	; 0
    534a:	3f ef       	ldi	r19, 0xFF	; 255
    534c:	4f e7       	ldi	r20, 0x7F	; 127
    534e:	57 e4       	ldi	r21, 0x47	; 71
    5350:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    5354:	18 16       	cp	r1, r24
    5356:	4c f5       	brge	.+82     	; 0x53aa <GLCDKS0108_SendCommand+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5358:	6c 85       	ldd	r22, Y+12	; 0x0c
    535a:	7d 85       	ldd	r23, Y+13	; 0x0d
    535c:	8e 85       	ldd	r24, Y+14	; 0x0e
    535e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5360:	20 e0       	ldi	r18, 0x00	; 0
    5362:	30 e0       	ldi	r19, 0x00	; 0
    5364:	40 e2       	ldi	r20, 0x20	; 32
    5366:	51 e4       	ldi	r21, 0x41	; 65
    5368:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    536c:	dc 01       	movw	r26, r24
    536e:	cb 01       	movw	r24, r22
    5370:	bc 01       	movw	r22, r24
    5372:	cd 01       	movw	r24, r26
    5374:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    5378:	dc 01       	movw	r26, r24
    537a:	cb 01       	movw	r24, r22
    537c:	9f 83       	std	Y+7, r25	; 0x07
    537e:	8e 83       	std	Y+6, r24	; 0x06
    5380:	0f c0       	rjmp	.+30     	; 0x53a0 <GLCDKS0108_SendCommand+0x2ec>
    5382:	80 e9       	ldi	r24, 0x90	; 144
    5384:	91 e0       	ldi	r25, 0x01	; 1
    5386:	9d 83       	std	Y+5, r25	; 0x05
    5388:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    538a:	8c 81       	ldd	r24, Y+4	; 0x04
    538c:	9d 81       	ldd	r25, Y+5	; 0x05
    538e:	01 97       	sbiw	r24, 0x01	; 1
    5390:	f1 f7       	brne	.-4      	; 0x538e <GLCDKS0108_SendCommand+0x2da>
    5392:	9d 83       	std	Y+5, r25	; 0x05
    5394:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5396:	8e 81       	ldd	r24, Y+6	; 0x06
    5398:	9f 81       	ldd	r25, Y+7	; 0x07
    539a:	01 97       	sbiw	r24, 0x01	; 1
    539c:	9f 83       	std	Y+7, r25	; 0x07
    539e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53a0:	8e 81       	ldd	r24, Y+6	; 0x06
    53a2:	9f 81       	ldd	r25, Y+7	; 0x07
    53a4:	00 97       	sbiw	r24, 0x00	; 0
    53a6:	69 f7       	brne	.-38     	; 0x5382 <GLCDKS0108_SendCommand+0x2ce>
    53a8:	24 c0       	rjmp	.+72     	; 0x53f2 <GLCDKS0108_SendCommand+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53aa:	68 85       	ldd	r22, Y+8	; 0x08
    53ac:	79 85       	ldd	r23, Y+9	; 0x09
    53ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    53b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    53b2:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    53b6:	dc 01       	movw	r26, r24
    53b8:	cb 01       	movw	r24, r22
    53ba:	9f 83       	std	Y+7, r25	; 0x07
    53bc:	8e 83       	std	Y+6, r24	; 0x06
    53be:	8e 81       	ldd	r24, Y+6	; 0x06
    53c0:	9f 81       	ldd	r25, Y+7	; 0x07
    53c2:	9b 83       	std	Y+3, r25	; 0x03
    53c4:	8a 83       	std	Y+2, r24	; 0x02
    53c6:	8a 81       	ldd	r24, Y+2	; 0x02
    53c8:	9b 81       	ldd	r25, Y+3	; 0x03
    53ca:	01 97       	sbiw	r24, 0x01	; 1
    53cc:	f1 f7       	brne	.-4      	; 0x53ca <GLCDKS0108_SendCommand+0x316>
    53ce:	9b 83       	std	Y+3, r25	; 0x03
    53d0:	8a 83       	std	Y+2, r24	; 0x02
    53d2:	0f c0       	rjmp	.+30     	; 0x53f2 <GLCDKS0108_SendCommand+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    53d4:	69 89       	ldd	r22, Y+17	; 0x11
    53d6:	7a 89       	ldd	r23, Y+18	; 0x12
    53d8:	8b 89       	ldd	r24, Y+19	; 0x13
    53da:	9c 89       	ldd	r25, Y+20	; 0x14
    53dc:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    53e0:	dc 01       	movw	r26, r24
    53e2:	cb 01       	movw	r24, r22
    53e4:	88 8b       	std	Y+16, r24	; 0x10
    53e6:	88 89       	ldd	r24, Y+16	; 0x10
    53e8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    53ea:	89 81       	ldd	r24, Y+1	; 0x01
    53ec:	8a 95       	dec	r24
    53ee:	f1 f7       	brne	.-4      	; 0x53ec <GLCDKS0108_SendCommand+0x338>
    53f0:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    53f2:	e1 96       	adiw	r28, 0x31	; 49
    53f4:	0f b6       	in	r0, 0x3f	; 63
    53f6:	f8 94       	cli
    53f8:	de bf       	out	0x3e, r29	; 62
    53fa:	0f be       	out	0x3f, r0	; 63
    53fc:	cd bf       	out	0x3d, r28	; 61
    53fe:	cf 91       	pop	r28
    5400:	df 91       	pop	r29
    5402:	08 95       	ret

00005404 <GLCDKS0108_SendData>:

static void GLCDKS0108_SendData(uint8_t copy_u8Data) {
    5404:	df 93       	push	r29
    5406:	cf 93       	push	r28
    5408:	cd b7       	in	r28, 0x3d	; 61
    540a:	de b7       	in	r29, 0x3e	; 62
    540c:	e1 97       	sbiw	r28, 0x31	; 49
    540e:	0f b6       	in	r0, 0x3f	; 63
    5410:	f8 94       	cli
    5412:	de bf       	out	0x3e, r29	; 62
    5414:	0f be       	out	0x3f, r0	; 63
    5416:	cd bf       	out	0x3d, r28	; 61
    5418:	89 ab       	std	Y+49, r24	; 0x31
	GLCDKS0108_DATA_PORT = copy_u8Data;
    541a:	eb e3       	ldi	r30, 0x3B	; 59
    541c:	f0 e0       	ldi	r31, 0x00	; 0
    541e:	89 a9       	ldd	r24, Y+49	; 0x31
    5420:	80 83       	st	Z, r24

    // Data mode
    DIO_enuSetPinValue(GLCDKS0108_RS_PORT, GLCDKS0108_RS_PIN, DIO_u8HIGH);
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	62 e0       	ldi	r22, 0x02	; 2
    5426:	41 e0       	ldi	r20, 0x01	; 1
    5428:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>

    // Write mode
    DIO_enuSetPinValue(GLCDKS0108_RW_PORT, GLCDKS0108_RW_PIN, DIO_u8LOW);
    542c:	81 e0       	ldi	r24, 0x01	; 1
    542e:	61 e0       	ldi	r22, 0x01	; 1
    5430:	40 e0       	ldi	r20, 0x00	; 0
    5432:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>

    DIO_enuSetPinValue(GLCDKS0108_EN_PORT, GLCDKS0108_EN_PIN, DIO_u8HIGH);
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	60 e0       	ldi	r22, 0x00	; 0
    543a:	41 e0       	ldi	r20, 0x01	; 1
    543c:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    5440:	80 e0       	ldi	r24, 0x00	; 0
    5442:	90 e0       	ldi	r25, 0x00	; 0
    5444:	a0 ea       	ldi	r26, 0xA0	; 160
    5446:	b0 e4       	ldi	r27, 0x40	; 64
    5448:	8d a7       	std	Y+45, r24	; 0x2d
    544a:	9e a7       	std	Y+46, r25	; 0x2e
    544c:	af a7       	std	Y+47, r26	; 0x2f
    544e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5450:	6d a5       	ldd	r22, Y+45	; 0x2d
    5452:	7e a5       	ldd	r23, Y+46	; 0x2e
    5454:	8f a5       	ldd	r24, Y+47	; 0x2f
    5456:	98 a9       	ldd	r25, Y+48	; 0x30
    5458:	2b ea       	ldi	r18, 0xAB	; 171
    545a:	3a ea       	ldi	r19, 0xAA	; 170
    545c:	4a ea       	ldi	r20, 0xAA	; 170
    545e:	50 e4       	ldi	r21, 0x40	; 64
    5460:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    5464:	dc 01       	movw	r26, r24
    5466:	cb 01       	movw	r24, r22
    5468:	89 a7       	std	Y+41, r24	; 0x29
    546a:	9a a7       	std	Y+42, r25	; 0x2a
    546c:	ab a7       	std	Y+43, r26	; 0x2b
    546e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    5470:	69 a5       	ldd	r22, Y+41	; 0x29
    5472:	7a a5       	ldd	r23, Y+42	; 0x2a
    5474:	8b a5       	ldd	r24, Y+43	; 0x2b
    5476:	9c a5       	ldd	r25, Y+44	; 0x2c
    5478:	20 e0       	ldi	r18, 0x00	; 0
    547a:	30 e0       	ldi	r19, 0x00	; 0
    547c:	40 e8       	ldi	r20, 0x80	; 128
    547e:	5f e3       	ldi	r21, 0x3F	; 63
    5480:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    5484:	88 23       	and	r24, r24
    5486:	1c f4       	brge	.+6      	; 0x548e <GLCDKS0108_SendData+0x8a>
		__ticks = 1;
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	88 a7       	std	Y+40, r24	; 0x28
    548c:	91 c0       	rjmp	.+290    	; 0x55b0 <GLCDKS0108_SendData+0x1ac>
	else if (__tmp > 255)
    548e:	69 a5       	ldd	r22, Y+41	; 0x29
    5490:	7a a5       	ldd	r23, Y+42	; 0x2a
    5492:	8b a5       	ldd	r24, Y+43	; 0x2b
    5494:	9c a5       	ldd	r25, Y+44	; 0x2c
    5496:	20 e0       	ldi	r18, 0x00	; 0
    5498:	30 e0       	ldi	r19, 0x00	; 0
    549a:	4f e7       	ldi	r20, 0x7F	; 127
    549c:	53 e4       	ldi	r21, 0x43	; 67
    549e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    54a2:	18 16       	cp	r1, r24
    54a4:	0c f0       	brlt	.+2      	; 0x54a8 <GLCDKS0108_SendData+0xa4>
    54a6:	7b c0       	rjmp	.+246    	; 0x559e <GLCDKS0108_SendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    54a8:	6d a5       	ldd	r22, Y+45	; 0x2d
    54aa:	7e a5       	ldd	r23, Y+46	; 0x2e
    54ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    54ae:	98 a9       	ldd	r25, Y+48	; 0x30
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	30 e0       	ldi	r19, 0x00	; 0
    54b4:	4a e7       	ldi	r20, 0x7A	; 122
    54b6:	54 e4       	ldi	r21, 0x44	; 68
    54b8:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    54bc:	dc 01       	movw	r26, r24
    54be:	cb 01       	movw	r24, r22
    54c0:	8c a3       	std	Y+36, r24	; 0x24
    54c2:	9d a3       	std	Y+37, r25	; 0x25
    54c4:	ae a3       	std	Y+38, r26	; 0x26
    54c6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54c8:	6c a1       	ldd	r22, Y+36	; 0x24
    54ca:	7d a1       	ldd	r23, Y+37	; 0x25
    54cc:	8e a1       	ldd	r24, Y+38	; 0x26
    54ce:	9f a1       	ldd	r25, Y+39	; 0x27
    54d0:	20 e0       	ldi	r18, 0x00	; 0
    54d2:	30 e0       	ldi	r19, 0x00	; 0
    54d4:	4a e7       	ldi	r20, 0x7A	; 122
    54d6:	55 e4       	ldi	r21, 0x45	; 69
    54d8:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    54dc:	dc 01       	movw	r26, r24
    54de:	cb 01       	movw	r24, r22
    54e0:	88 a3       	std	Y+32, r24	; 0x20
    54e2:	99 a3       	std	Y+33, r25	; 0x21
    54e4:	aa a3       	std	Y+34, r26	; 0x22
    54e6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    54e8:	68 a1       	ldd	r22, Y+32	; 0x20
    54ea:	79 a1       	ldd	r23, Y+33	; 0x21
    54ec:	8a a1       	ldd	r24, Y+34	; 0x22
    54ee:	9b a1       	ldd	r25, Y+35	; 0x23
    54f0:	20 e0       	ldi	r18, 0x00	; 0
    54f2:	30 e0       	ldi	r19, 0x00	; 0
    54f4:	40 e8       	ldi	r20, 0x80	; 128
    54f6:	5f e3       	ldi	r21, 0x3F	; 63
    54f8:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    54fc:	88 23       	and	r24, r24
    54fe:	2c f4       	brge	.+10     	; 0x550a <GLCDKS0108_SendData+0x106>
		__ticks = 1;
    5500:	81 e0       	ldi	r24, 0x01	; 1
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	9f 8f       	std	Y+31, r25	; 0x1f
    5506:	8e 8f       	std	Y+30, r24	; 0x1e
    5508:	3f c0       	rjmp	.+126    	; 0x5588 <GLCDKS0108_SendData+0x184>
	else if (__tmp > 65535)
    550a:	68 a1       	ldd	r22, Y+32	; 0x20
    550c:	79 a1       	ldd	r23, Y+33	; 0x21
    550e:	8a a1       	ldd	r24, Y+34	; 0x22
    5510:	9b a1       	ldd	r25, Y+35	; 0x23
    5512:	20 e0       	ldi	r18, 0x00	; 0
    5514:	3f ef       	ldi	r19, 0xFF	; 255
    5516:	4f e7       	ldi	r20, 0x7F	; 127
    5518:	57 e4       	ldi	r21, 0x47	; 71
    551a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    551e:	18 16       	cp	r1, r24
    5520:	4c f5       	brge	.+82     	; 0x5574 <GLCDKS0108_SendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5522:	6c a1       	ldd	r22, Y+36	; 0x24
    5524:	7d a1       	ldd	r23, Y+37	; 0x25
    5526:	8e a1       	ldd	r24, Y+38	; 0x26
    5528:	9f a1       	ldd	r25, Y+39	; 0x27
    552a:	20 e0       	ldi	r18, 0x00	; 0
    552c:	30 e0       	ldi	r19, 0x00	; 0
    552e:	40 e2       	ldi	r20, 0x20	; 32
    5530:	51 e4       	ldi	r21, 0x41	; 65
    5532:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    5536:	dc 01       	movw	r26, r24
    5538:	cb 01       	movw	r24, r22
    553a:	bc 01       	movw	r22, r24
    553c:	cd 01       	movw	r24, r26
    553e:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    5542:	dc 01       	movw	r26, r24
    5544:	cb 01       	movw	r24, r22
    5546:	9f 8f       	std	Y+31, r25	; 0x1f
    5548:	8e 8f       	std	Y+30, r24	; 0x1e
    554a:	0f c0       	rjmp	.+30     	; 0x556a <GLCDKS0108_SendData+0x166>
    554c:	80 e9       	ldi	r24, 0x90	; 144
    554e:	91 e0       	ldi	r25, 0x01	; 1
    5550:	9d 8f       	std	Y+29, r25	; 0x1d
    5552:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5554:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5556:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5558:	01 97       	sbiw	r24, 0x01	; 1
    555a:	f1 f7       	brne	.-4      	; 0x5558 <GLCDKS0108_SendData+0x154>
    555c:	9d 8f       	std	Y+29, r25	; 0x1d
    555e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5560:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5562:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5564:	01 97       	sbiw	r24, 0x01	; 1
    5566:	9f 8f       	std	Y+31, r25	; 0x1f
    5568:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    556a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    556c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    556e:	00 97       	sbiw	r24, 0x00	; 0
    5570:	69 f7       	brne	.-38     	; 0x554c <GLCDKS0108_SendData+0x148>
    5572:	24 c0       	rjmp	.+72     	; 0x55bc <GLCDKS0108_SendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5574:	68 a1       	ldd	r22, Y+32	; 0x20
    5576:	79 a1       	ldd	r23, Y+33	; 0x21
    5578:	8a a1       	ldd	r24, Y+34	; 0x22
    557a:	9b a1       	ldd	r25, Y+35	; 0x23
    557c:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    5580:	dc 01       	movw	r26, r24
    5582:	cb 01       	movw	r24, r22
    5584:	9f 8f       	std	Y+31, r25	; 0x1f
    5586:	8e 8f       	std	Y+30, r24	; 0x1e
    5588:	8e 8d       	ldd	r24, Y+30	; 0x1e
    558a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    558c:	9b 8f       	std	Y+27, r25	; 0x1b
    558e:	8a 8f       	std	Y+26, r24	; 0x1a
    5590:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5592:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5594:	01 97       	sbiw	r24, 0x01	; 1
    5596:	f1 f7       	brne	.-4      	; 0x5594 <GLCDKS0108_SendData+0x190>
    5598:	9b 8f       	std	Y+27, r25	; 0x1b
    559a:	8a 8f       	std	Y+26, r24	; 0x1a
    559c:	0f c0       	rjmp	.+30     	; 0x55bc <GLCDKS0108_SendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    559e:	69 a5       	ldd	r22, Y+41	; 0x29
    55a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    55a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    55a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    55a6:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    55aa:	dc 01       	movw	r26, r24
    55ac:	cb 01       	movw	r24, r22
    55ae:	88 a7       	std	Y+40, r24	; 0x28
    55b0:	88 a5       	ldd	r24, Y+40	; 0x28
    55b2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    55b4:	89 8d       	ldd	r24, Y+25	; 0x19
    55b6:	8a 95       	dec	r24
    55b8:	f1 f7       	brne	.-4      	; 0x55b6 <GLCDKS0108_SendData+0x1b2>
    55ba:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(5);

    DIO_enuSetPinValue(GLCDKS0108_EN_PORT, GLCDKS0108_EN_PIN, DIO_u8LOW);
    55bc:	81 e0       	ldi	r24, 0x01	; 1
    55be:	60 e0       	ldi	r22, 0x00	; 0
    55c0:	40 e0       	ldi	r20, 0x00	; 0
    55c2:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	a0 ea       	ldi	r26, 0xA0	; 160
    55cc:	b0 e4       	ldi	r27, 0x40	; 64
    55ce:	8d 8b       	std	Y+21, r24	; 0x15
    55d0:	9e 8b       	std	Y+22, r25	; 0x16
    55d2:	af 8b       	std	Y+23, r26	; 0x17
    55d4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    55d6:	6d 89       	ldd	r22, Y+21	; 0x15
    55d8:	7e 89       	ldd	r23, Y+22	; 0x16
    55da:	8f 89       	ldd	r24, Y+23	; 0x17
    55dc:	98 8d       	ldd	r25, Y+24	; 0x18
    55de:	2b ea       	ldi	r18, 0xAB	; 171
    55e0:	3a ea       	ldi	r19, 0xAA	; 170
    55e2:	4a ea       	ldi	r20, 0xAA	; 170
    55e4:	50 e4       	ldi	r21, 0x40	; 64
    55e6:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    55ea:	dc 01       	movw	r26, r24
    55ec:	cb 01       	movw	r24, r22
    55ee:	89 8b       	std	Y+17, r24	; 0x11
    55f0:	9a 8b       	std	Y+18, r25	; 0x12
    55f2:	ab 8b       	std	Y+19, r26	; 0x13
    55f4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    55f6:	69 89       	ldd	r22, Y+17	; 0x11
    55f8:	7a 89       	ldd	r23, Y+18	; 0x12
    55fa:	8b 89       	ldd	r24, Y+19	; 0x13
    55fc:	9c 89       	ldd	r25, Y+20	; 0x14
    55fe:	20 e0       	ldi	r18, 0x00	; 0
    5600:	30 e0       	ldi	r19, 0x00	; 0
    5602:	40 e8       	ldi	r20, 0x80	; 128
    5604:	5f e3       	ldi	r21, 0x3F	; 63
    5606:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    560a:	88 23       	and	r24, r24
    560c:	1c f4       	brge	.+6      	; 0x5614 <GLCDKS0108_SendData+0x210>
		__ticks = 1;
    560e:	81 e0       	ldi	r24, 0x01	; 1
    5610:	88 8b       	std	Y+16, r24	; 0x10
    5612:	91 c0       	rjmp	.+290    	; 0x5736 <GLCDKS0108_SendData+0x332>
	else if (__tmp > 255)
    5614:	69 89       	ldd	r22, Y+17	; 0x11
    5616:	7a 89       	ldd	r23, Y+18	; 0x12
    5618:	8b 89       	ldd	r24, Y+19	; 0x13
    561a:	9c 89       	ldd	r25, Y+20	; 0x14
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	4f e7       	ldi	r20, 0x7F	; 127
    5622:	53 e4       	ldi	r21, 0x43	; 67
    5624:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    5628:	18 16       	cp	r1, r24
    562a:	0c f0       	brlt	.+2      	; 0x562e <GLCDKS0108_SendData+0x22a>
    562c:	7b c0       	rjmp	.+246    	; 0x5724 <GLCDKS0108_SendData+0x320>
	{
		_delay_ms(__us / 1000.0);
    562e:	6d 89       	ldd	r22, Y+21	; 0x15
    5630:	7e 89       	ldd	r23, Y+22	; 0x16
    5632:	8f 89       	ldd	r24, Y+23	; 0x17
    5634:	98 8d       	ldd	r25, Y+24	; 0x18
    5636:	20 e0       	ldi	r18, 0x00	; 0
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	4a e7       	ldi	r20, 0x7A	; 122
    563c:	54 e4       	ldi	r21, 0x44	; 68
    563e:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
    5642:	dc 01       	movw	r26, r24
    5644:	cb 01       	movw	r24, r22
    5646:	8c 87       	std	Y+12, r24	; 0x0c
    5648:	9d 87       	std	Y+13, r25	; 0x0d
    564a:	ae 87       	std	Y+14, r26	; 0x0e
    564c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    564e:	6c 85       	ldd	r22, Y+12	; 0x0c
    5650:	7d 85       	ldd	r23, Y+13	; 0x0d
    5652:	8e 85       	ldd	r24, Y+14	; 0x0e
    5654:	9f 85       	ldd	r25, Y+15	; 0x0f
    5656:	20 e0       	ldi	r18, 0x00	; 0
    5658:	30 e0       	ldi	r19, 0x00	; 0
    565a:	4a e7       	ldi	r20, 0x7A	; 122
    565c:	55 e4       	ldi	r21, 0x45	; 69
    565e:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    5662:	dc 01       	movw	r26, r24
    5664:	cb 01       	movw	r24, r22
    5666:	88 87       	std	Y+8, r24	; 0x08
    5668:	99 87       	std	Y+9, r25	; 0x09
    566a:	aa 87       	std	Y+10, r26	; 0x0a
    566c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    566e:	68 85       	ldd	r22, Y+8	; 0x08
    5670:	79 85       	ldd	r23, Y+9	; 0x09
    5672:	8a 85       	ldd	r24, Y+10	; 0x0a
    5674:	9b 85       	ldd	r25, Y+11	; 0x0b
    5676:	20 e0       	ldi	r18, 0x00	; 0
    5678:	30 e0       	ldi	r19, 0x00	; 0
    567a:	40 e8       	ldi	r20, 0x80	; 128
    567c:	5f e3       	ldi	r21, 0x3F	; 63
    567e:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    5682:	88 23       	and	r24, r24
    5684:	2c f4       	brge	.+10     	; 0x5690 <GLCDKS0108_SendData+0x28c>
		__ticks = 1;
    5686:	81 e0       	ldi	r24, 0x01	; 1
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	9f 83       	std	Y+7, r25	; 0x07
    568c:	8e 83       	std	Y+6, r24	; 0x06
    568e:	3f c0       	rjmp	.+126    	; 0x570e <GLCDKS0108_SendData+0x30a>
	else if (__tmp > 65535)
    5690:	68 85       	ldd	r22, Y+8	; 0x08
    5692:	79 85       	ldd	r23, Y+9	; 0x09
    5694:	8a 85       	ldd	r24, Y+10	; 0x0a
    5696:	9b 85       	ldd	r25, Y+11	; 0x0b
    5698:	20 e0       	ldi	r18, 0x00	; 0
    569a:	3f ef       	ldi	r19, 0xFF	; 255
    569c:	4f e7       	ldi	r20, 0x7F	; 127
    569e:	57 e4       	ldi	r21, 0x47	; 71
    56a0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    56a4:	18 16       	cp	r1, r24
    56a6:	4c f5       	brge	.+82     	; 0x56fa <GLCDKS0108_SendData+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56a8:	6c 85       	ldd	r22, Y+12	; 0x0c
    56aa:	7d 85       	ldd	r23, Y+13	; 0x0d
    56ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    56ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	40 e2       	ldi	r20, 0x20	; 32
    56b6:	51 e4       	ldi	r21, 0x41	; 65
    56b8:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    56bc:	dc 01       	movw	r26, r24
    56be:	cb 01       	movw	r24, r22
    56c0:	bc 01       	movw	r22, r24
    56c2:	cd 01       	movw	r24, r26
    56c4:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    56c8:	dc 01       	movw	r26, r24
    56ca:	cb 01       	movw	r24, r22
    56cc:	9f 83       	std	Y+7, r25	; 0x07
    56ce:	8e 83       	std	Y+6, r24	; 0x06
    56d0:	0f c0       	rjmp	.+30     	; 0x56f0 <GLCDKS0108_SendData+0x2ec>
    56d2:	80 e9       	ldi	r24, 0x90	; 144
    56d4:	91 e0       	ldi	r25, 0x01	; 1
    56d6:	9d 83       	std	Y+5, r25	; 0x05
    56d8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    56da:	8c 81       	ldd	r24, Y+4	; 0x04
    56dc:	9d 81       	ldd	r25, Y+5	; 0x05
    56de:	01 97       	sbiw	r24, 0x01	; 1
    56e0:	f1 f7       	brne	.-4      	; 0x56de <GLCDKS0108_SendData+0x2da>
    56e2:	9d 83       	std	Y+5, r25	; 0x05
    56e4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    56e6:	8e 81       	ldd	r24, Y+6	; 0x06
    56e8:	9f 81       	ldd	r25, Y+7	; 0x07
    56ea:	01 97       	sbiw	r24, 0x01	; 1
    56ec:	9f 83       	std	Y+7, r25	; 0x07
    56ee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    56f0:	8e 81       	ldd	r24, Y+6	; 0x06
    56f2:	9f 81       	ldd	r25, Y+7	; 0x07
    56f4:	00 97       	sbiw	r24, 0x00	; 0
    56f6:	69 f7       	brne	.-38     	; 0x56d2 <GLCDKS0108_SendData+0x2ce>
    56f8:	24 c0       	rjmp	.+72     	; 0x5742 <GLCDKS0108_SendData+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    56fa:	68 85       	ldd	r22, Y+8	; 0x08
    56fc:	79 85       	ldd	r23, Y+9	; 0x09
    56fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    5700:	9b 85       	ldd	r25, Y+11	; 0x0b
    5702:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    5706:	dc 01       	movw	r26, r24
    5708:	cb 01       	movw	r24, r22
    570a:	9f 83       	std	Y+7, r25	; 0x07
    570c:	8e 83       	std	Y+6, r24	; 0x06
    570e:	8e 81       	ldd	r24, Y+6	; 0x06
    5710:	9f 81       	ldd	r25, Y+7	; 0x07
    5712:	9b 83       	std	Y+3, r25	; 0x03
    5714:	8a 83       	std	Y+2, r24	; 0x02
    5716:	8a 81       	ldd	r24, Y+2	; 0x02
    5718:	9b 81       	ldd	r25, Y+3	; 0x03
    571a:	01 97       	sbiw	r24, 0x01	; 1
    571c:	f1 f7       	brne	.-4      	; 0x571a <GLCDKS0108_SendData+0x316>
    571e:	9b 83       	std	Y+3, r25	; 0x03
    5720:	8a 83       	std	Y+2, r24	; 0x02
    5722:	0f c0       	rjmp	.+30     	; 0x5742 <GLCDKS0108_SendData+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5724:	69 89       	ldd	r22, Y+17	; 0x11
    5726:	7a 89       	ldd	r23, Y+18	; 0x12
    5728:	8b 89       	ldd	r24, Y+19	; 0x13
    572a:	9c 89       	ldd	r25, Y+20	; 0x14
    572c:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    5730:	dc 01       	movw	r26, r24
    5732:	cb 01       	movw	r24, r22
    5734:	88 8b       	std	Y+16, r24	; 0x10
    5736:	88 89       	ldd	r24, Y+16	; 0x10
    5738:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    573a:	89 81       	ldd	r24, Y+1	; 0x01
    573c:	8a 95       	dec	r24
    573e:	f1 f7       	brne	.-4      	; 0x573c <GLCDKS0108_SendData+0x338>
    5740:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(5);
}
    5742:	e1 96       	adiw	r28, 0x31	; 49
    5744:	0f b6       	in	r0, 0x3f	; 63
    5746:	f8 94       	cli
    5748:	de bf       	out	0x3e, r29	; 62
    574a:	0f be       	out	0x3f, r0	; 63
    574c:	cd bf       	out	0x3d, r28	; 61
    574e:	cf 91       	pop	r28
    5750:	df 91       	pop	r29
    5752:	08 95       	ret

00005754 <EEPROM_enuInit>:
#include <util/delay.h>
/**************************************************************/



ErrorStatus_t EEPROM_enuInit(void){
    5754:	df 93       	push	r29
    5756:	cf 93       	push	r28
    5758:	0f 92       	push	r0
    575a:	cd b7       	in	r28, 0x3d	; 61
    575c:	de b7       	in	r29, 0x3e	; 62
	ErrorStatus_t Local_enuErrorState = TWI_enuInit();
    575e:	0e 94 82 09 	call	0x1304	; 0x1304 <TWI_enuInit>
    5762:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    5764:	89 81       	ldd	r24, Y+1	; 0x01
}
    5766:	0f 90       	pop	r0
    5768:	cf 91       	pop	r28
    576a:	df 91       	pop	r29
    576c:	08 95       	ret

0000576e <EEPROM_enuWriteData>:


ErrorStatus_t EEPROM_enuWriteData(EEPROM_Input_t* eepromInstance) {
    576e:	df 93       	push	r29
    5770:	cf 93       	push	r28
    5772:	cd b7       	in	r28, 0x3d	; 61
    5774:	de b7       	in	r29, 0x3e	; 62
    5776:	62 97       	sbiw	r28, 0x12	; 18
    5778:	0f b6       	in	r0, 0x3f	; 63
    577a:	f8 94       	cli
    577c:	de bf       	out	0x3e, r29	; 62
    577e:	0f be       	out	0x3f, r0	; 63
    5780:	cd bf       	out	0x3d, r28	; 61
    5782:	9a 8b       	std	Y+18, r25	; 0x12
    5784:	89 8b       	std	Y+17, r24	; 0x11
    ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    5786:	18 8a       	std	Y+16, r1	; 0x10

    	uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 3) | (eepromInstance->A1 << 2) | (eepromInstance->A0);

	#elif(EEPROM_TYPE == EEPROM_NM24C08 || EEPROM_TYPE == EEPROM_NM24C08F )

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 2) | (eepromInstance->A1 << 1) | (eepromInstance->A0);
    5788:	e9 89       	ldd	r30, Y+17	; 0x11
    578a:	fa 89       	ldd	r31, Y+18	; 0x12
    578c:	82 81       	ldd	r24, Z+2	; 0x02
    578e:	81 70       	andi	r24, 0x01	; 1
    5790:	88 2f       	mov	r24, r24
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	88 0f       	add	r24, r24
    5796:	99 1f       	adc	r25, r25
    5798:	88 0f       	add	r24, r24
    579a:	99 1f       	adc	r25, r25
    579c:	28 2f       	mov	r18, r24
    579e:	20 6a       	ori	r18, 0xA0	; 160
    57a0:	e9 89       	ldd	r30, Y+17	; 0x11
    57a2:	fa 89       	ldd	r31, Y+18	; 0x12
    57a4:	82 81       	ldd	r24, Z+2	; 0x02
    57a6:	86 95       	lsr	r24
    57a8:	81 70       	andi	r24, 0x01	; 1
    57aa:	88 2f       	mov	r24, r24
    57ac:	90 e0       	ldi	r25, 0x00	; 0
    57ae:	88 0f       	add	r24, r24
    57b0:	99 1f       	adc	r25, r25
    57b2:	92 2f       	mov	r25, r18
    57b4:	98 2b       	or	r25, r24
    57b6:	e9 89       	ldd	r30, Y+17	; 0x11
    57b8:	fa 89       	ldd	r31, Y+18	; 0x12
    57ba:	82 81       	ldd	r24, Z+2	; 0x02
    57bc:	86 95       	lsr	r24
    57be:	86 95       	lsr	r24
    57c0:	81 70       	andi	r24, 0x01	; 1
    57c2:	89 2b       	or	r24, r25
    57c4:	8f 87       	std	Y+15, r24	; 0x0f
		#error "Unsupported EEPROM type!"
	#endif


    // Send start condition
    if( TWI_enuStartCondition() == TWI_STATUS_OK){
    57c6:	0e 94 ab 09 	call	0x1356	; 0x1356 <TWI_enuStartCondition>
    57ca:	81 30       	cpi	r24, 0x01	; 1
    57cc:	79 f4       	brne	.+30     	; 0x57ec <EEPROM_enuWriteData+0x7e>

		// Send EEPROM address with write operation
		TWI_enuWriteData(Local_u8Address | TWI_WriteOperation);
    57ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    57d0:	0e 94 3f 0a 	call	0x147e	; 0x147e <TWI_enuWriteData>

		// Send memory address within EEPROM
		TWI_enuWriteData(eepromInstance->address);
    57d4:	e9 89       	ldd	r30, Y+17	; 0x11
    57d6:	fa 89       	ldd	r31, Y+18	; 0x12
    57d8:	80 81       	ld	r24, Z
    57da:	0e 94 3f 0a 	call	0x147e	; 0x147e <TWI_enuWriteData>

		// Write data to EEPROM
		TWI_enuWriteData(eepromInstance->data);
    57de:	e9 89       	ldd	r30, Y+17	; 0x11
    57e0:	fa 89       	ldd	r31, Y+18	; 0x12
    57e2:	81 81       	ldd	r24, Z+1	; 0x01
    57e4:	0e 94 3f 0a 	call	0x147e	; 0x147e <TWI_enuWriteData>

		// Send stop condition
		TWI_enuStopCondition();
    57e8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <TWI_enuStopCondition>
    57ec:	80 e0       	ldi	r24, 0x00	; 0
    57ee:	90 e0       	ldi	r25, 0x00	; 0
    57f0:	a0 e2       	ldi	r26, 0x20	; 32
    57f2:	b1 e4       	ldi	r27, 0x41	; 65
    57f4:	8b 87       	std	Y+11, r24	; 0x0b
    57f6:	9c 87       	std	Y+12, r25	; 0x0c
    57f8:	ad 87       	std	Y+13, r26	; 0x0d
    57fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    57fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    5800:	8d 85       	ldd	r24, Y+13	; 0x0d
    5802:	9e 85       	ldd	r25, Y+14	; 0x0e
    5804:	20 e0       	ldi	r18, 0x00	; 0
    5806:	30 e0       	ldi	r19, 0x00	; 0
    5808:	4a ef       	ldi	r20, 0xFA	; 250
    580a:	54 e4       	ldi	r21, 0x44	; 68
    580c:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    5810:	dc 01       	movw	r26, r24
    5812:	cb 01       	movw	r24, r22
    5814:	8f 83       	std	Y+7, r24	; 0x07
    5816:	98 87       	std	Y+8, r25	; 0x08
    5818:	a9 87       	std	Y+9, r26	; 0x09
    581a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    581c:	6f 81       	ldd	r22, Y+7	; 0x07
    581e:	78 85       	ldd	r23, Y+8	; 0x08
    5820:	89 85       	ldd	r24, Y+9	; 0x09
    5822:	9a 85       	ldd	r25, Y+10	; 0x0a
    5824:	20 e0       	ldi	r18, 0x00	; 0
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	40 e8       	ldi	r20, 0x80	; 128
    582a:	5f e3       	ldi	r21, 0x3F	; 63
    582c:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    5830:	88 23       	and	r24, r24
    5832:	2c f4       	brge	.+10     	; 0x583e <EEPROM_enuWriteData+0xd0>
		__ticks = 1;
    5834:	81 e0       	ldi	r24, 0x01	; 1
    5836:	90 e0       	ldi	r25, 0x00	; 0
    5838:	9e 83       	std	Y+6, r25	; 0x06
    583a:	8d 83       	std	Y+5, r24	; 0x05
    583c:	3f c0       	rjmp	.+126    	; 0x58bc <EEPROM_enuWriteData+0x14e>
	else if (__tmp > 65535)
    583e:	6f 81       	ldd	r22, Y+7	; 0x07
    5840:	78 85       	ldd	r23, Y+8	; 0x08
    5842:	89 85       	ldd	r24, Y+9	; 0x09
    5844:	9a 85       	ldd	r25, Y+10	; 0x0a
    5846:	20 e0       	ldi	r18, 0x00	; 0
    5848:	3f ef       	ldi	r19, 0xFF	; 255
    584a:	4f e7       	ldi	r20, 0x7F	; 127
    584c:	57 e4       	ldi	r21, 0x47	; 71
    584e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    5852:	18 16       	cp	r1, r24
    5854:	4c f5       	brge	.+82     	; 0x58a8 <EEPROM_enuWriteData+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5856:	6b 85       	ldd	r22, Y+11	; 0x0b
    5858:	7c 85       	ldd	r23, Y+12	; 0x0c
    585a:	8d 85       	ldd	r24, Y+13	; 0x0d
    585c:	9e 85       	ldd	r25, Y+14	; 0x0e
    585e:	20 e0       	ldi	r18, 0x00	; 0
    5860:	30 e0       	ldi	r19, 0x00	; 0
    5862:	40 e2       	ldi	r20, 0x20	; 32
    5864:	51 e4       	ldi	r21, 0x41	; 65
    5866:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    586a:	dc 01       	movw	r26, r24
    586c:	cb 01       	movw	r24, r22
    586e:	bc 01       	movw	r22, r24
    5870:	cd 01       	movw	r24, r26
    5872:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    5876:	dc 01       	movw	r26, r24
    5878:	cb 01       	movw	r24, r22
    587a:	9e 83       	std	Y+6, r25	; 0x06
    587c:	8d 83       	std	Y+5, r24	; 0x05
    587e:	0f c0       	rjmp	.+30     	; 0x589e <EEPROM_enuWriteData+0x130>
    5880:	88 ec       	ldi	r24, 0xC8	; 200
    5882:	90 e0       	ldi	r25, 0x00	; 0
    5884:	9c 83       	std	Y+4, r25	; 0x04
    5886:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5888:	8b 81       	ldd	r24, Y+3	; 0x03
    588a:	9c 81       	ldd	r25, Y+4	; 0x04
    588c:	01 97       	sbiw	r24, 0x01	; 1
    588e:	f1 f7       	brne	.-4      	; 0x588c <EEPROM_enuWriteData+0x11e>
    5890:	9c 83       	std	Y+4, r25	; 0x04
    5892:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5894:	8d 81       	ldd	r24, Y+5	; 0x05
    5896:	9e 81       	ldd	r25, Y+6	; 0x06
    5898:	01 97       	sbiw	r24, 0x01	; 1
    589a:	9e 83       	std	Y+6, r25	; 0x06
    589c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    589e:	8d 81       	ldd	r24, Y+5	; 0x05
    58a0:	9e 81       	ldd	r25, Y+6	; 0x06
    58a2:	00 97       	sbiw	r24, 0x00	; 0
    58a4:	69 f7       	brne	.-38     	; 0x5880 <EEPROM_enuWriteData+0x112>
    58a6:	14 c0       	rjmp	.+40     	; 0x58d0 <EEPROM_enuWriteData+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58a8:	6f 81       	ldd	r22, Y+7	; 0x07
    58aa:	78 85       	ldd	r23, Y+8	; 0x08
    58ac:	89 85       	ldd	r24, Y+9	; 0x09
    58ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    58b0:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    58b4:	dc 01       	movw	r26, r24
    58b6:	cb 01       	movw	r24, r22
    58b8:	9e 83       	std	Y+6, r25	; 0x06
    58ba:	8d 83       	std	Y+5, r24	; 0x05
    58bc:	8d 81       	ldd	r24, Y+5	; 0x05
    58be:	9e 81       	ldd	r25, Y+6	; 0x06
    58c0:	9a 83       	std	Y+2, r25	; 0x02
    58c2:	89 83       	std	Y+1, r24	; 0x01
    58c4:	89 81       	ldd	r24, Y+1	; 0x01
    58c6:	9a 81       	ldd	r25, Y+2	; 0x02
    58c8:	01 97       	sbiw	r24, 0x01	; 1
    58ca:	f1 f7       	brne	.-4      	; 0x58c8 <EEPROM_enuWriteData+0x15a>
    58cc:	9a 83       	std	Y+2, r25	; 0x02
    58ce:	89 83       	std	Y+1, r24	; 0x01

    }

    // Small delay to ensure data is written
    _delay_ms(10);
    Local_enuErrorState = ERROR_STATUS_OK;
    58d0:	81 e0       	ldi	r24, 0x01	; 1
    58d2:	88 8b       	std	Y+16, r24	; 0x10
    return Local_enuErrorState;
    58d4:	88 89       	ldd	r24, Y+16	; 0x10
}
    58d6:	62 96       	adiw	r28, 0x12	; 18
    58d8:	0f b6       	in	r0, 0x3f	; 63
    58da:	f8 94       	cli
    58dc:	de bf       	out	0x3e, r29	; 62
    58de:	0f be       	out	0x3f, r0	; 63
    58e0:	cd bf       	out	0x3d, r28	; 61
    58e2:	cf 91       	pop	r28
    58e4:	df 91       	pop	r29
    58e6:	08 95       	ret

000058e8 <EEPROM_enuReadData>:


ErrorStatus_t EEPROM_enuReadData(EEPROM_Input_t* eepromInstance) {
    58e8:	df 93       	push	r29
    58ea:	cf 93       	push	r28
    58ec:	00 d0       	rcall	.+0      	; 0x58ee <EEPROM_enuReadData+0x6>
    58ee:	00 d0       	rcall	.+0      	; 0x58f0 <EEPROM_enuReadData+0x8>
    58f0:	cd b7       	in	r28, 0x3d	; 61
    58f2:	de b7       	in	r29, 0x3e	; 62
    58f4:	9c 83       	std	Y+4, r25	; 0x04
    58f6:	8b 83       	std	Y+3, r24	; 0x03
    ErrorStatus_t Local_enuErrorState = ERROR_STATUS_FAILURE;
    58f8:	1a 82       	std	Y+2, r1	; 0x02

    eepromInstance->data = 0;
    58fa:	eb 81       	ldd	r30, Y+3	; 0x03
    58fc:	fc 81       	ldd	r31, Y+4	; 0x04
    58fe:	11 82       	std	Z+1, r1	; 0x01

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 3) | (eepromInstance->A1 << 2) | (eepromInstance->A0);

	#elif(EEPROM_TYPE == EEPROM_NM24C08 || EEPROM_TYPE == EEPROM_NM24C08F )

		uint8_t	Local_u8Address = (0xA0) | (eepromInstance->A2 << 2) | (eepromInstance->A1 << 1) | (eepromInstance->A0);
    5900:	eb 81       	ldd	r30, Y+3	; 0x03
    5902:	fc 81       	ldd	r31, Y+4	; 0x04
    5904:	82 81       	ldd	r24, Z+2	; 0x02
    5906:	81 70       	andi	r24, 0x01	; 1
    5908:	88 2f       	mov	r24, r24
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	88 0f       	add	r24, r24
    590e:	99 1f       	adc	r25, r25
    5910:	88 0f       	add	r24, r24
    5912:	99 1f       	adc	r25, r25
    5914:	28 2f       	mov	r18, r24
    5916:	20 6a       	ori	r18, 0xA0	; 160
    5918:	eb 81       	ldd	r30, Y+3	; 0x03
    591a:	fc 81       	ldd	r31, Y+4	; 0x04
    591c:	82 81       	ldd	r24, Z+2	; 0x02
    591e:	86 95       	lsr	r24
    5920:	81 70       	andi	r24, 0x01	; 1
    5922:	88 2f       	mov	r24, r24
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	88 0f       	add	r24, r24
    5928:	99 1f       	adc	r25, r25
    592a:	92 2f       	mov	r25, r18
    592c:	98 2b       	or	r25, r24
    592e:	eb 81       	ldd	r30, Y+3	; 0x03
    5930:	fc 81       	ldd	r31, Y+4	; 0x04
    5932:	82 81       	ldd	r24, Z+2	; 0x02
    5934:	86 95       	lsr	r24
    5936:	86 95       	lsr	r24
    5938:	81 70       	andi	r24, 0x01	; 1
    593a:	89 2b       	or	r24, r25
    593c:	89 83       	std	Y+1, r24	; 0x01
	#if( EEPROM_TYPE == EEPROM_NM24C09 || EEPROM_TYPE == EEPROM_NM24C09F )
		uint8_t Local_u8Address = (0xA0) | (EEPROM_A2_STATE << 2);
	#endif

	// Send start condition
    if( TWI_enuStartCondition() == TWI_STATUS_OK){
    593e:	0e 94 ab 09 	call	0x1356	; 0x1356 <TWI_enuStartCondition>
    5942:	81 30       	cpi	r24, 0x01	; 1
    5944:	a9 f4       	brne	.+42     	; 0x5970 <EEPROM_enuReadData+0x88>

		// Send EEPROM address with write operation
		TWI_enuWriteData(Local_u8Address);
    5946:	89 81       	ldd	r24, Y+1	; 0x01
    5948:	0e 94 3f 0a 	call	0x147e	; 0x147e <TWI_enuWriteData>

		// Send memory address within EEPROM
		TWI_enuWriteData(eepromInstance->address);
    594c:	eb 81       	ldd	r30, Y+3	; 0x03
    594e:	fc 81       	ldd	r31, Y+4	; 0x04
    5950:	80 81       	ld	r24, Z
    5952:	0e 94 3f 0a 	call	0x147e	; 0x147e <TWI_enuWriteData>

		// Send repeated start condition
		TWI_enuStartCondition();
    5956:	0e 94 ab 09 	call	0x1356	; 0x1356 <TWI_enuStartCondition>

		// Send EEPROM address with read operation
		TWI_enuWriteData(Local_u8Address | TWI_ReadOperation);
    595a:	89 81       	ldd	r24, Y+1	; 0x01
    595c:	81 60       	ori	r24, 0x01	; 1
    595e:	0e 94 3f 0a 	call	0x147e	; 0x147e <TWI_enuWriteData>

		// Read data from EEPROM
		TWI_enuReadData(&(eepromInstance->data));
    5962:	8b 81       	ldd	r24, Y+3	; 0x03
    5964:	9c 81       	ldd	r25, Y+4	; 0x04
    5966:	01 96       	adiw	r24, 0x01	; 1
    5968:	0e 94 65 0a 	call	0x14ca	; 0x14ca <TWI_enuReadData>

		// Send stop condition
		TWI_enuStopCondition();
    596c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <TWI_enuStopCondition>

    }

    Local_enuErrorState = ERROR_STATUS_OK;
    5970:	81 e0       	ldi	r24, 0x01	; 1
    5972:	8a 83       	std	Y+2, r24	; 0x02
    return Local_enuErrorState;
    5974:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5976:	0f 90       	pop	r0
    5978:	0f 90       	pop	r0
    597a:	0f 90       	pop	r0
    597c:	0f 90       	pop	r0
    597e:	cf 91       	pop	r28
    5980:	df 91       	pop	r29
    5982:	08 95       	ret

00005984 <EEPROM_WriteDataSequence>:



void EEPROM_WriteDataSequence(EEPROM_Input_t* eepromInstance, const uint8_t *dataBuffer, uint8_t dataLength, uint8_t flag, uint8_t startAddress) {
    5984:	0f 93       	push	r16
    5986:	df 93       	push	r29
    5988:	cf 93       	push	r28
    598a:	cd b7       	in	r28, 0x3d	; 61
    598c:	de b7       	in	r29, 0x3e	; 62
    598e:	28 97       	sbiw	r28, 0x08	; 8
    5990:	0f b6       	in	r0, 0x3f	; 63
    5992:	f8 94       	cli
    5994:	de bf       	out	0x3e, r29	; 62
    5996:	0f be       	out	0x3f, r0	; 63
    5998:	cd bf       	out	0x3d, r28	; 61
    599a:	9b 83       	std	Y+3, r25	; 0x03
    599c:	8a 83       	std	Y+2, r24	; 0x02
    599e:	7d 83       	std	Y+5, r23	; 0x05
    59a0:	6c 83       	std	Y+4, r22	; 0x04
    59a2:	4e 83       	std	Y+6, r20	; 0x06
    59a4:	2f 83       	std	Y+7, r18	; 0x07
    59a6:	08 87       	std	Y+8, r16	; 0x08
    eepromInstance->address = startAddress;  // Set the EEPROM address to the specified start address
    59a8:	ea 81       	ldd	r30, Y+2	; 0x02
    59aa:	fb 81       	ldd	r31, Y+3	; 0x03
    59ac:	88 85       	ldd	r24, Y+8	; 0x08
    59ae:	80 83       	st	Z, r24

    for(uint8_t i = 0; i < dataLength; i++) {
    59b0:	19 82       	std	Y+1, r1	; 0x01
    59b2:	1a c0       	rjmp	.+52     	; 0x59e8 <EEPROM_WriteDataSequence+0x64>
        eepromInstance->data = dataBuffer[i];
    59b4:	89 81       	ldd	r24, Y+1	; 0x01
    59b6:	28 2f       	mov	r18, r24
    59b8:	30 e0       	ldi	r19, 0x00	; 0
    59ba:	8c 81       	ldd	r24, Y+4	; 0x04
    59bc:	9d 81       	ldd	r25, Y+5	; 0x05
    59be:	fc 01       	movw	r30, r24
    59c0:	e2 0f       	add	r30, r18
    59c2:	f3 1f       	adc	r31, r19
    59c4:	80 81       	ld	r24, Z
    59c6:	ea 81       	ldd	r30, Y+2	; 0x02
    59c8:	fb 81       	ldd	r31, Y+3	; 0x03
    59ca:	81 83       	std	Z+1, r24	; 0x01
        EEPROM_enuWriteData(eepromInstance);
    59cc:	8a 81       	ldd	r24, Y+2	; 0x02
    59ce:	9b 81       	ldd	r25, Y+3	; 0x03
    59d0:	0e 94 b7 2b 	call	0x576e	; 0x576e <EEPROM_enuWriteData>
        eepromInstance->address++;  // Move to the next address
    59d4:	ea 81       	ldd	r30, Y+2	; 0x02
    59d6:	fb 81       	ldd	r31, Y+3	; 0x03
    59d8:	80 81       	ld	r24, Z
    59da:	8f 5f       	subi	r24, 0xFF	; 255
    59dc:	ea 81       	ldd	r30, Y+2	; 0x02
    59de:	fb 81       	ldd	r31, Y+3	; 0x03
    59e0:	80 83       	st	Z, r24


void EEPROM_WriteDataSequence(EEPROM_Input_t* eepromInstance, const uint8_t *dataBuffer, uint8_t dataLength, uint8_t flag, uint8_t startAddress) {
    eepromInstance->address = startAddress;  // Set the EEPROM address to the specified start address

    for(uint8_t i = 0; i < dataLength; i++) {
    59e2:	89 81       	ldd	r24, Y+1	; 0x01
    59e4:	8f 5f       	subi	r24, 0xFF	; 255
    59e6:	89 83       	std	Y+1, r24	; 0x01
    59e8:	99 81       	ldd	r25, Y+1	; 0x01
    59ea:	8e 81       	ldd	r24, Y+6	; 0x06
    59ec:	98 17       	cp	r25, r24
    59ee:	10 f3       	brcs	.-60     	; 0x59b4 <EEPROM_WriteDataSequence+0x30>
        eepromInstance->data = dataBuffer[i];
        EEPROM_enuWriteData(eepromInstance);
        eepromInstance->address++;  // Move to the next address
    }

    eepromInstance->data = flag;  // Write the flag to indicate the end of the data
    59f0:	ea 81       	ldd	r30, Y+2	; 0x02
    59f2:	fb 81       	ldd	r31, Y+3	; 0x03
    59f4:	8f 81       	ldd	r24, Y+7	; 0x07
    59f6:	81 83       	std	Z+1, r24	; 0x01
    EEPROM_enuWriteData(eepromInstance);
    59f8:	8a 81       	ldd	r24, Y+2	; 0x02
    59fa:	9b 81       	ldd	r25, Y+3	; 0x03
    59fc:	0e 94 b7 2b 	call	0x576e	; 0x576e <EEPROM_enuWriteData>
}
    5a00:	28 96       	adiw	r28, 0x08	; 8
    5a02:	0f b6       	in	r0, 0x3f	; 63
    5a04:	f8 94       	cli
    5a06:	de bf       	out	0x3e, r29	; 62
    5a08:	0f be       	out	0x3f, r0	; 63
    5a0a:	cd bf       	out	0x3d, r28	; 61
    5a0c:	cf 91       	pop	r28
    5a0e:	df 91       	pop	r29
    5a10:	0f 91       	pop	r16
    5a12:	08 95       	ret

00005a14 <EEPROM_SearchForFlag>:

uint8_t EEPROM_SearchForFlag(EEPROM_Input_t eepromInstance, uint8_t flag, uint8_t startAddress, uint8_t dataLength){
    5a14:	0f 93       	push	r16
    5a16:	df 93       	push	r29
    5a18:	cf 93       	push	r28
    5a1a:	cd b7       	in	r28, 0x3d	; 61
    5a1c:	de b7       	in	r29, 0x3e	; 62
    5a1e:	27 97       	sbiw	r28, 0x07	; 7
    5a20:	0f b6       	in	r0, 0x3f	; 63
    5a22:	f8 94       	cli
    5a24:	de bf       	out	0x3e, r29	; 62
    5a26:	0f be       	out	0x3f, r0	; 63
    5a28:	cd bf       	out	0x3d, r28	; 61
    5a2a:	69 83       	std	Y+1, r22	; 0x01
    5a2c:	7a 83       	std	Y+2, r23	; 0x02
    5a2e:	8b 83       	std	Y+3, r24	; 0x03
    5a30:	4c 83       	std	Y+4, r20	; 0x04
    5a32:	2d 83       	std	Y+5, r18	; 0x05
    5a34:	0e 83       	std	Y+6, r16	; 0x06

    // Set address to start searching from
	eepromInstance.address = startAddress + dataLength;
    5a36:	9d 81       	ldd	r25, Y+5	; 0x05
    5a38:	8e 81       	ldd	r24, Y+6	; 0x06
    5a3a:	89 0f       	add	r24, r25
    5a3c:	89 83       	std	Y+1, r24	; 0x01

    // Read the data at the address where the flag is expected
    EEPROM_enuReadData(&eepromInstance);
    5a3e:	ce 01       	movw	r24, r28
    5a40:	01 96       	adiw	r24, 0x01	; 1
    5a42:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <EEPROM_enuReadData>

    // Check if the read data matches the flag
    if (eepromInstance.data == flag) {
    5a46:	9a 81       	ldd	r25, Y+2	; 0x02
    5a48:	8c 81       	ldd	r24, Y+4	; 0x04
    5a4a:	98 17       	cp	r25, r24
    5a4c:	19 f4       	brne	.+6      	; 0x5a54 <EEPROM_SearchForFlag+0x40>
        return 1;  // Flag found
    5a4e:	81 e0       	ldi	r24, 0x01	; 1
    5a50:	8f 83       	std	Y+7, r24	; 0x07
    5a52:	01 c0       	rjmp	.+2      	; 0x5a56 <EEPROM_SearchForFlag+0x42>
    }

    return 0;  // Flag not found
    5a54:	1f 82       	std	Y+7, r1	; 0x07
    5a56:	8f 81       	ldd	r24, Y+7	; 0x07

}
    5a58:	27 96       	adiw	r28, 0x07	; 7
    5a5a:	0f b6       	in	r0, 0x3f	; 63
    5a5c:	f8 94       	cli
    5a5e:	de bf       	out	0x3e, r29	; 62
    5a60:	0f be       	out	0x3f, r0	; 63
    5a62:	cd bf       	out	0x3d, r28	; 61
    5a64:	cf 91       	pop	r28
    5a66:	df 91       	pop	r29
    5a68:	0f 91       	pop	r16
    5a6a:	08 95       	ret

00005a6c <EEPROM_Format>:


void EEPROM_Format(EEPROM_Input_t* eepromInstance) {
    5a6c:	df 93       	push	r29
    5a6e:	cf 93       	push	r28
    5a70:	cd b7       	in	r28, 0x3d	; 61
    5a72:	de b7       	in	r29, 0x3e	; 62
    5a74:	28 97       	sbiw	r28, 0x08	; 8
    5a76:	0f b6       	in	r0, 0x3f	; 63
    5a78:	f8 94       	cli
    5a7a:	de bf       	out	0x3e, r29	; 62
    5a7c:	0f be       	out	0x3f, r0	; 63
    5a7e:	cd bf       	out	0x3d, r28	; 61
    5a80:	98 87       	std	Y+8, r25	; 0x08
    5a82:	8f 83       	std	Y+7, r24	; 0x07
    // Define the starting address and the end address
    uint16_t startAddress = 0x00; // Starting address of EEPROM
    5a84:	1e 82       	std	Y+6, r1	; 0x06
    5a86:	1d 82       	std	Y+5, r1	; 0x05
    uint16_t endAddress = 0xFF;   // Ending address of EEPROM (example)
    5a88:	8f ef       	ldi	r24, 0xFF	; 255
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	9c 83       	std	Y+4, r25	; 0x04
    5a8e:	8b 83       	std	Y+3, r24	; 0x03

    // Set the EEPROM address to the start address
    eepromInstance->address = startAddress;
    5a90:	8d 81       	ldd	r24, Y+5	; 0x05
    5a92:	ef 81       	ldd	r30, Y+7	; 0x07
    5a94:	f8 85       	ldd	r31, Y+8	; 0x08
    5a96:	80 83       	st	Z, r24

    // Write the default value (e.g., 0x00) to each address in EEPROM
    for (uint16_t address = startAddress; address <= endAddress; address++) {
    5a98:	8d 81       	ldd	r24, Y+5	; 0x05
    5a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    5a9c:	9a 83       	std	Y+2, r25	; 0x02
    5a9e:	89 83       	std	Y+1, r24	; 0x01
    5aa0:	13 c0       	rjmp	.+38     	; 0x5ac8 <EEPROM_Format+0x5c>
        eepromInstance->data = 0x00;  // Default value
    5aa2:	ef 81       	ldd	r30, Y+7	; 0x07
    5aa4:	f8 85       	ldd	r31, Y+8	; 0x08
    5aa6:	11 82       	std	Z+1, r1	; 0x01
        EEPROM_enuWriteData(eepromInstance);  // Write to EEPROM
    5aa8:	8f 81       	ldd	r24, Y+7	; 0x07
    5aaa:	98 85       	ldd	r25, Y+8	; 0x08
    5aac:	0e 94 b7 2b 	call	0x576e	; 0x576e <EEPROM_enuWriteData>
        eepromInstance->address++;  // Move to the next address
    5ab0:	ef 81       	ldd	r30, Y+7	; 0x07
    5ab2:	f8 85       	ldd	r31, Y+8	; 0x08
    5ab4:	80 81       	ld	r24, Z
    5ab6:	8f 5f       	subi	r24, 0xFF	; 255
    5ab8:	ef 81       	ldd	r30, Y+7	; 0x07
    5aba:	f8 85       	ldd	r31, Y+8	; 0x08
    5abc:	80 83       	st	Z, r24

    // Set the EEPROM address to the start address
    eepromInstance->address = startAddress;

    // Write the default value (e.g., 0x00) to each address in EEPROM
    for (uint16_t address = startAddress; address <= endAddress; address++) {
    5abe:	89 81       	ldd	r24, Y+1	; 0x01
    5ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ac2:	01 96       	adiw	r24, 0x01	; 1
    5ac4:	9a 83       	std	Y+2, r25	; 0x02
    5ac6:	89 83       	std	Y+1, r24	; 0x01
    5ac8:	29 81       	ldd	r18, Y+1	; 0x01
    5aca:	3a 81       	ldd	r19, Y+2	; 0x02
    5acc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ace:	9c 81       	ldd	r25, Y+4	; 0x04
    5ad0:	82 17       	cp	r24, r18
    5ad2:	93 07       	cpc	r25, r19
    5ad4:	30 f7       	brcc	.-52     	; 0x5aa2 <EEPROM_Format+0x36>
        eepromInstance->data = 0x00;  // Default value
        EEPROM_enuWriteData(eepromInstance);  // Write to EEPROM
        eepromInstance->address++;  // Move to the next address
    }
}
    5ad6:	28 96       	adiw	r28, 0x08	; 8
    5ad8:	0f b6       	in	r0, 0x3f	; 63
    5ada:	f8 94       	cli
    5adc:	de bf       	out	0x3e, r29	; 62
    5ade:	0f be       	out	0x3f, r0	; 63
    5ae0:	cd bf       	out	0x3d, r28	; 61
    5ae2:	cf 91       	pop	r28
    5ae4:	df 91       	pop	r29
    5ae6:	08 95       	ret

00005ae8 <Buzzer_voidInit>:
#include "../../MCAL/DIO/DIO_interface.h"
/****************************************************************/



void Buzzer_voidInit(Buzzer_t *Copy_Buzzer){
    5ae8:	df 93       	push	r29
    5aea:	cf 93       	push	r28
    5aec:	00 d0       	rcall	.+0      	; 0x5aee <Buzzer_voidInit+0x6>
    5aee:	cd b7       	in	r28, 0x3d	; 61
    5af0:	de b7       	in	r29, 0x3e	; 62
    5af2:	9a 83       	std	Y+2, r25	; 0x02
    5af4:	89 83       	std	Y+1, r24	; 0x01
	 DIO_enuSetPinDirection(Copy_Buzzer->PortID, Copy_Buzzer->PortID, DIO_u8OUTPUT);
    5af6:	e9 81       	ldd	r30, Y+1	; 0x01
    5af8:	fa 81       	ldd	r31, Y+2	; 0x02
    5afa:	80 81       	ld	r24, Z
    5afc:	e9 81       	ldd	r30, Y+1	; 0x01
    5afe:	fa 81       	ldd	r31, Y+2	; 0x02
    5b00:	90 81       	ld	r25, Z
    5b02:	69 2f       	mov	r22, r25
    5b04:	41 e0       	ldi	r20, 0x01	; 1
    5b06:	0e 94 9d 18 	call	0x313a	; 0x313a <DIO_enuSetPinDirection>
}
    5b0a:	0f 90       	pop	r0
    5b0c:	0f 90       	pop	r0
    5b0e:	cf 91       	pop	r28
    5b10:	df 91       	pop	r29
    5b12:	08 95       	ret

00005b14 <Buzzer_voidON>:

void Buzzer_voidON(Buzzer_t *Copy_Buzzer){
    5b14:	df 93       	push	r29
    5b16:	cf 93       	push	r28
    5b18:	00 d0       	rcall	.+0      	; 0x5b1a <Buzzer_voidON+0x6>
    5b1a:	cd b7       	in	r28, 0x3d	; 61
    5b1c:	de b7       	in	r29, 0x3e	; 62
    5b1e:	9a 83       	std	Y+2, r25	; 0x02
    5b20:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID, DIO_u8HIGH);
    5b22:	e9 81       	ldd	r30, Y+1	; 0x01
    5b24:	fa 81       	ldd	r31, Y+2	; 0x02
    5b26:	80 81       	ld	r24, Z
    5b28:	e9 81       	ldd	r30, Y+1	; 0x01
    5b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    5b2c:	91 81       	ldd	r25, Z+1	; 0x01
    5b2e:	69 2f       	mov	r22, r25
    5b30:	41 e0       	ldi	r20, 0x01	; 1
    5b32:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
}
    5b36:	0f 90       	pop	r0
    5b38:	0f 90       	pop	r0
    5b3a:	cf 91       	pop	r28
    5b3c:	df 91       	pop	r29
    5b3e:	08 95       	ret

00005b40 <Buzzer_voidOFF>:

void Buzzer_voidOFF(Buzzer_t *Copy_Buzzer){
    5b40:	df 93       	push	r29
    5b42:	cf 93       	push	r28
    5b44:	00 d0       	rcall	.+0      	; 0x5b46 <Buzzer_voidOFF+0x6>
    5b46:	cd b7       	in	r28, 0x3d	; 61
    5b48:	de b7       	in	r29, 0x3e	; 62
    5b4a:	9a 83       	std	Y+2, r25	; 0x02
    5b4c:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuSetPinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID, DIO_u8LOW);
    5b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    5b50:	fa 81       	ldd	r31, Y+2	; 0x02
    5b52:	80 81       	ld	r24, Z
    5b54:	e9 81       	ldd	r30, Y+1	; 0x01
    5b56:	fa 81       	ldd	r31, Y+2	; 0x02
    5b58:	91 81       	ldd	r25, Z+1	; 0x01
    5b5a:	69 2f       	mov	r22, r25
    5b5c:	40 e0       	ldi	r20, 0x00	; 0
    5b5e:	0e 94 99 19 	call	0x3332	; 0x3332 <DIO_enuSetPinValue>
}
    5b62:	0f 90       	pop	r0
    5b64:	0f 90       	pop	r0
    5b66:	cf 91       	pop	r28
    5b68:	df 91       	pop	r29
    5b6a:	08 95       	ret

00005b6c <Buzzer_voidTOGGLE>:

void Buzzer_voidTOGGLE(Buzzer_t *Copy_Buzzer){
    5b6c:	df 93       	push	r29
    5b6e:	cf 93       	push	r28
    5b70:	00 d0       	rcall	.+0      	; 0x5b72 <Buzzer_voidTOGGLE+0x6>
    5b72:	cd b7       	in	r28, 0x3d	; 61
    5b74:	de b7       	in	r29, 0x3e	; 62
    5b76:	9a 83       	std	Y+2, r25	; 0x02
    5b78:	89 83       	std	Y+1, r24	; 0x01
	DIO_enuTogglePinValue(Copy_Buzzer->PortID, Copy_Buzzer->PinID);
    5b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    5b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    5b7e:	80 81       	ld	r24, Z
    5b80:	e9 81       	ldd	r30, Y+1	; 0x01
    5b82:	fa 81       	ldd	r31, Y+2	; 0x02
    5b84:	91 81       	ldd	r25, Z+1	; 0x01
    5b86:	69 2f       	mov	r22, r25
    5b88:	0e 94 36 1b 	call	0x366c	; 0x366c <DIO_enuTogglePinValue>
}
    5b8c:	0f 90       	pop	r0
    5b8e:	0f 90       	pop	r0
    5b90:	cf 91       	pop	r28
    5b92:	df 91       	pop	r29
    5b94:	08 95       	ret

00005b96 <main>:
#define ultraSonic_TRIG_PORT			DIO_u8PortC
#define ultraSonic_TRIG_PIN				DIO_u8PIN1
/*****************************************************************/


int main(){
    5b96:	df 93       	push	r29
    5b98:	cf 93       	push	r28
    5b9a:	cd b7       	in	r28, 0x3d	; 61
    5b9c:	de b7       	in	r29, 0x3e	; 62
    5b9e:	66 97       	sbiw	r28, 0x16	; 22
    5ba0:	0f b6       	in	r0, 0x3f	; 63
    5ba2:	f8 94       	cli
    5ba4:	de bf       	out	0x3e, r29	; 62
    5ba6:	0f be       	out	0x3f, r0	; 63
    5ba8:	cd bf       	out	0x3d, r28	; 61
	LCD_enuInit();
    5baa:	0e 94 1d 21 	call	0x423a	; 0x423a <LCD_enuInit>


    ultraSonic_t ultraSonic_Sensor ;
    ultraSonic_Sensor.ECHO_PORT = ultraSonic_ECHO_PORT;
    5bae:	82 e0       	ldi	r24, 0x02	; 2
    5bb0:	89 8b       	std	Y+17, r24	; 0x11
    ultraSonic_Sensor.ECHO_PIN = ultraSonic_ECHO_PIN;
    5bb2:	1a 8a       	std	Y+18, r1	; 0x12

    ultraSonic_Sensor.TRIG_PORT = ultraSonic_TRIG_PORT;
    5bb4:	82 e0       	ldi	r24, 0x02	; 2
    5bb6:	8b 8b       	std	Y+19, r24	; 0x13
    ultraSonic_Sensor.TRIG_PIN = ultraSonic_TRIG_PIN;
    5bb8:	81 e0       	ldi	r24, 0x01	; 1
    5bba:	8c 8b       	std	Y+20, r24	; 0x14

    ultraSonic_Sensor.measuredDistance_InCm = 0;
    5bbc:	1e 8a       	std	Y+22, r1	; 0x16
    5bbe:	1d 8a       	std	Y+21, r1	; 0x15

    // Initialize the ultrasonic sensor
    ultraSonic_enuInit(ultraSonic_Sensor);
    5bc0:	49 89       	ldd	r20, Y+17	; 0x11
    5bc2:	5a 89       	ldd	r21, Y+18	; 0x12
    5bc4:	6b 89       	ldd	r22, Y+19	; 0x13
    5bc6:	7c 89       	ldd	r23, Y+20	; 0x14
    5bc8:	8d 89       	ldd	r24, Y+21	; 0x15
    5bca:	9e 89       	ldd	r25, Y+22	; 0x16
    5bcc:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <ultraSonic_enuInit>



	while(1){
		ultraSonic_u16GetDistance(&ultraSonic_Sensor);
    5bd0:	ce 01       	movw	r24, r28
    5bd2:	41 96       	adiw	r24, 0x11	; 17
    5bd4:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <ultraSonic_u16GetDistance>
        uint16_t distanceFront = ultraSonic_Sensor.measuredDistance_InCm;
    5bd8:	8d 89       	ldd	r24, Y+21	; 0x15
    5bda:	9e 89       	ldd	r25, Y+22	; 0x16
    5bdc:	98 8b       	std	Y+16, r25	; 0x10
    5bde:	8f 87       	std	Y+15, r24	; 0x0f


        // Display distance on LCD
        LCD_enuClearDisplay();
    5be0:	81 e0       	ldi	r24, 0x01	; 1
    5be2:	0e 94 bd 24 	call	0x497a	; 0x497a <LCD_enuSendCommand>
        LCD_u8SendString("Dist:");
    5be6:	80 e6       	ldi	r24, 0x60	; 96
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	0e 94 d9 24 	call	0x49b2	; 0x49b2 <LCD_u8SendString>
        LCD_enuIntegerToString(distanceFront, 10);
    5bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    5bf0:	98 89       	ldd	r25, Y+16	; 0x10
    5bf2:	cc 01       	movw	r24, r24
    5bf4:	a0 e0       	ldi	r26, 0x00	; 0
    5bf6:	b0 e0       	ldi	r27, 0x00	; 0
    5bf8:	bc 01       	movw	r22, r24
    5bfa:	cd 01       	movw	r24, r26
    5bfc:	4a e0       	ldi	r20, 0x0A	; 10
    5bfe:	0e 94 13 25 	call	0x4a26	; 0x4a26 <LCD_enuIntegerToString>
    5c02:	80 e0       	ldi	r24, 0x00	; 0
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	aa ef       	ldi	r26, 0xFA	; 250
    5c08:	b3 e4       	ldi	r27, 0x43	; 67
    5c0a:	8b 87       	std	Y+11, r24	; 0x0b
    5c0c:	9c 87       	std	Y+12, r25	; 0x0c
    5c0e:	ad 87       	std	Y+13, r26	; 0x0d
    5c10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c12:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c14:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c16:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c18:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c1a:	20 e0       	ldi	r18, 0x00	; 0
    5c1c:	30 e0       	ldi	r19, 0x00	; 0
    5c1e:	4a e7       	ldi	r20, 0x7A	; 122
    5c20:	55 e4       	ldi	r21, 0x45	; 69
    5c22:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    5c26:	dc 01       	movw	r26, r24
    5c28:	cb 01       	movw	r24, r22
    5c2a:	8f 83       	std	Y+7, r24	; 0x07
    5c2c:	98 87       	std	Y+8, r25	; 0x08
    5c2e:	a9 87       	std	Y+9, r26	; 0x09
    5c30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c32:	6f 81       	ldd	r22, Y+7	; 0x07
    5c34:	78 85       	ldd	r23, Y+8	; 0x08
    5c36:	89 85       	ldd	r24, Y+9	; 0x09
    5c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c3a:	20 e0       	ldi	r18, 0x00	; 0
    5c3c:	30 e0       	ldi	r19, 0x00	; 0
    5c3e:	40 e8       	ldi	r20, 0x80	; 128
    5c40:	5f e3       	ldi	r21, 0x3F	; 63
    5c42:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ltsf2>
    5c46:	88 23       	and	r24, r24
    5c48:	2c f4       	brge	.+10     	; 0x5c54 <main+0xbe>
		__ticks = 1;
    5c4a:	81 e0       	ldi	r24, 0x01	; 1
    5c4c:	90 e0       	ldi	r25, 0x00	; 0
    5c4e:	9e 83       	std	Y+6, r25	; 0x06
    5c50:	8d 83       	std	Y+5, r24	; 0x05
    5c52:	3f c0       	rjmp	.+126    	; 0x5cd2 <main+0x13c>
	else if (__tmp > 65535)
    5c54:	6f 81       	ldd	r22, Y+7	; 0x07
    5c56:	78 85       	ldd	r23, Y+8	; 0x08
    5c58:	89 85       	ldd	r24, Y+9	; 0x09
    5c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c5c:	20 e0       	ldi	r18, 0x00	; 0
    5c5e:	3f ef       	ldi	r19, 0xFF	; 255
    5c60:	4f e7       	ldi	r20, 0x7F	; 127
    5c62:	57 e4       	ldi	r21, 0x47	; 71
    5c64:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__gtsf2>
    5c68:	18 16       	cp	r1, r24
    5c6a:	4c f5       	brge	.+82     	; 0x5cbe <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c74:	20 e0       	ldi	r18, 0x00	; 0
    5c76:	30 e0       	ldi	r19, 0x00	; 0
    5c78:	40 e2       	ldi	r20, 0x20	; 32
    5c7a:	51 e4       	ldi	r21, 0x41	; 65
    5c7c:	0e 94 0f 03 	call	0x61e	; 0x61e <__mulsf3>
    5c80:	dc 01       	movw	r26, r24
    5c82:	cb 01       	movw	r24, r22
    5c84:	bc 01       	movw	r22, r24
    5c86:	cd 01       	movw	r24, r26
    5c88:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    5c8c:	dc 01       	movw	r26, r24
    5c8e:	cb 01       	movw	r24, r22
    5c90:	9e 83       	std	Y+6, r25	; 0x06
    5c92:	8d 83       	std	Y+5, r24	; 0x05
    5c94:	0f c0       	rjmp	.+30     	; 0x5cb4 <main+0x11e>
    5c96:	80 e9       	ldi	r24, 0x90	; 144
    5c98:	91 e0       	ldi	r25, 0x01	; 1
    5c9a:	9c 83       	std	Y+4, r25	; 0x04
    5c9c:	8b 83       	std	Y+3, r24	; 0x03
    5c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    5ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    5ca2:	01 97       	sbiw	r24, 0x01	; 1
    5ca4:	f1 f7       	brne	.-4      	; 0x5ca2 <main+0x10c>
    5ca6:	9c 83       	std	Y+4, r25	; 0x04
    5ca8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5caa:	8d 81       	ldd	r24, Y+5	; 0x05
    5cac:	9e 81       	ldd	r25, Y+6	; 0x06
    5cae:	01 97       	sbiw	r24, 0x01	; 1
    5cb0:	9e 83       	std	Y+6, r25	; 0x06
    5cb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    5cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    5cb8:	00 97       	sbiw	r24, 0x00	; 0
    5cba:	69 f7       	brne	.-38     	; 0x5c96 <main+0x100>
    5cbc:	89 cf       	rjmp	.-238    	; 0x5bd0 <main+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    5cc0:	78 85       	ldd	r23, Y+8	; 0x08
    5cc2:	89 85       	ldd	r24, Y+9	; 0x09
    5cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    5cc6:	0e 94 39 01 	call	0x272	; 0x272 <__fixunssfsi>
    5cca:	dc 01       	movw	r26, r24
    5ccc:	cb 01       	movw	r24, r22
    5cce:	9e 83       	std	Y+6, r25	; 0x06
    5cd0:	8d 83       	std	Y+5, r24	; 0x05
    5cd2:	8d 81       	ldd	r24, Y+5	; 0x05
    5cd4:	9e 81       	ldd	r25, Y+6	; 0x06
    5cd6:	9a 83       	std	Y+2, r25	; 0x02
    5cd8:	89 83       	std	Y+1, r24	; 0x01
    5cda:	89 81       	ldd	r24, Y+1	; 0x01
    5cdc:	9a 81       	ldd	r25, Y+2	; 0x02
    5cde:	01 97       	sbiw	r24, 0x01	; 1
    5ce0:	f1 f7       	brne	.-4      	; 0x5cde <main+0x148>
    5ce2:	9a 83       	std	Y+2, r25	; 0x02
    5ce4:	89 83       	std	Y+1, r24	; 0x01
    5ce6:	74 cf       	rjmp	.-280    	; 0x5bd0 <main+0x3a>

00005ce8 <__mulsi3>:
    5ce8:	62 9f       	mul	r22, r18
    5cea:	d0 01       	movw	r26, r0
    5cec:	73 9f       	mul	r23, r19
    5cee:	f0 01       	movw	r30, r0
    5cf0:	82 9f       	mul	r24, r18
    5cf2:	e0 0d       	add	r30, r0
    5cf4:	f1 1d       	adc	r31, r1
    5cf6:	64 9f       	mul	r22, r20
    5cf8:	e0 0d       	add	r30, r0
    5cfa:	f1 1d       	adc	r31, r1
    5cfc:	92 9f       	mul	r25, r18
    5cfe:	f0 0d       	add	r31, r0
    5d00:	83 9f       	mul	r24, r19
    5d02:	f0 0d       	add	r31, r0
    5d04:	74 9f       	mul	r23, r20
    5d06:	f0 0d       	add	r31, r0
    5d08:	65 9f       	mul	r22, r21
    5d0a:	f0 0d       	add	r31, r0
    5d0c:	99 27       	eor	r25, r25
    5d0e:	72 9f       	mul	r23, r18
    5d10:	b0 0d       	add	r27, r0
    5d12:	e1 1d       	adc	r30, r1
    5d14:	f9 1f       	adc	r31, r25
    5d16:	63 9f       	mul	r22, r19
    5d18:	b0 0d       	add	r27, r0
    5d1a:	e1 1d       	adc	r30, r1
    5d1c:	f9 1f       	adc	r31, r25
    5d1e:	bd 01       	movw	r22, r26
    5d20:	cf 01       	movw	r24, r30
    5d22:	11 24       	eor	r1, r1
    5d24:	08 95       	ret

00005d26 <__udivmodhi4>:
    5d26:	aa 1b       	sub	r26, r26
    5d28:	bb 1b       	sub	r27, r27
    5d2a:	51 e1       	ldi	r21, 0x11	; 17
    5d2c:	07 c0       	rjmp	.+14     	; 0x5d3c <__udivmodhi4_ep>

00005d2e <__udivmodhi4_loop>:
    5d2e:	aa 1f       	adc	r26, r26
    5d30:	bb 1f       	adc	r27, r27
    5d32:	a6 17       	cp	r26, r22
    5d34:	b7 07       	cpc	r27, r23
    5d36:	10 f0       	brcs	.+4      	; 0x5d3c <__udivmodhi4_ep>
    5d38:	a6 1b       	sub	r26, r22
    5d3a:	b7 0b       	sbc	r27, r23

00005d3c <__udivmodhi4_ep>:
    5d3c:	88 1f       	adc	r24, r24
    5d3e:	99 1f       	adc	r25, r25
    5d40:	5a 95       	dec	r21
    5d42:	a9 f7       	brne	.-22     	; 0x5d2e <__udivmodhi4_loop>
    5d44:	80 95       	com	r24
    5d46:	90 95       	com	r25
    5d48:	bc 01       	movw	r22, r24
    5d4a:	cd 01       	movw	r24, r26
    5d4c:	08 95       	ret

00005d4e <__udivmodsi4>:
    5d4e:	a1 e2       	ldi	r26, 0x21	; 33
    5d50:	1a 2e       	mov	r1, r26
    5d52:	aa 1b       	sub	r26, r26
    5d54:	bb 1b       	sub	r27, r27
    5d56:	fd 01       	movw	r30, r26
    5d58:	0d c0       	rjmp	.+26     	; 0x5d74 <__udivmodsi4_ep>

00005d5a <__udivmodsi4_loop>:
    5d5a:	aa 1f       	adc	r26, r26
    5d5c:	bb 1f       	adc	r27, r27
    5d5e:	ee 1f       	adc	r30, r30
    5d60:	ff 1f       	adc	r31, r31
    5d62:	a2 17       	cp	r26, r18
    5d64:	b3 07       	cpc	r27, r19
    5d66:	e4 07       	cpc	r30, r20
    5d68:	f5 07       	cpc	r31, r21
    5d6a:	20 f0       	brcs	.+8      	; 0x5d74 <__udivmodsi4_ep>
    5d6c:	a2 1b       	sub	r26, r18
    5d6e:	b3 0b       	sbc	r27, r19
    5d70:	e4 0b       	sbc	r30, r20
    5d72:	f5 0b       	sbc	r31, r21

00005d74 <__udivmodsi4_ep>:
    5d74:	66 1f       	adc	r22, r22
    5d76:	77 1f       	adc	r23, r23
    5d78:	88 1f       	adc	r24, r24
    5d7a:	99 1f       	adc	r25, r25
    5d7c:	1a 94       	dec	r1
    5d7e:	69 f7       	brne	.-38     	; 0x5d5a <__udivmodsi4_loop>
    5d80:	60 95       	com	r22
    5d82:	70 95       	com	r23
    5d84:	80 95       	com	r24
    5d86:	90 95       	com	r25
    5d88:	9b 01       	movw	r18, r22
    5d8a:	ac 01       	movw	r20, r24
    5d8c:	bd 01       	movw	r22, r26
    5d8e:	cf 01       	movw	r24, r30
    5d90:	08 95       	ret

00005d92 <__divmodsi4>:
    5d92:	97 fb       	bst	r25, 7
    5d94:	09 2e       	mov	r0, r25
    5d96:	05 26       	eor	r0, r21
    5d98:	0e d0       	rcall	.+28     	; 0x5db6 <__divmodsi4_neg1>
    5d9a:	57 fd       	sbrc	r21, 7
    5d9c:	04 d0       	rcall	.+8      	; 0x5da6 <__divmodsi4_neg2>
    5d9e:	d7 df       	rcall	.-82     	; 0x5d4e <__udivmodsi4>
    5da0:	0a d0       	rcall	.+20     	; 0x5db6 <__divmodsi4_neg1>
    5da2:	00 1c       	adc	r0, r0
    5da4:	38 f4       	brcc	.+14     	; 0x5db4 <__divmodsi4_exit>

00005da6 <__divmodsi4_neg2>:
    5da6:	50 95       	com	r21
    5da8:	40 95       	com	r20
    5daa:	30 95       	com	r19
    5dac:	21 95       	neg	r18
    5dae:	3f 4f       	sbci	r19, 0xFF	; 255
    5db0:	4f 4f       	sbci	r20, 0xFF	; 255
    5db2:	5f 4f       	sbci	r21, 0xFF	; 255

00005db4 <__divmodsi4_exit>:
    5db4:	08 95       	ret

00005db6 <__divmodsi4_neg1>:
    5db6:	f6 f7       	brtc	.-4      	; 0x5db4 <__divmodsi4_exit>
    5db8:	90 95       	com	r25
    5dba:	80 95       	com	r24
    5dbc:	70 95       	com	r23
    5dbe:	61 95       	neg	r22
    5dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc2:	8f 4f       	sbci	r24, 0xFF	; 255
    5dc4:	9f 4f       	sbci	r25, 0xFF	; 255
    5dc6:	08 95       	ret

00005dc8 <__prologue_saves__>:
    5dc8:	2f 92       	push	r2
    5dca:	3f 92       	push	r3
    5dcc:	4f 92       	push	r4
    5dce:	5f 92       	push	r5
    5dd0:	6f 92       	push	r6
    5dd2:	7f 92       	push	r7
    5dd4:	8f 92       	push	r8
    5dd6:	9f 92       	push	r9
    5dd8:	af 92       	push	r10
    5dda:	bf 92       	push	r11
    5ddc:	cf 92       	push	r12
    5dde:	df 92       	push	r13
    5de0:	ef 92       	push	r14
    5de2:	ff 92       	push	r15
    5de4:	0f 93       	push	r16
    5de6:	1f 93       	push	r17
    5de8:	cf 93       	push	r28
    5dea:	df 93       	push	r29
    5dec:	cd b7       	in	r28, 0x3d	; 61
    5dee:	de b7       	in	r29, 0x3e	; 62
    5df0:	ca 1b       	sub	r28, r26
    5df2:	db 0b       	sbc	r29, r27
    5df4:	0f b6       	in	r0, 0x3f	; 63
    5df6:	f8 94       	cli
    5df8:	de bf       	out	0x3e, r29	; 62
    5dfa:	0f be       	out	0x3f, r0	; 63
    5dfc:	cd bf       	out	0x3d, r28	; 61
    5dfe:	09 94       	ijmp

00005e00 <__epilogue_restores__>:
    5e00:	2a 88       	ldd	r2, Y+18	; 0x12
    5e02:	39 88       	ldd	r3, Y+17	; 0x11
    5e04:	48 88       	ldd	r4, Y+16	; 0x10
    5e06:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e08:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e0a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e0c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e10:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e12:	b9 84       	ldd	r11, Y+9	; 0x09
    5e14:	c8 84       	ldd	r12, Y+8	; 0x08
    5e16:	df 80       	ldd	r13, Y+7	; 0x07
    5e18:	ee 80       	ldd	r14, Y+6	; 0x06
    5e1a:	fd 80       	ldd	r15, Y+5	; 0x05
    5e1c:	0c 81       	ldd	r16, Y+4	; 0x04
    5e1e:	1b 81       	ldd	r17, Y+3	; 0x03
    5e20:	aa 81       	ldd	r26, Y+2	; 0x02
    5e22:	b9 81       	ldd	r27, Y+1	; 0x01
    5e24:	ce 0f       	add	r28, r30
    5e26:	d1 1d       	adc	r29, r1
    5e28:	0f b6       	in	r0, 0x3f	; 63
    5e2a:	f8 94       	cli
    5e2c:	de bf       	out	0x3e, r29	; 62
    5e2e:	0f be       	out	0x3f, r0	; 63
    5e30:	cd bf       	out	0x3d, r28	; 61
    5e32:	ed 01       	movw	r28, r26
    5e34:	08 95       	ret

00005e36 <round>:
    5e36:	50 d0       	rcall	.+160    	; 0x5ed8 <__fp_splitA>
    5e38:	e0 f0       	brcs	.+56     	; 0x5e72 <round+0x3c>
    5e3a:	9e 37       	cpi	r25, 0x7E	; 126
    5e3c:	d8 f0       	brcs	.+54     	; 0x5e74 <round+0x3e>
    5e3e:	96 39       	cpi	r25, 0x96	; 150
    5e40:	b8 f4       	brcc	.+46     	; 0x5e70 <round+0x3a>
    5e42:	9e 38       	cpi	r25, 0x8E	; 142
    5e44:	48 f4       	brcc	.+18     	; 0x5e58 <round+0x22>
    5e46:	67 2f       	mov	r22, r23
    5e48:	78 2f       	mov	r23, r24
    5e4a:	88 27       	eor	r24, r24
    5e4c:	98 5f       	subi	r25, 0xF8	; 248
    5e4e:	f9 cf       	rjmp	.-14     	; 0x5e42 <round+0xc>
    5e50:	86 95       	lsr	r24
    5e52:	77 95       	ror	r23
    5e54:	67 95       	ror	r22
    5e56:	93 95       	inc	r25
    5e58:	95 39       	cpi	r25, 0x95	; 149
    5e5a:	d0 f3       	brcs	.-12     	; 0x5e50 <round+0x1a>
    5e5c:	b6 2f       	mov	r27, r22
    5e5e:	b1 70       	andi	r27, 0x01	; 1
    5e60:	6b 0f       	add	r22, r27
    5e62:	71 1d       	adc	r23, r1
    5e64:	81 1d       	adc	r24, r1
    5e66:	20 f4       	brcc	.+8      	; 0x5e70 <round+0x3a>
    5e68:	87 95       	ror	r24
    5e6a:	77 95       	ror	r23
    5e6c:	67 95       	ror	r22
    5e6e:	93 95       	inc	r25
    5e70:	02 c0       	rjmp	.+4      	; 0x5e76 <__fp_mintl>
    5e72:	1c c0       	rjmp	.+56     	; 0x5eac <__fp_mpack>
    5e74:	4c c0       	rjmp	.+152    	; 0x5f0e <__fp_szero>

00005e76 <__fp_mintl>:
    5e76:	88 23       	and	r24, r24
    5e78:	71 f4       	brne	.+28     	; 0x5e96 <__fp_mintl+0x20>
    5e7a:	77 23       	and	r23, r23
    5e7c:	21 f0       	breq	.+8      	; 0x5e86 <__fp_mintl+0x10>
    5e7e:	98 50       	subi	r25, 0x08	; 8
    5e80:	87 2b       	or	r24, r23
    5e82:	76 2f       	mov	r23, r22
    5e84:	07 c0       	rjmp	.+14     	; 0x5e94 <__fp_mintl+0x1e>
    5e86:	66 23       	and	r22, r22
    5e88:	11 f4       	brne	.+4      	; 0x5e8e <__fp_mintl+0x18>
    5e8a:	99 27       	eor	r25, r25
    5e8c:	0d c0       	rjmp	.+26     	; 0x5ea8 <__fp_mintl+0x32>
    5e8e:	90 51       	subi	r25, 0x10	; 16
    5e90:	86 2b       	or	r24, r22
    5e92:	70 e0       	ldi	r23, 0x00	; 0
    5e94:	60 e0       	ldi	r22, 0x00	; 0
    5e96:	2a f0       	brmi	.+10     	; 0x5ea2 <__fp_mintl+0x2c>
    5e98:	9a 95       	dec	r25
    5e9a:	66 0f       	add	r22, r22
    5e9c:	77 1f       	adc	r23, r23
    5e9e:	88 1f       	adc	r24, r24
    5ea0:	da f7       	brpl	.-10     	; 0x5e98 <__fp_mintl+0x22>
    5ea2:	88 0f       	add	r24, r24
    5ea4:	96 95       	lsr	r25
    5ea6:	87 95       	ror	r24
    5ea8:	97 f9       	bld	r25, 7
    5eaa:	08 95       	ret

00005eac <__fp_mpack>:
    5eac:	9f 3f       	cpi	r25, 0xFF	; 255
    5eae:	31 f0       	breq	.+12     	; 0x5ebc <__fp_mpack_finite+0xc>

00005eb0 <__fp_mpack_finite>:
    5eb0:	91 50       	subi	r25, 0x01	; 1
    5eb2:	20 f4       	brcc	.+8      	; 0x5ebc <__fp_mpack_finite+0xc>
    5eb4:	87 95       	ror	r24
    5eb6:	77 95       	ror	r23
    5eb8:	67 95       	ror	r22
    5eba:	b7 95       	ror	r27
    5ebc:	88 0f       	add	r24, r24
    5ebe:	91 1d       	adc	r25, r1
    5ec0:	96 95       	lsr	r25
    5ec2:	87 95       	ror	r24
    5ec4:	97 f9       	bld	r25, 7
    5ec6:	08 95       	ret

00005ec8 <__fp_split3>:
    5ec8:	57 fd       	sbrc	r21, 7
    5eca:	90 58       	subi	r25, 0x80	; 128
    5ecc:	44 0f       	add	r20, r20
    5ece:	55 1f       	adc	r21, r21
    5ed0:	59 f0       	breq	.+22     	; 0x5ee8 <__fp_splitA+0x10>
    5ed2:	5f 3f       	cpi	r21, 0xFF	; 255
    5ed4:	71 f0       	breq	.+28     	; 0x5ef2 <__fp_splitA+0x1a>
    5ed6:	47 95       	ror	r20

00005ed8 <__fp_splitA>:
    5ed8:	88 0f       	add	r24, r24
    5eda:	97 fb       	bst	r25, 7
    5edc:	99 1f       	adc	r25, r25
    5ede:	61 f0       	breq	.+24     	; 0x5ef8 <__fp_splitA+0x20>
    5ee0:	9f 3f       	cpi	r25, 0xFF	; 255
    5ee2:	79 f0       	breq	.+30     	; 0x5f02 <__fp_splitA+0x2a>
    5ee4:	87 95       	ror	r24
    5ee6:	08 95       	ret
    5ee8:	12 16       	cp	r1, r18
    5eea:	13 06       	cpc	r1, r19
    5eec:	14 06       	cpc	r1, r20
    5eee:	55 1f       	adc	r21, r21
    5ef0:	f2 cf       	rjmp	.-28     	; 0x5ed6 <__fp_split3+0xe>
    5ef2:	46 95       	lsr	r20
    5ef4:	f1 df       	rcall	.-30     	; 0x5ed8 <__fp_splitA>
    5ef6:	08 c0       	rjmp	.+16     	; 0x5f08 <__fp_splitA+0x30>
    5ef8:	16 16       	cp	r1, r22
    5efa:	17 06       	cpc	r1, r23
    5efc:	18 06       	cpc	r1, r24
    5efe:	99 1f       	adc	r25, r25
    5f00:	f1 cf       	rjmp	.-30     	; 0x5ee4 <__fp_splitA+0xc>
    5f02:	86 95       	lsr	r24
    5f04:	71 05       	cpc	r23, r1
    5f06:	61 05       	cpc	r22, r1
    5f08:	08 94       	sec
    5f0a:	08 95       	ret

00005f0c <__fp_zero>:
    5f0c:	e8 94       	clt

00005f0e <__fp_szero>:
    5f0e:	bb 27       	eor	r27, r27
    5f10:	66 27       	eor	r22, r22
    5f12:	77 27       	eor	r23, r23
    5f14:	cb 01       	movw	r24, r22
    5f16:	97 f9       	bld	r25, 7
    5f18:	08 95       	ret

00005f1a <_exit>:
    5f1a:	f8 94       	cli

00005f1c <__stop_program>:
    5f1c:	ff cf       	rjmp	.-2      	; 0x5f1c <__stop_program>
